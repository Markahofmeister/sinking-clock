
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062e0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800639c  0800639c  0000739c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006468  08006468  00008074  2**0
                  CONTENTS
  4 .ARM          00000000  08006468  08006468  00008074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006468  08006468  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006468  08006468  00007468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800646c  0800646c  0000746c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006470  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000074  080064e4  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080064e4  000082a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cc5  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bc5  00000000  00000000  0001ad61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  0001d928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e31  00000000  00000000  0001eb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018116  00000000  00000000  0001f991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016614  00000000  00000000  00037aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098479  00000000  00000000  0004e0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000e6534  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041f0  00000000  00000000  000e65bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000ea7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006384 	.word	0x08006384

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	08006384 	.word	0x08006384

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231e      	movs	r3, #30
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-high hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	899b      	ldrh	r3, [r3, #12]
 8000258:	2201      	movs	r2, #1
 800025a:	0019      	movs	r1, r3
 800025c:	f002 fba3 	bl	80029a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	899b      	ldrh	r3, [r3, #12]
 800026a:	2200      	movs	r2, #0
 800026c:	0019      	movs	r1, r3
 800026e:	f002 fb9a 	bl	80029a6 <HAL_GPIO_WritePin>

	/*
	 *  Delay for 500 ms using hardware timer
	 */
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f005 f884 	bl	8005384 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	0018      	movs	r0, r3
 8000282:	f005 f833 	bl	80052ec <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028e:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	2380      	movs	r3, #128	@ 0x80
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f5      	bcc.n	8000292 <capTouch_Init+0x76>

    // Determines the number of times to try each initialization step
	uint8_t numTries = 3;
 80002a6:	231f      	movs	r3, #31
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2203      	movs	r2, #3
 80002ac:	701a      	strb	r2, [r3, #0]

	// Verify device ID
		uint8_t deviceIDRet = 0x00;
 80002ae:	2317      	movs	r3, #23
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]

		while(numTries != 0) {
 80002b6:	e014      	b.n	80002e2 <capTouch_Init+0xc6>
			halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b8:	251e      	movs	r5, #30
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	2317      	movs	r3, #23
 80002be:	18fa      	adds	r2, r7, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ad 	bl	8000424 <capTouch_ReadDeviceID>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d00b      	beq.n	80002ee <capTouch_Init+0xd2>
				break;

			numTries--;
 80002d6:	211f      	movs	r1, #31
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	3a01      	subs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80002e2:	231f      	movs	r3, #31
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1e5      	bne.n	80002b8 <capTouch_Init+0x9c>
 80002ec:	e000      	b.n	80002f0 <capTouch_Init+0xd4>
				break;
 80002ee:	46c0      	nop			@ (mov r8, r8)
		}
		if(deviceIDRet != DEVICE_ID || numTries == 0) {
 80002f0:	2317      	movs	r3, #23
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80002f8:	d104      	bne.n	8000304 <capTouch_Init+0xe8>
 80002fa:	231f      	movs	r3, #31
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <capTouch_Init+0xec>
			return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e089      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->deviceID = deviceIDRet;
 8000308:	2317      	movs	r3, #23
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	739a      	strb	r2, [r3, #14]

		numTries = 3;
 8000312:	231f      	movs	r3, #31
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	2203      	movs	r2, #3
 8000318:	701a      	strb	r2, [r3, #0]

	// Force Device Recalibration
		while(numTries != 0) {
 800031a:	e019      	b.n	8000350 <capTouch_Init+0x134>
			halRet = capTouch_Recalibrate(capTouch);
 800031c:	231e      	movs	r3, #30
 800031e:	18fc      	adds	r4, r7, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	0018      	movs	r0, r3
 8000324:	f000 f8c0 	bl	80004a8 <capTouch_Recalibrate>
 8000328:	0003      	movs	r3, r0
 800032a:	7023      	strb	r3, [r4, #0]

			// Wait until calibration sequence completes
			while(capTouch_checkCal(capTouch)) {}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f8db 	bl	80004ec <capTouch_checkCal>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d1f9      	bne.n	800032e <capTouch_Init+0x112>

			if (halRet == HAL_OK)
 800033a:	231e      	movs	r3, #30
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00b      	beq.n	800035c <capTouch_Init+0x140>
				break;

			numTries--;
 8000344:	211f      	movs	r1, #31
 8000346:	187b      	adds	r3, r7, r1
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	187b      	adds	r3, r7, r1
 800034c:	3a01      	subs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 8000350:	231f      	movs	r3, #31
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1e0      	bne.n	800031c <capTouch_Init+0x100>
 800035a:	e000      	b.n	800035e <capTouch_Init+0x142>
				break;
 800035c:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 800035e:	231f      	movs	r3, #31
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d101      	bne.n	800036c <capTouch_Init+0x150>
			return 2;
 8000368:	2302      	movs	r3, #2
 800036a:	e057      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 800036c:	231f      	movs	r3, #31
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2203      	movs	r2, #3
 8000372:	701a      	strb	r2, [r3, #0]

	// Get initial reading of channels
		while(numTries != 0) {
 8000374:	e011      	b.n	800039a <capTouch_Init+0x17e>

			halRet = capTouch_readChannels(capTouch);
 8000376:	251e      	movs	r5, #30
 8000378:	197c      	adds	r4, r7, r5
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	0018      	movs	r0, r3
 800037e:	f000 f8f9 	bl	8000574 <capTouch_readChannels>
 8000382:	0003      	movs	r3, r0
 8000384:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 8000386:	197b      	adds	r3, r7, r5
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <capTouch_Init+0x18a>
				break;

			numTries--;
 800038e:	211f      	movs	r1, #31
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	3a01      	subs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 800039a:	231f      	movs	r3, #31
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e8      	bne.n	8000376 <capTouch_Init+0x15a>
 80003a4:	e000      	b.n	80003a8 <capTouch_Init+0x18c>
				break;
 80003a6:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003a8:	231f      	movs	r3, #31
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <capTouch_Init+0x19a>
			return 3;
 80003b2:	2303      	movs	r3, #3
 80003b4:	e032      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 80003b6:	231f      	movs	r3, #31
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2203      	movs	r2, #3
 80003bc:	701a      	strb	r2, [r3, #0]

	// Enable keys based on passed initialization byte
		while(numTries != 0) {
 80003be:	e015      	b.n	80003ec <capTouch_Init+0x1d0>

			halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80003c0:	251e      	movs	r5, #30
 80003c2:	197c      	adds	r4, r7, r5
 80003c4:	2334      	movs	r3, #52	@ 0x34
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f914 	bl	80005fc <capTouch_enableKeys>
 80003d4:	0003      	movs	r3, r0
 80003d6:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00b      	beq.n	80003f8 <capTouch_Init+0x1dc>
				break;

			numTries--;
 80003e0:	211f      	movs	r1, #31
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	3a01      	subs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80003ec:	231f      	movs	r3, #31
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1e4      	bne.n	80003c0 <capTouch_Init+0x1a4>
 80003f6:	e000      	b.n	80003fa <capTouch_Init+0x1de>
				break;
 80003f8:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003fa:	231f      	movs	r3, #31
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <capTouch_Init+0x1ec>
			return 4;
 8000404:	2304      	movs	r3, #4
 8000406:	e009      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->keys = keyEnFlags;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2234      	movs	r2, #52	@ 0x34
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	73da      	strb	r2, [r3, #15]

		numTries = 3;
 8000412:	231f      	movs	r3, #31
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]

	return 0;
 800041a:	2300      	movs	r3, #0

}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	b008      	add	sp, #32
 8000422:	bdb0      	pop	{r4, r5, r7, pc}

08000424 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 800042e:	230e      	movs	r3, #14
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000436:	250f      	movs	r5, #15
 8000438:	197b      	adds	r3, r7, r5
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <capTouch_ReadDeviceID+0x80>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f002 fbb7 	bl	8002bcc <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000462:	197b      	adds	r3, r7, r5
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 800046a:	197b      	adds	r3, r7, r5
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	e014      	b.n	800049a <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	250f      	movs	r5, #15
 8000476:	197c      	adds	r4, r7, r5
 8000478:	260e      	movs	r6, #14
 800047a:	19ba      	adds	r2, r7, r6
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2136      	movs	r1, #54	@ 0x36
 8000486:	f002 fccb 	bl	8002e20 <HAL_I2C_Master_Receive>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000496:	197b      	adds	r3, r7, r5
 8000498:	781b      	ldrb	r3, [r3, #0]

}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b005      	add	sp, #20
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	0800639c 	.word	0x0800639c

080004a8 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b0:	210f      	movs	r1, #15
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 80004b8:	260c      	movs	r6, #12
 80004ba:	19bb      	adds	r3, r7, r6
 80004bc:	22c8      	movs	r2, #200	@ 0xc8
 80004be:	4252      	negs	r2, r2
 80004c0:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	000d      	movs	r5, r1
 80004c8:	187c      	adds	r4, r7, r1
 80004ca:	19ba      	adds	r2, r7, r6
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2302      	movs	r3, #2
 80004d4:	2136      	movs	r1, #54	@ 0x36
 80004d6:	f002 fb79 	bl	8002bcc <HAL_I2C_Master_Transmit>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]

}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b005      	add	sp, #20
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080004ec <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004f4:	210f      	movs	r1, #15
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80004fc:	230d      	movs	r3, #13
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 8000504:	260c      	movs	r6, #12
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <capTouch_checkCal+0x84>)
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	000d      	movs	r5, r1
 8000514:	187c      	adds	r4, r7, r1
 8000516:	19ba      	adds	r2, r7, r6
 8000518:	2301      	movs	r3, #1
 800051a:	425b      	negs	r3, r3
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2136      	movs	r1, #54	@ 0x36
 8000522:	f002 fb53 	bl	8002bcc <HAL_I2C_Master_Transmit>
 8000526:	0003      	movs	r3, r0
 8000528:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <capTouch_checkCal+0x4c>
		return halRet;
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	e016      	b.n	8000566 <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230f      	movs	r3, #15
 800053e:	18fc      	adds	r4, r7, r3
 8000540:	250d      	movs	r5, #13
 8000542:	197a      	adds	r2, r7, r5
 8000544:	2301      	movs	r3, #1
 8000546:	425b      	negs	r3, r3
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	2136      	movs	r1, #54	@ 0x36
 800054e:	f002 fc67 	bl	8002e20 <HAL_I2C_Master_Receive>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000556:	197b      	adds	r3, r7, r5
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	210e      	movs	r1, #14
 800055c:	187b      	adds	r3, r7, r1
 800055e:	09d2      	lsrs	r2, r2, #7
 8000560:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	781b      	ldrb	r3, [r3, #0]

}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b005      	add	sp, #20
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	080063a0 	.word	0x080063a0

08000574 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800057c:	210f      	movs	r1, #15
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000584:	230e      	movs	r3, #14
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800058c:	260c      	movs	r6, #12
 800058e:	19bb      	adds	r3, r7, r6
 8000590:	4a19      	ldr	r2, [pc, #100]	@ (80005f8 <capTouch_readChannels+0x84>)
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	000d      	movs	r5, r1
 800059c:	187c      	adds	r4, r7, r1
 800059e:	19ba      	adds	r2, r7, r6
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	2136      	movs	r1, #54	@ 0x36
 80005aa:	f002 fb0f 	bl	8002bcc <HAL_I2C_Master_Transmit>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80005b2:	197b      	adds	r3, r7, r5
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <capTouch_readChannels+0x4c>
		return halRet;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e017      	b.n	80005f0 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	250f      	movs	r5, #15
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	260e      	movs	r6, #14
 80005ca:	19ba      	adds	r2, r7, r6
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2136      	movs	r1, #54	@ 0x36
 80005d6:	f002 fc23 	bl	8002e20 <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 80005de:	19bb      	adds	r3, r7, r6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	227f      	movs	r2, #127	@ 0x7f
 80005e4:	4013      	ands	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	741a      	strb	r2, [r3, #16]

	return halRet;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]

}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b005      	add	sp, #20
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	080063a4 	.word	0x080063a4

080005fc <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	b08b      	sub	sp, #44	@ 0x2c
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	000a      	movs	r2, r1
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800060a:	241e      	movs	r4, #30
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000612:	2314      	movs	r3, #20
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	4a39      	ldr	r2, [pc, #228]	@ (80006fc <capTouch_enableKeys+0x100>)
 8000618:	6811      	ldr	r1, [r2, #0]
 800061a:	6019      	str	r1, [r3, #0]
 800061c:	8891      	ldrh	r1, [r2, #4]
 800061e:	8099      	strh	r1, [r3, #4]
 8000620:	7992      	ldrb	r2, [r2, #6]
 8000622:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000624:	260c      	movs	r6, #12
 8000626:	19bb      	adds	r3, r7, r6
 8000628:	4a35      	ldr	r2, [pc, #212]	@ (8000700 <capTouch_enableKeys+0x104>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	6019      	str	r1, [r3, #0]
 800062e:	8891      	ldrh	r1, [r2, #4]
 8000630:	8099      	strh	r1, [r3, #4]
 8000632:	7992      	ldrb	r2, [r2, #6]
 8000634:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	0025      	movs	r5, r4
 800063c:	193c      	adds	r4, r7, r4
 800063e:	19ba      	adds	r2, r7, r6
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	2136      	movs	r1, #54	@ 0x36
 800064a:	f002 fabf 	bl	8002bcc <HAL_I2C_Master_Transmit>
 800064e:	0003      	movs	r3, r0
 8000650:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000652:	197b      	adds	r3, r7, r5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <capTouch_enableKeys+0x64>
		return halRet;
 800065a:	197b      	adds	r3, r7, r5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e049      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	251e      	movs	r5, #30
 8000666:	197c      	adds	r4, r7, r5
 8000668:	2314      	movs	r3, #20
 800066a:	18fa      	adds	r2, r7, r3
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2307      	movs	r3, #7
 8000674:	2136      	movs	r1, #54	@ 0x36
 8000676:	f002 fbd3 	bl	8002e20 <HAL_I2C_Master_Receive>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800067e:	197b      	adds	r3, r7, r5
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <capTouch_enableKeys+0x90>
		return halRet;
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	e033      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800068c:	231f      	movs	r3, #31
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e01c      	b.n	80006d0 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 8000696:	201f      	movs	r0, #31
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2414      	movs	r4, #20
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	5cd3      	ldrb	r3, [r2, r3]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	7819      	ldrb	r1, [r3, #0]
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4119      	asrs	r1, r3
 80006b0:	000b      	movs	r3, r1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	400b      	ands	r3, r1
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	434a      	muls	r2, r1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 80006c6:	183b      	adds	r3, r7, r0
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	3201      	adds	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	231f      	movs	r3, #31
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d9dd      	bls.n	8000696 <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 80006da:	251e      	movs	r5, #30
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	2314      	movs	r3, #20
 80006e0:	18fa      	adds	r2, r7, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f80c 	bl	8000704 <capTouch_SetAveragingFactor>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]

}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	@ 0x24
 80006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fc:	080063a8 	.word	0x080063a8
 8000700:	080063b0 	.word	0x080063b0

08000704 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800070e:	241e      	movs	r4, #30
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000716:	2314      	movs	r3, #20
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	4a5d      	ldr	r2, [pc, #372]	@ (8000890 <capTouch_SetAveragingFactor+0x18c>)
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	6019      	str	r1, [r3, #0]
 8000720:	8891      	ldrh	r1, [r2, #4]
 8000722:	8099      	strh	r1, [r3, #4]
 8000724:	7992      	ldrb	r2, [r2, #6]
 8000726:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000728:	260c      	movs	r6, #12
 800072a:	19bb      	adds	r3, r7, r6
 800072c:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <capTouch_SetAveragingFactor+0x190>)
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	6019      	str	r1, [r3, #0]
 8000732:	8891      	ldrh	r1, [r2, #4]
 8000734:	8099      	strh	r1, [r3, #4]
 8000736:	7992      	ldrb	r2, [r2, #6]
 8000738:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	0025      	movs	r5, r4
 8000740:	193c      	adds	r4, r7, r4
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2136      	movs	r1, #54	@ 0x36
 800074e:	f002 fa3d 	bl	8002bcc <HAL_I2C_Master_Transmit>
 8000752:	0003      	movs	r3, r0
 8000754:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000756:	197b      	adds	r3, r7, r5
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 800075e:	197b      	adds	r3, r7, r5
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	e090      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	251e      	movs	r5, #30
 800076a:	197c      	adds	r4, r7, r5
 800076c:	2314      	movs	r3, #20
 800076e:	18fa      	adds	r2, r7, r3
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2307      	movs	r3, #7
 8000778:	2136      	movs	r1, #54	@ 0x36
 800077a:	f002 fb51 	bl	8002e20 <HAL_I2C_Master_Receive>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000782:	197b      	adds	r3, r7, r5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e07a      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000790:	2308      	movs	r3, #8
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000798:	231d      	movs	r3, #29
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80007a0:	231f      	movs	r3, #31
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e041      	b.n	800082e <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80007aa:	241f      	movs	r4, #31
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2214      	movs	r2, #20
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	201d      	movs	r0, #29
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	2103      	movs	r1, #3
 80007bc:	400a      	ands	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	251c      	movs	r5, #28
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	1839      	adds	r1, r7, r0
 80007d6:	197a      	adds	r2, r7, r5
 80007d8:	7809      	ldrb	r1, [r1, #0]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	220c      	movs	r2, #12
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	5cd2      	ldrb	r2, [r2, r3]
 80007ea:	2108      	movs	r1, #8
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	251e      	movs	r5, #30
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	187a      	adds	r2, r7, r1
 8000802:	2301      	movs	r3, #1
 8000804:	425b      	negs	r3, r3
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2136      	movs	r1, #54	@ 0x36
 800080c:	f002 f9de 	bl	8002bcc <HAL_I2C_Master_Transmit>
 8000810:	0003      	movs	r3, r0
 8000812:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 800081c:	197b      	adds	r3, r7, r5
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e031      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 8000822:	211f      	movs	r1, #31
 8000824:	187b      	adds	r3, r7, r1
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	3201      	adds	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	231f      	movs	r3, #31
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d9b8      	bls.n	80007aa <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	251e      	movs	r5, #30
 800083e:	197c      	adds	r4, r7, r5
 8000840:	230c      	movs	r3, #12
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2136      	movs	r1, #54	@ 0x36
 800084e:	f002 f9bd 	bl	8002bcc <HAL_I2C_Master_Transmit>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 800085e:	197b      	adds	r3, r7, r5
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e010      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	251e      	movs	r5, #30
 800086a:	197c      	adds	r4, r7, r5
 800086c:	2314      	movs	r3, #20
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2307      	movs	r3, #7
 8000878:	2136      	movs	r1, #54	@ 0x36
 800087a:	f002 fad1 	bl	8002e20 <HAL_I2C_Master_Receive>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781b      	ldrb	r3, [r3, #0]

}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	@ 0x24
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	080063a8 	.word	0x080063a8
 8000894:	080063b0 	.word	0x080063b0

08000898 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008a2:	231e      	movs	r3, #30
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80008aa:	2314      	movs	r3, #20
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <capTouch_SetDetectionIntegrator+0xdc>)
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	6019      	str	r1, [r3, #0]
 80008b4:	8891      	ldrh	r1, [r2, #4]
 80008b6:	8099      	strh	r1, [r3, #4]
 80008b8:	7992      	ldrb	r2, [r2, #6]
 80008ba:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 80008bc:	2310      	movs	r3, #16
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80008c4:	231f      	movs	r3, #31
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e022      	b.n	8000914 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 80008ce:	251f      	movs	r5, #31
 80008d0:	197b      	adds	r3, r7, r5
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2214      	movs	r2, #20
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	5cd2      	ldrb	r2, [r2, r3]
 80008da:	2110      	movs	r1, #16
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	231e      	movs	r3, #30
 80008f4:	18fc      	adds	r4, r7, r3
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2136      	movs	r1, #54	@ 0x36
 8000902:	f002 f963 	bl	8002bcc <HAL_I2C_Master_Transmit>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 800090a:	197b      	adds	r3, r7, r5
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	197b      	adds	r3, r7, r5
 8000910:	3201      	adds	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	231f      	movs	r3, #31
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d9d7      	bls.n	80008ce <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800091e:	2608      	movs	r6, #8
 8000920:	19bb      	adds	r3, r7, r6
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <capTouch_SetDetectionIntegrator+0xe0>)
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	6019      	str	r1, [r3, #0]
 8000928:	8891      	ldrh	r1, [r2, #4]
 800092a:	8099      	strh	r1, [r3, #4]
 800092c:	7992      	ldrb	r2, [r2, #6]
 800092e:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	251e      	movs	r5, #30
 8000936:	197c      	adds	r4, r7, r5
 8000938:	2314      	movs	r3, #20
 800093a:	18fa      	adds	r2, r7, r3
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2136      	movs	r1, #54	@ 0x36
 8000946:	f002 f941 	bl	8002bcc <HAL_I2C_Master_Transmit>
 800094a:	0003      	movs	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	197c      	adds	r4, r7, r5
 8000954:	19ba      	adds	r2, r7, r6
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2307      	movs	r3, #7
 800095e:	2136      	movs	r1, #54	@ 0x36
 8000960:	f002 fa5e 	bl	8002e20 <HAL_I2C_Master_Receive>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000968:	197b      	adds	r3, r7, r5
 800096a:	781b      	ldrb	r3, [r3, #0]

}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	@ 0x24
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	080063b8 	.word	0x080063b8
 8000978:	080063a8 	.word	0x080063a8

0800097c <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


HAL_StatusTypeDef initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b09a      	sub	sp, #104	@ 0x68
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000988:	2567      	movs	r5, #103	@ 0x67
 800098a:	197b      	adds	r3, r7, r5
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 8000990:	243c      	movs	r4, #60	@ 0x3c
 8000992:	193b      	adds	r3, r7, r4
 8000994:	0018      	movs	r0, r3
 8000996:	2328      	movs	r3, #40	@ 0x28
 8000998:	001a      	movs	r2, r3
 800099a:	2100      	movs	r1, #0
 800099c:	f005 fcbc 	bl	8006318 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	781a      	ldrb	r2, [r3, #0]
 80009a4:	0021      	movs	r1, r4
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	789a      	ldrb	r2, [r3, #2]
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	78da      	ldrb	r2, [r3, #3]
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	78da      	ldrb	r2, [r3, #3]
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009d6:	0008      	movs	r0, r1
 80009d8:	183b      	adds	r3, r7, r0
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009de:	183b      	adds	r3, r7, r0
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80009e4:	183b      	adds	r3, r7, r0
 80009e6:	4a19      	ldr	r2, [pc, #100]	@ (8000a4c <initRTCInternalAlarm+0xd0>)
 80009e8:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009ea:	183b      	adds	r3, r7, r0
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009f0:	183b      	adds	r3, r7, r0
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 80009f6:	183b      	adds	r3, r7, r0
 80009f8:	2220      	movs	r2, #32
 80009fa:	2101      	movs	r1, #1
 80009fc:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 80009fe:	0001      	movs	r1, r0
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2280      	movs	r2, #128	@ 0x80
 8000a04:	0052      	lsls	r2, r2, #1
 8000a06:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8000a08:	197c      	adds	r4, r7, r5
 8000a0a:	1879      	adds	r1, r7, r1
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f003 fff3 	bl	80049fc <HAL_RTC_SetAlarm_IT>
 8000a16:	0003      	movs	r3, r0
 8000a18:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000a1a:	197b      	adds	r3, r7, r5
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <initRTCInternalAlarm+0xac>
		return halRet;
 8000a22:	197b      	adds	r3, r7, r5
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	e00d      	b.n	8000a44 <initRTCInternalAlarm+0xc8>

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8000a28:	2567      	movs	r5, #103	@ 0x67
 8000a2a:	197c      	adds	r4, r7, r5
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	005a      	lsls	r2, r3, #1
 8000a30:	2314      	movs	r3, #20
 8000a32:	18f9      	adds	r1, r7, r3
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	2300      	movs	r3, #0
 8000a38:	f004 f920 	bl	8004c7c <HAL_RTC_GetAlarm>
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	7023      	strb	r3, [r4, #0]
	return halRet;
 8000a40:	197b      	adds	r3, r7, r5
 8000a42:	781b      	ldrb	r3, [r3, #0]

}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b01a      	add	sp, #104	@ 0x68
 8000a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a4c:	80800080 	.word	0x80800080

08000a50 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2200      	movs	r2, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f003 fe8e 	bl	8004784 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f003 ff76 	bl	8004960 <HAL_RTC_GetDate>

}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b004      	add	sp, #16
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	b08d      	sub	sp, #52	@ 0x34
 8000a80:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a82:	f001 fcab 	bl	80023dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f000 f95d 	bl	8000d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f000 fb61 	bl	8001150 <MX_GPIO_Init>
  MX_RTC_Init();
 8000a8e:	f000 fa0d 	bl	8000eac <MX_RTC_Init>
  MX_I2C1_Init();
 8000a92:	f000 f9cb 	bl	8000e2c <MX_I2C1_Init>
  MX_TIM14_Init();
 8000a96:	f000 fafd 	bl	8001094 <MX_TIM14_Init>
  MX_TIM2_Init();
 8000a9a:	f000 fa9b 	bl	8000fd4 <MX_TIM2_Init>
  MX_TIM16_Init();
 8000a9e:	f000 fb1f 	bl	80010e0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // HAL Status handle for error-checking
  HAL_StatusTypeDef halRet = HAL_OK;
 8000aa2:	2517      	movs	r5, #23
 8000aa4:	197b      	adds	r3, r7, r5
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]

  // Set Smooth Calibration Value
  halRet = HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 8000aaa:	4b92      	ldr	r3, [pc, #584]	@ (8000cf4 <main+0x278>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	197c      	adds	r4, r7, r5
 8000ab0:	2280      	movs	r2, #128	@ 0x80
 8000ab2:	01d1      	lsls	r1, r2, #7
 8000ab4:	4890      	ldr	r0, [pc, #576]	@ (8000cf8 <main+0x27c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f004 fad5 	bl	8005066 <HAL_RTCEx_SetSmoothCalib>
 8000abc:	0003      	movs	r3, r0
 8000abe:	7023      	strb	r3, [r4, #0]
    							RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);
  if(halRet != HAL_OK) {
 8000ac0:	197b      	adds	r3, r7, r5
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <main+0x50>
	  // Failure to talk to RTC is a hard failure
	  dispFailure();
 8000ac8:	f001 f8a4 	bl	8001c14 <dispFailure>
  }

  // Init the internal RTC alarm time to track the current time
  halRet = initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 8000acc:	2517      	movs	r5, #23
 8000ace:	197c      	adds	r4, r7, r5
 8000ad0:	4a8a      	ldr	r2, [pc, #552]	@ (8000cfc <main+0x280>)
 8000ad2:	498b      	ldr	r1, [pc, #556]	@ (8000d00 <main+0x284>)
 8000ad4:	4b88      	ldr	r3, [pc, #544]	@ (8000cf8 <main+0x27c>)
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f7ff ff50 	bl	800097c <initRTCInternalAlarm>
 8000adc:	0003      	movs	r3, r0
 8000ade:	7023      	strb	r3, [r4, #0]
  if(halRet != HAL_OK) {
 8000ae0:	197b      	adds	r3, r7, r5
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <main+0x70>
  	  // Failure to initialize RTC alarm is a hard failure
  	  dispFailure();
 8000ae8:	f001 f894 	bl	8001c14 <dispFailure>
    }

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000aec:	2380      	movs	r3, #128	@ 0x80
 8000aee:	009c      	lsls	r4, r3, #2
 8000af0:	2380      	movs	r3, #128	@ 0x80
 8000af2:	00dd      	lsls	r5, r3, #3
 8000af4:	2680      	movs	r6, #128	@ 0x80
 8000af6:	2340      	movs	r3, #64	@ 0x40
 8000af8:	469c      	mov	ip, r3
 8000afa:	2380      	movs	r3, #128	@ 0x80
 8000afc:	011a      	lsls	r2, r3, #4
 8000afe:	4b81      	ldr	r3, [pc, #516]	@ (8000d04 <main+0x288>)
 8000b00:	6819      	ldr	r1, [r3, #0]
 8000b02:	4b81      	ldr	r3, [pc, #516]	@ (8000d08 <main+0x28c>)
 8000b04:	6818      	ldr	r0, [r3, #0]
 8000b06:	4b81      	ldr	r3, [pc, #516]	@ (8000d0c <main+0x290>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	9304      	str	r3, [sp, #16]
 8000b0c:	9003      	str	r0, [sp, #12]
 8000b0e:	9102      	str	r1, [sp, #8]
 8000b10:	4b7f      	ldr	r3, [pc, #508]	@ (8000d10 <main+0x294>)
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	9200      	str	r2, [sp, #0]
 8000b16:	4663      	mov	r3, ip
 8000b18:	0032      	movs	r2, r6
 8000b1a:	0029      	movs	r1, r5
 8000b1c:	0020      	movs	r0, r4
 8000b1e:	f001 f8eb 	bl	8001cf8 <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);

    // Set to max brightness
    sevSeg_setIntensity(sevSeg_intensityDuty[2]);
 8000b22:	234b      	movs	r3, #75	@ 0x4b
 8000b24:	0018      	movs	r0, r3
 8000b26:	f001 fa1b 	bl	8001f60 <sevSeg_setIntensity>

	halRet = updateAndDisplayTime();
 8000b2a:	2517      	movs	r5, #23
 8000b2c:	197c      	adds	r4, r7, r5
 8000b2e:	f000 fbf1 	bl	8001314 <updateAndDisplayTime>
 8000b32:	0003      	movs	r3, r0
 8000b34:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000b36:	197b      	adds	r3, r7, r5
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <main+0xc6>
	  // Failure to display current time is a hard failure
	  dispFailure();
 8000b3e:	f001 f869 	bl	8001c14 <dispFailure>
    /*
     * Initialize capacitive touch sensor
     */

	// Used to separate return initializations into critical and non-critical errors.
	uint8_t initRet = 0;
 8000b42:	2116      	movs	r1, #22
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]

    initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 8000b4a:	4b6e      	ldr	r3, [pc, #440]	@ (8000d04 <main+0x288>)
 8000b4c:	681d      	ldr	r5, [r3, #0]
 8000b4e:	2380      	movs	r3, #128	@ 0x80
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4a70      	ldr	r2, [pc, #448]	@ (8000d14 <main+0x298>)
 8000b54:	7812      	ldrb	r2, [r2, #0]
 8000b56:	187c      	adds	r4, r7, r1
 8000b58:	4e6f      	ldr	r6, [pc, #444]	@ (8000d18 <main+0x29c>)
 8000b5a:	4970      	ldr	r1, [pc, #448]	@ (8000d1c <main+0x2a0>)
 8000b5c:	4870      	ldr	r0, [pc, #448]	@ (8000d20 <main+0x2a4>)
 8000b5e:	9201      	str	r2, [sp, #4]
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	0033      	movs	r3, r6
 8000b64:	002a      	movs	r2, r5
 8000b66:	f7ff fb59 	bl	800021c <capTouch_Init>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	7023      	strb	r3, [r4, #0]
    						&capTouchResetPort, capTouchResetPin, capTouchChannels);
    if( (initRet == 1) || (initRet == 3) || (initRet == 4)) {
 8000b6e:	2116      	movs	r1, #22
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d007      	beq.n	8000b88 <main+0x10c>
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d003      	beq.n	8000b88 <main+0x10c>
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	d102      	bne.n	8000b8e <main+0x112>
    	/* Critical Errors:
    	 * 1 = Failure to read correct device ID
    	 * 2 = Failure to read Keys
    	 * 3 = Failure to enable keys
    	 */
    	dispFailure();
 8000b88:	f001 f844 	bl	8001c14 <dispFailure>
 8000b8c:	e00d      	b.n	8000baa <main+0x12e>
    }
    else if (initRet == 2) {
 8000b8e:	2316      	movs	r3, #22
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d102      	bne.n	8000b9e <main+0x122>
    	/*
    	 * Non-critical Errors:
    	 * 2 = Failure to Recalibrate
    	 */
    	dispFault();
 8000b98:	f001 f82e 	bl	8001bf8 <dispFault>
 8000b9c:	e005      	b.n	8000baa <main+0x12e>
    }
    else if(initRet == 0) {
 8000b9e:	2316      	movs	r3, #22
 8000ba0:	18fb      	adds	r3, r7, r3
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d100      	bne.n	8000baa <main+0x12e>
    	// initRet = 0 = all is well
    	__NOP();
 8000ba8:	46c0      	nop			@ (mov r8, r8)
    }

    // Set averaging factor
    uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 8000baa:	4b5e      	ldr	r3, [pc, #376]	@ (8000d24 <main+0x2a8>)
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	210c      	movs	r1, #12
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	701a      	strb	r2, [r3, #0]
 8000bb4:	4b5b      	ldr	r3, [pc, #364]	@ (8000d24 <main+0x2a8>)
 8000bb6:	781a      	ldrb	r2, [r3, #0]
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	705a      	strb	r2, [r3, #1]
 8000bbc:	4b59      	ldr	r3, [pc, #356]	@ (8000d24 <main+0x2a8>)
 8000bbe:	781a      	ldrb	r2, [r3, #0]
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	709a      	strb	r2, [r3, #2]
 8000bc4:	4b57      	ldr	r3, [pc, #348]	@ (8000d24 <main+0x2a8>)
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	70da      	strb	r2, [r3, #3]
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	711a      	strb	r2, [r3, #4]
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	715a      	strb	r2, [r3, #5]
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2200      	movs	r2, #0
 8000bdc:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000bde:	2517      	movs	r5, #23
 8000be0:	197c      	adds	r4, r7, r5
 8000be2:	187a      	adds	r2, r7, r1
 8000be4:	4b4e      	ldr	r3, [pc, #312]	@ (8000d20 <main+0x2a4>)
 8000be6:	0011      	movs	r1, r2
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff fd8b 	bl	8000704 <capTouch_SetAveragingFactor>
 8000bee:	0003      	movs	r3, r0
 8000bf0:	7023      	strb	r3, [r4, #0]

    if(halRet != HAL_OK) {
 8000bf2:	197b      	adds	r3, r7, r5
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <main+0x182>
    	// This is sensitivity-setting and a non-critical error
    	dispFault();
 8000bfa:	f000 fffd 	bl	8001bf8 <dispFault>
    }

    // Set detection integration factors
    uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 8000bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8000d28 <main+0x2ac>)
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	4b48      	ldr	r3, [pc, #288]	@ (8000d28 <main+0x2ac>)
 8000c08:	781a      	ldrb	r2, [r3, #0]
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	705a      	strb	r2, [r3, #1]
 8000c0e:	4b46      	ldr	r3, [pc, #280]	@ (8000d28 <main+0x2ac>)
 8000c10:	781a      	ldrb	r2, [r3, #0]
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	709a      	strb	r2, [r3, #2]
 8000c16:	4b44      	ldr	r3, [pc, #272]	@ (8000d28 <main+0x2ac>)
 8000c18:	781a      	ldrb	r2, [r3, #0]
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	70da      	strb	r2, [r3, #3]
 8000c1e:	4b42      	ldr	r3, [pc, #264]	@ (8000d28 <main+0x2ac>)
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	711a      	strb	r2, [r3, #4]
 8000c26:	4b40      	ldr	r3, [pc, #256]	@ (8000d28 <main+0x2ac>)
 8000c28:	781a      	ldrb	r2, [r3, #0]
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	715a      	strb	r2, [r3, #5]
 8000c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d28 <main+0x2ac>)
 8000c30:	781a      	ldrb	r2, [r3, #0]
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 8000c36:	2517      	movs	r5, #23
 8000c38:	197c      	adds	r4, r7, r5
 8000c3a:	1d3a      	adds	r2, r7, #4
 8000c3c:	4b38      	ldr	r3, [pc, #224]	@ (8000d20 <main+0x2a4>)
 8000c3e:	0011      	movs	r1, r2
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff fe29 	bl	8000898 <capTouch_SetDetectionIntegrator>
 8000c46:	0003      	movs	r3, r0
 8000c48:	7023      	strb	r3, [r4, #0]
    if(halRet != HAL_OK) {
 8000c4a:	197b      	adds	r3, r7, r5
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <main+0x1da>
    	// This is sensitivity-setting and a non-critical error
		dispFault();
 8000c52:	f000 ffd1 	bl	8001bf8 <dispFault>
    }

    userAlarmToggle = false;			//Default to off
 8000c56:	4b35      	ldr	r3, [pc, #212]	@ (8000d2c <main+0x2b0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
     * initialize the alarm time to a default value.
     *
     * Else, initialize to whatever is stored in backup registers.
     */

    if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 8000c5c:	4b34      	ldr	r3, [pc, #208]	@ (8000d30 <main+0x2b4>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b25      	ldr	r3, [pc, #148]	@ (8000cf8 <main+0x27c>)
 8000c62:	0011      	movs	r1, r2
 8000c64:	0018      	movs	r0, r3
 8000c66:	f004 face 	bl	8005206 <HAL_RTCEx_BKUPRead>
 8000c6a:	0003      	movs	r3, r0
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d11c      	bne.n	8000cac <main+0x230>

    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 8000c72:	4b30      	ldr	r3, [pc, #192]	@ (8000d34 <main+0x2b8>)
 8000c74:	6819      	ldr	r1, [r3, #0]
 8000c76:	4b20      	ldr	r3, [pc, #128]	@ (8000cf8 <main+0x27c>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f004 faa6 	bl	80051cc <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 8000c80:	4b2d      	ldr	r3, [pc, #180]	@ (8000d38 <main+0x2bc>)
 8000c82:	6819      	ldr	r1, [r3, #0]
 8000c84:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <main+0x27c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f004 fa9f 	bl	80051cc <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 8000c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d3c <main+0x2c0>)
 8000c90:	6819      	ldr	r1, [r3, #0]
 8000c92:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <main+0x27c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	0018      	movs	r0, r3
 8000c98:	f004 fa98 	bl	80051cc <HAL_RTCEx_BKUPWrite>

    	// Write backup register with a non-zero value to signify that it has been initialized before
    	HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8000c9c:	4b24      	ldr	r3, [pc, #144]	@ (8000d30 <main+0x2b4>)
 8000c9e:	6819      	ldr	r1, [r3, #0]
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	425a      	negs	r2, r3
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <main+0x27c>)
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f004 fa90 	bl	80051cc <HAL_RTCEx_BKUPWrite>

    }

	userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8000cac:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <main+0x2b8>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <main+0x27c>)
 8000cb2:	0011      	movs	r1, r2
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f004 faa6 	bl	8005206 <HAL_RTCEx_BKUPRead>
 8000cba:	0003      	movs	r3, r0
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b20      	ldr	r3, [pc, #128]	@ (8000d40 <main+0x2c4>)
 8000cc0:	701a      	strb	r2, [r3, #0]
	userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d38 <main+0x2bc>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <main+0x27c>)
 8000cc8:	0011      	movs	r1, r2
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f004 fa9b 	bl	8005206 <HAL_RTCEx_BKUPRead>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d40 <main+0x2c4>)
 8000cd6:	705a      	strb	r2, [r3, #1]
	userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 8000cd8:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <main+0x2c0>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <main+0x27c>)
 8000cde:	0011      	movs	r1, r2
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f004 fa90 	bl	8005206 <HAL_RTCEx_BKUPRead>
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <main+0x2c4>)
 8000cec:	70da      	strb	r2, [r3, #3]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	e7fd      	b.n	8000cee <main+0x272>
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	20000030 	.word	0x20000030
 8000cf8:	20000118 	.word	0x20000118
 8000cfc:	200000a8 	.word	0x200000a8
 8000d00:	20000094 	.word	0x20000094
 8000d04:	20000048 	.word	0x20000048
 8000d08:	20000044 	.word	0x20000044
 8000d0c:	20000034 	.word	0x20000034
 8000d10:	20000018 	.word	0x20000018
 8000d14:	2000000c 	.word	0x2000000c
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	200000c4 	.word	0x200000c4
 8000d20:	2000022c 	.word	0x2000022c
 8000d24:	2000000d 	.word	0x2000000d
 8000d28:	2000000e 	.word	0x2000000e
 8000d2c:	20000091 	.word	0x20000091
 8000d30:	20000040 	.word	0x20000040
 8000d34:	200000c0 	.word	0x200000c0
 8000d38:	20000038 	.word	0x20000038
 8000d3c:	2000003c 	.word	0x2000003c
 8000d40:	200000ac 	.word	0x200000ac

08000d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b093      	sub	sp, #76	@ 0x4c
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	2410      	movs	r4, #16
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	0018      	movs	r0, r3
 8000d50:	2338      	movs	r3, #56	@ 0x38
 8000d52:	001a      	movs	r2, r3
 8000d54:	2100      	movs	r1, #0
 8000d56:	f005 fadf 	bl	8006318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5a:	003b      	movs	r3, r7
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	2310      	movs	r3, #16
 8000d60:	001a      	movs	r2, r3
 8000d62:	2100      	movs	r1, #0
 8000d64:	f005 fad8 	bl	8006318 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d68:	2380      	movs	r3, #128	@ 0x80
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f002 fce9 	bl	8003744 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d72:	f002 fcc9 	bl	8003708 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 8000d76:	4b2c      	ldr	r3, [pc, #176]	@ (8000e28 <SystemClock_Config+0xe4>)
 8000d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d7a:	2218      	movs	r2, #24
 8000d7c:	4393      	bics	r3, r2
 8000d7e:	001a      	movs	r2, r3
 8000d80:	4b29      	ldr	r3, [pc, #164]	@ (8000e28 <SystemClock_Config+0xe4>)
 8000d82:	2108      	movs	r1, #8
 8000d84:	430a      	orrs	r2, r1
 8000d86:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	220e      	movs	r2, #14
 8000d8c:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	2201      	movs	r2, #1
 8000d92:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d94:	193b      	adds	r3, r7, r4
 8000d96:	2280      	movs	r2, #128	@ 0x80
 8000d98:	0052      	lsls	r2, r2, #1
 8000d9a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000d9c:	0021      	movs	r1, r4
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2240      	movs	r2, #64	@ 0x40
 8000da8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2201      	movs	r2, #1
 8000dae:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2202      	movs	r2, #2
 8000db4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2202      	movs	r2, #2
 8000dba:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2208      	movs	r2, #8
 8000dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2280      	movs	r2, #128	@ 0x80
 8000dcc:	0292      	lsls	r2, r2, #10
 8000dce:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	2280      	movs	r2, #128	@ 0x80
 8000dd4:	0492      	lsls	r2, r2, #18
 8000dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2280      	movs	r2, #128	@ 0x80
 8000ddc:	0592      	lsls	r2, r2, #22
 8000dde:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	0018      	movs	r0, r3
 8000de4:	f002 fcee 	bl	80037c4 <HAL_RCC_OscConfig>
 8000de8:	1e03      	subs	r3, r0, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000dec:	f000 ff7e 	bl	8001cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df0:	003b      	movs	r3, r7
 8000df2:	2207      	movs	r2, #7
 8000df4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df6:	003b      	movs	r3, r7
 8000df8:	2202      	movs	r2, #2
 8000dfa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfc:	003b      	movs	r3, r7
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e02:	003b      	movs	r3, r7
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e08:	003b      	movs	r3, r7
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f002 fff3 	bl	8003df8 <HAL_RCC_ClockConfig>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000e16:	f000 ff69 	bl	8001cec <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f003 faf0 	bl	8004400 <HAL_RCCEx_EnableLSCO>
}
 8000e20:	46c0      	nop			@ (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b013      	add	sp, #76	@ 0x4c
 8000e26:	bd90      	pop	{r4, r7, pc}
 8000e28:	40021000 	.word	0x40021000

08000e2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea4 <MX_I2C1_Init+0x78>)
 8000e34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea8 <MX_I2C1_Init+0x7c>)
 8000e3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e42:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e48:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e54:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f001 fe09 	bl	8002a80 <HAL_I2C_Init>
 8000e6e:	1e03      	subs	r3, r0, #0
 8000e70:	d001      	beq.n	8000e76 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e72:	f000 ff3b 	bl	8001cec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e78:	2100      	movs	r1, #0
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f002 fbac 	bl	80035d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000e80:	1e03      	subs	r3, r0, #0
 8000e82:	d001      	beq.n	8000e88 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e84:	f000 ff32 	bl	8001cec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e88:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f002 fbef 	bl	8003670 <HAL_I2CEx_ConfigDigitalFilter>
 8000e92:	1e03      	subs	r3, r0, #0
 8000e94:	d001      	beq.n	8000e9a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e96:	f000 ff29 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200000c4 	.word	0x200000c4
 8000ea4:	40005400 	.word	0x40005400
 8000ea8:	00602173 	.word	0x00602173

08000eac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08c      	sub	sp, #48	@ 0x30
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_DateTypeDef sDate = {0};
 8000eb2:	232c      	movs	r3, #44	@ 0x2c
 8000eb4:	18fb      	adds	r3, r7, r3
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	2328      	movs	r3, #40	@ 0x28
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	f005 fa28 	bl	8006318 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ec8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000eca:	4a3f      	ldr	r2, [pc, #252]	@ (8000fc8 <MX_RTC_Init+0x11c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000ece:	4b3d      	ldr	r3, [pc, #244]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000ed0:	2240      	movs	r2, #64	@ 0x40
 8000ed2:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000ed6:	227f      	movs	r2, #127	@ 0x7f
 8000ed8:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000eda:	4b3a      	ldr	r3, [pc, #232]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000edc:	22ff      	movs	r2, #255	@ 0xff
 8000ede:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ee0:	4b38      	ldr	r3, [pc, #224]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ee6:	4b37      	ldr	r3, [pc, #220]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000eec:	4b35      	ldr	r3, [pc, #212]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ef2:	4b34      	ldr	r3, [pc, #208]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000ef4:	2280      	movs	r2, #128	@ 0x80
 8000ef6:	05d2      	lsls	r2, r2, #23
 8000ef8:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000efa:	4b32      	ldr	r3, [pc, #200]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f00:	4b30      	ldr	r3, [pc, #192]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000f02:	0018      	movs	r0, r3
 8000f04:	f003 faf4 	bl	80044f0 <HAL_RTC_Init>
 8000f08:	1e03      	subs	r3, r0, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 8000f0c:	f000 feee 	bl	8001cec <Error_Handler>
//  {
//    Error_Handler();
//  }


  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f10:	212c      	movs	r1, #44	@ 0x2c
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2201      	movs	r2, #1
 8000f22:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	2200      	movs	r2, #0
 8000f28:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f2a:	1879      	adds	r1, r7, r1
 8000f2c:	4b25      	ldr	r3, [pc, #148]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	0018      	movs	r0, r3
 8000f32:	f003 fc83 	bl	800483c <HAL_RTC_SetDate>
 8000f36:	1e03      	subs	r3, r0, #0
 8000f38:	d001      	beq.n	8000f3e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000f3a:	f000 fed7 	bl	8001cec <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2201      	movs	r2, #1
 8000f48:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2200      	movs	r2, #0
 8000f54:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	4a18      	ldr	r2, [pc, #96]	@ (8000fcc <MX_RTC_Init+0x120>)
 8000f6c:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2220      	movs	r2, #32
 8000f7e:	2101      	movs	r1, #1
 8000f80:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2280      	movs	r2, #128	@ 0x80
 8000f86:	0052      	lsls	r2, r2, #1
 8000f88:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000f8a:	1d39      	adds	r1, r7, #4
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	0018      	movs	r0, r3
 8000f92:	f003 fd33 	bl	80049fc <HAL_RTC_SetAlarm_IT>
 8000f96:	1e03      	subs	r3, r0, #0
 8000f98:	d001      	beq.n	8000f9e <MX_RTC_Init+0xf2>
  {
    Error_Handler();
 8000f9a:	f000 fea7 	bl	8001cec <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f004 f8c2 	bl	800512c <HAL_RTCEx_SetCalibrationOutPut>
 8000fa8:	1e03      	subs	r3, r0, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_RTC_Init+0x104>
  {
    Error_Handler();
 8000fac:	f000 fe9e 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8000fb0:	4907      	ldr	r1, [pc, #28]	@ (8000fd0 <MX_RTC_Init+0x124>)
 8000fb2:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f003 fbe4 	bl	8004784 <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 8000fbc:	46c0      	nop			@ (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b00c      	add	sp, #48	@ 0x30
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000118 	.word	0x20000118
 8000fc8:	40002800 	.word	0x40002800
 8000fcc:	80800080 	.word	0x80800080
 8000fd0:	20000094 	.word	0x20000094

08000fd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	@ 0x28
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fda:	231c      	movs	r3, #28
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	0018      	movs	r0, r3
 8000fe0:	230c      	movs	r3, #12
 8000fe2:	001a      	movs	r2, r3
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	f005 f997 	bl	8006318 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fea:	003b      	movs	r3, r7
 8000fec:	0018      	movs	r0, r3
 8000fee:	231c      	movs	r3, #28
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	f005 f990 	bl	8006318 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff8:	4b24      	ldr	r3, [pc, #144]	@ (800108c <MX_TIM2_Init+0xb8>)
 8000ffa:	2280      	movs	r2, #128	@ 0x80
 8000ffc:	05d2      	lsls	r2, r2, #23
 8000ffe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8001000:	4b22      	ldr	r3, [pc, #136]	@ (800108c <MX_TIM2_Init+0xb8>)
 8001002:	4a23      	ldr	r2, [pc, #140]	@ (8001090 <MX_TIM2_Init+0xbc>)
 8001004:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b21      	ldr	r3, [pc, #132]	@ (800108c <MX_TIM2_Init+0xb8>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <MX_TIM2_Init+0xb8>)
 800100e:	2263      	movs	r2, #99	@ 0x63
 8001010:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001012:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <MX_TIM2_Init+0xb8>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001018:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <MX_TIM2_Init+0xb8>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800101e:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <MX_TIM2_Init+0xb8>)
 8001020:	0018      	movs	r0, r3
 8001022:	f004 fa57 	bl	80054d4 <HAL_TIM_PWM_Init>
 8001026:	1e03      	subs	r3, r0, #0
 8001028:	d001      	beq.n	800102e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800102a:	f000 fe5f 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102e:	211c      	movs	r1, #28
 8001030:	187b      	adds	r3, r7, r1
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001036:	187b      	adds	r3, r7, r1
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800103c:	187a      	adds	r2, r7, r1
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <MX_TIM2_Init+0xb8>)
 8001040:	0011      	movs	r1, r2
 8001042:	0018      	movs	r0, r3
 8001044:	f005 f8e8 	bl	8006218 <HAL_TIMEx_MasterConfigSynchronization>
 8001048:	1e03      	subs	r3, r0, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800104c:	f000 fe4e 	bl	8001cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001050:	003b      	movs	r3, r7
 8001052:	2260      	movs	r2, #96	@ 0x60
 8001054:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001056:	003b      	movs	r3, r7
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105c:	003b      	movs	r3, r7
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001062:	003b      	movs	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001068:	0039      	movs	r1, r7
 800106a:	4b08      	ldr	r3, [pc, #32]	@ (800108c <MX_TIM2_Init+0xb8>)
 800106c:	2208      	movs	r2, #8
 800106e:	0018      	movs	r0, r3
 8001070:	f004 fc6e 	bl	8005950 <HAL_TIM_PWM_ConfigChannel>
 8001074:	1e03      	subs	r3, r0, #0
 8001076:	d001      	beq.n	800107c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001078:	f000 fe38 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800107c:	4b03      	ldr	r3, [pc, #12]	@ (800108c <MX_TIM2_Init+0xb8>)
 800107e:	0018      	movs	r0, r3
 8001080:	f001 f8e8 	bl	8002254 <HAL_TIM_MspPostInit>

}
 8001084:	46c0      	nop			@ (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b00a      	add	sp, #40	@ 0x28
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000144 	.word	0x20000144
 8001090:	0000031f 	.word	0x0000031f

08001094 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001098:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <MX_TIM14_Init+0x40>)
 800109a:	4a0f      	ldr	r2, [pc, #60]	@ (80010d8 <MX_TIM14_Init+0x44>)
 800109c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 800109e:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <MX_TIM14_Init+0x40>)
 80010a0:	22f4      	movs	r2, #244	@ 0xf4
 80010a2:	0092      	lsls	r2, r2, #2
 80010a4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <MX_TIM14_Init+0x40>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80010ac:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <MX_TIM14_Init+0x40>)
 80010ae:	4a0b      	ldr	r2, [pc, #44]	@ (80010dc <MX_TIM14_Init+0x48>)
 80010b0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b2:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <MX_TIM14_Init+0x40>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <MX_TIM14_Init+0x40>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80010be:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <MX_TIM14_Init+0x40>)
 80010c0:	0018      	movs	r0, r3
 80010c2:	f004 f8bb 	bl	800523c <HAL_TIM_Base_Init>
 80010c6:	1e03      	subs	r3, r0, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80010ca:	f000 fe0f 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000190 	.word	0x20000190
 80010d8:	40002000 	.word	0x40002000
 80010dc:	0000ffff 	.word	0x0000ffff

080010e0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80010e4:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <MX_TIM16_Init+0x60>)
 80010e6:	4a17      	ldr	r2, [pc, #92]	@ (8001144 <MX_TIM16_Init+0x64>)
 80010e8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = (58595 / 10 / 60) - 1;		// TEST
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <MX_TIM16_Init+0x60>)
 80010ec:	2260      	movs	r2, #96	@ 0x60
 80010ee:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <MX_TIM16_Init+0x60>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80010f6:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <MX_TIM16_Init+0x60>)
 80010f8:	4a13      	ldr	r2, [pc, #76]	@ (8001148 <MX_TIM16_Init+0x68>)
 80010fa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fc:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <MX_TIM16_Init+0x60>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001102:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <MX_TIM16_Init+0x60>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001108:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <MX_TIM16_Init+0x60>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800110e:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <MX_TIM16_Init+0x60>)
 8001110:	0018      	movs	r0, r3
 8001112:	f004 f893 	bl	800523c <HAL_TIM_Base_Init>
 8001116:	1e03      	subs	r3, r0, #0
 8001118:	d001      	beq.n	800111e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800111a:	f000 fde7 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  // Decrease interrupt priority
  HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2101      	movs	r1, #1
 8001122:	2015      	movs	r0, #21
 8001124:	f001 fa8c 	bl	8002640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001128:	2015      	movs	r0, #21
 800112a:	f001 fa9e 	bl	800266a <HAL_NVIC_EnableIRQ>

  // Clear SR interrupts
  __HAL_TIM_CLEAR_IT(timerSnooze, TIM_IT_UPDATE);
 800112e:	4b07      	ldr	r3, [pc, #28]	@ (800114c <MX_TIM16_Init+0x6c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2202      	movs	r2, #2
 8001136:	4252      	negs	r2, r2
 8001138:	611a      	str	r2, [r3, #16]
//	timerSnooze->Instance->RCR |= timerSnooze_RCR;


  /* USER CODE END TIM16_Init 2 */

}
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200001dc 	.word	0x200001dc
 8001144:	40014400 	.word	0x40014400
 8001148:	0000ffff 	.word	0x0000ffff
 800114c:	2000004c 	.word	0x2000004c

08001150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b08b      	sub	sp, #44	@ 0x2c
 8001154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	2414      	movs	r4, #20
 8001158:	193b      	adds	r3, r7, r4
 800115a:	0018      	movs	r0, r3
 800115c:	2314      	movs	r3, #20
 800115e:	001a      	movs	r2, r3
 8001160:	2100      	movs	r1, #0
 8001162:	f005 f8d9 	bl	8006318 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	4b66      	ldr	r3, [pc, #408]	@ (8001300 <MX_GPIO_Init+0x1b0>)
 8001168:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800116a:	4b65      	ldr	r3, [pc, #404]	@ (8001300 <MX_GPIO_Init+0x1b0>)
 800116c:	2104      	movs	r1, #4
 800116e:	430a      	orrs	r2, r1
 8001170:	635a      	str	r2, [r3, #52]	@ 0x34
 8001172:	4b63      	ldr	r3, [pc, #396]	@ (8001300 <MX_GPIO_Init+0x1b0>)
 8001174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001176:	2204      	movs	r2, #4
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b60      	ldr	r3, [pc, #384]	@ (8001300 <MX_GPIO_Init+0x1b0>)
 8001180:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001182:	4b5f      	ldr	r3, [pc, #380]	@ (8001300 <MX_GPIO_Init+0x1b0>)
 8001184:	2101      	movs	r1, #1
 8001186:	430a      	orrs	r2, r1
 8001188:	635a      	str	r2, [r3, #52]	@ 0x34
 800118a:	4b5d      	ldr	r3, [pc, #372]	@ (8001300 <MX_GPIO_Init+0x1b0>)
 800118c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800118e:	2201      	movs	r2, #1
 8001190:	4013      	ands	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001196:	4b5a      	ldr	r3, [pc, #360]	@ (8001300 <MX_GPIO_Init+0x1b0>)
 8001198:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800119a:	4b59      	ldr	r3, [pc, #356]	@ (8001300 <MX_GPIO_Init+0x1b0>)
 800119c:	2108      	movs	r1, #8
 800119e:	430a      	orrs	r2, r1
 80011a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80011a2:	4b57      	ldr	r3, [pc, #348]	@ (8001300 <MX_GPIO_Init+0x1b0>)
 80011a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011a6:	2208      	movs	r2, #8
 80011a8:	4013      	ands	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	4b54      	ldr	r3, [pc, #336]	@ (8001300 <MX_GPIO_Init+0x1b0>)
 80011b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011b2:	4b53      	ldr	r3, [pc, #332]	@ (8001300 <MX_GPIO_Init+0x1b0>)
 80011b4:	2102      	movs	r1, #2
 80011b6:	430a      	orrs	r2, r1
 80011b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80011ba:	4b51      	ldr	r3, [pc, #324]	@ (8001300 <MX_GPIO_Init+0x1b0>)
 80011bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011be:	2202      	movs	r2, #2
 80011c0:	4013      	ands	r3, r2
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 80011c6:	494f      	ldr	r1, [pc, #316]	@ (8001304 <MX_GPIO_Init+0x1b4>)
 80011c8:	23a0      	movs	r3, #160	@ 0xa0
 80011ca:	05db      	lsls	r3, r3, #23
 80011cc:	2200      	movs	r2, #0
 80011ce:	0018      	movs	r0, r3
 80011d0:	f001 fbe9 	bl	80029a6 <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 80011d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001308 <MX_GPIO_Init+0x1b8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	2180      	movs	r1, #128	@ 0x80
 80011da:	0018      	movs	r0, r3
 80011dc:	f001 fbe3 	bl	80029a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_RST_GPIO_Port, CTOUCH_RST_Pin, GPIO_PIN_RESET);
 80011e0:	2380      	movs	r3, #128	@ 0x80
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4849      	ldr	r0, [pc, #292]	@ (800130c <MX_GPIO_Init+0x1bc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	0019      	movs	r1, r3
 80011ea:	f001 fbdc 	bl	80029a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin BUZZER_OUT_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin
                           SHIFT_MCLR_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 80011ee:	193b      	adds	r3, r7, r4
 80011f0:	4a44      	ldr	r2, [pc, #272]	@ (8001304 <MX_GPIO_Init+0x1b4>)
 80011f2:	601a      	str	r2, [r3, #0]
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	193b      	adds	r3, r7, r4
 80011f6:	2201      	movs	r2, #1
 80011f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	193b      	adds	r3, r7, r4
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	193b      	adds	r3, r7, r4
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	193a      	adds	r2, r7, r4
 8001208:	23a0      	movs	r3, #160	@ 0xa0
 800120a:	05db      	lsls	r3, r3, #23
 800120c:	0011      	movs	r1, r2
 800120e:	0018      	movs	r0, r3
 8001210:	f001 fa48 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001214:	193b      	adds	r3, r7, r4
 8001216:	2204      	movs	r2, #4
 8001218:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121a:	193b      	adds	r3, r7, r4
 800121c:	2203      	movs	r2, #3
 800121e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	193b      	adds	r3, r7, r4
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	193a      	adds	r2, r7, r4
 8001228:	23a0      	movs	r3, #160	@ 0xa0
 800122a:	05db      	lsls	r3, r3, #23
 800122c:	0011      	movs	r1, r2
 800122e:	0018      	movs	r0, r3
 8001230:	f001 fa38 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8001234:	193b      	adds	r3, r7, r4
 8001236:	2280      	movs	r2, #128	@ 0x80
 8001238:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	193b      	adds	r3, r7, r4
 800123c:	2201      	movs	r2, #1
 800123e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	193b      	adds	r3, r7, r4
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	193b      	adds	r3, r7, r4
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 800124c:	193b      	adds	r3, r7, r4
 800124e:	4a2e      	ldr	r2, [pc, #184]	@ (8001308 <MX_GPIO_Init+0x1b8>)
 8001250:	0019      	movs	r1, r3
 8001252:	0010      	movs	r0, r2
 8001254:	f001 fa26 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 8001258:	193b      	adds	r3, r7, r4
 800125a:	2280      	movs	r2, #128	@ 0x80
 800125c:	0212      	lsls	r2, r2, #8
 800125e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001260:	193b      	adds	r3, r7, r4
 8001262:	2284      	movs	r2, #132	@ 0x84
 8001264:	0392      	lsls	r2, r2, #14
 8001266:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001268:	193b      	adds	r3, r7, r4
 800126a:	2201      	movs	r2, #1
 800126c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800126e:	193a      	adds	r2, r7, r4
 8001270:	23a0      	movs	r3, #160	@ 0xa0
 8001272:	05db      	lsls	r3, r3, #23
 8001274:	0011      	movs	r1, r2
 8001276:	0018      	movs	r0, r3
 8001278:	f001 fa14 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 800127c:	0021      	movs	r1, r4
 800127e:	187b      	adds	r3, r7, r1
 8001280:	220f      	movs	r2, #15
 8001282:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001284:	187b      	adds	r3, r7, r1
 8001286:	2284      	movs	r2, #132	@ 0x84
 8001288:	0392      	lsls	r2, r2, #14
 800128a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800128c:	187b      	adds	r3, r7, r1
 800128e:	2201      	movs	r2, #1
 8001290:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001292:	000c      	movs	r4, r1
 8001294:	187b      	adds	r3, r7, r1
 8001296:	4a1e      	ldr	r2, [pc, #120]	@ (8001310 <MX_GPIO_Init+0x1c0>)
 8001298:	0019      	movs	r1, r3
 800129a:	0010      	movs	r0, r2
 800129c:	f001 fa02 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_RST_Pin */
  GPIO_InitStruct.Pin = CTOUCH_RST_Pin;
 80012a0:	0021      	movs	r1, r4
 80012a2:	187b      	adds	r3, r7, r1
 80012a4:	2280      	movs	r2, #128	@ 0x80
 80012a6:	0052      	lsls	r2, r2, #1
 80012a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	187b      	adds	r3, r7, r1
 80012ac:	2201      	movs	r2, #1
 80012ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	187b      	adds	r3, r7, r1
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 80012bc:	187b      	adds	r3, r7, r1
 80012be:	4a13      	ldr	r2, [pc, #76]	@ (800130c <MX_GPIO_Init+0x1bc>)
 80012c0:	0019      	movs	r1, r3
 80012c2:	0010      	movs	r0, r2
 80012c4:	f001 f9ee 	bl	80026a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2100      	movs	r1, #0
 80012cc:	2005      	movs	r0, #5
 80012ce:	f001 f9b7 	bl	8002640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80012d2:	2005      	movs	r0, #5
 80012d4:	f001 f9c9 	bl	800266a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	2006      	movs	r0, #6
 80012de:	f001 f9af 	bl	8002640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80012e2:	2006      	movs	r0, #6
 80012e4:	f001 f9c1 	bl	800266a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2101      	movs	r1, #1
 80012ec:	2007      	movs	r0, #7
 80012ee:	f001 f9a7 	bl	8002640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80012f2:	2007      	movs	r0, #7
 80012f4:	f001 f9b9 	bl	800266a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012f8:	46c0      	nop			@ (mov r8, r8)
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b00b      	add	sp, #44	@ 0x2c
 80012fe:	bd90      	pop	{r4, r7, pc}
 8001300:	40021000 	.word	0x40021000
 8001304:	00001f01 	.word	0x00001f01
 8001308:	50000800 	.word	0x50000800
 800130c:	50000400 	.word	0x50000400
 8001310:	50000c00 	.word	0x50000c00

08001314 <updateAndDisplayTime>:
/* USER CODE BEGIN 4 */

/*
 * Pulls updated time from RTC and send new time to user display
 */
HAL_StatusTypeDef updateAndDisplayTime(void) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8001320:	4a07      	ldr	r2, [pc, #28]	@ (8001340 <updateAndDisplayTime+0x2c>)
 8001322:	4908      	ldr	r1, [pc, #32]	@ (8001344 <updateAndDisplayTime+0x30>)
 8001324:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <updateAndDisplayTime+0x34>)
 8001326:	0018      	movs	r0, r3
 8001328:	f7ff fb92 	bl	8000a50 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 800132c:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <updateAndDisplayTime+0x30>)
 800132e:	0018      	movs	r0, r3
 8001330:	f000 fd64 	bl	8001dfc <sevSeg_updateDigits>

	return halRet;
 8001334:	1dfb      	adds	r3, r7, #7
 8001336:	781b      	ldrb	r3, [r3, #0]

}
 8001338:	0018      	movs	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	b002      	add	sp, #8
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200000a8 	.word	0x200000a8
 8001344:	20000094 	.word	0x20000094
 8001348:	20000118 	.word	0x20000118

0800134c <updateAndDisplayAlarm>:
/*
 * Sends current user alarm time to user display
 * This doesn't pull from the RTC because the RTC alarm is not being used for that
 */

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 8001358:	4b04      	ldr	r3, [pc, #16]	@ (800136c <updateAndDisplayAlarm+0x20>)
 800135a:	0018      	movs	r0, r3
 800135c:	f000 fd4e 	bl	8001dfc <sevSeg_updateDigits>

	return halRet;
 8001360:	1dfb      	adds	r3, r7, #7
 8001362:	781b      	ldrb	r3, [r3, #0]

}
 8001364:	0018      	movs	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	b002      	add	sp, #8
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200000ac 	.word	0x200000ac

08001370 <HAL_RTC_AlarmAEventCallback>:
 * Occurs every minute increment
 *
 * Pulls alarm time from RTC, increments and sets new alarm time, and updates time.
 * Sets off user alarm if the alarm is enabled.
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b08d      	sub	sp, #52	@ 0x34
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

	  RTC_AlarmTypeDef sAlarm = {0};
 8001378:	2408      	movs	r4, #8
 800137a:	193b      	adds	r3, r7, r4
 800137c:	0018      	movs	r0, r3
 800137e:	2328      	movs	r3, #40	@ 0x28
 8001380:	001a      	movs	r2, r3
 8001382:	2100      	movs	r1, #0
 8001384:	f004 ffc8 	bl	8006318 <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8001388:	2380      	movs	r3, #128	@ 0x80
 800138a:	005a      	lsls	r2, r3, #1
 800138c:	1939      	adds	r1, r7, r4
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	2300      	movs	r3, #0
 8001392:	f003 fc73 	bl	8004c7c <HAL_RTC_GetAlarm>

	  getRTCTime(hrtc, &currTime, &currDate);
 8001396:	4a1f      	ldr	r2, [pc, #124]	@ (8001414 <HAL_RTC_AlarmAEventCallback+0xa4>)
 8001398:	491f      	ldr	r1, [pc, #124]	@ (8001418 <HAL_RTC_AlarmAEventCallback+0xa8>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	0018      	movs	r0, r3
 800139e:	f7ff fb57 	bl	8000a50 <getRTCTime>

	  if(currTime.Minutes > 58) {
 80013a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001418 <HAL_RTC_AlarmAEventCallback+0xa8>)
 80013a4:	785b      	ldrb	r3, [r3, #1]
 80013a6:	2b3a      	cmp	r3, #58	@ 0x3a
 80013a8:	d903      	bls.n	80013b2 <HAL_RTC_AlarmAEventCallback+0x42>
		sAlarm.AlarmTime.Minutes = 0;
 80013aa:	193b      	adds	r3, r7, r4
 80013ac:	2200      	movs	r2, #0
 80013ae:	705a      	strb	r2, [r3, #1]
 80013b0:	e008      	b.n	80013c4 <HAL_RTC_AlarmAEventCallback+0x54>
	  } else {
		sAlarm.AlarmTime.Minutes = currTime.Minutes + 1;
 80013b2:	4b19      	ldr	r3, [pc, #100]	@ (8001418 <HAL_RTC_AlarmAEventCallback+0xa8>)
 80013b4:	785b      	ldrb	r3, [r3, #1]
 80013b6:	3301      	adds	r3, #1
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	2308      	movs	r3, #8
 80013bc:	18fb      	adds	r3, r7, r3
 80013be:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 80013c0:	e000      	b.n	80013c4 <HAL_RTC_AlarmAEventCallback+0x54>

			__NOP();
 80013c2:	46c0      	nop			@ (mov r8, r8)
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 80013c4:	2308      	movs	r3, #8
 80013c6:	18f9      	adds	r1, r7, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	0018      	movs	r0, r3
 80013ce:	f003 fb15 	bl	80049fc <HAL_RTC_SetAlarm_IT>
 80013d2:	1e03      	subs	r3, r0, #0
 80013d4:	d1f5      	bne.n	80013c2 <HAL_RTC_AlarmAEventCallback+0x52>

		}

	  updateAndDisplayTime();
 80013d6:	f7ff ff9d 	bl	8001314 <updateAndDisplayTime>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 80013da:	4b10      	ldr	r3, [pc, #64]	@ (800141c <HAL_RTC_AlarmAEventCallback+0xac>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d013      	beq.n	800140a <HAL_RTC_AlarmAEventCallback+0x9a>
 80013e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <HAL_RTC_AlarmAEventCallback+0xb0>)
 80013e4:	781a      	ldrb	r2, [r3, #0]
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <HAL_RTC_AlarmAEventCallback+0xa8>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d10d      	bne.n	800140a <HAL_RTC_AlarmAEventCallback+0x9a>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 80013ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <HAL_RTC_AlarmAEventCallback+0xb0>)
 80013f0:	785a      	ldrb	r2, [r3, #1]
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <HAL_RTC_AlarmAEventCallback+0xa8>)
 80013f4:	785b      	ldrb	r3, [r3, #1]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d107      	bne.n	800140a <HAL_RTC_AlarmAEventCallback+0x9a>
 80013fa:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <HAL_RTC_AlarmAEventCallback+0xb0>)
 80013fc:	78da      	ldrb	r2, [r3, #3]
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001400:	78db      	ldrb	r3, [r3, #3]
 8001402:	429a      	cmp	r2, r3
 8001404:	d101      	bne.n	800140a <HAL_RTC_AlarmAEventCallback+0x9a>
		  userAlarmBeep();
 8001406:	f000 f80d 	bl	8001424 <userAlarmBeep>
	  }


}
 800140a:	46c0      	nop			@ (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b00d      	add	sp, #52	@ 0x34
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	46c0      	nop			@ (mov r8, r8)
 8001414:	200000a8 	.word	0x200000a8
 8001418:	20000094 	.word	0x20000094
 800141c:	20000091 	.word	0x20000091
 8001420:	200000ac 	.word	0x200000ac

08001424 <userAlarmBeep>:
 * Functionality depends on whether or not this is the first or second snooze.
 * 		First Snooze: 10-minute timer is started and alarm
 * 		              is beeped again at the end of this 10 minutes.
 * 		Second Snooze: No timer is started and silencing the alarm silences it for good.
 */
void userAlarmBeep() {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 800142a:	4b5e      	ldr	r3, [pc, #376]	@ (80015a4 <userAlarmBeep+0x180>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d018      	beq.n	8001464 <userAlarmBeep+0x40>

			// Stop the timer and
			HAL_TIM_Base_Stop_IT(timerSnooze);
 8001432:	4b5d      	ldr	r3, [pc, #372]	@ (80015a8 <userAlarmBeep+0x184>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	0018      	movs	r0, r3
 8001438:	f004 f81e 	bl	8005478 <HAL_TIM_Base_Stop_IT>

			// Reset count to 0
			// only bits 0 - 15 should be changed.
			timerSnooze->Instance->CNT &= 0xFFFF0000;
 800143c:	4b5a      	ldr	r3, [pc, #360]	@ (80015a8 <userAlarmBeep+0x184>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001444:	4b58      	ldr	r3, [pc, #352]	@ (80015a8 <userAlarmBeep+0x184>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	0c12      	lsrs	r2, r2, #16
 800144c:	0412      	lsls	r2, r2, #16
 800144e:	625a      	str	r2, [r3, #36]	@ 0x24

			// Reset interrupt status register
			timerSnooze->Instance->SR &= 0xFFFC;
 8001450:	4b55      	ldr	r3, [pc, #340]	@ (80015a8 <userAlarmBeep+0x184>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	691a      	ldr	r2, [r3, #16]
 8001458:	4b53      	ldr	r3, [pc, #332]	@ (80015a8 <userAlarmBeep+0x184>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4953      	ldr	r1, [pc, #332]	@ (80015ac <userAlarmBeep+0x188>)
 8001460:	400a      	ands	r2, r1
 8001462:	611a      	str	r2, [r3, #16]
//			timerSnooze->Instance->RCR &= 0xFF00;
//			timerSnooze->Instance->RCR |= timerSnooze_RCR;

		}

	HAL_TIM_Base_Stop(timerDelay);
 8001464:	4b52      	ldr	r3, [pc, #328]	@ (80015b0 <userAlarmBeep+0x18c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	0018      	movs	r0, r3
 800146a:	f003 ff8b 	bl	8005384 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 800146e:	4b50      	ldr	r3, [pc, #320]	@ (80015b0 <userAlarmBeep+0x18c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	0018      	movs	r0, r3
 8001474:	f003 ff3a 	bl	80052ec <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001478:	4b4d      	ldr	r3, [pc, #308]	@ (80015b0 <userAlarmBeep+0x18c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001480:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001482:	1cfb      	adds	r3, r7, #3
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine whether to toggle high or low brightness
	 */
	uint8_t intenSet;
	if(displayToggle == 0) { 				// If the user has full brightness enabled, toggle full btightness
 8001488:	4b4a      	ldr	r3, [pc, #296]	@ (80015b4 <userAlarmBeep+0x190>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d103      	bne.n	8001498 <userAlarmBeep+0x74>
		intenSet = 2;
 8001490:	1cbb      	adds	r3, r7, #2
 8001492:	2202      	movs	r2, #2
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	e002      	b.n	800149e <userAlarmBeep+0x7a>
	}
	else {									// Else, toggle low brightness
		intenSet = 1;
 8001498:	1cbb      	adds	r3, r7, #2
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
	}

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 800149e:	f7ff ff39 	bl	8001314 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 80014a2:	4b43      	ldr	r3, [pc, #268]	@ (80015b0 <userAlarmBeep+0x18c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	4a42      	ldr	r2, [pc, #264]	@ (80015b8 <userAlarmBeep+0x194>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d925      	bls.n	8001500 <userAlarmBeep+0xdc>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink * intenSet]);	// Toggle on/off
 80014b4:	1cfb      	adds	r3, r7, #3
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	1cba      	adds	r2, r7, #2
 80014ba:	7812      	ldrb	r2, [r2, #0]
 80014bc:	4353      	muls	r3, r2
 80014be:	4a3f      	ldr	r2, [pc, #252]	@ (80015bc <userAlarmBeep+0x198>)
 80014c0:	5cd3      	ldrb	r3, [r2, r3]
 80014c2:	0018      	movs	r0, r3
 80014c4:	f000 fd4c 	bl	8001f60 <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(buzzerPort, buzzerPin);					// Toggle Buzzer
 80014c8:	4b3d      	ldr	r3, [pc, #244]	@ (80015c0 <userAlarmBeep+0x19c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2280      	movs	r2, #128	@ 0x80
 80014ce:	0052      	lsls	r2, r2, #1
 80014d0:	0011      	movs	r1, r2
 80014d2:	0018      	movs	r0, r3
 80014d4:	f001 fa84 	bl	80029e0 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80014d8:	4b35      	ldr	r3, [pc, #212]	@ (80015b0 <userAlarmBeep+0x18c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e0:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80014e2:	1cfb      	adds	r3, r7, #3
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	1e5a      	subs	r2, r3, #1
 80014e8:	4193      	sbcs	r3, r2
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2201      	movs	r2, #1
 80014ee:	4053      	eors	r3, r2
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	001a      	movs	r2, r3
 80014f4:	1cfb      	adds	r3, r7, #3
 80014f6:	701a      	strb	r2, [r3, #0]
 80014f8:	781a      	ldrb	r2, [r3, #0]
 80014fa:	2101      	movs	r1, #1
 80014fc:	400a      	ands	r2, r1
 80014fe:	701a      	strb	r2, [r3, #0]

		}


		capTouch_readChannels(&capTouch);
 8001500:	4b30      	ldr	r3, [pc, #192]	@ (80015c4 <userAlarmBeep+0x1a0>)
 8001502:	0018      	movs	r0, r3
 8001504:	f7ff f836 	bl	8000574 <capTouch_readChannels>

	} while(capTouch.keyStat == 0x00 &&
 8001508:	4b2e      	ldr	r3, [pc, #184]	@ (80015c4 <userAlarmBeep+0x1a0>)
 800150a:	7c1b      	ldrb	r3, [r3, #16]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10e      	bne.n	800152e <userAlarmBeep+0x10a>
			(HAL_GPIO_ReadPin(alarmEnableButtonPort, alarmEnableButtonPin) != GPIO_PIN_RESET));
 8001510:	4b2d      	ldr	r3, [pc, #180]	@ (80015c8 <userAlarmBeep+0x1a4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2204      	movs	r2, #4
 8001516:	0011      	movs	r1, r2
 8001518:	0018      	movs	r0, r3
 800151a:	f001 fa27 	bl	800296c <HAL_GPIO_ReadPin>
 800151e:	0003      	movs	r3, r0
 8001520:	0019      	movs	r1, r3
 8001522:	1cbb      	adds	r3, r7, #2
 8001524:	1cba      	adds	r2, r7, #2
 8001526:	7812      	ldrb	r2, [r2, #0]
 8001528:	701a      	strb	r2, [r3, #0]
	} while(capTouch.keyStat == 0x00 &&
 800152a:	2900      	cmp	r1, #0
 800152c:	d1b7      	bne.n	800149e <userAlarmBeep+0x7a>

	/*
	 * Stop blinking, turn off buzzer, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 800152e:	4b20      	ldr	r3, [pc, #128]	@ (80015b0 <userAlarmBeep+0x18c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	0018      	movs	r0, r3
 8001534:	f003 ff26 	bl	8005384 <HAL_TIM_Base_Stop>
	HAL_GPIO_WritePin(buzzerPort, buzzerPin, GPIO_PIN_RESET);
 8001538:	4b21      	ldr	r3, [pc, #132]	@ (80015c0 <userAlarmBeep+0x19c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2280      	movs	r2, #128	@ 0x80
 800153e:	0051      	lsls	r1, r2, #1
 8001540:	2200      	movs	r2, #0
 8001542:	0018      	movs	r0, r3
 8001544:	f001 fa2f 	bl	80029a6 <HAL_GPIO_WritePin>
	updateAndDisplayTime();				// Update to current time and display
 8001548:	f7ff fee4 	bl	8001314 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[intenSet]);	// Turn display back on
 800154c:	1cbb      	adds	r3, r7, #2
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4a1a      	ldr	r2, [pc, #104]	@ (80015bc <userAlarmBeep+0x198>)
 8001552:	5cd3      	ldrb	r3, [r2, r3]
 8001554:	0018      	movs	r0, r3
 8001556:	f000 fd03 	bl	8001f60 <sevSeg_setIntensity>
	if(intenSet == 2) {
 800155a:	1cbb      	adds	r3, r7, #2
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d103      	bne.n	800156a <userAlarmBeep+0x146>
		displayToggle = 0;
 8001562:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <userAlarmBeep+0x190>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
 8001568:	e002      	b.n	8001570 <userAlarmBeep+0x14c>
	}
	else {
		displayToggle = 2;
 800156a:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <userAlarmBeep+0x190>)
 800156c:	2202      	movs	r2, #2
 800156e:	701a      	strb	r2, [r3, #0]
	}

	// If this is the first snooze,
	if(!secondSnooze) {
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <userAlarmBeep+0x180>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2201      	movs	r2, #1
 8001576:	4053      	eors	r3, r2
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d008      	beq.n	8001590 <userAlarmBeep+0x16c>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 800157e:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <userAlarmBeep+0x184>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	0018      	movs	r0, r3
 8001584:	f003 ff24 	bl	80053d0 <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <userAlarmBeep+0x180>)
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
		 */
		secondSnooze = false;

	}

}
 800158e:	e005      	b.n	800159c <userAlarmBeep+0x178>
		snoozeCounter = 0;
 8001590:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <userAlarmBeep+0x1a8>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
		secondSnooze = false;
 8001596:	4b03      	ldr	r3, [pc, #12]	@ (80015a4 <userAlarmBeep+0x180>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
}
 800159c:	46c0      	nop			@ (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b002      	add	sp, #8
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2000022a 	.word	0x2000022a
 80015a8:	2000004c 	.word	0x2000004c
 80015ac:	0000fffc 	.word	0x0000fffc
 80015b0:	20000048 	.word	0x20000048
 80015b4:	20000090 	.word	0x20000090
 80015b8:	00007ffe 	.word	0x00007ffe
 80015bc:	080063c0 	.word	0x080063c0
 80015c0:	20000014 	.word	0x20000014
 80015c4:	2000022c 	.word	0x2000022c
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000228 	.word	0x20000228

080015d0 <HAL_GPIO_EXTI_Falling_Callback>:
 * General Falling-Edge EXTI Callback function
 *
 * Internal conditional determines which function to call
 * based on which button was pressed.
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	0002      	movs	r2, r0
 80015d8:	1dbb      	adds	r3, r7, #6
 80015da:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 80015dc:	2208      	movs	r2, #8
 80015de:	1dbb      	adds	r3, r7, #6
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d106      	bne.n	80015f4 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 80015e6:	230f      	movs	r3, #15
 80015e8:	18fc      	adds	r4, r7, r3
 80015ea:	f000 f85f 	bl	80016ac <displayButtonISR>
 80015ee:	0003      	movs	r3, r0
 80015f0:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 80015f2:	e031      	b.n	8001658 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 80015f4:	2204      	movs	r2, #4
 80015f6:	1dbb      	adds	r3, r7, #6
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d106      	bne.n	800160c <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 80015fe:	230f      	movs	r3, #15
 8001600:	18fc      	adds	r4, r7, r3
 8001602:	f000 f87b 	bl	80016fc <alarmEnableISR>
 8001606:	0003      	movs	r3, r0
 8001608:	7023      	strb	r3, [r4, #0]
}
 800160a:	e025      	b.n	8001658 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 800160c:	2380      	movs	r3, #128	@ 0x80
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	1dba      	adds	r2, r7, #6
 8001612:	8812      	ldrh	r2, [r2, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d106      	bne.n	8001626 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 8001618:	230f      	movs	r3, #15
 800161a:	18fc      	adds	r4, r7, r3
 800161c:	f000 f8ca 	bl	80017b4 <alarmSetISR>
 8001620:	0003      	movs	r3, r0
 8001622:	7023      	strb	r3, [r4, #0]
}
 8001624:	e018      	b.n	8001658 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 8001626:	2201      	movs	r2, #1
 8001628:	1dbb      	adds	r3, r7, #6
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	4293      	cmp	r3, r2
 800162e:	d106      	bne.n	800163e <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 8001630:	230f      	movs	r3, #15
 8001632:	18fc      	adds	r4, r7, r3
 8001634:	f000 f9a2 	bl	800197c <hourSetISR>
 8001638:	0003      	movs	r3, r0
 800163a:	7023      	strb	r3, [r4, #0]
}
 800163c:	e00c      	b.n	8001658 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 800163e:	2202      	movs	r2, #2
 8001640:	1dbb      	adds	r3, r7, #6
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	4293      	cmp	r3, r2
 8001646:	d106      	bne.n	8001656 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 8001648:	230f      	movs	r3, #15
 800164a:	18fc      	adds	r4, r7, r3
 800164c:	f000 f9c2 	bl	80019d4 <minuteSetISR>
 8001650:	0003      	movs	r3, r0
 8001652:	7023      	strb	r3, [r4, #0]
}
 8001654:	e000      	b.n	8001658 <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 8001656:	46c0      	nop			@ (mov r8, r8)
}
 8001658:	46c0      	nop			@ (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	b005      	add	sp, #20
 800165e:	bd90      	pop	{r4, r7, pc}

08001660 <HAL_TIM_PeriodElapsedCallback>:
 * Used for second snooze functionality
 *
 * This is entered at the end of a 10-minute snooze, at
 * which point the timer kicks back an interrupt.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

	snoozeCounter++;
 8001668:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	b2da      	uxtb	r2, r3
 8001670:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001672:	701a      	strb	r2, [r3, #0]

	if((htim == timerSnooze) && (secondSnooze == true) && (snoozeCounter == timerSnooze_RCR)) {
 8001674:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	429a      	cmp	r2, r3
 800167c:	d10b      	bne.n	8001696 <HAL_TIM_PeriodElapsedCallback+0x36>
 800167e:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d007      	beq.n	8001696 <HAL_TIM_PeriodElapsedCallback+0x36>
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	001a      	movs	r2, r3
 800168c:	2364      	movs	r3, #100	@ 0x64
 800168e:	429a      	cmp	r2, r3
 8001690:	d101      	bne.n	8001696 <HAL_TIM_PeriodElapsedCallback+0x36>

		userAlarmBeep();
 8001692:	f7ff fec7 	bl	8001424 <userAlarmBeep>

	}

}
 8001696:	46c0      	nop			@ (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	b002      	add	sp, #8
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			@ (mov r8, r8)
 80016a0:	20000228 	.word	0x20000228
 80016a4:	2000004c 	.word	0x2000004c
 80016a8:	2000022a 	.word	0x2000022a

080016ac <displayButtonISR>:

/*
 * Toggles through user time display brightness settings
 */
HAL_StatusTypeDef displayButtonISR(void) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 80016b2:	1dfb      	adds	r3, r7, #7
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 80016b8:	f7ff fe2c 	bl	8001314 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 80016bc:	4b0d      	ldr	r3, [pc, #52]	@ (80016f4 <displayButtonISR+0x48>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	001a      	movs	r2, r3
 80016c2:	4b0d      	ldr	r3, [pc, #52]	@ (80016f8 <displayButtonISR+0x4c>)
 80016c4:	5c9b      	ldrb	r3, [r3, r2]
 80016c6:	0018      	movs	r0, r3
 80016c8:	f000 fc4a 	bl	8001f60 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 80016cc:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <displayButtonISR+0x48>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d903      	bls.n	80016dc <displayButtonISR+0x30>
		displayToggle = 0;
 80016d4:	4b07      	ldr	r3, [pc, #28]	@ (80016f4 <displayButtonISR+0x48>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
 80016da:	e005      	b.n	80016e8 <displayButtonISR+0x3c>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 80016dc:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <displayButtonISR+0x48>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	3301      	adds	r3, #1
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <displayButtonISR+0x48>)
 80016e6:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 80016e8:	1dfb      	adds	r3, r7, #7
 80016ea:	781b      	ldrb	r3, [r3, #0]

}
 80016ec:	0018      	movs	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000090 	.word	0x20000090
 80016f8:	080063c0 	.word	0x080063c0

080016fc <alarmEnableISR>:

/*
 * Toggles user alarm enable bool and alarm enable LED.
 */
HAL_StatusTypeDef alarmEnableISR(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001702:	1dfb      	adds	r3, r7, #7
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8001708:	4b24      	ldr	r3, [pc, #144]	@ (800179c <alarmEnableISR+0xa0>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2201      	movs	r2, #1
 800170e:	4053      	eors	r3, r2
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00b      	beq.n	800172e <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 8001716:	4b22      	ldr	r3, [pc, #136]	@ (80017a0 <alarmEnableISR+0xa4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2280      	movs	r2, #128	@ 0x80
 800171c:	0151      	lsls	r1, r2, #5
 800171e:	2201      	movs	r2, #1
 8001720:	0018      	movs	r0, r3
 8001722:	f001 f940 	bl	80029a6 <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 8001726:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <alarmEnableISR+0xa0>)
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	e010      	b.n	8001750 <alarmEnableISR+0x54>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 800172e:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <alarmEnableISR+0xa0>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00b      	beq.n	800174e <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 8001736:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <alarmEnableISR+0xa4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2280      	movs	r2, #128	@ 0x80
 800173c:	0151      	lsls	r1, r2, #5
 800173e:	2200      	movs	r2, #0
 8001740:	0018      	movs	r0, r3
 8001742:	f001 f930 	bl	80029a6 <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <alarmEnableISR+0xa0>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
 800174c:	e000      	b.n	8001750 <alarmEnableISR+0x54>

	}
	else {
		__NOP();							//Code should never reach here.
 800174e:	46c0      	nop			@ (mov r8, r8)
	}

	/*
	 * Reset snooze time
	 */
	secondSnooze = false;
 8001750:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <alarmEnableISR+0xa8>)
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
	snoozeCounter = 0;
 8001756:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <alarmEnableISR+0xac>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Stop_IT(timerSnooze);					// Stop snooze timer in case it is going
 800175c:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <alarmEnableISR+0xb0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	0018      	movs	r0, r3
 8001762:	f003 fe89 	bl	8005478 <HAL_TIM_Base_Stop_IT>
	timerSnooze->Instance->CNT &= 0xFFFF0000;
 8001766:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <alarmEnableISR+0xb0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800176e:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <alarmEnableISR+0xb0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	0c12      	lsrs	r2, r2, #16
 8001776:	0412      	lsls	r2, r2, #16
 8001778:	625a      	str	r2, [r3, #36]	@ 0x24
	timerSnooze->Instance->SR &= 0xFFFC;
 800177a:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <alarmEnableISR+0xb0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	691a      	ldr	r2, [r3, #16]
 8001782:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <alarmEnableISR+0xb0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4909      	ldr	r1, [pc, #36]	@ (80017b0 <alarmEnableISR+0xb4>)
 800178a:	400a      	ands	r2, r1
 800178c:	611a      	str	r2, [r3, #16]

	return halRet;
 800178e:	1dfb      	adds	r3, r7, #7
 8001790:	781b      	ldrb	r3, [r3, #0]

}
 8001792:	0018      	movs	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	b002      	add	sp, #8
 8001798:	bd80      	pop	{r7, pc}
 800179a:	46c0      	nop			@ (mov r8, r8)
 800179c:	20000091 	.word	0x20000091
 80017a0:	20000010 	.word	0x20000010
 80017a4:	2000022a 	.word	0x2000022a
 80017a8:	20000228 	.word	0x20000228
 80017ac:	2000004c 	.word	0x2000004c
 80017b0:	0000fffc 	.word	0x0000fffc

080017b4 <alarmSetISR>:
 * Delays for 3 seconds, checks if alarm set button is still pressed.
 * If it is, allow user to set the new alarm time
 * and blink display to indicate this
 *
 */
HAL_StatusTypeDef alarmSetISR(void) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80017ba:	003b      	movs	r3, r7
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for 3 seconds to see if alarm set button is still pressed
	 */

	// Delay for 3 * 1s intervals
	for(uint8_t i = 0; i < 3; i++) {
 80017c0:	1dfb      	adds	r3, r7, #7
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
 80017c6:	e01a      	b.n	80017fe <alarmSetISR+0x4a>

		HAL_TIM_Base_Stop(timerDelay);
 80017c8:	4b64      	ldr	r3, [pc, #400]	@ (800195c <alarmSetISR+0x1a8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f003 fdd9 	bl	8005384 <HAL_TIM_Base_Stop>
		timerDelay->Instance->CNT = 0;						// Reset timer base
 80017d2:	4b62      	ldr	r3, [pc, #392]	@ (800195c <alarmSetISR+0x1a8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2200      	movs	r2, #0
 80017da:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80017dc:	4b5f      	ldr	r3, [pc, #380]	@ (800195c <alarmSetISR+0x1a8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	0018      	movs	r0, r3
 80017e2:	f003 fd83 	bl	80052ec <HAL_TIM_Base_Start>
	//	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to

		do {

		} while(__HAL_TIM_GET_COUNTER(timerDelay) < (65535));
 80017e6:	4b5d      	ldr	r3, [pc, #372]	@ (800195c <alarmSetISR+0x1a8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ee:	4a5c      	ldr	r2, [pc, #368]	@ (8001960 <alarmSetISR+0x1ac>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d9f8      	bls.n	80017e6 <alarmSetISR+0x32>
	for(uint8_t i = 0; i < 3; i++) {
 80017f4:	1dfb      	adds	r3, r7, #7
 80017f6:	781a      	ldrb	r2, [r3, #0]
 80017f8:	1dfb      	adds	r3, r7, #7
 80017fa:	3201      	adds	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
 80017fe:	1dfb      	adds	r3, r7, #7
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d9e0      	bls.n	80017c8 <alarmSetISR+0x14>
	}

	// If button is still pressed, we are in alarm set mode.
	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 8001806:	4b57      	ldr	r3, [pc, #348]	@ (8001964 <alarmSetISR+0x1b0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2280      	movs	r2, #128	@ 0x80
 800180c:	0212      	lsls	r2, r2, #8
 800180e:	0011      	movs	r1, r2
 8001810:	0018      	movs	r0, r3
 8001812:	f001 f8ab 	bl	800296c <HAL_GPIO_ReadPin>
 8001816:	1e03      	subs	r3, r0, #0
 8001818:	d102      	bne.n	8001820 <alarmSetISR+0x6c>
		alarmSetMode = true;
 800181a:	4b53      	ldr	r3, [pc, #332]	@ (8001968 <alarmSetISR+0x1b4>)
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
	 * alarm set process until the button is pressed again
	 */


	// Reset Timer
	HAL_TIM_Base_Stop(timerDelay);
 8001820:	4b4e      	ldr	r3, [pc, #312]	@ (800195c <alarmSetISR+0x1a8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	0018      	movs	r0, r3
 8001826:	f003 fdad 	bl	8005384 <HAL_TIM_Base_Stop>
	timerDelay->Instance->CNT = 0;
 800182a:	4b4c      	ldr	r3, [pc, #304]	@ (800195c <alarmSetISR+0x1a8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2200      	movs	r2, #0
 8001832:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001834:	4b49      	ldr	r3, [pc, #292]	@ (800195c <alarmSetISR+0x1a8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	0018      	movs	r0, r3
 800183a:	f003 fd57 	bl	80052ec <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 800183e:	4b47      	ldr	r3, [pc, #284]	@ (800195c <alarmSetISR+0x1a8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	801a      	strh	r2, [r3, #0]

	bool alarmSetButtonReset = false;
 800184a:	1cfb      	adds	r3, r7, #3
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {
 8001850:	4b45      	ldr	r3, [pc, #276]	@ (8001968 <alarmSetISR+0x1b4>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d100      	bne.n	800185a <alarmSetISR+0xa6>
 8001858:	e077      	b.n	800194a <alarmSetISR+0x196>

		// If we were in second snooze mode, kill it.
		secondSnooze = false;
 800185a:	4b44      	ldr	r3, [pc, #272]	@ (800196c <alarmSetISR+0x1b8>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
		snoozeCounter = 0;
 8001860:	4b43      	ldr	r3, [pc, #268]	@ (8001970 <alarmSetISR+0x1bc>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]

		bool displayBlink = false;
 8001866:	1cbb      	adds	r3, r7, #2
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]

		/*
		 * Determine whether to toggle high or low brightness
		 */
		uint8_t intenSet;
		if(displayToggle == 0) { 				// If the user has full brightness enabled, toggle full btightness
 800186c:	4b41      	ldr	r3, [pc, #260]	@ (8001974 <alarmSetISR+0x1c0>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d103      	bne.n	800187c <alarmSetISR+0xc8>
			intenSet = 2;
 8001874:	1c7b      	adds	r3, r7, #1
 8001876:	2202      	movs	r2, #2
 8001878:	701a      	strb	r2, [r3, #0]
 800187a:	e002      	b.n	8001882 <alarmSetISR+0xce>
		}
		else {									// Else, toggle low brightness
			intenSet = 1;
 800187c:	1c7b      	adds	r3, r7, #1
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
		}

		do {											// while the alarm set button is not held down, blink display.

			// Check to make sure the user has released the set button from the initial hold
			if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_SET) {
 8001882:	4b38      	ldr	r3, [pc, #224]	@ (8001964 <alarmSetISR+0x1b0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2280      	movs	r2, #128	@ 0x80
 8001888:	0212      	lsls	r2, r2, #8
 800188a:	0011      	movs	r1, r2
 800188c:	0018      	movs	r0, r3
 800188e:	f001 f86d 	bl	800296c <HAL_GPIO_ReadPin>
 8001892:	0003      	movs	r3, r0
 8001894:	2b01      	cmp	r3, #1
 8001896:	d102      	bne.n	800189e <alarmSetISR+0xea>
				alarmSetButtonReset = true;
 8001898:	1cfb      	adds	r3, r7, #3
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
			}

			updateAndDisplayAlarm();
 800189e:	f7ff fd55 	bl	800134c <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 80018a2:	4b2e      	ldr	r3, [pc, #184]	@ (800195c <alarmSetISR+0x1a8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	1ad2      	subs	r2, r2, r3
 80018b0:	2380      	movs	r3, #128	@ 0x80
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d31e      	bcc.n	80018f6 <alarmSetISR+0x142>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink * intenSet]);		// Initialize to whatever duty cycle
 80018b8:	1cbb      	adds	r3, r7, #2
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	1c7a      	adds	r2, r7, #1
 80018be:	7812      	ldrb	r2, [r2, #0]
 80018c0:	4353      	muls	r3, r2
 80018c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001978 <alarmSetISR+0x1c4>)
 80018c4:	5cd3      	ldrb	r3, [r2, r3]
 80018c6:	0018      	movs	r0, r3
 80018c8:	f000 fb4a 	bl	8001f60 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 80018cc:	4b23      	ldr	r3, [pc, #140]	@ (800195c <alarmSetISR+0x1a8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	801a      	strh	r2, [r3, #0]
				displayBlink = !displayBlink;
 80018d8:	1cbb      	adds	r3, r7, #2
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	1e5a      	subs	r2, r3, #1
 80018de:	4193      	sbcs	r3, r2
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2201      	movs	r2, #1
 80018e4:	4053      	eors	r3, r2
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	001a      	movs	r2, r3
 80018ea:	1cbb      	adds	r3, r7, #2
 80018ec:	701a      	strb	r2, [r3, #0]
 80018ee:	781a      	ldrb	r2, [r3, #0]
 80018f0:	2101      	movs	r1, #1
 80018f2:	400a      	ands	r2, r1
 80018f4:	701a      	strb	r2, [r3, #0]

			}

		}while((HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET)
 80018f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001964 <alarmSetISR+0x1b0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2280      	movs	r2, #128	@ 0x80
 80018fc:	0212      	lsls	r2, r2, #8
 80018fe:	0011      	movs	r1, r2
 8001900:	0018      	movs	r0, r3
 8001902:	f001 f833 	bl	800296c <HAL_GPIO_ReadPin>
 8001906:	1e03      	subs	r3, r0, #0
				|| !alarmSetButtonReset);
 8001908:	d1bb      	bne.n	8001882 <alarmSetISR+0xce>
 800190a:	1cfb      	adds	r3, r7, #3
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2201      	movs	r2, #1
 8001910:	4053      	eors	r3, r2
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1b4      	bne.n	8001882 <alarmSetISR+0xce>

		sevSeg_setIntensity(sevSeg_intensityDuty[intenSet]);			// Turn display back on
 8001918:	1c7b      	adds	r3, r7, #1
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4a16      	ldr	r2, [pc, #88]	@ (8001978 <alarmSetISR+0x1c4>)
 800191e:	5cd3      	ldrb	r3, [r2, r3]
 8001920:	0018      	movs	r0, r3
 8001922:	f000 fb1d 	bl	8001f60 <sevSeg_setIntensity>
		if(intenSet == 2) {
 8001926:	1c7b      	adds	r3, r7, #1
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d103      	bne.n	8001936 <alarmSetISR+0x182>
			displayToggle = 0;
 800192e:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <alarmSetISR+0x1c0>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
 8001934:	e002      	b.n	800193c <alarmSetISR+0x188>
		}
		else {
			displayToggle = 2;
 8001936:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <alarmSetISR+0x1c0>)
 8001938:	2202      	movs	r2, #2
 800193a:	701a      	strb	r2, [r3, #0]
		}


		HAL_TIM_Base_Stop(timerDelay);
 800193c:	4b07      	ldr	r3, [pc, #28]	@ (800195c <alarmSetISR+0x1a8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	0018      	movs	r0, r3
 8001942:	f003 fd1f 	bl	8005384 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8001946:	f7ff fce5 	bl	8001314 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 800194a:	4b07      	ldr	r3, [pc, #28]	@ (8001968 <alarmSetISR+0x1b4>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 8001950:	003b      	movs	r3, r7
 8001952:	781b      	ldrb	r3, [r3, #0]

}
 8001954:	0018      	movs	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	b002      	add	sp, #8
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000048 	.word	0x20000048
 8001960:	0000fffe 	.word	0x0000fffe
 8001964:	20000004 	.word	0x20000004
 8001968:	20000229 	.word	0x20000229
 800196c:	2000022a 	.word	0x2000022a
 8001970:	20000228 	.word	0x20000228
 8001974:	20000090 	.word	0x20000090
 8001978:	080063c0 	.word	0x080063c0

0800197c <hourSetISR>:

/*
 * Increment either user alarm hour value or RTC hour value
 */
HAL_StatusTypeDef hourSetISR(void) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0


	HAL_StatusTypeDef halRet = HAL_OK;
 8001982:	1dfb      	adds	r3, r7, #7
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001988:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <hourSetISR+0x48>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <hourSetISR+0x1a>

		alarmHourInc();
 8001990:	f000 f878 	bl	8001a84 <alarmHourInc>
 8001994:	e00f      	b.n	80019b6 <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 8001996:	f000 f8a5 	bl	8001ae4 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 800199a:	490b      	ldr	r1, [pc, #44]	@ (80019c8 <hourSetISR+0x4c>)
 800199c:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <hourSetISR+0x50>)
 800199e:	2200      	movs	r2, #0
 80019a0:	0018      	movs	r0, r3
 80019a2:	f002 fe47 	bl	8004634 <HAL_RTC_SetTime>


		updateAndDisplayTime();
 80019a6:	f7ff fcb5 	bl	8001314 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80019aa:	4a09      	ldr	r2, [pc, #36]	@ (80019d0 <hourSetISR+0x54>)
 80019ac:	4906      	ldr	r1, [pc, #24]	@ (80019c8 <hourSetISR+0x4c>)
 80019ae:	4b07      	ldr	r3, [pc, #28]	@ (80019cc <hourSetISR+0x50>)
 80019b0:	0018      	movs	r0, r3
 80019b2:	f7ff f84d 	bl	8000a50 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 80019b6:	1dfb      	adds	r3, r7, #7
 80019b8:	781b      	ldrb	r3, [r3, #0]

}
 80019ba:	0018      	movs	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	b002      	add	sp, #8
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	46c0      	nop			@ (mov r8, r8)
 80019c4:	20000229 	.word	0x20000229
 80019c8:	20000094 	.word	0x20000094
 80019cc:	20000118 	.word	0x20000118
 80019d0:	200000a8 	.word	0x200000a8

080019d4 <minuteSetISR>:

/*
 * Increment either user alarm minute value or RTC minute value
 */
HAL_StatusTypeDef minuteSetISR(void) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08c      	sub	sp, #48	@ 0x30
 80019d8:	af00      	add	r7, sp, #0


	HAL_StatusTypeDef halRet = HAL_OK;
 80019da:	232f      	movs	r3, #47	@ 0x2f
 80019dc:	18fb      	adds	r3, r7, r3
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80019e2:	4b24      	ldr	r3, [pc, #144]	@ (8001a74 <minuteSetISR+0xa0>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d002      	beq.n	80019f0 <minuteSetISR+0x1c>

		alarmMinuteInc();
 80019ea:	f000 f8bb 	bl	8001b64 <alarmMinuteInc>
 80019ee:	e03a      	b.n	8001a66 <minuteSetISR+0x92>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 80019f0:	f000 f8d6 	bl	8001ba0 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80019f4:	4920      	ldr	r1, [pc, #128]	@ (8001a78 <minuteSetISR+0xa4>)
 80019f6:	4b21      	ldr	r3, [pc, #132]	@ (8001a7c <minuteSetISR+0xa8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	0018      	movs	r0, r3
 80019fc:	f002 fe1a 	bl	8004634 <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	0018      	movs	r0, r3
 8001a04:	2328      	movs	r3, #40	@ 0x28
 8001a06:	001a      	movs	r2, r3
 8001a08:	2100      	movs	r1, #0
 8001a0a:	f004 fc85 	bl	8006318 <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8001a0e:	2380      	movs	r3, #128	@ 0x80
 8001a10:	005a      	lsls	r2, r3, #1
 8001a12:	1d39      	adds	r1, r7, #4
 8001a14:	4819      	ldr	r0, [pc, #100]	@ (8001a7c <minuteSetISR+0xa8>)
 8001a16:	2300      	movs	r3, #0
 8001a18:	f003 f930 	bl	8004c7c <HAL_RTC_GetAlarm>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001a1c:	4a18      	ldr	r2, [pc, #96]	@ (8001a80 <minuteSetISR+0xac>)
 8001a1e:	4916      	ldr	r1, [pc, #88]	@ (8001a78 <minuteSetISR+0xa4>)
 8001a20:	4b16      	ldr	r3, [pc, #88]	@ (8001a7c <minuteSetISR+0xa8>)
 8001a22:	0018      	movs	r0, r3
 8001a24:	f7ff f814 	bl	8000a50 <getRTCTime>

		if(currTime.Minutes > 58) {
 8001a28:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <minuteSetISR+0xa4>)
 8001a2a:	785b      	ldrb	r3, [r3, #1]
 8001a2c:	2b3a      	cmp	r3, #58	@ 0x3a
 8001a2e:	d903      	bls.n	8001a38 <minuteSetISR+0x64>
			sAlarm.AlarmTime.Minutes = 0;
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	2200      	movs	r2, #0
 8001a34:	705a      	strb	r2, [r3, #1]
 8001a36:	e005      	b.n	8001a44 <minuteSetISR+0x70>
		} else {
			sAlarm.AlarmTime.Minutes = currTime.Minutes + 1;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <minuteSetISR+0xa4>)
 8001a3a:	785b      	ldrb	r3, [r3, #1]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8001a44:	46c0      	nop			@ (mov r8, r8)
 8001a46:	1d39      	adds	r1, r7, #4
 8001a48:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <minuteSetISR+0xa8>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f002 ffd5 	bl	80049fc <HAL_RTC_SetAlarm_IT>
 8001a52:	1e03      	subs	r3, r0, #0
 8001a54:	d1f7      	bne.n	8001a46 <minuteSetISR+0x72>


		updateAndDisplayTime();
 8001a56:	f7ff fc5d 	bl	8001314 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001a5a:	4a09      	ldr	r2, [pc, #36]	@ (8001a80 <minuteSetISR+0xac>)
 8001a5c:	4906      	ldr	r1, [pc, #24]	@ (8001a78 <minuteSetISR+0xa4>)
 8001a5e:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <minuteSetISR+0xa8>)
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7fe fff5 	bl	8000a50 <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 8001a66:	232f      	movs	r3, #47	@ 0x2f
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	781b      	ldrb	r3, [r3, #0]
}
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b00c      	add	sp, #48	@ 0x30
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000229 	.word	0x20000229
 8001a78:	20000094 	.word	0x20000094
 8001a7c:	20000118 	.word	0x20000118
 8001a80:	200000a8 	.word	0x200000a8

08001a84 <alarmHourInc>:

/*
 * Increment user alarm time hour
 */
void alarmHourInc(void) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8001a88:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <alarmHourInc+0x5c>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b0b      	cmp	r3, #11
 8001a8e:	d903      	bls.n	8001a98 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8001a90:	4b13      	ldr	r3, [pc, #76]	@ (8001ae0 <alarmHourInc+0x5c>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	e01e      	b.n	8001ad6 <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 8001a98:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <alarmHourInc+0x5c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b0b      	cmp	r3, #11
 8001a9e:	d10e      	bne.n	8001abe <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <alarmHourInc+0x5c>)
 8001aa2:	78db      	ldrb	r3, [r3, #3]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d103      	bne.n	8001ab0 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <alarmHourInc+0x5c>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	70da      	strb	r2, [r3, #3]
 8001aae:	e002      	b.n	8001ab6 <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <alarmHourInc+0x5c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <alarmHourInc+0x5c>)
 8001ab8:	220c      	movs	r2, #12
 8001aba:	701a      	strb	r2, [r3, #0]
 8001abc:	e00b      	b.n	8001ad6 <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 8001abe:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <alarmHourInc+0x5c>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b0a      	cmp	r3, #10
 8001ac4:	d806      	bhi.n	8001ad4 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001ac6:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <alarmHourInc+0x5c>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	3301      	adds	r3, #1
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4b04      	ldr	r3, [pc, #16]	@ (8001ae0 <alarmHourInc+0x5c>)
 8001ad0:	701a      	strb	r2, [r3, #0]
 8001ad2:	e000      	b.n	8001ad6 <alarmHourInc+0x52>
	}
	else {
		__NOP();
 8001ad4:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001ad6:	f000 f8df 	bl	8001c98 <updateRTCBackupReg>

}
 8001ada:	46c0      	nop			@ (mov r8, r8)
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200000ac 	.word	0x200000ac

08001ae4 <currHourInc>:

/*
 * Increment current time hour
 */
void currHourInc(void) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8001b54 <currHourInc+0x70>)
 8001aea:	491b      	ldr	r1, [pc, #108]	@ (8001b58 <currHourInc+0x74>)
 8001aec:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <currHourInc+0x78>)
 8001aee:	0018      	movs	r0, r3
 8001af0:	f7fe ffae 	bl	8000a50 <getRTCTime>

	if(currTime.Hours >= 12) {
 8001af4:	4b18      	ldr	r3, [pc, #96]	@ (8001b58 <currHourInc+0x74>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b0b      	cmp	r3, #11
 8001afa:	d903      	bls.n	8001b04 <currHourInc+0x20>
		currTime.Hours = 1;
 8001afc:	4b16      	ldr	r3, [pc, #88]	@ (8001b58 <currHourInc+0x74>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
 8001b02:	e01e      	b.n	8001b42 <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 8001b04:	4b14      	ldr	r3, [pc, #80]	@ (8001b58 <currHourInc+0x74>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b0b      	cmp	r3, #11
 8001b0a:	d10e      	bne.n	8001b2a <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001b0c:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <currHourInc+0x74>)
 8001b0e:	78db      	ldrb	r3, [r3, #3]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d103      	bne.n	8001b1c <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001b14:	4b10      	ldr	r3, [pc, #64]	@ (8001b58 <currHourInc+0x74>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	70da      	strb	r2, [r3, #3]
 8001b1a:	e002      	b.n	8001b22 <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <currHourInc+0x74>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 8001b22:	4b0d      	ldr	r3, [pc, #52]	@ (8001b58 <currHourInc+0x74>)
 8001b24:	220c      	movs	r2, #12
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	e00b      	b.n	8001b42 <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b60 <currHourInc+0x7c>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b0a      	cmp	r3, #10
 8001b30:	d806      	bhi.n	8001b40 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 8001b32:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <currHourInc+0x74>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	3301      	adds	r3, #1
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4b07      	ldr	r3, [pc, #28]	@ (8001b58 <currHourInc+0x74>)
 8001b3c:	701a      	strb	r2, [r3, #0]
 8001b3e:	e000      	b.n	8001b42 <currHourInc+0x5e>
	}
	else {
		__NOP();
 8001b40:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001b42:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <currHourInc+0x74>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001b48:	4b03      	ldr	r3, [pc, #12]	@ (8001b58 <currHourInc+0x74>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]

}
 8001b4e:	46c0      	nop			@ (mov r8, r8)
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	200000a8 	.word	0x200000a8
 8001b58:	20000094 	.word	0x20000094
 8001b5c:	20000118 	.word	0x20000118
 8001b60:	200000ac 	.word	0x200000ac

08001b64 <alarmMinuteInc>:

/*
 * Increment User alarm time minute
 */
void alarmMinuteInc(void) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 8001b68:	4b0c      	ldr	r3, [pc, #48]	@ (8001b9c <alarmMinuteInc+0x38>)
 8001b6a:	785b      	ldrb	r3, [r3, #1]
 8001b6c:	2b3a      	cmp	r3, #58	@ 0x3a
 8001b6e:	d903      	bls.n	8001b78 <alarmMinuteInc+0x14>
		/*
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		//alarmHourInc();
		userAlarmTime.Minutes = 0;
 8001b70:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <alarmMinuteInc+0x38>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	705a      	strb	r2, [r3, #1]
 8001b76:	e00b      	b.n	8001b90 <alarmMinuteInc+0x2c>
	}
	else if(userAlarmTime.Minutes < 59) {
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <alarmMinuteInc+0x38>)
 8001b7a:	785b      	ldrb	r3, [r3, #1]
 8001b7c:	2b3a      	cmp	r3, #58	@ 0x3a
 8001b7e:	d806      	bhi.n	8001b8e <alarmMinuteInc+0x2a>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <alarmMinuteInc+0x38>)
 8001b82:	785b      	ldrb	r3, [r3, #1]
 8001b84:	3301      	adds	r3, #1
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <alarmMinuteInc+0x38>)
 8001b8a:	705a      	strb	r2, [r3, #1]
 8001b8c:	e000      	b.n	8001b90 <alarmMinuteInc+0x2c>
	}
	else {
		__NOP();
 8001b8e:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001b90:	f000 f882 	bl	8001c98 <updateRTCBackupReg>

}
 8001b94:	46c0      	nop			@ (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	46c0      	nop			@ (mov r8, r8)
 8001b9c:	200000ac 	.word	0x200000ac

08001ba0 <currMinuteInc>:

/*
 * Increment current time minute
 */
void currMinuteInc(void) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001ba4:	4a11      	ldr	r2, [pc, #68]	@ (8001bec <currMinuteInc+0x4c>)
 8001ba6:	4912      	ldr	r1, [pc, #72]	@ (8001bf0 <currMinuteInc+0x50>)
 8001ba8:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <currMinuteInc+0x54>)
 8001baa:	0018      	movs	r0, r3
 8001bac:	f7fe ff50 	bl	8000a50 <getRTCTime>

	if(currTime.Minutes >= 59) {
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <currMinuteInc+0x50>)
 8001bb2:	785b      	ldrb	r3, [r3, #1]
 8001bb4:	2b3a      	cmp	r3, #58	@ 0x3a
 8001bb6:	d903      	bls.n	8001bc0 <currMinuteInc+0x20>
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		// currHourInc();

		currTime.Minutes = 0;
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <currMinuteInc+0x50>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	705a      	strb	r2, [r3, #1]
 8001bbe:	e00b      	b.n	8001bd8 <currMinuteInc+0x38>
	}
	else if(currTime.Minutes < 59) {
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <currMinuteInc+0x50>)
 8001bc2:	785b      	ldrb	r3, [r3, #1]
 8001bc4:	2b3a      	cmp	r3, #58	@ 0x3a
 8001bc6:	d806      	bhi.n	8001bd6 <currMinuteInc+0x36>
		currTime.Minutes = currTime.Minutes + 1;
 8001bc8:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <currMinuteInc+0x50>)
 8001bca:	785b      	ldrb	r3, [r3, #1]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b07      	ldr	r3, [pc, #28]	@ (8001bf0 <currMinuteInc+0x50>)
 8001bd2:	705a      	strb	r2, [r3, #1]
 8001bd4:	e000      	b.n	8001bd8 <currMinuteInc+0x38>
	}
	else {
		__NOP();
 8001bd6:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	@ (8001bf0 <currMinuteInc+0x50>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001bde:	4b04      	ldr	r3, [pc, #16]	@ (8001bf0 <currMinuteInc+0x50>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]

}
 8001be4:	46c0      	nop			@ (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			@ (mov r8, r8)
 8001bec:	200000a8 	.word	0x200000a8
 8001bf0:	20000094 	.word	0x20000094
 8001bf4:	20000118 	.word	0x20000118

08001bf8 <dispFault>:

/*
 * Displays a non-critical fault to indicate reduced functionality
 */
void dispFault(void) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
 8001bfc:	4b04      	ldr	r3, [pc, #16]	@ (8001c10 <dispFault+0x18>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2101      	movs	r1, #1
 8001c02:	2201      	movs	r2, #1
 8001c04:	0018      	movs	r0, r3
 8001c06:	f000 fece 	bl	80029a6 <HAL_GPIO_WritePin>
}
 8001c0a:	46c0      	nop			@ (mov r8, r8)
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	2000002c 	.word	0x2000002c

08001c14 <dispFailure>:

/*
 * Displays a critical failure and ceases all operations
 */
void dispFailure(void) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8001c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c8c <dispFailure+0x78>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f003 fbb0 	bl	8005384 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001c24:	4b19      	ldr	r3, [pc, #100]	@ (8001c8c <dispFailure+0x78>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f003 fb5f 	bl	80052ec <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001c2e:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <dispFailure+0x78>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c36:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001c38:	1cfb      	adds	r3, r7, #3
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001c3e:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <dispFailure+0x78>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	4a11      	ldr	r2, [pc, #68]	@ (8001c90 <dispFailure+0x7c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d9f6      	bls.n	8001c3e <dispFailure+0x2a>

			HAL_GPIO_TogglePin(alarmLEDPort, alarmLEDPin);
 8001c50:	4b10      	ldr	r3, [pc, #64]	@ (8001c94 <dispFailure+0x80>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2280      	movs	r2, #128	@ 0x80
 8001c56:	0152      	lsls	r2, r2, #5
 8001c58:	0011      	movs	r1, r2
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f000 fec0 	bl	80029e0 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001c60:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <dispFailure+0x78>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c68:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001c6a:	1cfb      	adds	r3, r7, #3
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	1e5a      	subs	r2, r3, #1
 8001c70:	4193      	sbcs	r3, r2
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2201      	movs	r2, #1
 8001c76:	4053      	eors	r3, r2
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	001a      	movs	r2, r3
 8001c7c:	1cfb      	adds	r3, r7, #3
 8001c7e:	701a      	strb	r2, [r3, #0]
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	2101      	movs	r1, #1
 8001c84:	400a      	ands	r2, r1
 8001c86:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001c88:	e7d9      	b.n	8001c3e <dispFailure+0x2a>
 8001c8a:	46c0      	nop			@ (mov r8, r8)
 8001c8c:	20000048 	.word	0x20000048
 8001c90:	00003ffe 	.word	0x00003ffe
 8001c94:	20000010 	.word	0x20000010

08001c98 <updateRTCBackupReg>:
}

/*
 * Updates RTC backup register with user alarm time to be later pulled from in the case of a power outage
 */
void updateRTCBackupReg(void) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <updateRTCBackupReg+0x40>)
 8001c9e:	6819      	ldr	r1, [r3, #0]
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <updateRTCBackupReg+0x44>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	001a      	movs	r2, r3
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <updateRTCBackupReg+0x48>)
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f003 fa8f 	bl	80051cc <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 8001cae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <updateRTCBackupReg+0x4c>)
 8001cb0:	6819      	ldr	r1, [r3, #0]
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cdc <updateRTCBackupReg+0x44>)
 8001cb4:	785b      	ldrb	r3, [r3, #1]
 8001cb6:	001a      	movs	r2, r3
 8001cb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ce0 <updateRTCBackupReg+0x48>)
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f003 fa86 	bl	80051cc <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 8001cc0:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <updateRTCBackupReg+0x50>)
 8001cc2:	6819      	ldr	r1, [r3, #0]
 8001cc4:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <updateRTCBackupReg+0x44>)
 8001cc6:	78db      	ldrb	r3, [r3, #3]
 8001cc8:	001a      	movs	r2, r3
 8001cca:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <updateRTCBackupReg+0x48>)
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f003 fa7d 	bl	80051cc <HAL_RTCEx_BKUPWrite>

}
 8001cd2:	46c0      	nop			@ (mov r8, r8)
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200000c0 	.word	0x200000c0
 8001cdc:	200000ac 	.word	0x200000ac
 8001ce0:	20000118 	.word	0x20000118
 8001ce4:	20000038 	.word	0x20000038
 8001ce8:	2000003c 	.word	0x2000003c

08001cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf0:	b672      	cpsid	i
}
 8001cf2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf4:	46c0      	nop			@ (mov r8, r8)
 8001cf6:	e7fd      	b.n	8001cf4 <Error_Handler+0x8>

08001cf8 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8001cf8:	b5b0      	push	{r4, r5, r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	0005      	movs	r5, r0
 8001d00:	000c      	movs	r4, r1
 8001d02:	0010      	movs	r0, r2
 8001d04:	0019      	movs	r1, r3
 8001d06:	1dbb      	adds	r3, r7, #6
 8001d08:	1c2a      	adds	r2, r5, #0
 8001d0a:	801a      	strh	r2, [r3, #0]
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	1c22      	adds	r2, r4, #0
 8001d10:	801a      	strh	r2, [r3, #0]
 8001d12:	1cbb      	adds	r3, r7, #2
 8001d14:	1c02      	adds	r2, r0, #0
 8001d16:	801a      	strh	r2, [r3, #0]
 8001d18:	003b      	movs	r3, r7
 8001d1a:	1c0a      	adds	r2, r1, #0
 8001d1c:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd8 <sevSeg_Init+0xe0>)
 8001d20:	1dba      	adds	r2, r7, #6
 8001d22:	8812      	ldrh	r2, [r2, #0]
 8001d24:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8001d26:	4b2d      	ldr	r3, [pc, #180]	@ (8001ddc <sevSeg_Init+0xe4>)
 8001d28:	1d3a      	adds	r2, r7, #4
 8001d2a:	8812      	ldrh	r2, [r2, #0]
 8001d2c:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001de0 <sevSeg_Init+0xe8>)
 8001d30:	1cba      	adds	r2, r7, #2
 8001d32:	8812      	ldrh	r2, [r2, #0]
 8001d34:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8001d36:	4b2b      	ldr	r3, [pc, #172]	@ (8001de4 <sevSeg_Init+0xec>)
 8001d38:	003a      	movs	r2, r7
 8001d3a:	8812      	ldrh	r2, [r2, #0]
 8001d3c:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8001de8 <sevSeg_Init+0xf0>)
 8001d40:	2320      	movs	r3, #32
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8001d48:	4a28      	ldr	r2, [pc, #160]	@ (8001dec <sevSeg_Init+0xf4>)
 8001d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d4c:	0010      	movs	r0, r2
 8001d4e:	0019      	movs	r1, r3
 8001d50:	234c      	movs	r3, #76	@ 0x4c
 8001d52:	001a      	movs	r2, r3
 8001d54:	f004 fb0c 	bl	8006370 <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8001d58:	4b25      	ldr	r3, [pc, #148]	@ (8001df0 <sevSeg_Init+0xf8>)
 8001d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d5c:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	e00b      	b.n	8001d7c <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d6a:	18d3      	adds	r3, r2, r3
 8001d6c:	6819      	ldr	r1, [r3, #0]
 8001d6e:	4b21      	ldr	r3, [pc, #132]	@ (8001df4 <sevSeg_Init+0xfc>)
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	0092      	lsls	r2, r2, #2
 8001d74:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	ddf0      	ble.n	8001d64 <sevSeg_Init+0x6c>
	}

	sevSeg_setIntensity(50);
 8001d82:	2032      	movs	r0, #50	@ 0x32
 8001d84:	f000 f8ec 	bl	8001f60 <sevSeg_setIntensity>
//	}
//
//	HAL_TIM_Base_Stop(htim);

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001d88:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <sevSeg_Init+0xfc>)
 8001d8a:	6918      	ldr	r0, [r3, #16]
 8001d8c:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <sevSeg_Init+0xf0>)
 8001d8e:	8819      	ldrh	r1, [r3, #0]
 8001d90:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <sevSeg_Init+0x100>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	001a      	movs	r2, r3
 8001d96:	f000 fe06 	bl	80029a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001d9a:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <sevSeg_Init+0xfc>)
 8001d9c:	6918      	ldr	r0, [r3, #16]
 8001d9e:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <sevSeg_Init+0xf0>)
 8001da0:	8819      	ldrh	r1, [r3, #0]
 8001da2:	4b15      	ldr	r3, [pc, #84]	@ (8001df8 <sevSeg_Init+0x100>)
 8001da4:	785b      	ldrb	r3, [r3, #1]
 8001da6:	001a      	movs	r2, r3
 8001da8:	f000 fdfd 	bl	80029a6 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001dac:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <sevSeg_Init+0xfc>)
 8001dae:	6898      	ldr	r0, [r3, #8]
 8001db0:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <sevSeg_Init+0xe8>)
 8001db2:	8819      	ldrh	r1, [r3, #0]
 8001db4:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <sevSeg_Init+0x100>)
 8001db6:	785b      	ldrb	r3, [r3, #1]
 8001db8:	001a      	movs	r2, r3
 8001dba:	f000 fdf4 	bl	80029a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001df4 <sevSeg_Init+0xfc>)
 8001dc0:	6898      	ldr	r0, [r3, #8]
 8001dc2:	4b07      	ldr	r3, [pc, #28]	@ (8001de0 <sevSeg_Init+0xe8>)
 8001dc4:	8819      	ldrh	r1, [r3, #0]
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001df8 <sevSeg_Init+0x100>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	001a      	movs	r2, r3
 8001dcc:	f000 fdeb 	bl	80029a6 <HAL_GPIO_WritePin>

}
 8001dd0:	46c0      	nop			@ (mov r8, r8)
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	b004      	add	sp, #16
 8001dd6:	bdb0      	pop	{r4, r5, r7, pc}
 8001dd8:	20000240 	.word	0x20000240
 8001ddc:	20000242 	.word	0x20000242
 8001de0:	20000244 	.word	0x20000244
 8001de4:	20000246 	.word	0x20000246
 8001de8:	20000248 	.word	0x20000248
 8001dec:	2000024c 	.word	0x2000024c
 8001df0:	20000298 	.word	0x20000298
 8001df4:	20000050 	.word	0x20000050
 8001df8:	20000064 	.word	0x20000064

08001dfc <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	210a      	movs	r1, #10
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f7fe f97a 	bl	8000104 <__udivsi3>
 8001e10:	0003      	movs	r3, r0
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	2408      	movs	r4, #8
 8001e16:	193b      	adds	r3, r7, r4
 8001e18:	701a      	strb	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	210a      	movs	r1, #10
 8001e20:	0018      	movs	r0, r3
 8001e22:	f7fe f9f5 	bl	8000210 <__aeabi_uidivmod>
 8001e26:	000b      	movs	r3, r1
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	193b      	adds	r3, r7, r4
 8001e2c:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001e32:	210a      	movs	r1, #10
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7fe f965 	bl	8000104 <__udivsi3>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	193b      	adds	r3, r7, r4
 8001e40:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001e46:	210a      	movs	r1, #10
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f7fe f9e1 	bl	8000210 <__aeabi_uidivmod>
 8001e4e:	000b      	movs	r3, r1
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	193b      	adds	r3, r7, r4
 8001e54:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 8001e56:	2116      	movs	r1, #22
 8001e58:	187b      	adds	r3, r7, r1
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	78db      	ldrb	r3, [r3, #3]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d102      	bne.n	8001e6c <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 8001e66:	187b      	adds	r3, r7, r1
 8001e68:	2202      	movs	r2, #2
 8001e6a:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	e04f      	b.n	8001f12 <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 8001e72:	2308      	movs	r3, #8
 8001e74:	18fa      	adds	r2, r7, r3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	18d3      	adds	r3, r2, r3
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	2417      	movs	r4, #23
 8001e80:	193b      	adds	r3, r7, r4
 8001e82:	4a30      	ldr	r2, [pc, #192]	@ (8001f44 <sevSeg_updateDigits+0x148>)
 8001e84:	5c52      	ldrb	r2, [r2, r1]
 8001e86:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d110      	bne.n	8001eb0 <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	210a      	movs	r1, #10
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7fe f935 	bl	8000104 <__udivsi3>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	001a      	movs	r2, r3
 8001ea0:	2316      	movs	r3, #22
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	18d2      	adds	r2, r2, r3
 8001ea8:	193b      	adds	r3, r7, r4
 8001eaa:	4927      	ldr	r1, [pc, #156]	@ (8001f48 <sevSeg_updateDigits+0x14c>)
 8001eac:	5c8a      	ldrb	r2, [r1, r2]
 8001eae:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e027      	b.n	8001f06 <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001eb6:	4b25      	ldr	r3, [pc, #148]	@ (8001f4c <sevSeg_updateDigits+0x150>)
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	4b25      	ldr	r3, [pc, #148]	@ (8001f50 <sevSeg_updateDigits+0x154>)
 8001ebc:	8819      	ldrh	r1, [r3, #0]
 8001ebe:	2417      	movs	r4, #23
 8001ec0:	193b      	adds	r3, r7, r4
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	4a22      	ldr	r2, [pc, #136]	@ (8001f54 <sevSeg_updateDigits+0x158>)
 8001eca:	5cd3      	ldrb	r3, [r2, r3]
 8001ecc:	001a      	movs	r2, r3
 8001ece:	f000 fd6a 	bl	80029a6 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f4c <sevSeg_updateDigits+0x150>)
 8001ed4:	6858      	ldr	r0, [r3, #4]
 8001ed6:	4b20      	ldr	r3, [pc, #128]	@ (8001f58 <sevSeg_updateDigits+0x15c>)
 8001ed8:	8819      	ldrh	r1, [r3, #0]
 8001eda:	4b1e      	ldr	r3, [pc, #120]	@ (8001f54 <sevSeg_updateDigits+0x158>)
 8001edc:	785b      	ldrb	r3, [r3, #1]
 8001ede:	001a      	movs	r2, r3
 8001ee0:	f000 fd61 	bl	80029a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001ee4:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <sevSeg_updateDigits+0x150>)
 8001ee6:	6858      	ldr	r0, [r3, #4]
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <sevSeg_updateDigits+0x15c>)
 8001eea:	8819      	ldrh	r1, [r3, #0]
 8001eec:	4b19      	ldr	r3, [pc, #100]	@ (8001f54 <sevSeg_updateDigits+0x158>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	001a      	movs	r2, r3
 8001ef2:	f000 fd58 	bl	80029a6 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001ef6:	193b      	adds	r3, r7, r4
 8001ef8:	193a      	adds	r2, r7, r4
 8001efa:	7812      	ldrb	r2, [r2, #0]
 8001efc:	0852      	lsrs	r2, r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3301      	adds	r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2b07      	cmp	r3, #7
 8001f0a:	ddd4      	ble.n	8001eb6 <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	ddac      	ble.n	8001e72 <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <sevSeg_updateDigits+0x150>)
 8001f1a:	6898      	ldr	r0, [r3, #8]
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f5c <sevSeg_updateDigits+0x160>)
 8001f1e:	8819      	ldrh	r1, [r3, #0]
 8001f20:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <sevSeg_updateDigits+0x158>)
 8001f22:	785b      	ldrb	r3, [r3, #1]
 8001f24:	001a      	movs	r2, r3
 8001f26:	f000 fd3e 	bl	80029a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001f2a:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <sevSeg_updateDigits+0x150>)
 8001f2c:	6898      	ldr	r0, [r3, #8]
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <sevSeg_updateDigits+0x160>)
 8001f30:	8819      	ldrh	r1, [r3, #0]
 8001f32:	4b08      	ldr	r3, [pc, #32]	@ (8001f54 <sevSeg_updateDigits+0x158>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	001a      	movs	r2, r3
 8001f38:	f000 fd35 	bl	80029a6 <HAL_GPIO_WritePin>

	return;
 8001f3c:	46c0      	nop			@ (mov r8, r8)

}
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b007      	add	sp, #28
 8001f42:	bd90      	pop	{r4, r7, pc}
 8001f44:	080063c4 	.word	0x080063c4
 8001f48:	080063d0 	.word	0x080063d0
 8001f4c:	20000050 	.word	0x20000050
 8001f50:	20000240 	.word	0x20000240
 8001f54:	20000064 	.word	0x20000064
 8001f58:	20000242 	.word	0x20000242
 8001f5c:	20000244 	.word	0x20000244

08001f60 <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	0002      	movs	r2, r0
 8001f68:	1dbb      	adds	r3, r7, #6
 8001f6a:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 8001f6c:	4b20      	ldr	r3, [pc, #128]	@ (8001ff0 <sevSeg_setIntensity+0x90>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d105      	bne.n	8001f80 <sevSeg_setIntensity+0x20>
 8001f74:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff4 <sevSeg_setIntensity+0x94>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	1dba      	adds	r2, r7, #6
 8001f7a:	8812      	ldrh	r2, [r2, #0]
 8001f7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f7e:	e02c      	b.n	8001fda <sevSeg_setIntensity+0x7a>
 8001f80:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff0 <sevSeg_setIntensity+0x90>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d105      	bne.n	8001f94 <sevSeg_setIntensity+0x34>
 8001f88:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff4 <sevSeg_setIntensity+0x94>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	1dbb      	adds	r3, r7, #6
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	6393      	str	r3, [r2, #56]	@ 0x38
 8001f92:	e022      	b.n	8001fda <sevSeg_setIntensity+0x7a>
 8001f94:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <sevSeg_setIntensity+0x90>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d105      	bne.n	8001fa8 <sevSeg_setIntensity+0x48>
 8001f9c:	4b15      	ldr	r3, [pc, #84]	@ (8001ff4 <sevSeg_setIntensity+0x94>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	1dbb      	adds	r3, r7, #6
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001fa6:	e018      	b.n	8001fda <sevSeg_setIntensity+0x7a>
 8001fa8:	4b11      	ldr	r3, [pc, #68]	@ (8001ff0 <sevSeg_setIntensity+0x90>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b0c      	cmp	r3, #12
 8001fae:	d105      	bne.n	8001fbc <sevSeg_setIntensity+0x5c>
 8001fb0:	4b10      	ldr	r3, [pc, #64]	@ (8001ff4 <sevSeg_setIntensity+0x94>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	1dbb      	adds	r3, r7, #6
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fba:	e00e      	b.n	8001fda <sevSeg_setIntensity+0x7a>
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <sevSeg_setIntensity+0x90>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b10      	cmp	r3, #16
 8001fc2:	d105      	bne.n	8001fd0 <sevSeg_setIntensity+0x70>
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <sevSeg_setIntensity+0x94>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	1dbb      	adds	r3, r7, #6
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fce:	e004      	b.n	8001fda <sevSeg_setIntensity+0x7a>
 8001fd0:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <sevSeg_setIntensity+0x94>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	1dbb      	adds	r3, r7, #6
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 8001fda:	4b05      	ldr	r3, [pc, #20]	@ (8001ff0 <sevSeg_setIntensity+0x90>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <sevSeg_setIntensity+0x94>)
 8001fe0:	0011      	movs	r1, r2
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f003 face 	bl	8005584 <HAL_TIM_PWM_Start>

}
 8001fe8:	46c0      	nop			@ (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b002      	add	sp, #8
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000298 	.word	0x20000298
 8001ff4:	2000024c 	.word	0x2000024c

08001ff8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffe:	4b13      	ldr	r3, [pc, #76]	@ (800204c <HAL_MspInit+0x54>)
 8002000:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002002:	4b12      	ldr	r3, [pc, #72]	@ (800204c <HAL_MspInit+0x54>)
 8002004:	2101      	movs	r1, #1
 8002006:	430a      	orrs	r2, r1
 8002008:	641a      	str	r2, [r3, #64]	@ 0x40
 800200a:	4b10      	ldr	r3, [pc, #64]	@ (800204c <HAL_MspInit+0x54>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	2201      	movs	r2, #1
 8002010:	4013      	ands	r3, r2
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <HAL_MspInit+0x54>)
 8002018:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800201a:	4b0c      	ldr	r3, [pc, #48]	@ (800204c <HAL_MspInit+0x54>)
 800201c:	2180      	movs	r1, #128	@ 0x80
 800201e:	0549      	lsls	r1, r1, #21
 8002020:	430a      	orrs	r2, r1
 8002022:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002024:	4b09      	ldr	r3, [pc, #36]	@ (800204c <HAL_MspInit+0x54>)
 8002026:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002028:	2380      	movs	r3, #128	@ 0x80
 800202a:	055b      	lsls	r3, r3, #21
 800202c:	4013      	ands	r3, r2
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	2004      	movs	r0, #4
 8002038:	f000 fb02 	bl	8002640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800203c:	2004      	movs	r0, #4
 800203e:	f000 fb14 	bl	800266a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002042:	46c0      	nop			@ (mov r8, r8)
 8002044:	46bd      	mov	sp, r7
 8002046:	b002      	add	sp, #8
 8002048:	bd80      	pop	{r7, pc}
 800204a:	46c0      	nop			@ (mov r8, r8)
 800204c:	40021000 	.word	0x40021000

08002050 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b095      	sub	sp, #84	@ 0x54
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	233c      	movs	r3, #60	@ 0x3c
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	0018      	movs	r0, r3
 800205e:	2314      	movs	r3, #20
 8002060:	001a      	movs	r2, r3
 8002062:	2100      	movs	r1, #0
 8002064:	f004 f958 	bl	8006318 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002068:	2414      	movs	r4, #20
 800206a:	193b      	adds	r3, r7, r4
 800206c:	0018      	movs	r0, r3
 800206e:	2328      	movs	r3, #40	@ 0x28
 8002070:	001a      	movs	r2, r3
 8002072:	2100      	movs	r1, #0
 8002074:	f004 f950 	bl	8006318 <memset>
  if(hi2c->Instance==I2C1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a22      	ldr	r2, [pc, #136]	@ (8002108 <HAL_I2C_MspInit+0xb8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d13d      	bne.n	80020fe <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002082:	193b      	adds	r3, r7, r4
 8002084:	2220      	movs	r2, #32
 8002086:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002088:	193b      	adds	r3, r7, r4
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800208e:	193b      	adds	r3, r7, r4
 8002090:	0018      	movs	r0, r3
 8002092:	f002 f83b 	bl	800410c <HAL_RCCEx_PeriphCLKConfig>
 8002096:	1e03      	subs	r3, r0, #0
 8002098:	d001      	beq.n	800209e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800209a:	f7ff fe27 	bl	8001cec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209e:	4b1b      	ldr	r3, [pc, #108]	@ (800210c <HAL_I2C_MspInit+0xbc>)
 80020a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020a2:	4b1a      	ldr	r3, [pc, #104]	@ (800210c <HAL_I2C_MspInit+0xbc>)
 80020a4:	2102      	movs	r1, #2
 80020a6:	430a      	orrs	r2, r1
 80020a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80020aa:	4b18      	ldr	r3, [pc, #96]	@ (800210c <HAL_I2C_MspInit+0xbc>)
 80020ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ae:	2202      	movs	r2, #2
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020b6:	213c      	movs	r1, #60	@ 0x3c
 80020b8:	187b      	adds	r3, r7, r1
 80020ba:	22c0      	movs	r2, #192	@ 0xc0
 80020bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020be:	187b      	adds	r3, r7, r1
 80020c0:	2212      	movs	r2, #18
 80020c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	187b      	adds	r3, r7, r1
 80020cc:	2200      	movs	r2, #0
 80020ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80020d0:	187b      	adds	r3, r7, r1
 80020d2:	2206      	movs	r2, #6
 80020d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d6:	187b      	adds	r3, r7, r1
 80020d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002110 <HAL_I2C_MspInit+0xc0>)
 80020da:	0019      	movs	r1, r3
 80020dc:	0010      	movs	r0, r2
 80020de:	f000 fae1 	bl	80026a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020e2:	4b0a      	ldr	r3, [pc, #40]	@ (800210c <HAL_I2C_MspInit+0xbc>)
 80020e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020e6:	4b09      	ldr	r3, [pc, #36]	@ (800210c <HAL_I2C_MspInit+0xbc>)
 80020e8:	2180      	movs	r1, #128	@ 0x80
 80020ea:	0389      	lsls	r1, r1, #14
 80020ec:	430a      	orrs	r2, r1
 80020ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <HAL_I2C_MspInit+0xbc>)
 80020f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020f4:	2380      	movs	r3, #128	@ 0x80
 80020f6:	039b      	lsls	r3, r3, #14
 80020f8:	4013      	ands	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020fe:	46c0      	nop			@ (mov r8, r8)
 8002100:	46bd      	mov	sp, r7
 8002102:	b015      	add	sp, #84	@ 0x54
 8002104:	bd90      	pop	{r4, r7, pc}
 8002106:	46c0      	nop			@ (mov r8, r8)
 8002108:	40005400 	.word	0x40005400
 800210c:	40021000 	.word	0x40021000
 8002110:	50000400 	.word	0x50000400

08002114 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b08f      	sub	sp, #60	@ 0x3c
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800211c:	2410      	movs	r4, #16
 800211e:	193b      	adds	r3, r7, r4
 8002120:	0018      	movs	r0, r3
 8002122:	2328      	movs	r3, #40	@ 0x28
 8002124:	001a      	movs	r2, r3
 8002126:	2100      	movs	r1, #0
 8002128:	f004 f8f6 	bl	8006318 <memset>
  if(hrtc->Instance==RTC)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a19      	ldr	r2, [pc, #100]	@ (8002198 <HAL_RTC_MspInit+0x84>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d12c      	bne.n	8002190 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002136:	193b      	adds	r3, r7, r4
 8002138:	2280      	movs	r2, #128	@ 0x80
 800213a:	0292      	lsls	r2, r2, #10
 800213c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800213e:	193b      	adds	r3, r7, r4
 8002140:	2280      	movs	r2, #128	@ 0x80
 8002142:	0052      	lsls	r2, r2, #1
 8002144:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002146:	193b      	adds	r3, r7, r4
 8002148:	0018      	movs	r0, r3
 800214a:	f001 ffdf 	bl	800410c <HAL_RCCEx_PeriphCLKConfig>
 800214e:	1e03      	subs	r3, r0, #0
 8002150:	d001      	beq.n	8002156 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002152:	f7ff fdcb 	bl	8001cec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002156:	4b11      	ldr	r3, [pc, #68]	@ (800219c <HAL_RTC_MspInit+0x88>)
 8002158:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800215a:	4b10      	ldr	r3, [pc, #64]	@ (800219c <HAL_RTC_MspInit+0x88>)
 800215c:	2180      	movs	r1, #128	@ 0x80
 800215e:	0209      	lsls	r1, r1, #8
 8002160:	430a      	orrs	r2, r1
 8002162:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002164:	4b0d      	ldr	r3, [pc, #52]	@ (800219c <HAL_RTC_MspInit+0x88>)
 8002166:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002168:	4b0c      	ldr	r3, [pc, #48]	@ (800219c <HAL_RTC_MspInit+0x88>)
 800216a:	2180      	movs	r1, #128	@ 0x80
 800216c:	00c9      	lsls	r1, r1, #3
 800216e:	430a      	orrs	r2, r1
 8002170:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002172:	4b0a      	ldr	r3, [pc, #40]	@ (800219c <HAL_RTC_MspInit+0x88>)
 8002174:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002176:	2380      	movs	r3, #128	@ 0x80
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4013      	ands	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	2100      	movs	r1, #0
 8002184:	2002      	movs	r0, #2
 8002186:	f000 fa5b 	bl	8002640 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800218a:	2002      	movs	r0, #2
 800218c:	f000 fa6d 	bl	800266a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002190:	46c0      	nop			@ (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b00f      	add	sp, #60	@ 0x3c
 8002196:	bd90      	pop	{r4, r7, pc}
 8002198:	40002800 	.word	0x40002800
 800219c:	40021000 	.word	0x40021000

080021a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	2380      	movs	r3, #128	@ 0x80
 80021ae:	05db      	lsls	r3, r3, #23
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d10b      	bne.n	80021cc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b4:	4b07      	ldr	r3, [pc, #28]	@ (80021d4 <HAL_TIM_PWM_MspInit+0x34>)
 80021b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021b8:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <HAL_TIM_PWM_MspInit+0x34>)
 80021ba:	2101      	movs	r1, #1
 80021bc:	430a      	orrs	r2, r1
 80021be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021c0:	4b04      	ldr	r3, [pc, #16]	@ (80021d4 <HAL_TIM_PWM_MspInit+0x34>)
 80021c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c4:	2201      	movs	r2, #1
 80021c6:	4013      	ands	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021cc:	46c0      	nop			@ (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b004      	add	sp, #16
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000

080021d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a18      	ldr	r2, [pc, #96]	@ (8002248 <HAL_TIM_Base_MspInit+0x70>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d10e      	bne.n	8002208 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80021ea:	4b18      	ldr	r3, [pc, #96]	@ (800224c <HAL_TIM_Base_MspInit+0x74>)
 80021ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021ee:	4b17      	ldr	r3, [pc, #92]	@ (800224c <HAL_TIM_Base_MspInit+0x74>)
 80021f0:	2180      	movs	r1, #128	@ 0x80
 80021f2:	0209      	lsls	r1, r1, #8
 80021f4:	430a      	orrs	r2, r1
 80021f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80021f8:	4b14      	ldr	r3, [pc, #80]	@ (800224c <HAL_TIM_Base_MspInit+0x74>)
 80021fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021fc:	2380      	movs	r3, #128	@ 0x80
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	4013      	ands	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002206:	e01a      	b.n	800223e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a10      	ldr	r2, [pc, #64]	@ (8002250 <HAL_TIM_Base_MspInit+0x78>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d115      	bne.n	800223e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002212:	4b0e      	ldr	r3, [pc, #56]	@ (800224c <HAL_TIM_Base_MspInit+0x74>)
 8002214:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002216:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <HAL_TIM_Base_MspInit+0x74>)
 8002218:	2180      	movs	r1, #128	@ 0x80
 800221a:	0289      	lsls	r1, r1, #10
 800221c:	430a      	orrs	r2, r1
 800221e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002220:	4b0a      	ldr	r3, [pc, #40]	@ (800224c <HAL_TIM_Base_MspInit+0x74>)
 8002222:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002224:	2380      	movs	r3, #128	@ 0x80
 8002226:	029b      	lsls	r3, r3, #10
 8002228:	4013      	ands	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	2015      	movs	r0, #21
 8002234:	f000 fa04 	bl	8002640 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002238:	2015      	movs	r0, #21
 800223a:	f000 fa16 	bl	800266a <HAL_NVIC_EnableIRQ>
}
 800223e:	46c0      	nop			@ (mov r8, r8)
 8002240:	46bd      	mov	sp, r7
 8002242:	b004      	add	sp, #16
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	40002000 	.word	0x40002000
 800224c:	40021000 	.word	0x40021000
 8002250:	40014400 	.word	0x40014400

08002254 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002254:	b590      	push	{r4, r7, lr}
 8002256:	b089      	sub	sp, #36	@ 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	240c      	movs	r4, #12
 800225e:	193b      	adds	r3, r7, r4
 8002260:	0018      	movs	r0, r3
 8002262:	2314      	movs	r3, #20
 8002264:	001a      	movs	r2, r3
 8002266:	2100      	movs	r1, #0
 8002268:	f004 f856 	bl	8006318 <memset>
  if(htim->Instance==TIM2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	@ 0x80
 8002272:	05db      	lsls	r3, r3, #23
 8002274:	429a      	cmp	r2, r3
 8002276:	d121      	bne.n	80022bc <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002278:	4b12      	ldr	r3, [pc, #72]	@ (80022c4 <HAL_TIM_MspPostInit+0x70>)
 800227a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800227c:	4b11      	ldr	r3, [pc, #68]	@ (80022c4 <HAL_TIM_MspPostInit+0x70>)
 800227e:	2104      	movs	r1, #4
 8002280:	430a      	orrs	r2, r1
 8002282:	635a      	str	r2, [r3, #52]	@ 0x34
 8002284:	4b0f      	ldr	r3, [pc, #60]	@ (80022c4 <HAL_TIM_MspPostInit+0x70>)
 8002286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002288:	2204      	movs	r2, #4
 800228a:	4013      	ands	r3, r2
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 8002290:	0021      	movs	r1, r4
 8002292:	187b      	adds	r3, r7, r1
 8002294:	2240      	movs	r2, #64	@ 0x40
 8002296:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	187b      	adds	r3, r7, r1
 800229a:	2202      	movs	r2, #2
 800229c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	187b      	adds	r3, r7, r1
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a4:	187b      	adds	r3, r7, r1
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80022aa:	187b      	adds	r3, r7, r1
 80022ac:	2202      	movs	r2, #2
 80022ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 80022b0:	187b      	adds	r3, r7, r1
 80022b2:	4a05      	ldr	r2, [pc, #20]	@ (80022c8 <HAL_TIM_MspPostInit+0x74>)
 80022b4:	0019      	movs	r1, r3
 80022b6:	0010      	movs	r0, r2
 80022b8:	f000 f9f4 	bl	80026a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022bc:	46c0      	nop			@ (mov r8, r8)
 80022be:	46bd      	mov	sp, r7
 80022c0:	b009      	add	sp, #36	@ 0x24
 80022c2:	bd90      	pop	{r4, r7, pc}
 80022c4:	40021000 	.word	0x40021000
 80022c8:	50000800 	.word	0x50000800

080022cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022d0:	46c0      	nop			@ (mov r8, r8)
 80022d2:	e7fd      	b.n	80022d0 <NMI_Handler+0x4>

080022d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d8:	46c0      	nop			@ (mov r8, r8)
 80022da:	e7fd      	b.n	80022d8 <HardFault_Handler+0x4>

080022dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80022e0:	46c0      	nop			@ (mov r8, r8)
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ea:	46c0      	nop			@ (mov r8, r8)
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f4:	f000 f8dc 	bl	80024b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f8:	46c0      	nop			@ (mov r8, r8)
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002304:	4b03      	ldr	r3, [pc, #12]	@ (8002314 <RTC_TAMP_IRQHandler+0x14>)
 8002306:	0018      	movs	r0, r3
 8002308:	f002 fd7e 	bl	8004e08 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800230c:	46c0      	nop			@ (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	20000118 	.word	0x20000118

08002318 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800231c:	46c0      	nop			@ (mov r8, r8)
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 8002326:	2001      	movs	r0, #1
 8002328:	f000 fb76 	bl	8002a18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 800232c:	2002      	movs	r0, #2
 800232e:	f000 fb73 	bl	8002a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002332:	46c0      	nop			@ (mov r8, r8)
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 800233c:	2004      	movs	r0, #4
 800233e:	f000 fb6b 	bl	8002a18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 8002342:	2008      	movs	r0, #8
 8002344:	f000 fb68 	bl	8002a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002348:	46c0      	nop			@ (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 8002352:	2380      	movs	r3, #128	@ 0x80
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	0018      	movs	r0, r3
 8002358:	f000 fb5e 	bl	8002a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800235c:	46c0      	nop			@ (mov r8, r8)
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002368:	4b03      	ldr	r3, [pc, #12]	@ (8002378 <TIM16_IRQHandler+0x14>)
 800236a:	0018      	movs	r0, r3
 800236c:	f003 f9e8 	bl	8005740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002370:	46c0      	nop			@ (mov r8, r8)
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	46c0      	nop			@ (mov r8, r8)
 8002378:	200001dc 	.word	0x200001dc

0800237c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002380:	46c0      	nop			@ (mov r8, r8)
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002388:	480d      	ldr	r0, [pc, #52]	@ (80023c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800238a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800238c:	f7ff fff6 	bl	800237c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002390:	480c      	ldr	r0, [pc, #48]	@ (80023c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002392:	490d      	ldr	r1, [pc, #52]	@ (80023c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002394:	4a0d      	ldr	r2, [pc, #52]	@ (80023cc <LoopForever+0xe>)
  movs r3, #0
 8002396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002398:	e002      	b.n	80023a0 <LoopCopyDataInit>

0800239a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800239c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800239e:	3304      	adds	r3, #4

080023a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a4:	d3f9      	bcc.n	800239a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023a6:	4a0a      	ldr	r2, [pc, #40]	@ (80023d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023a8:	4c0a      	ldr	r4, [pc, #40]	@ (80023d4 <LoopForever+0x16>)
  movs r3, #0
 80023aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ac:	e001      	b.n	80023b2 <LoopFillZerobss>

080023ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b0:	3204      	adds	r2, #4

080023b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b4:	d3fb      	bcc.n	80023ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80023b6:	f003 ffb7 	bl	8006328 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80023ba:	f7fe fb5f 	bl	8000a7c <main>

080023be <LoopForever>:

LoopForever:
  b LoopForever
 80023be:	e7fe      	b.n	80023be <LoopForever>
  ldr   r0, =_estack
 80023c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80023c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80023cc:	08006470 	.word	0x08006470
  ldr r2, =_sbss
 80023d0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80023d4:	200002a0 	.word	0x200002a0

080023d8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023d8:	e7fe      	b.n	80023d8 <ADC1_IRQHandler>
	...

080023dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023e2:	1dfb      	adds	r3, r7, #7
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <HAL_Init+0x3c>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <HAL_Init+0x3c>)
 80023ee:	2180      	movs	r1, #128	@ 0x80
 80023f0:	0049      	lsls	r1, r1, #1
 80023f2:	430a      	orrs	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023f6:	2003      	movs	r0, #3
 80023f8:	f000 f810 	bl	800241c <HAL_InitTick>
 80023fc:	1e03      	subs	r3, r0, #0
 80023fe:	d003      	beq.n	8002408 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002400:	1dfb      	adds	r3, r7, #7
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	e001      	b.n	800240c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002408:	f7ff fdf6 	bl	8001ff8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800240c:	1dfb      	adds	r3, r7, #7
 800240e:	781b      	ldrb	r3, [r3, #0]
}
 8002410:	0018      	movs	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	b002      	add	sp, #8
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40022000 	.word	0x40022000

0800241c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800241c:	b590      	push	{r4, r7, lr}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002424:	230f      	movs	r3, #15
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800242c:	4b1d      	ldr	r3, [pc, #116]	@ (80024a4 <HAL_InitTick+0x88>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d02b      	beq.n	800248c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002434:	4b1c      	ldr	r3, [pc, #112]	@ (80024a8 <HAL_InitTick+0x8c>)
 8002436:	681c      	ldr	r4, [r3, #0]
 8002438:	4b1a      	ldr	r3, [pc, #104]	@ (80024a4 <HAL_InitTick+0x88>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	0019      	movs	r1, r3
 800243e:	23fa      	movs	r3, #250	@ 0xfa
 8002440:	0098      	lsls	r0, r3, #2
 8002442:	f7fd fe5f 	bl	8000104 <__udivsi3>
 8002446:	0003      	movs	r3, r0
 8002448:	0019      	movs	r1, r3
 800244a:	0020      	movs	r0, r4
 800244c:	f7fd fe5a 	bl	8000104 <__udivsi3>
 8002450:	0003      	movs	r3, r0
 8002452:	0018      	movs	r0, r3
 8002454:	f000 f919 	bl	800268a <HAL_SYSTICK_Config>
 8002458:	1e03      	subs	r3, r0, #0
 800245a:	d112      	bne.n	8002482 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b03      	cmp	r3, #3
 8002460:	d80a      	bhi.n	8002478 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	2301      	movs	r3, #1
 8002466:	425b      	negs	r3, r3
 8002468:	2200      	movs	r2, #0
 800246a:	0018      	movs	r0, r3
 800246c:	f000 f8e8 	bl	8002640 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002470:	4b0e      	ldr	r3, [pc, #56]	@ (80024ac <HAL_InitTick+0x90>)
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	e00d      	b.n	8002494 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002478:	230f      	movs	r3, #15
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
 8002480:	e008      	b.n	8002494 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002482:	230f      	movs	r3, #15
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	e003      	b.n	8002494 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800248c:	230f      	movs	r3, #15
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002494:	230f      	movs	r3, #15
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	781b      	ldrb	r3, [r3, #0]
}
 800249a:	0018      	movs	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	b005      	add	sp, #20
 80024a0:	bd90      	pop	{r4, r7, pc}
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	20000070 	.word	0x20000070
 80024a8:	20000068 	.word	0x20000068
 80024ac:	2000006c 	.word	0x2000006c

080024b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024b4:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <HAL_IncTick+0x1c>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	001a      	movs	r2, r3
 80024ba:	4b05      	ldr	r3, [pc, #20]	@ (80024d0 <HAL_IncTick+0x20>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	18d2      	adds	r2, r2, r3
 80024c0:	4b03      	ldr	r3, [pc, #12]	@ (80024d0 <HAL_IncTick+0x20>)
 80024c2:	601a      	str	r2, [r3, #0]
}
 80024c4:	46c0      	nop			@ (mov r8, r8)
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	46c0      	nop			@ (mov r8, r8)
 80024cc:	20000070 	.word	0x20000070
 80024d0:	2000029c 	.word	0x2000029c

080024d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  return uwTick;
 80024d8:	4b02      	ldr	r3, [pc, #8]	@ (80024e4 <HAL_GetTick+0x10>)
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	2000029c 	.word	0x2000029c

080024e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	0002      	movs	r2, r0
 80024f0:	1dfb      	adds	r3, r7, #7
 80024f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024f4:	1dfb      	adds	r3, r7, #7
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80024fa:	d809      	bhi.n	8002510 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fc:	1dfb      	adds	r3, r7, #7
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	001a      	movs	r2, r3
 8002502:	231f      	movs	r3, #31
 8002504:	401a      	ands	r2, r3
 8002506:	4b04      	ldr	r3, [pc, #16]	@ (8002518 <__NVIC_EnableIRQ+0x30>)
 8002508:	2101      	movs	r1, #1
 800250a:	4091      	lsls	r1, r2
 800250c:	000a      	movs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002510:	46c0      	nop			@ (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b002      	add	sp, #8
 8002516:	bd80      	pop	{r7, pc}
 8002518:	e000e100 	.word	0xe000e100

0800251c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	0002      	movs	r2, r0
 8002524:	6039      	str	r1, [r7, #0]
 8002526:	1dfb      	adds	r3, r7, #7
 8002528:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800252a:	1dfb      	adds	r3, r7, #7
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002530:	d828      	bhi.n	8002584 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002532:	4a2f      	ldr	r2, [pc, #188]	@ (80025f0 <__NVIC_SetPriority+0xd4>)
 8002534:	1dfb      	adds	r3, r7, #7
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	b25b      	sxtb	r3, r3
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	33c0      	adds	r3, #192	@ 0xc0
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	589b      	ldr	r3, [r3, r2]
 8002542:	1dfa      	adds	r2, r7, #7
 8002544:	7812      	ldrb	r2, [r2, #0]
 8002546:	0011      	movs	r1, r2
 8002548:	2203      	movs	r2, #3
 800254a:	400a      	ands	r2, r1
 800254c:	00d2      	lsls	r2, r2, #3
 800254e:	21ff      	movs	r1, #255	@ 0xff
 8002550:	4091      	lsls	r1, r2
 8002552:	000a      	movs	r2, r1
 8002554:	43d2      	mvns	r2, r2
 8002556:	401a      	ands	r2, r3
 8002558:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	019b      	lsls	r3, r3, #6
 800255e:	22ff      	movs	r2, #255	@ 0xff
 8002560:	401a      	ands	r2, r3
 8002562:	1dfb      	adds	r3, r7, #7
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	0018      	movs	r0, r3
 8002568:	2303      	movs	r3, #3
 800256a:	4003      	ands	r3, r0
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002570:	481f      	ldr	r0, [pc, #124]	@ (80025f0 <__NVIC_SetPriority+0xd4>)
 8002572:	1dfb      	adds	r3, r7, #7
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	b25b      	sxtb	r3, r3
 8002578:	089b      	lsrs	r3, r3, #2
 800257a:	430a      	orrs	r2, r1
 800257c:	33c0      	adds	r3, #192	@ 0xc0
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002582:	e031      	b.n	80025e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002584:	4a1b      	ldr	r2, [pc, #108]	@ (80025f4 <__NVIC_SetPriority+0xd8>)
 8002586:	1dfb      	adds	r3, r7, #7
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	0019      	movs	r1, r3
 800258c:	230f      	movs	r3, #15
 800258e:	400b      	ands	r3, r1
 8002590:	3b08      	subs	r3, #8
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	3306      	adds	r3, #6
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	18d3      	adds	r3, r2, r3
 800259a:	3304      	adds	r3, #4
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	1dfa      	adds	r2, r7, #7
 80025a0:	7812      	ldrb	r2, [r2, #0]
 80025a2:	0011      	movs	r1, r2
 80025a4:	2203      	movs	r2, #3
 80025a6:	400a      	ands	r2, r1
 80025a8:	00d2      	lsls	r2, r2, #3
 80025aa:	21ff      	movs	r1, #255	@ 0xff
 80025ac:	4091      	lsls	r1, r2
 80025ae:	000a      	movs	r2, r1
 80025b0:	43d2      	mvns	r2, r2
 80025b2:	401a      	ands	r2, r3
 80025b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	019b      	lsls	r3, r3, #6
 80025ba:	22ff      	movs	r2, #255	@ 0xff
 80025bc:	401a      	ands	r2, r3
 80025be:	1dfb      	adds	r3, r7, #7
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	0018      	movs	r0, r3
 80025c4:	2303      	movs	r3, #3
 80025c6:	4003      	ands	r3, r0
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025cc:	4809      	ldr	r0, [pc, #36]	@ (80025f4 <__NVIC_SetPriority+0xd8>)
 80025ce:	1dfb      	adds	r3, r7, #7
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	001c      	movs	r4, r3
 80025d4:	230f      	movs	r3, #15
 80025d6:	4023      	ands	r3, r4
 80025d8:	3b08      	subs	r3, #8
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	430a      	orrs	r2, r1
 80025de:	3306      	adds	r3, #6
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	18c3      	adds	r3, r0, r3
 80025e4:	3304      	adds	r3, #4
 80025e6:	601a      	str	r2, [r3, #0]
}
 80025e8:	46c0      	nop			@ (mov r8, r8)
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b003      	add	sp, #12
 80025ee:	bd90      	pop	{r4, r7, pc}
 80025f0:	e000e100 	.word	0xe000e100
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	1e5a      	subs	r2, r3, #1
 8002604:	2380      	movs	r3, #128	@ 0x80
 8002606:	045b      	lsls	r3, r3, #17
 8002608:	429a      	cmp	r2, r3
 800260a:	d301      	bcc.n	8002610 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800260c:	2301      	movs	r3, #1
 800260e:	e010      	b.n	8002632 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002610:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <SysTick_Config+0x44>)
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	3a01      	subs	r2, #1
 8002616:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002618:	2301      	movs	r3, #1
 800261a:	425b      	negs	r3, r3
 800261c:	2103      	movs	r1, #3
 800261e:	0018      	movs	r0, r3
 8002620:	f7ff ff7c 	bl	800251c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002624:	4b05      	ldr	r3, [pc, #20]	@ (800263c <SysTick_Config+0x44>)
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800262a:	4b04      	ldr	r3, [pc, #16]	@ (800263c <SysTick_Config+0x44>)
 800262c:	2207      	movs	r2, #7
 800262e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002630:	2300      	movs	r3, #0
}
 8002632:	0018      	movs	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	b002      	add	sp, #8
 8002638:	bd80      	pop	{r7, pc}
 800263a:	46c0      	nop			@ (mov r8, r8)
 800263c:	e000e010 	.word	0xe000e010

08002640 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	210f      	movs	r1, #15
 800264c:	187b      	adds	r3, r7, r1
 800264e:	1c02      	adds	r2, r0, #0
 8002650:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	187b      	adds	r3, r7, r1
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	b25b      	sxtb	r3, r3
 800265a:	0011      	movs	r1, r2
 800265c:	0018      	movs	r0, r3
 800265e:	f7ff ff5d 	bl	800251c <__NVIC_SetPriority>
}
 8002662:	46c0      	nop			@ (mov r8, r8)
 8002664:	46bd      	mov	sp, r7
 8002666:	b004      	add	sp, #16
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	0002      	movs	r2, r0
 8002672:	1dfb      	adds	r3, r7, #7
 8002674:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002676:	1dfb      	adds	r3, r7, #7
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	b25b      	sxtb	r3, r3
 800267c:	0018      	movs	r0, r3
 800267e:	f7ff ff33 	bl	80024e8 <__NVIC_EnableIRQ>
}
 8002682:	46c0      	nop			@ (mov r8, r8)
 8002684:	46bd      	mov	sp, r7
 8002686:	b002      	add	sp, #8
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	0018      	movs	r0, r3
 8002696:	f7ff ffaf 	bl	80025f8 <SysTick_Config>
 800269a:	0003      	movs	r3, r0
}
 800269c:	0018      	movs	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	b002      	add	sp, #8
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026b2:	e147      	b.n	8002944 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2101      	movs	r1, #1
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4091      	lsls	r1, r2
 80026be:	000a      	movs	r2, r1
 80026c0:	4013      	ands	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d100      	bne.n	80026cc <HAL_GPIO_Init+0x28>
 80026ca:	e138      	b.n	800293e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2203      	movs	r2, #3
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d005      	beq.n	80026e4 <HAL_GPIO_Init+0x40>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2203      	movs	r2, #3
 80026de:	4013      	ands	r3, r2
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d130      	bne.n	8002746 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	2203      	movs	r2, #3
 80026f0:	409a      	lsls	r2, r3
 80026f2:	0013      	movs	r3, r2
 80026f4:	43da      	mvns	r2, r3
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	409a      	lsls	r2, r3
 8002706:	0013      	movs	r3, r2
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800271a:	2201      	movs	r2, #1
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	409a      	lsls	r2, r3
 8002720:	0013      	movs	r3, r2
 8002722:	43da      	mvns	r2, r3
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	2201      	movs	r2, #1
 8002732:	401a      	ands	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	409a      	lsls	r2, r3
 8002738:	0013      	movs	r3, r2
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2203      	movs	r2, #3
 800274c:	4013      	ands	r3, r2
 800274e:	2b03      	cmp	r3, #3
 8002750:	d017      	beq.n	8002782 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	2203      	movs	r2, #3
 800275e:	409a      	lsls	r2, r3
 8002760:	0013      	movs	r3, r2
 8002762:	43da      	mvns	r2, r3
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	409a      	lsls	r2, r3
 8002774:	0013      	movs	r3, r2
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2203      	movs	r2, #3
 8002788:	4013      	ands	r3, r2
 800278a:	2b02      	cmp	r3, #2
 800278c:	d123      	bne.n	80027d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	08da      	lsrs	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3208      	adds	r2, #8
 8002796:	0092      	lsls	r2, r2, #2
 8002798:	58d3      	ldr	r3, [r2, r3]
 800279a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2207      	movs	r2, #7
 80027a0:	4013      	ands	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	220f      	movs	r2, #15
 80027a6:	409a      	lsls	r2, r3
 80027a8:	0013      	movs	r3, r2
 80027aa:	43da      	mvns	r2, r3
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4013      	ands	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2107      	movs	r1, #7
 80027ba:	400b      	ands	r3, r1
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	409a      	lsls	r2, r3
 80027c0:	0013      	movs	r3, r2
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	08da      	lsrs	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3208      	adds	r2, #8
 80027d0:	0092      	lsls	r2, r2, #2
 80027d2:	6939      	ldr	r1, [r7, #16]
 80027d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	2203      	movs	r2, #3
 80027e2:	409a      	lsls	r2, r3
 80027e4:	0013      	movs	r3, r2
 80027e6:	43da      	mvns	r2, r3
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4013      	ands	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2203      	movs	r2, #3
 80027f4:	401a      	ands	r2, r3
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	409a      	lsls	r2, r3
 80027fc:	0013      	movs	r3, r2
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	23c0      	movs	r3, #192	@ 0xc0
 8002810:	029b      	lsls	r3, r3, #10
 8002812:	4013      	ands	r3, r2
 8002814:	d100      	bne.n	8002818 <HAL_GPIO_Init+0x174>
 8002816:	e092      	b.n	800293e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002818:	4a50      	ldr	r2, [pc, #320]	@ (800295c <HAL_GPIO_Init+0x2b8>)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	089b      	lsrs	r3, r3, #2
 800281e:	3318      	adds	r3, #24
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	589b      	ldr	r3, [r3, r2]
 8002824:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2203      	movs	r2, #3
 800282a:	4013      	ands	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	220f      	movs	r2, #15
 8002830:	409a      	lsls	r2, r3
 8002832:	0013      	movs	r3, r2
 8002834:	43da      	mvns	r2, r3
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	23a0      	movs	r3, #160	@ 0xa0
 8002840:	05db      	lsls	r3, r3, #23
 8002842:	429a      	cmp	r2, r3
 8002844:	d013      	beq.n	800286e <HAL_GPIO_Init+0x1ca>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a45      	ldr	r2, [pc, #276]	@ (8002960 <HAL_GPIO_Init+0x2bc>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00d      	beq.n	800286a <HAL_GPIO_Init+0x1c6>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a44      	ldr	r2, [pc, #272]	@ (8002964 <HAL_GPIO_Init+0x2c0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d007      	beq.n	8002866 <HAL_GPIO_Init+0x1c2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a43      	ldr	r2, [pc, #268]	@ (8002968 <HAL_GPIO_Init+0x2c4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d101      	bne.n	8002862 <HAL_GPIO_Init+0x1be>
 800285e:	2303      	movs	r3, #3
 8002860:	e006      	b.n	8002870 <HAL_GPIO_Init+0x1cc>
 8002862:	2305      	movs	r3, #5
 8002864:	e004      	b.n	8002870 <HAL_GPIO_Init+0x1cc>
 8002866:	2302      	movs	r3, #2
 8002868:	e002      	b.n	8002870 <HAL_GPIO_Init+0x1cc>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_GPIO_Init+0x1cc>
 800286e:	2300      	movs	r3, #0
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	2103      	movs	r1, #3
 8002874:	400a      	ands	r2, r1
 8002876:	00d2      	lsls	r2, r2, #3
 8002878:	4093      	lsls	r3, r2
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002880:	4936      	ldr	r1, [pc, #216]	@ (800295c <HAL_GPIO_Init+0x2b8>)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	089b      	lsrs	r3, r3, #2
 8002886:	3318      	adds	r3, #24
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800288e:	4b33      	ldr	r3, [pc, #204]	@ (800295c <HAL_GPIO_Init+0x2b8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	43da      	mvns	r2, r3
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	2380      	movs	r3, #128	@ 0x80
 80028a4:	035b      	lsls	r3, r3, #13
 80028a6:	4013      	ands	r3, r2
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028b2:	4b2a      	ldr	r3, [pc, #168]	@ (800295c <HAL_GPIO_Init+0x2b8>)
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80028b8:	4b28      	ldr	r3, [pc, #160]	@ (800295c <HAL_GPIO_Init+0x2b8>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	43da      	mvns	r2, r3
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	2380      	movs	r3, #128	@ 0x80
 80028ce:	039b      	lsls	r3, r3, #14
 80028d0:	4013      	ands	r3, r2
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028dc:	4b1f      	ldr	r3, [pc, #124]	@ (800295c <HAL_GPIO_Init+0x2b8>)
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028e2:	4a1e      	ldr	r2, [pc, #120]	@ (800295c <HAL_GPIO_Init+0x2b8>)
 80028e4:	2384      	movs	r3, #132	@ 0x84
 80028e6:	58d3      	ldr	r3, [r2, r3]
 80028e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	43da      	mvns	r2, r3
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4013      	ands	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	2380      	movs	r3, #128	@ 0x80
 80028fa:	029b      	lsls	r3, r3, #10
 80028fc:	4013      	ands	r3, r2
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002908:	4914      	ldr	r1, [pc, #80]	@ (800295c <HAL_GPIO_Init+0x2b8>)
 800290a:	2284      	movs	r2, #132	@ 0x84
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002910:	4a12      	ldr	r2, [pc, #72]	@ (800295c <HAL_GPIO_Init+0x2b8>)
 8002912:	2380      	movs	r3, #128	@ 0x80
 8002914:	58d3      	ldr	r3, [r2, r3]
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	43da      	mvns	r2, r3
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4013      	ands	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	2380      	movs	r3, #128	@ 0x80
 8002928:	025b      	lsls	r3, r3, #9
 800292a:	4013      	ands	r3, r2
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002936:	4909      	ldr	r1, [pc, #36]	@ (800295c <HAL_GPIO_Init+0x2b8>)
 8002938:	2280      	movs	r2, #128	@ 0x80
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	3301      	adds	r3, #1
 8002942:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	40da      	lsrs	r2, r3
 800294c:	1e13      	subs	r3, r2, #0
 800294e:	d000      	beq.n	8002952 <HAL_GPIO_Init+0x2ae>
 8002950:	e6b0      	b.n	80026b4 <HAL_GPIO_Init+0x10>
  }
}
 8002952:	46c0      	nop			@ (mov r8, r8)
 8002954:	46c0      	nop			@ (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	b006      	add	sp, #24
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40021800 	.word	0x40021800
 8002960:	50000400 	.word	0x50000400
 8002964:	50000800 	.word	0x50000800
 8002968:	50000c00 	.word	0x50000c00

0800296c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	000a      	movs	r2, r1
 8002976:	1cbb      	adds	r3, r7, #2
 8002978:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	1cba      	adds	r2, r7, #2
 8002980:	8812      	ldrh	r2, [r2, #0]
 8002982:	4013      	ands	r3, r2
 8002984:	d004      	beq.n	8002990 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002986:	230f      	movs	r3, #15
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	2201      	movs	r2, #1
 800298c:	701a      	strb	r2, [r3, #0]
 800298e:	e003      	b.n	8002998 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002990:	230f      	movs	r3, #15
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002998:	230f      	movs	r3, #15
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	781b      	ldrb	r3, [r3, #0]
}
 800299e:	0018      	movs	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	b004      	add	sp, #16
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	0008      	movs	r0, r1
 80029b0:	0011      	movs	r1, r2
 80029b2:	1cbb      	adds	r3, r7, #2
 80029b4:	1c02      	adds	r2, r0, #0
 80029b6:	801a      	strh	r2, [r3, #0]
 80029b8:	1c7b      	adds	r3, r7, #1
 80029ba:	1c0a      	adds	r2, r1, #0
 80029bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029be:	1c7b      	adds	r3, r7, #1
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d004      	beq.n	80029d0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029c6:	1cbb      	adds	r3, r7, #2
 80029c8:	881a      	ldrh	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029ce:	e003      	b.n	80029d8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029d0:	1cbb      	adds	r3, r7, #2
 80029d2:	881a      	ldrh	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80029d8:	46c0      	nop			@ (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	b002      	add	sp, #8
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	000a      	movs	r2, r1
 80029ea:	1cbb      	adds	r3, r7, #2
 80029ec:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029f4:	1cbb      	adds	r3, r7, #2
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4013      	ands	r3, r2
 80029fc:	041a      	lsls	r2, r3, #16
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	1cb9      	adds	r1, r7, #2
 8002a04:	8809      	ldrh	r1, [r1, #0]
 8002a06:	400b      	ands	r3, r1
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	619a      	str	r2, [r3, #24]
}
 8002a0e:	46c0      	nop			@ (mov r8, r8)
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b004      	add	sp, #16
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	0002      	movs	r2, r0
 8002a20:	1dbb      	adds	r3, r7, #6
 8002a22:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002a24:	4b10      	ldr	r3, [pc, #64]	@ (8002a68 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	1dba      	adds	r2, r7, #6
 8002a2a:	8812      	ldrh	r2, [r2, #0]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d008      	beq.n	8002a42 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002a30:	4b0d      	ldr	r3, [pc, #52]	@ (8002a68 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002a32:	1dba      	adds	r2, r7, #6
 8002a34:	8812      	ldrh	r2, [r2, #0]
 8002a36:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002a38:	1dbb      	adds	r3, r7, #6
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f000 f815 	bl	8002a6c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002a42:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	1dba      	adds	r2, r7, #6
 8002a48:	8812      	ldrh	r2, [r2, #0]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d008      	beq.n	8002a60 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002a4e:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002a50:	1dba      	adds	r2, r7, #6
 8002a52:	8812      	ldrh	r2, [r2, #0]
 8002a54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002a56:	1dbb      	adds	r3, r7, #6
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f7fe fdb8 	bl	80015d0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002a60:	46c0      	nop			@ (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b002      	add	sp, #8
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021800 	.word	0x40021800

08002a6c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	0002      	movs	r2, r0
 8002a74:	1dbb      	adds	r3, r7, #6
 8002a76:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002a78:	46c0      	nop			@ (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b002      	add	sp, #8
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e08f      	b.n	8002bb2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2241      	movs	r2, #65	@ 0x41
 8002a96:	5c9b      	ldrb	r3, [r3, r2]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d107      	bne.n	8002aae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2240      	movs	r2, #64	@ 0x40
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f7ff fad1 	bl	8002050 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2241      	movs	r2, #65	@ 0x41
 8002ab2:	2124      	movs	r1, #36	@ 0x24
 8002ab4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	438a      	bics	r2, r1
 8002ac4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	493b      	ldr	r1, [pc, #236]	@ (8002bbc <HAL_I2C_Init+0x13c>)
 8002ad0:	400a      	ands	r2, r1
 8002ad2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4938      	ldr	r1, [pc, #224]	@ (8002bc0 <HAL_I2C_Init+0x140>)
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d108      	bne.n	8002afe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2180      	movs	r1, #128	@ 0x80
 8002af6:	0209      	lsls	r1, r1, #8
 8002af8:	430a      	orrs	r2, r1
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	e007      	b.n	8002b0e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2184      	movs	r1, #132	@ 0x84
 8002b08:	0209      	lsls	r1, r1, #8
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d109      	bne.n	8002b2a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2180      	movs	r1, #128	@ 0x80
 8002b22:	0109      	lsls	r1, r1, #4
 8002b24:	430a      	orrs	r2, r1
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	e007      	b.n	8002b3a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4923      	ldr	r1, [pc, #140]	@ (8002bc4 <HAL_I2C_Init+0x144>)
 8002b36:	400a      	ands	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4920      	ldr	r1, [pc, #128]	@ (8002bc8 <HAL_I2C_Init+0x148>)
 8002b46:	430a      	orrs	r2, r1
 8002b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	491a      	ldr	r1, [pc, #104]	@ (8002bc0 <HAL_I2C_Init+0x140>)
 8002b56:	400a      	ands	r2, r1
 8002b58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69d9      	ldr	r1, [r3, #28]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a1a      	ldr	r2, [r3, #32]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2101      	movs	r1, #1
 8002b90:	430a      	orrs	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2241      	movs	r2, #65	@ 0x41
 8002b9e:	2120      	movs	r1, #32
 8002ba0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2242      	movs	r2, #66	@ 0x42
 8002bac:	2100      	movs	r1, #0
 8002bae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b002      	add	sp, #8
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			@ (mov r8, r8)
 8002bbc:	f0ffffff 	.word	0xf0ffffff
 8002bc0:	ffff7fff 	.word	0xffff7fff
 8002bc4:	fffff7ff 	.word	0xfffff7ff
 8002bc8:	02008000 	.word	0x02008000

08002bcc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b089      	sub	sp, #36	@ 0x24
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	0008      	movs	r0, r1
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	0019      	movs	r1, r3
 8002bda:	230a      	movs	r3, #10
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	1c02      	adds	r2, r0, #0
 8002be0:	801a      	strh	r2, [r3, #0]
 8002be2:	2308      	movs	r3, #8
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	1c0a      	adds	r2, r1, #0
 8002be8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2241      	movs	r2, #65	@ 0x41
 8002bee:	5c9b      	ldrb	r3, [r3, r2]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d000      	beq.n	8002bf8 <HAL_I2C_Master_Transmit+0x2c>
 8002bf6:	e10a      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2240      	movs	r2, #64	@ 0x40
 8002bfc:	5c9b      	ldrb	r3, [r3, r2]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_I2C_Master_Transmit+0x3a>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e104      	b.n	8002e10 <HAL_I2C_Master_Transmit+0x244>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2240      	movs	r2, #64	@ 0x40
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c0e:	f7ff fc61 	bl	80024d4 <HAL_GetTick>
 8002c12:	0003      	movs	r3, r0
 8002c14:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c16:	2380      	movs	r3, #128	@ 0x80
 8002c18:	0219      	lsls	r1, r3, #8
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	2319      	movs	r3, #25
 8002c22:	2201      	movs	r2, #1
 8002c24:	f000 fa26 	bl	8003074 <I2C_WaitOnFlagUntilTimeout>
 8002c28:	1e03      	subs	r3, r0, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0ef      	b.n	8002e10 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2241      	movs	r2, #65	@ 0x41
 8002c34:	2121      	movs	r1, #33	@ 0x21
 8002c36:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2242      	movs	r2, #66	@ 0x42
 8002c3c:	2110      	movs	r1, #16
 8002c3e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2208      	movs	r2, #8
 8002c50:	18ba      	adds	r2, r7, r2
 8002c52:	8812      	ldrh	r2, [r2, #0]
 8002c54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2bff      	cmp	r3, #255	@ 0xff
 8002c64:	d906      	bls.n	8002c74 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	22ff      	movs	r2, #255	@ 0xff
 8002c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002c6c:	2380      	movs	r3, #128	@ 0x80
 8002c6e:	045b      	lsls	r3, r3, #17
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	e007      	b.n	8002c84 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002c7e:	2380      	movs	r3, #128	@ 0x80
 8002c80:	049b      	lsls	r3, r3, #18
 8002c82:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d027      	beq.n	8002cdc <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c90:	781a      	ldrb	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	697c      	ldr	r4, [r7, #20]
 8002cc8:	230a      	movs	r3, #10
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	8819      	ldrh	r1, [r3, #0]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	4b51      	ldr	r3, [pc, #324]	@ (8002e18 <HAL_I2C_Master_Transmit+0x24c>)
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	0023      	movs	r3, r4
 8002cd6:	f000 fc45 	bl	8003564 <I2C_TransferConfig>
 8002cda:	e06f      	b.n	8002dbc <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	697c      	ldr	r4, [r7, #20]
 8002ce4:	230a      	movs	r3, #10
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	8819      	ldrh	r1, [r3, #0]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	4b4a      	ldr	r3, [pc, #296]	@ (8002e18 <HAL_I2C_Master_Transmit+0x24c>)
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	0023      	movs	r3, r4
 8002cf2:	f000 fc37 	bl	8003564 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002cf6:	e061      	b.n	8002dbc <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 fa10 	bl	8003124 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d04:	1e03      	subs	r3, r0, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e081      	b.n	8002e10 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d10:	781a      	ldrb	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d03a      	beq.n	8002dbc <HAL_I2C_Master_Transmit+0x1f0>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d136      	bne.n	8002dbc <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	0013      	movs	r3, r2
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2180      	movs	r1, #128	@ 0x80
 8002d5c:	f000 f98a 	bl	8003074 <I2C_WaitOnFlagUntilTimeout>
 8002d60:	1e03      	subs	r3, r0, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e053      	b.n	8002e10 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2bff      	cmp	r3, #255	@ 0xff
 8002d70:	d911      	bls.n	8002d96 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	22ff      	movs	r2, #255	@ 0xff
 8002d76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	2380      	movs	r3, #128	@ 0x80
 8002d80:	045c      	lsls	r4, r3, #17
 8002d82:	230a      	movs	r3, #10
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	8819      	ldrh	r1, [r3, #0]
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	0023      	movs	r3, r4
 8002d90:	f000 fbe8 	bl	8003564 <I2C_TransferConfig>
 8002d94:	e012      	b.n	8002dbc <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	2380      	movs	r3, #128	@ 0x80
 8002da8:	049c      	lsls	r4, r3, #18
 8002daa:	230a      	movs	r3, #10
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	8819      	ldrh	r1, [r3, #0]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	2300      	movs	r3, #0
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	0023      	movs	r3, r4
 8002db8:	f000 fbd4 	bl	8003564 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d198      	bne.n	8002cf8 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f000 f9ef 	bl	80031b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dd2:	1e03      	subs	r3, r0, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e01a      	b.n	8002e10 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2220      	movs	r2, #32
 8002de0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	490b      	ldr	r1, [pc, #44]	@ (8002e1c <HAL_I2C_Master_Transmit+0x250>)
 8002dee:	400a      	ands	r2, r1
 8002df0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2241      	movs	r2, #65	@ 0x41
 8002df6:	2120      	movs	r1, #32
 8002df8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2242      	movs	r2, #66	@ 0x42
 8002dfe:	2100      	movs	r1, #0
 8002e00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2240      	movs	r2, #64	@ 0x40
 8002e06:	2100      	movs	r1, #0
 8002e08:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	e000      	b.n	8002e10 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002e0e:	2302      	movs	r3, #2
  }
}
 8002e10:	0018      	movs	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b007      	add	sp, #28
 8002e16:	bd90      	pop	{r4, r7, pc}
 8002e18:	80002000 	.word	0x80002000
 8002e1c:	fe00e800 	.word	0xfe00e800

08002e20 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b089      	sub	sp, #36	@ 0x24
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	0008      	movs	r0, r1
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	230a      	movs	r3, #10
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	1c02      	adds	r2, r0, #0
 8002e34:	801a      	strh	r2, [r3, #0]
 8002e36:	2308      	movs	r3, #8
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	1c0a      	adds	r2, r1, #0
 8002e3c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2241      	movs	r2, #65	@ 0x41
 8002e42:	5c9b      	ldrb	r3, [r3, r2]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b20      	cmp	r3, #32
 8002e48:	d000      	beq.n	8002e4c <HAL_I2C_Master_Receive+0x2c>
 8002e4a:	e0e8      	b.n	800301e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2240      	movs	r2, #64	@ 0x40
 8002e50:	5c9b      	ldrb	r3, [r3, r2]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_I2C_Master_Receive+0x3a>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e0e2      	b.n	8003020 <HAL_I2C_Master_Receive+0x200>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2240      	movs	r2, #64	@ 0x40
 8002e5e:	2101      	movs	r1, #1
 8002e60:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e62:	f7ff fb37 	bl	80024d4 <HAL_GetTick>
 8002e66:	0003      	movs	r3, r0
 8002e68:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e6a:	2380      	movs	r3, #128	@ 0x80
 8002e6c:	0219      	lsls	r1, r3, #8
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	2319      	movs	r3, #25
 8002e76:	2201      	movs	r2, #1
 8002e78:	f000 f8fc 	bl	8003074 <I2C_WaitOnFlagUntilTimeout>
 8002e7c:	1e03      	subs	r3, r0, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e0cd      	b.n	8003020 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2241      	movs	r2, #65	@ 0x41
 8002e88:	2122      	movs	r1, #34	@ 0x22
 8002e8a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2242      	movs	r2, #66	@ 0x42
 8002e90:	2110      	movs	r1, #16
 8002e92:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2208      	movs	r2, #8
 8002ea4:	18ba      	adds	r2, r7, r2
 8002ea6:	8812      	ldrh	r2, [r2, #0]
 8002ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2bff      	cmp	r3, #255	@ 0xff
 8002eb8:	d911      	bls.n	8002ede <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	22ff      	movs	r2, #255	@ 0xff
 8002ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	2380      	movs	r3, #128	@ 0x80
 8002ec8:	045c      	lsls	r4, r3, #17
 8002eca:	230a      	movs	r3, #10
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	8819      	ldrh	r1, [r3, #0]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	4b55      	ldr	r3, [pc, #340]	@ (8003028 <HAL_I2C_Master_Receive+0x208>)
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	0023      	movs	r3, r4
 8002ed8:	f000 fb44 	bl	8003564 <I2C_TransferConfig>
 8002edc:	e076      	b.n	8002fcc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	2380      	movs	r3, #128	@ 0x80
 8002ef0:	049c      	lsls	r4, r3, #18
 8002ef2:	230a      	movs	r3, #10
 8002ef4:	18fb      	adds	r3, r7, r3
 8002ef6:	8819      	ldrh	r1, [r3, #0]
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	4b4b      	ldr	r3, [pc, #300]	@ (8003028 <HAL_I2C_Master_Receive+0x208>)
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	0023      	movs	r3, r4
 8002f00:	f000 fb30 	bl	8003564 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002f04:	e062      	b.n	8002fcc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f000 f993 	bl	8003238 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f12:	1e03      	subs	r3, r0, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e082      	b.n	8003020 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d03a      	beq.n	8002fcc <HAL_I2C_Master_Receive+0x1ac>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d136      	bne.n	8002fcc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	0013      	movs	r3, r2
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2180      	movs	r1, #128	@ 0x80
 8002f6c:	f000 f882 	bl	8003074 <I2C_WaitOnFlagUntilTimeout>
 8002f70:	1e03      	subs	r3, r0, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e053      	b.n	8003020 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2bff      	cmp	r3, #255	@ 0xff
 8002f80:	d911      	bls.n	8002fa6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	22ff      	movs	r2, #255	@ 0xff
 8002f86:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	2380      	movs	r3, #128	@ 0x80
 8002f90:	045c      	lsls	r4, r3, #17
 8002f92:	230a      	movs	r3, #10
 8002f94:	18fb      	adds	r3, r7, r3
 8002f96:	8819      	ldrh	r1, [r3, #0]
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	0023      	movs	r3, r4
 8002fa0:	f000 fae0 	bl	8003564 <I2C_TransferConfig>
 8002fa4:	e012      	b.n	8002fcc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	2380      	movs	r3, #128	@ 0x80
 8002fb8:	049c      	lsls	r4, r3, #18
 8002fba:	230a      	movs	r3, #10
 8002fbc:	18fb      	adds	r3, r7, r3
 8002fbe:	8819      	ldrh	r1, [r3, #0]
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	0023      	movs	r3, r4
 8002fc8:	f000 facc 	bl	8003564 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d197      	bne.n	8002f06 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 f8e7 	bl	80031b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fe2:	1e03      	subs	r3, r0, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e01a      	b.n	8003020 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	490b      	ldr	r1, [pc, #44]	@ (800302c <HAL_I2C_Master_Receive+0x20c>)
 8002ffe:	400a      	ands	r2, r1
 8003000:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2241      	movs	r2, #65	@ 0x41
 8003006:	2120      	movs	r1, #32
 8003008:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2242      	movs	r2, #66	@ 0x42
 800300e:	2100      	movs	r1, #0
 8003010:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2240      	movs	r2, #64	@ 0x40
 8003016:	2100      	movs	r1, #0
 8003018:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800301e:	2302      	movs	r3, #2
  }
}
 8003020:	0018      	movs	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	b007      	add	sp, #28
 8003026:	bd90      	pop	{r4, r7, pc}
 8003028:	80002400 	.word	0x80002400
 800302c:	fe00e800 	.word	0xfe00e800

08003030 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	2202      	movs	r2, #2
 8003040:	4013      	ands	r3, r2
 8003042:	2b02      	cmp	r3, #2
 8003044:	d103      	bne.n	800304e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2200      	movs	r2, #0
 800304c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2201      	movs	r2, #1
 8003056:	4013      	ands	r3, r2
 8003058:	2b01      	cmp	r3, #1
 800305a:	d007      	beq.n	800306c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2101      	movs	r1, #1
 8003068:	430a      	orrs	r2, r1
 800306a:	619a      	str	r2, [r3, #24]
  }
}
 800306c:	46c0      	nop			@ (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	b002      	add	sp, #8
 8003072:	bd80      	pop	{r7, pc}

08003074 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	1dfb      	adds	r3, r7, #7
 8003082:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003084:	e03a      	b.n	80030fc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	6839      	ldr	r1, [r7, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	0018      	movs	r0, r3
 800308e:	f000 f971 	bl	8003374 <I2C_IsErrorOccurred>
 8003092:	1e03      	subs	r3, r0, #0
 8003094:	d001      	beq.n	800309a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e040      	b.n	800311c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	d02d      	beq.n	80030fc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a0:	f7ff fa18 	bl	80024d4 <HAL_GetTick>
 80030a4:	0002      	movs	r2, r0
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d302      	bcc.n	80030b6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d122      	bne.n	80030fc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	4013      	ands	r3, r2
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	425a      	negs	r2, r3
 80030c6:	4153      	adcs	r3, r2
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	001a      	movs	r2, r3
 80030cc:	1dfb      	adds	r3, r7, #7
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d113      	bne.n	80030fc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d8:	2220      	movs	r2, #32
 80030da:	431a      	orrs	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2241      	movs	r2, #65	@ 0x41
 80030e4:	2120      	movs	r1, #32
 80030e6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2242      	movs	r2, #66	@ 0x42
 80030ec:	2100      	movs	r1, #0
 80030ee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2240      	movs	r2, #64	@ 0x40
 80030f4:	2100      	movs	r1, #0
 80030f6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e00f      	b.n	800311c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	4013      	ands	r3, r2
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	425a      	negs	r2, r3
 800310c:	4153      	adcs	r3, r2
 800310e:	b2db      	uxtb	r3, r3
 8003110:	001a      	movs	r2, r3
 8003112:	1dfb      	adds	r3, r7, #7
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d0b5      	beq.n	8003086 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	0018      	movs	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	b004      	add	sp, #16
 8003122:	bd80      	pop	{r7, pc}

08003124 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003130:	e032      	b.n	8003198 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	0018      	movs	r0, r3
 800313a:	f000 f91b 	bl	8003374 <I2C_IsErrorOccurred>
 800313e:	1e03      	subs	r3, r0, #0
 8003140:	d001      	beq.n	8003146 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e030      	b.n	80031a8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	3301      	adds	r3, #1
 800314a:	d025      	beq.n	8003198 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314c:	f7ff f9c2 	bl	80024d4 <HAL_GetTick>
 8003150:	0002      	movs	r2, r0
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	429a      	cmp	r2, r3
 800315a:	d302      	bcc.n	8003162 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d11a      	bne.n	8003198 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	2202      	movs	r2, #2
 800316a:	4013      	ands	r3, r2
 800316c:	2b02      	cmp	r3, #2
 800316e:	d013      	beq.n	8003198 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003174:	2220      	movs	r2, #32
 8003176:	431a      	orrs	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2241      	movs	r2, #65	@ 0x41
 8003180:	2120      	movs	r1, #32
 8003182:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2242      	movs	r2, #66	@ 0x42
 8003188:	2100      	movs	r1, #0
 800318a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2240      	movs	r2, #64	@ 0x40
 8003190:	2100      	movs	r1, #0
 8003192:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e007      	b.n	80031a8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	2202      	movs	r2, #2
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d1c5      	bne.n	8003132 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	0018      	movs	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b004      	add	sp, #16
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031bc:	e02f      	b.n	800321e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	0018      	movs	r0, r3
 80031c6:	f000 f8d5 	bl	8003374 <I2C_IsErrorOccurred>
 80031ca:	1e03      	subs	r3, r0, #0
 80031cc:	d001      	beq.n	80031d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e02d      	b.n	800322e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d2:	f7ff f97f 	bl	80024d4 <HAL_GetTick>
 80031d6:	0002      	movs	r2, r0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d302      	bcc.n	80031e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d11a      	bne.n	800321e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2220      	movs	r2, #32
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b20      	cmp	r3, #32
 80031f4:	d013      	beq.n	800321e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fa:	2220      	movs	r2, #32
 80031fc:	431a      	orrs	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2241      	movs	r2, #65	@ 0x41
 8003206:	2120      	movs	r1, #32
 8003208:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2242      	movs	r2, #66	@ 0x42
 800320e:	2100      	movs	r1, #0
 8003210:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2240      	movs	r2, #64	@ 0x40
 8003216:	2100      	movs	r1, #0
 8003218:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e007      	b.n	800322e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	2220      	movs	r2, #32
 8003226:	4013      	ands	r3, r2
 8003228:	2b20      	cmp	r3, #32
 800322a:	d1c8      	bne.n	80031be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	0018      	movs	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	b004      	add	sp, #16
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003244:	2317      	movs	r3, #23
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800324c:	e07b      	b.n	8003346 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68b9      	ldr	r1, [r7, #8]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	0018      	movs	r0, r3
 8003256:	f000 f88d 	bl	8003374 <I2C_IsErrorOccurred>
 800325a:	1e03      	subs	r3, r0, #0
 800325c:	d003      	beq.n	8003266 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800325e:	2317      	movs	r3, #23
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	2201      	movs	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	2220      	movs	r2, #32
 800326e:	4013      	ands	r3, r2
 8003270:	2b20      	cmp	r3, #32
 8003272:	d140      	bne.n	80032f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003274:	2117      	movs	r1, #23
 8003276:	187b      	adds	r3, r7, r1
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d13b      	bne.n	80032f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	2204      	movs	r2, #4
 8003286:	4013      	ands	r3, r2
 8003288:	2b04      	cmp	r3, #4
 800328a:	d106      	bne.n	800329a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003294:	187b      	adds	r3, r7, r1
 8003296:	2200      	movs	r2, #0
 8003298:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	2210      	movs	r2, #16
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b10      	cmp	r3, #16
 80032a6:	d123      	bne.n	80032f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2210      	movs	r2, #16
 80032ae:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2204      	movs	r2, #4
 80032b4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2220      	movs	r2, #32
 80032bc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4929      	ldr	r1, [pc, #164]	@ (8003370 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80032ca:	400a      	ands	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2241      	movs	r2, #65	@ 0x41
 80032d2:	2120      	movs	r1, #32
 80032d4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2242      	movs	r2, #66	@ 0x42
 80032da:	2100      	movs	r1, #0
 80032dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2240      	movs	r2, #64	@ 0x40
 80032e2:	2100      	movs	r1, #0
 80032e4:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80032e6:	2317      	movs	r3, #23
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	e002      	b.n	80032f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80032f6:	f7ff f8ed 	bl	80024d4 <HAL_GetTick>
 80032fa:	0002      	movs	r2, r0
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d11c      	bne.n	8003346 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 800330c:	2017      	movs	r0, #23
 800330e:	183b      	adds	r3, r7, r0
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d117      	bne.n	8003346 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	2204      	movs	r2, #4
 800331e:	4013      	ands	r3, r2
 8003320:	2b04      	cmp	r3, #4
 8003322:	d010      	beq.n	8003346 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003328:	2220      	movs	r2, #32
 800332a:	431a      	orrs	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2241      	movs	r2, #65	@ 0x41
 8003334:	2120      	movs	r1, #32
 8003336:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2240      	movs	r2, #64	@ 0x40
 800333c:	2100      	movs	r1, #0
 800333e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003340:	183b      	adds	r3, r7, r0
 8003342:	2201      	movs	r2, #1
 8003344:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2204      	movs	r2, #4
 800334e:	4013      	ands	r3, r2
 8003350:	2b04      	cmp	r3, #4
 8003352:	d005      	beq.n	8003360 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003354:	2317      	movs	r3, #23
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d100      	bne.n	8003360 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800335e:	e776      	b.n	800324e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8003360:	2317      	movs	r3, #23
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	781b      	ldrb	r3, [r3, #0]
}
 8003366:	0018      	movs	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	b006      	add	sp, #24
 800336c:	bd80      	pop	{r7, pc}
 800336e:	46c0      	nop			@ (mov r8, r8)
 8003370:	fe00e800 	.word	0xfe00e800

08003374 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	@ 0x28
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003380:	2327      	movs	r3, #39	@ 0x27
 8003382:	18fb      	adds	r3, r7, r3
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	2210      	movs	r2, #16
 800339c:	4013      	ands	r3, r2
 800339e:	d100      	bne.n	80033a2 <I2C_IsErrorOccurred+0x2e>
 80033a0:	e079      	b.n	8003496 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2210      	movs	r2, #16
 80033a8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033aa:	e057      	b.n	800345c <I2C_IsErrorOccurred+0xe8>
 80033ac:	2227      	movs	r2, #39	@ 0x27
 80033ae:	18bb      	adds	r3, r7, r2
 80033b0:	18ba      	adds	r2, r7, r2
 80033b2:	7812      	ldrb	r2, [r2, #0]
 80033b4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	3301      	adds	r3, #1
 80033ba:	d04f      	beq.n	800345c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033bc:	f7ff f88a 	bl	80024d4 <HAL_GetTick>
 80033c0:	0002      	movs	r2, r0
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d302      	bcc.n	80033d2 <I2C_IsErrorOccurred+0x5e>
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d144      	bne.n	800345c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	2380      	movs	r3, #128	@ 0x80
 80033da:	01db      	lsls	r3, r3, #7
 80033dc:	4013      	ands	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80033e0:	2013      	movs	r0, #19
 80033e2:	183b      	adds	r3, r7, r0
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	2142      	movs	r1, #66	@ 0x42
 80033e8:	5c52      	ldrb	r2, [r2, r1]
 80033ea:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	2380      	movs	r3, #128	@ 0x80
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	401a      	ands	r2, r3
 80033f8:	2380      	movs	r3, #128	@ 0x80
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d126      	bne.n	800344e <I2C_IsErrorOccurred+0xda>
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	2380      	movs	r3, #128	@ 0x80
 8003404:	01db      	lsls	r3, r3, #7
 8003406:	429a      	cmp	r2, r3
 8003408:	d021      	beq.n	800344e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800340a:	183b      	adds	r3, r7, r0
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b20      	cmp	r3, #32
 8003410:	d01d      	beq.n	800344e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2180      	movs	r1, #128	@ 0x80
 800341e:	01c9      	lsls	r1, r1, #7
 8003420:	430a      	orrs	r2, r1
 8003422:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003424:	f7ff f856 	bl	80024d4 <HAL_GetTick>
 8003428:	0003      	movs	r3, r0
 800342a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800342c:	e00f      	b.n	800344e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800342e:	f7ff f851 	bl	80024d4 <HAL_GetTick>
 8003432:	0002      	movs	r2, r0
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b19      	cmp	r3, #25
 800343a:	d908      	bls.n	800344e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	2220      	movs	r2, #32
 8003440:	4313      	orrs	r3, r2
 8003442:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003444:	2327      	movs	r3, #39	@ 0x27
 8003446:	18fb      	adds	r3, r7, r3
 8003448:	2201      	movs	r2, #1
 800344a:	701a      	strb	r2, [r3, #0]

              break;
 800344c:	e006      	b.n	800345c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	2220      	movs	r2, #32
 8003456:	4013      	ands	r3, r2
 8003458:	2b20      	cmp	r3, #32
 800345a:	d1e8      	bne.n	800342e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2220      	movs	r2, #32
 8003464:	4013      	ands	r3, r2
 8003466:	2b20      	cmp	r3, #32
 8003468:	d004      	beq.n	8003474 <I2C_IsErrorOccurred+0x100>
 800346a:	2327      	movs	r3, #39	@ 0x27
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d09b      	beq.n	80033ac <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003474:	2327      	movs	r3, #39	@ 0x27
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d103      	bne.n	8003486 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2220      	movs	r2, #32
 8003484:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	2204      	movs	r2, #4
 800348a:	4313      	orrs	r3, r2
 800348c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800348e:	2327      	movs	r3, #39	@ 0x27
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	2201      	movs	r2, #1
 8003494:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	2380      	movs	r3, #128	@ 0x80
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	4013      	ands	r3, r2
 80034a6:	d00c      	beq.n	80034c2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	2201      	movs	r2, #1
 80034ac:	4313      	orrs	r3, r2
 80034ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2280      	movs	r2, #128	@ 0x80
 80034b6:	0052      	lsls	r2, r2, #1
 80034b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034ba:	2327      	movs	r3, #39	@ 0x27
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	2380      	movs	r3, #128	@ 0x80
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4013      	ands	r3, r2
 80034ca:	d00c      	beq.n	80034e6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	2208      	movs	r2, #8
 80034d0:	4313      	orrs	r3, r2
 80034d2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2280      	movs	r2, #128	@ 0x80
 80034da:	00d2      	lsls	r2, r2, #3
 80034dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034de:	2327      	movs	r3, #39	@ 0x27
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4013      	ands	r3, r2
 80034ee:	d00c      	beq.n	800350a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	2202      	movs	r2, #2
 80034f4:	4313      	orrs	r3, r2
 80034f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2280      	movs	r2, #128	@ 0x80
 80034fe:	0092      	lsls	r2, r2, #2
 8003500:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003502:	2327      	movs	r3, #39	@ 0x27
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800350a:	2327      	movs	r3, #39	@ 0x27
 800350c:	18fb      	adds	r3, r7, r3
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d01d      	beq.n	8003550 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	0018      	movs	r0, r3
 8003518:	f7ff fd8a 	bl	8003030 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	490e      	ldr	r1, [pc, #56]	@ (8003560 <I2C_IsErrorOccurred+0x1ec>)
 8003528:	400a      	ands	r2, r1
 800352a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	431a      	orrs	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2241      	movs	r2, #65	@ 0x41
 800353c:	2120      	movs	r1, #32
 800353e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2242      	movs	r2, #66	@ 0x42
 8003544:	2100      	movs	r1, #0
 8003546:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2240      	movs	r2, #64	@ 0x40
 800354c:	2100      	movs	r1, #0
 800354e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003550:	2327      	movs	r3, #39	@ 0x27
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	781b      	ldrb	r3, [r3, #0]
}
 8003556:	0018      	movs	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	b00a      	add	sp, #40	@ 0x28
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			@ (mov r8, r8)
 8003560:	fe00e800 	.word	0xfe00e800

08003564 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003564:	b590      	push	{r4, r7, lr}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	0008      	movs	r0, r1
 800356e:	0011      	movs	r1, r2
 8003570:	607b      	str	r3, [r7, #4]
 8003572:	240a      	movs	r4, #10
 8003574:	193b      	adds	r3, r7, r4
 8003576:	1c02      	adds	r2, r0, #0
 8003578:	801a      	strh	r2, [r3, #0]
 800357a:	2009      	movs	r0, #9
 800357c:	183b      	adds	r3, r7, r0
 800357e:	1c0a      	adds	r2, r1, #0
 8003580:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003582:	193b      	adds	r3, r7, r4
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	059b      	lsls	r3, r3, #22
 8003588:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800358a:	183b      	adds	r3, r7, r0
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	0419      	lsls	r1, r3, #16
 8003590:	23ff      	movs	r3, #255	@ 0xff
 8003592:	041b      	lsls	r3, r3, #16
 8003594:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003596:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800359c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359e:	4313      	orrs	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	085b      	lsrs	r3, r3, #1
 80035a4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035ae:	0d51      	lsrs	r1, r2, #21
 80035b0:	2280      	movs	r2, #128	@ 0x80
 80035b2:	00d2      	lsls	r2, r2, #3
 80035b4:	400a      	ands	r2, r1
 80035b6:	4907      	ldr	r1, [pc, #28]	@ (80035d4 <I2C_TransferConfig+0x70>)
 80035b8:	430a      	orrs	r2, r1
 80035ba:	43d2      	mvns	r2, r2
 80035bc:	401a      	ands	r2, r3
 80035be:	0011      	movs	r1, r2
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035ca:	46c0      	nop			@ (mov r8, r8)
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b007      	add	sp, #28
 80035d0:	bd90      	pop	{r4, r7, pc}
 80035d2:	46c0      	nop			@ (mov r8, r8)
 80035d4:	03ff63ff 	.word	0x03ff63ff

080035d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2241      	movs	r2, #65	@ 0x41
 80035e6:	5c9b      	ldrb	r3, [r3, r2]
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d138      	bne.n	8003660 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2240      	movs	r2, #64	@ 0x40
 80035f2:	5c9b      	ldrb	r3, [r3, r2]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e032      	b.n	8003662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2240      	movs	r2, #64	@ 0x40
 8003600:	2101      	movs	r1, #1
 8003602:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2241      	movs	r2, #65	@ 0x41
 8003608:	2124      	movs	r1, #36	@ 0x24
 800360a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2101      	movs	r1, #1
 8003618:	438a      	bics	r2, r1
 800361a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4911      	ldr	r1, [pc, #68]	@ (800366c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003628:	400a      	ands	r2, r1
 800362a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6819      	ldr	r1, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2101      	movs	r1, #1
 8003648:	430a      	orrs	r2, r1
 800364a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2241      	movs	r2, #65	@ 0x41
 8003650:	2120      	movs	r1, #32
 8003652:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2240      	movs	r2, #64	@ 0x40
 8003658:	2100      	movs	r1, #0
 800365a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	e000      	b.n	8003662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003660:	2302      	movs	r3, #2
  }
}
 8003662:	0018      	movs	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	b002      	add	sp, #8
 8003668:	bd80      	pop	{r7, pc}
 800366a:	46c0      	nop			@ (mov r8, r8)
 800366c:	ffffefff 	.word	0xffffefff

08003670 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2241      	movs	r2, #65	@ 0x41
 800367e:	5c9b      	ldrb	r3, [r3, r2]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b20      	cmp	r3, #32
 8003684:	d139      	bne.n	80036fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2240      	movs	r2, #64	@ 0x40
 800368a:	5c9b      	ldrb	r3, [r3, r2]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003690:	2302      	movs	r3, #2
 8003692:	e033      	b.n	80036fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2240      	movs	r2, #64	@ 0x40
 8003698:	2101      	movs	r1, #1
 800369a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2241      	movs	r2, #65	@ 0x41
 80036a0:	2124      	movs	r1, #36	@ 0x24
 80036a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2101      	movs	r1, #1
 80036b0:	438a      	bics	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4a11      	ldr	r2, [pc, #68]	@ (8003704 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2101      	movs	r1, #1
 80036e2:	430a      	orrs	r2, r1
 80036e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2241      	movs	r2, #65	@ 0x41
 80036ea:	2120      	movs	r1, #32
 80036ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2240      	movs	r2, #64	@ 0x40
 80036f2:	2100      	movs	r1, #0
 80036f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e000      	b.n	80036fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036fa:	2302      	movs	r3, #2
  }
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	b004      	add	sp, #16
 8003702:	bd80      	pop	{r7, pc}
 8003704:	fffff0ff 	.word	0xfffff0ff

08003708 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800370c:	4b04      	ldr	r3, [pc, #16]	@ (8003720 <HAL_PWR_EnableBkUpAccess+0x18>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b03      	ldr	r3, [pc, #12]	@ (8003720 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003712:	2180      	movs	r1, #128	@ 0x80
 8003714:	0049      	lsls	r1, r1, #1
 8003716:	430a      	orrs	r2, r1
 8003718:	601a      	str	r2, [r3, #0]
}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40007000 	.word	0x40007000

08003724 <HAL_PWR_DisableBkUpAccess>:
/**
  * @brief  Disable access to the backup domain
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8003728:	4b04      	ldr	r3, [pc, #16]	@ (800373c <HAL_PWR_DisableBkUpAccess+0x18>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4b03      	ldr	r3, [pc, #12]	@ (800373c <HAL_PWR_DisableBkUpAccess+0x18>)
 800372e:	4904      	ldr	r1, [pc, #16]	@ (8003740 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8003730:	400a      	ands	r2, r1
 8003732:	601a      	str	r2, [r3, #0]
}
 8003734:	46c0      	nop			@ (mov r8, r8)
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	46c0      	nop			@ (mov r8, r8)
 800373c:	40007000 	.word	0x40007000
 8003740:	fffffeff 	.word	0xfffffeff

08003744 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800374c:	4b19      	ldr	r3, [pc, #100]	@ (80037b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a19      	ldr	r2, [pc, #100]	@ (80037b8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003752:	4013      	ands	r3, r2
 8003754:	0019      	movs	r1, r3
 8003756:	4b17      	ldr	r3, [pc, #92]	@ (80037b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	430a      	orrs	r2, r1
 800375c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	2380      	movs	r3, #128	@ 0x80
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	429a      	cmp	r2, r3
 8003766:	d11f      	bne.n	80037a8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003768:	4b14      	ldr	r3, [pc, #80]	@ (80037bc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	0013      	movs	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	189b      	adds	r3, r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	4912      	ldr	r1, [pc, #72]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003776:	0018      	movs	r0, r3
 8003778:	f7fc fcc4 	bl	8000104 <__udivsi3>
 800377c:	0003      	movs	r3, r0
 800377e:	3301      	adds	r3, #1
 8003780:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003782:	e008      	b.n	8003796 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	3b01      	subs	r3, #1
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	e001      	b.n	8003796 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e009      	b.n	80037aa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003796:	4b07      	ldr	r3, [pc, #28]	@ (80037b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003798:	695a      	ldr	r2, [r3, #20]
 800379a:	2380      	movs	r3, #128	@ 0x80
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	401a      	ands	r2, r3
 80037a0:	2380      	movs	r3, #128	@ 0x80
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d0ed      	beq.n	8003784 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	0018      	movs	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b004      	add	sp, #16
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	46c0      	nop			@ (mov r8, r8)
 80037b4:	40007000 	.word	0x40007000
 80037b8:	fffff9ff 	.word	0xfffff9ff
 80037bc:	20000068 	.word	0x20000068
 80037c0:	000f4240 	.word	0x000f4240

080037c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e2fe      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2201      	movs	r2, #1
 80037dc:	4013      	ands	r3, r2
 80037de:	d100      	bne.n	80037e2 <HAL_RCC_OscConfig+0x1e>
 80037e0:	e07c      	b.n	80038dc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e2:	4bc3      	ldr	r3, [pc, #780]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2238      	movs	r2, #56	@ 0x38
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037ec:	4bc0      	ldr	r3, [pc, #768]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2203      	movs	r2, #3
 80037f2:	4013      	ands	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d102      	bne.n	8003802 <HAL_RCC_OscConfig+0x3e>
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d002      	beq.n	8003808 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	2b08      	cmp	r3, #8
 8003806:	d10b      	bne.n	8003820 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003808:	4bb9      	ldr	r3, [pc, #740]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	2380      	movs	r3, #128	@ 0x80
 800380e:	029b      	lsls	r3, r3, #10
 8003810:	4013      	ands	r3, r2
 8003812:	d062      	beq.n	80038da <HAL_RCC_OscConfig+0x116>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d15e      	bne.n	80038da <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e2d9      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	2380      	movs	r3, #128	@ 0x80
 8003826:	025b      	lsls	r3, r3, #9
 8003828:	429a      	cmp	r2, r3
 800382a:	d107      	bne.n	800383c <HAL_RCC_OscConfig+0x78>
 800382c:	4bb0      	ldr	r3, [pc, #704]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4baf      	ldr	r3, [pc, #700]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003832:	2180      	movs	r1, #128	@ 0x80
 8003834:	0249      	lsls	r1, r1, #9
 8003836:	430a      	orrs	r2, r1
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	e020      	b.n	800387e <HAL_RCC_OscConfig+0xba>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	23a0      	movs	r3, #160	@ 0xa0
 8003842:	02db      	lsls	r3, r3, #11
 8003844:	429a      	cmp	r2, r3
 8003846:	d10e      	bne.n	8003866 <HAL_RCC_OscConfig+0xa2>
 8003848:	4ba9      	ldr	r3, [pc, #676]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	4ba8      	ldr	r3, [pc, #672]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 800384e:	2180      	movs	r1, #128	@ 0x80
 8003850:	02c9      	lsls	r1, r1, #11
 8003852:	430a      	orrs	r2, r1
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	4ba6      	ldr	r3, [pc, #664]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4ba5      	ldr	r3, [pc, #660]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 800385c:	2180      	movs	r1, #128	@ 0x80
 800385e:	0249      	lsls	r1, r1, #9
 8003860:	430a      	orrs	r2, r1
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	e00b      	b.n	800387e <HAL_RCC_OscConfig+0xba>
 8003866:	4ba2      	ldr	r3, [pc, #648]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	4ba1      	ldr	r3, [pc, #644]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 800386c:	49a1      	ldr	r1, [pc, #644]	@ (8003af4 <HAL_RCC_OscConfig+0x330>)
 800386e:	400a      	ands	r2, r1
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	4b9f      	ldr	r3, [pc, #636]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	4b9e      	ldr	r3, [pc, #632]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003878:	499f      	ldr	r1, [pc, #636]	@ (8003af8 <HAL_RCC_OscConfig+0x334>)
 800387a:	400a      	ands	r2, r1
 800387c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d014      	beq.n	80038b0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003886:	f7fe fe25 	bl	80024d4 <HAL_GetTick>
 800388a:	0003      	movs	r3, r0
 800388c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003890:	f7fe fe20 	bl	80024d4 <HAL_GetTick>
 8003894:	0002      	movs	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b64      	cmp	r3, #100	@ 0x64
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e298      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038a2:	4b93      	ldr	r3, [pc, #588]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	2380      	movs	r3, #128	@ 0x80
 80038a8:	029b      	lsls	r3, r3, #10
 80038aa:	4013      	ands	r3, r2
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0xcc>
 80038ae:	e015      	b.n	80038dc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fe fe10 	bl	80024d4 <HAL_GetTick>
 80038b4:	0003      	movs	r3, r0
 80038b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ba:	f7fe fe0b 	bl	80024d4 <HAL_GetTick>
 80038be:	0002      	movs	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b64      	cmp	r3, #100	@ 0x64
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e283      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038cc:	4b88      	ldr	r3, [pc, #544]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	2380      	movs	r3, #128	@ 0x80
 80038d2:	029b      	lsls	r3, r3, #10
 80038d4:	4013      	ands	r3, r2
 80038d6:	d1f0      	bne.n	80038ba <HAL_RCC_OscConfig+0xf6>
 80038d8:	e000      	b.n	80038dc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038da:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2202      	movs	r2, #2
 80038e2:	4013      	ands	r3, r2
 80038e4:	d100      	bne.n	80038e8 <HAL_RCC_OscConfig+0x124>
 80038e6:	e099      	b.n	8003a1c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038e8:	4b81      	ldr	r3, [pc, #516]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2238      	movs	r2, #56	@ 0x38
 80038ee:	4013      	ands	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038f2:	4b7f      	ldr	r3, [pc, #508]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	2203      	movs	r2, #3
 80038f8:	4013      	ands	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	2b10      	cmp	r3, #16
 8003900:	d102      	bne.n	8003908 <HAL_RCC_OscConfig+0x144>
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b02      	cmp	r3, #2
 8003906:	d002      	beq.n	800390e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d135      	bne.n	800397a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800390e:	4b78      	ldr	r3, [pc, #480]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	2380      	movs	r3, #128	@ 0x80
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4013      	ands	r3, r2
 8003918:	d005      	beq.n	8003926 <HAL_RCC_OscConfig+0x162>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e256      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003926:	4b72      	ldr	r3, [pc, #456]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4a74      	ldr	r2, [pc, #464]	@ (8003afc <HAL_RCC_OscConfig+0x338>)
 800392c:	4013      	ands	r3, r2
 800392e:	0019      	movs	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	021a      	lsls	r2, r3, #8
 8003936:	4b6e      	ldr	r3, [pc, #440]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003938:	430a      	orrs	r2, r1
 800393a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d112      	bne.n	8003968 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003942:	4b6b      	ldr	r3, [pc, #428]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a6e      	ldr	r2, [pc, #440]	@ (8003b00 <HAL_RCC_OscConfig+0x33c>)
 8003948:	4013      	ands	r3, r2
 800394a:	0019      	movs	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	4b67      	ldr	r3, [pc, #412]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003952:	430a      	orrs	r2, r1
 8003954:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003956:	4b66      	ldr	r3, [pc, #408]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	0adb      	lsrs	r3, r3, #11
 800395c:	2207      	movs	r2, #7
 800395e:	4013      	ands	r3, r2
 8003960:	4a68      	ldr	r2, [pc, #416]	@ (8003b04 <HAL_RCC_OscConfig+0x340>)
 8003962:	40da      	lsrs	r2, r3
 8003964:	4b68      	ldr	r3, [pc, #416]	@ (8003b08 <HAL_RCC_OscConfig+0x344>)
 8003966:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003968:	4b68      	ldr	r3, [pc, #416]	@ (8003b0c <HAL_RCC_OscConfig+0x348>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	0018      	movs	r0, r3
 800396e:	f7fe fd55 	bl	800241c <HAL_InitTick>
 8003972:	1e03      	subs	r3, r0, #0
 8003974:	d051      	beq.n	8003a1a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e22c      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d030      	beq.n	80039e4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003982:	4b5b      	ldr	r3, [pc, #364]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a5e      	ldr	r2, [pc, #376]	@ (8003b00 <HAL_RCC_OscConfig+0x33c>)
 8003988:	4013      	ands	r3, r2
 800398a:	0019      	movs	r1, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	4b57      	ldr	r3, [pc, #348]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003992:	430a      	orrs	r2, r1
 8003994:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003996:	4b56      	ldr	r3, [pc, #344]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4b55      	ldr	r3, [pc, #340]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 800399c:	2180      	movs	r1, #128	@ 0x80
 800399e:	0049      	lsls	r1, r1, #1
 80039a0:	430a      	orrs	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a4:	f7fe fd96 	bl	80024d4 <HAL_GetTick>
 80039a8:	0003      	movs	r3, r0
 80039aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ae:	f7fe fd91 	bl	80024d4 <HAL_GetTick>
 80039b2:	0002      	movs	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e209      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039c0:	4b4b      	ldr	r3, [pc, #300]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	2380      	movs	r3, #128	@ 0x80
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4013      	ands	r3, r2
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039cc:	4b48      	ldr	r3, [pc, #288]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	4a4a      	ldr	r2, [pc, #296]	@ (8003afc <HAL_RCC_OscConfig+0x338>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	0019      	movs	r1, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	021a      	lsls	r2, r3, #8
 80039dc:	4b44      	ldr	r3, [pc, #272]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 80039de:	430a      	orrs	r2, r1
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	e01b      	b.n	8003a1c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80039e4:	4b42      	ldr	r3, [pc, #264]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	4b41      	ldr	r3, [pc, #260]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 80039ea:	4949      	ldr	r1, [pc, #292]	@ (8003b10 <HAL_RCC_OscConfig+0x34c>)
 80039ec:	400a      	ands	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fe fd70 	bl	80024d4 <HAL_GetTick>
 80039f4:	0003      	movs	r3, r0
 80039f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039fa:	f7fe fd6b 	bl	80024d4 <HAL_GetTick>
 80039fe:	0002      	movs	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e1e3      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a0c:	4b38      	ldr	r3, [pc, #224]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	2380      	movs	r3, #128	@ 0x80
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4013      	ands	r3, r2
 8003a16:	d1f0      	bne.n	80039fa <HAL_RCC_OscConfig+0x236>
 8003a18:	e000      	b.n	8003a1c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a1a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2208      	movs	r2, #8
 8003a22:	4013      	ands	r3, r2
 8003a24:	d047      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003a26:	4b32      	ldr	r3, [pc, #200]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2238      	movs	r2, #56	@ 0x38
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b18      	cmp	r3, #24
 8003a30:	d10a      	bne.n	8003a48 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003a32:	4b2f      	ldr	r3, [pc, #188]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a36:	2202      	movs	r2, #2
 8003a38:	4013      	ands	r3, r2
 8003a3a:	d03c      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x2f2>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d138      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e1c5      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d019      	beq.n	8003a84 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003a50:	4b27      	ldr	r3, [pc, #156]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003a52:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a54:	4b26      	ldr	r3, [pc, #152]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003a56:	2101      	movs	r1, #1
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fe fd3a 	bl	80024d4 <HAL_GetTick>
 8003a60:	0003      	movs	r3, r0
 8003a62:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a66:	f7fe fd35 	bl	80024d4 <HAL_GetTick>
 8003a6a:	0002      	movs	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e1ad      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a78:	4b1d      	ldr	r3, [pc, #116]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d0f1      	beq.n	8003a66 <HAL_RCC_OscConfig+0x2a2>
 8003a82:	e018      	b.n	8003ab6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003a84:	4b1a      	ldr	r3, [pc, #104]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003a86:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a88:	4b19      	ldr	r3, [pc, #100]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	438a      	bics	r2, r1
 8003a8e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fe fd20 	bl	80024d4 <HAL_GetTick>
 8003a94:	0003      	movs	r3, r0
 8003a96:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a9a:	f7fe fd1b 	bl	80024d4 <HAL_GetTick>
 8003a9e:	0002      	movs	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e193      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003aac:	4b10      	ldr	r3, [pc, #64]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	d1f1      	bne.n	8003a9a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2204      	movs	r2, #4
 8003abc:	4013      	ands	r3, r2
 8003abe:	d100      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x2fe>
 8003ac0:	e0c6      	b.n	8003c50 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac2:	231f      	movs	r3, #31
 8003ac4:	18fb      	adds	r3, r7, r3
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003aca:	4b09      	ldr	r3, [pc, #36]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2238      	movs	r2, #56	@ 0x38
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b20      	cmp	r3, #32
 8003ad4:	d11e      	bne.n	8003b14 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003ad6:	4b06      	ldr	r3, [pc, #24]	@ (8003af0 <HAL_RCC_OscConfig+0x32c>)
 8003ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ada:	2202      	movs	r2, #2
 8003adc:	4013      	ands	r3, r2
 8003ade:	d100      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x31e>
 8003ae0:	e0b6      	b.n	8003c50 <HAL_RCC_OscConfig+0x48c>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d000      	beq.n	8003aec <HAL_RCC_OscConfig+0x328>
 8003aea:	e0b1      	b.n	8003c50 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e171      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
 8003af0:	40021000 	.word	0x40021000
 8003af4:	fffeffff 	.word	0xfffeffff
 8003af8:	fffbffff 	.word	0xfffbffff
 8003afc:	ffff80ff 	.word	0xffff80ff
 8003b00:	ffffc7ff 	.word	0xffffc7ff
 8003b04:	00f42400 	.word	0x00f42400
 8003b08:	20000068 	.word	0x20000068
 8003b0c:	2000006c 	.word	0x2000006c
 8003b10:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b14:	4bb1      	ldr	r3, [pc, #708]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003b16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b18:	2380      	movs	r3, #128	@ 0x80
 8003b1a:	055b      	lsls	r3, r3, #21
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d101      	bne.n	8003b24 <HAL_RCC_OscConfig+0x360>
 8003b20:	2301      	movs	r3, #1
 8003b22:	e000      	b.n	8003b26 <HAL_RCC_OscConfig+0x362>
 8003b24:	2300      	movs	r3, #0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d011      	beq.n	8003b4e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003b2a:	4bac      	ldr	r3, [pc, #688]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003b2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b2e:	4bab      	ldr	r3, [pc, #684]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003b30:	2180      	movs	r1, #128	@ 0x80
 8003b32:	0549      	lsls	r1, r1, #21
 8003b34:	430a      	orrs	r2, r1
 8003b36:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b38:	4ba8      	ldr	r3, [pc, #672]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003b3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b3c:	2380      	movs	r3, #128	@ 0x80
 8003b3e:	055b      	lsls	r3, r3, #21
 8003b40:	4013      	ands	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003b46:	231f      	movs	r3, #31
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b4e:	4ba4      	ldr	r3, [pc, #656]	@ (8003de0 <HAL_RCC_OscConfig+0x61c>)
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	2380      	movs	r3, #128	@ 0x80
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	4013      	ands	r3, r2
 8003b58:	d11a      	bne.n	8003b90 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b5a:	4ba1      	ldr	r3, [pc, #644]	@ (8003de0 <HAL_RCC_OscConfig+0x61c>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4ba0      	ldr	r3, [pc, #640]	@ (8003de0 <HAL_RCC_OscConfig+0x61c>)
 8003b60:	2180      	movs	r1, #128	@ 0x80
 8003b62:	0049      	lsls	r1, r1, #1
 8003b64:	430a      	orrs	r2, r1
 8003b66:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003b68:	f7fe fcb4 	bl	80024d4 <HAL_GetTick>
 8003b6c:	0003      	movs	r3, r0
 8003b6e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b72:	f7fe fcaf 	bl	80024d4 <HAL_GetTick>
 8003b76:	0002      	movs	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e127      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b84:	4b96      	ldr	r3, [pc, #600]	@ (8003de0 <HAL_RCC_OscConfig+0x61c>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	2380      	movs	r3, #128	@ 0x80
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d106      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x3e2>
 8003b98:	4b90      	ldr	r3, [pc, #576]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003b9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b9c:	4b8f      	ldr	r3, [pc, #572]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ba4:	e01c      	b.n	8003be0 <HAL_RCC_OscConfig+0x41c>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b05      	cmp	r3, #5
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x404>
 8003bae:	4b8b      	ldr	r3, [pc, #556]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003bb0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003bb2:	4b8a      	ldr	r3, [pc, #552]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003bb4:	2104      	movs	r1, #4
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003bba:	4b88      	ldr	r3, [pc, #544]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003bbc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003bbe:	4b87      	ldr	r3, [pc, #540]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCC_OscConfig+0x41c>
 8003bc8:	4b84      	ldr	r3, [pc, #528]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003bca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003bcc:	4b83      	ldr	r3, [pc, #524]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003bce:	2101      	movs	r1, #1
 8003bd0:	438a      	bics	r2, r1
 8003bd2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003bd4:	4b81      	ldr	r3, [pc, #516]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003bd6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003bd8:	4b80      	ldr	r3, [pc, #512]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003bda:	2104      	movs	r1, #4
 8003bdc:	438a      	bics	r2, r1
 8003bde:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d014      	beq.n	8003c12 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fe fc74 	bl	80024d4 <HAL_GetTick>
 8003bec:	0003      	movs	r3, r0
 8003bee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bf0:	e009      	b.n	8003c06 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf2:	f7fe fc6f 	bl	80024d4 <HAL_GetTick>
 8003bf6:	0002      	movs	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	4a79      	ldr	r2, [pc, #484]	@ (8003de4 <HAL_RCC_OscConfig+0x620>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e0e6      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c06:	4b75      	ldr	r3, [pc, #468]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x42e>
 8003c10:	e013      	b.n	8003c3a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c12:	f7fe fc5f 	bl	80024d4 <HAL_GetTick>
 8003c16:	0003      	movs	r3, r0
 8003c18:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c1a:	e009      	b.n	8003c30 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1c:	f7fe fc5a 	bl	80024d4 <HAL_GetTick>
 8003c20:	0002      	movs	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	4a6f      	ldr	r2, [pc, #444]	@ (8003de4 <HAL_RCC_OscConfig+0x620>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e0d1      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c30:	4b6a      	ldr	r3, [pc, #424]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c34:	2202      	movs	r2, #2
 8003c36:	4013      	ands	r3, r2
 8003c38:	d1f0      	bne.n	8003c1c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003c3a:	231f      	movs	r3, #31
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d105      	bne.n	8003c50 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003c44:	4b65      	ldr	r3, [pc, #404]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003c46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c48:	4b64      	ldr	r3, [pc, #400]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003c4a:	4967      	ldr	r1, [pc, #412]	@ (8003de8 <HAL_RCC_OscConfig+0x624>)
 8003c4c:	400a      	ands	r2, r1
 8003c4e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d100      	bne.n	8003c5a <HAL_RCC_OscConfig+0x496>
 8003c58:	e0bb      	b.n	8003dd2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c5a:	4b60      	ldr	r3, [pc, #384]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2238      	movs	r2, #56	@ 0x38
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b10      	cmp	r3, #16
 8003c64:	d100      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4a4>
 8003c66:	e07b      	b.n	8003d60 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d156      	bne.n	8003d1e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c70:	4b5a      	ldr	r3, [pc, #360]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	4b59      	ldr	r3, [pc, #356]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003c76:	495d      	ldr	r1, [pc, #372]	@ (8003dec <HAL_RCC_OscConfig+0x628>)
 8003c78:	400a      	ands	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fe fc2a 	bl	80024d4 <HAL_GetTick>
 8003c80:	0003      	movs	r3, r0
 8003c82:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c86:	f7fe fc25 	bl	80024d4 <HAL_GetTick>
 8003c8a:	0002      	movs	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e09d      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c98:	4b50      	ldr	r3, [pc, #320]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	2380      	movs	r3, #128	@ 0x80
 8003c9e:	049b      	lsls	r3, r3, #18
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d1f0      	bne.n	8003c86 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ca4:	4b4d      	ldr	r3, [pc, #308]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4a51      	ldr	r2, [pc, #324]	@ (8003df0 <HAL_RCC_OscConfig+0x62c>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	0019      	movs	r1, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1a      	ldr	r2, [r3, #32]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	4b42      	ldr	r3, [pc, #264]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cd8:	4b40      	ldr	r3, [pc, #256]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4b3f      	ldr	r3, [pc, #252]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003cde:	2180      	movs	r1, #128	@ 0x80
 8003ce0:	0449      	lsls	r1, r1, #17
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	4b3c      	ldr	r3, [pc, #240]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003cec:	2180      	movs	r1, #128	@ 0x80
 8003cee:	0549      	lsls	r1, r1, #21
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fe fbee 	bl	80024d4 <HAL_GetTick>
 8003cf8:	0003      	movs	r3, r0
 8003cfa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfe:	f7fe fbe9 	bl	80024d4 <HAL_GetTick>
 8003d02:	0002      	movs	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e061      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d10:	4b32      	ldr	r3, [pc, #200]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	2380      	movs	r3, #128	@ 0x80
 8003d16:	049b      	lsls	r3, r3, #18
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCC_OscConfig+0x53a>
 8003d1c:	e059      	b.n	8003dd2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1e:	4b2f      	ldr	r3, [pc, #188]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	4b2e      	ldr	r3, [pc, #184]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003d24:	4931      	ldr	r1, [pc, #196]	@ (8003dec <HAL_RCC_OscConfig+0x628>)
 8003d26:	400a      	ands	r2, r1
 8003d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2a:	f7fe fbd3 	bl	80024d4 <HAL_GetTick>
 8003d2e:	0003      	movs	r3, r0
 8003d30:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fe fbce 	bl	80024d4 <HAL_GetTick>
 8003d38:	0002      	movs	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e046      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d46:	4b25      	ldr	r3, [pc, #148]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	2380      	movs	r3, #128	@ 0x80
 8003d4c:	049b      	lsls	r3, r3, #18
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003d52:	4b22      	ldr	r3, [pc, #136]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	4b21      	ldr	r3, [pc, #132]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003d58:	4926      	ldr	r1, [pc, #152]	@ (8003df4 <HAL_RCC_OscConfig+0x630>)
 8003d5a:	400a      	ands	r2, r1
 8003d5c:	60da      	str	r2, [r3, #12]
 8003d5e:	e038      	b.n	8003dd2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e033      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ddc <HAL_RCC_OscConfig+0x618>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2203      	movs	r2, #3
 8003d76:	401a      	ands	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d126      	bne.n	8003dce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2270      	movs	r2, #112	@ 0x70
 8003d84:	401a      	ands	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d11f      	bne.n	8003dce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	23fe      	movs	r3, #254	@ 0xfe
 8003d92:	01db      	lsls	r3, r3, #7
 8003d94:	401a      	ands	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d116      	bne.n	8003dce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	23f8      	movs	r3, #248	@ 0xf8
 8003da4:	039b      	lsls	r3, r3, #14
 8003da6:	401a      	ands	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d10e      	bne.n	8003dce <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	23e0      	movs	r3, #224	@ 0xe0
 8003db4:	051b      	lsls	r3, r3, #20
 8003db6:	401a      	ands	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d106      	bne.n	8003dce <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	0f5b      	lsrs	r3, r3, #29
 8003dc4:	075a      	lsls	r2, r3, #29
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d001      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b008      	add	sp, #32
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	40007000 	.word	0x40007000
 8003de4:	00001388 	.word	0x00001388
 8003de8:	efffffff 	.word	0xefffffff
 8003dec:	feffffff 	.word	0xfeffffff
 8003df0:	11c1808c 	.word	0x11c1808c
 8003df4:	eefefffc 	.word	0xeefefffc

08003df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0e9      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e0c:	4b76      	ldr	r3, [pc, #472]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2207      	movs	r2, #7
 8003e12:	4013      	ands	r3, r2
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d91e      	bls.n	8003e58 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1a:	4b73      	ldr	r3, [pc, #460]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2207      	movs	r2, #7
 8003e20:	4393      	bics	r3, r2
 8003e22:	0019      	movs	r1, r3
 8003e24:	4b70      	ldr	r3, [pc, #448]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e2c:	f7fe fb52 	bl	80024d4 <HAL_GetTick>
 8003e30:	0003      	movs	r3, r0
 8003e32:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e34:	e009      	b.n	8003e4a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e36:	f7fe fb4d 	bl	80024d4 <HAL_GetTick>
 8003e3a:	0002      	movs	r2, r0
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	4a6a      	ldr	r2, [pc, #424]	@ (8003fec <HAL_RCC_ClockConfig+0x1f4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e0ca      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e4a:	4b67      	ldr	r3, [pc, #412]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2207      	movs	r2, #7
 8003e50:	4013      	ands	r3, r2
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d1ee      	bne.n	8003e36 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d015      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2204      	movs	r2, #4
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d006      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003e6c:	4b60      	ldr	r3, [pc, #384]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	4b5f      	ldr	r3, [pc, #380]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e72:	21e0      	movs	r1, #224	@ 0xe0
 8003e74:	01c9      	lsls	r1, r1, #7
 8003e76:	430a      	orrs	r2, r1
 8003e78:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e7a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	4a5d      	ldr	r2, [pc, #372]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1fc>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	0019      	movs	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	4b59      	ldr	r3, [pc, #356]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2201      	movs	r2, #1
 8003e94:	4013      	ands	r3, r2
 8003e96:	d057      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d107      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ea0:	4b53      	ldr	r3, [pc, #332]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	2380      	movs	r3, #128	@ 0x80
 8003ea6:	029b      	lsls	r3, r3, #10
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d12b      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e097      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d107      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eb8:	4b4d      	ldr	r3, [pc, #308]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	2380      	movs	r3, #128	@ 0x80
 8003ebe:	049b      	lsls	r3, r3, #18
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	d11f      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e08b      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d107      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ed0:	4b47      	ldr	r3, [pc, #284]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	2380      	movs	r3, #128	@ 0x80
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d113      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e07f      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d106      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ee8:	4b41      	ldr	r3, [pc, #260]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8003eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eec:	2202      	movs	r2, #2
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d108      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e074      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ef6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003efa:	2202      	movs	r2, #2
 8003efc:	4013      	ands	r3, r2
 8003efe:	d101      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e06d      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f04:	4b3a      	ldr	r3, [pc, #232]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2207      	movs	r2, #7
 8003f0a:	4393      	bics	r3, r2
 8003f0c:	0019      	movs	r1, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	4b37      	ldr	r3, [pc, #220]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8003f14:	430a      	orrs	r2, r1
 8003f16:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f18:	f7fe fadc 	bl	80024d4 <HAL_GetTick>
 8003f1c:	0003      	movs	r3, r0
 8003f1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f20:	e009      	b.n	8003f36 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f22:	f7fe fad7 	bl	80024d4 <HAL_GetTick>
 8003f26:	0002      	movs	r2, r0
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	4a2f      	ldr	r2, [pc, #188]	@ (8003fec <HAL_RCC_ClockConfig+0x1f4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e054      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f36:	4b2e      	ldr	r3, [pc, #184]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2238      	movs	r2, #56	@ 0x38
 8003f3c:	401a      	ands	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d1ec      	bne.n	8003f22 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f48:	4b27      	ldr	r3, [pc, #156]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2207      	movs	r2, #7
 8003f4e:	4013      	ands	r3, r2
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d21e      	bcs.n	8003f94 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f56:	4b24      	ldr	r3, [pc, #144]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2207      	movs	r2, #7
 8003f5c:	4393      	bics	r3, r2
 8003f5e:	0019      	movs	r1, r3
 8003f60:	4b21      	ldr	r3, [pc, #132]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f68:	f7fe fab4 	bl	80024d4 <HAL_GetTick>
 8003f6c:	0003      	movs	r3, r0
 8003f6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f70:	e009      	b.n	8003f86 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f72:	f7fe faaf 	bl	80024d4 <HAL_GetTick>
 8003f76:	0002      	movs	r2, r0
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8003fec <HAL_RCC_ClockConfig+0x1f4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e02c      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f86:	4b18      	ldr	r3, [pc, #96]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2207      	movs	r2, #7
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d1ee      	bne.n	8003f72 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2204      	movs	r2, #4
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d009      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003f9e:	4b14      	ldr	r3, [pc, #80]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	4a15      	ldr	r2, [pc, #84]	@ (8003ff8 <HAL_RCC_ClockConfig+0x200>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	0019      	movs	r1, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	4b10      	ldr	r3, [pc, #64]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003fb2:	f000 f829 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8003fb6:	0001      	movs	r1, r0
 8003fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	0a1b      	lsrs	r3, r3, #8
 8003fbe:	220f      	movs	r2, #15
 8003fc0:	401a      	ands	r2, r3
 8003fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003ffc <HAL_RCC_ClockConfig+0x204>)
 8003fc4:	0092      	lsls	r2, r2, #2
 8003fc6:	58d3      	ldr	r3, [r2, r3]
 8003fc8:	221f      	movs	r2, #31
 8003fca:	4013      	ands	r3, r2
 8003fcc:	000a      	movs	r2, r1
 8003fce:	40da      	lsrs	r2, r3
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004000 <HAL_RCC_ClockConfig+0x208>)
 8003fd2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004004 <HAL_RCC_ClockConfig+0x20c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7fe fa1f 	bl	800241c <HAL_InitTick>
 8003fde:	0003      	movs	r3, r0
}
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	b004      	add	sp, #16
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40022000 	.word	0x40022000
 8003fec:	00001388 	.word	0x00001388
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	fffff0ff 	.word	0xfffff0ff
 8003ff8:	ffff8fff 	.word	0xffff8fff
 8003ffc:	080063d4 	.word	0x080063d4
 8004000:	20000068 	.word	0x20000068
 8004004:	2000006c 	.word	0x2000006c

08004008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800400e:	4b3c      	ldr	r3, [pc, #240]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2238      	movs	r2, #56	@ 0x38
 8004014:	4013      	ands	r3, r2
 8004016:	d10f      	bne.n	8004038 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004018:	4b39      	ldr	r3, [pc, #228]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xf8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	0adb      	lsrs	r3, r3, #11
 800401e:	2207      	movs	r2, #7
 8004020:	4013      	ands	r3, r2
 8004022:	2201      	movs	r2, #1
 8004024:	409a      	lsls	r2, r3
 8004026:	0013      	movs	r3, r2
 8004028:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800402a:	6839      	ldr	r1, [r7, #0]
 800402c:	4835      	ldr	r0, [pc, #212]	@ (8004104 <HAL_RCC_GetSysClockFreq+0xfc>)
 800402e:	f7fc f869 	bl	8000104 <__udivsi3>
 8004032:	0003      	movs	r3, r0
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	e05d      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004038:	4b31      	ldr	r3, [pc, #196]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xf8>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2238      	movs	r2, #56	@ 0x38
 800403e:	4013      	ands	r3, r2
 8004040:	2b08      	cmp	r3, #8
 8004042:	d102      	bne.n	800404a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004044:	4b30      	ldr	r3, [pc, #192]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x100>)
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	e054      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800404a:	4b2d      	ldr	r3, [pc, #180]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xf8>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2238      	movs	r2, #56	@ 0x38
 8004050:	4013      	ands	r3, r2
 8004052:	2b10      	cmp	r3, #16
 8004054:	d138      	bne.n	80040c8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004056:	4b2a      	ldr	r3, [pc, #168]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2203      	movs	r2, #3
 800405c:	4013      	ands	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004060:	4b27      	ldr	r3, [pc, #156]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	2207      	movs	r2, #7
 8004068:	4013      	ands	r3, r2
 800406a:	3301      	adds	r3, #1
 800406c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b03      	cmp	r3, #3
 8004072:	d10d      	bne.n	8004090 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	4824      	ldr	r0, [pc, #144]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x100>)
 8004078:	f7fc f844 	bl	8000104 <__udivsi3>
 800407c:	0003      	movs	r3, r0
 800407e:	0019      	movs	r1, r3
 8004080:	4b1f      	ldr	r3, [pc, #124]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	0a1b      	lsrs	r3, r3, #8
 8004086:	227f      	movs	r2, #127	@ 0x7f
 8004088:	4013      	ands	r3, r2
 800408a:	434b      	muls	r3, r1
 800408c:	617b      	str	r3, [r7, #20]
        break;
 800408e:	e00d      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004090:	68b9      	ldr	r1, [r7, #8]
 8004092:	481c      	ldr	r0, [pc, #112]	@ (8004104 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004094:	f7fc f836 	bl	8000104 <__udivsi3>
 8004098:	0003      	movs	r3, r0
 800409a:	0019      	movs	r1, r3
 800409c:	4b18      	ldr	r3, [pc, #96]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xf8>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	0a1b      	lsrs	r3, r3, #8
 80040a2:	227f      	movs	r2, #127	@ 0x7f
 80040a4:	4013      	ands	r3, r2
 80040a6:	434b      	muls	r3, r1
 80040a8:	617b      	str	r3, [r7, #20]
        break;
 80040aa:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80040ac:	4b14      	ldr	r3, [pc, #80]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	0f5b      	lsrs	r3, r3, #29
 80040b2:	2207      	movs	r2, #7
 80040b4:	4013      	ands	r3, r2
 80040b6:	3301      	adds	r3, #1
 80040b8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	6978      	ldr	r0, [r7, #20]
 80040be:	f7fc f821 	bl	8000104 <__udivsi3>
 80040c2:	0003      	movs	r3, r0
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	e015      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80040c8:	4b0d      	ldr	r3, [pc, #52]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2238      	movs	r2, #56	@ 0x38
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	d103      	bne.n	80040dc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80040d4:	2380      	movs	r3, #128	@ 0x80
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	e00b      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80040dc:	4b08      	ldr	r3, [pc, #32]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2238      	movs	r2, #56	@ 0x38
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b18      	cmp	r3, #24
 80040e6:	d103      	bne.n	80040f0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80040e8:	23fa      	movs	r3, #250	@ 0xfa
 80040ea:	01db      	lsls	r3, r3, #7
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	e001      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040f4:	693b      	ldr	r3, [r7, #16]
}
 80040f6:	0018      	movs	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b006      	add	sp, #24
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	46c0      	nop			@ (mov r8, r8)
 8004100:	40021000 	.word	0x40021000
 8004104:	00f42400 	.word	0x00f42400
 8004108:	007a1200 	.word	0x007a1200

0800410c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004114:	2313      	movs	r3, #19
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800411c:	2312      	movs	r3, #18
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	2200      	movs	r2, #0
 8004122:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	2380      	movs	r3, #128	@ 0x80
 800412a:	029b      	lsls	r3, r3, #10
 800412c:	4013      	ands	r3, r2
 800412e:	d100      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004130:	e0a3      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004132:	2011      	movs	r0, #17
 8004134:	183b      	adds	r3, r7, r0
 8004136:	2200      	movs	r2, #0
 8004138:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800413a:	4ba5      	ldr	r3, [pc, #660]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800413c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800413e:	2380      	movs	r3, #128	@ 0x80
 8004140:	055b      	lsls	r3, r3, #21
 8004142:	4013      	ands	r3, r2
 8004144:	d110      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004146:	4ba2      	ldr	r3, [pc, #648]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004148:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800414a:	4ba1      	ldr	r3, [pc, #644]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800414c:	2180      	movs	r1, #128	@ 0x80
 800414e:	0549      	lsls	r1, r1, #21
 8004150:	430a      	orrs	r2, r1
 8004152:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004154:	4b9e      	ldr	r3, [pc, #632]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004156:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004158:	2380      	movs	r3, #128	@ 0x80
 800415a:	055b      	lsls	r3, r3, #21
 800415c:	4013      	ands	r3, r2
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004162:	183b      	adds	r3, r7, r0
 8004164:	2201      	movs	r2, #1
 8004166:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004168:	4b9a      	ldr	r3, [pc, #616]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4b99      	ldr	r3, [pc, #612]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800416e:	2180      	movs	r1, #128	@ 0x80
 8004170:	0049      	lsls	r1, r1, #1
 8004172:	430a      	orrs	r2, r1
 8004174:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004176:	f7fe f9ad 	bl	80024d4 <HAL_GetTick>
 800417a:	0003      	movs	r3, r0
 800417c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800417e:	e00b      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004180:	f7fe f9a8 	bl	80024d4 <HAL_GetTick>
 8004184:	0002      	movs	r2, r0
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d904      	bls.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800418e:	2313      	movs	r3, #19
 8004190:	18fb      	adds	r3, r7, r3
 8004192:	2203      	movs	r2, #3
 8004194:	701a      	strb	r2, [r3, #0]
        break;
 8004196:	e005      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004198:	4b8e      	ldr	r3, [pc, #568]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	2380      	movs	r3, #128	@ 0x80
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	4013      	ands	r3, r2
 80041a2:	d0ed      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80041a4:	2313      	movs	r3, #19
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d154      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041ae:	4b88      	ldr	r3, [pc, #544]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80041b2:	23c0      	movs	r3, #192	@ 0xc0
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4013      	ands	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d019      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d014      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041ca:	4b81      	ldr	r3, [pc, #516]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ce:	4a82      	ldr	r2, [pc, #520]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041d4:	4b7e      	ldr	r3, [pc, #504]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80041d8:	4b7d      	ldr	r3, [pc, #500]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041da:	2180      	movs	r1, #128	@ 0x80
 80041dc:	0249      	lsls	r1, r1, #9
 80041de:	430a      	orrs	r2, r1
 80041e0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041e2:	4b7b      	ldr	r3, [pc, #492]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80041e6:	4b7a      	ldr	r3, [pc, #488]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041e8:	497c      	ldr	r1, [pc, #496]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80041ea:	400a      	ands	r2, r1
 80041ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041ee:	4b78      	ldr	r3, [pc, #480]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2201      	movs	r2, #1
 80041f8:	4013      	ands	r3, r2
 80041fa:	d016      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fe f96a 	bl	80024d4 <HAL_GetTick>
 8004200:	0003      	movs	r3, r0
 8004202:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004204:	e00c      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004206:	f7fe f965 	bl	80024d4 <HAL_GetTick>
 800420a:	0002      	movs	r2, r0
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	4a73      	ldr	r2, [pc, #460]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d904      	bls.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004216:	2313      	movs	r3, #19
 8004218:	18fb      	adds	r3, r7, r3
 800421a:	2203      	movs	r2, #3
 800421c:	701a      	strb	r2, [r3, #0]
            break;
 800421e:	e004      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004220:	4b6b      	ldr	r3, [pc, #428]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004224:	2202      	movs	r2, #2
 8004226:	4013      	ands	r3, r2
 8004228:	d0ed      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800422a:	2313      	movs	r3, #19
 800422c:	18fb      	adds	r3, r7, r3
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004234:	4b66      	ldr	r3, [pc, #408]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004238:	4a67      	ldr	r2, [pc, #412]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800423a:	4013      	ands	r3, r2
 800423c:	0019      	movs	r1, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004242:	4b63      	ldr	r3, [pc, #396]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004244:	430a      	orrs	r2, r1
 8004246:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004248:	e00c      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800424a:	2312      	movs	r3, #18
 800424c:	18fb      	adds	r3, r7, r3
 800424e:	2213      	movs	r2, #19
 8004250:	18ba      	adds	r2, r7, r2
 8004252:	7812      	ldrb	r2, [r2, #0]
 8004254:	701a      	strb	r2, [r3, #0]
 8004256:	e005      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004258:	2312      	movs	r3, #18
 800425a:	18fb      	adds	r3, r7, r3
 800425c:	2213      	movs	r2, #19
 800425e:	18ba      	adds	r2, r7, r2
 8004260:	7812      	ldrb	r2, [r2, #0]
 8004262:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004264:	2311      	movs	r3, #17
 8004266:	18fb      	adds	r3, r7, r3
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d105      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800426e:	4b58      	ldr	r3, [pc, #352]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004270:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004272:	4b57      	ldr	r3, [pc, #348]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004274:	495b      	ldr	r1, [pc, #364]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004276:	400a      	ands	r2, r1
 8004278:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2201      	movs	r2, #1
 8004280:	4013      	ands	r3, r2
 8004282:	d009      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004284:	4b52      	ldr	r3, [pc, #328]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004288:	2203      	movs	r2, #3
 800428a:	4393      	bics	r3, r2
 800428c:	0019      	movs	r1, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	4b4f      	ldr	r3, [pc, #316]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004294:	430a      	orrs	r2, r1
 8004296:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2210      	movs	r2, #16
 800429e:	4013      	ands	r3, r2
 80042a0:	d009      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042a2:	4b4b      	ldr	r3, [pc, #300]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a6:	4a50      	ldr	r2, [pc, #320]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	0019      	movs	r1, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	4b47      	ldr	r3, [pc, #284]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042b2:	430a      	orrs	r2, r1
 80042b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	2380      	movs	r3, #128	@ 0x80
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4013      	ands	r3, r2
 80042c0:	d009      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042c2:	4b43      	ldr	r3, [pc, #268]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c6:	4a49      	ldr	r2, [pc, #292]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	0019      	movs	r1, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	695a      	ldr	r2, [r3, #20]
 80042d0:	4b3f      	ldr	r3, [pc, #252]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042d2:	430a      	orrs	r2, r1
 80042d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	2380      	movs	r3, #128	@ 0x80
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	4013      	ands	r3, r2
 80042e0:	d009      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042e2:	4b3b      	ldr	r3, [pc, #236]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e6:	4a42      	ldr	r2, [pc, #264]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	0019      	movs	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699a      	ldr	r2, [r3, #24]
 80042f0:	4b37      	ldr	r3, [pc, #220]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042f2:	430a      	orrs	r2, r1
 80042f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2220      	movs	r2, #32
 80042fc:	4013      	ands	r3, r2
 80042fe:	d009      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004300:	4b33      	ldr	r3, [pc, #204]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004304:	4a3b      	ldr	r2, [pc, #236]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004306:	4013      	ands	r3, r2
 8004308:	0019      	movs	r1, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	4b30      	ldr	r3, [pc, #192]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004310:	430a      	orrs	r2, r1
 8004312:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	2380      	movs	r3, #128	@ 0x80
 800431a:	01db      	lsls	r3, r3, #7
 800431c:	4013      	ands	r3, r2
 800431e:	d015      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004320:	4b2b      	ldr	r3, [pc, #172]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	0899      	lsrs	r1, r3, #2
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	4b28      	ldr	r3, [pc, #160]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800432e:	430a      	orrs	r2, r1
 8004330:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69da      	ldr	r2, [r3, #28]
 8004336:	2380      	movs	r3, #128	@ 0x80
 8004338:	05db      	lsls	r3, r3, #23
 800433a:	429a      	cmp	r2, r3
 800433c:	d106      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800433e:	4b24      	ldr	r3, [pc, #144]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	4b23      	ldr	r3, [pc, #140]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004344:	2180      	movs	r1, #128	@ 0x80
 8004346:	0249      	lsls	r1, r1, #9
 8004348:	430a      	orrs	r2, r1
 800434a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	2380      	movs	r3, #128	@ 0x80
 8004352:	039b      	lsls	r3, r3, #14
 8004354:	4013      	ands	r3, r2
 8004356:	d016      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004358:	4b1d      	ldr	r3, [pc, #116]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800435a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435c:	4a26      	ldr	r2, [pc, #152]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800435e:	4013      	ands	r3, r2
 8004360:	0019      	movs	r1, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1a      	ldr	r2, [r3, #32]
 8004366:	4b1a      	ldr	r3, [pc, #104]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004368:	430a      	orrs	r2, r1
 800436a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1a      	ldr	r2, [r3, #32]
 8004370:	2380      	movs	r3, #128	@ 0x80
 8004372:	03db      	lsls	r3, r3, #15
 8004374:	429a      	cmp	r2, r3
 8004376:	d106      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004378:	4b15      	ldr	r3, [pc, #84]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	4b14      	ldr	r3, [pc, #80]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800437e:	2180      	movs	r1, #128	@ 0x80
 8004380:	0449      	lsls	r1, r1, #17
 8004382:	430a      	orrs	r2, r1
 8004384:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	2380      	movs	r3, #128	@ 0x80
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	4013      	ands	r3, r2
 8004390:	d016      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004392:	4b0f      	ldr	r3, [pc, #60]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004396:	4a19      	ldr	r2, [pc, #100]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004398:	4013      	ands	r3, r2
 800439a:	0019      	movs	r1, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	4b0b      	ldr	r3, [pc, #44]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043a2:	430a      	orrs	r2, r1
 80043a4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	2380      	movs	r3, #128	@ 0x80
 80043ac:	01db      	lsls	r3, r3, #7
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d106      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80043b2:	4b07      	ldr	r3, [pc, #28]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	4b06      	ldr	r3, [pc, #24]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043b8:	2180      	movs	r1, #128	@ 0x80
 80043ba:	0249      	lsls	r1, r1, #9
 80043bc:	430a      	orrs	r2, r1
 80043be:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80043c0:	2312      	movs	r3, #18
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	781b      	ldrb	r3, [r3, #0]
}
 80043c6:	0018      	movs	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	b006      	add	sp, #24
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	46c0      	nop			@ (mov r8, r8)
 80043d0:	40021000 	.word	0x40021000
 80043d4:	40007000 	.word	0x40007000
 80043d8:	fffffcff 	.word	0xfffffcff
 80043dc:	fffeffff 	.word	0xfffeffff
 80043e0:	00001388 	.word	0x00001388
 80043e4:	efffffff 	.word	0xefffffff
 80043e8:	fffff3ff 	.word	0xfffff3ff
 80043ec:	fff3ffff 	.word	0xfff3ffff
 80043f0:	ffcfffff 	.word	0xffcfffff
 80043f4:	ffffcfff 	.word	0xffffcfff
 80043f8:	ffbfffff 	.word	0xffbfffff
 80043fc:	ffff3fff 	.word	0xffff3fff

08004400 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8004400:	b590      	push	{r4, r7, lr}
 8004402:	b08b      	sub	sp, #44	@ 0x2c
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8004408:	2427      	movs	r4, #39	@ 0x27
 800440a:	193b      	adds	r3, r7, r4
 800440c:	2200      	movs	r2, #0
 800440e:	701a      	strb	r2, [r3, #0]
  FlagStatus       backupchanged = RESET;
 8004410:	2326      	movs	r3, #38	@ 0x26
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	2200      	movs	r2, #0
 8004416:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 8004418:	4b31      	ldr	r3, [pc, #196]	@ (80044e0 <HAL_RCCEx_EnableLSCO+0xe0>)
 800441a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800441c:	4b30      	ldr	r3, [pc, #192]	@ (80044e0 <HAL_RCCEx_EnableLSCO+0xe0>)
 800441e:	2101      	movs	r1, #1
 8004420:	430a      	orrs	r2, r1
 8004422:	635a      	str	r2, [r3, #52]	@ 0x34
 8004424:	4b2e      	ldr	r3, [pc, #184]	@ (80044e0 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004428:	2201      	movs	r2, #1
 800442a:	4013      	ands	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 8004430:	2110      	movs	r1, #16
 8004432:	187b      	adds	r3, r7, r1
 8004434:	2204      	movs	r2, #4
 8004436:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004438:	187b      	adds	r3, r7, r1
 800443a:	2203      	movs	r2, #3
 800443c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800443e:	187b      	adds	r3, r7, r1
 8004440:	2203      	movs	r2, #3
 8004442:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004444:	187b      	adds	r3, r7, r1
 8004446:	2200      	movs	r2, #0
 8004448:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 800444a:	187a      	adds	r2, r7, r1
 800444c:	23a0      	movs	r3, #160	@ 0xa0
 800444e:	05db      	lsls	r3, r3, #23
 8004450:	0011      	movs	r1, r2
 8004452:	0018      	movs	r0, r3
 8004454:	f7fe f926 	bl	80026a4 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004458:	4b21      	ldr	r3, [pc, #132]	@ (80044e0 <HAL_RCCEx_EnableLSCO+0xe0>)
 800445a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800445c:	2380      	movs	r3, #128	@ 0x80
 800445e:	055b      	lsls	r3, r3, #21
 8004460:	4013      	ands	r3, r2
 8004462:	d110      	bne.n	8004486 <HAL_RCCEx_EnableLSCO+0x86>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004464:	4b1e      	ldr	r3, [pc, #120]	@ (80044e0 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004466:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004468:	4b1d      	ldr	r3, [pc, #116]	@ (80044e0 <HAL_RCCEx_EnableLSCO+0xe0>)
 800446a:	2180      	movs	r1, #128	@ 0x80
 800446c:	0549      	lsls	r1, r1, #21
 800446e:	430a      	orrs	r2, r1
 8004470:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004472:	4b1b      	ldr	r3, [pc, #108]	@ (80044e0 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004474:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004476:	2380      	movs	r3, #128	@ 0x80
 8004478:	055b      	lsls	r3, r3, #21
 800447a:	4013      	ands	r3, r2
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 8004480:	193b      	adds	r3, r7, r4
 8004482:	2201      	movs	r2, #1
 8004484:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004486:	4b17      	ldr	r3, [pc, #92]	@ (80044e4 <HAL_RCCEx_EnableLSCO+0xe4>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	2380      	movs	r3, #128	@ 0x80
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	4013      	ands	r3, r2
 8004490:	d105      	bne.n	800449e <HAL_RCCEx_EnableLSCO+0x9e>
  {
    HAL_PWR_EnableBkUpAccess();
 8004492:	f7ff f939 	bl	8003708 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 8004496:	2326      	movs	r3, #38	@ 0x26
 8004498:	18fb      	adds	r3, r7, r3
 800449a:	2201      	movs	r2, #1
 800449c:	701a      	strb	r2, [r3, #0]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 800449e:	4b10      	ldr	r3, [pc, #64]	@ (80044e0 <HAL_RCCEx_EnableLSCO+0xe0>)
 80044a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a2:	4a11      	ldr	r2, [pc, #68]	@ (80044e8 <HAL_RCCEx_EnableLSCO+0xe8>)
 80044a4:	401a      	ands	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	431a      	orrs	r2, r3
 80044aa:	4b0d      	ldr	r3, [pc, #52]	@ (80044e0 <HAL_RCCEx_EnableLSCO+0xe0>)
 80044ac:	2180      	movs	r1, #128	@ 0x80
 80044ae:	0449      	lsls	r1, r1, #17
 80044b0:	430a      	orrs	r2, r1
 80044b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (backupchanged == SET)
 80044b4:	2326      	movs	r3, #38	@ 0x26
 80044b6:	18fb      	adds	r3, r7, r3
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_RCCEx_EnableLSCO+0xc2>
  {
    HAL_PWR_DisableBkUpAccess();
 80044be:	f7ff f931 	bl	8003724 <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 80044c2:	2327      	movs	r3, #39	@ 0x27
 80044c4:	18fb      	adds	r3, r7, r3
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d105      	bne.n	80044d8 <HAL_RCCEx_EnableLSCO+0xd8>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 80044cc:	4b04      	ldr	r3, [pc, #16]	@ (80044e0 <HAL_RCCEx_EnableLSCO+0xe0>)
 80044ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044d0:	4b03      	ldr	r3, [pc, #12]	@ (80044e0 <HAL_RCCEx_EnableLSCO+0xe0>)
 80044d2:	4906      	ldr	r1, [pc, #24]	@ (80044ec <HAL_RCCEx_EnableLSCO+0xec>)
 80044d4:	400a      	ands	r2, r1
 80044d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80044d8:	46c0      	nop			@ (mov r8, r8)
 80044da:	46bd      	mov	sp, r7
 80044dc:	b00b      	add	sp, #44	@ 0x2c
 80044de:	bd90      	pop	{r4, r7, pc}
 80044e0:	40021000 	.word	0x40021000
 80044e4:	40007000 	.word	0x40007000
 80044e8:	fcffffff 	.word	0xfcffffff
 80044ec:	efffffff 	.word	0xefffffff

080044f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80044f0:	b5b0      	push	{r4, r5, r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80044f8:	230f      	movs	r3, #15
 80044fa:	18fb      	adds	r3, r7, r3
 80044fc:	2201      	movs	r2, #1
 80044fe:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d100      	bne.n	8004508 <HAL_RTC_Init+0x18>
 8004506:	e08c      	b.n	8004622 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2229      	movs	r2, #41	@ 0x29
 800450c:	5c9b      	ldrb	r3, [r3, r2]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10b      	bne.n	800452c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2228      	movs	r2, #40	@ 0x28
 8004518:	2100      	movs	r1, #0
 800451a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2288      	movs	r2, #136	@ 0x88
 8004520:	0212      	lsls	r2, r2, #8
 8004522:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	0018      	movs	r0, r3
 8004528:	f7fd fdf4 	bl	8002114 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2229      	movs	r2, #41	@ 0x29
 8004530:	2102      	movs	r1, #2
 8004532:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2210      	movs	r2, #16
 800453c:	4013      	ands	r3, r2
 800453e:	2b10      	cmp	r3, #16
 8004540:	d062      	beq.n	8004608 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	22ca      	movs	r2, #202	@ 0xca
 8004548:	625a      	str	r2, [r3, #36]	@ 0x24
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2253      	movs	r2, #83	@ 0x53
 8004550:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004552:	250f      	movs	r5, #15
 8004554:	197c      	adds	r4, r7, r5
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	0018      	movs	r0, r3
 800455a:	f000 fcb9 	bl	8004ed0 <RTC_EnterInitMode>
 800455e:	0003      	movs	r3, r0
 8004560:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004562:	0028      	movs	r0, r5
 8004564:	183b      	adds	r3, r7, r0
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d12c      	bne.n	80045c6 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	492e      	ldr	r1, [pc, #184]	@ (8004630 <HAL_RTC_Init+0x140>)
 8004578:	400a      	ands	r2, r1
 800457a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6999      	ldr	r1, [r3, #24]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6912      	ldr	r2, [r2, #16]
 80045a2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6919      	ldr	r1, [r3, #16]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	041a      	lsls	r2, r3, #16
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80045b8:	183c      	adds	r4, r7, r0
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	0018      	movs	r0, r3
 80045be:	f000 fcc9 	bl	8004f54 <RTC_ExitInitMode>
 80045c2:	0003      	movs	r3, r0
 80045c4:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80045c6:	230f      	movs	r3, #15
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d116      	bne.n	80045fe <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	00d2      	lsls	r2, r2, #3
 80045dc:	08d2      	lsrs	r2, r2, #3
 80045de:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6999      	ldr	r1, [r3, #24]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	22ff      	movs	r2, #255	@ 0xff
 8004604:	625a      	str	r2, [r3, #36]	@ 0x24
 8004606:	e003      	b.n	8004610 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004608:	230f      	movs	r3, #15
 800460a:	18fb      	adds	r3, r7, r3
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004610:	230f      	movs	r3, #15
 8004612:	18fb      	adds	r3, r7, r3
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d103      	bne.n	8004622 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2229      	movs	r2, #41	@ 0x29
 800461e:	2101      	movs	r1, #1
 8004620:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004622:	230f      	movs	r3, #15
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	781b      	ldrb	r3, [r3, #0]
}
 8004628:	0018      	movs	r0, r3
 800462a:	46bd      	mov	sp, r7
 800462c:	b004      	add	sp, #16
 800462e:	bdb0      	pop	{r4, r5, r7, pc}
 8004630:	fb8fffbf 	.word	0xfb8fffbf

08004634 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004634:	b5b0      	push	{r4, r5, r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2228      	movs	r2, #40	@ 0x28
 8004644:	5c9b      	ldrb	r3, [r3, r2]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_RTC_SetTime+0x1a>
 800464a:	2302      	movs	r3, #2
 800464c:	e092      	b.n	8004774 <HAL_RTC_SetTime+0x140>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2228      	movs	r2, #40	@ 0x28
 8004652:	2101      	movs	r1, #1
 8004654:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2229      	movs	r2, #41	@ 0x29
 800465a:	2102      	movs	r1, #2
 800465c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	22ca      	movs	r2, #202	@ 0xca
 8004664:	625a      	str	r2, [r3, #36]	@ 0x24
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2253      	movs	r2, #83	@ 0x53
 800466c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800466e:	2513      	movs	r5, #19
 8004670:	197c      	adds	r4, r7, r5
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	0018      	movs	r0, r3
 8004676:	f000 fc2b 	bl	8004ed0 <RTC_EnterInitMode>
 800467a:	0003      	movs	r3, r0
 800467c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800467e:	197b      	adds	r3, r7, r5
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d162      	bne.n	800474c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d125      	bne.n	80046d8 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	2240      	movs	r2, #64	@ 0x40
 8004694:	4013      	ands	r3, r2
 8004696:	d102      	bne.n	800469e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2200      	movs	r2, #0
 800469c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	0018      	movs	r0, r3
 80046a4:	f000 fc9a 	bl	8004fdc <RTC_ByteToBcd2>
 80046a8:	0003      	movs	r3, r0
 80046aa:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	785b      	ldrb	r3, [r3, #1]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f000 fc93 	bl	8004fdc <RTC_ByteToBcd2>
 80046b6:	0003      	movs	r3, r0
 80046b8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046ba:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	789b      	ldrb	r3, [r3, #2]
 80046c0:	0018      	movs	r0, r3
 80046c2:	f000 fc8b 	bl	8004fdc <RTC_ByteToBcd2>
 80046c6:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046c8:	0022      	movs	r2, r4
 80046ca:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	78db      	ldrb	r3, [r3, #3]
 80046d0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046d2:	4313      	orrs	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	e017      	b.n	8004708 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	2240      	movs	r2, #64	@ 0x40
 80046e0:	4013      	ands	r3, r2
 80046e2:	d102      	bne.n	80046ea <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2200      	movs	r2, #0
 80046e8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046f6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046fc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	78db      	ldrb	r3, [r3, #3]
 8004702:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	491b      	ldr	r1, [pc, #108]	@ (800477c <HAL_RTC_SetTime+0x148>)
 8004710:	400a      	ands	r2, r1
 8004712:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4918      	ldr	r1, [pc, #96]	@ (8004780 <HAL_RTC_SetTime+0x14c>)
 8004720:	400a      	ands	r2, r1
 8004722:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6999      	ldr	r1, [r3, #24]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	431a      	orrs	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800473c:	2313      	movs	r3, #19
 800473e:	18fc      	adds	r4, r7, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	0018      	movs	r0, r3
 8004744:	f000 fc06 	bl	8004f54 <RTC_ExitInitMode>
 8004748:	0003      	movs	r3, r0
 800474a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	22ff      	movs	r2, #255	@ 0xff
 8004752:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8004754:	2313      	movs	r3, #19
 8004756:	18fb      	adds	r3, r7, r3
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d103      	bne.n	8004766 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2229      	movs	r2, #41	@ 0x29
 8004762:	2101      	movs	r1, #1
 8004764:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2228      	movs	r2, #40	@ 0x28
 800476a:	2100      	movs	r1, #0
 800476c:	5499      	strb	r1, [r3, r2]

  return status;
 800476e:	2313      	movs	r3, #19
 8004770:	18fb      	adds	r3, r7, r3
 8004772:	781b      	ldrb	r3, [r3, #0]
}
 8004774:	0018      	movs	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	b006      	add	sp, #24
 800477a:	bdb0      	pop	{r4, r5, r7, pc}
 800477c:	007f7f7f 	.word	0x007f7f7f
 8004780:	fffbffff 	.word	0xfffbffff

08004784 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	045b      	lsls	r3, r3, #17
 80047a2:	0c5a      	lsrs	r2, r3, #17
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a22      	ldr	r2, [pc, #136]	@ (8004838 <HAL_RTC_GetTime+0xb4>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	0c1b      	lsrs	r3, r3, #16
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	223f      	movs	r2, #63	@ 0x3f
 80047bc:	4013      	ands	r3, r2
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	227f      	movs	r2, #127	@ 0x7f
 80047cc:	4013      	ands	r3, r2
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	227f      	movs	r2, #127	@ 0x7f
 80047da:	4013      	ands	r3, r2
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	0d9b      	lsrs	r3, r3, #22
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2201      	movs	r2, #1
 80047ea:	4013      	ands	r3, r2
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d11a      	bne.n	800482e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	0018      	movs	r0, r3
 80047fe:	f000 fc15 	bl	800502c <RTC_Bcd2ToByte>
 8004802:	0003      	movs	r3, r0
 8004804:	001a      	movs	r2, r3
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	785b      	ldrb	r3, [r3, #1]
 800480e:	0018      	movs	r0, r3
 8004810:	f000 fc0c 	bl	800502c <RTC_Bcd2ToByte>
 8004814:	0003      	movs	r3, r0
 8004816:	001a      	movs	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	789b      	ldrb	r3, [r3, #2]
 8004820:	0018      	movs	r0, r3
 8004822:	f000 fc03 	bl	800502c <RTC_Bcd2ToByte>
 8004826:	0003      	movs	r3, r0
 8004828:	001a      	movs	r2, r3
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	0018      	movs	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	b006      	add	sp, #24
 8004836:	bd80      	pop	{r7, pc}
 8004838:	007f7f7f 	.word	0x007f7f7f

0800483c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800483c:	b5b0      	push	{r4, r5, r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2228      	movs	r2, #40	@ 0x28
 800484c:	5c9b      	ldrb	r3, [r3, r2]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d101      	bne.n	8004856 <HAL_RTC_SetDate+0x1a>
 8004852:	2302      	movs	r3, #2
 8004854:	e07e      	b.n	8004954 <HAL_RTC_SetDate+0x118>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2228      	movs	r2, #40	@ 0x28
 800485a:	2101      	movs	r1, #1
 800485c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2229      	movs	r2, #41	@ 0x29
 8004862:	2102      	movs	r1, #2
 8004864:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10e      	bne.n	800488a <HAL_RTC_SetDate+0x4e>
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	785b      	ldrb	r3, [r3, #1]
 8004870:	001a      	movs	r2, r3
 8004872:	2310      	movs	r3, #16
 8004874:	4013      	ands	r3, r2
 8004876:	d008      	beq.n	800488a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	785b      	ldrb	r3, [r3, #1]
 800487c:	2210      	movs	r2, #16
 800487e:	4393      	bics	r3, r2
 8004880:	b2db      	uxtb	r3, r3
 8004882:	330a      	adds	r3, #10
 8004884:	b2da      	uxtb	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d11c      	bne.n	80048ca <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	78db      	ldrb	r3, [r3, #3]
 8004894:	0018      	movs	r0, r3
 8004896:	f000 fba1 	bl	8004fdc <RTC_ByteToBcd2>
 800489a:	0003      	movs	r3, r0
 800489c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	785b      	ldrb	r3, [r3, #1]
 80048a2:	0018      	movs	r0, r3
 80048a4:	f000 fb9a 	bl	8004fdc <RTC_ByteToBcd2>
 80048a8:	0003      	movs	r3, r0
 80048aa:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80048ac:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	789b      	ldrb	r3, [r3, #2]
 80048b2:	0018      	movs	r0, r3
 80048b4:	f000 fb92 	bl	8004fdc <RTC_ByteToBcd2>
 80048b8:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80048ba:	0022      	movs	r2, r4
 80048bc:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	e00e      	b.n	80048e8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	78db      	ldrb	r3, [r3, #3]
 80048ce:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	785b      	ldrb	r3, [r3, #1]
 80048d4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80048d6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80048dc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	22ca      	movs	r2, #202	@ 0xca
 80048ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2253      	movs	r2, #83	@ 0x53
 80048f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80048f8:	2513      	movs	r5, #19
 80048fa:	197c      	adds	r4, r7, r5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	0018      	movs	r0, r3
 8004900:	f000 fae6 	bl	8004ed0 <RTC_EnterInitMode>
 8004904:	0003      	movs	r3, r0
 8004906:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004908:	0028      	movs	r0, r5
 800490a:	183b      	adds	r3, r7, r0
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10c      	bne.n	800492c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4910      	ldr	r1, [pc, #64]	@ (800495c <HAL_RTC_SetDate+0x120>)
 800491a:	400a      	ands	r2, r1
 800491c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800491e:	183c      	adds	r4, r7, r0
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	0018      	movs	r0, r3
 8004924:	f000 fb16 	bl	8004f54 <RTC_ExitInitMode>
 8004928:	0003      	movs	r3, r0
 800492a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	22ff      	movs	r2, #255	@ 0xff
 8004932:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004934:	2313      	movs	r3, #19
 8004936:	18fb      	adds	r3, r7, r3
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d103      	bne.n	8004946 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2229      	movs	r2, #41	@ 0x29
 8004942:	2101      	movs	r1, #1
 8004944:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2228      	movs	r2, #40	@ 0x28
 800494a:	2100      	movs	r1, #0
 800494c:	5499      	strb	r1, [r3, r2]

  return status;
 800494e:	2313      	movs	r3, #19
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	781b      	ldrb	r3, [r3, #0]
}
 8004954:	0018      	movs	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	b006      	add	sp, #24
 800495a:	bdb0      	pop	{r4, r5, r7, pc}
 800495c:	00ffff3f 	.word	0x00ffff3f

08004960 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4a21      	ldr	r2, [pc, #132]	@ (80049f8 <HAL_RTC_GetDate+0x98>)
 8004974:	4013      	ands	r3, r2
 8004976:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	0c1b      	lsrs	r3, r3, #16
 800497c:	b2da      	uxtb	r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	0a1b      	lsrs	r3, r3, #8
 8004986:	b2db      	uxtb	r3, r3
 8004988:	221f      	movs	r2, #31
 800498a:	4013      	ands	r3, r2
 800498c:	b2da      	uxtb	r2, r3
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	223f      	movs	r2, #63	@ 0x3f
 8004998:	4013      	ands	r3, r2
 800499a:	b2da      	uxtb	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	0b5b      	lsrs	r3, r3, #13
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2207      	movs	r2, #7
 80049a8:	4013      	ands	r3, r2
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d11a      	bne.n	80049ec <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	78db      	ldrb	r3, [r3, #3]
 80049ba:	0018      	movs	r0, r3
 80049bc:	f000 fb36 	bl	800502c <RTC_Bcd2ToByte>
 80049c0:	0003      	movs	r3, r0
 80049c2:	001a      	movs	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	785b      	ldrb	r3, [r3, #1]
 80049cc:	0018      	movs	r0, r3
 80049ce:	f000 fb2d 	bl	800502c <RTC_Bcd2ToByte>
 80049d2:	0003      	movs	r3, r0
 80049d4:	001a      	movs	r2, r3
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	789b      	ldrb	r3, [r3, #2]
 80049de:	0018      	movs	r0, r3
 80049e0:	f000 fb24 	bl	800502c <RTC_Bcd2ToByte>
 80049e4:	0003      	movs	r3, r0
 80049e6:	001a      	movs	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	0018      	movs	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b006      	add	sp, #24
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	00ffff3f 	.word	0x00ffff3f

080049fc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80049fc:	b590      	push	{r4, r7, lr}
 80049fe:	b089      	sub	sp, #36	@ 0x24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2228      	movs	r2, #40	@ 0x28
 8004a0c:	5c9b      	ldrb	r3, [r3, r2]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_RTC_SetAlarm_IT+0x1a>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e127      	b.n	8004c66 <HAL_RTC_SetAlarm_IT+0x26a>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2228      	movs	r2, #40	@ 0x28
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2229      	movs	r2, #41	@ 0x29
 8004a22:	2102      	movs	r1, #2
 8004a24:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d136      	bne.n	8004a9a <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	2240      	movs	r2, #64	@ 0x40
 8004a34:	4013      	ands	r3, r2
 8004a36:	d102      	bne.n	8004a3e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	0018      	movs	r0, r3
 8004a44:	f000 faca 	bl	8004fdc <RTC_ByteToBcd2>
 8004a48:	0003      	movs	r3, r0
 8004a4a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	0018      	movs	r0, r3
 8004a52:	f000 fac3 	bl	8004fdc <RTC_ByteToBcd2>
 8004a56:	0003      	movs	r3, r0
 8004a58:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a5a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	789b      	ldrb	r3, [r3, #2]
 8004a60:	0018      	movs	r0, r3
 8004a62:	f000 fabb 	bl	8004fdc <RTC_ByteToBcd2>
 8004a66:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a68:	0022      	movs	r2, r4
 8004a6a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	78db      	ldrb	r3, [r3, #3]
 8004a70:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a72:	431a      	orrs	r2, r3
 8004a74:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	5c9b      	ldrb	r3, [r3, r2]
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f000 faad 	bl	8004fdc <RTC_ByteToBcd2>
 8004a82:	0003      	movs	r3, r0
 8004a84:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a86:	0022      	movs	r2, r4
 8004a88:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a8e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a94:	4313      	orrs	r3, r2
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	e022      	b.n	8004ae0 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	2240      	movs	r2, #64	@ 0x40
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d102      	bne.n	8004aac <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	785b      	ldrb	r3, [r3, #1]
 8004ab6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ab8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004abe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	78db      	ldrb	r3, [r3, #3]
 8004ac4:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004ac6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2120      	movs	r1, #32
 8004acc:	5c5b      	ldrb	r3, [r3, r1]
 8004ace:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ad0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004ad6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	22ca      	movs	r2, #202	@ 0xca
 8004af2:	625a      	str	r2, [r3, #36]	@ 0x24
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2253      	movs	r2, #83	@ 0x53
 8004afa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b00:	2380      	movs	r3, #128	@ 0x80
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d14c      	bne.n	8004ba2 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699a      	ldr	r2, [r3, #24]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4957      	ldr	r1, [pc, #348]	@ (8004c70 <HAL_RTC_SetAlarm_IT+0x274>)
 8004b14:	400a      	ands	r2, r1
 8004b16:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2101      	movs	r1, #1
 8004b24:	430a      	orrs	r2, r1
 8004b26:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004b28:	f7fd fcd4 	bl	80024d4 <HAL_GetTick>
 8004b2c:	0003      	movs	r3, r0
 8004b2e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004b30:	e016      	b.n	8004b60 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004b32:	f7fd fccf 	bl	80024d4 <HAL_GetTick>
 8004b36:	0002      	movs	r2, r0
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	1ad2      	subs	r2, r2, r3
 8004b3c:	23fa      	movs	r3, #250	@ 0xfa
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d90d      	bls.n	8004b60 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	22ff      	movs	r2, #255	@ 0xff
 8004b4a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2229      	movs	r2, #41	@ 0x29
 8004b50:	2103      	movs	r1, #3
 8004b52:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2228      	movs	r2, #40	@ 0x28
 8004b58:	2100      	movs	r1, #0
 8004b5a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e082      	b.n	8004c66 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d0e2      	beq.n	8004b32 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	69fa      	ldr	r2, [r7, #28]
 8004b72:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2180      	movs	r1, #128	@ 0x80
 8004b88:	0049      	lsls	r1, r1, #1
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	699a      	ldr	r2, [r3, #24]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2180      	movs	r1, #128	@ 0x80
 8004b9a:	0149      	lsls	r1, r1, #5
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	619a      	str	r2, [r3, #24]
 8004ba0:	e04b      	b.n	8004c3a <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699a      	ldr	r2, [r3, #24]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4931      	ldr	r1, [pc, #196]	@ (8004c74 <HAL_RTC_SetAlarm_IT+0x278>)
 8004bae:	400a      	ands	r2, r1
 8004bb0:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2102      	movs	r1, #2
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004bc2:	f7fd fc87 	bl	80024d4 <HAL_GetTick>
 8004bc6:	0003      	movs	r3, r0
 8004bc8:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004bca:	e016      	b.n	8004bfa <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004bcc:	f7fd fc82 	bl	80024d4 <HAL_GetTick>
 8004bd0:	0002      	movs	r2, r0
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	1ad2      	subs	r2, r2, r3
 8004bd6:	23fa      	movs	r3, #250	@ 0xfa
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d90d      	bls.n	8004bfa <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	22ff      	movs	r2, #255	@ 0xff
 8004be4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2229      	movs	r2, #41	@ 0x29
 8004bea:	2103      	movs	r1, #3
 8004bec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2228      	movs	r2, #40	@ 0x28
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e035      	b.n	8004c66 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	2202      	movs	r2, #2
 8004c02:	4013      	ands	r3, r2
 8004c04:	d0e2      	beq.n	8004bcc <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	699a      	ldr	r2, [r3, #24]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2180      	movs	r1, #128	@ 0x80
 8004c22:	0089      	lsls	r1, r1, #2
 8004c24:	430a      	orrs	r2, r1
 8004c26:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2180      	movs	r1, #128	@ 0x80
 8004c34:	0189      	lsls	r1, r1, #6
 8004c36:	430a      	orrs	r2, r1
 8004c38:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8004c78 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004c3c:	2380      	movs	r3, #128	@ 0x80
 8004c3e:	58d3      	ldr	r3, [r2, r3]
 8004c40:	490d      	ldr	r1, [pc, #52]	@ (8004c78 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004c42:	2280      	movs	r2, #128	@ 0x80
 8004c44:	0312      	lsls	r2, r2, #12
 8004c46:	4313      	orrs	r3, r2
 8004c48:	2280      	movs	r2, #128	@ 0x80
 8004c4a:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	22ff      	movs	r2, #255	@ 0xff
 8004c52:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2229      	movs	r2, #41	@ 0x29
 8004c58:	2101      	movs	r1, #1
 8004c5a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2228      	movs	r2, #40	@ 0x28
 8004c60:	2100      	movs	r1, #0
 8004c62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	0018      	movs	r0, r3
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	b009      	add	sp, #36	@ 0x24
 8004c6c:	bd90      	pop	{r4, r7, pc}
 8004c6e:	46c0      	nop			@ (mov r8, r8)
 8004c70:	fffffeff 	.word	0xfffffeff
 8004c74:	fffffdff 	.word	0xfffffdff
 8004c78:	40021800 	.word	0x40021800

08004c7c <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	2380      	movs	r3, #128	@ 0x80
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d144      	bne.n	8004d1e <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2280      	movs	r2, #128	@ 0x80
 8004c98:	0052      	lsls	r2, r2, #1
 8004c9a:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca2:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004caa:	045b      	lsls	r3, r3, #17
 8004cac:	0c5b      	lsrs	r3, r3, #17
 8004cae:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	0c1b      	lsrs	r3, r3, #16
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	223f      	movs	r2, #63	@ 0x3f
 8004cb8:	4013      	ands	r3, r2
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	0a1b      	lsrs	r3, r3, #8
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	227f      	movs	r2, #127	@ 0x7f
 8004cc8:	4013      	ands	r3, r2
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	227f      	movs	r2, #127	@ 0x7f
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	0d9b      	lsrs	r3, r3, #22
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	0e1b      	lsrs	r3, r3, #24
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	223f      	movs	r2, #63	@ 0x3f
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	b2d9      	uxtb	r1, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2220      	movs	r2, #32
 8004d04:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	2380      	movs	r3, #128	@ 0x80
 8004d0a:	05db      	lsls	r3, r3, #23
 8004d0c:	401a      	ands	r2, r3
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	4a3b      	ldr	r2, [pc, #236]	@ (8004e04 <HAL_RTC_GetAlarm+0x188>)
 8004d16:	401a      	ands	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	615a      	str	r2, [r3, #20]
 8004d1c:	e043      	b.n	8004da6 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2280      	movs	r2, #128	@ 0x80
 8004d22:	0092      	lsls	r2, r2, #2
 8004d24:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d2c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d34:	045b      	lsls	r3, r3, #17
 8004d36:	0c5b      	lsrs	r3, r3, #17
 8004d38:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	0c1b      	lsrs	r3, r3, #16
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	223f      	movs	r2, #63	@ 0x3f
 8004d42:	4013      	ands	r3, r2
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	0a1b      	lsrs	r3, r3, #8
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	227f      	movs	r2, #127	@ 0x7f
 8004d52:	4013      	ands	r3, r2
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	227f      	movs	r2, #127	@ 0x7f
 8004d60:	4013      	ands	r3, r2
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	0d9b      	lsrs	r3, r3, #22
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2201      	movs	r2, #1
 8004d70:	4013      	ands	r3, r2
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	0e1b      	lsrs	r3, r3, #24
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	223f      	movs	r2, #63	@ 0x3f
 8004d86:	4013      	ands	r3, r2
 8004d88:	b2d9      	uxtb	r1, r3
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	2380      	movs	r3, #128	@ 0x80
 8004d94:	05db      	lsls	r3, r3, #23
 8004d96:	401a      	ands	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	4a19      	ldr	r2, [pc, #100]	@ (8004e04 <HAL_RTC_GetAlarm+0x188>)
 8004da0:	401a      	ands	r2, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d125      	bne.n	8004df8 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	0018      	movs	r0, r3
 8004db2:	f000 f93b 	bl	800502c <RTC_Bcd2ToByte>
 8004db6:	0003      	movs	r3, r0
 8004db8:	001a      	movs	r2, r3
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	785b      	ldrb	r3, [r3, #1]
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f000 f932 	bl	800502c <RTC_Bcd2ToByte>
 8004dc8:	0003      	movs	r3, r0
 8004dca:	001a      	movs	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	789b      	ldrb	r3, [r3, #2]
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	f000 f929 	bl	800502c <RTC_Bcd2ToByte>
 8004dda:	0003      	movs	r3, r0
 8004ddc:	001a      	movs	r2, r3
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2220      	movs	r2, #32
 8004de6:	5c9b      	ldrb	r3, [r3, r2]
 8004de8:	0018      	movs	r0, r3
 8004dea:	f000 f91f 	bl	800502c <RTC_Bcd2ToByte>
 8004dee:	0003      	movs	r3, r0
 8004df0:	0019      	movs	r1, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2220      	movs	r2, #32
 8004df6:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	b006      	add	sp, #24
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	46c0      	nop			@ (mov r8, r8)
 8004e04:	80808080 	.word	0x80808080

08004e08 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	2380      	movs	r3, #128	@ 0x80
 8004e18:	015b      	lsls	r3, r3, #5
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	d011      	beq.n	8004e42 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e24:	2201      	movs	r2, #1
 8004e26:	4013      	ands	r3, r2
 8004e28:	d00b      	beq.n	8004e42 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2101      	movs	r1, #1
 8004e36:	430a      	orrs	r2, r1
 8004e38:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	f7fc fa97 	bl	8001370 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699a      	ldr	r2, [r3, #24]
 8004e48:	2380      	movs	r3, #128	@ 0x80
 8004e4a:	019b      	lsls	r3, r3, #6
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	d011      	beq.n	8004e74 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e56:	2202      	movs	r2, #2
 8004e58:	4013      	ands	r3, r2
 8004e5a:	d00b      	beq.n	8004e74 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2102      	movs	r1, #2
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f000 f9a4 	bl	80051bc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2229      	movs	r2, #41	@ 0x29
 8004e78:	2101      	movs	r1, #1
 8004e7a:	5499      	strb	r1, [r3, r2]
}
 8004e7c:	46c0      	nop			@ (mov r8, r8)
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b002      	add	sp, #8
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a0e      	ldr	r2, [pc, #56]	@ (8004ecc <HAL_RTC_WaitForSynchro+0x48>)
 8004e92:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004e94:	f7fd fb1e 	bl	80024d4 <HAL_GetTick>
 8004e98:	0003      	movs	r3, r0
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004e9c:	e00a      	b.n	8004eb4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e9e:	f7fd fb19 	bl	80024d4 <HAL_GetTick>
 8004ea2:	0002      	movs	r2, r0
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	1ad2      	subs	r2, r2, r3
 8004ea8:	23fa      	movs	r3, #250	@ 0xfa
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d901      	bls.n	8004eb4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e006      	b.n	8004ec2 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d0ee      	beq.n	8004e9e <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b004      	add	sp, #16
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	46c0      	nop			@ (mov r8, r8)
 8004ecc:	0001005f 	.word	0x0001005f

08004ed0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004ed8:	230f      	movs	r3, #15
 8004eda:	18fb      	adds	r3, r7, r3
 8004edc:	2200      	movs	r2, #0
 8004ede:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	2240      	movs	r2, #64	@ 0x40
 8004ee8:	4013      	ands	r3, r2
 8004eea:	d12c      	bne.n	8004f46 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2180      	movs	r1, #128	@ 0x80
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004efc:	f7fd faea 	bl	80024d4 <HAL_GetTick>
 8004f00:	0003      	movs	r3, r0
 8004f02:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f04:	e014      	b.n	8004f30 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f06:	f7fd fae5 	bl	80024d4 <HAL_GetTick>
 8004f0a:	0002      	movs	r2, r0
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	1ad2      	subs	r2, r2, r3
 8004f10:	200f      	movs	r0, #15
 8004f12:	183b      	adds	r3, r7, r0
 8004f14:	1839      	adds	r1, r7, r0
 8004f16:	7809      	ldrb	r1, [r1, #0]
 8004f18:	7019      	strb	r1, [r3, #0]
 8004f1a:	23fa      	movs	r3, #250	@ 0xfa
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d906      	bls.n	8004f30 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004f22:	183b      	adds	r3, r7, r0
 8004f24:	2203      	movs	r2, #3
 8004f26:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2229      	movs	r2, #41	@ 0x29
 8004f2c:	2103      	movs	r1, #3
 8004f2e:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	2240      	movs	r2, #64	@ 0x40
 8004f38:	4013      	ands	r3, r2
 8004f3a:	d104      	bne.n	8004f46 <RTC_EnterInitMode+0x76>
 8004f3c:	230f      	movs	r3, #15
 8004f3e:	18fb      	adds	r3, r7, r3
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b03      	cmp	r3, #3
 8004f44:	d1df      	bne.n	8004f06 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004f46:	230f      	movs	r3, #15
 8004f48:	18fb      	adds	r3, r7, r3
 8004f4a:	781b      	ldrb	r3, [r3, #0]
}
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	b004      	add	sp, #16
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f54:	b590      	push	{r4, r7, lr}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f5c:	240f      	movs	r4, #15
 8004f5e:	193b      	adds	r3, r7, r4
 8004f60:	2200      	movs	r2, #0
 8004f62:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004f64:	4b1c      	ldr	r3, [pc, #112]	@ (8004fd8 <RTC_ExitInitMode+0x84>)
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd8 <RTC_ExitInitMode+0x84>)
 8004f6a:	2180      	movs	r1, #128	@ 0x80
 8004f6c:	438a      	bics	r2, r1
 8004f6e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004f70:	4b19      	ldr	r3, [pc, #100]	@ (8004fd8 <RTC_ExitInitMode+0x84>)
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	2220      	movs	r2, #32
 8004f76:	4013      	ands	r3, r2
 8004f78:	d10d      	bne.n	8004f96 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	f7ff ff81 	bl	8004e84 <HAL_RTC_WaitForSynchro>
 8004f82:	1e03      	subs	r3, r0, #0
 8004f84:	d021      	beq.n	8004fca <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2229      	movs	r2, #41	@ 0x29
 8004f8a:	2103      	movs	r1, #3
 8004f8c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004f8e:	193b      	adds	r3, r7, r4
 8004f90:	2203      	movs	r2, #3
 8004f92:	701a      	strb	r2, [r3, #0]
 8004f94:	e019      	b.n	8004fca <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f96:	4b10      	ldr	r3, [pc, #64]	@ (8004fd8 <RTC_ExitInitMode+0x84>)
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd8 <RTC_ExitInitMode+0x84>)
 8004f9c:	2120      	movs	r1, #32
 8004f9e:	438a      	bics	r2, r1
 8004fa0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	f7ff ff6d 	bl	8004e84 <HAL_RTC_WaitForSynchro>
 8004faa:	1e03      	subs	r3, r0, #0
 8004fac:	d007      	beq.n	8004fbe <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2229      	movs	r2, #41	@ 0x29
 8004fb2:	2103      	movs	r1, #3
 8004fb4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004fb6:	230f      	movs	r3, #15
 8004fb8:	18fb      	adds	r3, r7, r3
 8004fba:	2203      	movs	r2, #3
 8004fbc:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004fbe:	4b06      	ldr	r3, [pc, #24]	@ (8004fd8 <RTC_ExitInitMode+0x84>)
 8004fc0:	699a      	ldr	r2, [r3, #24]
 8004fc2:	4b05      	ldr	r3, [pc, #20]	@ (8004fd8 <RTC_ExitInitMode+0x84>)
 8004fc4:	2120      	movs	r1, #32
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004fca:	230f      	movs	r3, #15
 8004fcc:	18fb      	adds	r3, r7, r3
 8004fce:	781b      	ldrb	r3, [r3, #0]
}
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	b005      	add	sp, #20
 8004fd6:	bd90      	pop	{r4, r7, pc}
 8004fd8:	40002800 	.word	0x40002800

08004fdc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	0002      	movs	r2, r0
 8004fe4:	1dfb      	adds	r3, r7, #7
 8004fe6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004fec:	230b      	movs	r3, #11
 8004fee:	18fb      	adds	r3, r7, r3
 8004ff0:	1dfa      	adds	r2, r7, #7
 8004ff2:	7812      	ldrb	r2, [r2, #0]
 8004ff4:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004ff6:	e008      	b.n	800500a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004ffe:	220b      	movs	r2, #11
 8005000:	18bb      	adds	r3, r7, r2
 8005002:	18ba      	adds	r2, r7, r2
 8005004:	7812      	ldrb	r2, [r2, #0]
 8005006:	3a0a      	subs	r2, #10
 8005008:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800500a:	210b      	movs	r1, #11
 800500c:	187b      	adds	r3, r7, r1
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b09      	cmp	r3, #9
 8005012:	d8f1      	bhi.n	8004ff8 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	b2db      	uxtb	r3, r3
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	b2da      	uxtb	r2, r3
 800501c:	187b      	adds	r3, r7, r1
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	4313      	orrs	r3, r2
 8005022:	b2db      	uxtb	r3, r3
}
 8005024:	0018      	movs	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	b004      	add	sp, #16
 800502a:	bd80      	pop	{r7, pc}

0800502c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	0002      	movs	r2, r0
 8005034:	1dfb      	adds	r3, r7, #7
 8005036:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005038:	1dfb      	adds	r3, r7, #7
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	091b      	lsrs	r3, r3, #4
 800503e:	b2db      	uxtb	r3, r3
 8005040:	001a      	movs	r2, r3
 8005042:	0013      	movs	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	189b      	adds	r3, r3, r2
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	b2da      	uxtb	r2, r3
 8005050:	1dfb      	adds	r3, r7, #7
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	210f      	movs	r1, #15
 8005056:	400b      	ands	r3, r1
 8005058:	b2db      	uxtb	r3, r3
 800505a:	18d3      	adds	r3, r2, r3
 800505c:	b2db      	uxtb	r3, r3
}
 800505e:	0018      	movs	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	b004      	add	sp, #16
 8005064:	bd80      	pop	{r7, pc}

08005066 <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b086      	sub	sp, #24
 800506a:	af00      	add	r7, sp, #0
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	607a      	str	r2, [r7, #4]
 8005072:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2228      	movs	r2, #40	@ 0x28
 8005078:	5c9b      	ldrb	r3, [r3, r2]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_RTCEx_SetSmoothCalib+0x1c>
 800507e:	2302      	movs	r3, #2
 8005080:	e04f      	b.n	8005122 <HAL_RTCEx_SetSmoothCalib+0xbc>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2228      	movs	r2, #40	@ 0x28
 8005086:	2101      	movs	r1, #1
 8005088:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2229      	movs	r2, #41	@ 0x29
 800508e:	2102      	movs	r1, #2
 8005090:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	22ca      	movs	r2, #202	@ 0xca
 8005098:	625a      	str	r2, [r3, #36]	@ 0x24
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2253      	movs	r2, #83	@ 0x53
 80050a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	2380      	movs	r3, #128	@ 0x80
 80050aa:	025b      	lsls	r3, r3, #9
 80050ac:	4013      	ands	r3, r2
 80050ae:	d022      	beq.n	80050f6 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 80050b0:	f7fd fa10 	bl	80024d4 <HAL_GetTick>
 80050b4:	0003      	movs	r3, r0
 80050b6:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 80050b8:	e016      	b.n	80050e8 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80050ba:	f7fd fa0b 	bl	80024d4 <HAL_GetTick>
 80050be:	0002      	movs	r2, r0
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	1ad2      	subs	r2, r2, r3
 80050c4:	23fa      	movs	r3, #250	@ 0xfa
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d90d      	bls.n	80050e8 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	22ff      	movs	r2, #255	@ 0xff
 80050d2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2229      	movs	r2, #41	@ 0x29
 80050d8:	2103      	movs	r1, #3
 80050da:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2228      	movs	r2, #40	@ 0x28
 80050e0:	2100      	movs	r1, #0
 80050e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e01c      	b.n	8005122 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	2380      	movs	r3, #128	@ 0x80
 80050f0:	025b      	lsls	r3, r3, #9
 80050f2:	4013      	ands	r3, r2
 80050f4:	d1e1      	bne.n	80050ba <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	431a      	orrs	r2, r3
 80050fc:	0011      	movs	r1, r2
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	22ff      	movs	r2, #255	@ 0xff
 800510e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2229      	movs	r2, #41	@ 0x29
 8005114:	2101      	movs	r1, #1
 8005116:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2228      	movs	r2, #40	@ 0x28
 800511c:	2100      	movs	r1, #0
 800511e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	0018      	movs	r0, r3
 8005124:	46bd      	mov	sp, r7
 8005126:	b006      	add	sp, #24
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2228      	movs	r2, #40	@ 0x28
 800513a:	5c9b      	ldrb	r3, [r3, r2]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8005140:	2302      	movs	r3, #2
 8005142:	e035      	b.n	80051b0 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2228      	movs	r2, #40	@ 0x28
 8005148:	2101      	movs	r1, #1
 800514a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2229      	movs	r2, #41	@ 0x29
 8005150:	2102      	movs	r1, #2
 8005152:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	22ca      	movs	r2, #202	@ 0xca
 800515a:	625a      	str	r2, [r3, #36]	@ 0x24
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2253      	movs	r2, #83	@ 0x53
 8005162:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4912      	ldr	r1, [pc, #72]	@ (80051b8 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8005170:	400a      	ands	r2, r1
 8005172:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6999      	ldr	r1, [r3, #24]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699a      	ldr	r2, [r3, #24]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2180      	movs	r1, #128	@ 0x80
 8005190:	0409      	lsls	r1, r1, #16
 8005192:	430a      	orrs	r2, r1
 8005194:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	22ff      	movs	r2, #255	@ 0xff
 800519c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2229      	movs	r2, #41	@ 0x29
 80051a2:	2101      	movs	r1, #1
 80051a4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2228      	movs	r2, #40	@ 0x28
 80051aa:	2100      	movs	r1, #0
 80051ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	0018      	movs	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	b002      	add	sp, #8
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	fff7ffff 	.word	0xfff7ffff

080051bc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80051c4:	46c0      	nop			@ (mov r8, r8)
 80051c6:	46bd      	mov	sp, r7
 80051c8:	b002      	add	sp, #8
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	001a      	movs	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	18d3      	adds	r3, r2, r3
 80051e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	3301      	adds	r3, #1
 80051ea:	33ff      	adds	r3, #255	@ 0xff
 80051ec:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	18d3      	adds	r3, r2, r3
 80051f6:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	601a      	str	r2, [r3, #0]
}
 80051fe:	46c0      	nop			@ (mov r8, r8)
 8005200:	46bd      	mov	sp, r7
 8005202:	b006      	add	sp, #24
 8005204:	bd80      	pop	{r7, pc}

08005206 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	001a      	movs	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	18d3      	adds	r3, r2, r3
 800521c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	3301      	adds	r3, #1
 8005222:	33ff      	adds	r3, #255	@ 0xff
 8005224:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	18d3      	adds	r3, r2, r3
 800522e:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	681b      	ldr	r3, [r3, #0]
}
 8005234:	0018      	movs	r0, r3
 8005236:	46bd      	mov	sp, r7
 8005238:	b004      	add	sp, #16
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e04a      	b.n	80052e4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	223d      	movs	r2, #61	@ 0x3d
 8005252:	5c9b      	ldrb	r3, [r3, r2]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d107      	bne.n	800526a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	223c      	movs	r2, #60	@ 0x3c
 800525e:	2100      	movs	r1, #0
 8005260:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	0018      	movs	r0, r3
 8005266:	f7fc ffb7 	bl	80021d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	223d      	movs	r2, #61	@ 0x3d
 800526e:	2102      	movs	r1, #2
 8005270:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3304      	adds	r3, #4
 800527a:	0019      	movs	r1, r3
 800527c:	0010      	movs	r0, r2
 800527e:	f000 fc87 	bl	8005b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2248      	movs	r2, #72	@ 0x48
 8005286:	2101      	movs	r1, #1
 8005288:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	223e      	movs	r2, #62	@ 0x3e
 800528e:	2101      	movs	r1, #1
 8005290:	5499      	strb	r1, [r3, r2]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	223f      	movs	r2, #63	@ 0x3f
 8005296:	2101      	movs	r1, #1
 8005298:	5499      	strb	r1, [r3, r2]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2240      	movs	r2, #64	@ 0x40
 800529e:	2101      	movs	r1, #1
 80052a0:	5499      	strb	r1, [r3, r2]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2241      	movs	r2, #65	@ 0x41
 80052a6:	2101      	movs	r1, #1
 80052a8:	5499      	strb	r1, [r3, r2]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2242      	movs	r2, #66	@ 0x42
 80052ae:	2101      	movs	r1, #1
 80052b0:	5499      	strb	r1, [r3, r2]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2243      	movs	r2, #67	@ 0x43
 80052b6:	2101      	movs	r1, #1
 80052b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2244      	movs	r2, #68	@ 0x44
 80052be:	2101      	movs	r1, #1
 80052c0:	5499      	strb	r1, [r3, r2]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2245      	movs	r2, #69	@ 0x45
 80052c6:	2101      	movs	r1, #1
 80052c8:	5499      	strb	r1, [r3, r2]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2246      	movs	r2, #70	@ 0x46
 80052ce:	2101      	movs	r1, #1
 80052d0:	5499      	strb	r1, [r3, r2]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2247      	movs	r2, #71	@ 0x47
 80052d6:	2101      	movs	r1, #1
 80052d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	223d      	movs	r2, #61	@ 0x3d
 80052de:	2101      	movs	r1, #1
 80052e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	0018      	movs	r0, r3
 80052e6:	46bd      	mov	sp, r7
 80052e8:	b002      	add	sp, #8
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	223d      	movs	r2, #61	@ 0x3d
 80052f8:	5c9b      	ldrb	r3, [r3, r2]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d001      	beq.n	8005304 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e035      	b.n	8005370 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	223d      	movs	r2, #61	@ 0x3d
 8005308:	2102      	movs	r1, #2
 800530a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a19      	ldr	r2, [pc, #100]	@ (8005378 <HAL_TIM_Base_Start+0x8c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00a      	beq.n	800532c <HAL_TIM_Base_Start+0x40>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	2380      	movs	r3, #128	@ 0x80
 800531c:	05db      	lsls	r3, r3, #23
 800531e:	429a      	cmp	r2, r3
 8005320:	d004      	beq.n	800532c <HAL_TIM_Base_Start+0x40>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a15      	ldr	r2, [pc, #84]	@ (800537c <HAL_TIM_Base_Start+0x90>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d116      	bne.n	800535a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	4a13      	ldr	r2, [pc, #76]	@ (8005380 <HAL_TIM_Base_Start+0x94>)
 8005334:	4013      	ands	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b06      	cmp	r3, #6
 800533c:	d016      	beq.n	800536c <HAL_TIM_Base_Start+0x80>
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	2380      	movs	r3, #128	@ 0x80
 8005342:	025b      	lsls	r3, r3, #9
 8005344:	429a      	cmp	r2, r3
 8005346:	d011      	beq.n	800536c <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2101      	movs	r1, #1
 8005354:	430a      	orrs	r2, r1
 8005356:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005358:	e008      	b.n	800536c <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2101      	movs	r1, #1
 8005366:	430a      	orrs	r2, r1
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e000      	b.n	800536e <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	0018      	movs	r0, r3
 8005372:	46bd      	mov	sp, r7
 8005374:	b004      	add	sp, #16
 8005376:	bd80      	pop	{r7, pc}
 8005378:	40012c00 	.word	0x40012c00
 800537c:	40000400 	.word	0x40000400
 8005380:	00010007 	.word	0x00010007

08005384 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	4a0d      	ldr	r2, [pc, #52]	@ (80053c8 <HAL_TIM_Base_Stop+0x44>)
 8005394:	4013      	ands	r3, r2
 8005396:	d10d      	bne.n	80053b4 <HAL_TIM_Base_Stop+0x30>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	4a0b      	ldr	r2, [pc, #44]	@ (80053cc <HAL_TIM_Base_Stop+0x48>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	d107      	bne.n	80053b4 <HAL_TIM_Base_Stop+0x30>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2101      	movs	r1, #1
 80053b0:	438a      	bics	r2, r1
 80053b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	223d      	movs	r2, #61	@ 0x3d
 80053b8:	2101      	movs	r1, #1
 80053ba:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	0018      	movs	r0, r3
 80053c0:	46bd      	mov	sp, r7
 80053c2:	b002      	add	sp, #8
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	46c0      	nop			@ (mov r8, r8)
 80053c8:	00001111 	.word	0x00001111
 80053cc:	00000444 	.word	0x00000444

080053d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	223d      	movs	r2, #61	@ 0x3d
 80053dc:	5c9b      	ldrb	r3, [r3, r2]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d001      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e03d      	b.n	8005464 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	223d      	movs	r2, #61	@ 0x3d
 80053ec:	2102      	movs	r1, #2
 80053ee:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2101      	movs	r1, #1
 80053fc:	430a      	orrs	r2, r1
 80053fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a19      	ldr	r2, [pc, #100]	@ (800546c <HAL_TIM_Base_Start_IT+0x9c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00a      	beq.n	8005420 <HAL_TIM_Base_Start_IT+0x50>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	2380      	movs	r3, #128	@ 0x80
 8005410:	05db      	lsls	r3, r3, #23
 8005412:	429a      	cmp	r2, r3
 8005414:	d004      	beq.n	8005420 <HAL_TIM_Base_Start_IT+0x50>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a15      	ldr	r2, [pc, #84]	@ (8005470 <HAL_TIM_Base_Start_IT+0xa0>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d116      	bne.n	800544e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	4a13      	ldr	r2, [pc, #76]	@ (8005474 <HAL_TIM_Base_Start_IT+0xa4>)
 8005428:	4013      	ands	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b06      	cmp	r3, #6
 8005430:	d016      	beq.n	8005460 <HAL_TIM_Base_Start_IT+0x90>
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	2380      	movs	r3, #128	@ 0x80
 8005436:	025b      	lsls	r3, r3, #9
 8005438:	429a      	cmp	r2, r3
 800543a:	d011      	beq.n	8005460 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2101      	movs	r1, #1
 8005448:	430a      	orrs	r2, r1
 800544a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544c:	e008      	b.n	8005460 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2101      	movs	r1, #1
 800545a:	430a      	orrs	r2, r1
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	e000      	b.n	8005462 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005460:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	0018      	movs	r0, r3
 8005466:	46bd      	mov	sp, r7
 8005468:	b004      	add	sp, #16
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40012c00 	.word	0x40012c00
 8005470:	40000400 	.word	0x40000400
 8005474:	00010007 	.word	0x00010007

08005478 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2101      	movs	r1, #1
 800548c:	438a      	bics	r2, r1
 800548e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	4a0d      	ldr	r2, [pc, #52]	@ (80054cc <HAL_TIM_Base_Stop_IT+0x54>)
 8005498:	4013      	ands	r3, r2
 800549a:	d10d      	bne.n	80054b8 <HAL_TIM_Base_Stop_IT+0x40>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	4a0b      	ldr	r2, [pc, #44]	@ (80054d0 <HAL_TIM_Base_Stop_IT+0x58>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	d107      	bne.n	80054b8 <HAL_TIM_Base_Stop_IT+0x40>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2101      	movs	r1, #1
 80054b4:	438a      	bics	r2, r1
 80054b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	223d      	movs	r2, #61	@ 0x3d
 80054bc:	2101      	movs	r1, #1
 80054be:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	0018      	movs	r0, r3
 80054c4:	46bd      	mov	sp, r7
 80054c6:	b002      	add	sp, #8
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	46c0      	nop			@ (mov r8, r8)
 80054cc:	00001111 	.word	0x00001111
 80054d0:	00000444 	.word	0x00000444

080054d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e04a      	b.n	800557c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	223d      	movs	r2, #61	@ 0x3d
 80054ea:	5c9b      	ldrb	r3, [r3, r2]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d107      	bne.n	8005502 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	223c      	movs	r2, #60	@ 0x3c
 80054f6:	2100      	movs	r1, #0
 80054f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	0018      	movs	r0, r3
 80054fe:	f7fc fe4f 	bl	80021a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	223d      	movs	r2, #61	@ 0x3d
 8005506:	2102      	movs	r1, #2
 8005508:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3304      	adds	r3, #4
 8005512:	0019      	movs	r1, r3
 8005514:	0010      	movs	r0, r2
 8005516:	f000 fb3b 	bl	8005b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2248      	movs	r2, #72	@ 0x48
 800551e:	2101      	movs	r1, #1
 8005520:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	223e      	movs	r2, #62	@ 0x3e
 8005526:	2101      	movs	r1, #1
 8005528:	5499      	strb	r1, [r3, r2]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	223f      	movs	r2, #63	@ 0x3f
 800552e:	2101      	movs	r1, #1
 8005530:	5499      	strb	r1, [r3, r2]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2240      	movs	r2, #64	@ 0x40
 8005536:	2101      	movs	r1, #1
 8005538:	5499      	strb	r1, [r3, r2]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2241      	movs	r2, #65	@ 0x41
 800553e:	2101      	movs	r1, #1
 8005540:	5499      	strb	r1, [r3, r2]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2242      	movs	r2, #66	@ 0x42
 8005546:	2101      	movs	r1, #1
 8005548:	5499      	strb	r1, [r3, r2]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2243      	movs	r2, #67	@ 0x43
 800554e:	2101      	movs	r1, #1
 8005550:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2244      	movs	r2, #68	@ 0x44
 8005556:	2101      	movs	r1, #1
 8005558:	5499      	strb	r1, [r3, r2]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2245      	movs	r2, #69	@ 0x45
 800555e:	2101      	movs	r1, #1
 8005560:	5499      	strb	r1, [r3, r2]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2246      	movs	r2, #70	@ 0x46
 8005566:	2101      	movs	r1, #1
 8005568:	5499      	strb	r1, [r3, r2]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2247      	movs	r2, #71	@ 0x47
 800556e:	2101      	movs	r1, #1
 8005570:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	223d      	movs	r2, #61	@ 0x3d
 8005576:	2101      	movs	r1, #1
 8005578:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	0018      	movs	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	b002      	add	sp, #8
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d108      	bne.n	80055a6 <HAL_TIM_PWM_Start+0x22>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	223e      	movs	r2, #62	@ 0x3e
 8005598:	5c9b      	ldrb	r3, [r3, r2]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	3b01      	subs	r3, #1
 800559e:	1e5a      	subs	r2, r3, #1
 80055a0:	4193      	sbcs	r3, r2
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	e037      	b.n	8005616 <HAL_TIM_PWM_Start+0x92>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d108      	bne.n	80055be <HAL_TIM_PWM_Start+0x3a>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	223f      	movs	r2, #63	@ 0x3f
 80055b0:	5c9b      	ldrb	r3, [r3, r2]
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	1e5a      	subs	r2, r3, #1
 80055b8:	4193      	sbcs	r3, r2
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	e02b      	b.n	8005616 <HAL_TIM_PWM_Start+0x92>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d108      	bne.n	80055d6 <HAL_TIM_PWM_Start+0x52>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2240      	movs	r2, #64	@ 0x40
 80055c8:	5c9b      	ldrb	r3, [r3, r2]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	1e5a      	subs	r2, r3, #1
 80055d0:	4193      	sbcs	r3, r2
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	e01f      	b.n	8005616 <HAL_TIM_PWM_Start+0x92>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b0c      	cmp	r3, #12
 80055da:	d108      	bne.n	80055ee <HAL_TIM_PWM_Start+0x6a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2241      	movs	r2, #65	@ 0x41
 80055e0:	5c9b      	ldrb	r3, [r3, r2]
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	1e5a      	subs	r2, r3, #1
 80055e8:	4193      	sbcs	r3, r2
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	e013      	b.n	8005616 <HAL_TIM_PWM_Start+0x92>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b10      	cmp	r3, #16
 80055f2:	d108      	bne.n	8005606 <HAL_TIM_PWM_Start+0x82>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2242      	movs	r2, #66	@ 0x42
 80055f8:	5c9b      	ldrb	r3, [r3, r2]
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	1e5a      	subs	r2, r3, #1
 8005600:	4193      	sbcs	r3, r2
 8005602:	b2db      	uxtb	r3, r3
 8005604:	e007      	b.n	8005616 <HAL_TIM_PWM_Start+0x92>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2243      	movs	r2, #67	@ 0x43
 800560a:	5c9b      	ldrb	r3, [r3, r2]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	3b01      	subs	r3, #1
 8005610:	1e5a      	subs	r2, r3, #1
 8005612:	4193      	sbcs	r3, r2
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e081      	b.n	8005722 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d104      	bne.n	800562e <HAL_TIM_PWM_Start+0xaa>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	223e      	movs	r2, #62	@ 0x3e
 8005628:	2102      	movs	r1, #2
 800562a:	5499      	strb	r1, [r3, r2]
 800562c:	e023      	b.n	8005676 <HAL_TIM_PWM_Start+0xf2>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b04      	cmp	r3, #4
 8005632:	d104      	bne.n	800563e <HAL_TIM_PWM_Start+0xba>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	223f      	movs	r2, #63	@ 0x3f
 8005638:	2102      	movs	r1, #2
 800563a:	5499      	strb	r1, [r3, r2]
 800563c:	e01b      	b.n	8005676 <HAL_TIM_PWM_Start+0xf2>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b08      	cmp	r3, #8
 8005642:	d104      	bne.n	800564e <HAL_TIM_PWM_Start+0xca>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2240      	movs	r2, #64	@ 0x40
 8005648:	2102      	movs	r1, #2
 800564a:	5499      	strb	r1, [r3, r2]
 800564c:	e013      	b.n	8005676 <HAL_TIM_PWM_Start+0xf2>
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b0c      	cmp	r3, #12
 8005652:	d104      	bne.n	800565e <HAL_TIM_PWM_Start+0xda>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2241      	movs	r2, #65	@ 0x41
 8005658:	2102      	movs	r1, #2
 800565a:	5499      	strb	r1, [r3, r2]
 800565c:	e00b      	b.n	8005676 <HAL_TIM_PWM_Start+0xf2>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b10      	cmp	r3, #16
 8005662:	d104      	bne.n	800566e <HAL_TIM_PWM_Start+0xea>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2242      	movs	r2, #66	@ 0x42
 8005668:	2102      	movs	r1, #2
 800566a:	5499      	strb	r1, [r3, r2]
 800566c:	e003      	b.n	8005676 <HAL_TIM_PWM_Start+0xf2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2243      	movs	r2, #67	@ 0x43
 8005672:	2102      	movs	r1, #2
 8005674:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6839      	ldr	r1, [r7, #0]
 800567c:	2201      	movs	r2, #1
 800567e:	0018      	movs	r0, r3
 8005680:	f000 fda6 	bl	80061d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a28      	ldr	r2, [pc, #160]	@ (800572c <HAL_TIM_PWM_Start+0x1a8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d009      	beq.n	80056a2 <HAL_TIM_PWM_Start+0x11e>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a27      	ldr	r2, [pc, #156]	@ (8005730 <HAL_TIM_PWM_Start+0x1ac>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d004      	beq.n	80056a2 <HAL_TIM_PWM_Start+0x11e>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a25      	ldr	r2, [pc, #148]	@ (8005734 <HAL_TIM_PWM_Start+0x1b0>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d101      	bne.n	80056a6 <HAL_TIM_PWM_Start+0x122>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <HAL_TIM_PWM_Start+0x124>
 80056a6:	2300      	movs	r3, #0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d008      	beq.n	80056be <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2180      	movs	r1, #128	@ 0x80
 80056b8:	0209      	lsls	r1, r1, #8
 80056ba:	430a      	orrs	r2, r1
 80056bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a1a      	ldr	r2, [pc, #104]	@ (800572c <HAL_TIM_PWM_Start+0x1a8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00a      	beq.n	80056de <HAL_TIM_PWM_Start+0x15a>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	2380      	movs	r3, #128	@ 0x80
 80056ce:	05db      	lsls	r3, r3, #23
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d004      	beq.n	80056de <HAL_TIM_PWM_Start+0x15a>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a17      	ldr	r2, [pc, #92]	@ (8005738 <HAL_TIM_PWM_Start+0x1b4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d116      	bne.n	800570c <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	4a15      	ldr	r2, [pc, #84]	@ (800573c <HAL_TIM_PWM_Start+0x1b8>)
 80056e6:	4013      	ands	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b06      	cmp	r3, #6
 80056ee:	d016      	beq.n	800571e <HAL_TIM_PWM_Start+0x19a>
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	2380      	movs	r3, #128	@ 0x80
 80056f4:	025b      	lsls	r3, r3, #9
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d011      	beq.n	800571e <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2101      	movs	r1, #1
 8005706:	430a      	orrs	r2, r1
 8005708:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570a:	e008      	b.n	800571e <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2101      	movs	r1, #1
 8005718:	430a      	orrs	r2, r1
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	e000      	b.n	8005720 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	0018      	movs	r0, r3
 8005724:	46bd      	mov	sp, r7
 8005726:	b004      	add	sp, #16
 8005728:	bd80      	pop	{r7, pc}
 800572a:	46c0      	nop			@ (mov r8, r8)
 800572c:	40012c00 	.word	0x40012c00
 8005730:	40014400 	.word	0x40014400
 8005734:	40014800 	.word	0x40014800
 8005738:	40000400 	.word	0x40000400
 800573c:	00010007 	.word	0x00010007

08005740 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2202      	movs	r2, #2
 800575c:	4013      	ands	r3, r2
 800575e:	d021      	beq.n	80057a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2202      	movs	r2, #2
 8005764:	4013      	ands	r3, r2
 8005766:	d01d      	beq.n	80057a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2203      	movs	r2, #3
 800576e:	4252      	negs	r2, r2
 8005770:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	2203      	movs	r2, #3
 8005780:	4013      	ands	r3, r2
 8005782:	d004      	beq.n	800578e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	0018      	movs	r0, r3
 8005788:	f000 f9ea 	bl	8005b60 <HAL_TIM_IC_CaptureCallback>
 800578c:	e007      	b.n	800579e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	0018      	movs	r0, r3
 8005792:	f000 f9dd 	bl	8005b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	0018      	movs	r0, r3
 800579a:	f000 f9e9 	bl	8005b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2204      	movs	r2, #4
 80057a8:	4013      	ands	r3, r2
 80057aa:	d022      	beq.n	80057f2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2204      	movs	r2, #4
 80057b0:	4013      	ands	r3, r2
 80057b2:	d01e      	beq.n	80057f2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2205      	movs	r2, #5
 80057ba:	4252      	negs	r2, r2
 80057bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2202      	movs	r2, #2
 80057c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	23c0      	movs	r3, #192	@ 0xc0
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4013      	ands	r3, r2
 80057d0:	d004      	beq.n	80057dc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	0018      	movs	r0, r3
 80057d6:	f000 f9c3 	bl	8005b60 <HAL_TIM_IC_CaptureCallback>
 80057da:	e007      	b.n	80057ec <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	0018      	movs	r0, r3
 80057e0:	f000 f9b6 	bl	8005b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	0018      	movs	r0, r3
 80057e8:	f000 f9c2 	bl	8005b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2208      	movs	r2, #8
 80057f6:	4013      	ands	r3, r2
 80057f8:	d021      	beq.n	800583e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2208      	movs	r2, #8
 80057fe:	4013      	ands	r3, r2
 8005800:	d01d      	beq.n	800583e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2209      	movs	r2, #9
 8005808:	4252      	negs	r2, r2
 800580a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2204      	movs	r2, #4
 8005810:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	2203      	movs	r2, #3
 800581a:	4013      	ands	r3, r2
 800581c:	d004      	beq.n	8005828 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	0018      	movs	r0, r3
 8005822:	f000 f99d 	bl	8005b60 <HAL_TIM_IC_CaptureCallback>
 8005826:	e007      	b.n	8005838 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	0018      	movs	r0, r3
 800582c:	f000 f990 	bl	8005b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	0018      	movs	r0, r3
 8005834:	f000 f99c 	bl	8005b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2210      	movs	r2, #16
 8005842:	4013      	ands	r3, r2
 8005844:	d022      	beq.n	800588c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2210      	movs	r2, #16
 800584a:	4013      	ands	r3, r2
 800584c:	d01e      	beq.n	800588c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2211      	movs	r2, #17
 8005854:	4252      	negs	r2, r2
 8005856:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2208      	movs	r2, #8
 800585c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69da      	ldr	r2, [r3, #28]
 8005864:	23c0      	movs	r3, #192	@ 0xc0
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4013      	ands	r3, r2
 800586a:	d004      	beq.n	8005876 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	0018      	movs	r0, r3
 8005870:	f000 f976 	bl	8005b60 <HAL_TIM_IC_CaptureCallback>
 8005874:	e007      	b.n	8005886 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	0018      	movs	r0, r3
 800587a:	f000 f969 	bl	8005b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	0018      	movs	r0, r3
 8005882:	f000 f975 	bl	8005b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2201      	movs	r2, #1
 8005890:	4013      	ands	r3, r2
 8005892:	d00c      	beq.n	80058ae <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2201      	movs	r2, #1
 8005898:	4013      	ands	r3, r2
 800589a:	d008      	beq.n	80058ae <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2202      	movs	r2, #2
 80058a2:	4252      	negs	r2, r2
 80058a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	0018      	movs	r0, r3
 80058aa:	f7fb fed9 	bl	8001660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2280      	movs	r2, #128	@ 0x80
 80058b2:	4013      	ands	r3, r2
 80058b4:	d104      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	2380      	movs	r3, #128	@ 0x80
 80058ba:	019b      	lsls	r3, r3, #6
 80058bc:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058be:	d00b      	beq.n	80058d8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2280      	movs	r2, #128	@ 0x80
 80058c4:	4013      	ands	r3, r2
 80058c6:	d007      	beq.n	80058d8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a1e      	ldr	r2, [pc, #120]	@ (8005948 <HAL_TIM_IRQHandler+0x208>)
 80058ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	0018      	movs	r0, r3
 80058d4:	f000 fd10 	bl	80062f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	2380      	movs	r3, #128	@ 0x80
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	4013      	ands	r3, r2
 80058e0:	d00b      	beq.n	80058fa <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2280      	movs	r2, #128	@ 0x80
 80058e6:	4013      	ands	r3, r2
 80058e8:	d007      	beq.n	80058fa <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a17      	ldr	r2, [pc, #92]	@ (800594c <HAL_TIM_IRQHandler+0x20c>)
 80058f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	0018      	movs	r0, r3
 80058f6:	f000 fd07 	bl	8006308 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2240      	movs	r2, #64	@ 0x40
 80058fe:	4013      	ands	r3, r2
 8005900:	d00c      	beq.n	800591c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2240      	movs	r2, #64	@ 0x40
 8005906:	4013      	ands	r3, r2
 8005908:	d008      	beq.n	800591c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2241      	movs	r2, #65	@ 0x41
 8005910:	4252      	negs	r2, r2
 8005912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	0018      	movs	r0, r3
 8005918:	f000 f932 	bl	8005b80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2220      	movs	r2, #32
 8005920:	4013      	ands	r3, r2
 8005922:	d00c      	beq.n	800593e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	4013      	ands	r3, r2
 800592a:	d008      	beq.n	800593e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2221      	movs	r2, #33	@ 0x21
 8005932:	4252      	negs	r2, r2
 8005934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	0018      	movs	r0, r3
 800593a:	f000 fcd5 	bl	80062e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800593e:	46c0      	nop			@ (mov r8, r8)
 8005940:	46bd      	mov	sp, r7
 8005942:	b004      	add	sp, #16
 8005944:	bd80      	pop	{r7, pc}
 8005946:	46c0      	nop			@ (mov r8, r8)
 8005948:	ffffdf7f 	.word	0xffffdf7f
 800594c:	fffffeff 	.word	0xfffffeff

08005950 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800595c:	2317      	movs	r3, #23
 800595e:	18fb      	adds	r3, r7, r3
 8005960:	2200      	movs	r2, #0
 8005962:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	223c      	movs	r2, #60	@ 0x3c
 8005968:	5c9b      	ldrb	r3, [r3, r2]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d101      	bne.n	8005972 <HAL_TIM_PWM_ConfigChannel+0x22>
 800596e:	2302      	movs	r3, #2
 8005970:	e0e5      	b.n	8005b3e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	223c      	movs	r2, #60	@ 0x3c
 8005976:	2101      	movs	r1, #1
 8005978:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b14      	cmp	r3, #20
 800597e:	d900      	bls.n	8005982 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005980:	e0d1      	b.n	8005b26 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	009a      	lsls	r2, r3, #2
 8005986:	4b70      	ldr	r3, [pc, #448]	@ (8005b48 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005988:	18d3      	adds	r3, r2, r3
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	0011      	movs	r1, r2
 8005996:	0018      	movs	r0, r3
 8005998:	f000 f97e 	bl	8005c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2108      	movs	r1, #8
 80059a8:	430a      	orrs	r2, r1
 80059aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2104      	movs	r1, #4
 80059b8:	438a      	bics	r2, r1
 80059ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6999      	ldr	r1, [r3, #24]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	691a      	ldr	r2, [r3, #16]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	619a      	str	r2, [r3, #24]
      break;
 80059ce:	e0af      	b.n	8005b30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	0011      	movs	r1, r2
 80059d8:	0018      	movs	r0, r3
 80059da:	f000 f9dd 	bl	8005d98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699a      	ldr	r2, [r3, #24]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2180      	movs	r1, #128	@ 0x80
 80059ea:	0109      	lsls	r1, r1, #4
 80059ec:	430a      	orrs	r2, r1
 80059ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699a      	ldr	r2, [r3, #24]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4954      	ldr	r1, [pc, #336]	@ (8005b4c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80059fc:	400a      	ands	r2, r1
 80059fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6999      	ldr	r1, [r3, #24]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	021a      	lsls	r2, r3, #8
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	619a      	str	r2, [r3, #24]
      break;
 8005a14:	e08c      	b.n	8005b30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	0011      	movs	r1, r2
 8005a1e:	0018      	movs	r0, r3
 8005a20:	f000 fa38 	bl	8005e94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69da      	ldr	r2, [r3, #28]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2108      	movs	r1, #8
 8005a30:	430a      	orrs	r2, r1
 8005a32:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	69da      	ldr	r2, [r3, #28]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2104      	movs	r1, #4
 8005a40:	438a      	bics	r2, r1
 8005a42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	69d9      	ldr	r1, [r3, #28]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	691a      	ldr	r2, [r3, #16]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	61da      	str	r2, [r3, #28]
      break;
 8005a56:	e06b      	b.n	8005b30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	0011      	movs	r1, r2
 8005a60:	0018      	movs	r0, r3
 8005a62:	f000 fa99 	bl	8005f98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69da      	ldr	r2, [r3, #28]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2180      	movs	r1, #128	@ 0x80
 8005a72:	0109      	lsls	r1, r1, #4
 8005a74:	430a      	orrs	r2, r1
 8005a76:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	69da      	ldr	r2, [r3, #28]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4932      	ldr	r1, [pc, #200]	@ (8005b4c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005a84:	400a      	ands	r2, r1
 8005a86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	69d9      	ldr	r1, [r3, #28]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	021a      	lsls	r2, r3, #8
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	61da      	str	r2, [r3, #28]
      break;
 8005a9c:	e048      	b.n	8005b30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	0011      	movs	r1, r2
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f000 fada 	bl	8006060 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2108      	movs	r1, #8
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2104      	movs	r1, #4
 8005ac8:	438a      	bics	r2, r1
 8005aca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	691a      	ldr	r2, [r3, #16]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005ade:	e027      	b.n	8005b30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	0011      	movs	r1, r2
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f000 fb13 	bl	8006114 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2180      	movs	r1, #128	@ 0x80
 8005afa:	0109      	lsls	r1, r1, #4
 8005afc:	430a      	orrs	r2, r1
 8005afe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4910      	ldr	r1, [pc, #64]	@ (8005b4c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005b0c:	400a      	ands	r2, r1
 8005b0e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	021a      	lsls	r2, r3, #8
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005b24:	e004      	b.n	8005b30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005b26:	2317      	movs	r3, #23
 8005b28:	18fb      	adds	r3, r7, r3
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	701a      	strb	r2, [r3, #0]
      break;
 8005b2e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	223c      	movs	r2, #60	@ 0x3c
 8005b34:	2100      	movs	r1, #0
 8005b36:	5499      	strb	r1, [r3, r2]

  return status;
 8005b38:	2317      	movs	r3, #23
 8005b3a:	18fb      	adds	r3, r7, r3
 8005b3c:	781b      	ldrb	r3, [r3, #0]
}
 8005b3e:	0018      	movs	r0, r3
 8005b40:	46bd      	mov	sp, r7
 8005b42:	b006      	add	sp, #24
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	46c0      	nop			@ (mov r8, r8)
 8005b48:	08006414 	.word	0x08006414
 8005b4c:	fffffbff 	.word	0xfffffbff

08005b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b58:	46c0      	nop			@ (mov r8, r8)
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	b002      	add	sp, #8
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b68:	46c0      	nop			@ (mov r8, r8)
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	b002      	add	sp, #8
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b78:	46c0      	nop			@ (mov r8, r8)
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	b002      	add	sp, #8
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b88:	46c0      	nop			@ (mov r8, r8)
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	b002      	add	sp, #8
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a37      	ldr	r2, [pc, #220]	@ (8005c80 <TIM_Base_SetConfig+0xf0>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d008      	beq.n	8005bba <TIM_Base_SetConfig+0x2a>
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	2380      	movs	r3, #128	@ 0x80
 8005bac:	05db      	lsls	r3, r3, #23
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d003      	beq.n	8005bba <TIM_Base_SetConfig+0x2a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a33      	ldr	r2, [pc, #204]	@ (8005c84 <TIM_Base_SetConfig+0xf4>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d108      	bne.n	8005bcc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2270      	movs	r2, #112	@ 0x70
 8005bbe:	4393      	bics	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a2c      	ldr	r2, [pc, #176]	@ (8005c80 <TIM_Base_SetConfig+0xf0>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d014      	beq.n	8005bfe <TIM_Base_SetConfig+0x6e>
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	2380      	movs	r3, #128	@ 0x80
 8005bd8:	05db      	lsls	r3, r3, #23
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d00f      	beq.n	8005bfe <TIM_Base_SetConfig+0x6e>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a28      	ldr	r2, [pc, #160]	@ (8005c84 <TIM_Base_SetConfig+0xf4>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00b      	beq.n	8005bfe <TIM_Base_SetConfig+0x6e>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a27      	ldr	r2, [pc, #156]	@ (8005c88 <TIM_Base_SetConfig+0xf8>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d007      	beq.n	8005bfe <TIM_Base_SetConfig+0x6e>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a26      	ldr	r2, [pc, #152]	@ (8005c8c <TIM_Base_SetConfig+0xfc>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d003      	beq.n	8005bfe <TIM_Base_SetConfig+0x6e>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a25      	ldr	r2, [pc, #148]	@ (8005c90 <TIM_Base_SetConfig+0x100>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d108      	bne.n	8005c10 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4a24      	ldr	r2, [pc, #144]	@ (8005c94 <TIM_Base_SetConfig+0x104>)
 8005c02:	4013      	ands	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2280      	movs	r2, #128	@ 0x80
 8005c14:	4393      	bics	r3, r2
 8005c16:	001a      	movs	r2, r3
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a11      	ldr	r2, [pc, #68]	@ (8005c80 <TIM_Base_SetConfig+0xf0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d007      	beq.n	8005c4e <TIM_Base_SetConfig+0xbe>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a12      	ldr	r2, [pc, #72]	@ (8005c8c <TIM_Base_SetConfig+0xfc>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d003      	beq.n	8005c4e <TIM_Base_SetConfig+0xbe>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a11      	ldr	r2, [pc, #68]	@ (8005c90 <TIM_Base_SetConfig+0x100>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d103      	bne.n	8005c56 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	2201      	movs	r2, #1
 8005c62:	4013      	ands	r3, r2
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d106      	bne.n	8005c76 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	4393      	bics	r3, r2
 8005c70:	001a      	movs	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	611a      	str	r2, [r3, #16]
  }
}
 8005c76:	46c0      	nop			@ (mov r8, r8)
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	b004      	add	sp, #16
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	46c0      	nop			@ (mov r8, r8)
 8005c80:	40012c00 	.word	0x40012c00
 8005c84:	40000400 	.word	0x40000400
 8005c88:	40002000 	.word	0x40002000
 8005c8c:	40014400 	.word	0x40014400
 8005c90:	40014800 	.word	0x40014800
 8005c94:	fffffcff 	.word	0xfffffcff

08005c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	2201      	movs	r2, #1
 8005cae:	4393      	bics	r3, r2
 8005cb0:	001a      	movs	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4a2e      	ldr	r2, [pc, #184]	@ (8005d80 <TIM_OC1_SetConfig+0xe8>)
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2203      	movs	r2, #3
 8005cce:	4393      	bics	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	4393      	bics	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a24      	ldr	r2, [pc, #144]	@ (8005d84 <TIM_OC1_SetConfig+0xec>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d007      	beq.n	8005d06 <TIM_OC1_SetConfig+0x6e>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a23      	ldr	r2, [pc, #140]	@ (8005d88 <TIM_OC1_SetConfig+0xf0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d003      	beq.n	8005d06 <TIM_OC1_SetConfig+0x6e>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a22      	ldr	r2, [pc, #136]	@ (8005d8c <TIM_OC1_SetConfig+0xf4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d10c      	bne.n	8005d20 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2208      	movs	r2, #8
 8005d0a:	4393      	bics	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	2204      	movs	r2, #4
 8005d1c:	4393      	bics	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a18      	ldr	r2, [pc, #96]	@ (8005d84 <TIM_OC1_SetConfig+0xec>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d007      	beq.n	8005d38 <TIM_OC1_SetConfig+0xa0>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a17      	ldr	r2, [pc, #92]	@ (8005d88 <TIM_OC1_SetConfig+0xf0>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_OC1_SetConfig+0xa0>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a16      	ldr	r2, [pc, #88]	@ (8005d8c <TIM_OC1_SetConfig+0xf4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d111      	bne.n	8005d5c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	4a15      	ldr	r2, [pc, #84]	@ (8005d90 <TIM_OC1_SetConfig+0xf8>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	4a14      	ldr	r2, [pc, #80]	@ (8005d94 <TIM_OC1_SetConfig+0xfc>)
 8005d44:	4013      	ands	r3, r2
 8005d46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	621a      	str	r2, [r3, #32]
}
 8005d76:	46c0      	nop			@ (mov r8, r8)
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	b006      	add	sp, #24
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	46c0      	nop			@ (mov r8, r8)
 8005d80:	fffeff8f 	.word	0xfffeff8f
 8005d84:	40012c00 	.word	0x40012c00
 8005d88:	40014400 	.word	0x40014400
 8005d8c:	40014800 	.word	0x40014800
 8005d90:	fffffeff 	.word	0xfffffeff
 8005d94:	fffffdff 	.word	0xfffffdff

08005d98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	2210      	movs	r2, #16
 8005dae:	4393      	bics	r3, r2
 8005db0:	001a      	movs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4a2c      	ldr	r2, [pc, #176]	@ (8005e78 <TIM_OC2_SetConfig+0xe0>)
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4a2b      	ldr	r2, [pc, #172]	@ (8005e7c <TIM_OC2_SetConfig+0xe4>)
 8005dce:	4013      	ands	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	021b      	lsls	r3, r3, #8
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2220      	movs	r2, #32
 8005de2:	4393      	bics	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a22      	ldr	r2, [pc, #136]	@ (8005e80 <TIM_OC2_SetConfig+0xe8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d10d      	bne.n	8005e16 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2280      	movs	r2, #128	@ 0x80
 8005dfe:	4393      	bics	r3, r2
 8005e00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2240      	movs	r2, #64	@ 0x40
 8005e12:	4393      	bics	r3, r2
 8005e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a19      	ldr	r2, [pc, #100]	@ (8005e80 <TIM_OC2_SetConfig+0xe8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d007      	beq.n	8005e2e <TIM_OC2_SetConfig+0x96>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a18      	ldr	r2, [pc, #96]	@ (8005e84 <TIM_OC2_SetConfig+0xec>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d003      	beq.n	8005e2e <TIM_OC2_SetConfig+0x96>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a17      	ldr	r2, [pc, #92]	@ (8005e88 <TIM_OC2_SetConfig+0xf0>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d113      	bne.n	8005e56 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	4a16      	ldr	r2, [pc, #88]	@ (8005e8c <TIM_OC2_SetConfig+0xf4>)
 8005e32:	4013      	ands	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	4a15      	ldr	r2, [pc, #84]	@ (8005e90 <TIM_OC2_SetConfig+0xf8>)
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	621a      	str	r2, [r3, #32]
}
 8005e70:	46c0      	nop			@ (mov r8, r8)
 8005e72:	46bd      	mov	sp, r7
 8005e74:	b006      	add	sp, #24
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	feff8fff 	.word	0xfeff8fff
 8005e7c:	fffffcff 	.word	0xfffffcff
 8005e80:	40012c00 	.word	0x40012c00
 8005e84:	40014400 	.word	0x40014400
 8005e88:	40014800 	.word	0x40014800
 8005e8c:	fffffbff 	.word	0xfffffbff
 8005e90:	fffff7ff 	.word	0xfffff7ff

08005e94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	4a31      	ldr	r2, [pc, #196]	@ (8005f70 <TIM_OC3_SetConfig+0xdc>)
 8005eaa:	401a      	ands	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4a2d      	ldr	r2, [pc, #180]	@ (8005f74 <TIM_OC3_SetConfig+0xe0>)
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2203      	movs	r2, #3
 8005ec8:	4393      	bics	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	4a27      	ldr	r2, [pc, #156]	@ (8005f78 <TIM_OC3_SetConfig+0xe4>)
 8005eda:	4013      	ands	r3, r2
 8005edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a23      	ldr	r2, [pc, #140]	@ (8005f7c <TIM_OC3_SetConfig+0xe8>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d10d      	bne.n	8005f0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	4a22      	ldr	r2, [pc, #136]	@ (8005f80 <TIM_OC3_SetConfig+0xec>)
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	021b      	lsls	r3, r3, #8
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	4a1e      	ldr	r2, [pc, #120]	@ (8005f84 <TIM_OC3_SetConfig+0xf0>)
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a1a      	ldr	r2, [pc, #104]	@ (8005f7c <TIM_OC3_SetConfig+0xe8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d007      	beq.n	8005f26 <TIM_OC3_SetConfig+0x92>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a1b      	ldr	r2, [pc, #108]	@ (8005f88 <TIM_OC3_SetConfig+0xf4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d003      	beq.n	8005f26 <TIM_OC3_SetConfig+0x92>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a1a      	ldr	r2, [pc, #104]	@ (8005f8c <TIM_OC3_SetConfig+0xf8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d113      	bne.n	8005f4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	4a19      	ldr	r2, [pc, #100]	@ (8005f90 <TIM_OC3_SetConfig+0xfc>)
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	4a18      	ldr	r2, [pc, #96]	@ (8005f94 <TIM_OC3_SetConfig+0x100>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	621a      	str	r2, [r3, #32]
}
 8005f68:	46c0      	nop			@ (mov r8, r8)
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b006      	add	sp, #24
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	fffffeff 	.word	0xfffffeff
 8005f74:	fffeff8f 	.word	0xfffeff8f
 8005f78:	fffffdff 	.word	0xfffffdff
 8005f7c:	40012c00 	.word	0x40012c00
 8005f80:	fffff7ff 	.word	0xfffff7ff
 8005f84:	fffffbff 	.word	0xfffffbff
 8005f88:	40014400 	.word	0x40014400
 8005f8c:	40014800 	.word	0x40014800
 8005f90:	ffffefff 	.word	0xffffefff
 8005f94:	ffffdfff 	.word	0xffffdfff

08005f98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	4a24      	ldr	r2, [pc, #144]	@ (8006040 <TIM_OC4_SetConfig+0xa8>)
 8005fae:	401a      	ands	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4a20      	ldr	r2, [pc, #128]	@ (8006044 <TIM_OC4_SetConfig+0xac>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4a1f      	ldr	r2, [pc, #124]	@ (8006048 <TIM_OC4_SetConfig+0xb0>)
 8005fcc:	4013      	ands	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	021b      	lsls	r3, r3, #8
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	4a1b      	ldr	r2, [pc, #108]	@ (800604c <TIM_OC4_SetConfig+0xb4>)
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	031b      	lsls	r3, r3, #12
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a17      	ldr	r2, [pc, #92]	@ (8006050 <TIM_OC4_SetConfig+0xb8>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d007      	beq.n	8006008 <TIM_OC4_SetConfig+0x70>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a16      	ldr	r2, [pc, #88]	@ (8006054 <TIM_OC4_SetConfig+0xbc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d003      	beq.n	8006008 <TIM_OC4_SetConfig+0x70>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a15      	ldr	r2, [pc, #84]	@ (8006058 <TIM_OC4_SetConfig+0xc0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d109      	bne.n	800601c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	4a14      	ldr	r2, [pc, #80]	@ (800605c <TIM_OC4_SetConfig+0xc4>)
 800600c:	4013      	ands	r3, r2
 800600e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	019b      	lsls	r3, r3, #6
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	4313      	orrs	r3, r2
 800601a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	621a      	str	r2, [r3, #32]
}
 8006036:	46c0      	nop			@ (mov r8, r8)
 8006038:	46bd      	mov	sp, r7
 800603a:	b006      	add	sp, #24
 800603c:	bd80      	pop	{r7, pc}
 800603e:	46c0      	nop			@ (mov r8, r8)
 8006040:	ffffefff 	.word	0xffffefff
 8006044:	feff8fff 	.word	0xfeff8fff
 8006048:	fffffcff 	.word	0xfffffcff
 800604c:	ffffdfff 	.word	0xffffdfff
 8006050:	40012c00 	.word	0x40012c00
 8006054:	40014400 	.word	0x40014400
 8006058:	40014800 	.word	0x40014800
 800605c:	ffffbfff 	.word	0xffffbfff

08006060 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	4a21      	ldr	r2, [pc, #132]	@ (80060fc <TIM_OC5_SetConfig+0x9c>)
 8006076:	401a      	ands	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4a1d      	ldr	r2, [pc, #116]	@ (8006100 <TIM_OC5_SetConfig+0xa0>)
 800608c:	4013      	ands	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	4a19      	ldr	r2, [pc, #100]	@ (8006104 <TIM_OC5_SetConfig+0xa4>)
 800609e:	4013      	ands	r3, r2
 80060a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	041b      	lsls	r3, r3, #16
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a15      	ldr	r2, [pc, #84]	@ (8006108 <TIM_OC5_SetConfig+0xa8>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d007      	beq.n	80060c6 <TIM_OC5_SetConfig+0x66>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a14      	ldr	r2, [pc, #80]	@ (800610c <TIM_OC5_SetConfig+0xac>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d003      	beq.n	80060c6 <TIM_OC5_SetConfig+0x66>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a13      	ldr	r2, [pc, #76]	@ (8006110 <TIM_OC5_SetConfig+0xb0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d109      	bne.n	80060da <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	4a0c      	ldr	r2, [pc, #48]	@ (80060fc <TIM_OC5_SetConfig+0x9c>)
 80060ca:	4013      	ands	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	021b      	lsls	r3, r3, #8
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	621a      	str	r2, [r3, #32]
}
 80060f4:	46c0      	nop			@ (mov r8, r8)
 80060f6:	46bd      	mov	sp, r7
 80060f8:	b006      	add	sp, #24
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	fffeffff 	.word	0xfffeffff
 8006100:	fffeff8f 	.word	0xfffeff8f
 8006104:	fffdffff 	.word	0xfffdffff
 8006108:	40012c00 	.word	0x40012c00
 800610c:	40014400 	.word	0x40014400
 8006110:	40014800 	.word	0x40014800

08006114 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	4a22      	ldr	r2, [pc, #136]	@ (80061b4 <TIM_OC6_SetConfig+0xa0>)
 800612a:	401a      	ands	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4a1e      	ldr	r2, [pc, #120]	@ (80061b8 <TIM_OC6_SetConfig+0xa4>)
 8006140:	4013      	ands	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	021b      	lsls	r3, r3, #8
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4a1a      	ldr	r2, [pc, #104]	@ (80061bc <TIM_OC6_SetConfig+0xa8>)
 8006154:	4013      	ands	r3, r2
 8006156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	051b      	lsls	r3, r3, #20
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a16      	ldr	r2, [pc, #88]	@ (80061c0 <TIM_OC6_SetConfig+0xac>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d007      	beq.n	800617c <TIM_OC6_SetConfig+0x68>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a15      	ldr	r2, [pc, #84]	@ (80061c4 <TIM_OC6_SetConfig+0xb0>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d003      	beq.n	800617c <TIM_OC6_SetConfig+0x68>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a14      	ldr	r2, [pc, #80]	@ (80061c8 <TIM_OC6_SetConfig+0xb4>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d109      	bne.n	8006190 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	4a13      	ldr	r2, [pc, #76]	@ (80061cc <TIM_OC6_SetConfig+0xb8>)
 8006180:	4013      	ands	r3, r2
 8006182:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	029b      	lsls	r3, r3, #10
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	46c0      	nop			@ (mov r8, r8)
 80061ac:	46bd      	mov	sp, r7
 80061ae:	b006      	add	sp, #24
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	46c0      	nop			@ (mov r8, r8)
 80061b4:	ffefffff 	.word	0xffefffff
 80061b8:	feff8fff 	.word	0xfeff8fff
 80061bc:	ffdfffff 	.word	0xffdfffff
 80061c0:	40012c00 	.word	0x40012c00
 80061c4:	40014400 	.word	0x40014400
 80061c8:	40014800 	.word	0x40014800
 80061cc:	fffbffff 	.word	0xfffbffff

080061d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	221f      	movs	r2, #31
 80061e0:	4013      	ands	r3, r2
 80061e2:	2201      	movs	r2, #1
 80061e4:	409a      	lsls	r2, r3
 80061e6:	0013      	movs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	43d2      	mvns	r2, r2
 80061f2:	401a      	ands	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a1a      	ldr	r2, [r3, #32]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	211f      	movs	r1, #31
 8006200:	400b      	ands	r3, r1
 8006202:	6879      	ldr	r1, [r7, #4]
 8006204:	4099      	lsls	r1, r3
 8006206:	000b      	movs	r3, r1
 8006208:	431a      	orrs	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	621a      	str	r2, [r3, #32]
}
 800620e:	46c0      	nop			@ (mov r8, r8)
 8006210:	46bd      	mov	sp, r7
 8006212:	b006      	add	sp, #24
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	223c      	movs	r2, #60	@ 0x3c
 8006226:	5c9b      	ldrb	r3, [r3, r2]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800622c:	2302      	movs	r3, #2
 800622e:	e050      	b.n	80062d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	223c      	movs	r2, #60	@ 0x3c
 8006234:	2101      	movs	r1, #1
 8006236:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	223d      	movs	r2, #61	@ 0x3d
 800623c:	2102      	movs	r1, #2
 800623e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a21      	ldr	r2, [pc, #132]	@ (80062dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d108      	bne.n	800626c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4a20      	ldr	r2, [pc, #128]	@ (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800625e:	4013      	ands	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2270      	movs	r2, #112	@ 0x70
 8006270:	4393      	bics	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a14      	ldr	r2, [pc, #80]	@ (80062dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d00a      	beq.n	80062a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	2380      	movs	r3, #128	@ 0x80
 8006296:	05db      	lsls	r3, r3, #23
 8006298:	429a      	cmp	r2, r3
 800629a:	d004      	beq.n	80062a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a10      	ldr	r2, [pc, #64]	@ (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d10c      	bne.n	80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2280      	movs	r2, #128	@ 0x80
 80062aa:	4393      	bics	r3, r2
 80062ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	223d      	movs	r2, #61	@ 0x3d
 80062c4:	2101      	movs	r1, #1
 80062c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	223c      	movs	r2, #60	@ 0x3c
 80062cc:	2100      	movs	r1, #0
 80062ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	0018      	movs	r0, r3
 80062d4:	46bd      	mov	sp, r7
 80062d6:	b004      	add	sp, #16
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	46c0      	nop			@ (mov r8, r8)
 80062dc:	40012c00 	.word	0x40012c00
 80062e0:	ff0fffff 	.word	0xff0fffff
 80062e4:	40000400 	.word	0x40000400

080062e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062f0:	46c0      	nop			@ (mov r8, r8)
 80062f2:	46bd      	mov	sp, r7
 80062f4:	b002      	add	sp, #8
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006300:	46c0      	nop			@ (mov r8, r8)
 8006302:	46bd      	mov	sp, r7
 8006304:	b002      	add	sp, #8
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006310:	46c0      	nop			@ (mov r8, r8)
 8006312:	46bd      	mov	sp, r7
 8006314:	b002      	add	sp, #8
 8006316:	bd80      	pop	{r7, pc}

08006318 <memset>:
 8006318:	0003      	movs	r3, r0
 800631a:	1882      	adds	r2, r0, r2
 800631c:	4293      	cmp	r3, r2
 800631e:	d100      	bne.n	8006322 <memset+0xa>
 8006320:	4770      	bx	lr
 8006322:	7019      	strb	r1, [r3, #0]
 8006324:	3301      	adds	r3, #1
 8006326:	e7f9      	b.n	800631c <memset+0x4>

08006328 <__libc_init_array>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	2600      	movs	r6, #0
 800632c:	4c0c      	ldr	r4, [pc, #48]	@ (8006360 <__libc_init_array+0x38>)
 800632e:	4d0d      	ldr	r5, [pc, #52]	@ (8006364 <__libc_init_array+0x3c>)
 8006330:	1b64      	subs	r4, r4, r5
 8006332:	10a4      	asrs	r4, r4, #2
 8006334:	42a6      	cmp	r6, r4
 8006336:	d109      	bne.n	800634c <__libc_init_array+0x24>
 8006338:	2600      	movs	r6, #0
 800633a:	f000 f823 	bl	8006384 <_init>
 800633e:	4c0a      	ldr	r4, [pc, #40]	@ (8006368 <__libc_init_array+0x40>)
 8006340:	4d0a      	ldr	r5, [pc, #40]	@ (800636c <__libc_init_array+0x44>)
 8006342:	1b64      	subs	r4, r4, r5
 8006344:	10a4      	asrs	r4, r4, #2
 8006346:	42a6      	cmp	r6, r4
 8006348:	d105      	bne.n	8006356 <__libc_init_array+0x2e>
 800634a:	bd70      	pop	{r4, r5, r6, pc}
 800634c:	00b3      	lsls	r3, r6, #2
 800634e:	58eb      	ldr	r3, [r5, r3]
 8006350:	4798      	blx	r3
 8006352:	3601      	adds	r6, #1
 8006354:	e7ee      	b.n	8006334 <__libc_init_array+0xc>
 8006356:	00b3      	lsls	r3, r6, #2
 8006358:	58eb      	ldr	r3, [r5, r3]
 800635a:	4798      	blx	r3
 800635c:	3601      	adds	r6, #1
 800635e:	e7f2      	b.n	8006346 <__libc_init_array+0x1e>
 8006360:	08006468 	.word	0x08006468
 8006364:	08006468 	.word	0x08006468
 8006368:	0800646c 	.word	0x0800646c
 800636c:	08006468 	.word	0x08006468

08006370 <memcpy>:
 8006370:	2300      	movs	r3, #0
 8006372:	b510      	push	{r4, lr}
 8006374:	429a      	cmp	r2, r3
 8006376:	d100      	bne.n	800637a <memcpy+0xa>
 8006378:	bd10      	pop	{r4, pc}
 800637a:	5ccc      	ldrb	r4, [r1, r3]
 800637c:	54c4      	strb	r4, [r0, r3]
 800637e:	3301      	adds	r3, #1
 8006380:	e7f8      	b.n	8006374 <memcpy+0x4>
	...

08006384 <_init>:
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006386:	46c0      	nop			@ (mov r8, r8)
 8006388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638a:	bc08      	pop	{r3}
 800638c:	469e      	mov	lr, r3
 800638e:	4770      	bx	lr

08006390 <_fini>:
 8006390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006392:	46c0      	nop			@ (mov r8, r8)
 8006394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006396:	bc08      	pop	{r3}
 8006398:	469e      	mov	lr, r3
 800639a:	4770      	bx	lr
