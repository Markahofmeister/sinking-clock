
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c9c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005d58  08005d58  00006d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e1c  08005e1c  00007050  2**0
                  CONTENTS
  4 .ARM          00000000  08005e1c  08005e1c  00007050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e1c  08005e1c  00007050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e1c  08005e1c  00006e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e20  08005e20  00006e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08005e24  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000050  08005e74  00007050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08005e74  00007228  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a35  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db4  00000000  00000000  0001aaad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0001d868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f85  00000000  00000000  0001ec60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193b0  00000000  00000000  0001fbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181ee  00000000  00000000  00038f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a17fb  00000000  00000000  00051183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f297e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048a0  00000000  00000000  000f29c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000f7264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000050 	.word	0x20000050
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005d40 	.word	0x08005d40

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000054 	.word	0x20000054
 8000100:	08005d40 	.word	0x08005d40

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:
 */

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, uint8_t keyEnFlags) {
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	b087      	sub	sp, #28
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	2517      	movs	r5, #23
 800022c:	197b      	adds	r3, r7, r5
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	// Verify device ID
	uint8_t deviceIDRet = 0x00;
 8000238:	2616      	movs	r6, #22
 800023a:	19bb      	adds	r3, r7, r6
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]
	halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 8000240:	197c      	adds	r4, r7, r5
 8000242:	19ba      	adds	r2, r7, r6
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	0011      	movs	r1, r2
 8000248:	0018      	movs	r0, r3
 800024a:	f000 f84b 	bl	80002e4 <capTouch_ReadDeviceID>
 800024e:	0003      	movs	r3, r0
 8000250:	7023      	strb	r3, [r4, #0]

	if(deviceIDRet != DEVICE_ID || halRet != HAL_OK) {
 8000252:	19bb      	adds	r3, r7, r6
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b2e      	cmp	r3, #46	@ 0x2e
 8000258:	d103      	bne.n	8000262 <capTouch_Init+0x46>
 800025a:	197b      	adds	r3, r7, r5
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <capTouch_Init+0x4a>
		return 1;
 8000262:	2301      	movs	r3, #1
 8000264:	e039      	b.n	80002da <capTouch_Init+0xbe>
	}

	capTouch->deviceID = deviceIDRet;
 8000266:	2316      	movs	r3, #22
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	781a      	ldrb	r2, [r3, #0]
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	711a      	strb	r2, [r3, #4]

	// Force Device Recalibration
	halRet = capTouch_Recalibrate(capTouch);
 8000270:	2517      	movs	r5, #23
 8000272:	197c      	adds	r4, r7, r5
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	0018      	movs	r0, r3
 8000278:	f000 f86c 	bl	8000354 <capTouch_Recalibrate>
 800027c:	0003      	movs	r3, r0
 800027e:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000280:	197b      	adds	r3, r7, r5
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <capTouch_Init+0x70>
		return 2;
 8000288:	2302      	movs	r3, #2
 800028a:	e026      	b.n	80002da <capTouch_Init+0xbe>
	}

	// Wait until calibration sequence completes
	while(capTouch_checkCal(capTouch)) {}
 800028c:	46c0      	nop			@ (mov r8, r8)
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	0018      	movs	r0, r3
 8000292:	f000 f881 	bl	8000398 <capTouch_checkCal>
 8000296:	1e03      	subs	r3, r0, #0
 8000298:	d1f9      	bne.n	800028e <capTouch_Init+0x72>

	// Get initial reading of channels
	uint8_t keyStatus = 0x00;
 800029a:	2115      	movs	r1, #21
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2200      	movs	r2, #0
 80002a0:	701a      	strb	r2, [r3, #0]
	halRet = capTouch_readChannels(capTouch, &keyStatus);
 80002a2:	2517      	movs	r5, #23
 80002a4:	197c      	adds	r4, r7, r5
 80002a6:	187a      	adds	r2, r7, r1
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	0011      	movs	r1, r2
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 f8af 	bl	8000410 <capTouch_readChannels>
 80002b2:	0003      	movs	r3, r0
 80002b4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 80002b6:	197b      	adds	r3, r7, r5
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <capTouch_Init+0xa6>
		return 3;
 80002be:	2303      	movs	r3, #3
 80002c0:	e00b      	b.n	80002da <capTouch_Init+0xbe>
	}

	halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80002c2:	2317      	movs	r3, #23
 80002c4:	18fc      	adds	r4, r7, r3
 80002c6:	1dfb      	adds	r3, r7, #7
 80002c8:	781a      	ldrb	r2, [r3, #0]
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	0011      	movs	r1, r2
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 f8d6 	bl	8000480 <capTouch_enableKeys>
 80002d4:	0003      	movs	r3, r0
 80002d6:	7023      	strb	r3, [r4, #0]

	return 0;
 80002d8:	2300      	movs	r3, #0

}
 80002da:	0018      	movs	r0, r3
 80002dc:	46bd      	mov	sp, r7
 80002de:	b007      	add	sp, #28
 80002e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080002e4 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 80002e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e6:	b087      	sub	sp, #28
 80002e8:	af02      	add	r7, sp, #8
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 80002ee:	260e      	movs	r6, #14
 80002f0:	19bb      	adds	r3, r7, r6
 80002f2:	2200      	movs	r2, #0
 80002f4:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80002f6:	250f      	movs	r5, #15
 80002f8:	197b      	adds	r3, r7, r5
 80002fa:	2200      	movs	r2, #0
 80002fc:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 80002fe:	210c      	movs	r1, #12
 8000300:	187b      	adds	r3, r7, r1
 8000302:	4a13      	ldr	r2, [pc, #76]	@ (8000350 <capTouch_ReadDeviceID+0x6c>)
 8000304:	7812      	ldrb	r2, [r2, #0]
 8000306:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	6818      	ldr	r0, [r3, #0]
 800030c:	197c      	adds	r4, r7, r5
 800030e:	187a      	adds	r2, r7, r1
 8000310:	2301      	movs	r3, #1
 8000312:	425b      	negs	r3, r3
 8000314:	9300      	str	r3, [sp, #0]
 8000316:	2301      	movs	r3, #1
 8000318:	2136      	movs	r1, #54	@ 0x36
 800031a:	f002 fce9 	bl	8002cf0 <HAL_I2C_Master_Transmit>
 800031e:	0003      	movs	r3, r0
 8000320:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	6818      	ldr	r0, [r3, #0]
 8000326:	197c      	adds	r4, r7, r5
 8000328:	19ba      	adds	r2, r7, r6
 800032a:	2301      	movs	r3, #1
 800032c:	425b      	negs	r3, r3
 800032e:	9300      	str	r3, [sp, #0]
 8000330:	2301      	movs	r3, #1
 8000332:	2136      	movs	r1, #54	@ 0x36
 8000334:	f002 fe06 	bl	8002f44 <HAL_I2C_Master_Receive>
 8000338:	0003      	movs	r3, r0
 800033a:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 800033c:	19bb      	adds	r3, r7, r6
 800033e:	781a      	ldrb	r2, [r3, #0]
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000344:	197b      	adds	r3, r7, r5
 8000346:	781b      	ldrb	r3, [r3, #0]

}
 8000348:	0018      	movs	r0, r3
 800034a:	46bd      	mov	sp, r7
 800034c:	b005      	add	sp, #20
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	08005d58 	.word	0x08005d58

08000354 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 8000354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000356:	b087      	sub	sp, #28
 8000358:	af02      	add	r7, sp, #8
 800035a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800035c:	210f      	movs	r1, #15
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2200      	movs	r2, #0
 8000362:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 8000364:	260c      	movs	r6, #12
 8000366:	19bb      	adds	r3, r7, r6
 8000368:	22c8      	movs	r2, #200	@ 0xc8
 800036a:	4252      	negs	r2, r2
 800036c:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	6818      	ldr	r0, [r3, #0]
 8000372:	000d      	movs	r5, r1
 8000374:	187c      	adds	r4, r7, r1
 8000376:	19ba      	adds	r2, r7, r6
 8000378:	2301      	movs	r3, #1
 800037a:	425b      	negs	r3, r3
 800037c:	9300      	str	r3, [sp, #0]
 800037e:	2302      	movs	r3, #2
 8000380:	2136      	movs	r1, #54	@ 0x36
 8000382:	f002 fcb5 	bl	8002cf0 <HAL_I2C_Master_Transmit>
 8000386:	0003      	movs	r3, r0
 8000388:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 800038a:	197b      	adds	r3, r7, r5
 800038c:	781b      	ldrb	r3, [r3, #0]

}
 800038e:	0018      	movs	r0, r3
 8000390:	46bd      	mov	sp, r7
 8000392:	b005      	add	sp, #20
 8000394:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000398 <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 8000398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800039a:	b087      	sub	sp, #28
 800039c:	af02      	add	r7, sp, #8
 800039e:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80003a0:	210f      	movs	r1, #15
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	2200      	movs	r2, #0
 80003a6:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80003a8:	260d      	movs	r6, #13
 80003aa:	19bb      	adds	r3, r7, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 80003b0:	230c      	movs	r3, #12
 80003b2:	18fb      	adds	r3, r7, r3
 80003b4:	4a15      	ldr	r2, [pc, #84]	@ (800040c <capTouch_checkCal+0x74>)
 80003b6:	7812      	ldrb	r2, [r2, #0]
 80003b8:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	6818      	ldr	r0, [r3, #0]
 80003be:	000d      	movs	r5, r1
 80003c0:	187c      	adds	r4, r7, r1
 80003c2:	230c      	movs	r3, #12
 80003c4:	18fa      	adds	r2, r7, r3
 80003c6:	2301      	movs	r3, #1
 80003c8:	425b      	negs	r3, r3
 80003ca:	9300      	str	r3, [sp, #0]
 80003cc:	2301      	movs	r3, #1
 80003ce:	2136      	movs	r1, #54	@ 0x36
 80003d0:	f002 fc8e 	bl	8002cf0 <HAL_I2C_Master_Transmit>
 80003d4:	0003      	movs	r3, r0
 80003d6:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	6818      	ldr	r0, [r3, #0]
 80003dc:	197c      	adds	r4, r7, r5
 80003de:	19ba      	adds	r2, r7, r6
 80003e0:	2301      	movs	r3, #1
 80003e2:	425b      	negs	r3, r3
 80003e4:	9300      	str	r3, [sp, #0]
 80003e6:	2301      	movs	r3, #1
 80003e8:	2136      	movs	r1, #54	@ 0x36
 80003ea:	f002 fdab 	bl	8002f44 <HAL_I2C_Master_Receive>
 80003ee:	0003      	movs	r3, r0
 80003f0:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 80003f2:	19bb      	adds	r3, r7, r6
 80003f4:	781a      	ldrb	r2, [r3, #0]
 80003f6:	210e      	movs	r1, #14
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	09d2      	lsrs	r2, r2, #7
 80003fc:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	781b      	ldrb	r3, [r3, #0]

}
 8000402:	0018      	movs	r0, r3
 8000404:	46bd      	mov	sp, r7
 8000406:	b005      	add	sp, #20
 8000408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)
 800040c:	08005d5c 	.word	0x08005d5c

08000410 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch, uint8_t *dataBuff) {
 8000410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000412:	b087      	sub	sp, #28
 8000414:	af02      	add	r7, sp, #8
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800041a:	250f      	movs	r5, #15
 800041c:	197b      	adds	r3, r7, r5
 800041e:	2200      	movs	r2, #0
 8000420:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000422:	260e      	movs	r6, #14
 8000424:	19bb      	adds	r3, r7, r6
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800042a:	210c      	movs	r1, #12
 800042c:	187b      	adds	r3, r7, r1
 800042e:	4a13      	ldr	r2, [pc, #76]	@ (800047c <capTouch_readChannels+0x6c>)
 8000430:	7812      	ldrb	r2, [r2, #0]
 8000432:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	6818      	ldr	r0, [r3, #0]
 8000438:	197c      	adds	r4, r7, r5
 800043a:	187a      	adds	r2, r7, r1
 800043c:	2301      	movs	r3, #1
 800043e:	425b      	negs	r3, r3
 8000440:	9300      	str	r3, [sp, #0]
 8000442:	2301      	movs	r3, #1
 8000444:	2136      	movs	r1, #54	@ 0x36
 8000446:	f002 fc53 	bl	8002cf0 <HAL_I2C_Master_Transmit>
 800044a:	0003      	movs	r3, r0
 800044c:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	6818      	ldr	r0, [r3, #0]
 8000452:	197c      	adds	r4, r7, r5
 8000454:	19ba      	adds	r2, r7, r6
 8000456:	2301      	movs	r3, #1
 8000458:	425b      	negs	r3, r3
 800045a:	9300      	str	r3, [sp, #0]
 800045c:	2301      	movs	r3, #1
 800045e:	2136      	movs	r1, #54	@ 0x36
 8000460:	f002 fd70 	bl	8002f44 <HAL_I2C_Master_Receive>
 8000464:	0003      	movs	r3, r0
 8000466:	7023      	strb	r3, [r4, #0]

	*dataBuff = keyStatusRet;
 8000468:	19bb      	adds	r3, r7, r6
 800046a:	781a      	ldrb	r2, [r3, #0]
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000470:	197b      	adds	r3, r7, r5
 8000472:	781b      	ldrb	r3, [r3, #0]

}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b005      	add	sp, #20
 800047a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800047c:	08005d60 	.word	0x08005d60

08000480 <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	b08b      	sub	sp, #44	@ 0x2c
 8000484:	af02      	add	r7, sp, #8
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	000a      	movs	r2, r1
 800048a:	1cfb      	adds	r3, r7, #3
 800048c:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800048e:	241e      	movs	r4, #30
 8000490:	193b      	adds	r3, r7, r4
 8000492:	2200      	movs	r2, #0
 8000494:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000496:	2614      	movs	r6, #20
 8000498:	19bb      	adds	r3, r7, r6
 800049a:	4a48      	ldr	r2, [pc, #288]	@ (80005bc <capTouch_enableKeys+0x13c>)
 800049c:	6811      	ldr	r1, [r2, #0]
 800049e:	6019      	str	r1, [r3, #0]
 80004a0:	8891      	ldrh	r1, [r2, #4]
 80004a2:	8099      	strh	r1, [r3, #4]
 80004a4:	7992      	ldrb	r2, [r2, #6]
 80004a6:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 80004a8:	230c      	movs	r3, #12
 80004aa:	18fb      	adds	r3, r7, r3
 80004ac:	4a44      	ldr	r2, [pc, #272]	@ (80005c0 <capTouch_enableKeys+0x140>)
 80004ae:	6811      	ldr	r1, [r2, #0]
 80004b0:	6019      	str	r1, [r3, #0]
 80004b2:	8891      	ldrh	r1, [r2, #4]
 80004b4:	8099      	strh	r1, [r3, #4]
 80004b6:	7992      	ldrb	r2, [r2, #6]
 80004b8:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6818      	ldr	r0, [r3, #0]
 80004be:	0025      	movs	r5, r4
 80004c0:	193c      	adds	r4, r7, r4
 80004c2:	230c      	movs	r3, #12
 80004c4:	18fa      	adds	r2, r7, r3
 80004c6:	2301      	movs	r3, #1
 80004c8:	425b      	negs	r3, r3
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2301      	movs	r3, #1
 80004ce:	2136      	movs	r1, #54	@ 0x36
 80004d0:	f002 fc0e 	bl	8002cf0 <HAL_I2C_Master_Transmit>
 80004d4:	0003      	movs	r3, r0
 80004d6:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	6818      	ldr	r0, [r3, #0]
 80004dc:	197c      	adds	r4, r7, r5
 80004de:	19ba      	adds	r2, r7, r6
 80004e0:	2301      	movs	r3, #1
 80004e2:	425b      	negs	r3, r3
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2307      	movs	r3, #7
 80004e8:	2136      	movs	r1, #54	@ 0x36
 80004ea:	f002 fd2b 	bl	8002f44 <HAL_I2C_Master_Receive>
 80004ee:	0003      	movs	r3, r0
 80004f0:	7023      	strb	r3, [r4, #0]
	 * Populate new register values
	 * Enabled channels will be set with its previous averaging value,
	 * Disabled channels will have an averaging value of 0.
	 */
	uint8_t avgNew, i;
	uint8_t avgRegNew[2] = {0x00, 0x00};
 80004f2:	2308      	movs	r3, #8
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	2200      	movs	r2, #0
 80004f8:	801a      	strh	r2, [r3, #0]

	for(i = 0; i <= 6; i++) {
 80004fa:	231f      	movs	r3, #31
 80004fc:	18fb      	adds	r3, r7, r3
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
 8000502:	e032      	b.n	800056a <capTouch_enableKeys+0xea>

		avgNew = avgRet[i] * ((dataBuff >> i) & 0b00000001);
 8000504:	251f      	movs	r5, #31
 8000506:	197b      	adds	r3, r7, r5
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2214      	movs	r2, #20
 800050c:	18ba      	adds	r2, r7, r2
 800050e:	5cd2      	ldrb	r2, [r2, r3]
 8000510:	1cfb      	adds	r3, r7, #3
 8000512:	7819      	ldrb	r1, [r3, #0]
 8000514:	197b      	adds	r3, r7, r5
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	4119      	asrs	r1, r3
 800051a:	000b      	movs	r3, r1
 800051c:	b2db      	uxtb	r3, r3
 800051e:	2101      	movs	r1, #1
 8000520:	400b      	ands	r3, r1
 8000522:	b2d9      	uxtb	r1, r3
 8000524:	201d      	movs	r0, #29
 8000526:	183b      	adds	r3, r7, r0
 8000528:	434a      	muls	r2, r1
 800052a:	701a      	strb	r2, [r3, #0]

		avgRegNew[0] = avgRegs[i];
 800052c:	197b      	adds	r3, r7, r5
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	220c      	movs	r2, #12
 8000532:	18ba      	adds	r2, r7, r2
 8000534:	5cd2      	ldrb	r2, [r2, r3]
 8000536:	2108      	movs	r1, #8
 8000538:	187b      	adds	r3, r7, r1
 800053a:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	183a      	adds	r2, r7, r0
 8000540:	7812      	ldrb	r2, [r2, #0]
 8000542:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	6818      	ldr	r0, [r3, #0]
 8000548:	231e      	movs	r3, #30
 800054a:	18fc      	adds	r4, r7, r3
 800054c:	187a      	adds	r2, r7, r1
 800054e:	2301      	movs	r3, #1
 8000550:	425b      	negs	r3, r3
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	2302      	movs	r3, #2
 8000556:	2136      	movs	r1, #54	@ 0x36
 8000558:	f002 fbca 	bl	8002cf0 <HAL_I2C_Master_Transmit>
 800055c:	0003      	movs	r3, r0
 800055e:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 8000560:	197b      	adds	r3, r7, r5
 8000562:	781a      	ldrb	r2, [r3, #0]
 8000564:	197b      	adds	r3, r7, r5
 8000566:	3201      	adds	r2, #1
 8000568:	701a      	strb	r2, [r3, #0]
 800056a:	231f      	movs	r3, #31
 800056c:	18fb      	adds	r3, r7, r3
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b06      	cmp	r3, #6
 8000572:	d9c7      	bls.n	8000504 <capTouch_enableKeys+0x84>
									avgRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	6818      	ldr	r0, [r3, #0]
 8000578:	251e      	movs	r5, #30
 800057a:	197c      	adds	r4, r7, r5
 800057c:	230c      	movs	r3, #12
 800057e:	18fa      	adds	r2, r7, r3
 8000580:	2301      	movs	r3, #1
 8000582:	425b      	negs	r3, r3
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2301      	movs	r3, #1
 8000588:	2136      	movs	r1, #54	@ 0x36
 800058a:	f002 fbb1 	bl	8002cf0 <HAL_I2C_Master_Transmit>
 800058e:	0003      	movs	r3, r0
 8000590:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	6818      	ldr	r0, [r3, #0]
 8000596:	197c      	adds	r4, r7, r5
 8000598:	2314      	movs	r3, #20
 800059a:	18fa      	adds	r2, r7, r3
 800059c:	2301      	movs	r3, #1
 800059e:	425b      	negs	r3, r3
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2307      	movs	r3, #7
 80005a4:	2136      	movs	r1, #54	@ 0x36
 80005a6:	f002 fccd 	bl	8002f44 <HAL_I2C_Master_Receive>
 80005aa:	0003      	movs	r3, r0
 80005ac:	7023      	strb	r3, [r4, #0]

	return halRet;
 80005ae:	197b      	adds	r3, r7, r5
 80005b0:	781b      	ldrb	r3, [r3, #0]

}
 80005b2:	0018      	movs	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b009      	add	sp, #36	@ 0x24
 80005b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ba:	46c0      	nop			@ (mov r8, r8)
 80005bc:	08005d64 	.word	0x08005d64
 80005c0:	08005d6c 	.word	0x08005d6c

080005c4 <getRTCTime>:
				internalAlarm_initTest.AlarmTime.Minutes, internalAlarm_initTest.AlarmTime.Seconds);
	}

}

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 80005d0:	68b9      	ldr	r1, [r7, #8]
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	2200      	movs	r2, #0
 80005d6:	0018      	movs	r0, r3
 80005d8:	f004 f8de 	bl	8004798 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 80005dc:	6879      	ldr	r1, [r7, #4]
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	2200      	movs	r2, #0
 80005e2:	0018      	movs	r0, r3
 80005e4:	f004 f9c6 	bl	8004974 <HAL_RTC_GetDate>

}
 80005e8:	46c0      	nop			@ (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b004      	add	sp, #16
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005f2:	b08b      	sub	sp, #44	@ 0x2c
 80005f4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f001 fb05 	bl	8001c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f85f 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 faaf 	bl	8000b60 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000602:	f000 f8c7 	bl	8000794 <MX_ADC1_Init>
  MX_RTC_Init();
 8000606:	f000 f971 	bl	80008ec <MX_RTC_Init>
  MX_I2C1_Init();
 800060a:	f000 f92f 	bl	800086c <MX_I2C1_Init>
  MX_TIM14_Init();
 800060e:	f000 fa81 	bl	8000b14 <MX_TIM14_Init>
  MX_TIM2_Init();
 8000612:	f000 fa1f 	bl	8000a54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000616:	2380      	movs	r3, #128	@ 0x80
 8000618:	009c      	lsls	r4, r3, #2
 800061a:	2380      	movs	r3, #128	@ 0x80
 800061c:	00dd      	lsls	r5, r3, #3
 800061e:	2680      	movs	r6, #128	@ 0x80
 8000620:	2340      	movs	r3, #64	@ 0x40
 8000622:	469c      	mov	ip, r3
 8000624:	2380      	movs	r3, #128	@ 0x80
 8000626:	011a      	lsls	r2, r3, #4
 8000628:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <main+0xb0>)
 800062a:	6819      	ldr	r1, [r3, #0]
 800062c:	4b1d      	ldr	r3, [pc, #116]	@ (80006a4 <main+0xb4>)
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <main+0xb8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	9304      	str	r3, [sp, #16]
 8000636:	9003      	str	r0, [sp, #12]
 8000638:	9102      	str	r1, [sp, #8]
 800063a:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <main+0xbc>)
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	9200      	str	r2, [sp, #0]
 8000640:	4663      	mov	r3, ip
 8000642:	0032      	movs	r2, r6
 8000644:	0029      	movs	r1, r5
 8000646:	0020      	movs	r0, r4
 8000648:	f000 fed0 	bl	80013ec <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);

	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 800064c:	250f      	movs	r5, #15
 800064e:	197c      	adds	r4, r7, r5
 8000650:	f000 fb58 	bl	8000d04 <updateAndDisplayTime>
 8000654:	0003      	movs	r3, r0
 8000656:	7023      	strb	r3, [r4, #0]

    /*
     * Initialize capacitive touch sensor
     */
    QT1070 capTouch;
    halRet = capTouch_Init(&capTouch, &hi2c1, 0b00001111);
 8000658:	197c      	adds	r4, r7, r5
 800065a:	4915      	ldr	r1, [pc, #84]	@ (80006b0 <main+0xc0>)
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	220f      	movs	r2, #15
 8000660:	0018      	movs	r0, r3
 8000662:	f7ff fddb 	bl	800021c <capTouch_Init>
 8000666:	0003      	movs	r3, r0
 8000668:	7023      	strb	r3, [r4, #0]

	userAlarmToggle = false;			//Default to off
 800066a:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <main+0xc4>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]

    // User alarm default value
    userAlarmTime.Hours = 1;
 8000670:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <main+0xc8>)
 8000672:	2201      	movs	r2, #1
 8000674:	701a      	strb	r2, [r3, #0]
    userAlarmTime.Minutes = 1;
 8000676:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <main+0xc8>)
 8000678:	2201      	movs	r2, #1
 800067a:	705a      	strb	r2, [r3, #1]
    userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800067c:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <main+0xc8>)
 800067e:	2200      	movs	r2, #0
 8000680:	70da      	strb	r2, [r3, #3]
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  uint8_t channelTest = 0x00;
 8000682:	1cfb      	adds	r3, r7, #3
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
	  halRet = capTouch_readChannels(&capTouch, &channelTest);
 8000688:	230f      	movs	r3, #15
 800068a:	18fc      	adds	r4, r7, r3
 800068c:	1cfa      	adds	r2, r7, #3
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	0011      	movs	r1, r2
 8000692:	0018      	movs	r0, r3
 8000694:	f7ff febc 	bl	8000410 <capTouch_readChannels>
 8000698:	0003      	movs	r3, r0
 800069a:	7023      	strb	r3, [r4, #0]
  {
 800069c:	46c0      	nop			@ (mov r8, r8)
 800069e:	e7f0      	b.n	8000682 <main+0x92>
 80006a0:	20000020 	.word	0x20000020
 80006a4:	20000024 	.word	0x20000024
 80006a8:	20000028 	.word	0x20000028
 80006ac:	2000000c 	.word	0x2000000c
 80006b0:	200000d4 	.word	0x200000d4
 80006b4:	2000006d 	.word	0x2000006d
 80006b8:	20000204 	.word	0x20000204

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b093      	sub	sp, #76	@ 0x4c
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	2410      	movs	r4, #16
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	0018      	movs	r0, r3
 80006c8:	2338      	movs	r3, #56	@ 0x38
 80006ca:	001a      	movs	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f005 fb0b 	bl	8005ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d2:	003b      	movs	r3, r7
 80006d4:	0018      	movs	r0, r3
 80006d6:	2310      	movs	r3, #16
 80006d8:	001a      	movs	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	f005 fb04 	bl	8005ce8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2380      	movs	r3, #128	@ 0x80
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f003 f8af 	bl	8003848 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006ea:	f003 f89f 	bl	800382c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006ee:	4b28      	ldr	r3, [pc, #160]	@ (8000790 <SystemClock_Config+0xd4>)
 80006f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80006f2:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <SystemClock_Config+0xd4>)
 80006f4:	2118      	movs	r1, #24
 80006f6:	438a      	bics	r2, r1
 80006f8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2206      	movs	r2, #6
 80006fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2201      	movs	r2, #1
 8000704:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2280      	movs	r2, #128	@ 0x80
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800070e:	0021      	movs	r1, r4
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2240      	movs	r2, #64	@ 0x40
 800071a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2202      	movs	r2, #2
 8000720:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2202      	movs	r2, #2
 8000726:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2208      	movs	r2, #8
 8000732:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2280      	movs	r2, #128	@ 0x80
 8000738:	0292      	lsls	r2, r2, #10
 800073a:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2280      	movs	r2, #128	@ 0x80
 8000740:	0492      	lsls	r2, r2, #18
 8000742:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2280      	movs	r2, #128	@ 0x80
 8000748:	0592      	lsls	r2, r2, #22
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	187b      	adds	r3, r7, r1
 800074e:	0018      	movs	r0, r3
 8000750:	f003 f8ba 	bl	80038c8 <HAL_RCC_OscConfig>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000758:	f000 fe42 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	003b      	movs	r3, r7
 800075e:	2207      	movs	r2, #7
 8000760:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	003b      	movs	r3, r7
 8000764:	2202      	movs	r2, #2
 8000766:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	003b      	movs	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076e:	003b      	movs	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000774:	003b      	movs	r3, r7
 8000776:	2102      	movs	r1, #2
 8000778:	0018      	movs	r0, r3
 800077a:	f003 fbbf 	bl	8003efc <HAL_RCC_ClockConfig>
 800077e:	1e03      	subs	r3, r0, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000782:	f000 fe2d 	bl	80013e0 <Error_Handler>
  }
}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b013      	add	sp, #76	@ 0x4c
 800078c:	bd90      	pop	{r4, r7, pc}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	40021000 	.word	0x40021000

08000794 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	0018      	movs	r0, r3
 800079e:	230c      	movs	r3, #12
 80007a0:	001a      	movs	r2, r3
 80007a2:	2100      	movs	r1, #0
 80007a4:	f005 faa0 	bl	8005ce8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000860 <MX_ADC1_Init+0xcc>)
 80007aa:	4a2e      	ldr	r2, [pc, #184]	@ (8000864 <MX_ADC1_Init+0xd0>)
 80007ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000860 <MX_ADC1_Init+0xcc>)
 80007b0:	2280      	movs	r2, #128	@ 0x80
 80007b2:	05d2      	lsls	r2, r2, #23
 80007b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000860 <MX_ADC1_Init+0xcc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007bc:	4b28      	ldr	r3, [pc, #160]	@ (8000860 <MX_ADC1_Init+0xcc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c2:	4b27      	ldr	r3, [pc, #156]	@ (8000860 <MX_ADC1_Init+0xcc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c8:	4b25      	ldr	r3, [pc, #148]	@ (8000860 <MX_ADC1_Init+0xcc>)
 80007ca:	2204      	movs	r2, #4
 80007cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ce:	4b24      	ldr	r3, [pc, #144]	@ (8000860 <MX_ADC1_Init+0xcc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80007d4:	4b22      	ldr	r3, [pc, #136]	@ (8000860 <MX_ADC1_Init+0xcc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007da:	4b21      	ldr	r3, [pc, #132]	@ (8000860 <MX_ADC1_Init+0xcc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000860 <MX_ADC1_Init+0xcc>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000860 <MX_ADC1_Init+0xcc>)
 80007e8:	2220      	movs	r2, #32
 80007ea:	2100      	movs	r1, #0
 80007ec:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000860 <MX_ADC1_Init+0xcc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <MX_ADC1_Init+0xcc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007fa:	4b19      	ldr	r3, [pc, #100]	@ (8000860 <MX_ADC1_Init+0xcc>)
 80007fc:	222c      	movs	r2, #44	@ 0x2c
 80007fe:	2100      	movs	r1, #0
 8000800:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000802:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <MX_ADC1_Init+0xcc>)
 8000804:	2200      	movs	r2, #0
 8000806:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000808:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <MX_ADC1_Init+0xcc>)
 800080a:	2200      	movs	r2, #0
 800080c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_ADC1_Init+0xcc>)
 8000810:	2200      	movs	r2, #0
 8000812:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_ADC1_Init+0xcc>)
 8000816:	223c      	movs	r2, #60	@ 0x3c
 8000818:	2100      	movs	r1, #0
 800081a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800081c:	4b10      	ldr	r3, [pc, #64]	@ (8000860 <MX_ADC1_Init+0xcc>)
 800081e:	2200      	movs	r2, #0
 8000820:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000822:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_ADC1_Init+0xcc>)
 8000824:	0018      	movs	r0, r3
 8000826:	f001 fb71 	bl	8001f0c <HAL_ADC_Init>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800082e:	f000 fdd7 	bl	80013e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4a0c      	ldr	r2, [pc, #48]	@ (8000868 <MX_ADC1_Init+0xd4>)
 8000836:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000844:	1d3a      	adds	r2, r7, #4
 8000846:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_ADC1_Init+0xcc>)
 8000848:	0011      	movs	r1, r2
 800084a:	0018      	movs	r0, r3
 800084c:	f001 fd06 	bl	800225c <HAL_ADC_ConfigChannel>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000854:	f000 fdc4 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000858:	46c0      	nop			@ (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	b004      	add	sp, #16
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000070 	.word	0x20000070
 8000864:	40012400 	.word	0x40012400
 8000868:	08000004 	.word	0x08000004

0800086c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000870:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <MX_I2C1_Init+0x74>)
 8000872:	4a1c      	ldr	r2, [pc, #112]	@ (80008e4 <MX_I2C1_Init+0x78>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000876:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <MX_I2C1_Init+0x74>)
 8000878:	4a1b      	ldr	r2, [pc, #108]	@ (80008e8 <MX_I2C1_Init+0x7c>)
 800087a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800087c:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000882:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <MX_I2C1_Init+0x74>)
 8000884:	2201      	movs	r2, #1
 8000886:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000888:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800088e:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <MX_I2C1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <MX_I2C1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_I2C1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <MX_I2C1_Init+0x74>)
 80008a8:	0018      	movs	r0, r3
 80008aa:	f002 f97b 	bl	8002ba4 <HAL_I2C_Init>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008b2:	f000 fd95 	bl	80013e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b6:	4b0a      	ldr	r3, [pc, #40]	@ (80008e0 <MX_I2C1_Init+0x74>)
 80008b8:	2100      	movs	r1, #0
 80008ba:	0018      	movs	r0, r3
 80008bc:	f002 ff1e 	bl	80036fc <HAL_I2CEx_ConfigAnalogFilter>
 80008c0:	1e03      	subs	r3, r0, #0
 80008c2:	d001      	beq.n	80008c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008c4:	f000 fd8c 	bl	80013e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008c8:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <MX_I2C1_Init+0x74>)
 80008ca:	2100      	movs	r1, #0
 80008cc:	0018      	movs	r0, r3
 80008ce:	f002 ff61 	bl	8003794 <HAL_I2CEx_ConfigDigitalFilter>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008d6:	f000 fd83 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200000d4 	.word	0x200000d4
 80008e4:	40005400 	.word	0x40005400
 80008e8:	00602173 	.word	0x00602173

080008ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b090      	sub	sp, #64	@ 0x40
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80008f2:	232c      	movs	r3, #44	@ 0x2c
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	0018      	movs	r0, r3
 80008f8:	2314      	movs	r3, #20
 80008fa:	001a      	movs	r2, r3
 80008fc:	2100      	movs	r1, #0
 80008fe:	f005 f9f3 	bl	8005ce8 <memset>
  RTC_DateTypeDef sDate = {0};
 8000902:	2328      	movs	r3, #40	@ 0x28
 8000904:	18fb      	adds	r3, r7, r3
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800090a:	003b      	movs	r3, r7
 800090c:	0018      	movs	r0, r3
 800090e:	2328      	movs	r3, #40	@ 0x28
 8000910:	001a      	movs	r2, r3
 8000912:	2100      	movs	r1, #0
 8000914:	f005 f9e8 	bl	8005ce8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000918:	4b4b      	ldr	r3, [pc, #300]	@ (8000a48 <MX_RTC_Init+0x15c>)
 800091a:	4a4c      	ldr	r2, [pc, #304]	@ (8000a4c <MX_RTC_Init+0x160>)
 800091c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800091e:	4b4a      	ldr	r3, [pc, #296]	@ (8000a48 <MX_RTC_Init+0x15c>)
 8000920:	2240      	movs	r2, #64	@ 0x40
 8000922:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000924:	4b48      	ldr	r3, [pc, #288]	@ (8000a48 <MX_RTC_Init+0x15c>)
 8000926:	227f      	movs	r2, #127	@ 0x7f
 8000928:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800092a:	4b47      	ldr	r3, [pc, #284]	@ (8000a48 <MX_RTC_Init+0x15c>)
 800092c:	22ff      	movs	r2, #255	@ 0xff
 800092e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000930:	4b45      	ldr	r3, [pc, #276]	@ (8000a48 <MX_RTC_Init+0x15c>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000936:	4b44      	ldr	r3, [pc, #272]	@ (8000a48 <MX_RTC_Init+0x15c>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800093c:	4b42      	ldr	r3, [pc, #264]	@ (8000a48 <MX_RTC_Init+0x15c>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000942:	4b41      	ldr	r3, [pc, #260]	@ (8000a48 <MX_RTC_Init+0x15c>)
 8000944:	2280      	movs	r2, #128	@ 0x80
 8000946:	05d2      	lsls	r2, r2, #23
 8000948:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800094a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a48 <MX_RTC_Init+0x15c>)
 800094c:	2200      	movs	r2, #0
 800094e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000950:	4b3d      	ldr	r3, [pc, #244]	@ (8000a48 <MX_RTC_Init+0x15c>)
 8000952:	0018      	movs	r0, r3
 8000954:	f003 fdd6 	bl	8004504 <HAL_RTC_Init>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d001      	beq.n	8000960 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 800095c:	f000 fd40 	bl	80013e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000960:	212c      	movs	r1, #44	@ 0x2c
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2201      	movs	r2, #1
 8000966:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2200      	movs	r2, #0
 800096c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2200      	movs	r2, #0
 8000972:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2200      	movs	r2, #0
 8000978:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2200      	movs	r2, #0
 800097e:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800098c:	1879      	adds	r1, r7, r1
 800098e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a48 <MX_RTC_Init+0x15c>)
 8000990:	2201      	movs	r2, #1
 8000992:	0018      	movs	r0, r3
 8000994:	f003 fe58 	bl	8004648 <HAL_RTC_SetTime>
 8000998:	1e03      	subs	r3, r0, #0
 800099a:	d001      	beq.n	80009a0 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 800099c:	f000 fd20 	bl	80013e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009a0:	2128      	movs	r1, #40	@ 0x28
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2201      	movs	r2, #1
 80009ac:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2201      	movs	r2, #1
 80009b2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2200      	movs	r2, #0
 80009b8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80009ba:	1879      	adds	r1, r7, r1
 80009bc:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <MX_RTC_Init+0x15c>)
 80009be:	2201      	movs	r2, #1
 80009c0:	0018      	movs	r0, r3
 80009c2:	f003 ff45 	bl	8004850 <HAL_RTC_SetDate>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d001      	beq.n	80009ce <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 80009ca:	f000 fd09 	bl	80013e0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 80009ce:	003b      	movs	r3, r7
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 80009d4:	003b      	movs	r3, r7
 80009d6:	2201      	movs	r2, #1
 80009d8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80009da:	003b      	movs	r3, r7
 80009dc:	2200      	movs	r2, #0
 80009de:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80009e0:	003b      	movs	r3, r7
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80009e6:	003b      	movs	r3, r7
 80009e8:	2200      	movs	r2, #0
 80009ea:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009ec:	003b      	movs	r3, r7
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009f2:	003b      	movs	r3, r7
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80009f8:	003b      	movs	r3, r7
 80009fa:	4a15      	ldr	r2, [pc, #84]	@ (8000a50 <MX_RTC_Init+0x164>)
 80009fc:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009fe:	003b      	movs	r3, r7
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000a04:	003b      	movs	r3, r7
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000a0a:	003b      	movs	r3, r7
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	2101      	movs	r1, #1
 8000a10:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000a12:	003b      	movs	r3, r7
 8000a14:	2280      	movs	r2, #128	@ 0x80
 8000a16:	0052      	lsls	r2, r2, #1
 8000a18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000a1a:	0039      	movs	r1, r7
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <MX_RTC_Init+0x15c>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	0018      	movs	r0, r3
 8000a22:	f003 fff5 	bl	8004a10 <HAL_RTC_SetAlarm_IT>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <MX_RTC_Init+0x142>
  {
    Error_Handler();
 8000a2a:	f000 fcd9 	bl	80013e0 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <MX_RTC_Init+0x15c>)
 8000a30:	2100      	movs	r1, #0
 8000a32:	0018      	movs	r0, r3
 8000a34:	f004 fa5c 	bl	8004ef0 <HAL_RTCEx_SetCalibrationOutPut>
 8000a38:	1e03      	subs	r3, r0, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_RTC_Init+0x154>
  {
    Error_Handler();
 8000a3c:	f000 fcd0 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a40:	46c0      	nop			@ (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b010      	add	sp, #64	@ 0x40
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000128 	.word	0x20000128
 8000a4c:	40002800 	.word	0x40002800
 8000a50:	80800080 	.word	0x80800080

08000a54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	@ 0x28
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5a:	231c      	movs	r3, #28
 8000a5c:	18fb      	adds	r3, r7, r3
 8000a5e:	0018      	movs	r0, r3
 8000a60:	230c      	movs	r3, #12
 8000a62:	001a      	movs	r2, r3
 8000a64:	2100      	movs	r1, #0
 8000a66:	f005 f93f 	bl	8005ce8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	231c      	movs	r3, #28
 8000a70:	001a      	movs	r2, r3
 8000a72:	2100      	movs	r1, #0
 8000a74:	f005 f938 	bl	8005ce8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a78:	4b24      	ldr	r3, [pc, #144]	@ (8000b0c <MX_TIM2_Init+0xb8>)
 8000a7a:	2280      	movs	r2, #128	@ 0x80
 8000a7c:	05d2      	lsls	r2, r2, #23
 8000a7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8000a80:	4b22      	ldr	r3, [pc, #136]	@ (8000b0c <MX_TIM2_Init+0xb8>)
 8000a82:	4a23      	ldr	r2, [pc, #140]	@ (8000b10 <MX_TIM2_Init+0xbc>)
 8000a84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a86:	4b21      	ldr	r3, [pc, #132]	@ (8000b0c <MX_TIM2_Init+0xb8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b0c <MX_TIM2_Init+0xb8>)
 8000a8e:	2263      	movs	r2, #99	@ 0x63
 8000a90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a92:	4b1e      	ldr	r3, [pc, #120]	@ (8000b0c <MX_TIM2_Init+0xb8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a98:	4b1c      	ldr	r3, [pc, #112]	@ (8000b0c <MX_TIM2_Init+0xb8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b0c <MX_TIM2_Init+0xb8>)
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f004 fb3f 	bl	8005124 <HAL_TIM_PWM_Init>
 8000aa6:	1e03      	subs	r3, r0, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000aaa:	f000 fc99 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aae:	211c      	movs	r1, #28
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000abc:	187a      	adds	r2, r7, r1
 8000abe:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <MX_TIM2_Init+0xb8>)
 8000ac0:	0011      	movs	r1, r2
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f005 f8a8 	bl	8005c18 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000acc:	f000 fc88 	bl	80013e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad0:	003b      	movs	r3, r7
 8000ad2:	2260      	movs	r2, #96	@ 0x60
 8000ad4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ad6:	003b      	movs	r3, r7
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000adc:	003b      	movs	r3, r7
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae2:	003b      	movs	r3, r7
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ae8:	0039      	movs	r1, r7
 8000aea:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <MX_TIM2_Init+0xb8>)
 8000aec:	2208      	movs	r2, #8
 8000aee:	0018      	movs	r0, r3
 8000af0:	f004 fc4e 	bl	8005390 <HAL_TIM_PWM_ConfigChannel>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000af8:	f000 fc72 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000afc:	4b03      	ldr	r3, [pc, #12]	@ (8000b0c <MX_TIM2_Init+0xb8>)
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 ffce 	bl	8001aa0 <HAL_TIM_MspPostInit>

}
 8000b04:	46c0      	nop			@ (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b00a      	add	sp, #40	@ 0x28
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000154 	.word	0x20000154
 8000b10:	0000031f 	.word	0x0000031f

08000b14 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000b18:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <MX_TIM14_Init+0x40>)
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b58 <MX_TIM14_Init+0x44>)
 8000b1c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <MX_TIM14_Init+0x40>)
 8000b20:	22f4      	movs	r2, #244	@ 0xf4
 8000b22:	0092      	lsls	r2, r2, #2
 8000b24:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <MX_TIM14_Init+0x40>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <MX_TIM14_Init+0x40>)
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b5c <MX_TIM14_Init+0x48>)
 8000b30:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b32:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <MX_TIM14_Init+0x40>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <MX_TIM14_Init+0x40>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b3e:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <MX_TIM14_Init+0x40>)
 8000b40:	0018      	movs	r0, r3
 8000b42:	f004 fa25 	bl	8004f90 <HAL_TIM_Base_Init>
 8000b46:	1e03      	subs	r3, r0, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000b4a:	f000 fc49 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200001a0 	.word	0x200001a0
 8000b58:	40002000 	.word	0x40002000
 8000b5c:	0000ffff 	.word	0x0000ffff

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b08b      	sub	sp, #44	@ 0x2c
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	2414      	movs	r4, #20
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	2314      	movs	r3, #20
 8000b6e:	001a      	movs	r2, r3
 8000b70:	2100      	movs	r1, #0
 8000b72:	f005 f8b9 	bl	8005ce8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	4b5e      	ldr	r3, [pc, #376]	@ (8000cf0 <MX_GPIO_Init+0x190>)
 8000b78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b7a:	4b5d      	ldr	r3, [pc, #372]	@ (8000cf0 <MX_GPIO_Init+0x190>)
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b82:	4b5b      	ldr	r3, [pc, #364]	@ (8000cf0 <MX_GPIO_Init+0x190>)
 8000b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b86:	2204      	movs	r2, #4
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b58      	ldr	r3, [pc, #352]	@ (8000cf0 <MX_GPIO_Init+0x190>)
 8000b90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b92:	4b57      	ldr	r3, [pc, #348]	@ (8000cf0 <MX_GPIO_Init+0x190>)
 8000b94:	2101      	movs	r1, #1
 8000b96:	430a      	orrs	r2, r1
 8000b98:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b9a:	4b55      	ldr	r3, [pc, #340]	@ (8000cf0 <MX_GPIO_Init+0x190>)
 8000b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba6:	4b52      	ldr	r3, [pc, #328]	@ (8000cf0 <MX_GPIO_Init+0x190>)
 8000ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000baa:	4b51      	ldr	r3, [pc, #324]	@ (8000cf0 <MX_GPIO_Init+0x190>)
 8000bac:	2108      	movs	r1, #8
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bb2:	4b4f      	ldr	r3, [pc, #316]	@ (8000cf0 <MX_GPIO_Init+0x190>)
 8000bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bb6:	2208      	movs	r2, #8
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b4c      	ldr	r3, [pc, #304]	@ (8000cf0 <MX_GPIO_Init+0x190>)
 8000bc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bc2:	4b4b      	ldr	r3, [pc, #300]	@ (8000cf0 <MX_GPIO_Init+0x190>)
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bca:	4b49      	ldr	r3, [pc, #292]	@ (8000cf0 <MX_GPIO_Init+0x190>)
 8000bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bce:	2202      	movs	r2, #2
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8000bd6:	4947      	ldr	r1, [pc, #284]	@ (8000cf4 <MX_GPIO_Init+0x194>)
 8000bd8:	23a0      	movs	r3, #160	@ 0xa0
 8000bda:	05db      	lsls	r3, r3, #23
 8000bdc:	2200      	movs	r2, #0
 8000bde:	0018      	movs	r0, r3
 8000be0:	f001 ff73 	bl	8002aca <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8000be4:	4b44      	ldr	r3, [pc, #272]	@ (8000cf8 <MX_GPIO_Init+0x198>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	2180      	movs	r1, #128	@ 0x80
 8000bea:	0018      	movs	r0, r3
 8000bec:	f001 ff6d 	bl	8002aca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_EN_GPIO_Port, CTOUCH_EN_Pin, GPIO_PIN_RESET);
 8000bf0:	2380      	movs	r3, #128	@ 0x80
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4841      	ldr	r0, [pc, #260]	@ (8000cfc <MX_GPIO_Init+0x19c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	0019      	movs	r1, r3
 8000bfa:	f001 ff66 	bl	8002aca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin BUZZER_OUT_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin
                           SHIFT_MCLR_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8000bfe:	193b      	adds	r3, r7, r4
 8000c00:	4a3c      	ldr	r2, [pc, #240]	@ (8000cf4 <MX_GPIO_Init+0x194>)
 8000c02:	601a      	str	r2, [r3, #0]
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	193b      	adds	r3, r7, r4
 8000c06:	2201      	movs	r2, #1
 8000c08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	193b      	adds	r3, r7, r4
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	193a      	adds	r2, r7, r4
 8000c18:	23a0      	movs	r3, #160	@ 0xa0
 8000c1a:	05db      	lsls	r3, r3, #23
 8000c1c:	0011      	movs	r1, r2
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f001 fdd2 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	2280      	movs	r2, #128	@ 0x80
 8000c28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	4a2e      	ldr	r2, [pc, #184]	@ (8000cf8 <MX_GPIO_Init+0x198>)
 8000c40:	0019      	movs	r1, r3
 8000c42:	0010      	movs	r0, r2
 8000c44:	f001 fdc0 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	2280      	movs	r2, #128	@ 0x80
 8000c4c:	0212      	lsls	r2, r2, #8
 8000c4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	2284      	movs	r2, #132	@ 0x84
 8000c54:	0392      	lsls	r2, r2, #14
 8000c56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	193a      	adds	r2, r7, r4
 8000c60:	23a0      	movs	r3, #160	@ 0xa0
 8000c62:	05db      	lsls	r3, r3, #23
 8000c64:	0011      	movs	r1, r2
 8000c66:	0018      	movs	r0, r3
 8000c68:	f001 fdae 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 8000c6c:	0021      	movs	r1, r4
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	220f      	movs	r2, #15
 8000c72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	2284      	movs	r2, #132	@ 0x84
 8000c78:	0392      	lsls	r2, r2, #14
 8000c7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2201      	movs	r2, #1
 8000c80:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c82:	000c      	movs	r4, r1
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	4a1e      	ldr	r2, [pc, #120]	@ (8000d00 <MX_GPIO_Init+0x1a0>)
 8000c88:	0019      	movs	r1, r3
 8000c8a:	0010      	movs	r0, r2
 8000c8c:	f001 fd9c 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_EN_Pin */
  GPIO_InitStruct.Pin = CTOUCH_EN_Pin;
 8000c90:	0021      	movs	r1, r4
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	2280      	movs	r2, #128	@ 0x80
 8000c96:	0092      	lsls	r2, r2, #2
 8000c98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2200      	movs	r2, #0
 8000caa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_EN_GPIO_Port, &GPIO_InitStruct);
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	4a13      	ldr	r2, [pc, #76]	@ (8000cfc <MX_GPIO_Init+0x19c>)
 8000cb0:	0019      	movs	r1, r3
 8000cb2:	0010      	movs	r0, r2
 8000cb4:	f001 fd88 	bl	80027c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2005      	movs	r0, #5
 8000cbe:	f001 fd51 	bl	8002764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000cc2:	2005      	movs	r0, #5
 8000cc4:	f001 fd63 	bl	800278e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2006      	movs	r0, #6
 8000cce:	f001 fd49 	bl	8002764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000cd2:	2006      	movs	r0, #6
 8000cd4:	f001 fd5b 	bl	800278e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2101      	movs	r1, #1
 8000cdc:	2007      	movs	r0, #7
 8000cde:	f001 fd41 	bl	8002764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000ce2:	2007      	movs	r0, #7
 8000ce4:	f001 fd53 	bl	800278e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce8:	46c0      	nop			@ (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b00b      	add	sp, #44	@ 0x2c
 8000cee:	bd90      	pop	{r4, r7, pc}
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	00001f01 	.word	0x00001f01
 8000cf8:	50000800 	.word	0x50000800
 8000cfc:	50000400 	.word	0x50000400
 8000d00:	50000c00 	.word	0x50000c00

08000d04 <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8000d10:	4a07      	ldr	r2, [pc, #28]	@ (8000d30 <updateAndDisplayTime+0x2c>)
 8000d12:	4908      	ldr	r1, [pc, #32]	@ (8000d34 <updateAndDisplayTime+0x30>)
 8000d14:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <updateAndDisplayTime+0x34>)
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff fc54 	bl	80005c4 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <updateAndDisplayTime+0x30>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f000 fc7c 	bl	800161c <sevSeg_updateDigits>

	return halRet;
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	781b      	ldrb	r3, [r3, #0]

}
 8000d28:	0018      	movs	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b002      	add	sp, #8
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000200 	.word	0x20000200
 8000d34:	200001ec 	.word	0x200001ec
 8000d38:	20000128 	.word	0x20000128

08000d3c <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 8000d48:	4b04      	ldr	r3, [pc, #16]	@ (8000d5c <updateAndDisplayAlarm+0x20>)
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 fc66 	bl	800161c <sevSeg_updateDigits>

	return halRet;
 8000d50:	1dfb      	adds	r3, r7, #7
 8000d52:	781b      	ldrb	r3, [r3, #0]

}
 8000d54:	0018      	movs	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b002      	add	sp, #8
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000204 	.word	0x20000204

08000d60 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08c      	sub	sp, #48	@ 0x30
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

	  //printf("Enter current time minute increment interrupt\n\r");

	  RTC_AlarmTypeDef sAlarm;
	  getRTCTime(hrtc, &currTime, &currDate);
 8000d68:	4a1e      	ldr	r2, [pc, #120]	@ (8000de4 <HAL_RTC_AlarmAEventCallback+0x84>)
 8000d6a:	491f      	ldr	r1, [pc, #124]	@ (8000de8 <HAL_RTC_AlarmAEventCallback+0x88>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f7ff fc28 	bl	80005c4 <getRTCTime>

	  if(sAlarm.AlarmTime.Minutes>58) {
 8000d74:	2208      	movs	r2, #8
 8000d76:	18bb      	adds	r3, r7, r2
 8000d78:	785b      	ldrb	r3, [r3, #1]
 8000d7a:	2b3a      	cmp	r3, #58	@ 0x3a
 8000d7c:	d903      	bls.n	8000d86 <HAL_RTC_AlarmAEventCallback+0x26>
		sAlarm.AlarmTime.Minutes=0;
 8000d7e:	18bb      	adds	r3, r7, r2
 8000d80:	2200      	movs	r2, #0
 8000d82:	705a      	strb	r2, [r3, #1]
 8000d84:	e006      	b.n	8000d94 <HAL_RTC_AlarmAEventCallback+0x34>
		//printf("Reset alarm time\n\r");
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8000d86:	2108      	movs	r1, #8
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	785b      	ldrb	r3, [r3, #1]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000d94:	46c0      	nop			@ (mov r8, r8)
 8000d96:	2308      	movs	r3, #8
 8000d98:	18f9      	adds	r1, r7, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f003 fe36 	bl	8004a10 <HAL_RTC_SetAlarm_IT>
 8000da4:	1e03      	subs	r3, r0, #0
 8000da6:	d1f6      	bne.n	8000d96 <HAL_RTC_AlarmAEventCallback+0x36>

	  updateAndDisplayTime();
 8000da8:	f7ff ffac 	bl	8000d04 <updateAndDisplayTime>

	  //printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 8000dac:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <HAL_RTC_AlarmAEventCallback+0x8c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d013      	beq.n	8000ddc <HAL_RTC_AlarmAEventCallback+0x7c>
 8000db4:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000db6:	781a      	ldrb	r2, [r3, #0]
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <HAL_RTC_AlarmAEventCallback+0x88>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d10d      	bne.n	8000ddc <HAL_RTC_AlarmAEventCallback+0x7c>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000dc2:	785a      	ldrb	r2, [r3, #1]
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <HAL_RTC_AlarmAEventCallback+0x88>)
 8000dc6:	785b      	ldrb	r3, [r3, #1]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d107      	bne.n	8000ddc <HAL_RTC_AlarmAEventCallback+0x7c>
 8000dcc:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000dce:	78da      	ldrb	r2, [r3, #3]
 8000dd0:	4b05      	ldr	r3, [pc, #20]	@ (8000de8 <HAL_RTC_AlarmAEventCallback+0x88>)
 8000dd2:	78db      	ldrb	r3, [r3, #3]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d101      	bne.n	8000ddc <HAL_RTC_AlarmAEventCallback+0x7c>
		  userAlarmBeep();
 8000dd8:	f000 f80c 	bl	8000df4 <userAlarmBeep>
	  }

}
 8000ddc:	46c0      	nop			@ (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b00c      	add	sp, #48	@ 0x30
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000200 	.word	0x20000200
 8000de8:	200001ec 	.word	0x200001ec
 8000dec:	2000006d 	.word	0x2000006d
 8000df0:	20000204 	.word	0x20000204

08000df4 <userAlarmBeep>:

void userAlarmBeep() {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8000dfa:	4b2c      	ldr	r3, [pc, #176]	@ (8000eac <userAlarmBeep+0xb8>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f004 f96a 	bl	80050d8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8000e04:	4b29      	ldr	r3, [pc, #164]	@ (8000eac <userAlarmBeep+0xb8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f004 f919 	bl	8005040 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8000e0e:	4b27      	ldr	r3, [pc, #156]	@ (8000eac <userAlarmBeep+0xb8>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e16:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8000e18:	1cfb      	adds	r3, r7, #3
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8000e1e:	1cbb      	adds	r3, r7, #2
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 8000e24:	f7ff ff6e 	bl	8000d04 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 8000e28:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <userAlarmBeep+0xb8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb0 <userAlarmBeep+0xbc>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d926      	bls.n	8000e88 <userAlarmBeep+0x94>

			sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb4 <userAlarmBeep+0xc0>)
 8000e3c:	6818      	ldr	r0, [r3, #0]
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb8 <userAlarmBeep+0xc4>)
 8000e40:	6819      	ldr	r1, [r3, #0]
 8000e42:	1cfb      	adds	r3, r7, #3
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	4a1d      	ldr	r2, [pc, #116]	@ (8000ebc <userAlarmBeep+0xc8>)
 8000e48:	5cd3      	ldrb	r3, [r2, r3]
 8000e4a:	001a      	movs	r2, r3
 8000e4c:	f000 fc98 	bl	8001780 <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(buzzerPort, buzzerPin);					// Toggle Buzzer
 8000e50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec0 <userAlarmBeep+0xcc>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2280      	movs	r2, #128	@ 0x80
 8000e56:	0052      	lsls	r2, r2, #1
 8000e58:	0011      	movs	r1, r2
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f001 fe52 	bl	8002b04 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8000e60:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <userAlarmBeep+0xb8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e68:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8000e6a:	1cfb      	adds	r3, r7, #3
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	1e5a      	subs	r2, r3, #1
 8000e70:	4193      	sbcs	r3, r2
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2201      	movs	r2, #1
 8000e76:	4053      	eors	r3, r2
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	001a      	movs	r2, r3
 8000e7c:	1cfb      	adds	r3, r7, #3
 8000e7e:	701a      	strb	r2, [r3, #0]
 8000e80:	781a      	ldrb	r2, [r3, #0]
 8000e82:	2101      	movs	r1, #1
 8000e84:	400a      	ands	r2, r1
 8000e86:	701a      	strb	r2, [r3, #0]

			//printf("Display Blink = %u\n\r", displayBlink);

		}

		i++;		// Get rid of. This is just for testing.
 8000e88:	1cbb      	adds	r3, r7, #2
 8000e8a:	781a      	ldrb	r2, [r3, #0]
 8000e8c:	1cbb      	adds	r3, r7, #2
 8000e8e:	3201      	adds	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]

//	} while(capTouchTrigger(snoozeButtonPin));
	} while(i < 5);
 8000e92:	1cbb      	adds	r3, r7, #2
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	d9c4      	bls.n	8000e24 <userAlarmBeep+0x30>

	HAL_TIM_Base_Stop(timerDelay);
 8000e9a:	4b04      	ldr	r3, [pc, #16]	@ (8000eac <userAlarmBeep+0xb8>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f004 f91a 	bl	80050d8 <HAL_TIM_Base_Stop>

}
 8000ea4:	46c0      	nop			@ (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b002      	add	sp, #8
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000020 	.word	0x20000020
 8000eb0:	00007ffe 	.word	0x00007ffe
 8000eb4:	20000024 	.word	0x20000024
 8000eb8:	20000028 	.word	0x20000028
 8000ebc:	08005d74 	.word	0x08005d74
 8000ec0:	20000008 	.word	0x20000008

08000ec4 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	0002      	movs	r2, r0
 8000ecc:	1dbb      	adds	r3, r7, #6
 8000ece:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8000ed0:	2208      	movs	r2, #8
 8000ed2:	1dbb      	adds	r3, r7, #6
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d106      	bne.n	8000ee8 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 8000eda:	230f      	movs	r3, #15
 8000edc:	18fc      	adds	r4, r7, r3
 8000ede:	f000 f839 	bl	8000f54 <displayButtonISR>
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8000ee6:	e031      	b.n	8000f4c <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8000ee8:	2204      	movs	r2, #4
 8000eea:	1dbb      	adds	r3, r7, #6
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d106      	bne.n	8000f00 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 8000ef2:	230f      	movs	r3, #15
 8000ef4:	18fc      	adds	r4, r7, r3
 8000ef6:	f000 f85d 	bl	8000fb4 <alarmEnableISR>
 8000efa:	0003      	movs	r3, r0
 8000efc:	7023      	strb	r3, [r4, #0]
}
 8000efe:	e025      	b.n	8000f4c <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8000f00:	2380      	movs	r3, #128	@ 0x80
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	1dba      	adds	r2, r7, #6
 8000f06:	8812      	ldrh	r2, [r2, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d106      	bne.n	8000f1a <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 8000f0c:	230f      	movs	r3, #15
 8000f0e:	18fc      	adds	r4, r7, r3
 8000f10:	f000 f884 	bl	800101c <alarmSetISR>
 8000f14:	0003      	movs	r3, r0
 8000f16:	7023      	strb	r3, [r4, #0]
}
 8000f18:	e018      	b.n	8000f4c <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	1dbb      	adds	r3, r7, #6
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d106      	bne.n	8000f32 <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 8000f24:	230f      	movs	r3, #15
 8000f26:	18fc      	adds	r4, r7, r3
 8000f28:	f000 f954 	bl	80011d4 <hourSetISR>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	7023      	strb	r3, [r4, #0]
}
 8000f30:	e00c      	b.n	8000f4c <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8000f32:	2202      	movs	r2, #2
 8000f34:	1dbb      	adds	r3, r7, #6
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d106      	bne.n	8000f4a <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	18fc      	adds	r4, r7, r3
 8000f40:	f000 f974 	bl	800122c <minuteSetISR>
 8000f44:	0003      	movs	r3, r0
 8000f46:	7023      	strb	r3, [r4, #0]
}
 8000f48:	e000      	b.n	8000f4c <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 8000f4a:	46c0      	nop			@ (mov r8, r8)
}
 8000f4c:	46c0      	nop			@ (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b005      	add	sp, #20
 8000f52:	bd90      	pop	{r4, r7, pc}

08000f54 <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 8000f60:	f7ff fed0 	bl	8000d04 <updateAndDisplayTime>

	sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8000f64:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <displayButtonISR+0x50>)
 8000f66:	6818      	ldr	r0, [r3, #0]
 8000f68:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <displayButtonISR+0x54>)
 8000f6a:	6819      	ldr	r1, [r3, #0]
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <displayButtonISR+0x58>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	001a      	movs	r2, r3
 8000f72:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <displayButtonISR+0x5c>)
 8000f74:	5c9b      	ldrb	r3, [r3, r2]
 8000f76:	001a      	movs	r2, r3
 8000f78:	f000 fc02 	bl	8001780 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <displayButtonISR+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d903      	bls.n	8000f8c <displayButtonISR+0x38>
		displayToggle = 0;
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <displayButtonISR+0x58>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
 8000f8a:	e005      	b.n	8000f98 <displayButtonISR+0x44>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 8000f8c:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <displayButtonISR+0x58>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <displayButtonISR+0x58>)
 8000f96:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8000f98:	1dfb      	adds	r3, r7, #7
 8000f9a:	781b      	ldrb	r3, [r3, #0]

}
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b002      	add	sp, #8
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000024 	.word	0x20000024
 8000fa8:	20000028 	.word	0x20000028
 8000fac:	2000006c 	.word	0x2000006c
 8000fb0:	08005d74 	.word	0x08005d74

08000fb4 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8000fc0:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <alarmEnableISR+0x60>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	4053      	eors	r3, r2
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00b      	beq.n	8000fe6 <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 8000fce:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <alarmEnableISR+0x64>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2280      	movs	r2, #128	@ 0x80
 8000fd4:	0151      	lsls	r1, r2, #5
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f001 fd76 	bl	8002aca <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 8000fde:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <alarmEnableISR+0x60>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
 8000fe4:	e010      	b.n	8001008 <alarmEnableISR+0x54>

		//printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
								//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <alarmEnableISR+0x60>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00b      	beq.n	8001006 <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 8000fee:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <alarmEnableISR+0x64>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	0151      	lsls	r1, r2, #5
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f001 fd66 	bl	8002aca <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 8000ffe:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <alarmEnableISR+0x60>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	e000      	b.n	8001008 <alarmEnableISR+0x54>

		//printf("User alarm disabled.\n\r");
	}
	else {
		__NOP();							//Code should never reach here.
 8001006:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 8001008:	1dfb      	adds	r3, r7, #7
 800100a:	781b      	ldrb	r3, [r3, #0]

}
 800100c:	0018      	movs	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	b002      	add	sp, #8
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000006d 	.word	0x2000006d
 8001018:	20000004 	.word	0x20000004

0800101c <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
	//printf("Enter user alarm set ISR.\n\r");

	//printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
			//userAlarmTime.Minutes, userAlarmTime.Seconds);

	HAL_StatusTypeDef halRet = HAL_OK;
 8001022:	1cbb      	adds	r3, r7, #2
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for switch debounce
	 */

	// First wait for button to deactivate again
	while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_SET);
 8001028:	46c0      	nop			@ (mov r8, r8)
 800102a:	4b64      	ldr	r3, [pc, #400]	@ (80011bc <alarmSetISR+0x1a0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2280      	movs	r2, #128	@ 0x80
 8001030:	0212      	lsls	r2, r2, #8
 8001032:	0011      	movs	r1, r2
 8001034:	0018      	movs	r0, r3
 8001036:	f001 fd2b 	bl	8002a90 <HAL_GPIO_ReadPin>
 800103a:	0003      	movs	r3, r0
 800103c:	2b01      	cmp	r3, #1
 800103e:	d1f4      	bne.n	800102a <alarmSetISR+0xe>

	// Go through debounce
	HAL_TIM_Base_Stop(timerDelay);
 8001040:	4b5f      	ldr	r3, [pc, #380]	@ (80011c0 <alarmSetISR+0x1a4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	0018      	movs	r0, r3
 8001046:	f004 f847 	bl	80050d8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 800104a:	4b5d      	ldr	r3, [pc, #372]	@ (80011c0 <alarmSetISR+0x1a4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	0018      	movs	r0, r3
 8001050:	f003 fff6 	bl	8005040 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001054:	4b5a      	ldr	r3, [pc, #360]	@ (80011c0 <alarmSetISR+0x1a4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105c:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 8));
 800105e:	4b58      	ldr	r3, [pc, #352]	@ (80011c0 <alarmSetISR+0x1a4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	1ad2      	subs	r2, r2, r3
 800106a:	2380      	movs	r3, #128	@ 0x80
 800106c:	019b      	lsls	r3, r3, #6
 800106e:	429a      	cmp	r2, r3
 8001070:	d9f5      	bls.n	800105e <alarmSetISR+0x42>


	/*
	 *  Poll for 1 second to see if the alarm set button is pressed again
	 */
	HAL_TIM_Base_Stop(timerDelay);
 8001072:	4b53      	ldr	r3, [pc, #332]	@ (80011c0 <alarmSetISR+0x1a4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	0018      	movs	r0, r3
 8001078:	f004 f82e 	bl	80050d8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 800107c:	4b50      	ldr	r3, [pc, #320]	@ (80011c0 <alarmSetISR+0x1a4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	0018      	movs	r0, r3
 8001082:	f003 ffdd 	bl	8005040 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001086:	4b4e      	ldr	r3, [pc, #312]	@ (80011c0 <alarmSetISR+0x1a4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108e:	607b      	str	r3, [r7, #4]

	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 8001090:	e00d      	b.n	80010ae <alarmSetISR+0x92>

		if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 8001092:	4b4a      	ldr	r3, [pc, #296]	@ (80011bc <alarmSetISR+0x1a0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2280      	movs	r2, #128	@ 0x80
 8001098:	0212      	lsls	r2, r2, #8
 800109a:	0011      	movs	r1, r2
 800109c:	0018      	movs	r0, r3
 800109e:	f001 fcf7 	bl	8002a90 <HAL_GPIO_ReadPin>
 80010a2:	1e03      	subs	r3, r0, #0
 80010a4:	d103      	bne.n	80010ae <alarmSetISR+0x92>
			alarmSetMode = true;
 80010a6:	4b47      	ldr	r3, [pc, #284]	@ (80011c4 <alarmSetISR+0x1a8>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]
//			HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
			break;
 80010ac:	e009      	b.n	80010c2 <alarmSetISR+0xa6>
	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 80010ae:	4b44      	ldr	r3, [pc, #272]	@ (80011c0 <alarmSetISR+0x1a4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	1ad2      	subs	r2, r2, r3
 80010ba:	2380      	movs	r3, #128	@ 0x80
 80010bc:	025b      	lsls	r3, r3, #9
 80010be:	429a      	cmp	r2, r3
 80010c0:	d9e7      	bls.n	8001092 <alarmSetISR+0x76>
		}

	}

	// Go through debounce once again
	HAL_TIM_Base_Stop(timerDelay);
 80010c2:	4b3f      	ldr	r3, [pc, #252]	@ (80011c0 <alarmSetISR+0x1a4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	0018      	movs	r0, r3
 80010c8:	f004 f806 	bl	80050d8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80010cc:	4b3c      	ldr	r3, [pc, #240]	@ (80011c0 <alarmSetISR+0x1a4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	0018      	movs	r0, r3
 80010d2:	f003 ffb5 	bl	8005040 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80010d6:	4b3a      	ldr	r3, [pc, #232]	@ (80011c0 <alarmSetISR+0x1a4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010de:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 4));
 80010e0:	4b37      	ldr	r3, [pc, #220]	@ (80011c0 <alarmSetISR+0x1a4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	1ad2      	subs	r2, r2, r3
 80010ec:	2380      	movs	r3, #128	@ 0x80
 80010ee:	01db      	lsls	r3, r3, #7
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d9f5      	bls.n	80010e0 <alarmSetISR+0xc4>
	/*
	 * Then, if we are in alarm set mode, go through the
	 * alarm set process until the button is pressed again
	 */

	HAL_TIM_Base_Stop(timerDelay);
 80010f4:	4b32      	ldr	r3, [pc, #200]	@ (80011c0 <alarmSetISR+0x1a4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	0018      	movs	r0, r3
 80010fa:	f003 ffed 	bl	80050d8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80010fe:	4b30      	ldr	r3, [pc, #192]	@ (80011c0 <alarmSetISR+0x1a4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	0018      	movs	r0, r3
 8001104:	f003 ff9c 	bl	8005040 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001108:	4b2d      	ldr	r3, [pc, #180]	@ (80011c0 <alarmSetISR+0x1a4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001110:	607b      	str	r3, [r7, #4]

	if(alarmSetMode) {
 8001112:	4b2c      	ldr	r3, [pc, #176]	@ (80011c4 <alarmSetISR+0x1a8>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d046      	beq.n	80011a8 <alarmSetISR+0x18c>

		bool displayBlink = false;
 800111a:	1cfb      	adds	r3, r7, #3
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			updateAndDisplayAlarm();
 8001120:	f7ff fe0c 	bl	8000d3c <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 8001124:	4b26      	ldr	r3, [pc, #152]	@ (80011c0 <alarmSetISR+0x1a4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	1ad2      	subs	r2, r2, r3
 8001130:	2380      	movs	r3, #128	@ 0x80
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	429a      	cmp	r2, r3
 8001136:	d31e      	bcc.n	8001176 <alarmSetISR+0x15a>

//				HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

				sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 8001138:	4b23      	ldr	r3, [pc, #140]	@ (80011c8 <alarmSetISR+0x1ac>)
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	4b23      	ldr	r3, [pc, #140]	@ (80011cc <alarmSetISR+0x1b0>)
 800113e:	6819      	ldr	r1, [r3, #0]
 8001140:	1cfb      	adds	r3, r7, #3
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4a22      	ldr	r2, [pc, #136]	@ (80011d0 <alarmSetISR+0x1b4>)
 8001146:	5cd3      	ldrb	r3, [r2, r3]
 8001148:	001a      	movs	r2, r3
 800114a:	f000 fb19 	bl	8001780 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 800114e:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <alarmSetISR+0x1a4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001156:	607b      	str	r3, [r7, #4]
				displayBlink = !displayBlink;
 8001158:	1cfb      	adds	r3, r7, #3
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	1e5a      	subs	r2, r3, #1
 800115e:	4193      	sbcs	r3, r2
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2201      	movs	r2, #1
 8001164:	4053      	eors	r3, r2
 8001166:	b2db      	uxtb	r3, r3
 8001168:	001a      	movs	r2, r3
 800116a:	1cfb      	adds	r3, r7, #3
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	781a      	ldrb	r2, [r3, #0]
 8001170:	2101      	movs	r1, #1
 8001172:	400a      	ands	r2, r1
 8001174:	701a      	strb	r2, [r3, #0]

			}

		}while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET);
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <alarmSetISR+0x1a0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2280      	movs	r2, #128	@ 0x80
 800117c:	0212      	lsls	r2, r2, #8
 800117e:	0011      	movs	r1, r2
 8001180:	0018      	movs	r0, r3
 8001182:	f001 fc85 	bl	8002a90 <HAL_GPIO_ReadPin>
 8001186:	1e03      	subs	r3, r0, #0
 8001188:	d1ca      	bne.n	8001120 <alarmSetISR+0x104>

//		HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_RESET);

		sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 800118a:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <alarmSetISR+0x1ac>)
 800118c:	6818      	ldr	r0, [r3, #0]
 800118e:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <alarmSetISR+0x1b0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	225a      	movs	r2, #90	@ 0x5a
 8001194:	0019      	movs	r1, r3
 8001196:	f000 faf3 	bl	8001780 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 800119a:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <alarmSetISR+0x1a4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	0018      	movs	r0, r3
 80011a0:	f003 ff9a 	bl	80050d8 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 80011a4:	f7ff fdae 	bl	8000d04 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <alarmSetISR+0x1a8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 80011ae:	1cbb      	adds	r3, r7, #2
 80011b0:	781b      	ldrb	r3, [r3, #0]

}
 80011b2:	0018      	movs	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b002      	add	sp, #8
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000020 	.word	0x20000020
 80011c4:	20000218 	.word	0x20000218
 80011c8:	20000024 	.word	0x20000024
 80011cc:	20000028 	.word	0x20000028
 80011d0:	08005d74 	.word	0x08005d74

080011d4 <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0

//	printf("Entered hour set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);


	HAL_StatusTypeDef halRet = HAL_OK;
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80011e0:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <hourSetISR+0x48>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <hourSetISR+0x1a>

		alarmHourInc();
 80011e8:	f000 f84c 	bl	8001284 <alarmHourInc>
 80011ec:	e00f      	b.n	800120e <hourSetISR+0x3a>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 80011ee:	f000 f877 	bl	80012e0 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80011f2:	490b      	ldr	r1, [pc, #44]	@ (8001220 <hourSetISR+0x4c>)
 80011f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <hourSetISR+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	0018      	movs	r0, r3
 80011fa:	f003 fa25 	bl	8004648 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80011fe:	f7ff fd81 	bl	8000d04 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001202:	4a09      	ldr	r2, [pc, #36]	@ (8001228 <hourSetISR+0x54>)
 8001204:	4906      	ldr	r1, [pc, #24]	@ (8001220 <hourSetISR+0x4c>)
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <hourSetISR+0x50>)
 8001208:	0018      	movs	r0, r3
 800120a:	f7ff f9db 	bl	80005c4 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	781b      	ldrb	r3, [r3, #0]

}
 8001212:	0018      	movs	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	b002      	add	sp, #8
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	20000218 	.word	0x20000218
 8001220:	200001ec 	.word	0x200001ec
 8001224:	20000128 	.word	0x20000128
 8001228:	20000200 	.word	0x20000200

0800122c <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0

//	printf("Entered minute set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

	HAL_StatusTypeDef halRet = HAL_OK;
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001238:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <minuteSetISR+0x48>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <minuteSetISR+0x1a>

		alarmMinuteInc();
 8001240:	f000 f888 	bl	8001354 <alarmMinuteInc>
 8001244:	e00f      	b.n	8001266 <minuteSetISR+0x3a>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 8001246:	f000 f8a3 	bl	8001390 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 800124a:	490b      	ldr	r1, [pc, #44]	@ (8001278 <minuteSetISR+0x4c>)
 800124c:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <minuteSetISR+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	0018      	movs	r0, r3
 8001252:	f003 f9f9 	bl	8004648 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8001256:	f7ff fd55 	bl	8000d04 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 800125a:	4a09      	ldr	r2, [pc, #36]	@ (8001280 <minuteSetISR+0x54>)
 800125c:	4906      	ldr	r1, [pc, #24]	@ (8001278 <minuteSetISR+0x4c>)
 800125e:	4b07      	ldr	r3, [pc, #28]	@ (800127c <minuteSetISR+0x50>)
 8001260:	0018      	movs	r0, r3
 8001262:	f7ff f9af 	bl	80005c4 <getRTCTime>

		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	781b      	ldrb	r3, [r3, #0]
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			@ (mov r8, r8)
 8001274:	20000218 	.word	0x20000218
 8001278:	200001ec 	.word	0x200001ec
 800127c:	20000128 	.word	0x20000128
 8001280:	20000200 	.word	0x20000200

08001284 <alarmHourInc>:

void alarmHourInc(void) {
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8001288:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <alarmHourInc+0x58>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b0b      	cmp	r3, #11
 800128e:	d903      	bls.n	8001298 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <alarmHourInc+0x58>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 8001296:	e01e      	b.n	80012d6 <alarmHourInc+0x52>
	else if(userAlarmTime.Hours == 11) {
 8001298:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <alarmHourInc+0x58>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b0b      	cmp	r3, #11
 800129e:	d10e      	bne.n	80012be <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80012a0:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <alarmHourInc+0x58>)
 80012a2:	78db      	ldrb	r3, [r3, #3]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d103      	bne.n	80012b0 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <alarmHourInc+0x58>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	70da      	strb	r2, [r3, #3]
 80012ae:	e002      	b.n	80012b6 <alarmHourInc+0x32>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <alarmHourInc+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	70da      	strb	r2, [r3, #3]
		userAlarmTime.Hours = 12;
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <alarmHourInc+0x58>)
 80012b8:	220c      	movs	r2, #12
 80012ba:	701a      	strb	r2, [r3, #0]
}
 80012bc:	e00b      	b.n	80012d6 <alarmHourInc+0x52>
	else if(userAlarmTime.Hours < 11) {
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <alarmHourInc+0x58>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b0a      	cmp	r3, #10
 80012c4:	d806      	bhi.n	80012d4 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 80012c6:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <alarmHourInc+0x58>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b03      	ldr	r3, [pc, #12]	@ (80012dc <alarmHourInc+0x58>)
 80012d0:	701a      	strb	r2, [r3, #0]
}
 80012d2:	e000      	b.n	80012d6 <alarmHourInc+0x52>
		__NOP();
 80012d4:	46c0      	nop			@ (mov r8, r8)
}
 80012d6:	46c0      	nop			@ (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000204 	.word	0x20000204

080012e0 <currHourInc>:

void currHourInc(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 80012e4:	4a17      	ldr	r2, [pc, #92]	@ (8001344 <currHourInc+0x64>)
 80012e6:	4918      	ldr	r1, [pc, #96]	@ (8001348 <currHourInc+0x68>)
 80012e8:	4b18      	ldr	r3, [pc, #96]	@ (800134c <currHourInc+0x6c>)
 80012ea:	0018      	movs	r0, r3
 80012ec:	f7ff f96a 	bl	80005c4 <getRTCTime>

	if(currTime.Hours >= 12) {
 80012f0:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <currHourInc+0x68>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b0b      	cmp	r3, #11
 80012f6:	d903      	bls.n	8001300 <currHourInc+0x20>
		currTime.Hours = 1;
 80012f8:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <currHourInc+0x68>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 80012fe:	e01e      	b.n	800133e <currHourInc+0x5e>
	else if(currTime.Hours == 11) {
 8001300:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <currHourInc+0x68>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b0b      	cmp	r3, #11
 8001306:	d10e      	bne.n	8001326 <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <currHourInc+0x68>)
 800130a:	78db      	ldrb	r3, [r3, #3]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d103      	bne.n	8001318 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001310:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <currHourInc+0x68>)
 8001312:	2201      	movs	r2, #1
 8001314:	70da      	strb	r2, [r3, #3]
 8001316:	e002      	b.n	800131e <currHourInc+0x3e>
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001318:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <currHourInc+0x68>)
 800131a:	2200      	movs	r2, #0
 800131c:	70da      	strb	r2, [r3, #3]
		currTime.Hours = 12;
 800131e:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <currHourInc+0x68>)
 8001320:	220c      	movs	r2, #12
 8001322:	701a      	strb	r2, [r3, #0]
}
 8001324:	e00b      	b.n	800133e <currHourInc+0x5e>
	else if(userAlarmTime.Hours < 11) {
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <currHourInc+0x70>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b0a      	cmp	r3, #10
 800132c:	d806      	bhi.n	800133c <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <currHourInc+0x68>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <currHourInc+0x68>)
 8001338:	701a      	strb	r2, [r3, #0]
}
 800133a:	e000      	b.n	800133e <currHourInc+0x5e>
		__NOP();
 800133c:	46c0      	nop			@ (mov r8, r8)
}
 800133e:	46c0      	nop			@ (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000200 	.word	0x20000200
 8001348:	200001ec 	.word	0x200001ec
 800134c:	20000128 	.word	0x20000128
 8001350:	20000204 	.word	0x20000204

08001354 <alarmMinuteInc>:

void alarmMinuteInc(void) {
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 8001358:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <alarmMinuteInc+0x38>)
 800135a:	785b      	ldrb	r3, [r3, #1]
 800135c:	2b3a      	cmp	r3, #58	@ 0x3a
 800135e:	d905      	bls.n	800136c <alarmMinuteInc+0x18>
		alarmHourInc();
 8001360:	f7ff ff90 	bl	8001284 <alarmHourInc>
		userAlarmTime.Minutes = 0;
 8001364:	4b09      	ldr	r3, [pc, #36]	@ (800138c <alarmMinuteInc+0x38>)
 8001366:	2200      	movs	r2, #0
 8001368:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 800136a:	e00b      	b.n	8001384 <alarmMinuteInc+0x30>
	else if(userAlarmTime.Minutes < 59) {
 800136c:	4b07      	ldr	r3, [pc, #28]	@ (800138c <alarmMinuteInc+0x38>)
 800136e:	785b      	ldrb	r3, [r3, #1]
 8001370:	2b3a      	cmp	r3, #58	@ 0x3a
 8001372:	d806      	bhi.n	8001382 <alarmMinuteInc+0x2e>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8001374:	4b05      	ldr	r3, [pc, #20]	@ (800138c <alarmMinuteInc+0x38>)
 8001376:	785b      	ldrb	r3, [r3, #1]
 8001378:	3301      	adds	r3, #1
 800137a:	b2da      	uxtb	r2, r3
 800137c:	4b03      	ldr	r3, [pc, #12]	@ (800138c <alarmMinuteInc+0x38>)
 800137e:	705a      	strb	r2, [r3, #1]
}
 8001380:	e000      	b.n	8001384 <alarmMinuteInc+0x30>
		__NOP();
 8001382:	46c0      	nop			@ (mov r8, r8)
}
 8001384:	46c0      	nop			@ (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	20000204 	.word	0x20000204

08001390 <currMinuteInc>:

void currMinuteInc(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001394:	4a0f      	ldr	r2, [pc, #60]	@ (80013d4 <currMinuteInc+0x44>)
 8001396:	4910      	ldr	r1, [pc, #64]	@ (80013d8 <currMinuteInc+0x48>)
 8001398:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <currMinuteInc+0x4c>)
 800139a:	0018      	movs	r0, r3
 800139c:	f7ff f912 	bl	80005c4 <getRTCTime>

	if(currTime.Minutes >= 59) {
 80013a0:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <currMinuteInc+0x48>)
 80013a2:	785b      	ldrb	r3, [r3, #1]
 80013a4:	2b3a      	cmp	r3, #58	@ 0x3a
 80013a6:	d905      	bls.n	80013b4 <currMinuteInc+0x24>
		currHourInc();
 80013a8:	f7ff ff9a 	bl	80012e0 <currHourInc>
		currTime.Minutes = 0;
 80013ac:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <currMinuteInc+0x48>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 80013b2:	e00b      	b.n	80013cc <currMinuteInc+0x3c>
	else if(currTime.Minutes < 59) {
 80013b4:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <currMinuteInc+0x48>)
 80013b6:	785b      	ldrb	r3, [r3, #1]
 80013b8:	2b3a      	cmp	r3, #58	@ 0x3a
 80013ba:	d806      	bhi.n	80013ca <currMinuteInc+0x3a>
		currTime.Minutes = currTime.Minutes + 1;
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <currMinuteInc+0x48>)
 80013be:	785b      	ldrb	r3, [r3, #1]
 80013c0:	3301      	adds	r3, #1
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <currMinuteInc+0x48>)
 80013c6:	705a      	strb	r2, [r3, #1]
}
 80013c8:	e000      	b.n	80013cc <currMinuteInc+0x3c>
		__NOP();
 80013ca:	46c0      	nop			@ (mov r8, r8)
}
 80013cc:	46c0      	nop			@ (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			@ (mov r8, r8)
 80013d4:	20000200 	.word	0x20000200
 80013d8:	200001ec 	.word	0x200001ec
 80013dc:	20000128 	.word	0x20000128

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	46c0      	nop			@ (mov r8, r8)
 80013ea:	e7fd      	b.n	80013e8 <Error_Handler+0x8>

080013ec <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM,
					uint32_t tim_PWM_CHANNEL) {
 80013ec:	b5b0      	push	{r4, r5, r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	0005      	movs	r5, r0
 80013f4:	000c      	movs	r4, r1
 80013f6:	0010      	movs	r0, r2
 80013f8:	0019      	movs	r1, r3
 80013fa:	1dbb      	adds	r3, r7, #6
 80013fc:	1c2a      	adds	r2, r5, #0
 80013fe:	801a      	strh	r2, [r3, #0]
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	1c22      	adds	r2, r4, #0
 8001404:	801a      	strh	r2, [r3, #0]
 8001406:	1cbb      	adds	r3, r7, #2
 8001408:	1c02      	adds	r2, r0, #0
 800140a:	801a      	strh	r2, [r3, #0]
 800140c:	003b      	movs	r3, r7
 800140e:	1c0a      	adds	r2, r1, #0
 8001410:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001412:	4b7a      	ldr	r3, [pc, #488]	@ (80015fc <sevSeg_Init+0x210>)
 8001414:	1dba      	adds	r2, r7, #6
 8001416:	8812      	ldrh	r2, [r2, #0]
 8001418:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 800141a:	4b79      	ldr	r3, [pc, #484]	@ (8001600 <sevSeg_Init+0x214>)
 800141c:	1d3a      	adds	r2, r7, #4
 800141e:	8812      	ldrh	r2, [r2, #0]
 8001420:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001422:	4b78      	ldr	r3, [pc, #480]	@ (8001604 <sevSeg_Init+0x218>)
 8001424:	1cba      	adds	r2, r7, #2
 8001426:	8812      	ldrh	r2, [r2, #0]
 8001428:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 800142a:	4b77      	ldr	r3, [pc, #476]	@ (8001608 <sevSeg_Init+0x21c>)
 800142c:	003a      	movs	r2, r7
 800142e:	8812      	ldrh	r2, [r2, #0]
 8001430:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001432:	4a76      	ldr	r2, [pc, #472]	@ (800160c <sevSeg_Init+0x220>)
 8001434:	2330      	movs	r3, #48	@ 0x30
 8001436:	18fb      	adds	r3, r7, r3
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	8013      	strh	r3, [r2, #0]

	for(int i = 0; i < 5; i++) {
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	e00b      	b.n	800145a <sevSeg_Init+0x6e>
		portArray[i] = GPIOPortArray[i];
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001448:	18d3      	adds	r3, r2, r3
 800144a:	6819      	ldr	r1, [r3, #0]
 800144c:	4b70      	ldr	r3, [pc, #448]	@ (8001610 <sevSeg_Init+0x224>)
 800144e:	69fa      	ldr	r2, [r7, #28]
 8001450:	0092      	lsls	r2, r2, #2
 8001452:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	3301      	adds	r3, #1
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	2b04      	cmp	r3, #4
 800145e:	ddf0      	ble.n	8001442 <sevSeg_Init+0x56>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001460:	4b6b      	ldr	r3, [pc, #428]	@ (8001610 <sevSeg_Init+0x224>)
 8001462:	6918      	ldr	r0, [r3, #16]
 8001464:	4b69      	ldr	r3, [pc, #420]	@ (800160c <sevSeg_Init+0x220>)
 8001466:	8819      	ldrh	r1, [r3, #0]
 8001468:	4b6a      	ldr	r3, [pc, #424]	@ (8001614 <sevSeg_Init+0x228>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	001a      	movs	r2, r3
 800146e:	f001 fb2c 	bl	8002aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001472:	4b67      	ldr	r3, [pc, #412]	@ (8001610 <sevSeg_Init+0x224>)
 8001474:	6918      	ldr	r0, [r3, #16]
 8001476:	4b65      	ldr	r3, [pc, #404]	@ (800160c <sevSeg_Init+0x220>)
 8001478:	8819      	ldrh	r1, [r3, #0]
 800147a:	4b66      	ldr	r3, [pc, #408]	@ (8001614 <sevSeg_Init+0x228>)
 800147c:	785b      	ldrb	r3, [r3, #1]
 800147e:	001a      	movs	r2, r3
 8001480:	f001 fb23 	bl	8002aca <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001484:	4b62      	ldr	r3, [pc, #392]	@ (8001610 <sevSeg_Init+0x224>)
 8001486:	6898      	ldr	r0, [r3, #8]
 8001488:	4b5e      	ldr	r3, [pc, #376]	@ (8001604 <sevSeg_Init+0x218>)
 800148a:	8819      	ldrh	r1, [r3, #0]
 800148c:	4b61      	ldr	r3, [pc, #388]	@ (8001614 <sevSeg_Init+0x228>)
 800148e:	785b      	ldrb	r3, [r3, #1]
 8001490:	001a      	movs	r2, r3
 8001492:	f001 fb1a 	bl	8002aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001496:	4b5e      	ldr	r3, [pc, #376]	@ (8001610 <sevSeg_Init+0x224>)
 8001498:	6898      	ldr	r0, [r3, #8]
 800149a:	4b5a      	ldr	r3, [pc, #360]	@ (8001604 <sevSeg_Init+0x218>)
 800149c:	8819      	ldrh	r1, [r3, #0]
 800149e:	4b5d      	ldr	r3, [pc, #372]	@ (8001614 <sevSeg_Init+0x228>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	001a      	movs	r2, r3
 80014a4:	f001 fb11 	bl	8002aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 80014a8:	4b59      	ldr	r3, [pc, #356]	@ (8001610 <sevSeg_Init+0x224>)
 80014aa:	68d8      	ldr	r0, [r3, #12]
 80014ac:	4b56      	ldr	r3, [pc, #344]	@ (8001608 <sevSeg_Init+0x21c>)
 80014ae:	8819      	ldrh	r1, [r3, #0]
 80014b0:	4b58      	ldr	r3, [pc, #352]	@ (8001614 <sevSeg_Init+0x228>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	001a      	movs	r2, r3
 80014b6:	f001 fb08 	bl	8002aca <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(htim_PWM, tim_PWM_CHANNEL, 50);
 80014ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80014bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014be:	2232      	movs	r2, #50	@ 0x32
 80014c0:	0018      	movs	r0, r3
 80014c2:	f000 f95d 	bl	8001780 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 80014c6:	2308      	movs	r3, #8
 80014c8:	18fb      	adds	r3, r7, r3
 80014ca:	4a53      	ldr	r2, [pc, #332]	@ (8001618 <sevSeg_Init+0x22c>)
 80014cc:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	e038      	b.n	8001546 <sevSeg_Init+0x15a>

		sendByte = hofSymb[i];
 80014d4:	231b      	movs	r3, #27
 80014d6:	18fb      	adds	r3, r7, r3
 80014d8:	2208      	movs	r2, #8
 80014da:	18b9      	adds	r1, r7, r2
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	188a      	adds	r2, r1, r2
 80014e0:	7812      	ldrb	r2, [r2, #0]
 80014e2:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	e027      	b.n	800153a <sevSeg_Init+0x14e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 80014ea:	4b49      	ldr	r3, [pc, #292]	@ (8001610 <sevSeg_Init+0x224>)
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	4b43      	ldr	r3, [pc, #268]	@ (80015fc <sevSeg_Init+0x210>)
 80014f0:	8819      	ldrh	r1, [r3, #0]
 80014f2:	241b      	movs	r4, #27
 80014f4:	193b      	adds	r3, r7, r4
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2201      	movs	r2, #1
 80014fa:	4013      	ands	r3, r2
 80014fc:	4a45      	ldr	r2, [pc, #276]	@ (8001614 <sevSeg_Init+0x228>)
 80014fe:	5cd3      	ldrb	r3, [r2, r3]
 8001500:	001a      	movs	r2, r3
 8001502:	f001 fae2 	bl	8002aca <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001506:	4b42      	ldr	r3, [pc, #264]	@ (8001610 <sevSeg_Init+0x224>)
 8001508:	6858      	ldr	r0, [r3, #4]
 800150a:	4b3d      	ldr	r3, [pc, #244]	@ (8001600 <sevSeg_Init+0x214>)
 800150c:	8819      	ldrh	r1, [r3, #0]
 800150e:	4b41      	ldr	r3, [pc, #260]	@ (8001614 <sevSeg_Init+0x228>)
 8001510:	785b      	ldrb	r3, [r3, #1]
 8001512:	001a      	movs	r2, r3
 8001514:	f001 fad9 	bl	8002aca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001518:	4b3d      	ldr	r3, [pc, #244]	@ (8001610 <sevSeg_Init+0x224>)
 800151a:	6858      	ldr	r0, [r3, #4]
 800151c:	4b38      	ldr	r3, [pc, #224]	@ (8001600 <sevSeg_Init+0x214>)
 800151e:	8819      	ldrh	r1, [r3, #0]
 8001520:	4b3c      	ldr	r3, [pc, #240]	@ (8001614 <sevSeg_Init+0x228>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	001a      	movs	r2, r3
 8001526:	f001 fad0 	bl	8002aca <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 800152a:	193b      	adds	r3, r7, r4
 800152c:	193a      	adds	r2, r7, r4
 800152e:	7812      	ldrb	r2, [r2, #0]
 8001530:	0852      	lsrs	r2, r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	3301      	adds	r3, #1
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	2b07      	cmp	r3, #7
 800153e:	ddd4      	ble.n	80014ea <sevSeg_Init+0xfe>
	for(int i = 0; i <= 3; i++) {
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3301      	adds	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	2b03      	cmp	r3, #3
 800154a:	ddc3      	ble.n	80014d4 <sevSeg_Init+0xe8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 800154c:	4b30      	ldr	r3, [pc, #192]	@ (8001610 <sevSeg_Init+0x224>)
 800154e:	6898      	ldr	r0, [r3, #8]
 8001550:	4b2c      	ldr	r3, [pc, #176]	@ (8001604 <sevSeg_Init+0x218>)
 8001552:	8819      	ldrh	r1, [r3, #0]
 8001554:	4b2f      	ldr	r3, [pc, #188]	@ (8001614 <sevSeg_Init+0x228>)
 8001556:	785b      	ldrb	r3, [r3, #1]
 8001558:	001a      	movs	r2, r3
 800155a:	f001 fab6 	bl	8002aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800155e:	4b2c      	ldr	r3, [pc, #176]	@ (8001610 <sevSeg_Init+0x224>)
 8001560:	6898      	ldr	r0, [r3, #8]
 8001562:	4b28      	ldr	r3, [pc, #160]	@ (8001604 <sevSeg_Init+0x218>)
 8001564:	8819      	ldrh	r1, [r3, #0]
 8001566:	4b2b      	ldr	r3, [pc, #172]	@ (8001614 <sevSeg_Init+0x228>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	001a      	movs	r2, r3
 800156c:	f001 faad 	bl	8002aca <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8001570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001572:	0018      	movs	r0, r3
 8001574:	f003 fdb0 	bl	80050d8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8001578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800157a:	0018      	movs	r0, r3
 800157c:	f003 fd60 	bl	8005040 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8001580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001586:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 8)){ timerVal = __HAL_TIM_GET_COUNTER(htim); }
 8001588:	e003      	b.n	8001592 <sevSeg_Init+0x1a6>
 800158a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	1ad2      	subs	r2, r2, r3
 800159c:	2380      	movs	r3, #128	@ 0x80
 800159e:	019b      	lsls	r3, r3, #6
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d3f2      	bcc.n	800158a <sevSeg_Init+0x19e>

	HAL_TIM_Base_Stop(htim);
 80015a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015a6:	0018      	movs	r0, r3
 80015a8:	f003 fd96 	bl	80050d8 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 80015ac:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <sevSeg_Init+0x224>)
 80015ae:	6918      	ldr	r0, [r3, #16]
 80015b0:	4b16      	ldr	r3, [pc, #88]	@ (800160c <sevSeg_Init+0x220>)
 80015b2:	8819      	ldrh	r1, [r3, #0]
 80015b4:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <sevSeg_Init+0x228>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	001a      	movs	r2, r3
 80015ba:	f001 fa86 	bl	8002aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 80015be:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <sevSeg_Init+0x224>)
 80015c0:	6918      	ldr	r0, [r3, #16]
 80015c2:	4b12      	ldr	r3, [pc, #72]	@ (800160c <sevSeg_Init+0x220>)
 80015c4:	8819      	ldrh	r1, [r3, #0]
 80015c6:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <sevSeg_Init+0x228>)
 80015c8:	785b      	ldrb	r3, [r3, #1]
 80015ca:	001a      	movs	r2, r3
 80015cc:	f001 fa7d 	bl	8002aca <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80015d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <sevSeg_Init+0x224>)
 80015d2:	6898      	ldr	r0, [r3, #8]
 80015d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <sevSeg_Init+0x218>)
 80015d6:	8819      	ldrh	r1, [r3, #0]
 80015d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <sevSeg_Init+0x228>)
 80015da:	785b      	ldrb	r3, [r3, #1]
 80015dc:	001a      	movs	r2, r3
 80015de:	f001 fa74 	bl	8002aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80015e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <sevSeg_Init+0x224>)
 80015e4:	6898      	ldr	r0, [r3, #8]
 80015e6:	4b07      	ldr	r3, [pc, #28]	@ (8001604 <sevSeg_Init+0x218>)
 80015e8:	8819      	ldrh	r1, [r3, #0]
 80015ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <sevSeg_Init+0x228>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	001a      	movs	r2, r3
 80015f0:	f001 fa6b 	bl	8002aca <HAL_GPIO_WritePin>

}
 80015f4:	46c0      	nop			@ (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b008      	add	sp, #32
 80015fa:	bdb0      	pop	{r4, r5, r7, pc}
 80015fc:	2000021a 	.word	0x2000021a
 8001600:	2000021c 	.word	0x2000021c
 8001604:	2000021e 	.word	0x2000021e
 8001608:	20000220 	.word	0x20000220
 800160c:	20000222 	.word	0x20000222
 8001610:	2000002c 	.word	0x2000002c
 8001614:	20000040 	.word	0x20000040
 8001618:	471d3700 	.word	0x471d3700

0800161c <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	210a      	movs	r1, #10
 800162a:	0018      	movs	r0, r3
 800162c:	f7fe fd6a 	bl	8000104 <__udivsi3>
 8001630:	0003      	movs	r3, r0
 8001632:	b2da      	uxtb	r2, r3
 8001634:	2408      	movs	r4, #8
 8001636:	193b      	adds	r3, r7, r4
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	210a      	movs	r1, #10
 8001640:	0018      	movs	r0, r3
 8001642:	f7fe fde5 	bl	8000210 <__aeabi_uidivmod>
 8001646:	000b      	movs	r3, r1
 8001648:	b2da      	uxtb	r2, r3
 800164a:	193b      	adds	r3, r7, r4
 800164c:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001652:	210a      	movs	r1, #10
 8001654:	0018      	movs	r0, r3
 8001656:	f7fe fd55 	bl	8000104 <__udivsi3>
 800165a:	0003      	movs	r3, r0
 800165c:	b2da      	uxtb	r2, r3
 800165e:	193b      	adds	r3, r7, r4
 8001660:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001666:	210a      	movs	r1, #10
 8001668:	0018      	movs	r0, r3
 800166a:	f7fe fdd1 	bl	8000210 <__aeabi_uidivmod>
 800166e:	000b      	movs	r3, r1
 8001670:	b2da      	uxtb	r2, r3
 8001672:	193b      	adds	r3, r7, r4
 8001674:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 8001676:	2116      	movs	r1, #22
 8001678:	187b      	adds	r3, r7, r1
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	78db      	ldrb	r3, [r3, #3]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d102      	bne.n	800168c <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 8001686:	187b      	adds	r3, r7, r1
 8001688:	2202      	movs	r2, #2
 800168a:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	e04f      	b.n	8001732 <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 8001692:	2308      	movs	r3, #8
 8001694:	18fa      	adds	r2, r7, r3
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	18d3      	adds	r3, r2, r3
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	0019      	movs	r1, r3
 800169e:	2417      	movs	r4, #23
 80016a0:	193b      	adds	r3, r7, r4
 80016a2:	4a30      	ldr	r2, [pc, #192]	@ (8001764 <sevSeg_updateDigits+0x148>)
 80016a4:	5c52      	ldrb	r2, [r2, r1]
 80016a6:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d110      	bne.n	80016d0 <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	210a      	movs	r1, #10
 80016b4:	0018      	movs	r0, r3
 80016b6:	f7fe fd25 	bl	8000104 <__udivsi3>
 80016ba:	0003      	movs	r3, r0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	001a      	movs	r2, r3
 80016c0:	2316      	movs	r3, #22
 80016c2:	18fb      	adds	r3, r7, r3
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	18d2      	adds	r2, r2, r3
 80016c8:	193b      	adds	r3, r7, r4
 80016ca:	4927      	ldr	r1, [pc, #156]	@ (8001768 <sevSeg_updateDigits+0x14c>)
 80016cc:	5c8a      	ldrb	r2, [r1, r2]
 80016ce:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	e027      	b.n	8001726 <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 80016d6:	4b25      	ldr	r3, [pc, #148]	@ (800176c <sevSeg_updateDigits+0x150>)
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	4b25      	ldr	r3, [pc, #148]	@ (8001770 <sevSeg_updateDigits+0x154>)
 80016dc:	8819      	ldrh	r1, [r3, #0]
 80016de:	2417      	movs	r4, #23
 80016e0:	193b      	adds	r3, r7, r4
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2201      	movs	r2, #1
 80016e6:	4013      	ands	r3, r2
 80016e8:	4a22      	ldr	r2, [pc, #136]	@ (8001774 <sevSeg_updateDigits+0x158>)
 80016ea:	5cd3      	ldrb	r3, [r2, r3]
 80016ec:	001a      	movs	r2, r3
 80016ee:	f001 f9ec 	bl	8002aca <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 80016f2:	4b1e      	ldr	r3, [pc, #120]	@ (800176c <sevSeg_updateDigits+0x150>)
 80016f4:	6858      	ldr	r0, [r3, #4]
 80016f6:	4b20      	ldr	r3, [pc, #128]	@ (8001778 <sevSeg_updateDigits+0x15c>)
 80016f8:	8819      	ldrh	r1, [r3, #0]
 80016fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001774 <sevSeg_updateDigits+0x158>)
 80016fc:	785b      	ldrb	r3, [r3, #1]
 80016fe:	001a      	movs	r2, r3
 8001700:	f001 f9e3 	bl	8002aca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001704:	4b19      	ldr	r3, [pc, #100]	@ (800176c <sevSeg_updateDigits+0x150>)
 8001706:	6858      	ldr	r0, [r3, #4]
 8001708:	4b1b      	ldr	r3, [pc, #108]	@ (8001778 <sevSeg_updateDigits+0x15c>)
 800170a:	8819      	ldrh	r1, [r3, #0]
 800170c:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <sevSeg_updateDigits+0x158>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	001a      	movs	r2, r3
 8001712:	f001 f9da 	bl	8002aca <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001716:	193b      	adds	r3, r7, r4
 8001718:	193a      	adds	r2, r7, r4
 800171a:	7812      	ldrb	r2, [r2, #0]
 800171c:	0852      	lsrs	r2, r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3301      	adds	r3, #1
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2b07      	cmp	r3, #7
 800172a:	ddd4      	ble.n	80016d6 <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	3301      	adds	r3, #1
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	2b03      	cmp	r3, #3
 8001736:	ddac      	ble.n	8001692 <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001738:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <sevSeg_updateDigits+0x150>)
 800173a:	6898      	ldr	r0, [r3, #8]
 800173c:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <sevSeg_updateDigits+0x160>)
 800173e:	8819      	ldrh	r1, [r3, #0]
 8001740:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <sevSeg_updateDigits+0x158>)
 8001742:	785b      	ldrb	r3, [r3, #1]
 8001744:	001a      	movs	r2, r3
 8001746:	f001 f9c0 	bl	8002aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <sevSeg_updateDigits+0x150>)
 800174c:	6898      	ldr	r0, [r3, #8]
 800174e:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <sevSeg_updateDigits+0x160>)
 8001750:	8819      	ldrh	r1, [r3, #0]
 8001752:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <sevSeg_updateDigits+0x158>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	001a      	movs	r2, r3
 8001758:	f001 f9b7 	bl	8002aca <HAL_GPIO_WritePin>

	return;
 800175c:	46c0      	nop			@ (mov r8, r8)

}
 800175e:	46bd      	mov	sp, r7
 8001760:	b007      	add	sp, #28
 8001762:	bd90      	pop	{r4, r7, pc}
 8001764:	08005d78 	.word	0x08005d78
 8001768:	08005d84 	.word	0x08005d84
 800176c:	2000002c 	.word	0x2000002c
 8001770:	2000021a 	.word	0x2000021a
 8001774:	20000040 	.word	0x20000040
 8001778:	2000021c 	.word	0x2000021c
 800177c:	2000021e 	.word	0x2000021e

08001780 <sevSeg_setIntensity>:

void sevSeg_setIntensity(TIM_HandleTypeDef *htim_PWM, uint32_t tim_PWM_CHANNEL, uint16_t dutyCycle) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	1dbb      	adds	r3, r7, #6
 800178c:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(htim_PWM, tim_PWM_CHANNEL, dutyCycle);
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d105      	bne.n	80017a0 <sevSeg_setIntensity+0x20>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	1dba      	adds	r2, r7, #6
 800179a:	8812      	ldrh	r2, [r2, #0]
 800179c:	635a      	str	r2, [r3, #52]	@ 0x34
 800179e:	e028      	b.n	80017f2 <sevSeg_setIntensity+0x72>
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d105      	bne.n	80017b2 <sevSeg_setIntensity+0x32>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	1dbb      	adds	r3, r7, #6
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	6393      	str	r3, [r2, #56]	@ 0x38
 80017b0:	e01f      	b.n	80017f2 <sevSeg_setIntensity+0x72>
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d105      	bne.n	80017c4 <sevSeg_setIntensity+0x44>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	1dbb      	adds	r3, r7, #6
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80017c2:	e016      	b.n	80017f2 <sevSeg_setIntensity+0x72>
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2b0c      	cmp	r3, #12
 80017c8:	d105      	bne.n	80017d6 <sevSeg_setIntensity+0x56>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	1dbb      	adds	r3, r7, #6
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d4:	e00d      	b.n	80017f2 <sevSeg_setIntensity+0x72>
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2b10      	cmp	r3, #16
 80017da:	d105      	bne.n	80017e8 <sevSeg_setIntensity+0x68>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	1dbb      	adds	r3, r7, #6
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80017e6:	e004      	b.n	80017f2 <sevSeg_setIntensity+0x72>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	1dbb      	adds	r3, r7, #6
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(htim_PWM, tim_PWM_CHANNEL);
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	0011      	movs	r1, r2
 80017f8:	0018      	movs	r0, r3
 80017fa:	f003 fceb 	bl	80051d4 <HAL_TIM_PWM_Start>

}
 80017fe:	46c0      	nop			@ (mov r8, r8)
 8001800:	46bd      	mov	sp, r7
 8001802:	b004      	add	sp, #16
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180e:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <HAL_MspInit+0x44>)
 8001810:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001812:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <HAL_MspInit+0x44>)
 8001814:	2101      	movs	r1, #1
 8001816:	430a      	orrs	r2, r1
 8001818:	641a      	str	r2, [r3, #64]	@ 0x40
 800181a:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <HAL_MspInit+0x44>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	2201      	movs	r2, #1
 8001820:	4013      	ands	r3, r2
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	4b09      	ldr	r3, [pc, #36]	@ (800184c <HAL_MspInit+0x44>)
 8001828:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800182a:	4b08      	ldr	r3, [pc, #32]	@ (800184c <HAL_MspInit+0x44>)
 800182c:	2180      	movs	r1, #128	@ 0x80
 800182e:	0549      	lsls	r1, r1, #21
 8001830:	430a      	orrs	r2, r1
 8001832:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001834:	4b05      	ldr	r3, [pc, #20]	@ (800184c <HAL_MspInit+0x44>)
 8001836:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001838:	2380      	movs	r3, #128	@ 0x80
 800183a:	055b      	lsls	r3, r3, #21
 800183c:	4013      	ands	r3, r2
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001842:	46c0      	nop			@ (mov r8, r8)
 8001844:	46bd      	mov	sp, r7
 8001846:	b002      	add	sp, #8
 8001848:	bd80      	pop	{r7, pc}
 800184a:	46c0      	nop			@ (mov r8, r8)
 800184c:	40021000 	.word	0x40021000

08001850 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b08b      	sub	sp, #44	@ 0x2c
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	2414      	movs	r4, #20
 800185a:	193b      	adds	r3, r7, r4
 800185c:	0018      	movs	r0, r3
 800185e:	2314      	movs	r3, #20
 8001860:	001a      	movs	r2, r3
 8001862:	2100      	movs	r1, #0
 8001864:	f004 fa40 	bl	8005ce8 <memset>
  if(hadc->Instance==ADC1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a18      	ldr	r2, [pc, #96]	@ (80018d0 <HAL_ADC_MspInit+0x80>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d129      	bne.n	80018c6 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001872:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <HAL_ADC_MspInit+0x84>)
 8001874:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001876:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <HAL_ADC_MspInit+0x84>)
 8001878:	2180      	movs	r1, #128	@ 0x80
 800187a:	0349      	lsls	r1, r1, #13
 800187c:	430a      	orrs	r2, r1
 800187e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001880:	4b14      	ldr	r3, [pc, #80]	@ (80018d4 <HAL_ADC_MspInit+0x84>)
 8001882:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001884:	2380      	movs	r3, #128	@ 0x80
 8001886:	035b      	lsls	r3, r3, #13
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <HAL_ADC_MspInit+0x84>)
 8001890:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001892:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <HAL_ADC_MspInit+0x84>)
 8001894:	2101      	movs	r1, #1
 8001896:	430a      	orrs	r2, r1
 8001898:	635a      	str	r2, [r3, #52]	@ 0x34
 800189a:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <HAL_ADC_MspInit+0x84>)
 800189c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800189e:	2201      	movs	r2, #1
 80018a0:	4013      	ands	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018a6:	193b      	adds	r3, r7, r4
 80018a8:	2204      	movs	r2, #4
 80018aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ac:	193b      	adds	r3, r7, r4
 80018ae:	2203      	movs	r2, #3
 80018b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	193b      	adds	r3, r7, r4
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b8:	193a      	adds	r2, r7, r4
 80018ba:	23a0      	movs	r3, #160	@ 0xa0
 80018bc:	05db      	lsls	r3, r3, #23
 80018be:	0011      	movs	r1, r2
 80018c0:	0018      	movs	r0, r3
 80018c2:	f000 ff81 	bl	80027c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b00b      	add	sp, #44	@ 0x2c
 80018cc:	bd90      	pop	{r4, r7, pc}
 80018ce:	46c0      	nop			@ (mov r8, r8)
 80018d0:	40012400 	.word	0x40012400
 80018d4:	40021000 	.word	0x40021000

080018d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b095      	sub	sp, #84	@ 0x54
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	233c      	movs	r3, #60	@ 0x3c
 80018e2:	18fb      	adds	r3, r7, r3
 80018e4:	0018      	movs	r0, r3
 80018e6:	2314      	movs	r3, #20
 80018e8:	001a      	movs	r2, r3
 80018ea:	2100      	movs	r1, #0
 80018ec:	f004 f9fc 	bl	8005ce8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018f0:	2414      	movs	r4, #20
 80018f2:	193b      	adds	r3, r7, r4
 80018f4:	0018      	movs	r0, r3
 80018f6:	2328      	movs	r3, #40	@ 0x28
 80018f8:	001a      	movs	r2, r3
 80018fa:	2100      	movs	r1, #0
 80018fc:	f004 f9f4 	bl	8005ce8 <memset>
  if(hi2c->Instance==I2C1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a22      	ldr	r2, [pc, #136]	@ (8001990 <HAL_I2C_MspInit+0xb8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d13d      	bne.n	8001986 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800190a:	193b      	adds	r3, r7, r4
 800190c:	2220      	movs	r2, #32
 800190e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001910:	193b      	adds	r3, r7, r4
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001916:	193b      	adds	r3, r7, r4
 8001918:	0018      	movs	r0, r3
 800191a:	f002 fc79 	bl	8004210 <HAL_RCCEx_PeriphCLKConfig>
 800191e:	1e03      	subs	r3, r0, #0
 8001920:	d001      	beq.n	8001926 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001922:	f7ff fd5d 	bl	80013e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001926:	4b1b      	ldr	r3, [pc, #108]	@ (8001994 <HAL_I2C_MspInit+0xbc>)
 8001928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800192a:	4b1a      	ldr	r3, [pc, #104]	@ (8001994 <HAL_I2C_MspInit+0xbc>)
 800192c:	2102      	movs	r1, #2
 800192e:	430a      	orrs	r2, r1
 8001930:	635a      	str	r2, [r3, #52]	@ 0x34
 8001932:	4b18      	ldr	r3, [pc, #96]	@ (8001994 <HAL_I2C_MspInit+0xbc>)
 8001934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001936:	2202      	movs	r2, #2
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800193e:	213c      	movs	r1, #60	@ 0x3c
 8001940:	187b      	adds	r3, r7, r1
 8001942:	22c0      	movs	r2, #192	@ 0xc0
 8001944:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001946:	187b      	adds	r3, r7, r1
 8001948:	2212      	movs	r2, #18
 800194a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	187b      	adds	r3, r7, r1
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	187b      	adds	r3, r7, r1
 8001954:	2200      	movs	r2, #0
 8001956:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001958:	187b      	adds	r3, r7, r1
 800195a:	2206      	movs	r2, #6
 800195c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195e:	187b      	adds	r3, r7, r1
 8001960:	4a0d      	ldr	r2, [pc, #52]	@ (8001998 <HAL_I2C_MspInit+0xc0>)
 8001962:	0019      	movs	r1, r3
 8001964:	0010      	movs	r0, r2
 8001966:	f000 ff2f 	bl	80027c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800196a:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <HAL_I2C_MspInit+0xbc>)
 800196c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800196e:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <HAL_I2C_MspInit+0xbc>)
 8001970:	2180      	movs	r1, #128	@ 0x80
 8001972:	0389      	lsls	r1, r1, #14
 8001974:	430a      	orrs	r2, r1
 8001976:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_I2C_MspInit+0xbc>)
 800197a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800197c:	2380      	movs	r3, #128	@ 0x80
 800197e:	039b      	lsls	r3, r3, #14
 8001980:	4013      	ands	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001986:	46c0      	nop			@ (mov r8, r8)
 8001988:	46bd      	mov	sp, r7
 800198a:	b015      	add	sp, #84	@ 0x54
 800198c:	bd90      	pop	{r4, r7, pc}
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	40005400 	.word	0x40005400
 8001994:	40021000 	.word	0x40021000
 8001998:	50000400 	.word	0x50000400

0800199c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b08f      	sub	sp, #60	@ 0x3c
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019a4:	2410      	movs	r4, #16
 80019a6:	193b      	adds	r3, r7, r4
 80019a8:	0018      	movs	r0, r3
 80019aa:	2328      	movs	r3, #40	@ 0x28
 80019ac:	001a      	movs	r2, r3
 80019ae:	2100      	movs	r1, #0
 80019b0:	f004 f99a 	bl	8005ce8 <memset>
  if(hrtc->Instance==RTC)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a19      	ldr	r2, [pc, #100]	@ (8001a20 <HAL_RTC_MspInit+0x84>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d12c      	bne.n	8001a18 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019be:	193b      	adds	r3, r7, r4
 80019c0:	2280      	movs	r2, #128	@ 0x80
 80019c2:	0292      	lsls	r2, r2, #10
 80019c4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80019c6:	193b      	adds	r3, r7, r4
 80019c8:	2280      	movs	r2, #128	@ 0x80
 80019ca:	0052      	lsls	r2, r2, #1
 80019cc:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ce:	193b      	adds	r3, r7, r4
 80019d0:	0018      	movs	r0, r3
 80019d2:	f002 fc1d 	bl	8004210 <HAL_RCCEx_PeriphCLKConfig>
 80019d6:	1e03      	subs	r3, r0, #0
 80019d8:	d001      	beq.n	80019de <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80019da:	f7ff fd01 	bl	80013e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019de:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <HAL_RTC_MspInit+0x88>)
 80019e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019e2:	4b10      	ldr	r3, [pc, #64]	@ (8001a24 <HAL_RTC_MspInit+0x88>)
 80019e4:	2180      	movs	r1, #128	@ 0x80
 80019e6:	0209      	lsls	r1, r1, #8
 80019e8:	430a      	orrs	r2, r1
 80019ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80019ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001a24 <HAL_RTC_MspInit+0x88>)
 80019ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <HAL_RTC_MspInit+0x88>)
 80019f2:	2180      	movs	r1, #128	@ 0x80
 80019f4:	00c9      	lsls	r1, r1, #3
 80019f6:	430a      	orrs	r2, r1
 80019f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <HAL_RTC_MspInit+0x88>)
 80019fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019fe:	2380      	movs	r3, #128	@ 0x80
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4013      	ands	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2002      	movs	r0, #2
 8001a0e:	f000 fea9 	bl	8002764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001a12:	2002      	movs	r0, #2
 8001a14:	f000 febb 	bl	800278e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a18:	46c0      	nop			@ (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b00f      	add	sp, #60	@ 0x3c
 8001a1e:	bd90      	pop	{r4, r7, pc}
 8001a20:	40002800 	.word	0x40002800
 8001a24:	40021000 	.word	0x40021000

08001a28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	2380      	movs	r3, #128	@ 0x80
 8001a36:	05db      	lsls	r3, r3, #23
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d10b      	bne.n	8001a54 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a3c:	4b07      	ldr	r3, [pc, #28]	@ (8001a5c <HAL_TIM_PWM_MspInit+0x34>)
 8001a3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a40:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_TIM_PWM_MspInit+0x34>)
 8001a42:	2101      	movs	r1, #1
 8001a44:	430a      	orrs	r2, r1
 8001a46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a48:	4b04      	ldr	r3, [pc, #16]	@ (8001a5c <HAL_TIM_PWM_MspInit+0x34>)
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4013      	ands	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a54:	46c0      	nop			@ (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b004      	add	sp, #16
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a98 <HAL_TIM_Base_MspInit+0x38>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d10d      	bne.n	8001a8e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a72:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <HAL_TIM_Base_MspInit+0x3c>)
 8001a74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a76:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <HAL_TIM_Base_MspInit+0x3c>)
 8001a78:	2180      	movs	r1, #128	@ 0x80
 8001a7a:	0209      	lsls	r1, r1, #8
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_TIM_Base_MspInit+0x3c>)
 8001a82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a84:	2380      	movs	r3, #128	@ 0x80
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b004      	add	sp, #16
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	40002000 	.word	0x40002000
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b089      	sub	sp, #36	@ 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	240c      	movs	r4, #12
 8001aaa:	193b      	adds	r3, r7, r4
 8001aac:	0018      	movs	r0, r3
 8001aae:	2314      	movs	r3, #20
 8001ab0:	001a      	movs	r2, r3
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	f004 f918 	bl	8005ce8 <memset>
  if(htim->Instance==TIM2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2380      	movs	r3, #128	@ 0x80
 8001abe:	05db      	lsls	r3, r3, #23
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d121      	bne.n	8001b08 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac4:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <HAL_TIM_MspPostInit+0x70>)
 8001ac6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <HAL_TIM_MspPostInit+0x70>)
 8001aca:	2104      	movs	r1, #4
 8001acc:	430a      	orrs	r2, r1
 8001ace:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <HAL_TIM_MspPostInit+0x70>)
 8001ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 8001adc:	0021      	movs	r1, r4
 8001ade:	187b      	adds	r3, r7, r1
 8001ae0:	2240      	movs	r2, #64	@ 0x40
 8001ae2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	187b      	adds	r3, r7, r1
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	187b      	adds	r3, r7, r1
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	187b      	adds	r3, r7, r1
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001af6:	187b      	adds	r3, r7, r1
 8001af8:	2202      	movs	r2, #2
 8001afa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 8001afc:	187b      	adds	r3, r7, r1
 8001afe:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <HAL_TIM_MspPostInit+0x74>)
 8001b00:	0019      	movs	r1, r3
 8001b02:	0010      	movs	r0, r2
 8001b04:	f000 fe60 	bl	80027c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b08:	46c0      	nop			@ (mov r8, r8)
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b009      	add	sp, #36	@ 0x24
 8001b0e:	bd90      	pop	{r4, r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	50000800 	.word	0x50000800

08001b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b1c:	46c0      	nop			@ (mov r8, r8)
 8001b1e:	e7fd      	b.n	8001b1c <NMI_Handler+0x4>

08001b20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b24:	46c0      	nop			@ (mov r8, r8)
 8001b26:	e7fd      	b.n	8001b24 <HardFault_Handler+0x4>

08001b28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b2c:	46c0      	nop			@ (mov r8, r8)
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b36:	46c0      	nop			@ (mov r8, r8)
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b40:	f000 f8ca 	bl	8001cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b44:	46c0      	nop			@ (mov r8, r8)
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001b50:	4b03      	ldr	r3, [pc, #12]	@ (8001b60 <RTC_TAMP_IRQHandler+0x14>)
 8001b52:	0018      	movs	r0, r3
 8001b54:	f003 f89c 	bl	8004c90 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8001b58:	46c0      	nop			@ (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	46c0      	nop			@ (mov r8, r8)
 8001b60:	20000128 	.word	0x20000128

08001b64 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f000 ffe7 	bl	8002b3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 8001b6e:	2002      	movs	r0, #2
 8001b70:	f000 ffe4 	bl	8002b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001b74:	46c0      	nop			@ (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 8001b7e:	2004      	movs	r0, #4
 8001b80:	f000 ffdc 	bl	8002b3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 8001b84:	2008      	movs	r0, #8
 8001b86:	f000 ffd9 	bl	8002b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 8001b94:	2380      	movs	r3, #128	@ 0x80
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f000 ffcf 	bl	8002b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001b9e:	46c0      	nop			@ (mov r8, r8)
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba8:	46c0      	nop			@ (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bb0:	480d      	ldr	r0, [pc, #52]	@ (8001be8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bb2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bb4:	f7ff fff6 	bl	8001ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb8:	480c      	ldr	r0, [pc, #48]	@ (8001bec <LoopForever+0x6>)
  ldr r1, =_edata
 8001bba:	490d      	ldr	r1, [pc, #52]	@ (8001bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf4 <LoopForever+0xe>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc0:	e002      	b.n	8001bc8 <LoopCopyDataInit>

08001bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc6:	3304      	adds	r3, #4

08001bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bcc:	d3f9      	bcc.n	8001bc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bce:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bd0:	4c0a      	ldr	r4, [pc, #40]	@ (8001bfc <LoopForever+0x16>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd4:	e001      	b.n	8001bda <LoopFillZerobss>

08001bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd8:	3204      	adds	r2, #4

08001bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bdc:	d3fb      	bcc.n	8001bd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bde:	f004 f88b 	bl	8005cf8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001be2:	f7fe fd05 	bl	80005f0 <main>

08001be6 <LoopForever>:

LoopForever:
  b LoopForever
 8001be6:	e7fe      	b.n	8001be6 <LoopForever>
  ldr   r0, =_estack
 8001be8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf0:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001bf4:	08005e24 	.word	0x08005e24
  ldr r2, =_sbss
 8001bf8:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001bfc:	20000228 	.word	0x20000228

08001c00 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c00:	e7fe      	b.n	8001c00 <ADC1_IRQHandler>
	...

08001c04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c0a:	1dfb      	adds	r3, r7, #7
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c10:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <HAL_Init+0x3c>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b0a      	ldr	r3, [pc, #40]	@ (8001c40 <HAL_Init+0x3c>)
 8001c16:	2180      	movs	r1, #128	@ 0x80
 8001c18:	0049      	lsls	r1, r1, #1
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c1e:	2003      	movs	r0, #3
 8001c20:	f000 f810 	bl	8001c44 <HAL_InitTick>
 8001c24:	1e03      	subs	r3, r0, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001c28:	1dfb      	adds	r3, r7, #7
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
 8001c2e:	e001      	b.n	8001c34 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001c30:	f7ff fdea 	bl	8001808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c34:	1dfb      	adds	r3, r7, #7
 8001c36:	781b      	ldrb	r3, [r3, #0]
}
 8001c38:	0018      	movs	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b002      	add	sp, #8
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40022000 	.word	0x40022000

08001c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c4c:	230f      	movs	r3, #15
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001c54:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <HAL_InitTick+0x88>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d02b      	beq.n	8001cb4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd0 <HAL_InitTick+0x8c>)
 8001c5e:	681c      	ldr	r4, [r3, #0]
 8001c60:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <HAL_InitTick+0x88>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	0019      	movs	r1, r3
 8001c66:	23fa      	movs	r3, #250	@ 0xfa
 8001c68:	0098      	lsls	r0, r3, #2
 8001c6a:	f7fe fa4b 	bl	8000104 <__udivsi3>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	0019      	movs	r1, r3
 8001c72:	0020      	movs	r0, r4
 8001c74:	f7fe fa46 	bl	8000104 <__udivsi3>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f000 fd97 	bl	80027ae <HAL_SYSTICK_Config>
 8001c80:	1e03      	subs	r3, r0, #0
 8001c82:	d112      	bne.n	8001caa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d80a      	bhi.n	8001ca0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	425b      	negs	r3, r3
 8001c90:	2200      	movs	r2, #0
 8001c92:	0018      	movs	r0, r3
 8001c94:	f000 fd66 	bl	8002764 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c98:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <HAL_InitTick+0x90>)
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	e00d      	b.n	8001cbc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001ca0:	230f      	movs	r3, #15
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	701a      	strb	r2, [r3, #0]
 8001ca8:	e008      	b.n	8001cbc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001caa:	230f      	movs	r3, #15
 8001cac:	18fb      	adds	r3, r7, r3
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
 8001cb2:	e003      	b.n	8001cbc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cb4:	230f      	movs	r3, #15
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001cbc:	230f      	movs	r3, #15
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	781b      	ldrb	r3, [r3, #0]
}
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b005      	add	sp, #20
 8001cc8:	bd90      	pop	{r4, r7, pc}
 8001cca:	46c0      	nop			@ (mov r8, r8)
 8001ccc:	2000004c 	.word	0x2000004c
 8001cd0:	20000044 	.word	0x20000044
 8001cd4:	20000048 	.word	0x20000048

08001cd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <HAL_IncTick+0x1c>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	001a      	movs	r2, r3
 8001ce2:	4b05      	ldr	r3, [pc, #20]	@ (8001cf8 <HAL_IncTick+0x20>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	18d2      	adds	r2, r2, r3
 8001ce8:	4b03      	ldr	r3, [pc, #12]	@ (8001cf8 <HAL_IncTick+0x20>)
 8001cea:	601a      	str	r2, [r3, #0]
}
 8001cec:	46c0      	nop			@ (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			@ (mov r8, r8)
 8001cf4:	2000004c 	.word	0x2000004c
 8001cf8:	20000224 	.word	0x20000224

08001cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001d00:	4b02      	ldr	r3, [pc, #8]	@ (8001d0c <HAL_GetTick+0x10>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	0018      	movs	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	46c0      	nop			@ (mov r8, r8)
 8001d0c:	20000224 	.word	0x20000224

08001d10 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a05      	ldr	r2, [pc, #20]	@ (8001d34 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001d20:	401a      	ands	r2, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	601a      	str	r2, [r3, #0]
}
 8001d2a:	46c0      	nop			@ (mov r8, r8)
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b002      	add	sp, #8
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	fe3fffff 	.word	0xfe3fffff

08001d38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	23e0      	movs	r3, #224	@ 0xe0
 8001d46:	045b      	lsls	r3, r3, #17
 8001d48:	4013      	ands	r3, r2
}
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b002      	add	sp, #8
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	2104      	movs	r1, #4
 8001d66:	400a      	ands	r2, r1
 8001d68:	2107      	movs	r1, #7
 8001d6a:	4091      	lsls	r1, r2
 8001d6c:	000a      	movs	r2, r1
 8001d6e:	43d2      	mvns	r2, r2
 8001d70:	401a      	ands	r2, r3
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2104      	movs	r1, #4
 8001d76:	400b      	ands	r3, r1
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4099      	lsls	r1, r3
 8001d7c:	000b      	movs	r3, r1
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001d84:	46c0      	nop			@ (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b004      	add	sp, #16
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	2104      	movs	r1, #4
 8001d9e:	400a      	ands	r2, r1
 8001da0:	2107      	movs	r1, #7
 8001da2:	4091      	lsls	r1, r2
 8001da4:	000a      	movs	r2, r1
 8001da6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2104      	movs	r1, #4
 8001dac:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001dae:	40da      	lsrs	r2, r3
 8001db0:	0013      	movs	r3, r2
}
 8001db2:	0018      	movs	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b002      	add	sp, #8
 8001db8:	bd80      	pop	{r7, pc}

08001dba <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	211f      	movs	r1, #31
 8001dce:	400a      	ands	r2, r1
 8001dd0:	210f      	movs	r1, #15
 8001dd2:	4091      	lsls	r1, r2
 8001dd4:	000a      	movs	r2, r1
 8001dd6:	43d2      	mvns	r2, r2
 8001dd8:	401a      	ands	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	0e9b      	lsrs	r3, r3, #26
 8001dde:	210f      	movs	r1, #15
 8001de0:	4019      	ands	r1, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	201f      	movs	r0, #31
 8001de6:	4003      	ands	r3, r0
 8001de8:	4099      	lsls	r1, r3
 8001dea:	000b      	movs	r3, r1
 8001dec:	431a      	orrs	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b004      	add	sp, #16
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	035b      	lsls	r3, r3, #13
 8001e0c:	0b5b      	lsrs	r3, r3, #13
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e14:	46c0      	nop			@ (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b002      	add	sp, #8
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	0352      	lsls	r2, r2, #13
 8001e2e:	0b52      	lsrs	r2, r2, #13
 8001e30:	43d2      	mvns	r2, r2
 8001e32:	401a      	ands	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e38:	46c0      	nop			@ (mov r8, r8)
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b002      	add	sp, #8
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	0212      	lsls	r2, r2, #8
 8001e54:	43d2      	mvns	r2, r2
 8001e56:	401a      	ands	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	021b      	lsls	r3, r3, #8
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	400b      	ands	r3, r1
 8001e60:	4904      	ldr	r1, [pc, #16]	@ (8001e74 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001e62:	400b      	ands	r3, r1
 8001e64:	431a      	orrs	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b004      	add	sp, #16
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	46c0      	nop			@ (mov r8, r8)
 8001e74:	07ffff00 	.word	0x07ffff00

08001e78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	4a05      	ldr	r2, [pc, #20]	@ (8001e9c <LL_ADC_EnableInternalRegulator+0x24>)
 8001e86:	4013      	ands	r3, r2
 8001e88:	2280      	movs	r2, #128	@ 0x80
 8001e8a:	0552      	lsls	r2, r2, #21
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b002      	add	sp, #8
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			@ (mov r8, r8)
 8001e9c:	6fffffe8 	.word	0x6fffffe8

08001ea0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	2380      	movs	r3, #128	@ 0x80
 8001eae:	055b      	lsls	r3, r3, #21
 8001eb0:	401a      	ands	r2, r3
 8001eb2:	2380      	movs	r3, #128	@ 0x80
 8001eb4:	055b      	lsls	r3, r3, #21
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d101      	bne.n	8001ebe <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b002      	add	sp, #8
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <LL_ADC_IsEnabled+0x18>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <LL_ADC_IsEnabled+0x1a>
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b002      	add	sp, #8
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2204      	movs	r2, #4
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d101      	bne.n	8001f02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b002      	add	sp, #8
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f14:	231f      	movs	r3, #31
 8001f16:	18fb      	adds	r3, r7, r3
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e17f      	b.n	8002232 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10a      	bne.n	8001f50 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f7ff fc87 	bl	8001850 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2254      	movs	r2, #84	@ 0x54
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7ff ffa3 	bl	8001ea0 <LL_ADC_IsInternalRegulatorEnabled>
 8001f5a:	1e03      	subs	r3, r0, #0
 8001f5c:	d115      	bne.n	8001f8a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	0018      	movs	r0, r3
 8001f64:	f7ff ff88 	bl	8001e78 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f68:	4bb4      	ldr	r3, [pc, #720]	@ (800223c <HAL_ADC_Init+0x330>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	49b4      	ldr	r1, [pc, #720]	@ (8002240 <HAL_ADC_Init+0x334>)
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f7fe f8c8 	bl	8000104 <__udivsi3>
 8001f74:	0003      	movs	r3, r0
 8001f76:	3301      	adds	r3, #1
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f7c:	e002      	b.n	8001f84 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f9      	bne.n	8001f7e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f7ff ff86 	bl	8001ea0 <LL_ADC_IsInternalRegulatorEnabled>
 8001f94:	1e03      	subs	r3, r0, #0
 8001f96:	d10f      	bne.n	8001fb8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9c:	2210      	movs	r2, #16
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa8:	2201      	movs	r2, #1
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fb0:	231f      	movs	r3, #31
 8001fb2:	18fb      	adds	r3, r7, r3
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f7ff ff94 	bl	8001eea <LL_ADC_REG_IsConversionOngoing>
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fca:	2210      	movs	r2, #16
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d000      	beq.n	8001fd2 <HAL_ADC_Init+0xc6>
 8001fd0:	e122      	b.n	8002218 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d000      	beq.n	8001fda <HAL_ADC_Init+0xce>
 8001fd8:	e11e      	b.n	8002218 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fde:	4a99      	ldr	r2, [pc, #612]	@ (8002244 <HAL_ADC_Init+0x338>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f7ff ff6a 	bl	8001ec8 <LL_ADC_IsEnabled>
 8001ff4:	1e03      	subs	r3, r0, #0
 8001ff6:	d000      	beq.n	8001ffa <HAL_ADC_Init+0xee>
 8001ff8:	e0ad      	b.n	8002156 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	7e1b      	ldrb	r3, [r3, #24]
 8002002:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002004:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	7e5b      	ldrb	r3, [r3, #25]
 800200a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800200c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	7e9b      	ldrb	r3, [r3, #26]
 8002012:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002014:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <HAL_ADC_Init+0x118>
 800201e:	2380      	movs	r3, #128	@ 0x80
 8002020:	015b      	lsls	r3, r3, #5
 8002022:	e000      	b.n	8002026 <HAL_ADC_Init+0x11a>
 8002024:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002026:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800202c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b00      	cmp	r3, #0
 8002034:	da04      	bge.n	8002040 <HAL_ADC_Init+0x134>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	085b      	lsrs	r3, r3, #1
 800203e:	e001      	b.n	8002044 <HAL_ADC_Init+0x138>
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002044:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	212c      	movs	r1, #44	@ 0x2c
 800204a:	5c5b      	ldrb	r3, [r3, r1]
 800204c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800204e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2220      	movs	r2, #32
 800205a:	5c9b      	ldrb	r3, [r3, r2]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d115      	bne.n	800208c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	7e9b      	ldrb	r3, [r3, #26]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d105      	bne.n	8002074 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	2280      	movs	r2, #128	@ 0x80
 800206c:	0252      	lsls	r2, r2, #9
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	e00b      	b.n	800208c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002078:	2220      	movs	r2, #32
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002084:	2201      	movs	r2, #1
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002098:	23e0      	movs	r3, #224	@ 0xe0
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80020a2:	4313      	orrs	r3, r2
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a65      	ldr	r2, [pc, #404]	@ (8002248 <HAL_ADC_Init+0x33c>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	0019      	movs	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	430a      	orrs	r2, r1
 80020be:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	0f9b      	lsrs	r3, r3, #30
 80020c6:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80020cc:	4313      	orrs	r3, r2
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	223c      	movs	r2, #60	@ 0x3c
 80020d8:	5c9b      	ldrb	r3, [r3, r2]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d111      	bne.n	8002102 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	0f9b      	lsrs	r3, r3, #30
 80020e4:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80020ea:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80020f0:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80020f6:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	2201      	movs	r2, #1
 80020fe:	4313      	orrs	r3, r2
 8002100:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	4a50      	ldr	r2, [pc, #320]	@ (800224c <HAL_ADC_Init+0x340>)
 800210a:	4013      	ands	r3, r2
 800210c:	0019      	movs	r1, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	430a      	orrs	r2, r1
 8002116:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	23c0      	movs	r3, #192	@ 0xc0
 800211e:	061b      	lsls	r3, r3, #24
 8002120:	429a      	cmp	r2, r3
 8002122:	d018      	beq.n	8002156 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002128:	2380      	movs	r3, #128	@ 0x80
 800212a:	05db      	lsls	r3, r3, #23
 800212c:	429a      	cmp	r2, r3
 800212e:	d012      	beq.n	8002156 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002134:	2380      	movs	r3, #128	@ 0x80
 8002136:	061b      	lsls	r3, r3, #24
 8002138:	429a      	cmp	r2, r3
 800213a:	d00c      	beq.n	8002156 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800213c:	4b44      	ldr	r3, [pc, #272]	@ (8002250 <HAL_ADC_Init+0x344>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a44      	ldr	r2, [pc, #272]	@ (8002254 <HAL_ADC_Init+0x348>)
 8002142:	4013      	ands	r3, r2
 8002144:	0019      	movs	r1, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	23f0      	movs	r3, #240	@ 0xf0
 800214c:	039b      	lsls	r3, r3, #14
 800214e:	401a      	ands	r2, r3
 8002150:	4b3f      	ldr	r3, [pc, #252]	@ (8002250 <HAL_ADC_Init+0x344>)
 8002152:	430a      	orrs	r2, r1
 8002154:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800215e:	001a      	movs	r2, r3
 8002160:	2100      	movs	r1, #0
 8002162:	f7ff fdf6 	bl	8001d52 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800216e:	493a      	ldr	r1, [pc, #232]	@ (8002258 <HAL_ADC_Init+0x34c>)
 8002170:	001a      	movs	r2, r3
 8002172:	f7ff fdee 	bl	8001d52 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2110      	movs	r1, #16
 800218a:	4249      	negs	r1, r1
 800218c:	430a      	orrs	r2, r1
 800218e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002190:	e018      	b.n	80021c4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	2380      	movs	r3, #128	@ 0x80
 8002198:	039b      	lsls	r3, r3, #14
 800219a:	429a      	cmp	r2, r3
 800219c:	d112      	bne.n	80021c4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	3b01      	subs	r3, #1
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	221c      	movs	r2, #28
 80021ae:	4013      	ands	r3, r2
 80021b0:	2210      	movs	r2, #16
 80021b2:	4252      	negs	r2, r2
 80021b4:	409a      	lsls	r2, r3
 80021b6:	0011      	movs	r1, r2
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2100      	movs	r1, #0
 80021ca:	0018      	movs	r0, r3
 80021cc:	f7ff fdde 	bl	8001d8c <LL_ADC_GetSamplingTimeCommonChannels>
 80021d0:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d10b      	bne.n	80021f2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e4:	2203      	movs	r2, #3
 80021e6:	4393      	bics	r3, r2
 80021e8:	2201      	movs	r2, #1
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80021f0:	e01c      	b.n	800222c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f6:	2212      	movs	r2, #18
 80021f8:	4393      	bics	r3, r2
 80021fa:	2210      	movs	r2, #16
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002206:	2201      	movs	r2, #1
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800220e:	231f      	movs	r3, #31
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	2201      	movs	r2, #1
 8002214:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002216:	e009      	b.n	800222c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221c:	2210      	movs	r2, #16
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002224:	231f      	movs	r3, #31
 8002226:	18fb      	adds	r3, r7, r3
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800222c:	231f      	movs	r3, #31
 800222e:	18fb      	adds	r3, r7, r3
 8002230:	781b      	ldrb	r3, [r3, #0]
}
 8002232:	0018      	movs	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	b008      	add	sp, #32
 8002238:	bd80      	pop	{r7, pc}
 800223a:	46c0      	nop			@ (mov r8, r8)
 800223c:	20000044 	.word	0x20000044
 8002240:	00030d40 	.word	0x00030d40
 8002244:	fffffefd 	.word	0xfffffefd
 8002248:	ffde0201 	.word	0xffde0201
 800224c:	1ffffc02 	.word	0x1ffffc02
 8002250:	40012708 	.word	0x40012708
 8002254:	ffc3ffff 	.word	0xffc3ffff
 8002258:	07ffff04 	.word	0x07ffff04

0800225c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002266:	2317      	movs	r3, #23
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2254      	movs	r2, #84	@ 0x54
 8002276:	5c9b      	ldrb	r3, [r3, r2]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x24>
 800227c:	2302      	movs	r3, #2
 800227e:	e1c0      	b.n	8002602 <HAL_ADC_ConfigChannel+0x3a6>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2254      	movs	r2, #84	@ 0x54
 8002284:	2101      	movs	r1, #1
 8002286:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0018      	movs	r0, r3
 800228e:	f7ff fe2c 	bl	8001eea <LL_ADC_REG_IsConversionOngoing>
 8002292:	1e03      	subs	r3, r0, #0
 8002294:	d000      	beq.n	8002298 <HAL_ADC_ConfigChannel+0x3c>
 8002296:	e1a3      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d100      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x46>
 80022a0:	e143      	b.n	800252a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	2380      	movs	r3, #128	@ 0x80
 80022a8:	061b      	lsls	r3, r3, #24
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d004      	beq.n	80022b8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80022b2:	4ac1      	ldr	r2, [pc, #772]	@ (80025b8 <HAL_ADC_ConfigChannel+0x35c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d108      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	0019      	movs	r1, r3
 80022c2:	0010      	movs	r0, r2
 80022c4:	f7ff fd99 	bl	8001dfa <LL_ADC_REG_SetSequencerChAdd>
 80022c8:	e0c9      	b.n	800245e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	211f      	movs	r1, #31
 80022d4:	400b      	ands	r3, r1
 80022d6:	210f      	movs	r1, #15
 80022d8:	4099      	lsls	r1, r3
 80022da:	000b      	movs	r3, r1
 80022dc:	43db      	mvns	r3, r3
 80022de:	4013      	ands	r3, r2
 80022e0:	0019      	movs	r1, r3
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	035b      	lsls	r3, r3, #13
 80022e8:	0b5b      	lsrs	r3, r3, #13
 80022ea:	d105      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x9c>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	0e9b      	lsrs	r3, r3, #26
 80022f2:	221f      	movs	r2, #31
 80022f4:	4013      	ands	r3, r2
 80022f6:	e098      	b.n	800242a <HAL_ADC_ConfigChannel+0x1ce>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2201      	movs	r2, #1
 80022fe:	4013      	ands	r3, r2
 8002300:	d000      	beq.n	8002304 <HAL_ADC_ConfigChannel+0xa8>
 8002302:	e091      	b.n	8002428 <HAL_ADC_ConfigChannel+0x1cc>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2202      	movs	r2, #2
 800230a:	4013      	ands	r3, r2
 800230c:	d000      	beq.n	8002310 <HAL_ADC_ConfigChannel+0xb4>
 800230e:	e089      	b.n	8002424 <HAL_ADC_ConfigChannel+0x1c8>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2204      	movs	r2, #4
 8002316:	4013      	ands	r3, r2
 8002318:	d000      	beq.n	800231c <HAL_ADC_ConfigChannel+0xc0>
 800231a:	e081      	b.n	8002420 <HAL_ADC_ConfigChannel+0x1c4>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2208      	movs	r2, #8
 8002322:	4013      	ands	r3, r2
 8002324:	d000      	beq.n	8002328 <HAL_ADC_ConfigChannel+0xcc>
 8002326:	e079      	b.n	800241c <HAL_ADC_ConfigChannel+0x1c0>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2210      	movs	r2, #16
 800232e:	4013      	ands	r3, r2
 8002330:	d000      	beq.n	8002334 <HAL_ADC_ConfigChannel+0xd8>
 8002332:	e071      	b.n	8002418 <HAL_ADC_ConfigChannel+0x1bc>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2220      	movs	r2, #32
 800233a:	4013      	ands	r3, r2
 800233c:	d000      	beq.n	8002340 <HAL_ADC_ConfigChannel+0xe4>
 800233e:	e069      	b.n	8002414 <HAL_ADC_ConfigChannel+0x1b8>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2240      	movs	r2, #64	@ 0x40
 8002346:	4013      	ands	r3, r2
 8002348:	d000      	beq.n	800234c <HAL_ADC_ConfigChannel+0xf0>
 800234a:	e061      	b.n	8002410 <HAL_ADC_ConfigChannel+0x1b4>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2280      	movs	r2, #128	@ 0x80
 8002352:	4013      	ands	r3, r2
 8002354:	d000      	beq.n	8002358 <HAL_ADC_ConfigChannel+0xfc>
 8002356:	e059      	b.n	800240c <HAL_ADC_ConfigChannel+0x1b0>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	2380      	movs	r3, #128	@ 0x80
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4013      	ands	r3, r2
 8002362:	d151      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x1ac>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	2380      	movs	r3, #128	@ 0x80
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4013      	ands	r3, r2
 800236e:	d149      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x1a8>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	2380      	movs	r3, #128	@ 0x80
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4013      	ands	r3, r2
 800237a:	d141      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x1a4>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	2380      	movs	r3, #128	@ 0x80
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	4013      	ands	r3, r2
 8002386:	d139      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x1a0>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	2380      	movs	r3, #128	@ 0x80
 800238e:	015b      	lsls	r3, r3, #5
 8002390:	4013      	ands	r3, r2
 8002392:	d131      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x19c>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	2380      	movs	r3, #128	@ 0x80
 800239a:	019b      	lsls	r3, r3, #6
 800239c:	4013      	ands	r3, r2
 800239e:	d129      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x198>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	2380      	movs	r3, #128	@ 0x80
 80023a6:	01db      	lsls	r3, r3, #7
 80023a8:	4013      	ands	r3, r2
 80023aa:	d121      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x194>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2380      	movs	r3, #128	@ 0x80
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	4013      	ands	r3, r2
 80023b6:	d119      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x190>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	2380      	movs	r3, #128	@ 0x80
 80023be:	025b      	lsls	r3, r3, #9
 80023c0:	4013      	ands	r3, r2
 80023c2:	d111      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x18c>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	2380      	movs	r3, #128	@ 0x80
 80023ca:	029b      	lsls	r3, r3, #10
 80023cc:	4013      	ands	r3, r2
 80023ce:	d109      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x188>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	2380      	movs	r3, #128	@ 0x80
 80023d6:	02db      	lsls	r3, r3, #11
 80023d8:	4013      	ands	r3, r2
 80023da:	d001      	beq.n	80023e0 <HAL_ADC_ConfigChannel+0x184>
 80023dc:	2312      	movs	r3, #18
 80023de:	e024      	b.n	800242a <HAL_ADC_ConfigChannel+0x1ce>
 80023e0:	2300      	movs	r3, #0
 80023e2:	e022      	b.n	800242a <HAL_ADC_ConfigChannel+0x1ce>
 80023e4:	2311      	movs	r3, #17
 80023e6:	e020      	b.n	800242a <HAL_ADC_ConfigChannel+0x1ce>
 80023e8:	2310      	movs	r3, #16
 80023ea:	e01e      	b.n	800242a <HAL_ADC_ConfigChannel+0x1ce>
 80023ec:	230f      	movs	r3, #15
 80023ee:	e01c      	b.n	800242a <HAL_ADC_ConfigChannel+0x1ce>
 80023f0:	230e      	movs	r3, #14
 80023f2:	e01a      	b.n	800242a <HAL_ADC_ConfigChannel+0x1ce>
 80023f4:	230d      	movs	r3, #13
 80023f6:	e018      	b.n	800242a <HAL_ADC_ConfigChannel+0x1ce>
 80023f8:	230c      	movs	r3, #12
 80023fa:	e016      	b.n	800242a <HAL_ADC_ConfigChannel+0x1ce>
 80023fc:	230b      	movs	r3, #11
 80023fe:	e014      	b.n	800242a <HAL_ADC_ConfigChannel+0x1ce>
 8002400:	230a      	movs	r3, #10
 8002402:	e012      	b.n	800242a <HAL_ADC_ConfigChannel+0x1ce>
 8002404:	2309      	movs	r3, #9
 8002406:	e010      	b.n	800242a <HAL_ADC_ConfigChannel+0x1ce>
 8002408:	2308      	movs	r3, #8
 800240a:	e00e      	b.n	800242a <HAL_ADC_ConfigChannel+0x1ce>
 800240c:	2307      	movs	r3, #7
 800240e:	e00c      	b.n	800242a <HAL_ADC_ConfigChannel+0x1ce>
 8002410:	2306      	movs	r3, #6
 8002412:	e00a      	b.n	800242a <HAL_ADC_ConfigChannel+0x1ce>
 8002414:	2305      	movs	r3, #5
 8002416:	e008      	b.n	800242a <HAL_ADC_ConfigChannel+0x1ce>
 8002418:	2304      	movs	r3, #4
 800241a:	e006      	b.n	800242a <HAL_ADC_ConfigChannel+0x1ce>
 800241c:	2303      	movs	r3, #3
 800241e:	e004      	b.n	800242a <HAL_ADC_ConfigChannel+0x1ce>
 8002420:	2302      	movs	r3, #2
 8002422:	e002      	b.n	800242a <HAL_ADC_ConfigChannel+0x1ce>
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_ADC_ConfigChannel+0x1ce>
 8002428:	2300      	movs	r3, #0
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	6852      	ldr	r2, [r2, #4]
 800242e:	201f      	movs	r0, #31
 8002430:	4002      	ands	r2, r0
 8002432:	4093      	lsls	r3, r2
 8002434:	000a      	movs	r2, r1
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	429a      	cmp	r2, r3
 800244a:	d808      	bhi.n	800245e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	001a      	movs	r2, r3
 800245a:	f7ff fcae 	bl	8001dba <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6819      	ldr	r1, [r3, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	001a      	movs	r2, r3
 800246c:	f7ff fce8 	bl	8001e40 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	db00      	blt.n	800247a <HAL_ADC_ConfigChannel+0x21e>
 8002478:	e0bc      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800247a:	4b50      	ldr	r3, [pc, #320]	@ (80025bc <HAL_ADC_ConfigChannel+0x360>)
 800247c:	0018      	movs	r0, r3
 800247e:	f7ff fc5b 	bl	8001d38 <LL_ADC_GetCommonPathInternalCh>
 8002482:	0003      	movs	r3, r0
 8002484:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a4d      	ldr	r2, [pc, #308]	@ (80025c0 <HAL_ADC_ConfigChannel+0x364>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d122      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	2380      	movs	r3, #128	@ 0x80
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002498:	d11d      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	2280      	movs	r2, #128	@ 0x80
 800249e:	0412      	lsls	r2, r2, #16
 80024a0:	4313      	orrs	r3, r2
 80024a2:	4a46      	ldr	r2, [pc, #280]	@ (80025bc <HAL_ADC_ConfigChannel+0x360>)
 80024a4:	0019      	movs	r1, r3
 80024a6:	0010      	movs	r0, r2
 80024a8:	f7ff fc32 	bl	8001d10 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024ac:	4b45      	ldr	r3, [pc, #276]	@ (80025c4 <HAL_ADC_ConfigChannel+0x368>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4945      	ldr	r1, [pc, #276]	@ (80025c8 <HAL_ADC_ConfigChannel+0x36c>)
 80024b2:	0018      	movs	r0, r3
 80024b4:	f7fd fe26 	bl	8000104 <__udivsi3>
 80024b8:	0003      	movs	r3, r0
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	0013      	movs	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	189b      	adds	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024c6:	e002      	b.n	80024ce <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f9      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024d4:	e08e      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a3c      	ldr	r2, [pc, #240]	@ (80025cc <HAL_ADC_ConfigChannel+0x370>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d10e      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	2380      	movs	r3, #128	@ 0x80
 80024e4:	045b      	lsls	r3, r3, #17
 80024e6:	4013      	ands	r3, r2
 80024e8:	d109      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	2280      	movs	r2, #128	@ 0x80
 80024ee:	0452      	lsls	r2, r2, #17
 80024f0:	4313      	orrs	r3, r2
 80024f2:	4a32      	ldr	r2, [pc, #200]	@ (80025bc <HAL_ADC_ConfigChannel+0x360>)
 80024f4:	0019      	movs	r1, r3
 80024f6:	0010      	movs	r0, r2
 80024f8:	f7ff fc0a 	bl	8001d10 <LL_ADC_SetCommonPathInternalCh>
 80024fc:	e07a      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a33      	ldr	r2, [pc, #204]	@ (80025d0 <HAL_ADC_ConfigChannel+0x374>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d000      	beq.n	800250a <HAL_ADC_ConfigChannel+0x2ae>
 8002508:	e074      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	2380      	movs	r3, #128	@ 0x80
 800250e:	03db      	lsls	r3, r3, #15
 8002510:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002512:	d000      	beq.n	8002516 <HAL_ADC_ConfigChannel+0x2ba>
 8002514:	e06e      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2280      	movs	r2, #128	@ 0x80
 800251a:	03d2      	lsls	r2, r2, #15
 800251c:	4313      	orrs	r3, r2
 800251e:	4a27      	ldr	r2, [pc, #156]	@ (80025bc <HAL_ADC_ConfigChannel+0x360>)
 8002520:	0019      	movs	r1, r3
 8002522:	0010      	movs	r0, r2
 8002524:	f7ff fbf4 	bl	8001d10 <LL_ADC_SetCommonPathInternalCh>
 8002528:	e064      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	2380      	movs	r3, #128	@ 0x80
 8002530:	061b      	lsls	r3, r3, #24
 8002532:	429a      	cmp	r2, r3
 8002534:	d004      	beq.n	8002540 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800253a:	4a1f      	ldr	r2, [pc, #124]	@ (80025b8 <HAL_ADC_ConfigChannel+0x35c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d107      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0019      	movs	r1, r3
 800254a:	0010      	movs	r0, r2
 800254c:	f7ff fc66 	bl	8001e1c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	da4d      	bge.n	80025f4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002558:	4b18      	ldr	r3, [pc, #96]	@ (80025bc <HAL_ADC_ConfigChannel+0x360>)
 800255a:	0018      	movs	r0, r3
 800255c:	f7ff fbec 	bl	8001d38 <LL_ADC_GetCommonPathInternalCh>
 8002560:	0003      	movs	r3, r0
 8002562:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a15      	ldr	r2, [pc, #84]	@ (80025c0 <HAL_ADC_ConfigChannel+0x364>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d108      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4a18      	ldr	r2, [pc, #96]	@ (80025d4 <HAL_ADC_ConfigChannel+0x378>)
 8002572:	4013      	ands	r3, r2
 8002574:	4a11      	ldr	r2, [pc, #68]	@ (80025bc <HAL_ADC_ConfigChannel+0x360>)
 8002576:	0019      	movs	r1, r3
 8002578:	0010      	movs	r0, r2
 800257a:	f7ff fbc9 	bl	8001d10 <LL_ADC_SetCommonPathInternalCh>
 800257e:	e039      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a11      	ldr	r2, [pc, #68]	@ (80025cc <HAL_ADC_ConfigChannel+0x370>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d108      	bne.n	800259c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4a12      	ldr	r2, [pc, #72]	@ (80025d8 <HAL_ADC_ConfigChannel+0x37c>)
 800258e:	4013      	ands	r3, r2
 8002590:	4a0a      	ldr	r2, [pc, #40]	@ (80025bc <HAL_ADC_ConfigChannel+0x360>)
 8002592:	0019      	movs	r1, r3
 8002594:	0010      	movs	r0, r2
 8002596:	f7ff fbbb 	bl	8001d10 <LL_ADC_SetCommonPathInternalCh>
 800259a:	e02b      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0b      	ldr	r2, [pc, #44]	@ (80025d0 <HAL_ADC_ConfigChannel+0x374>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d126      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4a0c      	ldr	r2, [pc, #48]	@ (80025dc <HAL_ADC_ConfigChannel+0x380>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	4a03      	ldr	r2, [pc, #12]	@ (80025bc <HAL_ADC_ConfigChannel+0x360>)
 80025ae:	0019      	movs	r1, r3
 80025b0:	0010      	movs	r0, r2
 80025b2:	f7ff fbad 	bl	8001d10 <LL_ADC_SetCommonPathInternalCh>
 80025b6:	e01d      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x398>
 80025b8:	80000004 	.word	0x80000004
 80025bc:	40012708 	.word	0x40012708
 80025c0:	b0001000 	.word	0xb0001000
 80025c4:	20000044 	.word	0x20000044
 80025c8:	00030d40 	.word	0x00030d40
 80025cc:	b8004000 	.word	0xb8004000
 80025d0:	b4002000 	.word	0xb4002000
 80025d4:	ff7fffff 	.word	0xff7fffff
 80025d8:	feffffff 	.word	0xfeffffff
 80025dc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e4:	2220      	movs	r2, #32
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80025ec:	2317      	movs	r3, #23
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2254      	movs	r2, #84	@ 0x54
 80025f8:	2100      	movs	r1, #0
 80025fa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80025fc:	2317      	movs	r3, #23
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	781b      	ldrb	r3, [r3, #0]
}
 8002602:	0018      	movs	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	b006      	add	sp, #24
 8002608:	bd80      	pop	{r7, pc}
 800260a:	46c0      	nop			@ (mov r8, r8)

0800260c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	0002      	movs	r2, r0
 8002614:	1dfb      	adds	r3, r7, #7
 8002616:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002618:	1dfb      	adds	r3, r7, #7
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b7f      	cmp	r3, #127	@ 0x7f
 800261e:	d809      	bhi.n	8002634 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002620:	1dfb      	adds	r3, r7, #7
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	001a      	movs	r2, r3
 8002626:	231f      	movs	r3, #31
 8002628:	401a      	ands	r2, r3
 800262a:	4b04      	ldr	r3, [pc, #16]	@ (800263c <__NVIC_EnableIRQ+0x30>)
 800262c:	2101      	movs	r1, #1
 800262e:	4091      	lsls	r1, r2
 8002630:	000a      	movs	r2, r1
 8002632:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002634:	46c0      	nop			@ (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b002      	add	sp, #8
 800263a:	bd80      	pop	{r7, pc}
 800263c:	e000e100 	.word	0xe000e100

08002640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002640:	b590      	push	{r4, r7, lr}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	0002      	movs	r2, r0
 8002648:	6039      	str	r1, [r7, #0]
 800264a:	1dfb      	adds	r3, r7, #7
 800264c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800264e:	1dfb      	adds	r3, r7, #7
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b7f      	cmp	r3, #127	@ 0x7f
 8002654:	d828      	bhi.n	80026a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002656:	4a2f      	ldr	r2, [pc, #188]	@ (8002714 <__NVIC_SetPriority+0xd4>)
 8002658:	1dfb      	adds	r3, r7, #7
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	b25b      	sxtb	r3, r3
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	33c0      	adds	r3, #192	@ 0xc0
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	589b      	ldr	r3, [r3, r2]
 8002666:	1dfa      	adds	r2, r7, #7
 8002668:	7812      	ldrb	r2, [r2, #0]
 800266a:	0011      	movs	r1, r2
 800266c:	2203      	movs	r2, #3
 800266e:	400a      	ands	r2, r1
 8002670:	00d2      	lsls	r2, r2, #3
 8002672:	21ff      	movs	r1, #255	@ 0xff
 8002674:	4091      	lsls	r1, r2
 8002676:	000a      	movs	r2, r1
 8002678:	43d2      	mvns	r2, r2
 800267a:	401a      	ands	r2, r3
 800267c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	019b      	lsls	r3, r3, #6
 8002682:	22ff      	movs	r2, #255	@ 0xff
 8002684:	401a      	ands	r2, r3
 8002686:	1dfb      	adds	r3, r7, #7
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	0018      	movs	r0, r3
 800268c:	2303      	movs	r3, #3
 800268e:	4003      	ands	r3, r0
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002694:	481f      	ldr	r0, [pc, #124]	@ (8002714 <__NVIC_SetPriority+0xd4>)
 8002696:	1dfb      	adds	r3, r7, #7
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	b25b      	sxtb	r3, r3
 800269c:	089b      	lsrs	r3, r3, #2
 800269e:	430a      	orrs	r2, r1
 80026a0:	33c0      	adds	r3, #192	@ 0xc0
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80026a6:	e031      	b.n	800270c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002718 <__NVIC_SetPriority+0xd8>)
 80026aa:	1dfb      	adds	r3, r7, #7
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	0019      	movs	r1, r3
 80026b0:	230f      	movs	r3, #15
 80026b2:	400b      	ands	r3, r1
 80026b4:	3b08      	subs	r3, #8
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	3306      	adds	r3, #6
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	18d3      	adds	r3, r2, r3
 80026be:	3304      	adds	r3, #4
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	1dfa      	adds	r2, r7, #7
 80026c4:	7812      	ldrb	r2, [r2, #0]
 80026c6:	0011      	movs	r1, r2
 80026c8:	2203      	movs	r2, #3
 80026ca:	400a      	ands	r2, r1
 80026cc:	00d2      	lsls	r2, r2, #3
 80026ce:	21ff      	movs	r1, #255	@ 0xff
 80026d0:	4091      	lsls	r1, r2
 80026d2:	000a      	movs	r2, r1
 80026d4:	43d2      	mvns	r2, r2
 80026d6:	401a      	ands	r2, r3
 80026d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	019b      	lsls	r3, r3, #6
 80026de:	22ff      	movs	r2, #255	@ 0xff
 80026e0:	401a      	ands	r2, r3
 80026e2:	1dfb      	adds	r3, r7, #7
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	0018      	movs	r0, r3
 80026e8:	2303      	movs	r3, #3
 80026ea:	4003      	ands	r3, r0
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026f0:	4809      	ldr	r0, [pc, #36]	@ (8002718 <__NVIC_SetPriority+0xd8>)
 80026f2:	1dfb      	adds	r3, r7, #7
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	001c      	movs	r4, r3
 80026f8:	230f      	movs	r3, #15
 80026fa:	4023      	ands	r3, r4
 80026fc:	3b08      	subs	r3, #8
 80026fe:	089b      	lsrs	r3, r3, #2
 8002700:	430a      	orrs	r2, r1
 8002702:	3306      	adds	r3, #6
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	18c3      	adds	r3, r0, r3
 8002708:	3304      	adds	r3, #4
 800270a:	601a      	str	r2, [r3, #0]
}
 800270c:	46c0      	nop			@ (mov r8, r8)
 800270e:	46bd      	mov	sp, r7
 8002710:	b003      	add	sp, #12
 8002712:	bd90      	pop	{r4, r7, pc}
 8002714:	e000e100 	.word	0xe000e100
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	1e5a      	subs	r2, r3, #1
 8002728:	2380      	movs	r3, #128	@ 0x80
 800272a:	045b      	lsls	r3, r3, #17
 800272c:	429a      	cmp	r2, r3
 800272e:	d301      	bcc.n	8002734 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002730:	2301      	movs	r3, #1
 8002732:	e010      	b.n	8002756 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002734:	4b0a      	ldr	r3, [pc, #40]	@ (8002760 <SysTick_Config+0x44>)
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	3a01      	subs	r2, #1
 800273a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800273c:	2301      	movs	r3, #1
 800273e:	425b      	negs	r3, r3
 8002740:	2103      	movs	r1, #3
 8002742:	0018      	movs	r0, r3
 8002744:	f7ff ff7c 	bl	8002640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002748:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <SysTick_Config+0x44>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800274e:	4b04      	ldr	r3, [pc, #16]	@ (8002760 <SysTick_Config+0x44>)
 8002750:	2207      	movs	r2, #7
 8002752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002754:	2300      	movs	r3, #0
}
 8002756:	0018      	movs	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	b002      	add	sp, #8
 800275c:	bd80      	pop	{r7, pc}
 800275e:	46c0      	nop			@ (mov r8, r8)
 8002760:	e000e010 	.word	0xe000e010

08002764 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
 800276e:	210f      	movs	r1, #15
 8002770:	187b      	adds	r3, r7, r1
 8002772:	1c02      	adds	r2, r0, #0
 8002774:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	187b      	adds	r3, r7, r1
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	b25b      	sxtb	r3, r3
 800277e:	0011      	movs	r1, r2
 8002780:	0018      	movs	r0, r3
 8002782:	f7ff ff5d 	bl	8002640 <__NVIC_SetPriority>
}
 8002786:	46c0      	nop			@ (mov r8, r8)
 8002788:	46bd      	mov	sp, r7
 800278a:	b004      	add	sp, #16
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	0002      	movs	r2, r0
 8002796:	1dfb      	adds	r3, r7, #7
 8002798:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800279a:	1dfb      	adds	r3, r7, #7
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	b25b      	sxtb	r3, r3
 80027a0:	0018      	movs	r0, r3
 80027a2:	f7ff ff33 	bl	800260c <__NVIC_EnableIRQ>
}
 80027a6:	46c0      	nop			@ (mov r8, r8)
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b002      	add	sp, #8
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	0018      	movs	r0, r3
 80027ba:	f7ff ffaf 	bl	800271c <SysTick_Config>
 80027be:	0003      	movs	r3, r0
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b002      	add	sp, #8
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027d6:	e147      	b.n	8002a68 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2101      	movs	r1, #1
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4091      	lsls	r1, r2
 80027e2:	000a      	movs	r2, r1
 80027e4:	4013      	ands	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d100      	bne.n	80027f0 <HAL_GPIO_Init+0x28>
 80027ee:	e138      	b.n	8002a62 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2203      	movs	r2, #3
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d005      	beq.n	8002808 <HAL_GPIO_Init+0x40>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2203      	movs	r2, #3
 8002802:	4013      	ands	r3, r2
 8002804:	2b02      	cmp	r3, #2
 8002806:	d130      	bne.n	800286a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	2203      	movs	r2, #3
 8002814:	409a      	lsls	r2, r3
 8002816:	0013      	movs	r3, r2
 8002818:	43da      	mvns	r2, r3
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4013      	ands	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	409a      	lsls	r2, r3
 800282a:	0013      	movs	r3, r2
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800283e:	2201      	movs	r2, #1
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	409a      	lsls	r2, r3
 8002844:	0013      	movs	r3, r2
 8002846:	43da      	mvns	r2, r3
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	091b      	lsrs	r3, r3, #4
 8002854:	2201      	movs	r2, #1
 8002856:	401a      	ands	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	409a      	lsls	r2, r3
 800285c:	0013      	movs	r3, r2
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2203      	movs	r2, #3
 8002870:	4013      	ands	r3, r2
 8002872:	2b03      	cmp	r3, #3
 8002874:	d017      	beq.n	80028a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	2203      	movs	r2, #3
 8002882:	409a      	lsls	r2, r3
 8002884:	0013      	movs	r3, r2
 8002886:	43da      	mvns	r2, r3
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	409a      	lsls	r2, r3
 8002898:	0013      	movs	r3, r2
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2203      	movs	r2, #3
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d123      	bne.n	80028fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	08da      	lsrs	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3208      	adds	r2, #8
 80028ba:	0092      	lsls	r2, r2, #2
 80028bc:	58d3      	ldr	r3, [r2, r3]
 80028be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2207      	movs	r2, #7
 80028c4:	4013      	ands	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	220f      	movs	r2, #15
 80028ca:	409a      	lsls	r2, r3
 80028cc:	0013      	movs	r3, r2
 80028ce:	43da      	mvns	r2, r3
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4013      	ands	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2107      	movs	r1, #7
 80028de:	400b      	ands	r3, r1
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	409a      	lsls	r2, r3
 80028e4:	0013      	movs	r3, r2
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	08da      	lsrs	r2, r3, #3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3208      	adds	r2, #8
 80028f4:	0092      	lsls	r2, r2, #2
 80028f6:	6939      	ldr	r1, [r7, #16]
 80028f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	2203      	movs	r2, #3
 8002906:	409a      	lsls	r2, r3
 8002908:	0013      	movs	r3, r2
 800290a:	43da      	mvns	r2, r3
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2203      	movs	r2, #3
 8002918:	401a      	ands	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	409a      	lsls	r2, r3
 8002920:	0013      	movs	r3, r2
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	23c0      	movs	r3, #192	@ 0xc0
 8002934:	029b      	lsls	r3, r3, #10
 8002936:	4013      	ands	r3, r2
 8002938:	d100      	bne.n	800293c <HAL_GPIO_Init+0x174>
 800293a:	e092      	b.n	8002a62 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800293c:	4a50      	ldr	r2, [pc, #320]	@ (8002a80 <HAL_GPIO_Init+0x2b8>)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	089b      	lsrs	r3, r3, #2
 8002942:	3318      	adds	r3, #24
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	589b      	ldr	r3, [r3, r2]
 8002948:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2203      	movs	r2, #3
 800294e:	4013      	ands	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	220f      	movs	r2, #15
 8002954:	409a      	lsls	r2, r3
 8002956:	0013      	movs	r3, r2
 8002958:	43da      	mvns	r2, r3
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	23a0      	movs	r3, #160	@ 0xa0
 8002964:	05db      	lsls	r3, r3, #23
 8002966:	429a      	cmp	r2, r3
 8002968:	d013      	beq.n	8002992 <HAL_GPIO_Init+0x1ca>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a45      	ldr	r2, [pc, #276]	@ (8002a84 <HAL_GPIO_Init+0x2bc>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00d      	beq.n	800298e <HAL_GPIO_Init+0x1c6>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a44      	ldr	r2, [pc, #272]	@ (8002a88 <HAL_GPIO_Init+0x2c0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d007      	beq.n	800298a <HAL_GPIO_Init+0x1c2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a43      	ldr	r2, [pc, #268]	@ (8002a8c <HAL_GPIO_Init+0x2c4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d101      	bne.n	8002986 <HAL_GPIO_Init+0x1be>
 8002982:	2303      	movs	r3, #3
 8002984:	e006      	b.n	8002994 <HAL_GPIO_Init+0x1cc>
 8002986:	2305      	movs	r3, #5
 8002988:	e004      	b.n	8002994 <HAL_GPIO_Init+0x1cc>
 800298a:	2302      	movs	r3, #2
 800298c:	e002      	b.n	8002994 <HAL_GPIO_Init+0x1cc>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_GPIO_Init+0x1cc>
 8002992:	2300      	movs	r3, #0
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	2103      	movs	r1, #3
 8002998:	400a      	ands	r2, r1
 800299a:	00d2      	lsls	r2, r2, #3
 800299c:	4093      	lsls	r3, r2
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80029a4:	4936      	ldr	r1, [pc, #216]	@ (8002a80 <HAL_GPIO_Init+0x2b8>)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	3318      	adds	r3, #24
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029b2:	4b33      	ldr	r3, [pc, #204]	@ (8002a80 <HAL_GPIO_Init+0x2b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	43da      	mvns	r2, r3
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4013      	ands	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	2380      	movs	r3, #128	@ 0x80
 80029c8:	035b      	lsls	r3, r3, #13
 80029ca:	4013      	ands	r3, r2
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a80 <HAL_GPIO_Init+0x2b8>)
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80029dc:	4b28      	ldr	r3, [pc, #160]	@ (8002a80 <HAL_GPIO_Init+0x2b8>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	43da      	mvns	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	2380      	movs	r3, #128	@ 0x80
 80029f2:	039b      	lsls	r3, r3, #14
 80029f4:	4013      	ands	r3, r2
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a00:	4b1f      	ldr	r3, [pc, #124]	@ (8002a80 <HAL_GPIO_Init+0x2b8>)
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a06:	4a1e      	ldr	r2, [pc, #120]	@ (8002a80 <HAL_GPIO_Init+0x2b8>)
 8002a08:	2384      	movs	r3, #132	@ 0x84
 8002a0a:	58d3      	ldr	r3, [r2, r3]
 8002a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	43da      	mvns	r2, r3
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	029b      	lsls	r3, r3, #10
 8002a20:	4013      	ands	r3, r2
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a2c:	4914      	ldr	r1, [pc, #80]	@ (8002a80 <HAL_GPIO_Init+0x2b8>)
 8002a2e:	2284      	movs	r2, #132	@ 0x84
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002a34:	4a12      	ldr	r2, [pc, #72]	@ (8002a80 <HAL_GPIO_Init+0x2b8>)
 8002a36:	2380      	movs	r3, #128	@ 0x80
 8002a38:	58d3      	ldr	r3, [r2, r3]
 8002a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4013      	ands	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	2380      	movs	r3, #128	@ 0x80
 8002a4c:	025b      	lsls	r3, r3, #9
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a5a:	4909      	ldr	r1, [pc, #36]	@ (8002a80 <HAL_GPIO_Init+0x2b8>)
 8002a5c:	2280      	movs	r2, #128	@ 0x80
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	3301      	adds	r3, #1
 8002a66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	40da      	lsrs	r2, r3
 8002a70:	1e13      	subs	r3, r2, #0
 8002a72:	d000      	beq.n	8002a76 <HAL_GPIO_Init+0x2ae>
 8002a74:	e6b0      	b.n	80027d8 <HAL_GPIO_Init+0x10>
  }
}
 8002a76:	46c0      	nop			@ (mov r8, r8)
 8002a78:	46c0      	nop			@ (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b006      	add	sp, #24
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021800 	.word	0x40021800
 8002a84:	50000400 	.word	0x50000400
 8002a88:	50000800 	.word	0x50000800
 8002a8c:	50000c00 	.word	0x50000c00

08002a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	000a      	movs	r2, r1
 8002a9a:	1cbb      	adds	r3, r7, #2
 8002a9c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	1cba      	adds	r2, r7, #2
 8002aa4:	8812      	ldrh	r2, [r2, #0]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d004      	beq.n	8002ab4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002aaa:	230f      	movs	r3, #15
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	e003      	b.n	8002abc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ab4:	230f      	movs	r3, #15
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002abc:	230f      	movs	r3, #15
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	781b      	ldrb	r3, [r3, #0]
}
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b004      	add	sp, #16
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	0008      	movs	r0, r1
 8002ad4:	0011      	movs	r1, r2
 8002ad6:	1cbb      	adds	r3, r7, #2
 8002ad8:	1c02      	adds	r2, r0, #0
 8002ada:	801a      	strh	r2, [r3, #0]
 8002adc:	1c7b      	adds	r3, r7, #1
 8002ade:	1c0a      	adds	r2, r1, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ae2:	1c7b      	adds	r3, r7, #1
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d004      	beq.n	8002af4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aea:	1cbb      	adds	r3, r7, #2
 8002aec:	881a      	ldrh	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002af2:	e003      	b.n	8002afc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002af4:	1cbb      	adds	r3, r7, #2
 8002af6:	881a      	ldrh	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002afc:	46c0      	nop			@ (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b002      	add	sp, #8
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	000a      	movs	r2, r1
 8002b0e:	1cbb      	adds	r3, r7, #2
 8002b10:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b18:	1cbb      	adds	r3, r7, #2
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	041a      	lsls	r2, r3, #16
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	1cb9      	adds	r1, r7, #2
 8002b28:	8809      	ldrh	r1, [r1, #0]
 8002b2a:	400b      	ands	r3, r1
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	619a      	str	r2, [r3, #24]
}
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b004      	add	sp, #16
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	0002      	movs	r2, r0
 8002b44:	1dbb      	adds	r3, r7, #6
 8002b46:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002b48:	4b10      	ldr	r3, [pc, #64]	@ (8002b8c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	1dba      	adds	r2, r7, #6
 8002b4e:	8812      	ldrh	r2, [r2, #0]
 8002b50:	4013      	ands	r3, r2
 8002b52:	d008      	beq.n	8002b66 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002b54:	4b0d      	ldr	r3, [pc, #52]	@ (8002b8c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002b56:	1dba      	adds	r2, r7, #6
 8002b58:	8812      	ldrh	r2, [r2, #0]
 8002b5a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002b5c:	1dbb      	adds	r3, r7, #6
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	0018      	movs	r0, r3
 8002b62:	f000 f815 	bl	8002b90 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002b66:	4b09      	ldr	r3, [pc, #36]	@ (8002b8c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	1dba      	adds	r2, r7, #6
 8002b6c:	8812      	ldrh	r2, [r2, #0]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d008      	beq.n	8002b84 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002b72:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002b74:	1dba      	adds	r2, r7, #6
 8002b76:	8812      	ldrh	r2, [r2, #0]
 8002b78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002b7a:	1dbb      	adds	r3, r7, #6
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f7fe f9a0 	bl	8000ec4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002b84:	46c0      	nop			@ (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021800 	.word	0x40021800

08002b90 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	0002      	movs	r2, r0
 8002b98:	1dbb      	adds	r3, r7, #6
 8002b9a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002b9c:	46c0      	nop			@ (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b002      	add	sp, #8
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e08f      	b.n	8002cd6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2241      	movs	r2, #65	@ 0x41
 8002bba:	5c9b      	ldrb	r3, [r3, r2]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d107      	bne.n	8002bd2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2240      	movs	r2, #64	@ 0x40
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f7fe fe83 	bl	80018d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2241      	movs	r2, #65	@ 0x41
 8002bd6:	2124      	movs	r1, #36	@ 0x24
 8002bd8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2101      	movs	r1, #1
 8002be6:	438a      	bics	r2, r1
 8002be8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	493b      	ldr	r1, [pc, #236]	@ (8002ce0 <HAL_I2C_Init+0x13c>)
 8002bf4:	400a      	ands	r2, r1
 8002bf6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4938      	ldr	r1, [pc, #224]	@ (8002ce4 <HAL_I2C_Init+0x140>)
 8002c04:	400a      	ands	r2, r1
 8002c06:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d108      	bne.n	8002c22 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2180      	movs	r1, #128	@ 0x80
 8002c1a:	0209      	lsls	r1, r1, #8
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	e007      	b.n	8002c32 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2184      	movs	r1, #132	@ 0x84
 8002c2c:	0209      	lsls	r1, r1, #8
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d109      	bne.n	8002c4e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2180      	movs	r1, #128	@ 0x80
 8002c46:	0109      	lsls	r1, r1, #4
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	605a      	str	r2, [r3, #4]
 8002c4c:	e007      	b.n	8002c5e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4923      	ldr	r1, [pc, #140]	@ (8002ce8 <HAL_I2C_Init+0x144>)
 8002c5a:	400a      	ands	r2, r1
 8002c5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4920      	ldr	r1, [pc, #128]	@ (8002cec <HAL_I2C_Init+0x148>)
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	491a      	ldr	r1, [pc, #104]	@ (8002ce4 <HAL_I2C_Init+0x140>)
 8002c7a:	400a      	ands	r2, r1
 8002c7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69d9      	ldr	r1, [r3, #28]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1a      	ldr	r2, [r3, #32]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2241      	movs	r2, #65	@ 0x41
 8002cc2:	2120      	movs	r1, #32
 8002cc4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2242      	movs	r2, #66	@ 0x42
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	b002      	add	sp, #8
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	46c0      	nop			@ (mov r8, r8)
 8002ce0:	f0ffffff 	.word	0xf0ffffff
 8002ce4:	ffff7fff 	.word	0xffff7fff
 8002ce8:	fffff7ff 	.word	0xfffff7ff
 8002cec:	02008000 	.word	0x02008000

08002cf0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002cf0:	b590      	push	{r4, r7, lr}
 8002cf2:	b089      	sub	sp, #36	@ 0x24
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	0008      	movs	r0, r1
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	0019      	movs	r1, r3
 8002cfe:	230a      	movs	r3, #10
 8002d00:	18fb      	adds	r3, r7, r3
 8002d02:	1c02      	adds	r2, r0, #0
 8002d04:	801a      	strh	r2, [r3, #0]
 8002d06:	2308      	movs	r3, #8
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	1c0a      	adds	r2, r1, #0
 8002d0c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2241      	movs	r2, #65	@ 0x41
 8002d12:	5c9b      	ldrb	r3, [r3, r2]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b20      	cmp	r3, #32
 8002d18:	d000      	beq.n	8002d1c <HAL_I2C_Master_Transmit+0x2c>
 8002d1a:	e10a      	b.n	8002f32 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2240      	movs	r2, #64	@ 0x40
 8002d20:	5c9b      	ldrb	r3, [r3, r2]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_I2C_Master_Transmit+0x3a>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e104      	b.n	8002f34 <HAL_I2C_Master_Transmit+0x244>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2240      	movs	r2, #64	@ 0x40
 8002d2e:	2101      	movs	r1, #1
 8002d30:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d32:	f7fe ffe3 	bl	8001cfc <HAL_GetTick>
 8002d36:	0003      	movs	r3, r0
 8002d38:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d3a:	2380      	movs	r3, #128	@ 0x80
 8002d3c:	0219      	lsls	r1, r3, #8
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	2319      	movs	r3, #25
 8002d46:	2201      	movs	r2, #1
 8002d48:	f000 fa26 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8002d4c:	1e03      	subs	r3, r0, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0ef      	b.n	8002f34 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2241      	movs	r2, #65	@ 0x41
 8002d58:	2121      	movs	r1, #33	@ 0x21
 8002d5a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2242      	movs	r2, #66	@ 0x42
 8002d60:	2110      	movs	r1, #16
 8002d62:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2208      	movs	r2, #8
 8002d74:	18ba      	adds	r2, r7, r2
 8002d76:	8812      	ldrh	r2, [r2, #0]
 8002d78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2bff      	cmp	r3, #255	@ 0xff
 8002d88:	d906      	bls.n	8002d98 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	22ff      	movs	r2, #255	@ 0xff
 8002d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002d90:	2380      	movs	r3, #128	@ 0x80
 8002d92:	045b      	lsls	r3, r3, #17
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	e007      	b.n	8002da8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002da2:	2380      	movs	r3, #128	@ 0x80
 8002da4:	049b      	lsls	r3, r3, #18
 8002da6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d027      	beq.n	8002e00 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	781a      	ldrb	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	3301      	adds	r3, #1
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	697c      	ldr	r4, [r7, #20]
 8002dec:	230a      	movs	r3, #10
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	8819      	ldrh	r1, [r3, #0]
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	4b51      	ldr	r3, [pc, #324]	@ (8002f3c <HAL_I2C_Master_Transmit+0x24c>)
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	0023      	movs	r3, r4
 8002dfa:	f000 fc45 	bl	8003688 <I2C_TransferConfig>
 8002dfe:	e06f      	b.n	8002ee0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	697c      	ldr	r4, [r7, #20]
 8002e08:	230a      	movs	r3, #10
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	8819      	ldrh	r1, [r3, #0]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	4b4a      	ldr	r3, [pc, #296]	@ (8002f3c <HAL_I2C_Master_Transmit+0x24c>)
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	0023      	movs	r3, r4
 8002e16:	f000 fc37 	bl	8003688 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002e1a:	e061      	b.n	8002ee0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 fa10 	bl	8003248 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e28:	1e03      	subs	r3, r0, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e081      	b.n	8002f34 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	781a      	ldrb	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d03a      	beq.n	8002ee0 <HAL_I2C_Master_Transmit+0x1f0>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d136      	bne.n	8002ee0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	0013      	movs	r3, r2
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2180      	movs	r1, #128	@ 0x80
 8002e80:	f000 f98a 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8002e84:	1e03      	subs	r3, r0, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e053      	b.n	8002f34 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2bff      	cmp	r3, #255	@ 0xff
 8002e94:	d911      	bls.n	8002eba <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	22ff      	movs	r2, #255	@ 0xff
 8002e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	2380      	movs	r3, #128	@ 0x80
 8002ea4:	045c      	lsls	r4, r3, #17
 8002ea6:	230a      	movs	r3, #10
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	8819      	ldrh	r1, [r3, #0]
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	0023      	movs	r3, r4
 8002eb4:	f000 fbe8 	bl	8003688 <I2C_TransferConfig>
 8002eb8:	e012      	b.n	8002ee0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	2380      	movs	r3, #128	@ 0x80
 8002ecc:	049c      	lsls	r4, r3, #18
 8002ece:	230a      	movs	r3, #10
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	8819      	ldrh	r1, [r3, #0]
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	0023      	movs	r3, r4
 8002edc:	f000 fbd4 	bl	8003688 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d198      	bne.n	8002e1c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f000 f9ef 	bl	80032d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ef6:	1e03      	subs	r3, r0, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e01a      	b.n	8002f34 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2220      	movs	r2, #32
 8002f04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	490b      	ldr	r1, [pc, #44]	@ (8002f40 <HAL_I2C_Master_Transmit+0x250>)
 8002f12:	400a      	ands	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2241      	movs	r2, #65	@ 0x41
 8002f1a:	2120      	movs	r1, #32
 8002f1c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2242      	movs	r2, #66	@ 0x42
 8002f22:	2100      	movs	r1, #0
 8002f24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2240      	movs	r2, #64	@ 0x40
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e000      	b.n	8002f34 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002f32:	2302      	movs	r3, #2
  }
}
 8002f34:	0018      	movs	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b007      	add	sp, #28
 8002f3a:	bd90      	pop	{r4, r7, pc}
 8002f3c:	80002000 	.word	0x80002000
 8002f40:	fe00e800 	.word	0xfe00e800

08002f44 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b089      	sub	sp, #36	@ 0x24
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	0008      	movs	r0, r1
 8002f4e:	607a      	str	r2, [r7, #4]
 8002f50:	0019      	movs	r1, r3
 8002f52:	230a      	movs	r3, #10
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	1c02      	adds	r2, r0, #0
 8002f58:	801a      	strh	r2, [r3, #0]
 8002f5a:	2308      	movs	r3, #8
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	1c0a      	adds	r2, r1, #0
 8002f60:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2241      	movs	r2, #65	@ 0x41
 8002f66:	5c9b      	ldrb	r3, [r3, r2]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	d000      	beq.n	8002f70 <HAL_I2C_Master_Receive+0x2c>
 8002f6e:	e0e8      	b.n	8003142 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2240      	movs	r2, #64	@ 0x40
 8002f74:	5c9b      	ldrb	r3, [r3, r2]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_I2C_Master_Receive+0x3a>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e0e2      	b.n	8003144 <HAL_I2C_Master_Receive+0x200>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2240      	movs	r2, #64	@ 0x40
 8002f82:	2101      	movs	r1, #1
 8002f84:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f86:	f7fe feb9 	bl	8001cfc <HAL_GetTick>
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f8e:	2380      	movs	r3, #128	@ 0x80
 8002f90:	0219      	lsls	r1, r3, #8
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	2319      	movs	r3, #25
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f000 f8fc 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8002fa0:	1e03      	subs	r3, r0, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0cd      	b.n	8003144 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2241      	movs	r2, #65	@ 0x41
 8002fac:	2122      	movs	r1, #34	@ 0x22
 8002fae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2242      	movs	r2, #66	@ 0x42
 8002fb4:	2110      	movs	r1, #16
 8002fb6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2208      	movs	r2, #8
 8002fc8:	18ba      	adds	r2, r7, r2
 8002fca:	8812      	ldrh	r2, [r2, #0]
 8002fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2bff      	cmp	r3, #255	@ 0xff
 8002fdc:	d911      	bls.n	8003002 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	22ff      	movs	r2, #255	@ 0xff
 8002fe2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	2380      	movs	r3, #128	@ 0x80
 8002fec:	045c      	lsls	r4, r3, #17
 8002fee:	230a      	movs	r3, #10
 8002ff0:	18fb      	adds	r3, r7, r3
 8002ff2:	8819      	ldrh	r1, [r3, #0]
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	4b55      	ldr	r3, [pc, #340]	@ (800314c <HAL_I2C_Master_Receive+0x208>)
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	0023      	movs	r3, r4
 8002ffc:	f000 fb44 	bl	8003688 <I2C_TransferConfig>
 8003000:	e076      	b.n	80030f0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003010:	b2da      	uxtb	r2, r3
 8003012:	2380      	movs	r3, #128	@ 0x80
 8003014:	049c      	lsls	r4, r3, #18
 8003016:	230a      	movs	r3, #10
 8003018:	18fb      	adds	r3, r7, r3
 800301a:	8819      	ldrh	r1, [r3, #0]
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	4b4b      	ldr	r3, [pc, #300]	@ (800314c <HAL_I2C_Master_Receive+0x208>)
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	0023      	movs	r3, r4
 8003024:	f000 fb30 	bl	8003688 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003028:	e062      	b.n	80030f0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	0018      	movs	r0, r3
 8003032:	f000 f993 	bl	800335c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003036:	1e03      	subs	r3, r0, #0
 8003038:	d001      	beq.n	800303e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e082      	b.n	8003144 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d03a      	beq.n	80030f0 <HAL_I2C_Master_Receive+0x1ac>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307e:	2b00      	cmp	r3, #0
 8003080:	d136      	bne.n	80030f0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003082:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	0013      	movs	r3, r2
 800308c:	2200      	movs	r2, #0
 800308e:	2180      	movs	r1, #128	@ 0x80
 8003090:	f000 f882 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8003094:	1e03      	subs	r3, r0, #0
 8003096:	d001      	beq.n	800309c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e053      	b.n	8003144 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2bff      	cmp	r3, #255	@ 0xff
 80030a4:	d911      	bls.n	80030ca <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	22ff      	movs	r2, #255	@ 0xff
 80030aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	2380      	movs	r3, #128	@ 0x80
 80030b4:	045c      	lsls	r4, r3, #17
 80030b6:	230a      	movs	r3, #10
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	8819      	ldrh	r1, [r3, #0]
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	2300      	movs	r3, #0
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	0023      	movs	r3, r4
 80030c4:	f000 fae0 	bl	8003688 <I2C_TransferConfig>
 80030c8:	e012      	b.n	80030f0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	2380      	movs	r3, #128	@ 0x80
 80030dc:	049c      	lsls	r4, r3, #18
 80030de:	230a      	movs	r3, #10
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	8819      	ldrh	r1, [r3, #0]
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	2300      	movs	r3, #0
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	0023      	movs	r3, r4
 80030ec:	f000 facc 	bl	8003688 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d197      	bne.n	800302a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	0018      	movs	r0, r3
 8003102:	f000 f8e7 	bl	80032d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003106:	1e03      	subs	r3, r0, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e01a      	b.n	8003144 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2220      	movs	r2, #32
 8003114:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	490b      	ldr	r1, [pc, #44]	@ (8003150 <HAL_I2C_Master_Receive+0x20c>)
 8003122:	400a      	ands	r2, r1
 8003124:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2241      	movs	r2, #65	@ 0x41
 800312a:	2120      	movs	r1, #32
 800312c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2242      	movs	r2, #66	@ 0x42
 8003132:	2100      	movs	r1, #0
 8003134:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2240      	movs	r2, #64	@ 0x40
 800313a:	2100      	movs	r1, #0
 800313c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	e000      	b.n	8003144 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003142:	2302      	movs	r3, #2
  }
}
 8003144:	0018      	movs	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	b007      	add	sp, #28
 800314a:	bd90      	pop	{r4, r7, pc}
 800314c:	80002400 	.word	0x80002400
 8003150:	fe00e800 	.word	0xfe00e800

08003154 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	2202      	movs	r2, #2
 8003164:	4013      	ands	r3, r2
 8003166:	2b02      	cmp	r3, #2
 8003168:	d103      	bne.n	8003172 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2200      	movs	r2, #0
 8003170:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2201      	movs	r2, #1
 800317a:	4013      	ands	r3, r2
 800317c:	2b01      	cmp	r3, #1
 800317e:	d007      	beq.n	8003190 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2101      	movs	r1, #1
 800318c:	430a      	orrs	r2, r1
 800318e:	619a      	str	r2, [r3, #24]
  }
}
 8003190:	46c0      	nop			@ (mov r8, r8)
 8003192:	46bd      	mov	sp, r7
 8003194:	b002      	add	sp, #8
 8003196:	bd80      	pop	{r7, pc}

08003198 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	1dfb      	adds	r3, r7, #7
 80031a6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031a8:	e03a      	b.n	8003220 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	6839      	ldr	r1, [r7, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f000 f971 	bl	8003498 <I2C_IsErrorOccurred>
 80031b6:	1e03      	subs	r3, r0, #0
 80031b8:	d001      	beq.n	80031be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e040      	b.n	8003240 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	3301      	adds	r3, #1
 80031c2:	d02d      	beq.n	8003220 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c4:	f7fe fd9a 	bl	8001cfc <HAL_GetTick>
 80031c8:	0002      	movs	r2, r0
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d302      	bcc.n	80031da <I2C_WaitOnFlagUntilTimeout+0x42>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d122      	bne.n	8003220 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	4013      	ands	r3, r2
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	425a      	negs	r2, r3
 80031ea:	4153      	adcs	r3, r2
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	001a      	movs	r2, r3
 80031f0:	1dfb      	adds	r3, r7, #7
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d113      	bne.n	8003220 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fc:	2220      	movs	r2, #32
 80031fe:	431a      	orrs	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2241      	movs	r2, #65	@ 0x41
 8003208:	2120      	movs	r1, #32
 800320a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2242      	movs	r2, #66	@ 0x42
 8003210:	2100      	movs	r1, #0
 8003212:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2240      	movs	r2, #64	@ 0x40
 8003218:	2100      	movs	r1, #0
 800321a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e00f      	b.n	8003240 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	4013      	ands	r3, r2
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	425a      	negs	r2, r3
 8003230:	4153      	adcs	r3, r2
 8003232:	b2db      	uxtb	r3, r3
 8003234:	001a      	movs	r2, r3
 8003236:	1dfb      	adds	r3, r7, #7
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d0b5      	beq.n	80031aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	0018      	movs	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	b004      	add	sp, #16
 8003246:	bd80      	pop	{r7, pc}

08003248 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003254:	e032      	b.n	80032bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	0018      	movs	r0, r3
 800325e:	f000 f91b 	bl	8003498 <I2C_IsErrorOccurred>
 8003262:	1e03      	subs	r3, r0, #0
 8003264:	d001      	beq.n	800326a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e030      	b.n	80032cc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	3301      	adds	r3, #1
 800326e:	d025      	beq.n	80032bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003270:	f7fe fd44 	bl	8001cfc <HAL_GetTick>
 8003274:	0002      	movs	r2, r0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	429a      	cmp	r2, r3
 800327e:	d302      	bcc.n	8003286 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d11a      	bne.n	80032bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2202      	movs	r2, #2
 800328e:	4013      	ands	r3, r2
 8003290:	2b02      	cmp	r3, #2
 8003292:	d013      	beq.n	80032bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003298:	2220      	movs	r2, #32
 800329a:	431a      	orrs	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2241      	movs	r2, #65	@ 0x41
 80032a4:	2120      	movs	r1, #32
 80032a6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2242      	movs	r2, #66	@ 0x42
 80032ac:	2100      	movs	r1, #0
 80032ae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2240      	movs	r2, #64	@ 0x40
 80032b4:	2100      	movs	r1, #0
 80032b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e007      	b.n	80032cc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2202      	movs	r2, #2
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d1c5      	bne.n	8003256 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	0018      	movs	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b004      	add	sp, #16
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032e0:	e02f      	b.n	8003342 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	0018      	movs	r0, r3
 80032ea:	f000 f8d5 	bl	8003498 <I2C_IsErrorOccurred>
 80032ee:	1e03      	subs	r3, r0, #0
 80032f0:	d001      	beq.n	80032f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e02d      	b.n	8003352 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f6:	f7fe fd01 	bl	8001cfc <HAL_GetTick>
 80032fa:	0002      	movs	r2, r0
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d11a      	bne.n	8003342 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2220      	movs	r2, #32
 8003314:	4013      	ands	r3, r2
 8003316:	2b20      	cmp	r3, #32
 8003318:	d013      	beq.n	8003342 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331e:	2220      	movs	r2, #32
 8003320:	431a      	orrs	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2241      	movs	r2, #65	@ 0x41
 800332a:	2120      	movs	r1, #32
 800332c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2242      	movs	r2, #66	@ 0x42
 8003332:	2100      	movs	r1, #0
 8003334:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2240      	movs	r2, #64	@ 0x40
 800333a:	2100      	movs	r1, #0
 800333c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e007      	b.n	8003352 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	2220      	movs	r2, #32
 800334a:	4013      	ands	r3, r2
 800334c:	2b20      	cmp	r3, #32
 800334e:	d1c8      	bne.n	80032e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	0018      	movs	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	b004      	add	sp, #16
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003368:	2317      	movs	r3, #23
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	2200      	movs	r2, #0
 800336e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003370:	e07b      	b.n	800346a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	0018      	movs	r0, r3
 800337a:	f000 f88d 	bl	8003498 <I2C_IsErrorOccurred>
 800337e:	1e03      	subs	r3, r0, #0
 8003380:	d003      	beq.n	800338a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8003382:	2317      	movs	r3, #23
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	2201      	movs	r2, #1
 8003388:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2220      	movs	r2, #32
 8003392:	4013      	ands	r3, r2
 8003394:	2b20      	cmp	r3, #32
 8003396:	d140      	bne.n	800341a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003398:	2117      	movs	r1, #23
 800339a:	187b      	adds	r3, r7, r1
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d13b      	bne.n	800341a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	2204      	movs	r2, #4
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d106      	bne.n	80033be <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80033b8:	187b      	adds	r3, r7, r1
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	2210      	movs	r2, #16
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	d123      	bne.n	8003414 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2210      	movs	r2, #16
 80033d2:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2204      	movs	r2, #4
 80033d8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2220      	movs	r2, #32
 80033e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4929      	ldr	r1, [pc, #164]	@ (8003494 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80033ee:	400a      	ands	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2241      	movs	r2, #65	@ 0x41
 80033f6:	2120      	movs	r1, #32
 80033f8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2242      	movs	r2, #66	@ 0x42
 80033fe:	2100      	movs	r1, #0
 8003400:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2240      	movs	r2, #64	@ 0x40
 8003406:	2100      	movs	r1, #0
 8003408:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800340a:	2317      	movs	r3, #23
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	2201      	movs	r2, #1
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	e002      	b.n	800341a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800341a:	f7fe fc6f 	bl	8001cfc <HAL_GetTick>
 800341e:	0002      	movs	r2, r0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	429a      	cmp	r2, r3
 8003428:	d302      	bcc.n	8003430 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d11c      	bne.n	800346a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003430:	2017      	movs	r0, #23
 8003432:	183b      	adds	r3, r7, r0
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d117      	bne.n	800346a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	2204      	movs	r2, #4
 8003442:	4013      	ands	r3, r2
 8003444:	2b04      	cmp	r3, #4
 8003446:	d010      	beq.n	800346a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344c:	2220      	movs	r2, #32
 800344e:	431a      	orrs	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2241      	movs	r2, #65	@ 0x41
 8003458:	2120      	movs	r1, #32
 800345a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2240      	movs	r2, #64	@ 0x40
 8003460:	2100      	movs	r1, #0
 8003462:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003464:	183b      	adds	r3, r7, r0
 8003466:	2201      	movs	r2, #1
 8003468:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	2204      	movs	r2, #4
 8003472:	4013      	ands	r3, r2
 8003474:	2b04      	cmp	r3, #4
 8003476:	d005      	beq.n	8003484 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003478:	2317      	movs	r3, #23
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d100      	bne.n	8003484 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003482:	e776      	b.n	8003372 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8003484:	2317      	movs	r3, #23
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	781b      	ldrb	r3, [r3, #0]
}
 800348a:	0018      	movs	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	b006      	add	sp, #24
 8003490:	bd80      	pop	{r7, pc}
 8003492:	46c0      	nop			@ (mov r8, r8)
 8003494:	fe00e800 	.word	0xfe00e800

08003498 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08a      	sub	sp, #40	@ 0x28
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a4:	2327      	movs	r3, #39	@ 0x27
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2210      	movs	r2, #16
 80034c0:	4013      	ands	r3, r2
 80034c2:	d100      	bne.n	80034c6 <I2C_IsErrorOccurred+0x2e>
 80034c4:	e079      	b.n	80035ba <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2210      	movs	r2, #16
 80034cc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034ce:	e057      	b.n	8003580 <I2C_IsErrorOccurred+0xe8>
 80034d0:	2227      	movs	r2, #39	@ 0x27
 80034d2:	18bb      	adds	r3, r7, r2
 80034d4:	18ba      	adds	r2, r7, r2
 80034d6:	7812      	ldrb	r2, [r2, #0]
 80034d8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	3301      	adds	r3, #1
 80034de:	d04f      	beq.n	8003580 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034e0:	f7fe fc0c 	bl	8001cfc <HAL_GetTick>
 80034e4:	0002      	movs	r2, r0
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d302      	bcc.n	80034f6 <I2C_IsErrorOccurred+0x5e>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d144      	bne.n	8003580 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	2380      	movs	r3, #128	@ 0x80
 80034fe:	01db      	lsls	r3, r3, #7
 8003500:	4013      	ands	r3, r2
 8003502:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003504:	2013      	movs	r0, #19
 8003506:	183b      	adds	r3, r7, r0
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	2142      	movs	r1, #66	@ 0x42
 800350c:	5c52      	ldrb	r2, [r2, r1]
 800350e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	2380      	movs	r3, #128	@ 0x80
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	401a      	ands	r2, r3
 800351c:	2380      	movs	r3, #128	@ 0x80
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	429a      	cmp	r2, r3
 8003522:	d126      	bne.n	8003572 <I2C_IsErrorOccurred+0xda>
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	2380      	movs	r3, #128	@ 0x80
 8003528:	01db      	lsls	r3, r3, #7
 800352a:	429a      	cmp	r2, r3
 800352c:	d021      	beq.n	8003572 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800352e:	183b      	adds	r3, r7, r0
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b20      	cmp	r3, #32
 8003534:	d01d      	beq.n	8003572 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2180      	movs	r1, #128	@ 0x80
 8003542:	01c9      	lsls	r1, r1, #7
 8003544:	430a      	orrs	r2, r1
 8003546:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003548:	f7fe fbd8 	bl	8001cfc <HAL_GetTick>
 800354c:	0003      	movs	r3, r0
 800354e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003550:	e00f      	b.n	8003572 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003552:	f7fe fbd3 	bl	8001cfc <HAL_GetTick>
 8003556:	0002      	movs	r2, r0
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b19      	cmp	r3, #25
 800355e:	d908      	bls.n	8003572 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	2220      	movs	r2, #32
 8003564:	4313      	orrs	r3, r2
 8003566:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003568:	2327      	movs	r3, #39	@ 0x27
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]

              break;
 8003570:	e006      	b.n	8003580 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	2220      	movs	r2, #32
 800357a:	4013      	ands	r3, r2
 800357c:	2b20      	cmp	r3, #32
 800357e:	d1e8      	bne.n	8003552 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2220      	movs	r2, #32
 8003588:	4013      	ands	r3, r2
 800358a:	2b20      	cmp	r3, #32
 800358c:	d004      	beq.n	8003598 <I2C_IsErrorOccurred+0x100>
 800358e:	2327      	movs	r3, #39	@ 0x27
 8003590:	18fb      	adds	r3, r7, r3
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d09b      	beq.n	80034d0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003598:	2327      	movs	r3, #39	@ 0x27
 800359a:	18fb      	adds	r3, r7, r3
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d103      	bne.n	80035aa <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2220      	movs	r2, #32
 80035a8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	2204      	movs	r2, #4
 80035ae:	4313      	orrs	r3, r2
 80035b0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035b2:	2327      	movs	r3, #39	@ 0x27
 80035b4:	18fb      	adds	r3, r7, r3
 80035b6:	2201      	movs	r2, #1
 80035b8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	2380      	movs	r3, #128	@ 0x80
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4013      	ands	r3, r2
 80035ca:	d00c      	beq.n	80035e6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	2201      	movs	r2, #1
 80035d0:	4313      	orrs	r3, r2
 80035d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2280      	movs	r2, #128	@ 0x80
 80035da:	0052      	lsls	r2, r2, #1
 80035dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035de:	2327      	movs	r3, #39	@ 0x27
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	2380      	movs	r3, #128	@ 0x80
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4013      	ands	r3, r2
 80035ee:	d00c      	beq.n	800360a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	2208      	movs	r2, #8
 80035f4:	4313      	orrs	r3, r2
 80035f6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2280      	movs	r2, #128	@ 0x80
 80035fe:	00d2      	lsls	r2, r2, #3
 8003600:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003602:	2327      	movs	r3, #39	@ 0x27
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	2380      	movs	r3, #128	@ 0x80
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4013      	ands	r3, r2
 8003612:	d00c      	beq.n	800362e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	2202      	movs	r2, #2
 8003618:	4313      	orrs	r3, r2
 800361a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2280      	movs	r2, #128	@ 0x80
 8003622:	0092      	lsls	r2, r2, #2
 8003624:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003626:	2327      	movs	r3, #39	@ 0x27
 8003628:	18fb      	adds	r3, r7, r3
 800362a:	2201      	movs	r2, #1
 800362c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800362e:	2327      	movs	r3, #39	@ 0x27
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01d      	beq.n	8003674 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	0018      	movs	r0, r3
 800363c:	f7ff fd8a 	bl	8003154 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	490e      	ldr	r1, [pc, #56]	@ (8003684 <I2C_IsErrorOccurred+0x1ec>)
 800364c:	400a      	ands	r2, r1
 800364e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	431a      	orrs	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2241      	movs	r2, #65	@ 0x41
 8003660:	2120      	movs	r1, #32
 8003662:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2242      	movs	r2, #66	@ 0x42
 8003668:	2100      	movs	r1, #0
 800366a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2240      	movs	r2, #64	@ 0x40
 8003670:	2100      	movs	r1, #0
 8003672:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003674:	2327      	movs	r3, #39	@ 0x27
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	781b      	ldrb	r3, [r3, #0]
}
 800367a:	0018      	movs	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	b00a      	add	sp, #40	@ 0x28
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	fe00e800 	.word	0xfe00e800

08003688 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003688:	b590      	push	{r4, r7, lr}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	0008      	movs	r0, r1
 8003692:	0011      	movs	r1, r2
 8003694:	607b      	str	r3, [r7, #4]
 8003696:	240a      	movs	r4, #10
 8003698:	193b      	adds	r3, r7, r4
 800369a:	1c02      	adds	r2, r0, #0
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2009      	movs	r0, #9
 80036a0:	183b      	adds	r3, r7, r0
 80036a2:	1c0a      	adds	r2, r1, #0
 80036a4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036a6:	193b      	adds	r3, r7, r4
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	059b      	lsls	r3, r3, #22
 80036ac:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036ae:	183b      	adds	r3, r7, r0
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	0419      	lsls	r1, r3, #16
 80036b4:	23ff      	movs	r3, #255	@ 0xff
 80036b6:	041b      	lsls	r3, r3, #16
 80036b8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036ba:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c2:	4313      	orrs	r3, r2
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	085b      	lsrs	r3, r3, #1
 80036c8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036d2:	0d51      	lsrs	r1, r2, #21
 80036d4:	2280      	movs	r2, #128	@ 0x80
 80036d6:	00d2      	lsls	r2, r2, #3
 80036d8:	400a      	ands	r2, r1
 80036da:	4907      	ldr	r1, [pc, #28]	@ (80036f8 <I2C_TransferConfig+0x70>)
 80036dc:	430a      	orrs	r2, r1
 80036de:	43d2      	mvns	r2, r2
 80036e0:	401a      	ands	r2, r3
 80036e2:	0011      	movs	r1, r2
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036ee:	46c0      	nop			@ (mov r8, r8)
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b007      	add	sp, #28
 80036f4:	bd90      	pop	{r4, r7, pc}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	03ff63ff 	.word	0x03ff63ff

080036fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2241      	movs	r2, #65	@ 0x41
 800370a:	5c9b      	ldrb	r3, [r3, r2]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b20      	cmp	r3, #32
 8003710:	d138      	bne.n	8003784 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2240      	movs	r2, #64	@ 0x40
 8003716:	5c9b      	ldrb	r3, [r3, r2]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800371c:	2302      	movs	r3, #2
 800371e:	e032      	b.n	8003786 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2240      	movs	r2, #64	@ 0x40
 8003724:	2101      	movs	r1, #1
 8003726:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2241      	movs	r2, #65	@ 0x41
 800372c:	2124      	movs	r1, #36	@ 0x24
 800372e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2101      	movs	r1, #1
 800373c:	438a      	bics	r2, r1
 800373e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4911      	ldr	r1, [pc, #68]	@ (8003790 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800374c:	400a      	ands	r2, r1
 800374e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6819      	ldr	r1, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2101      	movs	r1, #1
 800376c:	430a      	orrs	r2, r1
 800376e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2241      	movs	r2, #65	@ 0x41
 8003774:	2120      	movs	r1, #32
 8003776:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2240      	movs	r2, #64	@ 0x40
 800377c:	2100      	movs	r1, #0
 800377e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	e000      	b.n	8003786 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003784:	2302      	movs	r3, #2
  }
}
 8003786:	0018      	movs	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	b002      	add	sp, #8
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			@ (mov r8, r8)
 8003790:	ffffefff 	.word	0xffffefff

08003794 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2241      	movs	r2, #65	@ 0x41
 80037a2:	5c9b      	ldrb	r3, [r3, r2]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d139      	bne.n	800381e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2240      	movs	r2, #64	@ 0x40
 80037ae:	5c9b      	ldrb	r3, [r3, r2]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e033      	b.n	8003820 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2240      	movs	r2, #64	@ 0x40
 80037bc:	2101      	movs	r1, #1
 80037be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2241      	movs	r2, #65	@ 0x41
 80037c4:	2124      	movs	r1, #36	@ 0x24
 80037c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2101      	movs	r1, #1
 80037d4:	438a      	bics	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4a11      	ldr	r2, [pc, #68]	@ (8003828 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	021b      	lsls	r3, r3, #8
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2101      	movs	r1, #1
 8003806:	430a      	orrs	r2, r1
 8003808:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2241      	movs	r2, #65	@ 0x41
 800380e:	2120      	movs	r1, #32
 8003810:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2240      	movs	r2, #64	@ 0x40
 8003816:	2100      	movs	r1, #0
 8003818:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	e000      	b.n	8003820 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800381e:	2302      	movs	r3, #2
  }
}
 8003820:	0018      	movs	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	b004      	add	sp, #16
 8003826:	bd80      	pop	{r7, pc}
 8003828:	fffff0ff 	.word	0xfffff0ff

0800382c <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003830:	4b04      	ldr	r3, [pc, #16]	@ (8003844 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4b03      	ldr	r3, [pc, #12]	@ (8003844 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003836:	2180      	movs	r1, #128	@ 0x80
 8003838:	0049      	lsls	r1, r1, #1
 800383a:	430a      	orrs	r2, r1
 800383c:	601a      	str	r2, [r3, #0]
}
 800383e:	46c0      	nop			@ (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40007000 	.word	0x40007000

08003848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003850:	4b19      	ldr	r3, [pc, #100]	@ (80038b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a19      	ldr	r2, [pc, #100]	@ (80038bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003856:	4013      	ands	r3, r2
 8003858:	0019      	movs	r1, r3
 800385a:	4b17      	ldr	r3, [pc, #92]	@ (80038b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	430a      	orrs	r2, r1
 8003860:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	2380      	movs	r3, #128	@ 0x80
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	429a      	cmp	r2, r3
 800386a:	d11f      	bne.n	80038ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800386c:	4b14      	ldr	r3, [pc, #80]	@ (80038c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	0013      	movs	r3, r2
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	189b      	adds	r3, r3, r2
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	4912      	ldr	r1, [pc, #72]	@ (80038c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800387a:	0018      	movs	r0, r3
 800387c:	f7fc fc42 	bl	8000104 <__udivsi3>
 8003880:	0003      	movs	r3, r0
 8003882:	3301      	adds	r3, #1
 8003884:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003886:	e008      	b.n	800389a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3b01      	subs	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	e001      	b.n	800389a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e009      	b.n	80038ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800389a:	4b07      	ldr	r3, [pc, #28]	@ (80038b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	2380      	movs	r3, #128	@ 0x80
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	401a      	ands	r2, r3
 80038a4:	2380      	movs	r3, #128	@ 0x80
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d0ed      	beq.n	8003888 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	0018      	movs	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b004      	add	sp, #16
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			@ (mov r8, r8)
 80038b8:	40007000 	.word	0x40007000
 80038bc:	fffff9ff 	.word	0xfffff9ff
 80038c0:	20000044 	.word	0x20000044
 80038c4:	000f4240 	.word	0x000f4240

080038c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e2fe      	b.n	8003ed8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2201      	movs	r2, #1
 80038e0:	4013      	ands	r3, r2
 80038e2:	d100      	bne.n	80038e6 <HAL_RCC_OscConfig+0x1e>
 80038e4:	e07c      	b.n	80039e0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038e6:	4bc3      	ldr	r3, [pc, #780]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2238      	movs	r2, #56	@ 0x38
 80038ec:	4013      	ands	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038f0:	4bc0      	ldr	r3, [pc, #768]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	2203      	movs	r2, #3
 80038f6:	4013      	ands	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	2b10      	cmp	r3, #16
 80038fe:	d102      	bne.n	8003906 <HAL_RCC_OscConfig+0x3e>
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2b03      	cmp	r3, #3
 8003904:	d002      	beq.n	800390c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	2b08      	cmp	r3, #8
 800390a:	d10b      	bne.n	8003924 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390c:	4bb9      	ldr	r3, [pc, #740]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	2380      	movs	r3, #128	@ 0x80
 8003912:	029b      	lsls	r3, r3, #10
 8003914:	4013      	ands	r3, r2
 8003916:	d062      	beq.n	80039de <HAL_RCC_OscConfig+0x116>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d15e      	bne.n	80039de <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e2d9      	b.n	8003ed8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	2380      	movs	r3, #128	@ 0x80
 800392a:	025b      	lsls	r3, r3, #9
 800392c:	429a      	cmp	r2, r3
 800392e:	d107      	bne.n	8003940 <HAL_RCC_OscConfig+0x78>
 8003930:	4bb0      	ldr	r3, [pc, #704]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	4baf      	ldr	r3, [pc, #700]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003936:	2180      	movs	r1, #128	@ 0x80
 8003938:	0249      	lsls	r1, r1, #9
 800393a:	430a      	orrs	r2, r1
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	e020      	b.n	8003982 <HAL_RCC_OscConfig+0xba>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	23a0      	movs	r3, #160	@ 0xa0
 8003946:	02db      	lsls	r3, r3, #11
 8003948:	429a      	cmp	r2, r3
 800394a:	d10e      	bne.n	800396a <HAL_RCC_OscConfig+0xa2>
 800394c:	4ba9      	ldr	r3, [pc, #676]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	4ba8      	ldr	r3, [pc, #672]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003952:	2180      	movs	r1, #128	@ 0x80
 8003954:	02c9      	lsls	r1, r1, #11
 8003956:	430a      	orrs	r2, r1
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	4ba6      	ldr	r3, [pc, #664]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	4ba5      	ldr	r3, [pc, #660]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003960:	2180      	movs	r1, #128	@ 0x80
 8003962:	0249      	lsls	r1, r1, #9
 8003964:	430a      	orrs	r2, r1
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	e00b      	b.n	8003982 <HAL_RCC_OscConfig+0xba>
 800396a:	4ba2      	ldr	r3, [pc, #648]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4ba1      	ldr	r3, [pc, #644]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003970:	49a1      	ldr	r1, [pc, #644]	@ (8003bf8 <HAL_RCC_OscConfig+0x330>)
 8003972:	400a      	ands	r2, r1
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	4b9f      	ldr	r3, [pc, #636]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4b9e      	ldr	r3, [pc, #632]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 800397c:	499f      	ldr	r1, [pc, #636]	@ (8003bfc <HAL_RCC_OscConfig+0x334>)
 800397e:	400a      	ands	r2, r1
 8003980:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d014      	beq.n	80039b4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7fe f9b7 	bl	8001cfc <HAL_GetTick>
 800398e:	0003      	movs	r3, r0
 8003990:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003994:	f7fe f9b2 	bl	8001cfc <HAL_GetTick>
 8003998:	0002      	movs	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b64      	cmp	r3, #100	@ 0x64
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e298      	b.n	8003ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039a6:	4b93      	ldr	r3, [pc, #588]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	2380      	movs	r3, #128	@ 0x80
 80039ac:	029b      	lsls	r3, r3, #10
 80039ae:	4013      	ands	r3, r2
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0xcc>
 80039b2:	e015      	b.n	80039e0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fe f9a2 	bl	8001cfc <HAL_GetTick>
 80039b8:	0003      	movs	r3, r0
 80039ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039be:	f7fe f99d 	bl	8001cfc <HAL_GetTick>
 80039c2:	0002      	movs	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b64      	cmp	r3, #100	@ 0x64
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e283      	b.n	8003ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039d0:	4b88      	ldr	r3, [pc, #544]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	2380      	movs	r3, #128	@ 0x80
 80039d6:	029b      	lsls	r3, r3, #10
 80039d8:	4013      	ands	r3, r2
 80039da:	d1f0      	bne.n	80039be <HAL_RCC_OscConfig+0xf6>
 80039dc:	e000      	b.n	80039e0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039de:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2202      	movs	r2, #2
 80039e6:	4013      	ands	r3, r2
 80039e8:	d100      	bne.n	80039ec <HAL_RCC_OscConfig+0x124>
 80039ea:	e099      	b.n	8003b20 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ec:	4b81      	ldr	r3, [pc, #516]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2238      	movs	r2, #56	@ 0x38
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039f6:	4b7f      	ldr	r3, [pc, #508]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	2203      	movs	r2, #3
 80039fc:	4013      	ands	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b10      	cmp	r3, #16
 8003a04:	d102      	bne.n	8003a0c <HAL_RCC_OscConfig+0x144>
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d002      	beq.n	8003a12 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d135      	bne.n	8003a7e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a12:	4b78      	ldr	r3, [pc, #480]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	2380      	movs	r3, #128	@ 0x80
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d005      	beq.n	8003a2a <HAL_RCC_OscConfig+0x162>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e256      	b.n	8003ed8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2a:	4b72      	ldr	r3, [pc, #456]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	4a74      	ldr	r2, [pc, #464]	@ (8003c00 <HAL_RCC_OscConfig+0x338>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	0019      	movs	r1, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	021a      	lsls	r2, r3, #8
 8003a3a:	4b6e      	ldr	r3, [pc, #440]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d112      	bne.n	8003a6c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a46:	4b6b      	ldr	r3, [pc, #428]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a6e      	ldr	r2, [pc, #440]	@ (8003c04 <HAL_RCC_OscConfig+0x33c>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	0019      	movs	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	4b67      	ldr	r3, [pc, #412]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003a56:	430a      	orrs	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003a5a:	4b66      	ldr	r3, [pc, #408]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	0adb      	lsrs	r3, r3, #11
 8003a60:	2207      	movs	r2, #7
 8003a62:	4013      	ands	r3, r2
 8003a64:	4a68      	ldr	r2, [pc, #416]	@ (8003c08 <HAL_RCC_OscConfig+0x340>)
 8003a66:	40da      	lsrs	r2, r3
 8003a68:	4b68      	ldr	r3, [pc, #416]	@ (8003c0c <HAL_RCC_OscConfig+0x344>)
 8003a6a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a6c:	4b68      	ldr	r3, [pc, #416]	@ (8003c10 <HAL_RCC_OscConfig+0x348>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	0018      	movs	r0, r3
 8003a72:	f7fe f8e7 	bl	8001c44 <HAL_InitTick>
 8003a76:	1e03      	subs	r3, r0, #0
 8003a78:	d051      	beq.n	8003b1e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e22c      	b.n	8003ed8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d030      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a86:	4b5b      	ldr	r3, [pc, #364]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a5e      	ldr	r2, [pc, #376]	@ (8003c04 <HAL_RCC_OscConfig+0x33c>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	0019      	movs	r1, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	4b57      	ldr	r3, [pc, #348]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003a96:	430a      	orrs	r2, r1
 8003a98:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003a9a:	4b56      	ldr	r3, [pc, #344]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	4b55      	ldr	r3, [pc, #340]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003aa0:	2180      	movs	r1, #128	@ 0x80
 8003aa2:	0049      	lsls	r1, r1, #1
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fe f928 	bl	8001cfc <HAL_GetTick>
 8003aac:	0003      	movs	r3, r0
 8003aae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab2:	f7fe f923 	bl	8001cfc <HAL_GetTick>
 8003ab6:	0002      	movs	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e209      	b.n	8003ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ac4:	4b4b      	ldr	r3, [pc, #300]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	2380      	movs	r3, #128	@ 0x80
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4013      	ands	r3, r2
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad0:	4b48      	ldr	r3, [pc, #288]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	4a4a      	ldr	r2, [pc, #296]	@ (8003c00 <HAL_RCC_OscConfig+0x338>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	0019      	movs	r1, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	021a      	lsls	r2, r3, #8
 8003ae0:	4b44      	ldr	r3, [pc, #272]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	e01b      	b.n	8003b20 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003ae8:	4b42      	ldr	r3, [pc, #264]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	4b41      	ldr	r3, [pc, #260]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003aee:	4949      	ldr	r1, [pc, #292]	@ (8003c14 <HAL_RCC_OscConfig+0x34c>)
 8003af0:	400a      	ands	r2, r1
 8003af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af4:	f7fe f902 	bl	8001cfc <HAL_GetTick>
 8003af8:	0003      	movs	r3, r0
 8003afa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003afe:	f7fe f8fd 	bl	8001cfc <HAL_GetTick>
 8003b02:	0002      	movs	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e1e3      	b.n	8003ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b10:	4b38      	ldr	r3, [pc, #224]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	2380      	movs	r3, #128	@ 0x80
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d1f0      	bne.n	8003afe <HAL_RCC_OscConfig+0x236>
 8003b1c:	e000      	b.n	8003b20 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b1e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2208      	movs	r2, #8
 8003b26:	4013      	ands	r3, r2
 8003b28:	d047      	beq.n	8003bba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003b2a:	4b32      	ldr	r3, [pc, #200]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2238      	movs	r2, #56	@ 0x38
 8003b30:	4013      	ands	r3, r2
 8003b32:	2b18      	cmp	r3, #24
 8003b34:	d10a      	bne.n	8003b4c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003b36:	4b2f      	ldr	r3, [pc, #188]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d03c      	beq.n	8003bba <HAL_RCC_OscConfig+0x2f2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d138      	bne.n	8003bba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e1c5      	b.n	8003ed8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d019      	beq.n	8003b88 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003b54:	4b27      	ldr	r3, [pc, #156]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003b56:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b58:	4b26      	ldr	r3, [pc, #152]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fe f8cc 	bl	8001cfc <HAL_GetTick>
 8003b64:	0003      	movs	r3, r0
 8003b66:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b6a:	f7fe f8c7 	bl	8001cfc <HAL_GetTick>
 8003b6e:	0002      	movs	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e1ad      	b.n	8003ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b80:	2202      	movs	r2, #2
 8003b82:	4013      	ands	r3, r2
 8003b84:	d0f1      	beq.n	8003b6a <HAL_RCC_OscConfig+0x2a2>
 8003b86:	e018      	b.n	8003bba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003b88:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003b8a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b8c:	4b19      	ldr	r3, [pc, #100]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003b8e:	2101      	movs	r1, #1
 8003b90:	438a      	bics	r2, r1
 8003b92:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fe f8b2 	bl	8001cfc <HAL_GetTick>
 8003b98:	0003      	movs	r3, r0
 8003b9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b9e:	f7fe f8ad 	bl	8001cfc <HAL_GetTick>
 8003ba2:	0002      	movs	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e193      	b.n	8003ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bb0:	4b10      	ldr	r3, [pc, #64]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d1f1      	bne.n	8003b9e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2204      	movs	r2, #4
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d100      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x2fe>
 8003bc4:	e0c6      	b.n	8003d54 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc6:	231f      	movs	r3, #31
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	2200      	movs	r2, #0
 8003bcc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003bce:	4b09      	ldr	r3, [pc, #36]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2238      	movs	r2, #56	@ 0x38
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	d11e      	bne.n	8003c18 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003bda:	4b06      	ldr	r3, [pc, #24]	@ (8003bf4 <HAL_RCC_OscConfig+0x32c>)
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bde:	2202      	movs	r2, #2
 8003be0:	4013      	ands	r3, r2
 8003be2:	d100      	bne.n	8003be6 <HAL_RCC_OscConfig+0x31e>
 8003be4:	e0b6      	b.n	8003d54 <HAL_RCC_OscConfig+0x48c>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d000      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x328>
 8003bee:	e0b1      	b.n	8003d54 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e171      	b.n	8003ed8 <HAL_RCC_OscConfig+0x610>
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	fffeffff 	.word	0xfffeffff
 8003bfc:	fffbffff 	.word	0xfffbffff
 8003c00:	ffff80ff 	.word	0xffff80ff
 8003c04:	ffffc7ff 	.word	0xffffc7ff
 8003c08:	00f42400 	.word	0x00f42400
 8003c0c:	20000044 	.word	0x20000044
 8003c10:	20000048 	.word	0x20000048
 8003c14:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c18:	4bb1      	ldr	r3, [pc, #708]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003c1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c1c:	2380      	movs	r3, #128	@ 0x80
 8003c1e:	055b      	lsls	r3, r3, #21
 8003c20:	4013      	ands	r3, r2
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_OscConfig+0x360>
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <HAL_RCC_OscConfig+0x362>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d011      	beq.n	8003c52 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003c2e:	4bac      	ldr	r3, [pc, #688]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003c30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c32:	4bab      	ldr	r3, [pc, #684]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003c34:	2180      	movs	r1, #128	@ 0x80
 8003c36:	0549      	lsls	r1, r1, #21
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c3c:	4ba8      	ldr	r3, [pc, #672]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003c3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c40:	2380      	movs	r3, #128	@ 0x80
 8003c42:	055b      	lsls	r3, r3, #21
 8003c44:	4013      	ands	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003c4a:	231f      	movs	r3, #31
 8003c4c:	18fb      	adds	r3, r7, r3
 8003c4e:	2201      	movs	r2, #1
 8003c50:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c52:	4ba4      	ldr	r3, [pc, #656]	@ (8003ee4 <HAL_RCC_OscConfig+0x61c>)
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	2380      	movs	r3, #128	@ 0x80
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d11a      	bne.n	8003c94 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c5e:	4ba1      	ldr	r3, [pc, #644]	@ (8003ee4 <HAL_RCC_OscConfig+0x61c>)
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4ba0      	ldr	r3, [pc, #640]	@ (8003ee4 <HAL_RCC_OscConfig+0x61c>)
 8003c64:	2180      	movs	r1, #128	@ 0x80
 8003c66:	0049      	lsls	r1, r1, #1
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003c6c:	f7fe f846 	bl	8001cfc <HAL_GetTick>
 8003c70:	0003      	movs	r3, r0
 8003c72:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c76:	f7fe f841 	bl	8001cfc <HAL_GetTick>
 8003c7a:	0002      	movs	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e127      	b.n	8003ed8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c88:	4b96      	ldr	r3, [pc, #600]	@ (8003ee4 <HAL_RCC_OscConfig+0x61c>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	2380      	movs	r3, #128	@ 0x80
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	4013      	ands	r3, r2
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d106      	bne.n	8003caa <HAL_RCC_OscConfig+0x3e2>
 8003c9c:	4b90      	ldr	r3, [pc, #576]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003c9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ca0:	4b8f      	ldr	r3, [pc, #572]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ca8:	e01c      	b.n	8003ce4 <HAL_RCC_OscConfig+0x41c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	d10c      	bne.n	8003ccc <HAL_RCC_OscConfig+0x404>
 8003cb2:	4b8b      	ldr	r3, [pc, #556]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003cb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003cb6:	4b8a      	ldr	r3, [pc, #552]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003cb8:	2104      	movs	r1, #4
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003cbe:	4b88      	ldr	r3, [pc, #544]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003cc0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003cc2:	4b87      	ldr	r3, [pc, #540]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003cca:	e00b      	b.n	8003ce4 <HAL_RCC_OscConfig+0x41c>
 8003ccc:	4b84      	ldr	r3, [pc, #528]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003cce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003cd0:	4b83      	ldr	r3, [pc, #524]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	438a      	bics	r2, r1
 8003cd6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003cd8:	4b81      	ldr	r3, [pc, #516]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003cda:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003cdc:	4b80      	ldr	r3, [pc, #512]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003cde:	2104      	movs	r1, #4
 8003ce0:	438a      	bics	r2, r1
 8003ce2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d014      	beq.n	8003d16 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fe f806 	bl	8001cfc <HAL_GetTick>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cf4:	e009      	b.n	8003d0a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7fe f801 	bl	8001cfc <HAL_GetTick>
 8003cfa:	0002      	movs	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	4a79      	ldr	r2, [pc, #484]	@ (8003ee8 <HAL_RCC_OscConfig+0x620>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e0e6      	b.n	8003ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d0a:	4b75      	ldr	r3, [pc, #468]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d0e:	2202      	movs	r2, #2
 8003d10:	4013      	ands	r3, r2
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x42e>
 8003d14:	e013      	b.n	8003d3e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d16:	f7fd fff1 	bl	8001cfc <HAL_GetTick>
 8003d1a:	0003      	movs	r3, r0
 8003d1c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d1e:	e009      	b.n	8003d34 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d20:	f7fd ffec 	bl	8001cfc <HAL_GetTick>
 8003d24:	0002      	movs	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	4a6f      	ldr	r2, [pc, #444]	@ (8003ee8 <HAL_RCC_OscConfig+0x620>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e0d1      	b.n	8003ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d34:	4b6a      	ldr	r3, [pc, #424]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d38:	2202      	movs	r2, #2
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003d3e:	231f      	movs	r3, #31
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d105      	bne.n	8003d54 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003d48:	4b65      	ldr	r3, [pc, #404]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003d4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d4c:	4b64      	ldr	r3, [pc, #400]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003d4e:	4967      	ldr	r1, [pc, #412]	@ (8003eec <HAL_RCC_OscConfig+0x624>)
 8003d50:	400a      	ands	r2, r1
 8003d52:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d100      	bne.n	8003d5e <HAL_RCC_OscConfig+0x496>
 8003d5c:	e0bb      	b.n	8003ed6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d5e:	4b60      	ldr	r3, [pc, #384]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2238      	movs	r2, #56	@ 0x38
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b10      	cmp	r3, #16
 8003d68:	d100      	bne.n	8003d6c <HAL_RCC_OscConfig+0x4a4>
 8003d6a:	e07b      	b.n	8003e64 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d156      	bne.n	8003e22 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d74:	4b5a      	ldr	r3, [pc, #360]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	4b59      	ldr	r3, [pc, #356]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003d7a:	495d      	ldr	r1, [pc, #372]	@ (8003ef0 <HAL_RCC_OscConfig+0x628>)
 8003d7c:	400a      	ands	r2, r1
 8003d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d80:	f7fd ffbc 	bl	8001cfc <HAL_GetTick>
 8003d84:	0003      	movs	r3, r0
 8003d86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d8a:	f7fd ffb7 	bl	8001cfc <HAL_GetTick>
 8003d8e:	0002      	movs	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e09d      	b.n	8003ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d9c:	4b50      	ldr	r3, [pc, #320]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	2380      	movs	r3, #128	@ 0x80
 8003da2:	049b      	lsls	r3, r3, #18
 8003da4:	4013      	ands	r3, r2
 8003da6:	d1f0      	bne.n	8003d8a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003da8:	4b4d      	ldr	r3, [pc, #308]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	4a51      	ldr	r2, [pc, #324]	@ (8003ef4 <HAL_RCC_OscConfig+0x62c>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	0019      	movs	r1, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1a      	ldr	r2, [r3, #32]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	4b42      	ldr	r3, [pc, #264]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ddc:	4b40      	ldr	r3, [pc, #256]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b3f      	ldr	r3, [pc, #252]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003de2:	2180      	movs	r1, #128	@ 0x80
 8003de4:	0449      	lsls	r1, r1, #17
 8003de6:	430a      	orrs	r2, r1
 8003de8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003dea:	4b3d      	ldr	r3, [pc, #244]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	4b3c      	ldr	r3, [pc, #240]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003df0:	2180      	movs	r1, #128	@ 0x80
 8003df2:	0549      	lsls	r1, r1, #21
 8003df4:	430a      	orrs	r2, r1
 8003df6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fd ff80 	bl	8001cfc <HAL_GetTick>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e02:	f7fd ff7b 	bl	8001cfc <HAL_GetTick>
 8003e06:	0002      	movs	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e061      	b.n	8003ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e14:	4b32      	ldr	r3, [pc, #200]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	2380      	movs	r3, #128	@ 0x80
 8003e1a:	049b      	lsls	r3, r3, #18
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x53a>
 8003e20:	e059      	b.n	8003ed6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e22:	4b2f      	ldr	r3, [pc, #188]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4b2e      	ldr	r3, [pc, #184]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003e28:	4931      	ldr	r1, [pc, #196]	@ (8003ef0 <HAL_RCC_OscConfig+0x628>)
 8003e2a:	400a      	ands	r2, r1
 8003e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2e:	f7fd ff65 	bl	8001cfc <HAL_GetTick>
 8003e32:	0003      	movs	r3, r0
 8003e34:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e38:	f7fd ff60 	bl	8001cfc <HAL_GetTick>
 8003e3c:	0002      	movs	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e046      	b.n	8003ed8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e4a:	4b25      	ldr	r3, [pc, #148]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	2380      	movs	r3, #128	@ 0x80
 8003e50:	049b      	lsls	r3, r3, #18
 8003e52:	4013      	ands	r3, r2
 8003e54:	d1f0      	bne.n	8003e38 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003e56:	4b22      	ldr	r3, [pc, #136]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	4b21      	ldr	r3, [pc, #132]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003e5c:	4926      	ldr	r1, [pc, #152]	@ (8003ef8 <HAL_RCC_OscConfig+0x630>)
 8003e5e:	400a      	ands	r2, r1
 8003e60:	60da      	str	r2, [r3, #12]
 8003e62:	e038      	b.n	8003ed6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e033      	b.n	8003ed8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003e70:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee0 <HAL_RCC_OscConfig+0x618>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2203      	movs	r2, #3
 8003e7a:	401a      	ands	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d126      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	2270      	movs	r2, #112	@ 0x70
 8003e88:	401a      	ands	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d11f      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	23fe      	movs	r3, #254	@ 0xfe
 8003e96:	01db      	lsls	r3, r3, #7
 8003e98:	401a      	ands	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d116      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	23f8      	movs	r3, #248	@ 0xf8
 8003ea8:	039b      	lsls	r3, r3, #14
 8003eaa:	401a      	ands	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d10e      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	23e0      	movs	r3, #224	@ 0xe0
 8003eb8:	051b      	lsls	r3, r3, #20
 8003eba:	401a      	ands	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d106      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	0f5b      	lsrs	r3, r3, #29
 8003ec8:	075a      	lsls	r2, r3, #29
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d001      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	0018      	movs	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b008      	add	sp, #32
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	40007000 	.word	0x40007000
 8003ee8:	00001388 	.word	0x00001388
 8003eec:	efffffff 	.word	0xefffffff
 8003ef0:	feffffff 	.word	0xfeffffff
 8003ef4:	11c1808c 	.word	0x11c1808c
 8003ef8:	eefefffc 	.word	0xeefefffc

08003efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0e9      	b.n	80040e4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f10:	4b76      	ldr	r3, [pc, #472]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2207      	movs	r2, #7
 8003f16:	4013      	ands	r3, r2
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d91e      	bls.n	8003f5c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1e:	4b73      	ldr	r3, [pc, #460]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2207      	movs	r2, #7
 8003f24:	4393      	bics	r3, r2
 8003f26:	0019      	movs	r1, r3
 8003f28:	4b70      	ldr	r3, [pc, #448]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f30:	f7fd fee4 	bl	8001cfc <HAL_GetTick>
 8003f34:	0003      	movs	r3, r0
 8003f36:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f38:	e009      	b.n	8003f4e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f3a:	f7fd fedf 	bl	8001cfc <HAL_GetTick>
 8003f3e:	0002      	movs	r2, r0
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	4a6a      	ldr	r2, [pc, #424]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e0ca      	b.n	80040e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f4e:	4b67      	ldr	r3, [pc, #412]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2207      	movs	r2, #7
 8003f54:	4013      	ands	r3, r2
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d1ee      	bne.n	8003f3a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2202      	movs	r2, #2
 8003f62:	4013      	ands	r3, r2
 8003f64:	d015      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d006      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003f70:	4b60      	ldr	r3, [pc, #384]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f8>)
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	4b5f      	ldr	r3, [pc, #380]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f8>)
 8003f76:	21e0      	movs	r1, #224	@ 0xe0
 8003f78:	01c9      	lsls	r1, r1, #7
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f7e:	4b5d      	ldr	r3, [pc, #372]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f8>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	4a5d      	ldr	r2, [pc, #372]	@ (80040f8 <HAL_RCC_ClockConfig+0x1fc>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	0019      	movs	r1, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	4b59      	ldr	r3, [pc, #356]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f8>)
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2201      	movs	r2, #1
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d057      	beq.n	800404c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d107      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fa4:	4b53      	ldr	r3, [pc, #332]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f8>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	2380      	movs	r3, #128	@ 0x80
 8003faa:	029b      	lsls	r3, r3, #10
 8003fac:	4013      	ands	r3, r2
 8003fae:	d12b      	bne.n	8004008 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e097      	b.n	80040e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d107      	bne.n	8003fcc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fbc:	4b4d      	ldr	r3, [pc, #308]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f8>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	2380      	movs	r3, #128	@ 0x80
 8003fc2:	049b      	lsls	r3, r3, #18
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d11f      	bne.n	8004008 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e08b      	b.n	80040e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d107      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fd4:	4b47      	ldr	r3, [pc, #284]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f8>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	2380      	movs	r3, #128	@ 0x80
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d113      	bne.n	8004008 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e07f      	b.n	80040e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d106      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fec:	4b41      	ldr	r3, [pc, #260]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f8>)
 8003fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d108      	bne.n	8004008 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e074      	b.n	80040e4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f8>)
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffe:	2202      	movs	r2, #2
 8004000:	4013      	ands	r3, r2
 8004002:	d101      	bne.n	8004008 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e06d      	b.n	80040e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004008:	4b3a      	ldr	r3, [pc, #232]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f8>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2207      	movs	r2, #7
 800400e:	4393      	bics	r3, r2
 8004010:	0019      	movs	r1, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	4b37      	ldr	r3, [pc, #220]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004018:	430a      	orrs	r2, r1
 800401a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800401c:	f7fd fe6e 	bl	8001cfc <HAL_GetTick>
 8004020:	0003      	movs	r3, r0
 8004022:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004024:	e009      	b.n	800403a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004026:	f7fd fe69 	bl	8001cfc <HAL_GetTick>
 800402a:	0002      	movs	r2, r0
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	4a2f      	ldr	r2, [pc, #188]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d901      	bls.n	800403a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e054      	b.n	80040e4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403a:	4b2e      	ldr	r3, [pc, #184]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f8>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2238      	movs	r2, #56	@ 0x38
 8004040:	401a      	ands	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	429a      	cmp	r2, r3
 800404a:	d1ec      	bne.n	8004026 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800404c:	4b27      	ldr	r3, [pc, #156]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2207      	movs	r2, #7
 8004052:	4013      	ands	r3, r2
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d21e      	bcs.n	8004098 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405a:	4b24      	ldr	r3, [pc, #144]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2207      	movs	r2, #7
 8004060:	4393      	bics	r3, r2
 8004062:	0019      	movs	r1, r3
 8004064:	4b21      	ldr	r3, [pc, #132]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800406c:	f7fd fe46 	bl	8001cfc <HAL_GetTick>
 8004070:	0003      	movs	r3, r0
 8004072:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004074:	e009      	b.n	800408a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004076:	f7fd fe41 	bl	8001cfc <HAL_GetTick>
 800407a:	0002      	movs	r2, r0
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	4a1b      	ldr	r2, [pc, #108]	@ (80040f0 <HAL_RCC_ClockConfig+0x1f4>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e02c      	b.n	80040e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800408a:	4b18      	ldr	r3, [pc, #96]	@ (80040ec <HAL_RCC_ClockConfig+0x1f0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2207      	movs	r2, #7
 8004090:	4013      	ands	r3, r2
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d1ee      	bne.n	8004076 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2204      	movs	r2, #4
 800409e:	4013      	ands	r3, r2
 80040a0:	d009      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040a2:	4b14      	ldr	r3, [pc, #80]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f8>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	4a15      	ldr	r2, [pc, #84]	@ (80040fc <HAL_RCC_ClockConfig+0x200>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	0019      	movs	r1, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	4b10      	ldr	r3, [pc, #64]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f8>)
 80040b2:	430a      	orrs	r2, r1
 80040b4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80040b6:	f000 f829 	bl	800410c <HAL_RCC_GetSysClockFreq>
 80040ba:	0001      	movs	r1, r0
 80040bc:	4b0d      	ldr	r3, [pc, #52]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f8>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	0a1b      	lsrs	r3, r3, #8
 80040c2:	220f      	movs	r2, #15
 80040c4:	401a      	ands	r2, r3
 80040c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004100 <HAL_RCC_ClockConfig+0x204>)
 80040c8:	0092      	lsls	r2, r2, #2
 80040ca:	58d3      	ldr	r3, [r2, r3]
 80040cc:	221f      	movs	r2, #31
 80040ce:	4013      	ands	r3, r2
 80040d0:	000a      	movs	r2, r1
 80040d2:	40da      	lsrs	r2, r3
 80040d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004104 <HAL_RCC_ClockConfig+0x208>)
 80040d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80040d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004108 <HAL_RCC_ClockConfig+0x20c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	0018      	movs	r0, r3
 80040de:	f7fd fdb1 	bl	8001c44 <HAL_InitTick>
 80040e2:	0003      	movs	r3, r0
}
 80040e4:	0018      	movs	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b004      	add	sp, #16
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40022000 	.word	0x40022000
 80040f0:	00001388 	.word	0x00001388
 80040f4:	40021000 	.word	0x40021000
 80040f8:	fffff0ff 	.word	0xfffff0ff
 80040fc:	ffff8fff 	.word	0xffff8fff
 8004100:	08005d88 	.word	0x08005d88
 8004104:	20000044 	.word	0x20000044
 8004108:	20000048 	.word	0x20000048

0800410c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004112:	4b3c      	ldr	r3, [pc, #240]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	2238      	movs	r2, #56	@ 0x38
 8004118:	4013      	ands	r3, r2
 800411a:	d10f      	bne.n	800413c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800411c:	4b39      	ldr	r3, [pc, #228]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xf8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	0adb      	lsrs	r3, r3, #11
 8004122:	2207      	movs	r2, #7
 8004124:	4013      	ands	r3, r2
 8004126:	2201      	movs	r2, #1
 8004128:	409a      	lsls	r2, r3
 800412a:	0013      	movs	r3, r2
 800412c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800412e:	6839      	ldr	r1, [r7, #0]
 8004130:	4835      	ldr	r0, [pc, #212]	@ (8004208 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004132:	f7fb ffe7 	bl	8000104 <__udivsi3>
 8004136:	0003      	movs	r3, r0
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	e05d      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800413c:	4b31      	ldr	r3, [pc, #196]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xf8>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2238      	movs	r2, #56	@ 0x38
 8004142:	4013      	ands	r3, r2
 8004144:	2b08      	cmp	r3, #8
 8004146:	d102      	bne.n	800414e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004148:	4b30      	ldr	r3, [pc, #192]	@ (800420c <HAL_RCC_GetSysClockFreq+0x100>)
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	e054      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800414e:	4b2d      	ldr	r3, [pc, #180]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2238      	movs	r2, #56	@ 0x38
 8004154:	4013      	ands	r3, r2
 8004156:	2b10      	cmp	r3, #16
 8004158:	d138      	bne.n	80041cc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800415a:	4b2a      	ldr	r3, [pc, #168]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xf8>)
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2203      	movs	r2, #3
 8004160:	4013      	ands	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004164:	4b27      	ldr	r3, [pc, #156]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	091b      	lsrs	r3, r3, #4
 800416a:	2207      	movs	r2, #7
 800416c:	4013      	ands	r3, r2
 800416e:	3301      	adds	r3, #1
 8004170:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2b03      	cmp	r3, #3
 8004176:	d10d      	bne.n	8004194 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	4824      	ldr	r0, [pc, #144]	@ (800420c <HAL_RCC_GetSysClockFreq+0x100>)
 800417c:	f7fb ffc2 	bl	8000104 <__udivsi3>
 8004180:	0003      	movs	r3, r0
 8004182:	0019      	movs	r1, r3
 8004184:	4b1f      	ldr	r3, [pc, #124]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	0a1b      	lsrs	r3, r3, #8
 800418a:	227f      	movs	r2, #127	@ 0x7f
 800418c:	4013      	ands	r3, r2
 800418e:	434b      	muls	r3, r1
 8004190:	617b      	str	r3, [r7, #20]
        break;
 8004192:	e00d      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004194:	68b9      	ldr	r1, [r7, #8]
 8004196:	481c      	ldr	r0, [pc, #112]	@ (8004208 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004198:	f7fb ffb4 	bl	8000104 <__udivsi3>
 800419c:	0003      	movs	r3, r0
 800419e:	0019      	movs	r1, r3
 80041a0:	4b18      	ldr	r3, [pc, #96]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	0a1b      	lsrs	r3, r3, #8
 80041a6:	227f      	movs	r2, #127	@ 0x7f
 80041a8:	4013      	ands	r3, r2
 80041aa:	434b      	muls	r3, r1
 80041ac:	617b      	str	r3, [r7, #20]
        break;
 80041ae:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80041b0:	4b14      	ldr	r3, [pc, #80]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	0f5b      	lsrs	r3, r3, #29
 80041b6:	2207      	movs	r2, #7
 80041b8:	4013      	ands	r3, r2
 80041ba:	3301      	adds	r3, #1
 80041bc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	6978      	ldr	r0, [r7, #20]
 80041c2:	f7fb ff9f 	bl	8000104 <__udivsi3>
 80041c6:	0003      	movs	r3, r0
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	e015      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80041cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	2238      	movs	r2, #56	@ 0x38
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d103      	bne.n	80041e0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80041d8:	2380      	movs	r3, #128	@ 0x80
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	e00b      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80041e0:	4b08      	ldr	r3, [pc, #32]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2238      	movs	r2, #56	@ 0x38
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b18      	cmp	r3, #24
 80041ea:	d103      	bne.n	80041f4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80041ec:	23fa      	movs	r3, #250	@ 0xfa
 80041ee:	01db      	lsls	r3, r3, #7
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	e001      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80041f8:	693b      	ldr	r3, [r7, #16]
}
 80041fa:	0018      	movs	r0, r3
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b006      	add	sp, #24
 8004200:	bd80      	pop	{r7, pc}
 8004202:	46c0      	nop			@ (mov r8, r8)
 8004204:	40021000 	.word	0x40021000
 8004208:	00f42400 	.word	0x00f42400
 800420c:	007a1200 	.word	0x007a1200

08004210 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004218:	2313      	movs	r3, #19
 800421a:	18fb      	adds	r3, r7, r3
 800421c:	2200      	movs	r2, #0
 800421e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004220:	2312      	movs	r3, #18
 8004222:	18fb      	adds	r3, r7, r3
 8004224:	2200      	movs	r2, #0
 8004226:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	2380      	movs	r3, #128	@ 0x80
 800422e:	029b      	lsls	r3, r3, #10
 8004230:	4013      	ands	r3, r2
 8004232:	d100      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004234:	e0a3      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004236:	2011      	movs	r0, #17
 8004238:	183b      	adds	r3, r7, r0
 800423a:	2200      	movs	r2, #0
 800423c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800423e:	4ba5      	ldr	r3, [pc, #660]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004240:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004242:	2380      	movs	r3, #128	@ 0x80
 8004244:	055b      	lsls	r3, r3, #21
 8004246:	4013      	ands	r3, r2
 8004248:	d110      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800424a:	4ba2      	ldr	r3, [pc, #648]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800424c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800424e:	4ba1      	ldr	r3, [pc, #644]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004250:	2180      	movs	r1, #128	@ 0x80
 8004252:	0549      	lsls	r1, r1, #21
 8004254:	430a      	orrs	r2, r1
 8004256:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004258:	4b9e      	ldr	r3, [pc, #632]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800425a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800425c:	2380      	movs	r3, #128	@ 0x80
 800425e:	055b      	lsls	r3, r3, #21
 8004260:	4013      	ands	r3, r2
 8004262:	60bb      	str	r3, [r7, #8]
 8004264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004266:	183b      	adds	r3, r7, r0
 8004268:	2201      	movs	r2, #1
 800426a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800426c:	4b9a      	ldr	r3, [pc, #616]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	4b99      	ldr	r3, [pc, #612]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004272:	2180      	movs	r1, #128	@ 0x80
 8004274:	0049      	lsls	r1, r1, #1
 8004276:	430a      	orrs	r2, r1
 8004278:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800427a:	f7fd fd3f 	bl	8001cfc <HAL_GetTick>
 800427e:	0003      	movs	r3, r0
 8004280:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004282:	e00b      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004284:	f7fd fd3a 	bl	8001cfc <HAL_GetTick>
 8004288:	0002      	movs	r2, r0
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d904      	bls.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004292:	2313      	movs	r3, #19
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	2203      	movs	r2, #3
 8004298:	701a      	strb	r2, [r3, #0]
        break;
 800429a:	e005      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800429c:	4b8e      	ldr	r3, [pc, #568]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	2380      	movs	r3, #128	@ 0x80
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	4013      	ands	r3, r2
 80042a6:	d0ed      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80042a8:	2313      	movs	r3, #19
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d154      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042b2:	4b88      	ldr	r3, [pc, #544]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80042b6:	23c0      	movs	r3, #192	@ 0xc0
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4013      	ands	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d019      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d014      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042ce:	4b81      	ldr	r3, [pc, #516]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d2:	4a82      	ldr	r2, [pc, #520]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042d8:	4b7e      	ldr	r3, [pc, #504]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80042dc:	4b7d      	ldr	r3, [pc, #500]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042de:	2180      	movs	r1, #128	@ 0x80
 80042e0:	0249      	lsls	r1, r1, #9
 80042e2:	430a      	orrs	r2, r1
 80042e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042e6:	4b7b      	ldr	r3, [pc, #492]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80042ea:	4b7a      	ldr	r3, [pc, #488]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042ec:	497c      	ldr	r1, [pc, #496]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80042ee:	400a      	ands	r2, r1
 80042f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042f2:	4b78      	ldr	r3, [pc, #480]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	2201      	movs	r2, #1
 80042fc:	4013      	ands	r3, r2
 80042fe:	d016      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fd fcfc 	bl	8001cfc <HAL_GetTick>
 8004304:	0003      	movs	r3, r0
 8004306:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004308:	e00c      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	f7fd fcf7 	bl	8001cfc <HAL_GetTick>
 800430e:	0002      	movs	r2, r0
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	4a73      	ldr	r2, [pc, #460]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d904      	bls.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800431a:	2313      	movs	r3, #19
 800431c:	18fb      	adds	r3, r7, r3
 800431e:	2203      	movs	r2, #3
 8004320:	701a      	strb	r2, [r3, #0]
            break;
 8004322:	e004      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004324:	4b6b      	ldr	r3, [pc, #428]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004328:	2202      	movs	r2, #2
 800432a:	4013      	ands	r3, r2
 800432c:	d0ed      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800432e:	2313      	movs	r3, #19
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004338:	4b66      	ldr	r3, [pc, #408]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800433a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800433c:	4a67      	ldr	r2, [pc, #412]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800433e:	4013      	ands	r3, r2
 8004340:	0019      	movs	r1, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004346:	4b63      	ldr	r3, [pc, #396]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004348:	430a      	orrs	r2, r1
 800434a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800434c:	e00c      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800434e:	2312      	movs	r3, #18
 8004350:	18fb      	adds	r3, r7, r3
 8004352:	2213      	movs	r2, #19
 8004354:	18ba      	adds	r2, r7, r2
 8004356:	7812      	ldrb	r2, [r2, #0]
 8004358:	701a      	strb	r2, [r3, #0]
 800435a:	e005      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435c:	2312      	movs	r3, #18
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	2213      	movs	r2, #19
 8004362:	18ba      	adds	r2, r7, r2
 8004364:	7812      	ldrb	r2, [r2, #0]
 8004366:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004368:	2311      	movs	r3, #17
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d105      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004372:	4b58      	ldr	r3, [pc, #352]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004374:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004376:	4b57      	ldr	r3, [pc, #348]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004378:	495b      	ldr	r1, [pc, #364]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800437a:	400a      	ands	r2, r1
 800437c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2201      	movs	r2, #1
 8004384:	4013      	ands	r3, r2
 8004386:	d009      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004388:	4b52      	ldr	r3, [pc, #328]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800438a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438c:	2203      	movs	r2, #3
 800438e:	4393      	bics	r3, r2
 8004390:	0019      	movs	r1, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	4b4f      	ldr	r3, [pc, #316]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004398:	430a      	orrs	r2, r1
 800439a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2210      	movs	r2, #16
 80043a2:	4013      	ands	r3, r2
 80043a4:	d009      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043a6:	4b4b      	ldr	r3, [pc, #300]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043aa:	4a50      	ldr	r2, [pc, #320]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	0019      	movs	r1, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	4b47      	ldr	r3, [pc, #284]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043b6:	430a      	orrs	r2, r1
 80043b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	2380      	movs	r3, #128	@ 0x80
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4013      	ands	r3, r2
 80043c4:	d009      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043c6:	4b43      	ldr	r3, [pc, #268]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ca:	4a49      	ldr	r2, [pc, #292]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	0019      	movs	r1, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	695a      	ldr	r2, [r3, #20]
 80043d4:	4b3f      	ldr	r3, [pc, #252]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043d6:	430a      	orrs	r2, r1
 80043d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	2380      	movs	r3, #128	@ 0x80
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4013      	ands	r3, r2
 80043e4:	d009      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043e6:	4b3b      	ldr	r3, [pc, #236]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ea:	4a42      	ldr	r2, [pc, #264]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80043ec:	4013      	ands	r3, r2
 80043ee:	0019      	movs	r1, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699a      	ldr	r2, [r3, #24]
 80043f4:	4b37      	ldr	r3, [pc, #220]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043f6:	430a      	orrs	r2, r1
 80043f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2220      	movs	r2, #32
 8004400:	4013      	ands	r3, r2
 8004402:	d009      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004404:	4b33      	ldr	r3, [pc, #204]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004408:	4a3b      	ldr	r2, [pc, #236]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800440a:	4013      	ands	r3, r2
 800440c:	0019      	movs	r1, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	4b30      	ldr	r3, [pc, #192]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004414:	430a      	orrs	r2, r1
 8004416:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	2380      	movs	r3, #128	@ 0x80
 800441e:	01db      	lsls	r3, r3, #7
 8004420:	4013      	ands	r3, r2
 8004422:	d015      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004424:	4b2b      	ldr	r3, [pc, #172]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	0899      	lsrs	r1, r3, #2
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	4b28      	ldr	r3, [pc, #160]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004432:	430a      	orrs	r2, r1
 8004434:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69da      	ldr	r2, [r3, #28]
 800443a:	2380      	movs	r3, #128	@ 0x80
 800443c:	05db      	lsls	r3, r3, #23
 800443e:	429a      	cmp	r2, r3
 8004440:	d106      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004442:	4b24      	ldr	r3, [pc, #144]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	4b23      	ldr	r3, [pc, #140]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004448:	2180      	movs	r1, #128	@ 0x80
 800444a:	0249      	lsls	r1, r1, #9
 800444c:	430a      	orrs	r2, r1
 800444e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	2380      	movs	r3, #128	@ 0x80
 8004456:	039b      	lsls	r3, r3, #14
 8004458:	4013      	ands	r3, r2
 800445a:	d016      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800445c:	4b1d      	ldr	r3, [pc, #116]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800445e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004460:	4a26      	ldr	r2, [pc, #152]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004462:	4013      	ands	r3, r2
 8004464:	0019      	movs	r1, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1a      	ldr	r2, [r3, #32]
 800446a:	4b1a      	ldr	r3, [pc, #104]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800446c:	430a      	orrs	r2, r1
 800446e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1a      	ldr	r2, [r3, #32]
 8004474:	2380      	movs	r3, #128	@ 0x80
 8004476:	03db      	lsls	r3, r3, #15
 8004478:	429a      	cmp	r2, r3
 800447a:	d106      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800447c:	4b15      	ldr	r3, [pc, #84]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	4b14      	ldr	r3, [pc, #80]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004482:	2180      	movs	r1, #128	@ 0x80
 8004484:	0449      	lsls	r1, r1, #17
 8004486:	430a      	orrs	r2, r1
 8004488:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	2380      	movs	r3, #128	@ 0x80
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	4013      	ands	r3, r2
 8004494:	d016      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004496:	4b0f      	ldr	r3, [pc, #60]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800449a:	4a19      	ldr	r2, [pc, #100]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800449c:	4013      	ands	r3, r2
 800449e:	0019      	movs	r1, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	4b0b      	ldr	r3, [pc, #44]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044a6:	430a      	orrs	r2, r1
 80044a8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691a      	ldr	r2, [r3, #16]
 80044ae:	2380      	movs	r3, #128	@ 0x80
 80044b0:	01db      	lsls	r3, r3, #7
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d106      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80044b6:	4b07      	ldr	r3, [pc, #28]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	4b06      	ldr	r3, [pc, #24]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044bc:	2180      	movs	r1, #128	@ 0x80
 80044be:	0249      	lsls	r1, r1, #9
 80044c0:	430a      	orrs	r2, r1
 80044c2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80044c4:	2312      	movs	r3, #18
 80044c6:	18fb      	adds	r3, r7, r3
 80044c8:	781b      	ldrb	r3, [r3, #0]
}
 80044ca:	0018      	movs	r0, r3
 80044cc:	46bd      	mov	sp, r7
 80044ce:	b006      	add	sp, #24
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	40021000 	.word	0x40021000
 80044d8:	40007000 	.word	0x40007000
 80044dc:	fffffcff 	.word	0xfffffcff
 80044e0:	fffeffff 	.word	0xfffeffff
 80044e4:	00001388 	.word	0x00001388
 80044e8:	efffffff 	.word	0xefffffff
 80044ec:	fffff3ff 	.word	0xfffff3ff
 80044f0:	fff3ffff 	.word	0xfff3ffff
 80044f4:	ffcfffff 	.word	0xffcfffff
 80044f8:	ffffcfff 	.word	0xffffcfff
 80044fc:	ffbfffff 	.word	0xffbfffff
 8004500:	ffff3fff 	.word	0xffff3fff

08004504 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004504:	b5b0      	push	{r4, r5, r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800450c:	230f      	movs	r3, #15
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	2201      	movs	r2, #1
 8004512:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d100      	bne.n	800451c <HAL_RTC_Init+0x18>
 800451a:	e08c      	b.n	8004636 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2229      	movs	r2, #41	@ 0x29
 8004520:	5c9b      	ldrb	r3, [r3, r2]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10b      	bne.n	8004540 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2228      	movs	r2, #40	@ 0x28
 800452c:	2100      	movs	r1, #0
 800452e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2288      	movs	r2, #136	@ 0x88
 8004534:	0212      	lsls	r2, r2, #8
 8004536:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	0018      	movs	r0, r3
 800453c:	f7fd fa2e 	bl	800199c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2229      	movs	r2, #41	@ 0x29
 8004544:	2102      	movs	r1, #2
 8004546:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	2210      	movs	r2, #16
 8004550:	4013      	ands	r3, r2
 8004552:	2b10      	cmp	r3, #16
 8004554:	d062      	beq.n	800461c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	22ca      	movs	r2, #202	@ 0xca
 800455c:	625a      	str	r2, [r3, #36]	@ 0x24
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2253      	movs	r2, #83	@ 0x53
 8004564:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004566:	250f      	movs	r5, #15
 8004568:	197c      	adds	r4, r7, r5
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	0018      	movs	r0, r3
 800456e:	f000 fbf3 	bl	8004d58 <RTC_EnterInitMode>
 8004572:	0003      	movs	r3, r0
 8004574:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004576:	0028      	movs	r0, r5
 8004578:	183b      	adds	r3, r7, r0
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d12c      	bne.n	80045da <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699a      	ldr	r2, [r3, #24]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	492e      	ldr	r1, [pc, #184]	@ (8004644 <HAL_RTC_Init+0x140>)
 800458c:	400a      	ands	r2, r1
 800458e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6999      	ldr	r1, [r3, #24]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6912      	ldr	r2, [r2, #16]
 80045b6:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6919      	ldr	r1, [r3, #16]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	041a      	lsls	r2, r3, #16
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80045cc:	183c      	adds	r4, r7, r0
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	0018      	movs	r0, r3
 80045d2:	f000 fc03 	bl	8004ddc <RTC_ExitInitMode>
 80045d6:	0003      	movs	r3, r0
 80045d8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80045da:	230f      	movs	r3, #15
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d116      	bne.n	8004612 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	00d2      	lsls	r2, r2, #3
 80045f0:	08d2      	lsrs	r2, r2, #3
 80045f2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6999      	ldr	r1, [r3, #24]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	431a      	orrs	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	22ff      	movs	r2, #255	@ 0xff
 8004618:	625a      	str	r2, [r3, #36]	@ 0x24
 800461a:	e003      	b.n	8004624 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800461c:	230f      	movs	r3, #15
 800461e:	18fb      	adds	r3, r7, r3
 8004620:	2200      	movs	r2, #0
 8004622:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004624:	230f      	movs	r3, #15
 8004626:	18fb      	adds	r3, r7, r3
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d103      	bne.n	8004636 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2229      	movs	r2, #41	@ 0x29
 8004632:	2101      	movs	r1, #1
 8004634:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004636:	230f      	movs	r3, #15
 8004638:	18fb      	adds	r3, r7, r3
 800463a:	781b      	ldrb	r3, [r3, #0]
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	b004      	add	sp, #16
 8004642:	bdb0      	pop	{r4, r5, r7, pc}
 8004644:	fb8fffbf 	.word	0xfb8fffbf

08004648 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004648:	b5b0      	push	{r4, r5, r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2228      	movs	r2, #40	@ 0x28
 8004658:	5c9b      	ldrb	r3, [r3, r2]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_RTC_SetTime+0x1a>
 800465e:	2302      	movs	r3, #2
 8004660:	e092      	b.n	8004788 <HAL_RTC_SetTime+0x140>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2228      	movs	r2, #40	@ 0x28
 8004666:	2101      	movs	r1, #1
 8004668:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2229      	movs	r2, #41	@ 0x29
 800466e:	2102      	movs	r1, #2
 8004670:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	22ca      	movs	r2, #202	@ 0xca
 8004678:	625a      	str	r2, [r3, #36]	@ 0x24
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2253      	movs	r2, #83	@ 0x53
 8004680:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004682:	2513      	movs	r5, #19
 8004684:	197c      	adds	r4, r7, r5
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	0018      	movs	r0, r3
 800468a:	f000 fb65 	bl	8004d58 <RTC_EnterInitMode>
 800468e:	0003      	movs	r3, r0
 8004690:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004692:	197b      	adds	r3, r7, r5
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d162      	bne.n	8004760 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d125      	bne.n	80046ec <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	2240      	movs	r2, #64	@ 0x40
 80046a8:	4013      	ands	r3, r2
 80046aa:	d102      	bne.n	80046b2 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2200      	movs	r2, #0
 80046b0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	0018      	movs	r0, r3
 80046b8:	f000 fbd4 	bl	8004e64 <RTC_ByteToBcd2>
 80046bc:	0003      	movs	r3, r0
 80046be:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	785b      	ldrb	r3, [r3, #1]
 80046c4:	0018      	movs	r0, r3
 80046c6:	f000 fbcd 	bl	8004e64 <RTC_ByteToBcd2>
 80046ca:	0003      	movs	r3, r0
 80046cc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046ce:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	789b      	ldrb	r3, [r3, #2]
 80046d4:	0018      	movs	r0, r3
 80046d6:	f000 fbc5 	bl	8004e64 <RTC_ByteToBcd2>
 80046da:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046dc:	0022      	movs	r2, r4
 80046de:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	78db      	ldrb	r3, [r3, #3]
 80046e4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	e017      	b.n	800471c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	2240      	movs	r2, #64	@ 0x40
 80046f4:	4013      	ands	r3, r2
 80046f6:	d102      	bne.n	80046fe <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2200      	movs	r2, #0
 80046fc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	785b      	ldrb	r3, [r3, #1]
 8004708:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800470a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004710:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	78db      	ldrb	r3, [r3, #3]
 8004716:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	491b      	ldr	r1, [pc, #108]	@ (8004790 <HAL_RTC_SetTime+0x148>)
 8004724:	400a      	ands	r2, r1
 8004726:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4918      	ldr	r1, [pc, #96]	@ (8004794 <HAL_RTC_SetTime+0x14c>)
 8004734:	400a      	ands	r2, r1
 8004736:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6999      	ldr	r1, [r3, #24]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	431a      	orrs	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004750:	2313      	movs	r3, #19
 8004752:	18fc      	adds	r4, r7, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	0018      	movs	r0, r3
 8004758:	f000 fb40 	bl	8004ddc <RTC_ExitInitMode>
 800475c:	0003      	movs	r3, r0
 800475e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	22ff      	movs	r2, #255	@ 0xff
 8004766:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8004768:	2313      	movs	r3, #19
 800476a:	18fb      	adds	r3, r7, r3
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d103      	bne.n	800477a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2229      	movs	r2, #41	@ 0x29
 8004776:	2101      	movs	r1, #1
 8004778:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2228      	movs	r2, #40	@ 0x28
 800477e:	2100      	movs	r1, #0
 8004780:	5499      	strb	r1, [r3, r2]

  return status;
 8004782:	2313      	movs	r3, #19
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	781b      	ldrb	r3, [r3, #0]
}
 8004788:	0018      	movs	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	b006      	add	sp, #24
 800478e:	bdb0      	pop	{r4, r5, r7, pc}
 8004790:	007f7f7f 	.word	0x007f7f7f
 8004794:	fffbffff 	.word	0xfffbffff

08004798 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	045b      	lsls	r3, r3, #17
 80047b6:	0c5a      	lsrs	r2, r3, #17
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a22      	ldr	r2, [pc, #136]	@ (800484c <HAL_RTC_GetTime+0xb4>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	0c1b      	lsrs	r3, r3, #16
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	223f      	movs	r2, #63	@ 0x3f
 80047d0:	4013      	ands	r3, r2
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	0a1b      	lsrs	r3, r3, #8
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	227f      	movs	r2, #127	@ 0x7f
 80047e0:	4013      	ands	r3, r2
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	227f      	movs	r2, #127	@ 0x7f
 80047ee:	4013      	ands	r3, r2
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	0d9b      	lsrs	r3, r3, #22
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2201      	movs	r2, #1
 80047fe:	4013      	ands	r3, r2
 8004800:	b2da      	uxtb	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d11a      	bne.n	8004842 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	0018      	movs	r0, r3
 8004812:	f000 fb4f 	bl	8004eb4 <RTC_Bcd2ToByte>
 8004816:	0003      	movs	r3, r0
 8004818:	001a      	movs	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	785b      	ldrb	r3, [r3, #1]
 8004822:	0018      	movs	r0, r3
 8004824:	f000 fb46 	bl	8004eb4 <RTC_Bcd2ToByte>
 8004828:	0003      	movs	r3, r0
 800482a:	001a      	movs	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	789b      	ldrb	r3, [r3, #2]
 8004834:	0018      	movs	r0, r3
 8004836:	f000 fb3d 	bl	8004eb4 <RTC_Bcd2ToByte>
 800483a:	0003      	movs	r3, r0
 800483c:	001a      	movs	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	0018      	movs	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	b006      	add	sp, #24
 800484a:	bd80      	pop	{r7, pc}
 800484c:	007f7f7f 	.word	0x007f7f7f

08004850 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004850:	b5b0      	push	{r4, r5, r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2228      	movs	r2, #40	@ 0x28
 8004860:	5c9b      	ldrb	r3, [r3, r2]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <HAL_RTC_SetDate+0x1a>
 8004866:	2302      	movs	r3, #2
 8004868:	e07e      	b.n	8004968 <HAL_RTC_SetDate+0x118>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2228      	movs	r2, #40	@ 0x28
 800486e:	2101      	movs	r1, #1
 8004870:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2229      	movs	r2, #41	@ 0x29
 8004876:	2102      	movs	r1, #2
 8004878:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10e      	bne.n	800489e <HAL_RTC_SetDate+0x4e>
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	785b      	ldrb	r3, [r3, #1]
 8004884:	001a      	movs	r2, r3
 8004886:	2310      	movs	r3, #16
 8004888:	4013      	ands	r3, r2
 800488a:	d008      	beq.n	800489e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	785b      	ldrb	r3, [r3, #1]
 8004890:	2210      	movs	r2, #16
 8004892:	4393      	bics	r3, r2
 8004894:	b2db      	uxtb	r3, r3
 8004896:	330a      	adds	r3, #10
 8004898:	b2da      	uxtb	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d11c      	bne.n	80048de <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	78db      	ldrb	r3, [r3, #3]
 80048a8:	0018      	movs	r0, r3
 80048aa:	f000 fadb 	bl	8004e64 <RTC_ByteToBcd2>
 80048ae:	0003      	movs	r3, r0
 80048b0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	785b      	ldrb	r3, [r3, #1]
 80048b6:	0018      	movs	r0, r3
 80048b8:	f000 fad4 	bl	8004e64 <RTC_ByteToBcd2>
 80048bc:	0003      	movs	r3, r0
 80048be:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80048c0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	789b      	ldrb	r3, [r3, #2]
 80048c6:	0018      	movs	r0, r3
 80048c8:	f000 facc 	bl	8004e64 <RTC_ByteToBcd2>
 80048cc:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80048ce:	0022      	movs	r2, r4
 80048d0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80048d8:	4313      	orrs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	e00e      	b.n	80048fc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	78db      	ldrb	r3, [r3, #3]
 80048e2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	785b      	ldrb	r3, [r3, #1]
 80048e8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80048ea:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80048f0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80048f8:	4313      	orrs	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	22ca      	movs	r2, #202	@ 0xca
 8004902:	625a      	str	r2, [r3, #36]	@ 0x24
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2253      	movs	r2, #83	@ 0x53
 800490a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800490c:	2513      	movs	r5, #19
 800490e:	197c      	adds	r4, r7, r5
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	0018      	movs	r0, r3
 8004914:	f000 fa20 	bl	8004d58 <RTC_EnterInitMode>
 8004918:	0003      	movs	r3, r0
 800491a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800491c:	0028      	movs	r0, r5
 800491e:	183b      	adds	r3, r7, r0
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10c      	bne.n	8004940 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	4910      	ldr	r1, [pc, #64]	@ (8004970 <HAL_RTC_SetDate+0x120>)
 800492e:	400a      	ands	r2, r1
 8004930:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004932:	183c      	adds	r4, r7, r0
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	0018      	movs	r0, r3
 8004938:	f000 fa50 	bl	8004ddc <RTC_ExitInitMode>
 800493c:	0003      	movs	r3, r0
 800493e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	22ff      	movs	r2, #255	@ 0xff
 8004946:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004948:	2313      	movs	r3, #19
 800494a:	18fb      	adds	r3, r7, r3
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d103      	bne.n	800495a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2229      	movs	r2, #41	@ 0x29
 8004956:	2101      	movs	r1, #1
 8004958:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2228      	movs	r2, #40	@ 0x28
 800495e:	2100      	movs	r1, #0
 8004960:	5499      	strb	r1, [r3, r2]

  return status;
 8004962:	2313      	movs	r3, #19
 8004964:	18fb      	adds	r3, r7, r3
 8004966:	781b      	ldrb	r3, [r3, #0]
}
 8004968:	0018      	movs	r0, r3
 800496a:	46bd      	mov	sp, r7
 800496c:	b006      	add	sp, #24
 800496e:	bdb0      	pop	{r4, r5, r7, pc}
 8004970:	00ffff3f 	.word	0x00ffff3f

08004974 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	4a21      	ldr	r2, [pc, #132]	@ (8004a0c <HAL_RTC_GetDate+0x98>)
 8004988:	4013      	ands	r3, r2
 800498a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	0c1b      	lsrs	r3, r3, #16
 8004990:	b2da      	uxtb	r2, r3
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	0a1b      	lsrs	r3, r3, #8
 800499a:	b2db      	uxtb	r3, r3
 800499c:	221f      	movs	r2, #31
 800499e:	4013      	ands	r3, r2
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	223f      	movs	r2, #63	@ 0x3f
 80049ac:	4013      	ands	r3, r2
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	0b5b      	lsrs	r3, r3, #13
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2207      	movs	r2, #7
 80049bc:	4013      	ands	r3, r2
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d11a      	bne.n	8004a00 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	78db      	ldrb	r3, [r3, #3]
 80049ce:	0018      	movs	r0, r3
 80049d0:	f000 fa70 	bl	8004eb4 <RTC_Bcd2ToByte>
 80049d4:	0003      	movs	r3, r0
 80049d6:	001a      	movs	r2, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	785b      	ldrb	r3, [r3, #1]
 80049e0:	0018      	movs	r0, r3
 80049e2:	f000 fa67 	bl	8004eb4 <RTC_Bcd2ToByte>
 80049e6:	0003      	movs	r3, r0
 80049e8:	001a      	movs	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	789b      	ldrb	r3, [r3, #2]
 80049f2:	0018      	movs	r0, r3
 80049f4:	f000 fa5e 	bl	8004eb4 <RTC_Bcd2ToByte>
 80049f8:	0003      	movs	r3, r0
 80049fa:	001a      	movs	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	0018      	movs	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	b006      	add	sp, #24
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	46c0      	nop			@ (mov r8, r8)
 8004a0c:	00ffff3f 	.word	0x00ffff3f

08004a10 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004a10:	b590      	push	{r4, r7, lr}
 8004a12:	b089      	sub	sp, #36	@ 0x24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2228      	movs	r2, #40	@ 0x28
 8004a20:	5c9b      	ldrb	r3, [r3, r2]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <HAL_RTC_SetAlarm_IT+0x1a>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e127      	b.n	8004c7a <HAL_RTC_SetAlarm_IT+0x26a>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2228      	movs	r2, #40	@ 0x28
 8004a2e:	2101      	movs	r1, #1
 8004a30:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2229      	movs	r2, #41	@ 0x29
 8004a36:	2102      	movs	r1, #2
 8004a38:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d136      	bne.n	8004aae <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	2240      	movs	r2, #64	@ 0x40
 8004a48:	4013      	ands	r3, r2
 8004a4a:	d102      	bne.n	8004a52 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	0018      	movs	r0, r3
 8004a58:	f000 fa04 	bl	8004e64 <RTC_ByteToBcd2>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	785b      	ldrb	r3, [r3, #1]
 8004a64:	0018      	movs	r0, r3
 8004a66:	f000 f9fd 	bl	8004e64 <RTC_ByteToBcd2>
 8004a6a:	0003      	movs	r3, r0
 8004a6c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a6e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	789b      	ldrb	r3, [r3, #2]
 8004a74:	0018      	movs	r0, r3
 8004a76:	f000 f9f5 	bl	8004e64 <RTC_ByteToBcd2>
 8004a7a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a7c:	0022      	movs	r2, r4
 8004a7e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	78db      	ldrb	r3, [r3, #3]
 8004a84:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a86:	431a      	orrs	r2, r3
 8004a88:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	5c9b      	ldrb	r3, [r3, r2]
 8004a90:	0018      	movs	r0, r3
 8004a92:	f000 f9e7 	bl	8004e64 <RTC_ByteToBcd2>
 8004a96:	0003      	movs	r3, r0
 8004a98:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a9a:	0022      	movs	r2, r4
 8004a9c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004aa2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	61fb      	str	r3, [r7, #28]
 8004aac:	e022      	b.n	8004af4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	2240      	movs	r2, #64	@ 0x40
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d102      	bne.n	8004ac0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2200      	movs	r2, #0
 8004abe:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	785b      	ldrb	r3, [r3, #1]
 8004aca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004acc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004ad2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	78db      	ldrb	r3, [r3, #3]
 8004ad8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004ada:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2120      	movs	r1, #32
 8004ae0:	5c5b      	ldrb	r3, [r3, r1]
 8004ae2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ae4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004aea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	22ca      	movs	r2, #202	@ 0xca
 8004b06:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2253      	movs	r2, #83	@ 0x53
 8004b0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b14:	2380      	movs	r3, #128	@ 0x80
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d14c      	bne.n	8004bb6 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4957      	ldr	r1, [pc, #348]	@ (8004c84 <HAL_RTC_SetAlarm_IT+0x274>)
 8004b28:	400a      	ands	r2, r1
 8004b2a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2101      	movs	r1, #1
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004b3c:	f7fd f8de 	bl	8001cfc <HAL_GetTick>
 8004b40:	0003      	movs	r3, r0
 8004b42:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004b44:	e016      	b.n	8004b74 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004b46:	f7fd f8d9 	bl	8001cfc <HAL_GetTick>
 8004b4a:	0002      	movs	r2, r0
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	1ad2      	subs	r2, r2, r3
 8004b50:	23fa      	movs	r3, #250	@ 0xfa
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d90d      	bls.n	8004b74 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	22ff      	movs	r2, #255	@ 0xff
 8004b5e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2229      	movs	r2, #41	@ 0x29
 8004b64:	2103      	movs	r1, #3
 8004b66:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2228      	movs	r2, #40	@ 0x28
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e082      	b.n	8004c7a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d0e2      	beq.n	8004b46 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2180      	movs	r1, #128	@ 0x80
 8004b9c:	0049      	lsls	r1, r1, #1
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699a      	ldr	r2, [r3, #24]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2180      	movs	r1, #128	@ 0x80
 8004bae:	0149      	lsls	r1, r1, #5
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	619a      	str	r2, [r3, #24]
 8004bb4:	e04b      	b.n	8004c4e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699a      	ldr	r2, [r3, #24]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4931      	ldr	r1, [pc, #196]	@ (8004c88 <HAL_RTC_SetAlarm_IT+0x278>)
 8004bc2:	400a      	ands	r2, r1
 8004bc4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2102      	movs	r1, #2
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004bd6:	f7fd f891 	bl	8001cfc <HAL_GetTick>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004bde:	e016      	b.n	8004c0e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004be0:	f7fd f88c 	bl	8001cfc <HAL_GetTick>
 8004be4:	0002      	movs	r2, r0
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	1ad2      	subs	r2, r2, r3
 8004bea:	23fa      	movs	r3, #250	@ 0xfa
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d90d      	bls.n	8004c0e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	22ff      	movs	r2, #255	@ 0xff
 8004bf8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2229      	movs	r2, #41	@ 0x29
 8004bfe:	2103      	movs	r1, #3
 8004c00:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2228      	movs	r2, #40	@ 0x28
 8004c06:	2100      	movs	r1, #0
 8004c08:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e035      	b.n	8004c7a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	2202      	movs	r2, #2
 8004c16:	4013      	ands	r3, r2
 8004c18:	d0e2      	beq.n	8004be0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	699a      	ldr	r2, [r3, #24]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2180      	movs	r1, #128	@ 0x80
 8004c36:	0089      	lsls	r1, r1, #2
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699a      	ldr	r2, [r3, #24]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2180      	movs	r1, #128	@ 0x80
 8004c48:	0189      	lsls	r1, r1, #6
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004c4e:	4a0f      	ldr	r2, [pc, #60]	@ (8004c8c <HAL_RTC_SetAlarm_IT+0x27c>)
 8004c50:	2380      	movs	r3, #128	@ 0x80
 8004c52:	58d3      	ldr	r3, [r2, r3]
 8004c54:	490d      	ldr	r1, [pc, #52]	@ (8004c8c <HAL_RTC_SetAlarm_IT+0x27c>)
 8004c56:	2280      	movs	r2, #128	@ 0x80
 8004c58:	0312      	lsls	r2, r2, #12
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	2280      	movs	r2, #128	@ 0x80
 8004c5e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	22ff      	movs	r2, #255	@ 0xff
 8004c66:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2229      	movs	r2, #41	@ 0x29
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2228      	movs	r2, #40	@ 0x28
 8004c74:	2100      	movs	r1, #0
 8004c76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b009      	add	sp, #36	@ 0x24
 8004c80:	bd90      	pop	{r4, r7, pc}
 8004c82:	46c0      	nop			@ (mov r8, r8)
 8004c84:	fffffeff 	.word	0xfffffeff
 8004c88:	fffffdff 	.word	0xfffffdff
 8004c8c:	40021800 	.word	0x40021800

08004c90 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699a      	ldr	r2, [r3, #24]
 8004c9e:	2380      	movs	r3, #128	@ 0x80
 8004ca0:	015b      	lsls	r3, r3, #5
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d011      	beq.n	8004cca <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cac:	2201      	movs	r2, #1
 8004cae:	4013      	ands	r3, r2
 8004cb0:	d00b      	beq.n	8004cca <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f7fc f84b 	bl	8000d60 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699a      	ldr	r2, [r3, #24]
 8004cd0:	2380      	movs	r3, #128	@ 0x80
 8004cd2:	019b      	lsls	r3, r3, #6
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d011      	beq.n	8004cfc <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cde:	2202      	movs	r2, #2
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	d00b      	beq.n	8004cfc <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2102      	movs	r1, #2
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	f000 f942 	bl	8004f80 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2229      	movs	r2, #41	@ 0x29
 8004d00:	2101      	movs	r1, #1
 8004d02:	5499      	strb	r1, [r3, r2]
}
 8004d04:	46c0      	nop			@ (mov r8, r8)
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b002      	add	sp, #8
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a0e      	ldr	r2, [pc, #56]	@ (8004d54 <HAL_RTC_WaitForSynchro+0x48>)
 8004d1a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004d1c:	f7fc ffee 	bl	8001cfc <HAL_GetTick>
 8004d20:	0003      	movs	r3, r0
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004d24:	e00a      	b.n	8004d3c <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d26:	f7fc ffe9 	bl	8001cfc <HAL_GetTick>
 8004d2a:	0002      	movs	r2, r0
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	1ad2      	subs	r2, r2, r3
 8004d30:	23fa      	movs	r3, #250	@ 0xfa
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d901      	bls.n	8004d3c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e006      	b.n	8004d4a <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	4013      	ands	r3, r2
 8004d46:	d0ee      	beq.n	8004d26 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	b004      	add	sp, #16
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	46c0      	nop			@ (mov r8, r8)
 8004d54:	0001005f 	.word	0x0001005f

08004d58 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004d60:	230f      	movs	r3, #15
 8004d62:	18fb      	adds	r3, r7, r3
 8004d64:	2200      	movs	r2, #0
 8004d66:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	2240      	movs	r2, #64	@ 0x40
 8004d70:	4013      	ands	r3, r2
 8004d72:	d12c      	bne.n	8004dce <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2180      	movs	r1, #128	@ 0x80
 8004d80:	430a      	orrs	r2, r1
 8004d82:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004d84:	f7fc ffba 	bl	8001cfc <HAL_GetTick>
 8004d88:	0003      	movs	r3, r0
 8004d8a:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004d8c:	e014      	b.n	8004db8 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d8e:	f7fc ffb5 	bl	8001cfc <HAL_GetTick>
 8004d92:	0002      	movs	r2, r0
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	1ad2      	subs	r2, r2, r3
 8004d98:	200f      	movs	r0, #15
 8004d9a:	183b      	adds	r3, r7, r0
 8004d9c:	1839      	adds	r1, r7, r0
 8004d9e:	7809      	ldrb	r1, [r1, #0]
 8004da0:	7019      	strb	r1, [r3, #0]
 8004da2:	23fa      	movs	r3, #250	@ 0xfa
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d906      	bls.n	8004db8 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004daa:	183b      	adds	r3, r7, r0
 8004dac:	2203      	movs	r2, #3
 8004dae:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2229      	movs	r2, #41	@ 0x29
 8004db4:	2103      	movs	r1, #3
 8004db6:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	2240      	movs	r2, #64	@ 0x40
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	d104      	bne.n	8004dce <RTC_EnterInitMode+0x76>
 8004dc4:	230f      	movs	r3, #15
 8004dc6:	18fb      	adds	r3, r7, r3
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d1df      	bne.n	8004d8e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004dce:	230f      	movs	r3, #15
 8004dd0:	18fb      	adds	r3, r7, r3
 8004dd2:	781b      	ldrb	r3, [r3, #0]
}
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	b004      	add	sp, #16
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ddc:	b590      	push	{r4, r7, lr}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de4:	240f      	movs	r4, #15
 8004de6:	193b      	adds	r3, r7, r4
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004dec:	4b1c      	ldr	r3, [pc, #112]	@ (8004e60 <RTC_ExitInitMode+0x84>)
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e60 <RTC_ExitInitMode+0x84>)
 8004df2:	2180      	movs	r1, #128	@ 0x80
 8004df4:	438a      	bics	r2, r1
 8004df6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004df8:	4b19      	ldr	r3, [pc, #100]	@ (8004e60 <RTC_ExitInitMode+0x84>)
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d10d      	bne.n	8004e1e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	0018      	movs	r0, r3
 8004e06:	f7ff ff81 	bl	8004d0c <HAL_RTC_WaitForSynchro>
 8004e0a:	1e03      	subs	r3, r0, #0
 8004e0c:	d021      	beq.n	8004e52 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2229      	movs	r2, #41	@ 0x29
 8004e12:	2103      	movs	r1, #3
 8004e14:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004e16:	193b      	adds	r3, r7, r4
 8004e18:	2203      	movs	r2, #3
 8004e1a:	701a      	strb	r2, [r3, #0]
 8004e1c:	e019      	b.n	8004e52 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004e1e:	4b10      	ldr	r3, [pc, #64]	@ (8004e60 <RTC_ExitInitMode+0x84>)
 8004e20:	699a      	ldr	r2, [r3, #24]
 8004e22:	4b0f      	ldr	r3, [pc, #60]	@ (8004e60 <RTC_ExitInitMode+0x84>)
 8004e24:	2120      	movs	r1, #32
 8004e26:	438a      	bics	r2, r1
 8004e28:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	f7ff ff6d 	bl	8004d0c <HAL_RTC_WaitForSynchro>
 8004e32:	1e03      	subs	r3, r0, #0
 8004e34:	d007      	beq.n	8004e46 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2229      	movs	r2, #41	@ 0x29
 8004e3a:	2103      	movs	r1, #3
 8004e3c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004e3e:	230f      	movs	r3, #15
 8004e40:	18fb      	adds	r3, r7, r3
 8004e42:	2203      	movs	r2, #3
 8004e44:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004e46:	4b06      	ldr	r3, [pc, #24]	@ (8004e60 <RTC_ExitInitMode+0x84>)
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	4b05      	ldr	r3, [pc, #20]	@ (8004e60 <RTC_ExitInitMode+0x84>)
 8004e4c:	2120      	movs	r1, #32
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004e52:	230f      	movs	r3, #15
 8004e54:	18fb      	adds	r3, r7, r3
 8004e56:	781b      	ldrb	r3, [r3, #0]
}
 8004e58:	0018      	movs	r0, r3
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	b005      	add	sp, #20
 8004e5e:	bd90      	pop	{r4, r7, pc}
 8004e60:	40002800 	.word	0x40002800

08004e64 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	0002      	movs	r2, r0
 8004e6c:	1dfb      	adds	r3, r7, #7
 8004e6e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004e74:	230b      	movs	r3, #11
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	1dfa      	adds	r2, r7, #7
 8004e7a:	7812      	ldrb	r2, [r2, #0]
 8004e7c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004e7e:	e008      	b.n	8004e92 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3301      	adds	r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004e86:	220b      	movs	r2, #11
 8004e88:	18bb      	adds	r3, r7, r2
 8004e8a:	18ba      	adds	r2, r7, r2
 8004e8c:	7812      	ldrb	r2, [r2, #0]
 8004e8e:	3a0a      	subs	r2, #10
 8004e90:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004e92:	210b      	movs	r1, #11
 8004e94:	187b      	adds	r3, r7, r1
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b09      	cmp	r3, #9
 8004e9a:	d8f1      	bhi.n	8004e80 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	187b      	adds	r3, r7, r1
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	b2db      	uxtb	r3, r3
}
 8004eac:	0018      	movs	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b004      	add	sp, #16
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	0002      	movs	r2, r0
 8004ebc:	1dfb      	adds	r3, r7, #7
 8004ebe:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004ec0:	1dfb      	adds	r3, r7, #7
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	091b      	lsrs	r3, r3, #4
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	001a      	movs	r2, r3
 8004eca:	0013      	movs	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	189b      	adds	r3, r3, r2
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	1dfb      	adds	r3, r7, #7
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	210f      	movs	r1, #15
 8004ede:	400b      	ands	r3, r1
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	18d3      	adds	r3, r2, r3
 8004ee4:	b2db      	uxtb	r3, r3
}
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b004      	add	sp, #16
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2228      	movs	r2, #40	@ 0x28
 8004efe:	5c9b      	ldrb	r3, [r3, r2]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e035      	b.n	8004f74 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2228      	movs	r2, #40	@ 0x28
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2229      	movs	r2, #41	@ 0x29
 8004f14:	2102      	movs	r1, #2
 8004f16:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	22ca      	movs	r2, #202	@ 0xca
 8004f1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2253      	movs	r2, #83	@ 0x53
 8004f26:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699a      	ldr	r2, [r3, #24]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4912      	ldr	r1, [pc, #72]	@ (8004f7c <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8004f34:	400a      	ands	r2, r1
 8004f36:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6999      	ldr	r1, [r3, #24]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2180      	movs	r1, #128	@ 0x80
 8004f54:	0409      	lsls	r1, r1, #16
 8004f56:	430a      	orrs	r2, r1
 8004f58:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	22ff      	movs	r2, #255	@ 0xff
 8004f60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2229      	movs	r2, #41	@ 0x29
 8004f66:	2101      	movs	r1, #1
 8004f68:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2228      	movs	r2, #40	@ 0x28
 8004f6e:	2100      	movs	r1, #0
 8004f70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	0018      	movs	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	b002      	add	sp, #8
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	fff7ffff 	.word	0xfff7ffff

08004f80 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004f88:	46c0      	nop			@ (mov r8, r8)
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b002      	add	sp, #8
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e04a      	b.n	8005038 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	223d      	movs	r2, #61	@ 0x3d
 8004fa6:	5c9b      	ldrb	r3, [r3, r2]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d107      	bne.n	8004fbe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	223c      	movs	r2, #60	@ 0x3c
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f7fc fd51 	bl	8001a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	223d      	movs	r2, #61	@ 0x3d
 8004fc2:	2102      	movs	r1, #2
 8004fc4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	0019      	movs	r1, r3
 8004fd0:	0010      	movs	r0, r2
 8004fd2:	f000 fadd 	bl	8005590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2248      	movs	r2, #72	@ 0x48
 8004fda:	2101      	movs	r1, #1
 8004fdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	223e      	movs	r2, #62	@ 0x3e
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	5499      	strb	r1, [r3, r2]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	223f      	movs	r2, #63	@ 0x3f
 8004fea:	2101      	movs	r1, #1
 8004fec:	5499      	strb	r1, [r3, r2]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2240      	movs	r2, #64	@ 0x40
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	5499      	strb	r1, [r3, r2]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2241      	movs	r2, #65	@ 0x41
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	5499      	strb	r1, [r3, r2]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2242      	movs	r2, #66	@ 0x42
 8005002:	2101      	movs	r1, #1
 8005004:	5499      	strb	r1, [r3, r2]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2243      	movs	r2, #67	@ 0x43
 800500a:	2101      	movs	r1, #1
 800500c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2244      	movs	r2, #68	@ 0x44
 8005012:	2101      	movs	r1, #1
 8005014:	5499      	strb	r1, [r3, r2]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2245      	movs	r2, #69	@ 0x45
 800501a:	2101      	movs	r1, #1
 800501c:	5499      	strb	r1, [r3, r2]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2246      	movs	r2, #70	@ 0x46
 8005022:	2101      	movs	r1, #1
 8005024:	5499      	strb	r1, [r3, r2]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2247      	movs	r2, #71	@ 0x47
 800502a:	2101      	movs	r1, #1
 800502c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	223d      	movs	r2, #61	@ 0x3d
 8005032:	2101      	movs	r1, #1
 8005034:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	0018      	movs	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	b002      	add	sp, #8
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	223d      	movs	r2, #61	@ 0x3d
 800504c:	5c9b      	ldrb	r3, [r3, r2]
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d001      	beq.n	8005058 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e035      	b.n	80050c4 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	223d      	movs	r2, #61	@ 0x3d
 800505c:	2102      	movs	r1, #2
 800505e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a19      	ldr	r2, [pc, #100]	@ (80050cc <HAL_TIM_Base_Start+0x8c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00a      	beq.n	8005080 <HAL_TIM_Base_Start+0x40>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	2380      	movs	r3, #128	@ 0x80
 8005070:	05db      	lsls	r3, r3, #23
 8005072:	429a      	cmp	r2, r3
 8005074:	d004      	beq.n	8005080 <HAL_TIM_Base_Start+0x40>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a15      	ldr	r2, [pc, #84]	@ (80050d0 <HAL_TIM_Base_Start+0x90>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d116      	bne.n	80050ae <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	4a13      	ldr	r2, [pc, #76]	@ (80050d4 <HAL_TIM_Base_Start+0x94>)
 8005088:	4013      	ands	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b06      	cmp	r3, #6
 8005090:	d016      	beq.n	80050c0 <HAL_TIM_Base_Start+0x80>
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	2380      	movs	r3, #128	@ 0x80
 8005096:	025b      	lsls	r3, r3, #9
 8005098:	429a      	cmp	r2, r3
 800509a:	d011      	beq.n	80050c0 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2101      	movs	r1, #1
 80050a8:	430a      	orrs	r2, r1
 80050aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ac:	e008      	b.n	80050c0 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2101      	movs	r1, #1
 80050ba:	430a      	orrs	r2, r1
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	e000      	b.n	80050c2 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	0018      	movs	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b004      	add	sp, #16
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40012c00 	.word	0x40012c00
 80050d0:	40000400 	.word	0x40000400
 80050d4:	00010007 	.word	0x00010007

080050d8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	4a0d      	ldr	r2, [pc, #52]	@ (800511c <HAL_TIM_Base_Stop+0x44>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	d10d      	bne.n	8005108 <HAL_TIM_Base_Stop+0x30>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	4a0b      	ldr	r2, [pc, #44]	@ (8005120 <HAL_TIM_Base_Stop+0x48>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	d107      	bne.n	8005108 <HAL_TIM_Base_Stop+0x30>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2101      	movs	r1, #1
 8005104:	438a      	bics	r2, r1
 8005106:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	223d      	movs	r2, #61	@ 0x3d
 800510c:	2101      	movs	r1, #1
 800510e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	0018      	movs	r0, r3
 8005114:	46bd      	mov	sp, r7
 8005116:	b002      	add	sp, #8
 8005118:	bd80      	pop	{r7, pc}
 800511a:	46c0      	nop			@ (mov r8, r8)
 800511c:	00001111 	.word	0x00001111
 8005120:	00000444 	.word	0x00000444

08005124 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e04a      	b.n	80051cc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	223d      	movs	r2, #61	@ 0x3d
 800513a:	5c9b      	ldrb	r3, [r3, r2]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d107      	bne.n	8005152 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	223c      	movs	r2, #60	@ 0x3c
 8005146:	2100      	movs	r1, #0
 8005148:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	0018      	movs	r0, r3
 800514e:	f7fc fc6b 	bl	8001a28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	223d      	movs	r2, #61	@ 0x3d
 8005156:	2102      	movs	r1, #2
 8005158:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	3304      	adds	r3, #4
 8005162:	0019      	movs	r1, r3
 8005164:	0010      	movs	r0, r2
 8005166:	f000 fa13 	bl	8005590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2248      	movs	r2, #72	@ 0x48
 800516e:	2101      	movs	r1, #1
 8005170:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	223e      	movs	r2, #62	@ 0x3e
 8005176:	2101      	movs	r1, #1
 8005178:	5499      	strb	r1, [r3, r2]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	223f      	movs	r2, #63	@ 0x3f
 800517e:	2101      	movs	r1, #1
 8005180:	5499      	strb	r1, [r3, r2]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2240      	movs	r2, #64	@ 0x40
 8005186:	2101      	movs	r1, #1
 8005188:	5499      	strb	r1, [r3, r2]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2241      	movs	r2, #65	@ 0x41
 800518e:	2101      	movs	r1, #1
 8005190:	5499      	strb	r1, [r3, r2]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2242      	movs	r2, #66	@ 0x42
 8005196:	2101      	movs	r1, #1
 8005198:	5499      	strb	r1, [r3, r2]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2243      	movs	r2, #67	@ 0x43
 800519e:	2101      	movs	r1, #1
 80051a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2244      	movs	r2, #68	@ 0x44
 80051a6:	2101      	movs	r1, #1
 80051a8:	5499      	strb	r1, [r3, r2]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2245      	movs	r2, #69	@ 0x45
 80051ae:	2101      	movs	r1, #1
 80051b0:	5499      	strb	r1, [r3, r2]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2246      	movs	r2, #70	@ 0x46
 80051b6:	2101      	movs	r1, #1
 80051b8:	5499      	strb	r1, [r3, r2]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2247      	movs	r2, #71	@ 0x47
 80051be:	2101      	movs	r1, #1
 80051c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	223d      	movs	r2, #61	@ 0x3d
 80051c6:	2101      	movs	r1, #1
 80051c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	0018      	movs	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	b002      	add	sp, #8
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d108      	bne.n	80051f6 <HAL_TIM_PWM_Start+0x22>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	223e      	movs	r2, #62	@ 0x3e
 80051e8:	5c9b      	ldrb	r3, [r3, r2]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	3b01      	subs	r3, #1
 80051ee:	1e5a      	subs	r2, r3, #1
 80051f0:	4193      	sbcs	r3, r2
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	e037      	b.n	8005266 <HAL_TIM_PWM_Start+0x92>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d108      	bne.n	800520e <HAL_TIM_PWM_Start+0x3a>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	223f      	movs	r2, #63	@ 0x3f
 8005200:	5c9b      	ldrb	r3, [r3, r2]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	1e5a      	subs	r2, r3, #1
 8005208:	4193      	sbcs	r3, r2
 800520a:	b2db      	uxtb	r3, r3
 800520c:	e02b      	b.n	8005266 <HAL_TIM_PWM_Start+0x92>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b08      	cmp	r3, #8
 8005212:	d108      	bne.n	8005226 <HAL_TIM_PWM_Start+0x52>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2240      	movs	r2, #64	@ 0x40
 8005218:	5c9b      	ldrb	r3, [r3, r2]
 800521a:	b2db      	uxtb	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	1e5a      	subs	r2, r3, #1
 8005220:	4193      	sbcs	r3, r2
 8005222:	b2db      	uxtb	r3, r3
 8005224:	e01f      	b.n	8005266 <HAL_TIM_PWM_Start+0x92>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b0c      	cmp	r3, #12
 800522a:	d108      	bne.n	800523e <HAL_TIM_PWM_Start+0x6a>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2241      	movs	r2, #65	@ 0x41
 8005230:	5c9b      	ldrb	r3, [r3, r2]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	1e5a      	subs	r2, r3, #1
 8005238:	4193      	sbcs	r3, r2
 800523a:	b2db      	uxtb	r3, r3
 800523c:	e013      	b.n	8005266 <HAL_TIM_PWM_Start+0x92>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b10      	cmp	r3, #16
 8005242:	d108      	bne.n	8005256 <HAL_TIM_PWM_Start+0x82>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2242      	movs	r2, #66	@ 0x42
 8005248:	5c9b      	ldrb	r3, [r3, r2]
 800524a:	b2db      	uxtb	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	1e5a      	subs	r2, r3, #1
 8005250:	4193      	sbcs	r3, r2
 8005252:	b2db      	uxtb	r3, r3
 8005254:	e007      	b.n	8005266 <HAL_TIM_PWM_Start+0x92>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2243      	movs	r2, #67	@ 0x43
 800525a:	5c9b      	ldrb	r3, [r3, r2]
 800525c:	b2db      	uxtb	r3, r3
 800525e:	3b01      	subs	r3, #1
 8005260:	1e5a      	subs	r2, r3, #1
 8005262:	4193      	sbcs	r3, r2
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e081      	b.n	8005372 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d104      	bne.n	800527e <HAL_TIM_PWM_Start+0xaa>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	223e      	movs	r2, #62	@ 0x3e
 8005278:	2102      	movs	r1, #2
 800527a:	5499      	strb	r1, [r3, r2]
 800527c:	e023      	b.n	80052c6 <HAL_TIM_PWM_Start+0xf2>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b04      	cmp	r3, #4
 8005282:	d104      	bne.n	800528e <HAL_TIM_PWM_Start+0xba>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	223f      	movs	r2, #63	@ 0x3f
 8005288:	2102      	movs	r1, #2
 800528a:	5499      	strb	r1, [r3, r2]
 800528c:	e01b      	b.n	80052c6 <HAL_TIM_PWM_Start+0xf2>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b08      	cmp	r3, #8
 8005292:	d104      	bne.n	800529e <HAL_TIM_PWM_Start+0xca>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2240      	movs	r2, #64	@ 0x40
 8005298:	2102      	movs	r1, #2
 800529a:	5499      	strb	r1, [r3, r2]
 800529c:	e013      	b.n	80052c6 <HAL_TIM_PWM_Start+0xf2>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b0c      	cmp	r3, #12
 80052a2:	d104      	bne.n	80052ae <HAL_TIM_PWM_Start+0xda>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2241      	movs	r2, #65	@ 0x41
 80052a8:	2102      	movs	r1, #2
 80052aa:	5499      	strb	r1, [r3, r2]
 80052ac:	e00b      	b.n	80052c6 <HAL_TIM_PWM_Start+0xf2>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d104      	bne.n	80052be <HAL_TIM_PWM_Start+0xea>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2242      	movs	r2, #66	@ 0x42
 80052b8:	2102      	movs	r1, #2
 80052ba:	5499      	strb	r1, [r3, r2]
 80052bc:	e003      	b.n	80052c6 <HAL_TIM_PWM_Start+0xf2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2243      	movs	r2, #67	@ 0x43
 80052c2:	2102      	movs	r1, #2
 80052c4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6839      	ldr	r1, [r7, #0]
 80052cc:	2201      	movs	r2, #1
 80052ce:	0018      	movs	r0, r3
 80052d0:	f000 fc7e 	bl	8005bd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a28      	ldr	r2, [pc, #160]	@ (800537c <HAL_TIM_PWM_Start+0x1a8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d009      	beq.n	80052f2 <HAL_TIM_PWM_Start+0x11e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a27      	ldr	r2, [pc, #156]	@ (8005380 <HAL_TIM_PWM_Start+0x1ac>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d004      	beq.n	80052f2 <HAL_TIM_PWM_Start+0x11e>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a25      	ldr	r2, [pc, #148]	@ (8005384 <HAL_TIM_PWM_Start+0x1b0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d101      	bne.n	80052f6 <HAL_TIM_PWM_Start+0x122>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <HAL_TIM_PWM_Start+0x124>
 80052f6:	2300      	movs	r3, #0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d008      	beq.n	800530e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2180      	movs	r1, #128	@ 0x80
 8005308:	0209      	lsls	r1, r1, #8
 800530a:	430a      	orrs	r2, r1
 800530c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1a      	ldr	r2, [pc, #104]	@ (800537c <HAL_TIM_PWM_Start+0x1a8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d00a      	beq.n	800532e <HAL_TIM_PWM_Start+0x15a>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	2380      	movs	r3, #128	@ 0x80
 800531e:	05db      	lsls	r3, r3, #23
 8005320:	429a      	cmp	r2, r3
 8005322:	d004      	beq.n	800532e <HAL_TIM_PWM_Start+0x15a>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a17      	ldr	r2, [pc, #92]	@ (8005388 <HAL_TIM_PWM_Start+0x1b4>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d116      	bne.n	800535c <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	4a15      	ldr	r2, [pc, #84]	@ (800538c <HAL_TIM_PWM_Start+0x1b8>)
 8005336:	4013      	ands	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b06      	cmp	r3, #6
 800533e:	d016      	beq.n	800536e <HAL_TIM_PWM_Start+0x19a>
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	2380      	movs	r3, #128	@ 0x80
 8005344:	025b      	lsls	r3, r3, #9
 8005346:	429a      	cmp	r2, r3
 8005348:	d011      	beq.n	800536e <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2101      	movs	r1, #1
 8005356:	430a      	orrs	r2, r1
 8005358:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535a:	e008      	b.n	800536e <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2101      	movs	r1, #1
 8005368:	430a      	orrs	r2, r1
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	e000      	b.n	8005370 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	0018      	movs	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	b004      	add	sp, #16
 8005378:	bd80      	pop	{r7, pc}
 800537a:	46c0      	nop			@ (mov r8, r8)
 800537c:	40012c00 	.word	0x40012c00
 8005380:	40014400 	.word	0x40014400
 8005384:	40014800 	.word	0x40014800
 8005388:	40000400 	.word	0x40000400
 800538c:	00010007 	.word	0x00010007

08005390 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800539c:	2317      	movs	r3, #23
 800539e:	18fb      	adds	r3, r7, r3
 80053a0:	2200      	movs	r2, #0
 80053a2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	223c      	movs	r2, #60	@ 0x3c
 80053a8:	5c9b      	ldrb	r3, [r3, r2]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d101      	bne.n	80053b2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80053ae:	2302      	movs	r3, #2
 80053b0:	e0e5      	b.n	800557e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	223c      	movs	r2, #60	@ 0x3c
 80053b6:	2101      	movs	r1, #1
 80053b8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b14      	cmp	r3, #20
 80053be:	d900      	bls.n	80053c2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80053c0:	e0d1      	b.n	8005566 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	009a      	lsls	r2, r3, #2
 80053c6:	4b70      	ldr	r3, [pc, #448]	@ (8005588 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80053c8:	18d3      	adds	r3, r2, r3
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	0011      	movs	r1, r2
 80053d6:	0018      	movs	r0, r3
 80053d8:	f000 f95e 	bl	8005698 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2108      	movs	r1, #8
 80053e8:	430a      	orrs	r2, r1
 80053ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2104      	movs	r1, #4
 80053f8:	438a      	bics	r2, r1
 80053fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6999      	ldr	r1, [r3, #24]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	619a      	str	r2, [r3, #24]
      break;
 800540e:	e0af      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	0011      	movs	r1, r2
 8005418:	0018      	movs	r0, r3
 800541a:	f000 f9bd 	bl	8005798 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	699a      	ldr	r2, [r3, #24]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2180      	movs	r1, #128	@ 0x80
 800542a:	0109      	lsls	r1, r1, #4
 800542c:	430a      	orrs	r2, r1
 800542e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699a      	ldr	r2, [r3, #24]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4954      	ldr	r1, [pc, #336]	@ (800558c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800543c:	400a      	ands	r2, r1
 800543e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6999      	ldr	r1, [r3, #24]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	021a      	lsls	r2, r3, #8
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	619a      	str	r2, [r3, #24]
      break;
 8005454:	e08c      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	0011      	movs	r1, r2
 800545e:	0018      	movs	r0, r3
 8005460:	f000 fa18 	bl	8005894 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	69da      	ldr	r2, [r3, #28]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2108      	movs	r1, #8
 8005470:	430a      	orrs	r2, r1
 8005472:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69da      	ldr	r2, [r3, #28]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2104      	movs	r1, #4
 8005480:	438a      	bics	r2, r1
 8005482:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	69d9      	ldr	r1, [r3, #28]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	691a      	ldr	r2, [r3, #16]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	61da      	str	r2, [r3, #28]
      break;
 8005496:	e06b      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	0011      	movs	r1, r2
 80054a0:	0018      	movs	r0, r3
 80054a2:	f000 fa79 	bl	8005998 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69da      	ldr	r2, [r3, #28]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2180      	movs	r1, #128	@ 0x80
 80054b2:	0109      	lsls	r1, r1, #4
 80054b4:	430a      	orrs	r2, r1
 80054b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	69da      	ldr	r2, [r3, #28]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4932      	ldr	r1, [pc, #200]	@ (800558c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80054c4:	400a      	ands	r2, r1
 80054c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69d9      	ldr	r1, [r3, #28]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	021a      	lsls	r2, r3, #8
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	61da      	str	r2, [r3, #28]
      break;
 80054dc:	e048      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	0011      	movs	r1, r2
 80054e6:	0018      	movs	r0, r3
 80054e8:	f000 faba 	bl	8005a60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2108      	movs	r1, #8
 80054f8:	430a      	orrs	r2, r1
 80054fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2104      	movs	r1, #4
 8005508:	438a      	bics	r2, r1
 800550a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	691a      	ldr	r2, [r3, #16]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800551e:	e027      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	0011      	movs	r1, r2
 8005528:	0018      	movs	r0, r3
 800552a:	f000 faf3 	bl	8005b14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2180      	movs	r1, #128	@ 0x80
 800553a:	0109      	lsls	r1, r1, #4
 800553c:	430a      	orrs	r2, r1
 800553e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4910      	ldr	r1, [pc, #64]	@ (800558c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800554c:	400a      	ands	r2, r1
 800554e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	021a      	lsls	r2, r3, #8
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005564:	e004      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005566:	2317      	movs	r3, #23
 8005568:	18fb      	adds	r3, r7, r3
 800556a:	2201      	movs	r2, #1
 800556c:	701a      	strb	r2, [r3, #0]
      break;
 800556e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	223c      	movs	r2, #60	@ 0x3c
 8005574:	2100      	movs	r1, #0
 8005576:	5499      	strb	r1, [r3, r2]

  return status;
 8005578:	2317      	movs	r3, #23
 800557a:	18fb      	adds	r3, r7, r3
 800557c:	781b      	ldrb	r3, [r3, #0]
}
 800557e:	0018      	movs	r0, r3
 8005580:	46bd      	mov	sp, r7
 8005582:	b006      	add	sp, #24
 8005584:	bd80      	pop	{r7, pc}
 8005586:	46c0      	nop			@ (mov r8, r8)
 8005588:	08005dc8 	.word	0x08005dc8
 800558c:	fffffbff 	.word	0xfffffbff

08005590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a37      	ldr	r2, [pc, #220]	@ (8005680 <TIM_Base_SetConfig+0xf0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d008      	beq.n	80055ba <TIM_Base_SetConfig+0x2a>
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	2380      	movs	r3, #128	@ 0x80
 80055ac:	05db      	lsls	r3, r3, #23
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d003      	beq.n	80055ba <TIM_Base_SetConfig+0x2a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a33      	ldr	r2, [pc, #204]	@ (8005684 <TIM_Base_SetConfig+0xf4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d108      	bne.n	80055cc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2270      	movs	r2, #112	@ 0x70
 80055be:	4393      	bics	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005680 <TIM_Base_SetConfig+0xf0>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d014      	beq.n	80055fe <TIM_Base_SetConfig+0x6e>
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	2380      	movs	r3, #128	@ 0x80
 80055d8:	05db      	lsls	r3, r3, #23
 80055da:	429a      	cmp	r2, r3
 80055dc:	d00f      	beq.n	80055fe <TIM_Base_SetConfig+0x6e>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a28      	ldr	r2, [pc, #160]	@ (8005684 <TIM_Base_SetConfig+0xf4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00b      	beq.n	80055fe <TIM_Base_SetConfig+0x6e>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a27      	ldr	r2, [pc, #156]	@ (8005688 <TIM_Base_SetConfig+0xf8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d007      	beq.n	80055fe <TIM_Base_SetConfig+0x6e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a26      	ldr	r2, [pc, #152]	@ (800568c <TIM_Base_SetConfig+0xfc>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d003      	beq.n	80055fe <TIM_Base_SetConfig+0x6e>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a25      	ldr	r2, [pc, #148]	@ (8005690 <TIM_Base_SetConfig+0x100>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d108      	bne.n	8005610 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4a24      	ldr	r2, [pc, #144]	@ (8005694 <TIM_Base_SetConfig+0x104>)
 8005602:	4013      	ands	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4313      	orrs	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2280      	movs	r2, #128	@ 0x80
 8005614:	4393      	bics	r3, r2
 8005616:	001a      	movs	r2, r3
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a11      	ldr	r2, [pc, #68]	@ (8005680 <TIM_Base_SetConfig+0xf0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d007      	beq.n	800564e <TIM_Base_SetConfig+0xbe>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a12      	ldr	r2, [pc, #72]	@ (800568c <TIM_Base_SetConfig+0xfc>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d003      	beq.n	800564e <TIM_Base_SetConfig+0xbe>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a11      	ldr	r2, [pc, #68]	@ (8005690 <TIM_Base_SetConfig+0x100>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d103      	bne.n	8005656 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	691a      	ldr	r2, [r3, #16]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	2201      	movs	r2, #1
 8005662:	4013      	ands	r3, r2
 8005664:	2b01      	cmp	r3, #1
 8005666:	d106      	bne.n	8005676 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2201      	movs	r2, #1
 800566e:	4393      	bics	r3, r2
 8005670:	001a      	movs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	611a      	str	r2, [r3, #16]
  }
}
 8005676:	46c0      	nop			@ (mov r8, r8)
 8005678:	46bd      	mov	sp, r7
 800567a:	b004      	add	sp, #16
 800567c:	bd80      	pop	{r7, pc}
 800567e:	46c0      	nop			@ (mov r8, r8)
 8005680:	40012c00 	.word	0x40012c00
 8005684:	40000400 	.word	0x40000400
 8005688:	40002000 	.word	0x40002000
 800568c:	40014400 	.word	0x40014400
 8005690:	40014800 	.word	0x40014800
 8005694:	fffffcff 	.word	0xfffffcff

08005698 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	2201      	movs	r2, #1
 80056ae:	4393      	bics	r3, r2
 80056b0:	001a      	movs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4a2e      	ldr	r2, [pc, #184]	@ (8005780 <TIM_OC1_SetConfig+0xe8>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2203      	movs	r2, #3
 80056ce:	4393      	bics	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2202      	movs	r2, #2
 80056e0:	4393      	bics	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a24      	ldr	r2, [pc, #144]	@ (8005784 <TIM_OC1_SetConfig+0xec>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d007      	beq.n	8005706 <TIM_OC1_SetConfig+0x6e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a23      	ldr	r2, [pc, #140]	@ (8005788 <TIM_OC1_SetConfig+0xf0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <TIM_OC1_SetConfig+0x6e>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a22      	ldr	r2, [pc, #136]	@ (800578c <TIM_OC1_SetConfig+0xf4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d10c      	bne.n	8005720 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2208      	movs	r2, #8
 800570a:	4393      	bics	r3, r2
 800570c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	4313      	orrs	r3, r2
 8005716:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2204      	movs	r2, #4
 800571c:	4393      	bics	r3, r2
 800571e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a18      	ldr	r2, [pc, #96]	@ (8005784 <TIM_OC1_SetConfig+0xec>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d007      	beq.n	8005738 <TIM_OC1_SetConfig+0xa0>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a17      	ldr	r2, [pc, #92]	@ (8005788 <TIM_OC1_SetConfig+0xf0>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d003      	beq.n	8005738 <TIM_OC1_SetConfig+0xa0>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a16      	ldr	r2, [pc, #88]	@ (800578c <TIM_OC1_SetConfig+0xf4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d111      	bne.n	800575c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	4a15      	ldr	r2, [pc, #84]	@ (8005790 <TIM_OC1_SetConfig+0xf8>)
 800573c:	4013      	ands	r3, r2
 800573e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	4a14      	ldr	r2, [pc, #80]	@ (8005794 <TIM_OC1_SetConfig+0xfc>)
 8005744:	4013      	ands	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	621a      	str	r2, [r3, #32]
}
 8005776:	46c0      	nop			@ (mov r8, r8)
 8005778:	46bd      	mov	sp, r7
 800577a:	b006      	add	sp, #24
 800577c:	bd80      	pop	{r7, pc}
 800577e:	46c0      	nop			@ (mov r8, r8)
 8005780:	fffeff8f 	.word	0xfffeff8f
 8005784:	40012c00 	.word	0x40012c00
 8005788:	40014400 	.word	0x40014400
 800578c:	40014800 	.word	0x40014800
 8005790:	fffffeff 	.word	0xfffffeff
 8005794:	fffffdff 	.word	0xfffffdff

08005798 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	2210      	movs	r2, #16
 80057ae:	4393      	bics	r3, r2
 80057b0:	001a      	movs	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4a2c      	ldr	r2, [pc, #176]	@ (8005878 <TIM_OC2_SetConfig+0xe0>)
 80057c6:	4013      	ands	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4a2b      	ldr	r2, [pc, #172]	@ (800587c <TIM_OC2_SetConfig+0xe4>)
 80057ce:	4013      	ands	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2220      	movs	r2, #32
 80057e2:	4393      	bics	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a22      	ldr	r2, [pc, #136]	@ (8005880 <TIM_OC2_SetConfig+0xe8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d10d      	bne.n	8005816 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2280      	movs	r2, #128	@ 0x80
 80057fe:	4393      	bics	r3, r2
 8005800:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2240      	movs	r2, #64	@ 0x40
 8005812:	4393      	bics	r3, r2
 8005814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a19      	ldr	r2, [pc, #100]	@ (8005880 <TIM_OC2_SetConfig+0xe8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d007      	beq.n	800582e <TIM_OC2_SetConfig+0x96>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a18      	ldr	r2, [pc, #96]	@ (8005884 <TIM_OC2_SetConfig+0xec>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d003      	beq.n	800582e <TIM_OC2_SetConfig+0x96>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a17      	ldr	r2, [pc, #92]	@ (8005888 <TIM_OC2_SetConfig+0xf0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d113      	bne.n	8005856 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	4a16      	ldr	r2, [pc, #88]	@ (800588c <TIM_OC2_SetConfig+0xf4>)
 8005832:	4013      	ands	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	4a15      	ldr	r2, [pc, #84]	@ (8005890 <TIM_OC2_SetConfig+0xf8>)
 800583a:	4013      	ands	r3, r2
 800583c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	621a      	str	r2, [r3, #32]
}
 8005870:	46c0      	nop			@ (mov r8, r8)
 8005872:	46bd      	mov	sp, r7
 8005874:	b006      	add	sp, #24
 8005876:	bd80      	pop	{r7, pc}
 8005878:	feff8fff 	.word	0xfeff8fff
 800587c:	fffffcff 	.word	0xfffffcff
 8005880:	40012c00 	.word	0x40012c00
 8005884:	40014400 	.word	0x40014400
 8005888:	40014800 	.word	0x40014800
 800588c:	fffffbff 	.word	0xfffffbff
 8005890:	fffff7ff 	.word	0xfffff7ff

08005894 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	4a31      	ldr	r2, [pc, #196]	@ (8005970 <TIM_OC3_SetConfig+0xdc>)
 80058aa:	401a      	ands	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4a2d      	ldr	r2, [pc, #180]	@ (8005974 <TIM_OC3_SetConfig+0xe0>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2203      	movs	r2, #3
 80058c8:	4393      	bics	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	4a27      	ldr	r2, [pc, #156]	@ (8005978 <TIM_OC3_SetConfig+0xe4>)
 80058da:	4013      	ands	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	021b      	lsls	r3, r3, #8
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a23      	ldr	r2, [pc, #140]	@ (800597c <TIM_OC3_SetConfig+0xe8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d10d      	bne.n	800590e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	4a22      	ldr	r2, [pc, #136]	@ (8005980 <TIM_OC3_SetConfig+0xec>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	021b      	lsls	r3, r3, #8
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	4a1e      	ldr	r2, [pc, #120]	@ (8005984 <TIM_OC3_SetConfig+0xf0>)
 800590a:	4013      	ands	r3, r2
 800590c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a1a      	ldr	r2, [pc, #104]	@ (800597c <TIM_OC3_SetConfig+0xe8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d007      	beq.n	8005926 <TIM_OC3_SetConfig+0x92>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a1b      	ldr	r2, [pc, #108]	@ (8005988 <TIM_OC3_SetConfig+0xf4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d003      	beq.n	8005926 <TIM_OC3_SetConfig+0x92>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a1a      	ldr	r2, [pc, #104]	@ (800598c <TIM_OC3_SetConfig+0xf8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d113      	bne.n	800594e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	4a19      	ldr	r2, [pc, #100]	@ (8005990 <TIM_OC3_SetConfig+0xfc>)
 800592a:	4013      	ands	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	4a18      	ldr	r2, [pc, #96]	@ (8005994 <TIM_OC3_SetConfig+0x100>)
 8005932:	4013      	ands	r3, r2
 8005934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	011b      	lsls	r3, r3, #4
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	4313      	orrs	r3, r2
 800594c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	621a      	str	r2, [r3, #32]
}
 8005968:	46c0      	nop			@ (mov r8, r8)
 800596a:	46bd      	mov	sp, r7
 800596c:	b006      	add	sp, #24
 800596e:	bd80      	pop	{r7, pc}
 8005970:	fffffeff 	.word	0xfffffeff
 8005974:	fffeff8f 	.word	0xfffeff8f
 8005978:	fffffdff 	.word	0xfffffdff
 800597c:	40012c00 	.word	0x40012c00
 8005980:	fffff7ff 	.word	0xfffff7ff
 8005984:	fffffbff 	.word	0xfffffbff
 8005988:	40014400 	.word	0x40014400
 800598c:	40014800 	.word	0x40014800
 8005990:	ffffefff 	.word	0xffffefff
 8005994:	ffffdfff 	.word	0xffffdfff

08005998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	4a24      	ldr	r2, [pc, #144]	@ (8005a40 <TIM_OC4_SetConfig+0xa8>)
 80059ae:	401a      	ands	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4a20      	ldr	r2, [pc, #128]	@ (8005a44 <TIM_OC4_SetConfig+0xac>)
 80059c4:	4013      	ands	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4a1f      	ldr	r2, [pc, #124]	@ (8005a48 <TIM_OC4_SetConfig+0xb0>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	021b      	lsls	r3, r3, #8
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	4a1b      	ldr	r2, [pc, #108]	@ (8005a4c <TIM_OC4_SetConfig+0xb4>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	031b      	lsls	r3, r3, #12
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a17      	ldr	r2, [pc, #92]	@ (8005a50 <TIM_OC4_SetConfig+0xb8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d007      	beq.n	8005a08 <TIM_OC4_SetConfig+0x70>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a16      	ldr	r2, [pc, #88]	@ (8005a54 <TIM_OC4_SetConfig+0xbc>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d003      	beq.n	8005a08 <TIM_OC4_SetConfig+0x70>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a15      	ldr	r2, [pc, #84]	@ (8005a58 <TIM_OC4_SetConfig+0xc0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d109      	bne.n	8005a1c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	4a14      	ldr	r2, [pc, #80]	@ (8005a5c <TIM_OC4_SetConfig+0xc4>)
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	019b      	lsls	r3, r3, #6
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	621a      	str	r2, [r3, #32]
}
 8005a36:	46c0      	nop			@ (mov r8, r8)
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	b006      	add	sp, #24
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	46c0      	nop			@ (mov r8, r8)
 8005a40:	ffffefff 	.word	0xffffefff
 8005a44:	feff8fff 	.word	0xfeff8fff
 8005a48:	fffffcff 	.word	0xfffffcff
 8005a4c:	ffffdfff 	.word	0xffffdfff
 8005a50:	40012c00 	.word	0x40012c00
 8005a54:	40014400 	.word	0x40014400
 8005a58:	40014800 	.word	0x40014800
 8005a5c:	ffffbfff 	.word	0xffffbfff

08005a60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	4a21      	ldr	r2, [pc, #132]	@ (8005afc <TIM_OC5_SetConfig+0x9c>)
 8005a76:	401a      	ands	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8005b00 <TIM_OC5_SetConfig+0xa0>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	4a19      	ldr	r2, [pc, #100]	@ (8005b04 <TIM_OC5_SetConfig+0xa4>)
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	041b      	lsls	r3, r3, #16
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a15      	ldr	r2, [pc, #84]	@ (8005b08 <TIM_OC5_SetConfig+0xa8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d007      	beq.n	8005ac6 <TIM_OC5_SetConfig+0x66>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a14      	ldr	r2, [pc, #80]	@ (8005b0c <TIM_OC5_SetConfig+0xac>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d003      	beq.n	8005ac6 <TIM_OC5_SetConfig+0x66>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a13      	ldr	r2, [pc, #76]	@ (8005b10 <TIM_OC5_SetConfig+0xb0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d109      	bne.n	8005ada <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8005afc <TIM_OC5_SetConfig+0x9c>)
 8005aca:	4013      	ands	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	021b      	lsls	r3, r3, #8
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	621a      	str	r2, [r3, #32]
}
 8005af4:	46c0      	nop			@ (mov r8, r8)
 8005af6:	46bd      	mov	sp, r7
 8005af8:	b006      	add	sp, #24
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	fffeffff 	.word	0xfffeffff
 8005b00:	fffeff8f 	.word	0xfffeff8f
 8005b04:	fffdffff 	.word	0xfffdffff
 8005b08:	40012c00 	.word	0x40012c00
 8005b0c:	40014400 	.word	0x40014400
 8005b10:	40014800 	.word	0x40014800

08005b14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	4a22      	ldr	r2, [pc, #136]	@ (8005bb4 <TIM_OC6_SetConfig+0xa0>)
 8005b2a:	401a      	ands	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8005bb8 <TIM_OC6_SetConfig+0xa4>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	021b      	lsls	r3, r3, #8
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	4a1a      	ldr	r2, [pc, #104]	@ (8005bbc <TIM_OC6_SetConfig+0xa8>)
 8005b54:	4013      	ands	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	051b      	lsls	r3, r3, #20
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a16      	ldr	r2, [pc, #88]	@ (8005bc0 <TIM_OC6_SetConfig+0xac>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d007      	beq.n	8005b7c <TIM_OC6_SetConfig+0x68>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a15      	ldr	r2, [pc, #84]	@ (8005bc4 <TIM_OC6_SetConfig+0xb0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d003      	beq.n	8005b7c <TIM_OC6_SetConfig+0x68>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a14      	ldr	r2, [pc, #80]	@ (8005bc8 <TIM_OC6_SetConfig+0xb4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d109      	bne.n	8005b90 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	4a13      	ldr	r2, [pc, #76]	@ (8005bcc <TIM_OC6_SetConfig+0xb8>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	029b      	lsls	r3, r3, #10
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	621a      	str	r2, [r3, #32]
}
 8005baa:	46c0      	nop			@ (mov r8, r8)
 8005bac:	46bd      	mov	sp, r7
 8005bae:	b006      	add	sp, #24
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	46c0      	nop			@ (mov r8, r8)
 8005bb4:	ffefffff 	.word	0xffefffff
 8005bb8:	feff8fff 	.word	0xfeff8fff
 8005bbc:	ffdfffff 	.word	0xffdfffff
 8005bc0:	40012c00 	.word	0x40012c00
 8005bc4:	40014400 	.word	0x40014400
 8005bc8:	40014800 	.word	0x40014800
 8005bcc:	fffbffff 	.word	0xfffbffff

08005bd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	221f      	movs	r2, #31
 8005be0:	4013      	ands	r3, r2
 8005be2:	2201      	movs	r2, #1
 8005be4:	409a      	lsls	r2, r3
 8005be6:	0013      	movs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	43d2      	mvns	r2, r2
 8005bf2:	401a      	ands	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a1a      	ldr	r2, [r3, #32]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	211f      	movs	r1, #31
 8005c00:	400b      	ands	r3, r1
 8005c02:	6879      	ldr	r1, [r7, #4]
 8005c04:	4099      	lsls	r1, r3
 8005c06:	000b      	movs	r3, r1
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	621a      	str	r2, [r3, #32]
}
 8005c0e:	46c0      	nop			@ (mov r8, r8)
 8005c10:	46bd      	mov	sp, r7
 8005c12:	b006      	add	sp, #24
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	223c      	movs	r2, #60	@ 0x3c
 8005c26:	5c9b      	ldrb	r3, [r3, r2]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d101      	bne.n	8005c30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	e050      	b.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	223c      	movs	r2, #60	@ 0x3c
 8005c34:	2101      	movs	r1, #1
 8005c36:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	223d      	movs	r2, #61	@ 0x3d
 8005c3c:	2102      	movs	r1, #2
 8005c3e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a21      	ldr	r2, [pc, #132]	@ (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d108      	bne.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4a20      	ldr	r2, [pc, #128]	@ (8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005c5e:	4013      	ands	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2270      	movs	r2, #112	@ 0x70
 8005c70:	4393      	bics	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a14      	ldr	r2, [pc, #80]	@ (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d00a      	beq.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	2380      	movs	r3, #128	@ 0x80
 8005c96:	05db      	lsls	r3, r3, #23
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d004      	beq.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a10      	ldr	r2, [pc, #64]	@ (8005ce4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d10c      	bne.n	8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2280      	movs	r2, #128	@ 0x80
 8005caa:	4393      	bics	r3, r2
 8005cac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	223d      	movs	r2, #61	@ 0x3d
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	223c      	movs	r2, #60	@ 0x3c
 8005ccc:	2100      	movs	r1, #0
 8005cce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	b004      	add	sp, #16
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	46c0      	nop			@ (mov r8, r8)
 8005cdc:	40012c00 	.word	0x40012c00
 8005ce0:	ff0fffff 	.word	0xff0fffff
 8005ce4:	40000400 	.word	0x40000400

08005ce8 <memset>:
 8005ce8:	0003      	movs	r3, r0
 8005cea:	1882      	adds	r2, r0, r2
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d100      	bne.n	8005cf2 <memset+0xa>
 8005cf0:	4770      	bx	lr
 8005cf2:	7019      	strb	r1, [r3, #0]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	e7f9      	b.n	8005cec <memset+0x4>

08005cf8 <__libc_init_array>:
 8005cf8:	b570      	push	{r4, r5, r6, lr}
 8005cfa:	2600      	movs	r6, #0
 8005cfc:	4c0c      	ldr	r4, [pc, #48]	@ (8005d30 <__libc_init_array+0x38>)
 8005cfe:	4d0d      	ldr	r5, [pc, #52]	@ (8005d34 <__libc_init_array+0x3c>)
 8005d00:	1b64      	subs	r4, r4, r5
 8005d02:	10a4      	asrs	r4, r4, #2
 8005d04:	42a6      	cmp	r6, r4
 8005d06:	d109      	bne.n	8005d1c <__libc_init_array+0x24>
 8005d08:	2600      	movs	r6, #0
 8005d0a:	f000 f819 	bl	8005d40 <_init>
 8005d0e:	4c0a      	ldr	r4, [pc, #40]	@ (8005d38 <__libc_init_array+0x40>)
 8005d10:	4d0a      	ldr	r5, [pc, #40]	@ (8005d3c <__libc_init_array+0x44>)
 8005d12:	1b64      	subs	r4, r4, r5
 8005d14:	10a4      	asrs	r4, r4, #2
 8005d16:	42a6      	cmp	r6, r4
 8005d18:	d105      	bne.n	8005d26 <__libc_init_array+0x2e>
 8005d1a:	bd70      	pop	{r4, r5, r6, pc}
 8005d1c:	00b3      	lsls	r3, r6, #2
 8005d1e:	58eb      	ldr	r3, [r5, r3]
 8005d20:	4798      	blx	r3
 8005d22:	3601      	adds	r6, #1
 8005d24:	e7ee      	b.n	8005d04 <__libc_init_array+0xc>
 8005d26:	00b3      	lsls	r3, r6, #2
 8005d28:	58eb      	ldr	r3, [r5, r3]
 8005d2a:	4798      	blx	r3
 8005d2c:	3601      	adds	r6, #1
 8005d2e:	e7f2      	b.n	8005d16 <__libc_init_array+0x1e>
 8005d30:	08005e1c 	.word	0x08005e1c
 8005d34:	08005e1c 	.word	0x08005e1c
 8005d38:	08005e20 	.word	0x08005e20
 8005d3c:	08005e1c 	.word	0x08005e1c

08005d40 <_init>:
 8005d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d42:	46c0      	nop			@ (mov r8, r8)
 8005d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d46:	bc08      	pop	{r3}
 8005d48:	469e      	mov	lr, r3
 8005d4a:	4770      	bx	lr

08005d4c <_fini>:
 8005d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4e:	46c0      	nop			@ (mov r8, r8)
 8005d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d52:	bc08      	pop	{r3}
 8005d54:	469e      	mov	lr, r3
 8005d56:	4770      	bx	lr
