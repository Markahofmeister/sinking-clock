
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000628c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08006348  08006348  00007348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006414  08006414  00008074  2**0
                  CONTENTS
  4 .ARM          00000000  08006414  08006414  00008074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006414  08006414  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006414  08006414  00007414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006418  08006418  00007418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800641c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000074  08006490  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08006490  000082a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cc5  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bc5  00000000  00000000  0001ad61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  0001d928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e30  00000000  00000000  0001eb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018116  00000000  00000000  0001f990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165f8  00000000  00000000  00037aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098479  00000000  00000000  0004e09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000e6517  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041f0  00000000  00000000  000e65a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000ea790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006330 	.word	0x08006330

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	08006330 	.word	0x08006330

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231e      	movs	r3, #30
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-high hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	899b      	ldrh	r3, [r3, #12]
 8000258:	2201      	movs	r2, #1
 800025a:	0019      	movs	r1, r3
 800025c:	f002 fb79 	bl	8002952 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	899b      	ldrh	r3, [r3, #12]
 800026a:	2200      	movs	r2, #0
 800026c:	0019      	movs	r1, r3
 800026e:	f002 fb70 	bl	8002952 <HAL_GPIO_WritePin>

	/*
	 *  Delay for 500 ms using hardware timer
	 */
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f005 f85a 	bl	8005330 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	0018      	movs	r0, r3
 8000282:	f005 f809 	bl	8005298 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028e:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	2380      	movs	r3, #128	@ 0x80
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f5      	bcc.n	8000292 <capTouch_Init+0x76>

    // Determines the number of times to try each initialization step
	uint8_t numTries = 3;
 80002a6:	231f      	movs	r3, #31
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2203      	movs	r2, #3
 80002ac:	701a      	strb	r2, [r3, #0]

	// Verify device ID
		uint8_t deviceIDRet = 0x00;
 80002ae:	2317      	movs	r3, #23
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]

		while(numTries != 0) {
 80002b6:	e014      	b.n	80002e2 <capTouch_Init+0xc6>
			halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b8:	251e      	movs	r5, #30
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	2317      	movs	r3, #23
 80002be:	18fa      	adds	r2, r7, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ad 	bl	8000424 <capTouch_ReadDeviceID>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d00b      	beq.n	80002ee <capTouch_Init+0xd2>
				break;

			numTries--;
 80002d6:	211f      	movs	r1, #31
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	3a01      	subs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80002e2:	231f      	movs	r3, #31
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1e5      	bne.n	80002b8 <capTouch_Init+0x9c>
 80002ec:	e000      	b.n	80002f0 <capTouch_Init+0xd4>
				break;
 80002ee:	46c0      	nop			@ (mov r8, r8)
		}
		if(deviceIDRet != DEVICE_ID || numTries == 0) {
 80002f0:	2317      	movs	r3, #23
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80002f8:	d104      	bne.n	8000304 <capTouch_Init+0xe8>
 80002fa:	231f      	movs	r3, #31
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <capTouch_Init+0xec>
			return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e089      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->deviceID = deviceIDRet;
 8000308:	2317      	movs	r3, #23
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	739a      	strb	r2, [r3, #14]

		numTries = 3;
 8000312:	231f      	movs	r3, #31
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	2203      	movs	r2, #3
 8000318:	701a      	strb	r2, [r3, #0]

	// Force Device Recalibration
		while(numTries != 0) {
 800031a:	e019      	b.n	8000350 <capTouch_Init+0x134>
			halRet = capTouch_Recalibrate(capTouch);
 800031c:	231e      	movs	r3, #30
 800031e:	18fc      	adds	r4, r7, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	0018      	movs	r0, r3
 8000324:	f000 f8c0 	bl	80004a8 <capTouch_Recalibrate>
 8000328:	0003      	movs	r3, r0
 800032a:	7023      	strb	r3, [r4, #0]

			// Wait until calibration sequence completes
			while(capTouch_checkCal(capTouch)) {}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f8db 	bl	80004ec <capTouch_checkCal>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d1f9      	bne.n	800032e <capTouch_Init+0x112>

			if (halRet == HAL_OK)
 800033a:	231e      	movs	r3, #30
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00b      	beq.n	800035c <capTouch_Init+0x140>
				break;

			numTries--;
 8000344:	211f      	movs	r1, #31
 8000346:	187b      	adds	r3, r7, r1
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	187b      	adds	r3, r7, r1
 800034c:	3a01      	subs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 8000350:	231f      	movs	r3, #31
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1e0      	bne.n	800031c <capTouch_Init+0x100>
 800035a:	e000      	b.n	800035e <capTouch_Init+0x142>
				break;
 800035c:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 800035e:	231f      	movs	r3, #31
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d101      	bne.n	800036c <capTouch_Init+0x150>
			return 2;
 8000368:	2302      	movs	r3, #2
 800036a:	e057      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 800036c:	231f      	movs	r3, #31
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2203      	movs	r2, #3
 8000372:	701a      	strb	r2, [r3, #0]

	// Get initial reading of channels
		while(numTries != 0) {
 8000374:	e011      	b.n	800039a <capTouch_Init+0x17e>

			halRet = capTouch_readChannels(capTouch);
 8000376:	251e      	movs	r5, #30
 8000378:	197c      	adds	r4, r7, r5
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	0018      	movs	r0, r3
 800037e:	f000 f8f9 	bl	8000574 <capTouch_readChannels>
 8000382:	0003      	movs	r3, r0
 8000384:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 8000386:	197b      	adds	r3, r7, r5
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <capTouch_Init+0x18a>
				break;

			numTries--;
 800038e:	211f      	movs	r1, #31
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	3a01      	subs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 800039a:	231f      	movs	r3, #31
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e8      	bne.n	8000376 <capTouch_Init+0x15a>
 80003a4:	e000      	b.n	80003a8 <capTouch_Init+0x18c>
				break;
 80003a6:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003a8:	231f      	movs	r3, #31
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <capTouch_Init+0x19a>
			return 3;
 80003b2:	2303      	movs	r3, #3
 80003b4:	e032      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 80003b6:	231f      	movs	r3, #31
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2203      	movs	r2, #3
 80003bc:	701a      	strb	r2, [r3, #0]

	// Enable keys based on passed initialization byte
		while(numTries != 0) {
 80003be:	e015      	b.n	80003ec <capTouch_Init+0x1d0>

			halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80003c0:	251e      	movs	r5, #30
 80003c2:	197c      	adds	r4, r7, r5
 80003c4:	2334      	movs	r3, #52	@ 0x34
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f914 	bl	80005fc <capTouch_enableKeys>
 80003d4:	0003      	movs	r3, r0
 80003d6:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00b      	beq.n	80003f8 <capTouch_Init+0x1dc>
				break;

			numTries--;
 80003e0:	211f      	movs	r1, #31
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	3a01      	subs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80003ec:	231f      	movs	r3, #31
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1e4      	bne.n	80003c0 <capTouch_Init+0x1a4>
 80003f6:	e000      	b.n	80003fa <capTouch_Init+0x1de>
				break;
 80003f8:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003fa:	231f      	movs	r3, #31
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <capTouch_Init+0x1ec>
			return 4;
 8000404:	2304      	movs	r3, #4
 8000406:	e009      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->keys = keyEnFlags;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2234      	movs	r2, #52	@ 0x34
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	73da      	strb	r2, [r3, #15]

		numTries = 3;
 8000412:	231f      	movs	r3, #31
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]

	return 0;
 800041a:	2300      	movs	r3, #0

}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	b008      	add	sp, #32
 8000422:	bdb0      	pop	{r4, r5, r7, pc}

08000424 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 800042e:	230e      	movs	r3, #14
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000436:	250f      	movs	r5, #15
 8000438:	197b      	adds	r3, r7, r5
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <capTouch_ReadDeviceID+0x80>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f002 fb8d 	bl	8002b78 <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000462:	197b      	adds	r3, r7, r5
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 800046a:	197b      	adds	r3, r7, r5
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	e014      	b.n	800049a <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	250f      	movs	r5, #15
 8000476:	197c      	adds	r4, r7, r5
 8000478:	260e      	movs	r6, #14
 800047a:	19ba      	adds	r2, r7, r6
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2136      	movs	r1, #54	@ 0x36
 8000486:	f002 fca1 	bl	8002dcc <HAL_I2C_Master_Receive>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000496:	197b      	adds	r3, r7, r5
 8000498:	781b      	ldrb	r3, [r3, #0]

}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b005      	add	sp, #20
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	08006348 	.word	0x08006348

080004a8 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b0:	210f      	movs	r1, #15
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 80004b8:	260c      	movs	r6, #12
 80004ba:	19bb      	adds	r3, r7, r6
 80004bc:	22c8      	movs	r2, #200	@ 0xc8
 80004be:	4252      	negs	r2, r2
 80004c0:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	000d      	movs	r5, r1
 80004c8:	187c      	adds	r4, r7, r1
 80004ca:	19ba      	adds	r2, r7, r6
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2302      	movs	r3, #2
 80004d4:	2136      	movs	r1, #54	@ 0x36
 80004d6:	f002 fb4f 	bl	8002b78 <HAL_I2C_Master_Transmit>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]

}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b005      	add	sp, #20
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080004ec <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004f4:	210f      	movs	r1, #15
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80004fc:	230d      	movs	r3, #13
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 8000504:	260c      	movs	r6, #12
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <capTouch_checkCal+0x84>)
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	000d      	movs	r5, r1
 8000514:	187c      	adds	r4, r7, r1
 8000516:	19ba      	adds	r2, r7, r6
 8000518:	2301      	movs	r3, #1
 800051a:	425b      	negs	r3, r3
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2136      	movs	r1, #54	@ 0x36
 8000522:	f002 fb29 	bl	8002b78 <HAL_I2C_Master_Transmit>
 8000526:	0003      	movs	r3, r0
 8000528:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <capTouch_checkCal+0x4c>
		return halRet;
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	e016      	b.n	8000566 <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230f      	movs	r3, #15
 800053e:	18fc      	adds	r4, r7, r3
 8000540:	250d      	movs	r5, #13
 8000542:	197a      	adds	r2, r7, r5
 8000544:	2301      	movs	r3, #1
 8000546:	425b      	negs	r3, r3
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	2136      	movs	r1, #54	@ 0x36
 800054e:	f002 fc3d 	bl	8002dcc <HAL_I2C_Master_Receive>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000556:	197b      	adds	r3, r7, r5
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	210e      	movs	r1, #14
 800055c:	187b      	adds	r3, r7, r1
 800055e:	09d2      	lsrs	r2, r2, #7
 8000560:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	781b      	ldrb	r3, [r3, #0]

}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b005      	add	sp, #20
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	0800634c 	.word	0x0800634c

08000574 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800057c:	210f      	movs	r1, #15
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000584:	230e      	movs	r3, #14
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800058c:	260c      	movs	r6, #12
 800058e:	19bb      	adds	r3, r7, r6
 8000590:	4a19      	ldr	r2, [pc, #100]	@ (80005f8 <capTouch_readChannels+0x84>)
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	000d      	movs	r5, r1
 800059c:	187c      	adds	r4, r7, r1
 800059e:	19ba      	adds	r2, r7, r6
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	2136      	movs	r1, #54	@ 0x36
 80005aa:	f002 fae5 	bl	8002b78 <HAL_I2C_Master_Transmit>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80005b2:	197b      	adds	r3, r7, r5
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <capTouch_readChannels+0x4c>
		return halRet;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e017      	b.n	80005f0 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	250f      	movs	r5, #15
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	260e      	movs	r6, #14
 80005ca:	19ba      	adds	r2, r7, r6
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2136      	movs	r1, #54	@ 0x36
 80005d6:	f002 fbf9 	bl	8002dcc <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 80005de:	19bb      	adds	r3, r7, r6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	227f      	movs	r2, #127	@ 0x7f
 80005e4:	4013      	ands	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	741a      	strb	r2, [r3, #16]

	return halRet;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]

}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b005      	add	sp, #20
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	08006350 	.word	0x08006350

080005fc <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	b08b      	sub	sp, #44	@ 0x2c
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	000a      	movs	r2, r1
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800060a:	241e      	movs	r4, #30
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000612:	2314      	movs	r3, #20
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	4a39      	ldr	r2, [pc, #228]	@ (80006fc <capTouch_enableKeys+0x100>)
 8000618:	6811      	ldr	r1, [r2, #0]
 800061a:	6019      	str	r1, [r3, #0]
 800061c:	8891      	ldrh	r1, [r2, #4]
 800061e:	8099      	strh	r1, [r3, #4]
 8000620:	7992      	ldrb	r2, [r2, #6]
 8000622:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000624:	260c      	movs	r6, #12
 8000626:	19bb      	adds	r3, r7, r6
 8000628:	4a35      	ldr	r2, [pc, #212]	@ (8000700 <capTouch_enableKeys+0x104>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	6019      	str	r1, [r3, #0]
 800062e:	8891      	ldrh	r1, [r2, #4]
 8000630:	8099      	strh	r1, [r3, #4]
 8000632:	7992      	ldrb	r2, [r2, #6]
 8000634:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	0025      	movs	r5, r4
 800063c:	193c      	adds	r4, r7, r4
 800063e:	19ba      	adds	r2, r7, r6
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	2136      	movs	r1, #54	@ 0x36
 800064a:	f002 fa95 	bl	8002b78 <HAL_I2C_Master_Transmit>
 800064e:	0003      	movs	r3, r0
 8000650:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000652:	197b      	adds	r3, r7, r5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <capTouch_enableKeys+0x64>
		return halRet;
 800065a:	197b      	adds	r3, r7, r5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e049      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	251e      	movs	r5, #30
 8000666:	197c      	adds	r4, r7, r5
 8000668:	2314      	movs	r3, #20
 800066a:	18fa      	adds	r2, r7, r3
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2307      	movs	r3, #7
 8000674:	2136      	movs	r1, #54	@ 0x36
 8000676:	f002 fba9 	bl	8002dcc <HAL_I2C_Master_Receive>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800067e:	197b      	adds	r3, r7, r5
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <capTouch_enableKeys+0x90>
		return halRet;
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	e033      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800068c:	231f      	movs	r3, #31
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e01c      	b.n	80006d0 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 8000696:	201f      	movs	r0, #31
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2414      	movs	r4, #20
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	5cd3      	ldrb	r3, [r2, r3]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	7819      	ldrb	r1, [r3, #0]
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4119      	asrs	r1, r3
 80006b0:	000b      	movs	r3, r1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	400b      	ands	r3, r1
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	434a      	muls	r2, r1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 80006c6:	183b      	adds	r3, r7, r0
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	3201      	adds	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	231f      	movs	r3, #31
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d9dd      	bls.n	8000696 <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 80006da:	251e      	movs	r5, #30
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	2314      	movs	r3, #20
 80006e0:	18fa      	adds	r2, r7, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f80c 	bl	8000704 <capTouch_SetAveragingFactor>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]

}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	@ 0x24
 80006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fc:	08006354 	.word	0x08006354
 8000700:	0800635c 	.word	0x0800635c

08000704 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800070e:	241e      	movs	r4, #30
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000716:	2314      	movs	r3, #20
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	4a5d      	ldr	r2, [pc, #372]	@ (8000890 <capTouch_SetAveragingFactor+0x18c>)
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	6019      	str	r1, [r3, #0]
 8000720:	8891      	ldrh	r1, [r2, #4]
 8000722:	8099      	strh	r1, [r3, #4]
 8000724:	7992      	ldrb	r2, [r2, #6]
 8000726:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000728:	260c      	movs	r6, #12
 800072a:	19bb      	adds	r3, r7, r6
 800072c:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <capTouch_SetAveragingFactor+0x190>)
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	6019      	str	r1, [r3, #0]
 8000732:	8891      	ldrh	r1, [r2, #4]
 8000734:	8099      	strh	r1, [r3, #4]
 8000736:	7992      	ldrb	r2, [r2, #6]
 8000738:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	0025      	movs	r5, r4
 8000740:	193c      	adds	r4, r7, r4
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2136      	movs	r1, #54	@ 0x36
 800074e:	f002 fa13 	bl	8002b78 <HAL_I2C_Master_Transmit>
 8000752:	0003      	movs	r3, r0
 8000754:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000756:	197b      	adds	r3, r7, r5
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 800075e:	197b      	adds	r3, r7, r5
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	e090      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	251e      	movs	r5, #30
 800076a:	197c      	adds	r4, r7, r5
 800076c:	2314      	movs	r3, #20
 800076e:	18fa      	adds	r2, r7, r3
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2307      	movs	r3, #7
 8000778:	2136      	movs	r1, #54	@ 0x36
 800077a:	f002 fb27 	bl	8002dcc <HAL_I2C_Master_Receive>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000782:	197b      	adds	r3, r7, r5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e07a      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000790:	2308      	movs	r3, #8
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000798:	231d      	movs	r3, #29
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80007a0:	231f      	movs	r3, #31
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e041      	b.n	800082e <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80007aa:	241f      	movs	r4, #31
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2214      	movs	r2, #20
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	201d      	movs	r0, #29
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	2103      	movs	r1, #3
 80007bc:	400a      	ands	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	251c      	movs	r5, #28
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	1839      	adds	r1, r7, r0
 80007d6:	197a      	adds	r2, r7, r5
 80007d8:	7809      	ldrb	r1, [r1, #0]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	220c      	movs	r2, #12
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	5cd2      	ldrb	r2, [r2, r3]
 80007ea:	2108      	movs	r1, #8
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	251e      	movs	r5, #30
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	187a      	adds	r2, r7, r1
 8000802:	2301      	movs	r3, #1
 8000804:	425b      	negs	r3, r3
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2136      	movs	r1, #54	@ 0x36
 800080c:	f002 f9b4 	bl	8002b78 <HAL_I2C_Master_Transmit>
 8000810:	0003      	movs	r3, r0
 8000812:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 800081c:	197b      	adds	r3, r7, r5
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e031      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 8000822:	211f      	movs	r1, #31
 8000824:	187b      	adds	r3, r7, r1
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	3201      	adds	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	231f      	movs	r3, #31
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d9b8      	bls.n	80007aa <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	251e      	movs	r5, #30
 800083e:	197c      	adds	r4, r7, r5
 8000840:	230c      	movs	r3, #12
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2136      	movs	r1, #54	@ 0x36
 800084e:	f002 f993 	bl	8002b78 <HAL_I2C_Master_Transmit>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 800085e:	197b      	adds	r3, r7, r5
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e010      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	251e      	movs	r5, #30
 800086a:	197c      	adds	r4, r7, r5
 800086c:	2314      	movs	r3, #20
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2307      	movs	r3, #7
 8000878:	2136      	movs	r1, #54	@ 0x36
 800087a:	f002 faa7 	bl	8002dcc <HAL_I2C_Master_Receive>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781b      	ldrb	r3, [r3, #0]

}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	@ 0x24
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	08006354 	.word	0x08006354
 8000894:	0800635c 	.word	0x0800635c

08000898 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008a2:	231e      	movs	r3, #30
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80008aa:	2314      	movs	r3, #20
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <capTouch_SetDetectionIntegrator+0xdc>)
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	6019      	str	r1, [r3, #0]
 80008b4:	8891      	ldrh	r1, [r2, #4]
 80008b6:	8099      	strh	r1, [r3, #4]
 80008b8:	7992      	ldrb	r2, [r2, #6]
 80008ba:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 80008bc:	2310      	movs	r3, #16
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80008c4:	231f      	movs	r3, #31
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e022      	b.n	8000914 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 80008ce:	251f      	movs	r5, #31
 80008d0:	197b      	adds	r3, r7, r5
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2214      	movs	r2, #20
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	5cd2      	ldrb	r2, [r2, r3]
 80008da:	2110      	movs	r1, #16
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	231e      	movs	r3, #30
 80008f4:	18fc      	adds	r4, r7, r3
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2136      	movs	r1, #54	@ 0x36
 8000902:	f002 f939 	bl	8002b78 <HAL_I2C_Master_Transmit>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 800090a:	197b      	adds	r3, r7, r5
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	197b      	adds	r3, r7, r5
 8000910:	3201      	adds	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	231f      	movs	r3, #31
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d9d7      	bls.n	80008ce <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800091e:	2608      	movs	r6, #8
 8000920:	19bb      	adds	r3, r7, r6
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <capTouch_SetDetectionIntegrator+0xe0>)
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	6019      	str	r1, [r3, #0]
 8000928:	8891      	ldrh	r1, [r2, #4]
 800092a:	8099      	strh	r1, [r3, #4]
 800092c:	7992      	ldrb	r2, [r2, #6]
 800092e:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	251e      	movs	r5, #30
 8000936:	197c      	adds	r4, r7, r5
 8000938:	2314      	movs	r3, #20
 800093a:	18fa      	adds	r2, r7, r3
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2136      	movs	r1, #54	@ 0x36
 8000946:	f002 f917 	bl	8002b78 <HAL_I2C_Master_Transmit>
 800094a:	0003      	movs	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	197c      	adds	r4, r7, r5
 8000954:	19ba      	adds	r2, r7, r6
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2307      	movs	r3, #7
 800095e:	2136      	movs	r1, #54	@ 0x36
 8000960:	f002 fa34 	bl	8002dcc <HAL_I2C_Master_Receive>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000968:	197b      	adds	r3, r7, r5
 800096a:	781b      	ldrb	r3, [r3, #0]

}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	@ 0x24
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	08006364 	.word	0x08006364
 8000978:	08006354 	.word	0x08006354

0800097c <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


HAL_StatusTypeDef initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b09a      	sub	sp, #104	@ 0x68
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000988:	2567      	movs	r5, #103	@ 0x67
 800098a:	197b      	adds	r3, r7, r5
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 8000990:	243c      	movs	r4, #60	@ 0x3c
 8000992:	193b      	adds	r3, r7, r4
 8000994:	0018      	movs	r0, r3
 8000996:	2328      	movs	r3, #40	@ 0x28
 8000998:	001a      	movs	r2, r3
 800099a:	2100      	movs	r1, #0
 800099c:	f005 fc92 	bl	80062c4 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	781a      	ldrb	r2, [r3, #0]
 80009a4:	0021      	movs	r1, r4
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	789a      	ldrb	r2, [r3, #2]
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	78da      	ldrb	r2, [r3, #3]
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	78da      	ldrb	r2, [r3, #3]
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009d6:	0008      	movs	r0, r1
 80009d8:	183b      	adds	r3, r7, r0
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009de:	183b      	adds	r3, r7, r0
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80009e4:	183b      	adds	r3, r7, r0
 80009e6:	4a19      	ldr	r2, [pc, #100]	@ (8000a4c <initRTCInternalAlarm+0xd0>)
 80009e8:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009ea:	183b      	adds	r3, r7, r0
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009f0:	183b      	adds	r3, r7, r0
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 80009f6:	183b      	adds	r3, r7, r0
 80009f8:	2220      	movs	r2, #32
 80009fa:	2101      	movs	r1, #1
 80009fc:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 80009fe:	0001      	movs	r1, r0
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2280      	movs	r2, #128	@ 0x80
 8000a04:	0052      	lsls	r2, r2, #1
 8000a06:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8000a08:	197c      	adds	r4, r7, r5
 8000a0a:	1879      	adds	r1, r7, r1
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f003 ffc9 	bl	80049a8 <HAL_RTC_SetAlarm_IT>
 8000a16:	0003      	movs	r3, r0
 8000a18:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000a1a:	197b      	adds	r3, r7, r5
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <initRTCInternalAlarm+0xac>
		return halRet;
 8000a22:	197b      	adds	r3, r7, r5
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	e00d      	b.n	8000a44 <initRTCInternalAlarm+0xc8>

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8000a28:	2567      	movs	r5, #103	@ 0x67
 8000a2a:	197c      	adds	r4, r7, r5
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	005a      	lsls	r2, r3, #1
 8000a30:	2314      	movs	r3, #20
 8000a32:	18f9      	adds	r1, r7, r3
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	2300      	movs	r3, #0
 8000a38:	f004 f8f6 	bl	8004c28 <HAL_RTC_GetAlarm>
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	7023      	strb	r3, [r4, #0]
	return halRet;
 8000a40:	197b      	adds	r3, r7, r5
 8000a42:	781b      	ldrb	r3, [r3, #0]

}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b01a      	add	sp, #104	@ 0x68
 8000a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a4c:	80800080 	.word	0x80800080

08000a50 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2200      	movs	r2, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f003 fe64 	bl	8004730 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f003 ff4c 	bl	800490c <HAL_RTC_GetDate>

}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b004      	add	sp, #16
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	b08d      	sub	sp, #52	@ 0x34
 8000a80:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a82:	f001 fc81 	bl	8002388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f000 f95d 	bl	8000d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f000 fb63 	bl	8001154 <MX_GPIO_Init>
  MX_RTC_Init();
 8000a8e:	f000 fa0d 	bl	8000eac <MX_RTC_Init>
  MX_I2C1_Init();
 8000a92:	f000 f9cb 	bl	8000e2c <MX_I2C1_Init>
  MX_TIM14_Init();
 8000a96:	f000 fafd 	bl	8001094 <MX_TIM14_Init>
  MX_TIM2_Init();
 8000a9a:	f000 fa9b 	bl	8000fd4 <MX_TIM2_Init>
  MX_TIM16_Init();
 8000a9e:	f000 fb1f 	bl	80010e0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // HAL Status handle for error-checking
  HAL_StatusTypeDef halRet = HAL_OK;
 8000aa2:	2517      	movs	r5, #23
 8000aa4:	197b      	adds	r3, r7, r5
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]

  // Set Smooth Calibration Value
  halRet = HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 8000aaa:	4b92      	ldr	r3, [pc, #584]	@ (8000cf4 <main+0x278>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	197c      	adds	r4, r7, r5
 8000ab0:	2280      	movs	r2, #128	@ 0x80
 8000ab2:	01d1      	lsls	r1, r2, #7
 8000ab4:	4890      	ldr	r0, [pc, #576]	@ (8000cf8 <main+0x27c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f004 faab 	bl	8005012 <HAL_RTCEx_SetSmoothCalib>
 8000abc:	0003      	movs	r3, r0
 8000abe:	7023      	strb	r3, [r4, #0]
    							RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);
  if(halRet != HAL_OK) {
 8000ac0:	197b      	adds	r3, r7, r5
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <main+0x50>
	  // Failure to talk to RTC is a hard failure
	  dispFailure();
 8000ac8:	f001 f87a 	bl	8001bc0 <dispFailure>
  }

  // Init the internal RTC alarm time to track the current time
  halRet = initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 8000acc:	2517      	movs	r5, #23
 8000ace:	197c      	adds	r4, r7, r5
 8000ad0:	4a8a      	ldr	r2, [pc, #552]	@ (8000cfc <main+0x280>)
 8000ad2:	498b      	ldr	r1, [pc, #556]	@ (8000d00 <main+0x284>)
 8000ad4:	4b88      	ldr	r3, [pc, #544]	@ (8000cf8 <main+0x27c>)
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f7ff ff50 	bl	800097c <initRTCInternalAlarm>
 8000adc:	0003      	movs	r3, r0
 8000ade:	7023      	strb	r3, [r4, #0]
  if(halRet != HAL_OK) {
 8000ae0:	197b      	adds	r3, r7, r5
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <main+0x70>
  	  // Failure to initialize RTC alarm is a hard failure
  	  dispFailure();
 8000ae8:	f001 f86a 	bl	8001bc0 <dispFailure>
    }

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000aec:	2380      	movs	r3, #128	@ 0x80
 8000aee:	009c      	lsls	r4, r3, #2
 8000af0:	2380      	movs	r3, #128	@ 0x80
 8000af2:	00dd      	lsls	r5, r3, #3
 8000af4:	2680      	movs	r6, #128	@ 0x80
 8000af6:	2340      	movs	r3, #64	@ 0x40
 8000af8:	469c      	mov	ip, r3
 8000afa:	2380      	movs	r3, #128	@ 0x80
 8000afc:	011a      	lsls	r2, r3, #4
 8000afe:	4b81      	ldr	r3, [pc, #516]	@ (8000d04 <main+0x288>)
 8000b00:	6819      	ldr	r1, [r3, #0]
 8000b02:	4b81      	ldr	r3, [pc, #516]	@ (8000d08 <main+0x28c>)
 8000b04:	6818      	ldr	r0, [r3, #0]
 8000b06:	4b81      	ldr	r3, [pc, #516]	@ (8000d0c <main+0x290>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	9304      	str	r3, [sp, #16]
 8000b0c:	9003      	str	r0, [sp, #12]
 8000b0e:	9102      	str	r1, [sp, #8]
 8000b10:	4b7f      	ldr	r3, [pc, #508]	@ (8000d10 <main+0x294>)
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	9200      	str	r2, [sp, #0]
 8000b16:	4663      	mov	r3, ip
 8000b18:	0032      	movs	r2, r6
 8000b1a:	0029      	movs	r1, r5
 8000b1c:	0020      	movs	r0, r4
 8000b1e:	f001 f8c1 	bl	8001ca4 <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);

    // Set to max brightness
    sevSeg_setIntensity(sevSeg_intensityDuty[2]);
 8000b22:	234b      	movs	r3, #75	@ 0x4b
 8000b24:	0018      	movs	r0, r3
 8000b26:	f001 f9f1 	bl	8001f0c <sevSeg_setIntensity>

	halRet = updateAndDisplayTime();
 8000b2a:	2517      	movs	r5, #23
 8000b2c:	197c      	adds	r4, r7, r5
 8000b2e:	f000 fbf3 	bl	8001318 <updateAndDisplayTime>
 8000b32:	0003      	movs	r3, r0
 8000b34:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000b36:	197b      	adds	r3, r7, r5
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <main+0xc6>
	  // Failure to display current time is a hard failure
	  dispFailure();
 8000b3e:	f001 f83f 	bl	8001bc0 <dispFailure>
    /*
     * Initialize capacitive touch sensor
     */

	// Used to separate return initializations into critical and non-critical errors.
	uint8_t initRet = 0;
 8000b42:	2116      	movs	r1, #22
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]

    initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 8000b4a:	4b6e      	ldr	r3, [pc, #440]	@ (8000d04 <main+0x288>)
 8000b4c:	681d      	ldr	r5, [r3, #0]
 8000b4e:	2380      	movs	r3, #128	@ 0x80
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4a70      	ldr	r2, [pc, #448]	@ (8000d14 <main+0x298>)
 8000b54:	7812      	ldrb	r2, [r2, #0]
 8000b56:	187c      	adds	r4, r7, r1
 8000b58:	4e6f      	ldr	r6, [pc, #444]	@ (8000d18 <main+0x29c>)
 8000b5a:	4970      	ldr	r1, [pc, #448]	@ (8000d1c <main+0x2a0>)
 8000b5c:	4870      	ldr	r0, [pc, #448]	@ (8000d20 <main+0x2a4>)
 8000b5e:	9201      	str	r2, [sp, #4]
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	0033      	movs	r3, r6
 8000b64:	002a      	movs	r2, r5
 8000b66:	f7ff fb59 	bl	800021c <capTouch_Init>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	7023      	strb	r3, [r4, #0]
    						&capTouchResetPort, capTouchResetPin, capTouchChannels);
    if( (initRet == 1) || (initRet == 3) || (initRet == 4)) {
 8000b6e:	2116      	movs	r1, #22
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d007      	beq.n	8000b88 <main+0x10c>
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d003      	beq.n	8000b88 <main+0x10c>
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	d102      	bne.n	8000b8e <main+0x112>
    	/* Critical Errors:
    	 * 1 = Failure to read correct device ID
    	 * 2 = Failure to read Keys
    	 * 3 = Failure to enable keys
    	 */
    	dispFailure();
 8000b88:	f001 f81a 	bl	8001bc0 <dispFailure>
 8000b8c:	e00d      	b.n	8000baa <main+0x12e>
    }
    else if (initRet == 2) {
 8000b8e:	2316      	movs	r3, #22
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d102      	bne.n	8000b9e <main+0x122>
    	/*
    	 * Non-critical Errors:
    	 * 2 = Failure to Recalibrate
    	 */
    	dispFault();
 8000b98:	f001 f804 	bl	8001ba4 <dispFault>
 8000b9c:	e005      	b.n	8000baa <main+0x12e>
    }
    else if(initRet == 0) {
 8000b9e:	2316      	movs	r3, #22
 8000ba0:	18fb      	adds	r3, r7, r3
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d100      	bne.n	8000baa <main+0x12e>
    	// initRet = 0 = all is well
    	__NOP();
 8000ba8:	46c0      	nop			@ (mov r8, r8)
    }

    // Set averaging factor
    uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 8000baa:	4b5e      	ldr	r3, [pc, #376]	@ (8000d24 <main+0x2a8>)
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	210c      	movs	r1, #12
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	701a      	strb	r2, [r3, #0]
 8000bb4:	4b5b      	ldr	r3, [pc, #364]	@ (8000d24 <main+0x2a8>)
 8000bb6:	781a      	ldrb	r2, [r3, #0]
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	705a      	strb	r2, [r3, #1]
 8000bbc:	4b59      	ldr	r3, [pc, #356]	@ (8000d24 <main+0x2a8>)
 8000bbe:	781a      	ldrb	r2, [r3, #0]
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	709a      	strb	r2, [r3, #2]
 8000bc4:	4b57      	ldr	r3, [pc, #348]	@ (8000d24 <main+0x2a8>)
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	70da      	strb	r2, [r3, #3]
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	711a      	strb	r2, [r3, #4]
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	715a      	strb	r2, [r3, #5]
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2200      	movs	r2, #0
 8000bdc:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000bde:	2517      	movs	r5, #23
 8000be0:	197c      	adds	r4, r7, r5
 8000be2:	187a      	adds	r2, r7, r1
 8000be4:	4b4e      	ldr	r3, [pc, #312]	@ (8000d20 <main+0x2a4>)
 8000be6:	0011      	movs	r1, r2
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff fd8b 	bl	8000704 <capTouch_SetAveragingFactor>
 8000bee:	0003      	movs	r3, r0
 8000bf0:	7023      	strb	r3, [r4, #0]

    if(halRet != HAL_OK) {
 8000bf2:	197b      	adds	r3, r7, r5
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <main+0x182>
    	// This is sensitivity-setting and a non-critical error
    	dispFault();
 8000bfa:	f000 ffd3 	bl	8001ba4 <dispFault>
    }

    // Set detection integration factors
    uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 8000bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8000d28 <main+0x2ac>)
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	4b48      	ldr	r3, [pc, #288]	@ (8000d28 <main+0x2ac>)
 8000c08:	781a      	ldrb	r2, [r3, #0]
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	705a      	strb	r2, [r3, #1]
 8000c0e:	4b46      	ldr	r3, [pc, #280]	@ (8000d28 <main+0x2ac>)
 8000c10:	781a      	ldrb	r2, [r3, #0]
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	709a      	strb	r2, [r3, #2]
 8000c16:	4b44      	ldr	r3, [pc, #272]	@ (8000d28 <main+0x2ac>)
 8000c18:	781a      	ldrb	r2, [r3, #0]
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	70da      	strb	r2, [r3, #3]
 8000c1e:	4b42      	ldr	r3, [pc, #264]	@ (8000d28 <main+0x2ac>)
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	711a      	strb	r2, [r3, #4]
 8000c26:	4b40      	ldr	r3, [pc, #256]	@ (8000d28 <main+0x2ac>)
 8000c28:	781a      	ldrb	r2, [r3, #0]
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	715a      	strb	r2, [r3, #5]
 8000c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d28 <main+0x2ac>)
 8000c30:	781a      	ldrb	r2, [r3, #0]
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 8000c36:	2517      	movs	r5, #23
 8000c38:	197c      	adds	r4, r7, r5
 8000c3a:	1d3a      	adds	r2, r7, #4
 8000c3c:	4b38      	ldr	r3, [pc, #224]	@ (8000d20 <main+0x2a4>)
 8000c3e:	0011      	movs	r1, r2
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff fe29 	bl	8000898 <capTouch_SetDetectionIntegrator>
 8000c46:	0003      	movs	r3, r0
 8000c48:	7023      	strb	r3, [r4, #0]
    if(halRet != HAL_OK) {
 8000c4a:	197b      	adds	r3, r7, r5
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <main+0x1da>
    	// This is sensitivity-setting and a non-critical error
		dispFault();
 8000c52:	f000 ffa7 	bl	8001ba4 <dispFault>
    }

    userAlarmToggle = false;			//Default to off
 8000c56:	4b35      	ldr	r3, [pc, #212]	@ (8000d2c <main+0x2b0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
     * initialize the alarm time to a default value.
     *
     * Else, initialize to whatever is stored in backup registers.
     */

    if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 8000c5c:	4b34      	ldr	r3, [pc, #208]	@ (8000d30 <main+0x2b4>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b25      	ldr	r3, [pc, #148]	@ (8000cf8 <main+0x27c>)
 8000c62:	0011      	movs	r1, r2
 8000c64:	0018      	movs	r0, r3
 8000c66:	f004 faa4 	bl	80051b2 <HAL_RTCEx_BKUPRead>
 8000c6a:	0003      	movs	r3, r0
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d11c      	bne.n	8000cac <main+0x230>

    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 8000c72:	4b30      	ldr	r3, [pc, #192]	@ (8000d34 <main+0x2b8>)
 8000c74:	6819      	ldr	r1, [r3, #0]
 8000c76:	4b20      	ldr	r3, [pc, #128]	@ (8000cf8 <main+0x27c>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f004 fa7c 	bl	8005178 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 8000c80:	4b2d      	ldr	r3, [pc, #180]	@ (8000d38 <main+0x2bc>)
 8000c82:	6819      	ldr	r1, [r3, #0]
 8000c84:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <main+0x27c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f004 fa75 	bl	8005178 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 8000c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d3c <main+0x2c0>)
 8000c90:	6819      	ldr	r1, [r3, #0]
 8000c92:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <main+0x27c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	0018      	movs	r0, r3
 8000c98:	f004 fa6e 	bl	8005178 <HAL_RTCEx_BKUPWrite>

    	// Write backup register with a non-zero value to signify that it has been initialized before
    	HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8000c9c:	4b24      	ldr	r3, [pc, #144]	@ (8000d30 <main+0x2b4>)
 8000c9e:	6819      	ldr	r1, [r3, #0]
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	425a      	negs	r2, r3
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <main+0x27c>)
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f004 fa66 	bl	8005178 <HAL_RTCEx_BKUPWrite>

    }

	userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8000cac:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <main+0x2b8>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <main+0x27c>)
 8000cb2:	0011      	movs	r1, r2
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f004 fa7c 	bl	80051b2 <HAL_RTCEx_BKUPRead>
 8000cba:	0003      	movs	r3, r0
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b20      	ldr	r3, [pc, #128]	@ (8000d40 <main+0x2c4>)
 8000cc0:	701a      	strb	r2, [r3, #0]
	userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d38 <main+0x2bc>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <main+0x27c>)
 8000cc8:	0011      	movs	r1, r2
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f004 fa71 	bl	80051b2 <HAL_RTCEx_BKUPRead>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d40 <main+0x2c4>)
 8000cd6:	705a      	strb	r2, [r3, #1]
	userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 8000cd8:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <main+0x2c0>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <main+0x27c>)
 8000cde:	0011      	movs	r1, r2
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f004 fa66 	bl	80051b2 <HAL_RTCEx_BKUPRead>
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <main+0x2c4>)
 8000cec:	70da      	strb	r2, [r3, #3]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	e7fd      	b.n	8000cee <main+0x272>
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	20000030 	.word	0x20000030
 8000cf8:	20000118 	.word	0x20000118
 8000cfc:	200000a8 	.word	0x200000a8
 8000d00:	20000094 	.word	0x20000094
 8000d04:	20000048 	.word	0x20000048
 8000d08:	20000044 	.word	0x20000044
 8000d0c:	20000034 	.word	0x20000034
 8000d10:	20000018 	.word	0x20000018
 8000d14:	2000000c 	.word	0x2000000c
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	200000c4 	.word	0x200000c4
 8000d20:	2000022c 	.word	0x2000022c
 8000d24:	2000000d 	.word	0x2000000d
 8000d28:	2000000e 	.word	0x2000000e
 8000d2c:	20000091 	.word	0x20000091
 8000d30:	20000040 	.word	0x20000040
 8000d34:	200000c0 	.word	0x200000c0
 8000d38:	20000038 	.word	0x20000038
 8000d3c:	2000003c 	.word	0x2000003c
 8000d40:	200000ac 	.word	0x200000ac

08000d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b093      	sub	sp, #76	@ 0x4c
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	2410      	movs	r4, #16
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	0018      	movs	r0, r3
 8000d50:	2338      	movs	r3, #56	@ 0x38
 8000d52:	001a      	movs	r2, r3
 8000d54:	2100      	movs	r1, #0
 8000d56:	f005 fab5 	bl	80062c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5a:	003b      	movs	r3, r7
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	2310      	movs	r3, #16
 8000d60:	001a      	movs	r2, r3
 8000d62:	2100      	movs	r1, #0
 8000d64:	f005 faae 	bl	80062c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d68:	2380      	movs	r3, #128	@ 0x80
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f002 fcbf 	bl	80036f0 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d72:	f002 fc9f 	bl	80036b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 8000d76:	4b2c      	ldr	r3, [pc, #176]	@ (8000e28 <SystemClock_Config+0xe4>)
 8000d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d7a:	2218      	movs	r2, #24
 8000d7c:	4393      	bics	r3, r2
 8000d7e:	001a      	movs	r2, r3
 8000d80:	4b29      	ldr	r3, [pc, #164]	@ (8000e28 <SystemClock_Config+0xe4>)
 8000d82:	2108      	movs	r1, #8
 8000d84:	430a      	orrs	r2, r1
 8000d86:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	220e      	movs	r2, #14
 8000d8c:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	2201      	movs	r2, #1
 8000d92:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d94:	193b      	adds	r3, r7, r4
 8000d96:	2280      	movs	r2, #128	@ 0x80
 8000d98:	0052      	lsls	r2, r2, #1
 8000d9a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000d9c:	0021      	movs	r1, r4
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2240      	movs	r2, #64	@ 0x40
 8000da8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2201      	movs	r2, #1
 8000dae:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2202      	movs	r2, #2
 8000db4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2202      	movs	r2, #2
 8000dba:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2208      	movs	r2, #8
 8000dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2280      	movs	r2, #128	@ 0x80
 8000dcc:	0292      	lsls	r2, r2, #10
 8000dce:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	2280      	movs	r2, #128	@ 0x80
 8000dd4:	0492      	lsls	r2, r2, #18
 8000dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2280      	movs	r2, #128	@ 0x80
 8000ddc:	0592      	lsls	r2, r2, #22
 8000dde:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	0018      	movs	r0, r3
 8000de4:	f002 fcc4 	bl	8003770 <HAL_RCC_OscConfig>
 8000de8:	1e03      	subs	r3, r0, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000dec:	f000 ff54 	bl	8001c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df0:	003b      	movs	r3, r7
 8000df2:	2207      	movs	r2, #7
 8000df4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df6:	003b      	movs	r3, r7
 8000df8:	2202      	movs	r2, #2
 8000dfa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfc:	003b      	movs	r3, r7
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e02:	003b      	movs	r3, r7
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e08:	003b      	movs	r3, r7
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f002 ffc9 	bl	8003da4 <HAL_RCC_ClockConfig>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000e16:	f000 ff3f 	bl	8001c98 <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f003 fac6 	bl	80043ac <HAL_RCCEx_EnableLSCO>
}
 8000e20:	46c0      	nop			@ (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b013      	add	sp, #76	@ 0x4c
 8000e26:	bd90      	pop	{r4, r7, pc}
 8000e28:	40021000 	.word	0x40021000

08000e2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea4 <MX_I2C1_Init+0x78>)
 8000e34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea8 <MX_I2C1_Init+0x7c>)
 8000e3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e42:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e48:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e54:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f001 fddf 	bl	8002a2c <HAL_I2C_Init>
 8000e6e:	1e03      	subs	r3, r0, #0
 8000e70:	d001      	beq.n	8000e76 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e72:	f000 ff11 	bl	8001c98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e78:	2100      	movs	r1, #0
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f002 fb82 	bl	8003584 <HAL_I2CEx_ConfigAnalogFilter>
 8000e80:	1e03      	subs	r3, r0, #0
 8000e82:	d001      	beq.n	8000e88 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e84:	f000 ff08 	bl	8001c98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e88:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f002 fbc5 	bl	800361c <HAL_I2CEx_ConfigDigitalFilter>
 8000e92:	1e03      	subs	r3, r0, #0
 8000e94:	d001      	beq.n	8000e9a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e96:	f000 feff 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200000c4 	.word	0x200000c4
 8000ea4:	40005400 	.word	0x40005400
 8000ea8:	00602173 	.word	0x00602173

08000eac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08c      	sub	sp, #48	@ 0x30
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_DateTypeDef sDate = {0};
 8000eb2:	232c      	movs	r3, #44	@ 0x2c
 8000eb4:	18fb      	adds	r3, r7, r3
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	2328      	movs	r3, #40	@ 0x28
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	f005 f9fe 	bl	80062c4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ec8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000eca:	4a3f      	ldr	r2, [pc, #252]	@ (8000fc8 <MX_RTC_Init+0x11c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000ece:	4b3d      	ldr	r3, [pc, #244]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000ed0:	2240      	movs	r2, #64	@ 0x40
 8000ed2:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000ed6:	227f      	movs	r2, #127	@ 0x7f
 8000ed8:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000eda:	4b3a      	ldr	r3, [pc, #232]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000edc:	22ff      	movs	r2, #255	@ 0xff
 8000ede:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ee0:	4b38      	ldr	r3, [pc, #224]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ee6:	4b37      	ldr	r3, [pc, #220]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000eec:	4b35      	ldr	r3, [pc, #212]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ef2:	4b34      	ldr	r3, [pc, #208]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000ef4:	2280      	movs	r2, #128	@ 0x80
 8000ef6:	05d2      	lsls	r2, r2, #23
 8000ef8:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000efa:	4b32      	ldr	r3, [pc, #200]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f00:	4b30      	ldr	r3, [pc, #192]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000f02:	0018      	movs	r0, r3
 8000f04:	f003 faca 	bl	800449c <HAL_RTC_Init>
 8000f08:	1e03      	subs	r3, r0, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 8000f0c:	f000 fec4 	bl	8001c98 <Error_Handler>
//  {
//    Error_Handler();
//  }


  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f10:	212c      	movs	r1, #44	@ 0x2c
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2201      	movs	r2, #1
 8000f22:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	2200      	movs	r2, #0
 8000f28:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f2a:	1879      	adds	r1, r7, r1
 8000f2c:	4b25      	ldr	r3, [pc, #148]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	0018      	movs	r0, r3
 8000f32:	f003 fc59 	bl	80047e8 <HAL_RTC_SetDate>
 8000f36:	1e03      	subs	r3, r0, #0
 8000f38:	d001      	beq.n	8000f3e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000f3a:	f000 fead 	bl	8001c98 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2201      	movs	r2, #1
 8000f48:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2200      	movs	r2, #0
 8000f54:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	4a18      	ldr	r2, [pc, #96]	@ (8000fcc <MX_RTC_Init+0x120>)
 8000f6c:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2220      	movs	r2, #32
 8000f7e:	2101      	movs	r1, #1
 8000f80:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2280      	movs	r2, #128	@ 0x80
 8000f86:	0052      	lsls	r2, r2, #1
 8000f88:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000f8a:	1d39      	adds	r1, r7, #4
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	0018      	movs	r0, r3
 8000f92:	f003 fd09 	bl	80049a8 <HAL_RTC_SetAlarm_IT>
 8000f96:	1e03      	subs	r3, r0, #0
 8000f98:	d001      	beq.n	8000f9e <MX_RTC_Init+0xf2>
  {
    Error_Handler();
 8000f9a:	f000 fe7d 	bl	8001c98 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f004 f898 	bl	80050d8 <HAL_RTCEx_SetCalibrationOutPut>
 8000fa8:	1e03      	subs	r3, r0, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_RTC_Init+0x104>
  {
    Error_Handler();
 8000fac:	f000 fe74 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8000fb0:	4907      	ldr	r1, [pc, #28]	@ (8000fd0 <MX_RTC_Init+0x124>)
 8000fb2:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <MX_RTC_Init+0x118>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f003 fbba 	bl	8004730 <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 8000fbc:	46c0      	nop			@ (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b00c      	add	sp, #48	@ 0x30
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000118 	.word	0x20000118
 8000fc8:	40002800 	.word	0x40002800
 8000fcc:	80800080 	.word	0x80800080
 8000fd0:	20000094 	.word	0x20000094

08000fd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	@ 0x28
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fda:	231c      	movs	r3, #28
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	0018      	movs	r0, r3
 8000fe0:	230c      	movs	r3, #12
 8000fe2:	001a      	movs	r2, r3
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	f005 f96d 	bl	80062c4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fea:	003b      	movs	r3, r7
 8000fec:	0018      	movs	r0, r3
 8000fee:	231c      	movs	r3, #28
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	f005 f966 	bl	80062c4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff8:	4b24      	ldr	r3, [pc, #144]	@ (800108c <MX_TIM2_Init+0xb8>)
 8000ffa:	2280      	movs	r2, #128	@ 0x80
 8000ffc:	05d2      	lsls	r2, r2, #23
 8000ffe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8001000:	4b22      	ldr	r3, [pc, #136]	@ (800108c <MX_TIM2_Init+0xb8>)
 8001002:	4a23      	ldr	r2, [pc, #140]	@ (8001090 <MX_TIM2_Init+0xbc>)
 8001004:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b21      	ldr	r3, [pc, #132]	@ (800108c <MX_TIM2_Init+0xb8>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <MX_TIM2_Init+0xb8>)
 800100e:	2263      	movs	r2, #99	@ 0x63
 8001010:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001012:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <MX_TIM2_Init+0xb8>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001018:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <MX_TIM2_Init+0xb8>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800101e:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <MX_TIM2_Init+0xb8>)
 8001020:	0018      	movs	r0, r3
 8001022:	f004 fa2d 	bl	8005480 <HAL_TIM_PWM_Init>
 8001026:	1e03      	subs	r3, r0, #0
 8001028:	d001      	beq.n	800102e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800102a:	f000 fe35 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102e:	211c      	movs	r1, #28
 8001030:	187b      	adds	r3, r7, r1
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001036:	187b      	adds	r3, r7, r1
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800103c:	187a      	adds	r2, r7, r1
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <MX_TIM2_Init+0xb8>)
 8001040:	0011      	movs	r1, r2
 8001042:	0018      	movs	r0, r3
 8001044:	f005 f8be 	bl	80061c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001048:	1e03      	subs	r3, r0, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800104c:	f000 fe24 	bl	8001c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001050:	003b      	movs	r3, r7
 8001052:	2260      	movs	r2, #96	@ 0x60
 8001054:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001056:	003b      	movs	r3, r7
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105c:	003b      	movs	r3, r7
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001062:	003b      	movs	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001068:	0039      	movs	r1, r7
 800106a:	4b08      	ldr	r3, [pc, #32]	@ (800108c <MX_TIM2_Init+0xb8>)
 800106c:	2208      	movs	r2, #8
 800106e:	0018      	movs	r0, r3
 8001070:	f004 fc44 	bl	80058fc <HAL_TIM_PWM_ConfigChannel>
 8001074:	1e03      	subs	r3, r0, #0
 8001076:	d001      	beq.n	800107c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001078:	f000 fe0e 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800107c:	4b03      	ldr	r3, [pc, #12]	@ (800108c <MX_TIM2_Init+0xb8>)
 800107e:	0018      	movs	r0, r3
 8001080:	f001 f8be 	bl	8002200 <HAL_TIM_MspPostInit>

}
 8001084:	46c0      	nop			@ (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b00a      	add	sp, #40	@ 0x28
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000144 	.word	0x20000144
 8001090:	0000031f 	.word	0x0000031f

08001094 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001098:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <MX_TIM14_Init+0x40>)
 800109a:	4a0f      	ldr	r2, [pc, #60]	@ (80010d8 <MX_TIM14_Init+0x44>)
 800109c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 800109e:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <MX_TIM14_Init+0x40>)
 80010a0:	22f4      	movs	r2, #244	@ 0xf4
 80010a2:	0092      	lsls	r2, r2, #2
 80010a4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <MX_TIM14_Init+0x40>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80010ac:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <MX_TIM14_Init+0x40>)
 80010ae:	4a0b      	ldr	r2, [pc, #44]	@ (80010dc <MX_TIM14_Init+0x48>)
 80010b0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b2:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <MX_TIM14_Init+0x40>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <MX_TIM14_Init+0x40>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80010be:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <MX_TIM14_Init+0x40>)
 80010c0:	0018      	movs	r0, r3
 80010c2:	f004 f891 	bl	80051e8 <HAL_TIM_Base_Init>
 80010c6:	1e03      	subs	r3, r0, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80010ca:	f000 fde5 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000190 	.word	0x20000190
 80010d8:	40002000 	.word	0x40002000
 80010dc:	0000ffff 	.word	0x0000ffff

080010e0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80010e4:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <MX_TIM16_Init+0x60>)
 80010e6:	4a17      	ldr	r2, [pc, #92]	@ (8001144 <MX_TIM16_Init+0x64>)
 80010e8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = (58595 / 10) - 1;
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <MX_TIM16_Init+0x60>)
 80010ec:	4a16      	ldr	r2, [pc, #88]	@ (8001148 <MX_TIM16_Init+0x68>)
 80010ee:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <MX_TIM16_Init+0x60>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80010f6:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <MX_TIM16_Init+0x60>)
 80010f8:	4a14      	ldr	r2, [pc, #80]	@ (800114c <MX_TIM16_Init+0x6c>)
 80010fa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fc:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <MX_TIM16_Init+0x60>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001102:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <MX_TIM16_Init+0x60>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001108:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <MX_TIM16_Init+0x60>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800110e:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <MX_TIM16_Init+0x60>)
 8001110:	0018      	movs	r0, r3
 8001112:	f004 f869 	bl	80051e8 <HAL_TIM_Base_Init>
 8001116:	1e03      	subs	r3, r0, #0
 8001118:	d001      	beq.n	800111e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800111a:	f000 fdbd 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  // Decrease interrupt priority
  HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2101      	movs	r1, #1
 8001122:	2015      	movs	r0, #21
 8001124:	f001 fa62 	bl	80025ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001128:	2015      	movs	r0, #21
 800112a:	f001 fa74 	bl	8002616 <HAL_NVIC_EnableIRQ>

  // Clear SR interrupts
  __HAL_TIM_CLEAR_IT(timerSnooze, TIM_IT_UPDATE);
 800112e:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <MX_TIM16_Init+0x70>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2202      	movs	r2, #2
 8001136:	4252      	negs	r2, r2
 8001138:	611a      	str	r2, [r3, #16]
//	timerSnooze->Instance->RCR |= timerSnooze_RCR;


  /* USER CODE END TIM16_Init 2 */

}
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200001dc 	.word	0x200001dc
 8001144:	40014400 	.word	0x40014400
 8001148:	000016e2 	.word	0x000016e2
 800114c:	0000ffff 	.word	0x0000ffff
 8001150:	2000004c 	.word	0x2000004c

08001154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b08b      	sub	sp, #44	@ 0x2c
 8001158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	2414      	movs	r4, #20
 800115c:	193b      	adds	r3, r7, r4
 800115e:	0018      	movs	r0, r3
 8001160:	2314      	movs	r3, #20
 8001162:	001a      	movs	r2, r3
 8001164:	2100      	movs	r1, #0
 8001166:	f005 f8ad 	bl	80062c4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	4b66      	ldr	r3, [pc, #408]	@ (8001304 <MX_GPIO_Init+0x1b0>)
 800116c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800116e:	4b65      	ldr	r3, [pc, #404]	@ (8001304 <MX_GPIO_Init+0x1b0>)
 8001170:	2104      	movs	r1, #4
 8001172:	430a      	orrs	r2, r1
 8001174:	635a      	str	r2, [r3, #52]	@ 0x34
 8001176:	4b63      	ldr	r3, [pc, #396]	@ (8001304 <MX_GPIO_Init+0x1b0>)
 8001178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800117a:	2204      	movs	r2, #4
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b60      	ldr	r3, [pc, #384]	@ (8001304 <MX_GPIO_Init+0x1b0>)
 8001184:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001186:	4b5f      	ldr	r3, [pc, #380]	@ (8001304 <MX_GPIO_Init+0x1b0>)
 8001188:	2101      	movs	r1, #1
 800118a:	430a      	orrs	r2, r1
 800118c:	635a      	str	r2, [r3, #52]	@ 0x34
 800118e:	4b5d      	ldr	r3, [pc, #372]	@ (8001304 <MX_GPIO_Init+0x1b0>)
 8001190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001192:	2201      	movs	r2, #1
 8001194:	4013      	ands	r3, r2
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119a:	4b5a      	ldr	r3, [pc, #360]	@ (8001304 <MX_GPIO_Init+0x1b0>)
 800119c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800119e:	4b59      	ldr	r3, [pc, #356]	@ (8001304 <MX_GPIO_Init+0x1b0>)
 80011a0:	2108      	movs	r1, #8
 80011a2:	430a      	orrs	r2, r1
 80011a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80011a6:	4b57      	ldr	r3, [pc, #348]	@ (8001304 <MX_GPIO_Init+0x1b0>)
 80011a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011aa:	2208      	movs	r2, #8
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	4b54      	ldr	r3, [pc, #336]	@ (8001304 <MX_GPIO_Init+0x1b0>)
 80011b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011b6:	4b53      	ldr	r3, [pc, #332]	@ (8001304 <MX_GPIO_Init+0x1b0>)
 80011b8:	2102      	movs	r1, #2
 80011ba:	430a      	orrs	r2, r1
 80011bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80011be:	4b51      	ldr	r3, [pc, #324]	@ (8001304 <MX_GPIO_Init+0x1b0>)
 80011c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011c2:	2202      	movs	r2, #2
 80011c4:	4013      	ands	r3, r2
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 80011ca:	494f      	ldr	r1, [pc, #316]	@ (8001308 <MX_GPIO_Init+0x1b4>)
 80011cc:	23a0      	movs	r3, #160	@ 0xa0
 80011ce:	05db      	lsls	r3, r3, #23
 80011d0:	2200      	movs	r2, #0
 80011d2:	0018      	movs	r0, r3
 80011d4:	f001 fbbd 	bl	8002952 <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 80011d8:	4b4c      	ldr	r3, [pc, #304]	@ (800130c <MX_GPIO_Init+0x1b8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	2180      	movs	r1, #128	@ 0x80
 80011de:	0018      	movs	r0, r3
 80011e0:	f001 fbb7 	bl	8002952 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_RST_GPIO_Port, CTOUCH_RST_Pin, GPIO_PIN_RESET);
 80011e4:	2380      	movs	r3, #128	@ 0x80
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4849      	ldr	r0, [pc, #292]	@ (8001310 <MX_GPIO_Init+0x1bc>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	0019      	movs	r1, r3
 80011ee:	f001 fbb0 	bl	8002952 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin BUZZER_OUT_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin
                           SHIFT_MCLR_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 80011f2:	193b      	adds	r3, r7, r4
 80011f4:	4a44      	ldr	r2, [pc, #272]	@ (8001308 <MX_GPIO_Init+0x1b4>)
 80011f6:	601a      	str	r2, [r3, #0]
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	193b      	adds	r3, r7, r4
 80011fa:	2201      	movs	r2, #1
 80011fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	193b      	adds	r3, r7, r4
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	193b      	adds	r3, r7, r4
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	193a      	adds	r2, r7, r4
 800120c:	23a0      	movs	r3, #160	@ 0xa0
 800120e:	05db      	lsls	r3, r3, #23
 8001210:	0011      	movs	r1, r2
 8001212:	0018      	movs	r0, r3
 8001214:	f001 fa1c 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001218:	193b      	adds	r3, r7, r4
 800121a:	2204      	movs	r2, #4
 800121c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121e:	193b      	adds	r3, r7, r4
 8001220:	2203      	movs	r2, #3
 8001222:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	193b      	adds	r3, r7, r4
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	193a      	adds	r2, r7, r4
 800122c:	23a0      	movs	r3, #160	@ 0xa0
 800122e:	05db      	lsls	r3, r3, #23
 8001230:	0011      	movs	r1, r2
 8001232:	0018      	movs	r0, r3
 8001234:	f001 fa0c 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8001238:	193b      	adds	r3, r7, r4
 800123a:	2280      	movs	r2, #128	@ 0x80
 800123c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	193b      	adds	r3, r7, r4
 8001240:	2201      	movs	r2, #1
 8001242:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	193b      	adds	r3, r7, r4
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	193b      	adds	r3, r7, r4
 800124c:	2200      	movs	r2, #0
 800124e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 8001250:	193b      	adds	r3, r7, r4
 8001252:	4a2e      	ldr	r2, [pc, #184]	@ (800130c <MX_GPIO_Init+0x1b8>)
 8001254:	0019      	movs	r1, r3
 8001256:	0010      	movs	r0, r2
 8001258:	f001 f9fa 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 800125c:	193b      	adds	r3, r7, r4
 800125e:	2280      	movs	r2, #128	@ 0x80
 8001260:	0212      	lsls	r2, r2, #8
 8001262:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001264:	193b      	adds	r3, r7, r4
 8001266:	2284      	movs	r2, #132	@ 0x84
 8001268:	0392      	lsls	r2, r2, #14
 800126a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126c:	193b      	adds	r3, r7, r4
 800126e:	2201      	movs	r2, #1
 8001270:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001272:	193a      	adds	r2, r7, r4
 8001274:	23a0      	movs	r3, #160	@ 0xa0
 8001276:	05db      	lsls	r3, r3, #23
 8001278:	0011      	movs	r1, r2
 800127a:	0018      	movs	r0, r3
 800127c:	f001 f9e8 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 8001280:	0021      	movs	r1, r4
 8001282:	187b      	adds	r3, r7, r1
 8001284:	220f      	movs	r2, #15
 8001286:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001288:	187b      	adds	r3, r7, r1
 800128a:	2284      	movs	r2, #132	@ 0x84
 800128c:	0392      	lsls	r2, r2, #14
 800128e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001290:	187b      	adds	r3, r7, r1
 8001292:	2201      	movs	r2, #1
 8001294:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001296:	000c      	movs	r4, r1
 8001298:	187b      	adds	r3, r7, r1
 800129a:	4a1e      	ldr	r2, [pc, #120]	@ (8001314 <MX_GPIO_Init+0x1c0>)
 800129c:	0019      	movs	r1, r3
 800129e:	0010      	movs	r0, r2
 80012a0:	f001 f9d6 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_RST_Pin */
  GPIO_InitStruct.Pin = CTOUCH_RST_Pin;
 80012a4:	0021      	movs	r1, r4
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2280      	movs	r2, #128	@ 0x80
 80012aa:	0052      	lsls	r2, r2, #1
 80012ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	2201      	movs	r2, #1
 80012b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	4a13      	ldr	r2, [pc, #76]	@ (8001310 <MX_GPIO_Init+0x1bc>)
 80012c4:	0019      	movs	r1, r3
 80012c6:	0010      	movs	r0, r2
 80012c8:	f001 f9c2 	bl	8002650 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2100      	movs	r1, #0
 80012d0:	2005      	movs	r0, #5
 80012d2:	f001 f98b 	bl	80025ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80012d6:	2005      	movs	r0, #5
 80012d8:	f001 f99d 	bl	8002616 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80012dc:	2200      	movs	r2, #0
 80012de:	2100      	movs	r1, #0
 80012e0:	2006      	movs	r0, #6
 80012e2:	f001 f983 	bl	80025ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80012e6:	2006      	movs	r0, #6
 80012e8:	f001 f995 	bl	8002616 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2101      	movs	r1, #1
 80012f0:	2007      	movs	r0, #7
 80012f2:	f001 f97b 	bl	80025ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80012f6:	2007      	movs	r0, #7
 80012f8:	f001 f98d 	bl	8002616 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012fc:	46c0      	nop			@ (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b00b      	add	sp, #44	@ 0x2c
 8001302:	bd90      	pop	{r4, r7, pc}
 8001304:	40021000 	.word	0x40021000
 8001308:	00001f01 	.word	0x00001f01
 800130c:	50000800 	.word	0x50000800
 8001310:	50000400 	.word	0x50000400
 8001314:	50000c00 	.word	0x50000c00

08001318 <updateAndDisplayTime>:
/* USER CODE BEGIN 4 */

/*
 * Pulls updated time from RTC and send new time to user display
 */
HAL_StatusTypeDef updateAndDisplayTime(void) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8001324:	4a07      	ldr	r2, [pc, #28]	@ (8001344 <updateAndDisplayTime+0x2c>)
 8001326:	4908      	ldr	r1, [pc, #32]	@ (8001348 <updateAndDisplayTime+0x30>)
 8001328:	4b08      	ldr	r3, [pc, #32]	@ (800134c <updateAndDisplayTime+0x34>)
 800132a:	0018      	movs	r0, r3
 800132c:	f7ff fb90 	bl	8000a50 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <updateAndDisplayTime+0x30>)
 8001332:	0018      	movs	r0, r3
 8001334:	f000 fd38 	bl	8001da8 <sevSeg_updateDigits>

	return halRet;
 8001338:	1dfb      	adds	r3, r7, #7
 800133a:	781b      	ldrb	r3, [r3, #0]

}
 800133c:	0018      	movs	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	b002      	add	sp, #8
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200000a8 	.word	0x200000a8
 8001348:	20000094 	.word	0x20000094
 800134c:	20000118 	.word	0x20000118

08001350 <updateAndDisplayAlarm>:
/*
 * Sends current user alarm time to user display
 * This doesn't pull from the RTC because the RTC alarm is not being used for that
 */

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 800135c:	4b04      	ldr	r3, [pc, #16]	@ (8001370 <updateAndDisplayAlarm+0x20>)
 800135e:	0018      	movs	r0, r3
 8001360:	f000 fd22 	bl	8001da8 <sevSeg_updateDigits>

	return halRet;
 8001364:	1dfb      	adds	r3, r7, #7
 8001366:	781b      	ldrb	r3, [r3, #0]

}
 8001368:	0018      	movs	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	b002      	add	sp, #8
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200000ac 	.word	0x200000ac

08001374 <HAL_RTC_AlarmAEventCallback>:
 * Occurs every minute increment
 *
 * Pulls alarm time from RTC, increments and sets new alarm time, and updates time.
 * Sets off user alarm if the alarm is enabled.
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b08d      	sub	sp, #52	@ 0x34
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

	  RTC_AlarmTypeDef sAlarm = {0};
 800137c:	2408      	movs	r4, #8
 800137e:	193b      	adds	r3, r7, r4
 8001380:	0018      	movs	r0, r3
 8001382:	2328      	movs	r3, #40	@ 0x28
 8001384:	001a      	movs	r2, r3
 8001386:	2100      	movs	r1, #0
 8001388:	f004 ff9c 	bl	80062c4 <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	005a      	lsls	r2, r3, #1
 8001390:	1939      	adds	r1, r7, r4
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	2300      	movs	r3, #0
 8001396:	f003 fc47 	bl	8004c28 <HAL_RTC_GetAlarm>


	  if(sAlarm.AlarmTime.Minutes>58) {
 800139a:	193b      	adds	r3, r7, r4
 800139c:	785b      	ldrb	r3, [r3, #1]
 800139e:	2b3a      	cmp	r3, #58	@ 0x3a
 80013a0:	d903      	bls.n	80013aa <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 80013a2:	193b      	adds	r3, r7, r4
 80013a4:	2200      	movs	r2, #0
 80013a6:	705a      	strb	r2, [r3, #1]
 80013a8:	e008      	b.n	80013bc <HAL_RTC_AlarmAEventCallback+0x48>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 80013aa:	2108      	movs	r1, #8
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	785b      	ldrb	r3, [r3, #1]
 80013b0:	3301      	adds	r3, #1
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	187b      	adds	r3, r7, r1
 80013b6:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 80013b8:	e000      	b.n	80013bc <HAL_RTC_AlarmAEventCallback+0x48>

			__NOP();
 80013ba:	46c0      	nop			@ (mov r8, r8)
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 80013bc:	2308      	movs	r3, #8
 80013be:	18f9      	adds	r1, r7, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	0018      	movs	r0, r3
 80013c6:	f003 faef 	bl	80049a8 <HAL_RTC_SetAlarm_IT>
 80013ca:	1e03      	subs	r3, r0, #0
 80013cc:	d1f5      	bne.n	80013ba <HAL_RTC_AlarmAEventCallback+0x46>

		}

	  updateAndDisplayTime();
 80013ce:	f7ff ffa3 	bl	8001318 <updateAndDisplayTime>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 80013d2:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <HAL_RTC_AlarmAEventCallback+0x98>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d013      	beq.n	8001402 <HAL_RTC_AlarmAEventCallback+0x8e>
 80013da:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80013dc:	781a      	ldrb	r2, [r3, #0]
 80013de:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <HAL_RTC_AlarmAEventCallback+0xa0>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d10d      	bne.n	8001402 <HAL_RTC_AlarmAEventCallback+0x8e>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 80013e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80013e8:	785a      	ldrb	r2, [r3, #1]
 80013ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <HAL_RTC_AlarmAEventCallback+0xa0>)
 80013ec:	785b      	ldrb	r3, [r3, #1]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d107      	bne.n	8001402 <HAL_RTC_AlarmAEventCallback+0x8e>
 80013f2:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80013f4:	78da      	ldrb	r2, [r3, #3]
 80013f6:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <HAL_RTC_AlarmAEventCallback+0xa0>)
 80013f8:	78db      	ldrb	r3, [r3, #3]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d101      	bne.n	8001402 <HAL_RTC_AlarmAEventCallback+0x8e>
		  userAlarmBeep();
 80013fe:	f000 f80b 	bl	8001418 <userAlarmBeep>
	  }


}
 8001402:	46c0      	nop			@ (mov r8, r8)
 8001404:	46bd      	mov	sp, r7
 8001406:	b00d      	add	sp, #52	@ 0x34
 8001408:	bd90      	pop	{r4, r7, pc}
 800140a:	46c0      	nop			@ (mov r8, r8)
 800140c:	20000091 	.word	0x20000091
 8001410:	200000ac 	.word	0x200000ac
 8001414:	20000094 	.word	0x20000094

08001418 <userAlarmBeep>:
 * Functionality depends on whether or not this is the first or second snooze.
 * 		First Snooze: 10-minute timer is started and alarm
 * 		              is beeped again at the end of this 10 minutes.
 * 		Second Snooze: No timer is started and silencing the alarm silences it for good.
 */
void userAlarmBeep() {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 800141e:	4b5e      	ldr	r3, [pc, #376]	@ (8001598 <userAlarmBeep+0x180>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d018      	beq.n	8001458 <userAlarmBeep+0x40>

			// Stop the timer and
			HAL_TIM_Base_Stop_IT(timerSnooze);
 8001426:	4b5d      	ldr	r3, [pc, #372]	@ (800159c <userAlarmBeep+0x184>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	0018      	movs	r0, r3
 800142c:	f003 fffa 	bl	8005424 <HAL_TIM_Base_Stop_IT>

			// Reset count to 0
			// only bits 0 - 15 should be changed.
			timerSnooze->Instance->CNT &= 0xFFFF0000;
 8001430:	4b5a      	ldr	r3, [pc, #360]	@ (800159c <userAlarmBeep+0x184>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001438:	4b58      	ldr	r3, [pc, #352]	@ (800159c <userAlarmBeep+0x184>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	0c12      	lsrs	r2, r2, #16
 8001440:	0412      	lsls	r2, r2, #16
 8001442:	625a      	str	r2, [r3, #36]	@ 0x24

			// Reset interrupt status register
			timerSnooze->Instance->SR &= 0xFFFC;
 8001444:	4b55      	ldr	r3, [pc, #340]	@ (800159c <userAlarmBeep+0x184>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	691a      	ldr	r2, [r3, #16]
 800144c:	4b53      	ldr	r3, [pc, #332]	@ (800159c <userAlarmBeep+0x184>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4953      	ldr	r1, [pc, #332]	@ (80015a0 <userAlarmBeep+0x188>)
 8001454:	400a      	ands	r2, r1
 8001456:	611a      	str	r2, [r3, #16]
//			timerSnooze->Instance->RCR &= 0xFF00;
//			timerSnooze->Instance->RCR |= timerSnooze_RCR;

		}

	HAL_TIM_Base_Stop(timerDelay);
 8001458:	4b52      	ldr	r3, [pc, #328]	@ (80015a4 <userAlarmBeep+0x18c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	0018      	movs	r0, r3
 800145e:	f003 ff67 	bl	8005330 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001462:	4b50      	ldr	r3, [pc, #320]	@ (80015a4 <userAlarmBeep+0x18c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	0018      	movs	r0, r3
 8001468:	f003 ff16 	bl	8005298 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 800146c:	4b4d      	ldr	r3, [pc, #308]	@ (80015a4 <userAlarmBeep+0x18c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001474:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001476:	1cfb      	adds	r3, r7, #3
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine whether to toggle high or low brightness
	 */
	uint8_t intenSet;
	if(displayToggle == 0) { 				// If the user has full brightness enabled, toggle full btightness
 800147c:	4b4a      	ldr	r3, [pc, #296]	@ (80015a8 <userAlarmBeep+0x190>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d103      	bne.n	800148c <userAlarmBeep+0x74>
		intenSet = 2;
 8001484:	1cbb      	adds	r3, r7, #2
 8001486:	2202      	movs	r2, #2
 8001488:	701a      	strb	r2, [r3, #0]
 800148a:	e002      	b.n	8001492 <userAlarmBeep+0x7a>
	}
	else {									// Else, toggle low brightness
		intenSet = 1;
 800148c:	1cbb      	adds	r3, r7, #2
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
	}

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 8001492:	f7ff ff41 	bl	8001318 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 8001496:	4b43      	ldr	r3, [pc, #268]	@ (80015a4 <userAlarmBeep+0x18c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	4a42      	ldr	r2, [pc, #264]	@ (80015ac <userAlarmBeep+0x194>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d925      	bls.n	80014f4 <userAlarmBeep+0xdc>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink * intenSet]);	// Toggle on/off
 80014a8:	1cfb      	adds	r3, r7, #3
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	1cba      	adds	r2, r7, #2
 80014ae:	7812      	ldrb	r2, [r2, #0]
 80014b0:	4353      	muls	r3, r2
 80014b2:	4a3f      	ldr	r2, [pc, #252]	@ (80015b0 <userAlarmBeep+0x198>)
 80014b4:	5cd3      	ldrb	r3, [r2, r3]
 80014b6:	0018      	movs	r0, r3
 80014b8:	f000 fd28 	bl	8001f0c <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(buzzerPort, buzzerPin);					// Toggle Buzzer
 80014bc:	4b3d      	ldr	r3, [pc, #244]	@ (80015b4 <userAlarmBeep+0x19c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2280      	movs	r2, #128	@ 0x80
 80014c2:	0052      	lsls	r2, r2, #1
 80014c4:	0011      	movs	r1, r2
 80014c6:	0018      	movs	r0, r3
 80014c8:	f001 fa60 	bl	800298c <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80014cc:	4b35      	ldr	r3, [pc, #212]	@ (80015a4 <userAlarmBeep+0x18c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d4:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80014d6:	1cfb      	adds	r3, r7, #3
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	1e5a      	subs	r2, r3, #1
 80014dc:	4193      	sbcs	r3, r2
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2201      	movs	r2, #1
 80014e2:	4053      	eors	r3, r2
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	001a      	movs	r2, r3
 80014e8:	1cfb      	adds	r3, r7, #3
 80014ea:	701a      	strb	r2, [r3, #0]
 80014ec:	781a      	ldrb	r2, [r3, #0]
 80014ee:	2101      	movs	r1, #1
 80014f0:	400a      	ands	r2, r1
 80014f2:	701a      	strb	r2, [r3, #0]

		}


		capTouch_readChannels(&capTouch);
 80014f4:	4b30      	ldr	r3, [pc, #192]	@ (80015b8 <userAlarmBeep+0x1a0>)
 80014f6:	0018      	movs	r0, r3
 80014f8:	f7ff f83c 	bl	8000574 <capTouch_readChannels>

	} while(capTouch.keyStat == 0x00 &&
 80014fc:	4b2e      	ldr	r3, [pc, #184]	@ (80015b8 <userAlarmBeep+0x1a0>)
 80014fe:	7c1b      	ldrb	r3, [r3, #16]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d10e      	bne.n	8001522 <userAlarmBeep+0x10a>
			(HAL_GPIO_ReadPin(alarmEnableButtonPort, alarmEnableButtonPin) != GPIO_PIN_RESET));
 8001504:	4b2d      	ldr	r3, [pc, #180]	@ (80015bc <userAlarmBeep+0x1a4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2204      	movs	r2, #4
 800150a:	0011      	movs	r1, r2
 800150c:	0018      	movs	r0, r3
 800150e:	f001 fa03 	bl	8002918 <HAL_GPIO_ReadPin>
 8001512:	0003      	movs	r3, r0
 8001514:	0019      	movs	r1, r3
 8001516:	1cbb      	adds	r3, r7, #2
 8001518:	1cba      	adds	r2, r7, #2
 800151a:	7812      	ldrb	r2, [r2, #0]
 800151c:	701a      	strb	r2, [r3, #0]
	} while(capTouch.keyStat == 0x00 &&
 800151e:	2900      	cmp	r1, #0
 8001520:	d1b7      	bne.n	8001492 <userAlarmBeep+0x7a>

	/*
	 * Stop blinking, turn off buzzer, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 8001522:	4b20      	ldr	r3, [pc, #128]	@ (80015a4 <userAlarmBeep+0x18c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	0018      	movs	r0, r3
 8001528:	f003 ff02 	bl	8005330 <HAL_TIM_Base_Stop>
	HAL_GPIO_WritePin(buzzerPort, buzzerPin, GPIO_PIN_RESET);
 800152c:	4b21      	ldr	r3, [pc, #132]	@ (80015b4 <userAlarmBeep+0x19c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2280      	movs	r2, #128	@ 0x80
 8001532:	0051      	lsls	r1, r2, #1
 8001534:	2200      	movs	r2, #0
 8001536:	0018      	movs	r0, r3
 8001538:	f001 fa0b 	bl	8002952 <HAL_GPIO_WritePin>
	updateAndDisplayTime();				// Update to current time and display
 800153c:	f7ff feec 	bl	8001318 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[intenSet]);	// Turn display back on
 8001540:	1cbb      	adds	r3, r7, #2
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4a1a      	ldr	r2, [pc, #104]	@ (80015b0 <userAlarmBeep+0x198>)
 8001546:	5cd3      	ldrb	r3, [r2, r3]
 8001548:	0018      	movs	r0, r3
 800154a:	f000 fcdf 	bl	8001f0c <sevSeg_setIntensity>
	if(intenSet == 2) {
 800154e:	1cbb      	adds	r3, r7, #2
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d103      	bne.n	800155e <userAlarmBeep+0x146>
		displayToggle = 0;
 8001556:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <userAlarmBeep+0x190>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	e002      	b.n	8001564 <userAlarmBeep+0x14c>
	}
	else {
		displayToggle = 2;
 800155e:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <userAlarmBeep+0x190>)
 8001560:	2202      	movs	r2, #2
 8001562:	701a      	strb	r2, [r3, #0]
	}

	// If this is the first snooze,
	if(!secondSnooze) {
 8001564:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <userAlarmBeep+0x180>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2201      	movs	r2, #1
 800156a:	4053      	eors	r3, r2
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d008      	beq.n	8001584 <userAlarmBeep+0x16c>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 8001572:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <userAlarmBeep+0x184>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	0018      	movs	r0, r3
 8001578:	f003 ff00 	bl	800537c <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <userAlarmBeep+0x180>)
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]
		 * in the top conditional, the secondSnooze is always true;
		 */
		secondSnooze = false;

	}
}
 8001582:	e005      	b.n	8001590 <userAlarmBeep+0x178>
		snoozeCounter = 0;
 8001584:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <userAlarmBeep+0x1a8>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
		secondSnooze = false;
 800158a:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <userAlarmBeep+0x180>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
}
 8001590:	46c0      	nop			@ (mov r8, r8)
 8001592:	46bd      	mov	sp, r7
 8001594:	b002      	add	sp, #8
 8001596:	bd80      	pop	{r7, pc}
 8001598:	2000022a 	.word	0x2000022a
 800159c:	2000004c 	.word	0x2000004c
 80015a0:	0000fffc 	.word	0x0000fffc
 80015a4:	20000048 	.word	0x20000048
 80015a8:	20000090 	.word	0x20000090
 80015ac:	00007ffe 	.word	0x00007ffe
 80015b0:	0800636c 	.word	0x0800636c
 80015b4:	20000014 	.word	0x20000014
 80015b8:	2000022c 	.word	0x2000022c
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000228 	.word	0x20000228

080015c4 <HAL_GPIO_EXTI_Falling_Callback>:
 * General Falling-Edge EXTI Callback function
 *
 * Internal conditional determines which function to call
 * based on which button was pressed.
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	0002      	movs	r2, r0
 80015cc:	1dbb      	adds	r3, r7, #6
 80015ce:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 80015d0:	2208      	movs	r2, #8
 80015d2:	1dbb      	adds	r3, r7, #6
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d106      	bne.n	80015e8 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 80015da:	230f      	movs	r3, #15
 80015dc:	18fc      	adds	r4, r7, r3
 80015de:	f000 f85f 	bl	80016a0 <displayButtonISR>
 80015e2:	0003      	movs	r3, r0
 80015e4:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 80015e6:	e031      	b.n	800164c <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 80015e8:	2204      	movs	r2, #4
 80015ea:	1dbb      	adds	r3, r7, #6
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d106      	bne.n	8001600 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 80015f2:	230f      	movs	r3, #15
 80015f4:	18fc      	adds	r4, r7, r3
 80015f6:	f000 f87b 	bl	80016f0 <alarmEnableISR>
 80015fa:	0003      	movs	r3, r0
 80015fc:	7023      	strb	r3, [r4, #0]
}
 80015fe:	e025      	b.n	800164c <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8001600:	2380      	movs	r3, #128	@ 0x80
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	1dba      	adds	r2, r7, #6
 8001606:	8812      	ldrh	r2, [r2, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d106      	bne.n	800161a <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 800160c:	230f      	movs	r3, #15
 800160e:	18fc      	adds	r4, r7, r3
 8001610:	f000 f8ac 	bl	800176c <alarmSetISR>
 8001614:	0003      	movs	r3, r0
 8001616:	7023      	strb	r3, [r4, #0]
}
 8001618:	e018      	b.n	800164c <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 800161a:	2201      	movs	r2, #1
 800161c:	1dbb      	adds	r3, r7, #6
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	4293      	cmp	r3, r2
 8001622:	d106      	bne.n	8001632 <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 8001624:	230f      	movs	r3, #15
 8001626:	18fc      	adds	r4, r7, r3
 8001628:	f000 f984 	bl	8001934 <hourSetISR>
 800162c:	0003      	movs	r3, r0
 800162e:	7023      	strb	r3, [r4, #0]
}
 8001630:	e00c      	b.n	800164c <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8001632:	2202      	movs	r2, #2
 8001634:	1dbb      	adds	r3, r7, #6
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	4293      	cmp	r3, r2
 800163a:	d106      	bne.n	800164a <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 800163c:	230f      	movs	r3, #15
 800163e:	18fc      	adds	r4, r7, r3
 8001640:	f000 f9a4 	bl	800198c <minuteSetISR>
 8001644:	0003      	movs	r3, r0
 8001646:	7023      	strb	r3, [r4, #0]
}
 8001648:	e000      	b.n	800164c <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 800164a:	46c0      	nop			@ (mov r8, r8)
}
 800164c:	46c0      	nop			@ (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b005      	add	sp, #20
 8001652:	bd90      	pop	{r4, r7, pc}

08001654 <HAL_TIM_PeriodElapsedCallback>:
 * Used for second snooze functionality
 *
 * This is entered at the end of a 10-minute snooze, at
 * which point the timer kicks back an interrupt.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

	snoozeCounter++;
 800165c:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	3301      	adds	r3, #1
 8001662:	b2da      	uxtb	r2, r3
 8001664:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001666:	701a      	strb	r2, [r3, #0]

	if((htim == timerSnooze) && (secondSnooze == true) && (snoozeCounter == timerSnooze_RCR)) {
 8001668:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	429a      	cmp	r2, r3
 8001670:	d10b      	bne.n	800168a <HAL_TIM_PeriodElapsedCallback+0x36>
 8001672:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <HAL_TIM_PeriodElapsedCallback+0x36>
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	001a      	movs	r2, r3
 8001680:	2303      	movs	r3, #3
 8001682:	429a      	cmp	r2, r3
 8001684:	d101      	bne.n	800168a <HAL_TIM_PeriodElapsedCallback+0x36>

		userAlarmBeep();
 8001686:	f7ff fec7 	bl	8001418 <userAlarmBeep>

	}

}
 800168a:	46c0      	nop			@ (mov r8, r8)
 800168c:	46bd      	mov	sp, r7
 800168e:	b002      	add	sp, #8
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	20000228 	.word	0x20000228
 8001698:	2000004c 	.word	0x2000004c
 800169c:	2000022a 	.word	0x2000022a

080016a0 <displayButtonISR>:

/*
 * Toggles through user time display brightness settings
 */
HAL_StatusTypeDef displayButtonISR(void) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 80016a6:	1dfb      	adds	r3, r7, #7
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 80016ac:	f7ff fe34 	bl	8001318 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 80016b0:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <displayButtonISR+0x48>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	001a      	movs	r2, r3
 80016b6:	4b0d      	ldr	r3, [pc, #52]	@ (80016ec <displayButtonISR+0x4c>)
 80016b8:	5c9b      	ldrb	r3, [r3, r2]
 80016ba:	0018      	movs	r0, r3
 80016bc:	f000 fc26 	bl	8001f0c <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 80016c0:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <displayButtonISR+0x48>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d903      	bls.n	80016d0 <displayButtonISR+0x30>
		displayToggle = 0;
 80016c8:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <displayButtonISR+0x48>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
 80016ce:	e005      	b.n	80016dc <displayButtonISR+0x3c>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <displayButtonISR+0x48>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	4b03      	ldr	r3, [pc, #12]	@ (80016e8 <displayButtonISR+0x48>)
 80016da:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 80016dc:	1dfb      	adds	r3, r7, #7
 80016de:	781b      	ldrb	r3, [r3, #0]

}
 80016e0:	0018      	movs	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b002      	add	sp, #8
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000090 	.word	0x20000090
 80016ec:	0800636c 	.word	0x0800636c

080016f0 <alarmEnableISR>:

/*
 * Toggles user alarm enable bool and alarm enable LED.
 */
HAL_StatusTypeDef alarmEnableISR(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 80016f6:	1dfb      	adds	r3, r7, #7
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 80016fc:	4b17      	ldr	r3, [pc, #92]	@ (800175c <alarmEnableISR+0x6c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2201      	movs	r2, #1
 8001702:	4053      	eors	r3, r2
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00b      	beq.n	8001722 <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <alarmEnableISR+0x70>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2280      	movs	r2, #128	@ 0x80
 8001710:	0151      	lsls	r1, r2, #5
 8001712:	2201      	movs	r2, #1
 8001714:	0018      	movs	r0, r3
 8001716:	f001 f91c 	bl	8002952 <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 800171a:	4b10      	ldr	r3, [pc, #64]	@ (800175c <alarmEnableISR+0x6c>)
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
 8001720:	e010      	b.n	8001744 <alarmEnableISR+0x54>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8001722:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <alarmEnableISR+0x6c>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00b      	beq.n	8001742 <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 800172a:	4b0d      	ldr	r3, [pc, #52]	@ (8001760 <alarmEnableISR+0x70>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2280      	movs	r2, #128	@ 0x80
 8001730:	0151      	lsls	r1, r2, #5
 8001732:	2200      	movs	r2, #0
 8001734:	0018      	movs	r0, r3
 8001736:	f001 f90c 	bl	8002952 <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 800173a:	4b08      	ldr	r3, [pc, #32]	@ (800175c <alarmEnableISR+0x6c>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
 8001740:	e000      	b.n	8001744 <alarmEnableISR+0x54>

	}
	else {
		__NOP();							//Code should never reach here.
 8001742:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset snooze time
	secondSnooze = false;
 8001744:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <alarmEnableISR+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
	snoozeCounter = 0;
 800174a:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <alarmEnableISR+0x78>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]

	return halRet;
 8001750:	1dfb      	adds	r3, r7, #7
 8001752:	781b      	ldrb	r3, [r3, #0]

}
 8001754:	0018      	movs	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	b002      	add	sp, #8
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000091 	.word	0x20000091
 8001760:	20000010 	.word	0x20000010
 8001764:	2000022a 	.word	0x2000022a
 8001768:	20000228 	.word	0x20000228

0800176c <alarmSetISR>:
 * Delays for 3 seconds, checks if alarm set button is still pressed.
 * If it is, allow user to set the new alarm time
 * and blink display to indicate this
 *
 */
HAL_StatusTypeDef alarmSetISR(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001772:	003b      	movs	r3, r7
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for 3 seconds to see if alarm set button is still pressed
	 */

	// Delay for 3 * 1s intervals
	for(uint8_t i = 0; i < 3; i++) {
 8001778:	1dfb      	adds	r3, r7, #7
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
 800177e:	e01a      	b.n	80017b6 <alarmSetISR+0x4a>

		HAL_TIM_Base_Stop(timerDelay);
 8001780:	4b64      	ldr	r3, [pc, #400]	@ (8001914 <alarmSetISR+0x1a8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	0018      	movs	r0, r3
 8001786:	f003 fdd3 	bl	8005330 <HAL_TIM_Base_Stop>
		timerDelay->Instance->CNT = 0;						// Reset timer base
 800178a:	4b62      	ldr	r3, [pc, #392]	@ (8001914 <alarmSetISR+0x1a8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2200      	movs	r2, #0
 8001792:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001794:	4b5f      	ldr	r3, [pc, #380]	@ (8001914 <alarmSetISR+0x1a8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0018      	movs	r0, r3
 800179a:	f003 fd7d 	bl	8005298 <HAL_TIM_Base_Start>
	//	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to

		do {

		} while(__HAL_TIM_GET_COUNTER(timerDelay) < (65535));
 800179e:	4b5d      	ldr	r3, [pc, #372]	@ (8001914 <alarmSetISR+0x1a8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a6:	4a5c      	ldr	r2, [pc, #368]	@ (8001918 <alarmSetISR+0x1ac>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d9f8      	bls.n	800179e <alarmSetISR+0x32>
	for(uint8_t i = 0; i < 3; i++) {
 80017ac:	1dfb      	adds	r3, r7, #7
 80017ae:	781a      	ldrb	r2, [r3, #0]
 80017b0:	1dfb      	adds	r3, r7, #7
 80017b2:	3201      	adds	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	1dfb      	adds	r3, r7, #7
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d9e0      	bls.n	8001780 <alarmSetISR+0x14>
	}

	// If button is still pressed, we are in alarm set mode.
	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 80017be:	4b57      	ldr	r3, [pc, #348]	@ (800191c <alarmSetISR+0x1b0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2280      	movs	r2, #128	@ 0x80
 80017c4:	0212      	lsls	r2, r2, #8
 80017c6:	0011      	movs	r1, r2
 80017c8:	0018      	movs	r0, r3
 80017ca:	f001 f8a5 	bl	8002918 <HAL_GPIO_ReadPin>
 80017ce:	1e03      	subs	r3, r0, #0
 80017d0:	d102      	bne.n	80017d8 <alarmSetISR+0x6c>
		alarmSetMode = true;
 80017d2:	4b53      	ldr	r3, [pc, #332]	@ (8001920 <alarmSetISR+0x1b4>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	701a      	strb	r2, [r3, #0]
	 * alarm set process until the button is pressed again
	 */


	// Reset Timer
	HAL_TIM_Base_Stop(timerDelay);
 80017d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001914 <alarmSetISR+0x1a8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	0018      	movs	r0, r3
 80017de:	f003 fda7 	bl	8005330 <HAL_TIM_Base_Stop>
	timerDelay->Instance->CNT = 0;
 80017e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001914 <alarmSetISR+0x1a8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2200      	movs	r2, #0
 80017ea:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80017ec:	4b49      	ldr	r3, [pc, #292]	@ (8001914 <alarmSetISR+0x1a8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	0018      	movs	r0, r3
 80017f2:	f003 fd51 	bl	8005298 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80017f6:	4b47      	ldr	r3, [pc, #284]	@ (8001914 <alarmSetISR+0x1a8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	801a      	strh	r2, [r3, #0]

	bool alarmSetButtonReset = false;
 8001802:	1cfb      	adds	r3, r7, #3
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {
 8001808:	4b45      	ldr	r3, [pc, #276]	@ (8001920 <alarmSetISR+0x1b4>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d100      	bne.n	8001812 <alarmSetISR+0xa6>
 8001810:	e077      	b.n	8001902 <alarmSetISR+0x196>

		// If we were in second snooze mode, kill it.
		secondSnooze = false;
 8001812:	4b44      	ldr	r3, [pc, #272]	@ (8001924 <alarmSetISR+0x1b8>)
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
		snoozeCounter = 0;
 8001818:	4b43      	ldr	r3, [pc, #268]	@ (8001928 <alarmSetISR+0x1bc>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]

		bool displayBlink = false;
 800181e:	1cbb      	adds	r3, r7, #2
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]

		/*
		 * Determine whether to toggle high or low brightness
		 */
		uint8_t intenSet;
		if(displayToggle == 0) { 				// If the user has full brightness enabled, toggle full btightness
 8001824:	4b41      	ldr	r3, [pc, #260]	@ (800192c <alarmSetISR+0x1c0>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d103      	bne.n	8001834 <alarmSetISR+0xc8>
			intenSet = 2;
 800182c:	1c7b      	adds	r3, r7, #1
 800182e:	2202      	movs	r2, #2
 8001830:	701a      	strb	r2, [r3, #0]
 8001832:	e002      	b.n	800183a <alarmSetISR+0xce>
		}
		else {									// Else, toggle low brightness
			intenSet = 1;
 8001834:	1c7b      	adds	r3, r7, #1
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
		}

		do {											// while the alarm set button is not held down, blink display.

			// Check to make sure the user has released the set button from the initial hold
			if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_SET) {
 800183a:	4b38      	ldr	r3, [pc, #224]	@ (800191c <alarmSetISR+0x1b0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2280      	movs	r2, #128	@ 0x80
 8001840:	0212      	lsls	r2, r2, #8
 8001842:	0011      	movs	r1, r2
 8001844:	0018      	movs	r0, r3
 8001846:	f001 f867 	bl	8002918 <HAL_GPIO_ReadPin>
 800184a:	0003      	movs	r3, r0
 800184c:	2b01      	cmp	r3, #1
 800184e:	d102      	bne.n	8001856 <alarmSetISR+0xea>
				alarmSetButtonReset = true;
 8001850:	1cfb      	adds	r3, r7, #3
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
			}

			updateAndDisplayAlarm();
 8001856:	f7ff fd7b 	bl	8001350 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 800185a:	4b2e      	ldr	r3, [pc, #184]	@ (8001914 <alarmSetISR+0x1a8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	1ad2      	subs	r2, r2, r3
 8001868:	2380      	movs	r3, #128	@ 0x80
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	429a      	cmp	r2, r3
 800186e:	d31e      	bcc.n	80018ae <alarmSetISR+0x142>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink * intenSet]);		// Initialize to whatever duty cycle
 8001870:	1cbb      	adds	r3, r7, #2
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	1c7a      	adds	r2, r7, #1
 8001876:	7812      	ldrb	r2, [r2, #0]
 8001878:	4353      	muls	r3, r2
 800187a:	4a2d      	ldr	r2, [pc, #180]	@ (8001930 <alarmSetISR+0x1c4>)
 800187c:	5cd3      	ldrb	r3, [r2, r3]
 800187e:	0018      	movs	r0, r3
 8001880:	f000 fb44 	bl	8001f0c <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 8001884:	4b23      	ldr	r3, [pc, #140]	@ (8001914 <alarmSetISR+0x1a8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	801a      	strh	r2, [r3, #0]
				displayBlink = !displayBlink;
 8001890:	1cbb      	adds	r3, r7, #2
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	1e5a      	subs	r2, r3, #1
 8001896:	4193      	sbcs	r3, r2
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2201      	movs	r2, #1
 800189c:	4053      	eors	r3, r2
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	001a      	movs	r2, r3
 80018a2:	1cbb      	adds	r3, r7, #2
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	781a      	ldrb	r2, [r3, #0]
 80018a8:	2101      	movs	r1, #1
 80018aa:	400a      	ands	r2, r1
 80018ac:	701a      	strb	r2, [r3, #0]

			}

		}while((HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET)
 80018ae:	4b1b      	ldr	r3, [pc, #108]	@ (800191c <alarmSetISR+0x1b0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2280      	movs	r2, #128	@ 0x80
 80018b4:	0212      	lsls	r2, r2, #8
 80018b6:	0011      	movs	r1, r2
 80018b8:	0018      	movs	r0, r3
 80018ba:	f001 f82d 	bl	8002918 <HAL_GPIO_ReadPin>
 80018be:	1e03      	subs	r3, r0, #0
				|| !alarmSetButtonReset);
 80018c0:	d1bb      	bne.n	800183a <alarmSetISR+0xce>
 80018c2:	1cfb      	adds	r3, r7, #3
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2201      	movs	r2, #1
 80018c8:	4053      	eors	r3, r2
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1b4      	bne.n	800183a <alarmSetISR+0xce>

		sevSeg_setIntensity(sevSeg_intensityDuty[intenSet]);			// Turn display back on
 80018d0:	1c7b      	adds	r3, r7, #1
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4a16      	ldr	r2, [pc, #88]	@ (8001930 <alarmSetISR+0x1c4>)
 80018d6:	5cd3      	ldrb	r3, [r2, r3]
 80018d8:	0018      	movs	r0, r3
 80018da:	f000 fb17 	bl	8001f0c <sevSeg_setIntensity>
		if(intenSet == 2) {
 80018de:	1c7b      	adds	r3, r7, #1
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d103      	bne.n	80018ee <alarmSetISR+0x182>
			displayToggle = 0;
 80018e6:	4b11      	ldr	r3, [pc, #68]	@ (800192c <alarmSetISR+0x1c0>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	e002      	b.n	80018f4 <alarmSetISR+0x188>
		}
		else {
			displayToggle = 2;
 80018ee:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <alarmSetISR+0x1c0>)
 80018f0:	2202      	movs	r2, #2
 80018f2:	701a      	strb	r2, [r3, #0]
		}


		HAL_TIM_Base_Stop(timerDelay);
 80018f4:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <alarmSetISR+0x1a8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	0018      	movs	r0, r3
 80018fa:	f003 fd19 	bl	8005330 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 80018fe:	f7ff fd0b 	bl	8001318 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8001902:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <alarmSetISR+0x1b4>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 8001908:	003b      	movs	r3, r7
 800190a:	781b      	ldrb	r3, [r3, #0]

}
 800190c:	0018      	movs	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	b002      	add	sp, #8
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000048 	.word	0x20000048
 8001918:	0000fffe 	.word	0x0000fffe
 800191c:	20000004 	.word	0x20000004
 8001920:	20000229 	.word	0x20000229
 8001924:	2000022a 	.word	0x2000022a
 8001928:	20000228 	.word	0x20000228
 800192c:	20000090 	.word	0x20000090
 8001930:	0800636c 	.word	0x0800636c

08001934 <hourSetISR>:

/*
 * Increment either user alarm hour value or RTC hour value
 */
HAL_StatusTypeDef hourSetISR(void) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0


	HAL_StatusTypeDef halRet = HAL_OK;
 800193a:	1dfb      	adds	r3, r7, #7
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001940:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <hourSetISR+0x48>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <hourSetISR+0x1a>

		alarmHourInc();
 8001948:	f000 f872 	bl	8001a30 <alarmHourInc>
 800194c:	e00f      	b.n	800196e <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 800194e:	f000 f89f 	bl	8001a90 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001952:	490b      	ldr	r1, [pc, #44]	@ (8001980 <hourSetISR+0x4c>)
 8001954:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <hourSetISR+0x50>)
 8001956:	2200      	movs	r2, #0
 8001958:	0018      	movs	r0, r3
 800195a:	f002 fe41 	bl	80045e0 <HAL_RTC_SetTime>


		updateAndDisplayTime();
 800195e:	f7ff fcdb 	bl	8001318 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001962:	4a09      	ldr	r2, [pc, #36]	@ (8001988 <hourSetISR+0x54>)
 8001964:	4906      	ldr	r1, [pc, #24]	@ (8001980 <hourSetISR+0x4c>)
 8001966:	4b07      	ldr	r3, [pc, #28]	@ (8001984 <hourSetISR+0x50>)
 8001968:	0018      	movs	r0, r3
 800196a:	f7ff f871 	bl	8000a50 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 800196e:	1dfb      	adds	r3, r7, #7
 8001970:	781b      	ldrb	r3, [r3, #0]

}
 8001972:	0018      	movs	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	b002      	add	sp, #8
 8001978:	bd80      	pop	{r7, pc}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	20000229 	.word	0x20000229
 8001980:	20000094 	.word	0x20000094
 8001984:	20000118 	.word	0x20000118
 8001988:	200000a8 	.word	0x200000a8

0800198c <minuteSetISR>:

/*
 * Increment either user alarm minute value or RTC minute value
 */
HAL_StatusTypeDef minuteSetISR(void) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	@ 0x30
 8001990:	af00      	add	r7, sp, #0


	HAL_StatusTypeDef halRet = HAL_OK;
 8001992:	232f      	movs	r3, #47	@ 0x2f
 8001994:	18fb      	adds	r3, r7, r3
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 800199a:	4b21      	ldr	r3, [pc, #132]	@ (8001a20 <minuteSetISR+0x94>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <minuteSetISR+0x1c>

		alarmMinuteInc();
 80019a2:	f000 f8b5 	bl	8001b10 <alarmMinuteInc>
 80019a6:	e034      	b.n	8001a12 <minuteSetISR+0x86>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 80019a8:	f000 f8d0 	bl	8001b4c <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80019ac:	491d      	ldr	r1, [pc, #116]	@ (8001a24 <minuteSetISR+0x98>)
 80019ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001a28 <minuteSetISR+0x9c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	0018      	movs	r0, r3
 80019b4:	f002 fe14 	bl	80045e0 <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	0018      	movs	r0, r3
 80019bc:	2328      	movs	r3, #40	@ 0x28
 80019be:	001a      	movs	r2, r3
 80019c0:	2100      	movs	r1, #0
 80019c2:	f004 fc7f 	bl	80062c4 <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 80019c6:	2380      	movs	r3, #128	@ 0x80
 80019c8:	005a      	lsls	r2, r3, #1
 80019ca:	1d39      	adds	r1, r7, #4
 80019cc:	4816      	ldr	r0, [pc, #88]	@ (8001a28 <minuteSetISR+0x9c>)
 80019ce:	2300      	movs	r3, #0
 80019d0:	f003 f92a 	bl	8004c28 <HAL_RTC_GetAlarm>

		if(sAlarm.AlarmTime.Minutes>58) {
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	785b      	ldrb	r3, [r3, #1]
 80019d8:	2b3a      	cmp	r3, #58	@ 0x3a
 80019da:	d903      	bls.n	80019e4 <minuteSetISR+0x58>
			sAlarm.AlarmTime.Minutes=0;
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	2200      	movs	r2, #0
 80019e0:	705a      	strb	r2, [r3, #1]
 80019e2:	e005      	b.n	80019f0 <minuteSetISR+0x64>
			//printf("Reset alarm time\n\r");
		} else {
			sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	785b      	ldrb	r3, [r3, #1]
 80019e8:	3301      	adds	r3, #1
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 80019f0:	46c0      	nop			@ (mov r8, r8)
 80019f2:	1d39      	adds	r1, r7, #4
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <minuteSetISR+0x9c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	0018      	movs	r0, r3
 80019fa:	f002 ffd5 	bl	80049a8 <HAL_RTC_SetAlarm_IT>
 80019fe:	1e03      	subs	r3, r0, #0
 8001a00:	d1f7      	bne.n	80019f2 <minuteSetISR+0x66>


		updateAndDisplayTime();
 8001a02:	f7ff fc89 	bl	8001318 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001a06:	4a09      	ldr	r2, [pc, #36]	@ (8001a2c <minuteSetISR+0xa0>)
 8001a08:	4906      	ldr	r1, [pc, #24]	@ (8001a24 <minuteSetISR+0x98>)
 8001a0a:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <minuteSetISR+0x9c>)
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7ff f81f 	bl	8000a50 <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 8001a12:	232f      	movs	r3, #47	@ 0x2f
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	781b      	ldrb	r3, [r3, #0]
}
 8001a18:	0018      	movs	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b00c      	add	sp, #48	@ 0x30
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000229 	.word	0x20000229
 8001a24:	20000094 	.word	0x20000094
 8001a28:	20000118 	.word	0x20000118
 8001a2c:	200000a8 	.word	0x200000a8

08001a30 <alarmHourInc>:

/*
 * Increment user alarm time hour
 */
void alarmHourInc(void) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8001a34:	4b15      	ldr	r3, [pc, #84]	@ (8001a8c <alarmHourInc+0x5c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b0b      	cmp	r3, #11
 8001a3a:	d903      	bls.n	8001a44 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8001a3c:	4b13      	ldr	r3, [pc, #76]	@ (8001a8c <alarmHourInc+0x5c>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
 8001a42:	e01e      	b.n	8001a82 <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 8001a44:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <alarmHourInc+0x5c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b0b      	cmp	r3, #11
 8001a4a:	d10e      	bne.n	8001a6a <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a8c <alarmHourInc+0x5c>)
 8001a4e:	78db      	ldrb	r3, [r3, #3]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d103      	bne.n	8001a5c <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001a54:	4b0d      	ldr	r3, [pc, #52]	@ (8001a8c <alarmHourInc+0x5c>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	70da      	strb	r2, [r3, #3]
 8001a5a:	e002      	b.n	8001a62 <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <alarmHourInc+0x5c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 8001a62:	4b0a      	ldr	r3, [pc, #40]	@ (8001a8c <alarmHourInc+0x5c>)
 8001a64:	220c      	movs	r2, #12
 8001a66:	701a      	strb	r2, [r3, #0]
 8001a68:	e00b      	b.n	8001a82 <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 8001a6a:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <alarmHourInc+0x5c>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b0a      	cmp	r3, #10
 8001a70:	d806      	bhi.n	8001a80 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001a72:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <alarmHourInc+0x5c>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	3301      	adds	r3, #1
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4b04      	ldr	r3, [pc, #16]	@ (8001a8c <alarmHourInc+0x5c>)
 8001a7c:	701a      	strb	r2, [r3, #0]
 8001a7e:	e000      	b.n	8001a82 <alarmHourInc+0x52>
	}
	else {
		__NOP();
 8001a80:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001a82:	f000 f8df 	bl	8001c44 <updateRTCBackupReg>

}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200000ac 	.word	0x200000ac

08001a90 <currHourInc>:

/*
 * Increment current time hour
 */
void currHourInc(void) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001a94:	4a1a      	ldr	r2, [pc, #104]	@ (8001b00 <currHourInc+0x70>)
 8001a96:	491b      	ldr	r1, [pc, #108]	@ (8001b04 <currHourInc+0x74>)
 8001a98:	4b1b      	ldr	r3, [pc, #108]	@ (8001b08 <currHourInc+0x78>)
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f7fe ffd8 	bl	8000a50 <getRTCTime>

	if(currTime.Hours >= 12) {
 8001aa0:	4b18      	ldr	r3, [pc, #96]	@ (8001b04 <currHourInc+0x74>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b0b      	cmp	r3, #11
 8001aa6:	d903      	bls.n	8001ab0 <currHourInc+0x20>
		currTime.Hours = 1;
 8001aa8:	4b16      	ldr	r3, [pc, #88]	@ (8001b04 <currHourInc+0x74>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
 8001aae:	e01e      	b.n	8001aee <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 8001ab0:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <currHourInc+0x74>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b0b      	cmp	r3, #11
 8001ab6:	d10e      	bne.n	8001ad6 <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001ab8:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <currHourInc+0x74>)
 8001aba:	78db      	ldrb	r3, [r3, #3]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d103      	bne.n	8001ac8 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001ac0:	4b10      	ldr	r3, [pc, #64]	@ (8001b04 <currHourInc+0x74>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	70da      	strb	r2, [r3, #3]
 8001ac6:	e002      	b.n	8001ace <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b04 <currHourInc+0x74>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 8001ace:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <currHourInc+0x74>)
 8001ad0:	220c      	movs	r2, #12
 8001ad2:	701a      	strb	r2, [r3, #0]
 8001ad4:	e00b      	b.n	8001aee <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b0c <currHourInc+0x7c>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b0a      	cmp	r3, #10
 8001adc:	d806      	bhi.n	8001aec <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 8001ade:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <currHourInc+0x74>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <currHourInc+0x74>)
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	e000      	b.n	8001aee <currHourInc+0x5e>
	}
	else {
		__NOP();
 8001aec:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001aee:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <currHourInc+0x74>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001af4:	4b03      	ldr	r3, [pc, #12]	@ (8001b04 <currHourInc+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]

}
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	200000a8 	.word	0x200000a8
 8001b04:	20000094 	.word	0x20000094
 8001b08:	20000118 	.word	0x20000118
 8001b0c:	200000ac 	.word	0x200000ac

08001b10 <alarmMinuteInc>:

/*
 * Increment User alarm time minute
 */
void alarmMinuteInc(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 8001b14:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <alarmMinuteInc+0x38>)
 8001b16:	785b      	ldrb	r3, [r3, #1]
 8001b18:	2b3a      	cmp	r3, #58	@ 0x3a
 8001b1a:	d903      	bls.n	8001b24 <alarmMinuteInc+0x14>
		/*
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		//alarmHourInc();
		userAlarmTime.Minutes = 0;
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <alarmMinuteInc+0x38>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	705a      	strb	r2, [r3, #1]
 8001b22:	e00b      	b.n	8001b3c <alarmMinuteInc+0x2c>
	}
	else if(userAlarmTime.Minutes < 59) {
 8001b24:	4b08      	ldr	r3, [pc, #32]	@ (8001b48 <alarmMinuteInc+0x38>)
 8001b26:	785b      	ldrb	r3, [r3, #1]
 8001b28:	2b3a      	cmp	r3, #58	@ 0x3a
 8001b2a:	d806      	bhi.n	8001b3a <alarmMinuteInc+0x2a>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <alarmMinuteInc+0x38>)
 8001b2e:	785b      	ldrb	r3, [r3, #1]
 8001b30:	3301      	adds	r3, #1
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <alarmMinuteInc+0x38>)
 8001b36:	705a      	strb	r2, [r3, #1]
 8001b38:	e000      	b.n	8001b3c <alarmMinuteInc+0x2c>
	}
	else {
		__NOP();
 8001b3a:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001b3c:	f000 f882 	bl	8001c44 <updateRTCBackupReg>

}
 8001b40:	46c0      	nop			@ (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			@ (mov r8, r8)
 8001b48:	200000ac 	.word	0x200000ac

08001b4c <currMinuteInc>:

/*
 * Increment current time minute
 */
void currMinuteInc(void) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001b50:	4a11      	ldr	r2, [pc, #68]	@ (8001b98 <currMinuteInc+0x4c>)
 8001b52:	4912      	ldr	r1, [pc, #72]	@ (8001b9c <currMinuteInc+0x50>)
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <currMinuteInc+0x54>)
 8001b56:	0018      	movs	r0, r3
 8001b58:	f7fe ff7a 	bl	8000a50 <getRTCTime>

	if(currTime.Minutes >= 59) {
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b9c <currMinuteInc+0x50>)
 8001b5e:	785b      	ldrb	r3, [r3, #1]
 8001b60:	2b3a      	cmp	r3, #58	@ 0x3a
 8001b62:	d903      	bls.n	8001b6c <currMinuteInc+0x20>
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		// currHourInc();

		currTime.Minutes = 0;
 8001b64:	4b0d      	ldr	r3, [pc, #52]	@ (8001b9c <currMinuteInc+0x50>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	705a      	strb	r2, [r3, #1]
 8001b6a:	e00b      	b.n	8001b84 <currMinuteInc+0x38>
	}
	else if(currTime.Minutes < 59) {
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <currMinuteInc+0x50>)
 8001b6e:	785b      	ldrb	r3, [r3, #1]
 8001b70:	2b3a      	cmp	r3, #58	@ 0x3a
 8001b72:	d806      	bhi.n	8001b82 <currMinuteInc+0x36>
		currTime.Minutes = currTime.Minutes + 1;
 8001b74:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <currMinuteInc+0x50>)
 8001b76:	785b      	ldrb	r3, [r3, #1]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	4b07      	ldr	r3, [pc, #28]	@ (8001b9c <currMinuteInc+0x50>)
 8001b7e:	705a      	strb	r2, [r3, #1]
 8001b80:	e000      	b.n	8001b84 <currMinuteInc+0x38>
	}
	else {
		__NOP();
 8001b82:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001b84:	4b05      	ldr	r3, [pc, #20]	@ (8001b9c <currMinuteInc+0x50>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001b8a:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <currMinuteInc+0x50>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]

}
 8001b90:	46c0      	nop			@ (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			@ (mov r8, r8)
 8001b98:	200000a8 	.word	0x200000a8
 8001b9c:	20000094 	.word	0x20000094
 8001ba0:	20000118 	.word	0x20000118

08001ba4 <dispFault>:

/*
 * Displays a non-critical fault to indicate reduced functionality
 */
void dispFault(void) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
 8001ba8:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <dispFault+0x18>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2101      	movs	r1, #1
 8001bae:	2201      	movs	r2, #1
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f000 fece 	bl	8002952 <HAL_GPIO_WritePin>
}
 8001bb6:	46c0      	nop			@ (mov r8, r8)
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	2000002c 	.word	0x2000002c

08001bc0 <dispFailure>:

/*
 * Displays a critical failure and ceases all operations
 */
void dispFailure(void) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <dispFailure+0x78>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f003 fbb0 	bl	8005330 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001bd0:	4b19      	ldr	r3, [pc, #100]	@ (8001c38 <dispFailure+0x78>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f003 fb5f 	bl	8005298 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001bda:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <dispFailure+0x78>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be2:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001be4:	1cfb      	adds	r3, r7, #3
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001bea:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <dispFailure+0x78>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	4a11      	ldr	r2, [pc, #68]	@ (8001c3c <dispFailure+0x7c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d9f6      	bls.n	8001bea <dispFailure+0x2a>

			HAL_GPIO_TogglePin(alarmLEDPort, alarmLEDPin);
 8001bfc:	4b10      	ldr	r3, [pc, #64]	@ (8001c40 <dispFailure+0x80>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2280      	movs	r2, #128	@ 0x80
 8001c02:	0152      	lsls	r2, r2, #5
 8001c04:	0011      	movs	r1, r2
 8001c06:	0018      	movs	r0, r3
 8001c08:	f000 fec0 	bl	800298c <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <dispFailure+0x78>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c14:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001c16:	1cfb      	adds	r3, r7, #3
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	1e5a      	subs	r2, r3, #1
 8001c1c:	4193      	sbcs	r3, r2
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2201      	movs	r2, #1
 8001c22:	4053      	eors	r3, r2
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	001a      	movs	r2, r3
 8001c28:	1cfb      	adds	r3, r7, #3
 8001c2a:	701a      	strb	r2, [r3, #0]
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	2101      	movs	r1, #1
 8001c30:	400a      	ands	r2, r1
 8001c32:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001c34:	e7d9      	b.n	8001bea <dispFailure+0x2a>
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	20000048 	.word	0x20000048
 8001c3c:	00003ffe 	.word	0x00003ffe
 8001c40:	20000010 	.word	0x20000010

08001c44 <updateRTCBackupReg>:
}

/*
 * Updates RTC backup register with user alarm time to be later pulled from in the case of a power outage
 */
void updateRTCBackupReg(void) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8001c48:	4b0e      	ldr	r3, [pc, #56]	@ (8001c84 <updateRTCBackupReg+0x40>)
 8001c4a:	6819      	ldr	r1, [r3, #0]
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c88 <updateRTCBackupReg+0x44>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	001a      	movs	r2, r3
 8001c52:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <updateRTCBackupReg+0x48>)
 8001c54:	0018      	movs	r0, r3
 8001c56:	f003 fa8f 	bl	8005178 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c90 <updateRTCBackupReg+0x4c>)
 8001c5c:	6819      	ldr	r1, [r3, #0]
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <updateRTCBackupReg+0x44>)
 8001c60:	785b      	ldrb	r3, [r3, #1]
 8001c62:	001a      	movs	r2, r3
 8001c64:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <updateRTCBackupReg+0x48>)
 8001c66:	0018      	movs	r0, r3
 8001c68:	f003 fa86 	bl	8005178 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 8001c6c:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <updateRTCBackupReg+0x50>)
 8001c6e:	6819      	ldr	r1, [r3, #0]
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <updateRTCBackupReg+0x44>)
 8001c72:	78db      	ldrb	r3, [r3, #3]
 8001c74:	001a      	movs	r2, r3
 8001c76:	4b05      	ldr	r3, [pc, #20]	@ (8001c8c <updateRTCBackupReg+0x48>)
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f003 fa7d 	bl	8005178 <HAL_RTCEx_BKUPWrite>

}
 8001c7e:	46c0      	nop			@ (mov r8, r8)
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	200000c0 	.word	0x200000c0
 8001c88:	200000ac 	.word	0x200000ac
 8001c8c:	20000118 	.word	0x20000118
 8001c90:	20000038 	.word	0x20000038
 8001c94:	2000003c 	.word	0x2000003c

08001c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c9c:	b672      	cpsid	i
}
 8001c9e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca0:	46c0      	nop			@ (mov r8, r8)
 8001ca2:	e7fd      	b.n	8001ca0 <Error_Handler+0x8>

08001ca4 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8001ca4:	b5b0      	push	{r4, r5, r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	0005      	movs	r5, r0
 8001cac:	000c      	movs	r4, r1
 8001cae:	0010      	movs	r0, r2
 8001cb0:	0019      	movs	r1, r3
 8001cb2:	1dbb      	adds	r3, r7, #6
 8001cb4:	1c2a      	adds	r2, r5, #0
 8001cb6:	801a      	strh	r2, [r3, #0]
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	1c22      	adds	r2, r4, #0
 8001cbc:	801a      	strh	r2, [r3, #0]
 8001cbe:	1cbb      	adds	r3, r7, #2
 8001cc0:	1c02      	adds	r2, r0, #0
 8001cc2:	801a      	strh	r2, [r3, #0]
 8001cc4:	003b      	movs	r3, r7
 8001cc6:	1c0a      	adds	r2, r1, #0
 8001cc8:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001cca:	4b2e      	ldr	r3, [pc, #184]	@ (8001d84 <sevSeg_Init+0xe0>)
 8001ccc:	1dba      	adds	r2, r7, #6
 8001cce:	8812      	ldrh	r2, [r2, #0]
 8001cd0:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8001cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d88 <sevSeg_Init+0xe4>)
 8001cd4:	1d3a      	adds	r2, r7, #4
 8001cd6:	8812      	ldrh	r2, [r2, #0]
 8001cd8:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001cda:	4b2c      	ldr	r3, [pc, #176]	@ (8001d8c <sevSeg_Init+0xe8>)
 8001cdc:	1cba      	adds	r2, r7, #2
 8001cde:	8812      	ldrh	r2, [r2, #0]
 8001ce0:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8001ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d90 <sevSeg_Init+0xec>)
 8001ce4:	003a      	movs	r2, r7
 8001ce6:	8812      	ldrh	r2, [r2, #0]
 8001ce8:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001cea:	4a2a      	ldr	r2, [pc, #168]	@ (8001d94 <sevSeg_Init+0xf0>)
 8001cec:	2320      	movs	r3, #32
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8001cf4:	4a28      	ldr	r2, [pc, #160]	@ (8001d98 <sevSeg_Init+0xf4>)
 8001cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cf8:	0010      	movs	r0, r2
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	234c      	movs	r3, #76	@ 0x4c
 8001cfe:	001a      	movs	r2, r3
 8001d00:	f004 fb0c 	bl	800631c <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8001d04:	4b25      	ldr	r3, [pc, #148]	@ (8001d9c <sevSeg_Init+0xf8>)
 8001d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d08:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	e00b      	b.n	8001d28 <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d16:	18d3      	adds	r3, r2, r3
 8001d18:	6819      	ldr	r1, [r3, #0]
 8001d1a:	4b21      	ldr	r3, [pc, #132]	@ (8001da0 <sevSeg_Init+0xfc>)
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	0092      	lsls	r2, r2, #2
 8001d20:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3301      	adds	r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	ddf0      	ble.n	8001d10 <sevSeg_Init+0x6c>
	}

	sevSeg_setIntensity(50);
 8001d2e:	2032      	movs	r0, #50	@ 0x32
 8001d30:	f000 f8ec 	bl	8001f0c <sevSeg_setIntensity>
//	}
//
//	HAL_TIM_Base_Stop(htim);

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001d34:	4b1a      	ldr	r3, [pc, #104]	@ (8001da0 <sevSeg_Init+0xfc>)
 8001d36:	6918      	ldr	r0, [r3, #16]
 8001d38:	4b16      	ldr	r3, [pc, #88]	@ (8001d94 <sevSeg_Init+0xf0>)
 8001d3a:	8819      	ldrh	r1, [r3, #0]
 8001d3c:	4b19      	ldr	r3, [pc, #100]	@ (8001da4 <sevSeg_Init+0x100>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	001a      	movs	r2, r3
 8001d42:	f000 fe06 	bl	8002952 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001d46:	4b16      	ldr	r3, [pc, #88]	@ (8001da0 <sevSeg_Init+0xfc>)
 8001d48:	6918      	ldr	r0, [r3, #16]
 8001d4a:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <sevSeg_Init+0xf0>)
 8001d4c:	8819      	ldrh	r1, [r3, #0]
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <sevSeg_Init+0x100>)
 8001d50:	785b      	ldrb	r3, [r3, #1]
 8001d52:	001a      	movs	r2, r3
 8001d54:	f000 fdfd 	bl	8002952 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001d58:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <sevSeg_Init+0xfc>)
 8001d5a:	6898      	ldr	r0, [r3, #8]
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <sevSeg_Init+0xe8>)
 8001d5e:	8819      	ldrh	r1, [r3, #0]
 8001d60:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <sevSeg_Init+0x100>)
 8001d62:	785b      	ldrb	r3, [r3, #1]
 8001d64:	001a      	movs	r2, r3
 8001d66:	f000 fdf4 	bl	8002952 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001da0 <sevSeg_Init+0xfc>)
 8001d6c:	6898      	ldr	r0, [r3, #8]
 8001d6e:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <sevSeg_Init+0xe8>)
 8001d70:	8819      	ldrh	r1, [r3, #0]
 8001d72:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <sevSeg_Init+0x100>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	001a      	movs	r2, r3
 8001d78:	f000 fdeb 	bl	8002952 <HAL_GPIO_WritePin>

}
 8001d7c:	46c0      	nop			@ (mov r8, r8)
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b004      	add	sp, #16
 8001d82:	bdb0      	pop	{r4, r5, r7, pc}
 8001d84:	20000240 	.word	0x20000240
 8001d88:	20000242 	.word	0x20000242
 8001d8c:	20000244 	.word	0x20000244
 8001d90:	20000246 	.word	0x20000246
 8001d94:	20000248 	.word	0x20000248
 8001d98:	2000024c 	.word	0x2000024c
 8001d9c:	20000298 	.word	0x20000298
 8001da0:	20000050 	.word	0x20000050
 8001da4:	20000064 	.word	0x20000064

08001da8 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	210a      	movs	r1, #10
 8001db6:	0018      	movs	r0, r3
 8001db8:	f7fe f9a4 	bl	8000104 <__udivsi3>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	2408      	movs	r4, #8
 8001dc2:	193b      	adds	r3, r7, r4
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	210a      	movs	r1, #10
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f7fe fa1f 	bl	8000210 <__aeabi_uidivmod>
 8001dd2:	000b      	movs	r3, r1
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	193b      	adds	r3, r7, r4
 8001dd8:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001dde:	210a      	movs	r1, #10
 8001de0:	0018      	movs	r0, r3
 8001de2:	f7fe f98f 	bl	8000104 <__udivsi3>
 8001de6:	0003      	movs	r3, r0
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	193b      	adds	r3, r7, r4
 8001dec:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001df2:	210a      	movs	r1, #10
 8001df4:	0018      	movs	r0, r3
 8001df6:	f7fe fa0b 	bl	8000210 <__aeabi_uidivmod>
 8001dfa:	000b      	movs	r3, r1
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	193b      	adds	r3, r7, r4
 8001e00:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 8001e02:	2116      	movs	r1, #22
 8001e04:	187b      	adds	r3, r7, r1
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	78db      	ldrb	r3, [r3, #3]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d102      	bne.n	8001e18 <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 8001e12:	187b      	adds	r3, r7, r1
 8001e14:	2202      	movs	r2, #2
 8001e16:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	e04f      	b.n	8001ebe <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 8001e1e:	2308      	movs	r3, #8
 8001e20:	18fa      	adds	r2, r7, r3
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	18d3      	adds	r3, r2, r3
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	0019      	movs	r1, r3
 8001e2a:	2417      	movs	r4, #23
 8001e2c:	193b      	adds	r3, r7, r4
 8001e2e:	4a30      	ldr	r2, [pc, #192]	@ (8001ef0 <sevSeg_updateDigits+0x148>)
 8001e30:	5c52      	ldrb	r2, [r2, r1]
 8001e32:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d110      	bne.n	8001e5c <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	210a      	movs	r1, #10
 8001e40:	0018      	movs	r0, r3
 8001e42:	f7fe f95f 	bl	8000104 <__udivsi3>
 8001e46:	0003      	movs	r3, r0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	001a      	movs	r2, r3
 8001e4c:	2316      	movs	r3, #22
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	18d2      	adds	r2, r2, r3
 8001e54:	193b      	adds	r3, r7, r4
 8001e56:	4927      	ldr	r1, [pc, #156]	@ (8001ef4 <sevSeg_updateDigits+0x14c>)
 8001e58:	5c8a      	ldrb	r2, [r1, r2]
 8001e5a:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	e027      	b.n	8001eb2 <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001e62:	4b25      	ldr	r3, [pc, #148]	@ (8001ef8 <sevSeg_updateDigits+0x150>)
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	4b25      	ldr	r3, [pc, #148]	@ (8001efc <sevSeg_updateDigits+0x154>)
 8001e68:	8819      	ldrh	r1, [r3, #0]
 8001e6a:	2417      	movs	r4, #23
 8001e6c:	193b      	adds	r3, r7, r4
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2201      	movs	r2, #1
 8001e72:	4013      	ands	r3, r2
 8001e74:	4a22      	ldr	r2, [pc, #136]	@ (8001f00 <sevSeg_updateDigits+0x158>)
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
 8001e78:	001a      	movs	r2, r3
 8001e7a:	f000 fd6a 	bl	8002952 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <sevSeg_updateDigits+0x150>)
 8001e80:	6858      	ldr	r0, [r3, #4]
 8001e82:	4b20      	ldr	r3, [pc, #128]	@ (8001f04 <sevSeg_updateDigits+0x15c>)
 8001e84:	8819      	ldrh	r1, [r3, #0]
 8001e86:	4b1e      	ldr	r3, [pc, #120]	@ (8001f00 <sevSeg_updateDigits+0x158>)
 8001e88:	785b      	ldrb	r3, [r3, #1]
 8001e8a:	001a      	movs	r2, r3
 8001e8c:	f000 fd61 	bl	8002952 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001e90:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <sevSeg_updateDigits+0x150>)
 8001e92:	6858      	ldr	r0, [r3, #4]
 8001e94:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <sevSeg_updateDigits+0x15c>)
 8001e96:	8819      	ldrh	r1, [r3, #0]
 8001e98:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <sevSeg_updateDigits+0x158>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	001a      	movs	r2, r3
 8001e9e:	f000 fd58 	bl	8002952 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001ea2:	193b      	adds	r3, r7, r4
 8001ea4:	193a      	adds	r2, r7, r4
 8001ea6:	7812      	ldrb	r2, [r2, #0]
 8001ea8:	0852      	lsrs	r2, r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b07      	cmp	r3, #7
 8001eb6:	ddd4      	ble.n	8001e62 <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	ddac      	ble.n	8001e1e <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <sevSeg_updateDigits+0x150>)
 8001ec6:	6898      	ldr	r0, [r3, #8]
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <sevSeg_updateDigits+0x160>)
 8001eca:	8819      	ldrh	r1, [r3, #0]
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <sevSeg_updateDigits+0x158>)
 8001ece:	785b      	ldrb	r3, [r3, #1]
 8001ed0:	001a      	movs	r2, r3
 8001ed2:	f000 fd3e 	bl	8002952 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001ed6:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <sevSeg_updateDigits+0x150>)
 8001ed8:	6898      	ldr	r0, [r3, #8]
 8001eda:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <sevSeg_updateDigits+0x160>)
 8001edc:	8819      	ldrh	r1, [r3, #0]
 8001ede:	4b08      	ldr	r3, [pc, #32]	@ (8001f00 <sevSeg_updateDigits+0x158>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	001a      	movs	r2, r3
 8001ee4:	f000 fd35 	bl	8002952 <HAL_GPIO_WritePin>

	return;
 8001ee8:	46c0      	nop			@ (mov r8, r8)

}
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b007      	add	sp, #28
 8001eee:	bd90      	pop	{r4, r7, pc}
 8001ef0:	08006370 	.word	0x08006370
 8001ef4:	0800637c 	.word	0x0800637c
 8001ef8:	20000050 	.word	0x20000050
 8001efc:	20000240 	.word	0x20000240
 8001f00:	20000064 	.word	0x20000064
 8001f04:	20000242 	.word	0x20000242
 8001f08:	20000244 	.word	0x20000244

08001f0c <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	0002      	movs	r2, r0
 8001f14:	1dbb      	adds	r3, r7, #6
 8001f16:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 8001f18:	4b20      	ldr	r3, [pc, #128]	@ (8001f9c <sevSeg_setIntensity+0x90>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d105      	bne.n	8001f2c <sevSeg_setIntensity+0x20>
 8001f20:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa0 <sevSeg_setIntensity+0x94>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	1dba      	adds	r2, r7, #6
 8001f26:	8812      	ldrh	r2, [r2, #0]
 8001f28:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f2a:	e02c      	b.n	8001f86 <sevSeg_setIntensity+0x7a>
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f9c <sevSeg_setIntensity+0x90>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d105      	bne.n	8001f40 <sevSeg_setIntensity+0x34>
 8001f34:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa0 <sevSeg_setIntensity+0x94>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	1dbb      	adds	r3, r7, #6
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	6393      	str	r3, [r2, #56]	@ 0x38
 8001f3e:	e022      	b.n	8001f86 <sevSeg_setIntensity+0x7a>
 8001f40:	4b16      	ldr	r3, [pc, #88]	@ (8001f9c <sevSeg_setIntensity+0x90>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d105      	bne.n	8001f54 <sevSeg_setIntensity+0x48>
 8001f48:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <sevSeg_setIntensity+0x94>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	1dbb      	adds	r3, r7, #6
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001f52:	e018      	b.n	8001f86 <sevSeg_setIntensity+0x7a>
 8001f54:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <sevSeg_setIntensity+0x90>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b0c      	cmp	r3, #12
 8001f5a:	d105      	bne.n	8001f68 <sevSeg_setIntensity+0x5c>
 8001f5c:	4b10      	ldr	r3, [pc, #64]	@ (8001fa0 <sevSeg_setIntensity+0x94>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	1dbb      	adds	r3, r7, #6
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f66:	e00e      	b.n	8001f86 <sevSeg_setIntensity+0x7a>
 8001f68:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <sevSeg_setIntensity+0x90>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b10      	cmp	r3, #16
 8001f6e:	d105      	bne.n	8001f7c <sevSeg_setIntensity+0x70>
 8001f70:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <sevSeg_setIntensity+0x94>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	1dbb      	adds	r3, r7, #6
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f7a:	e004      	b.n	8001f86 <sevSeg_setIntensity+0x7a>
 8001f7c:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <sevSeg_setIntensity+0x94>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	1dbb      	adds	r3, r7, #6
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 8001f86:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <sevSeg_setIntensity+0x90>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <sevSeg_setIntensity+0x94>)
 8001f8c:	0011      	movs	r1, r2
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f003 face 	bl	8005530 <HAL_TIM_PWM_Start>

}
 8001f94:	46c0      	nop			@ (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b002      	add	sp, #8
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000298 	.word	0x20000298
 8001fa0:	2000024c 	.word	0x2000024c

08001fa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001faa:	4b13      	ldr	r3, [pc, #76]	@ (8001ff8 <HAL_MspInit+0x54>)
 8001fac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fae:	4b12      	ldr	r3, [pc, #72]	@ (8001ff8 <HAL_MspInit+0x54>)
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ff8 <HAL_MspInit+0x54>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fba:	2201      	movs	r2, #1
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff8 <HAL_MspInit+0x54>)
 8001fc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <HAL_MspInit+0x54>)
 8001fc8:	2180      	movs	r1, #128	@ 0x80
 8001fca:	0549      	lsls	r1, r1, #21
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001fd0:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <HAL_MspInit+0x54>)
 8001fd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fd4:	2380      	movs	r3, #128	@ 0x80
 8001fd6:	055b      	lsls	r3, r3, #21
 8001fd8:	4013      	ands	r3, r2
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	2004      	movs	r0, #4
 8001fe4:	f000 fb02 	bl	80025ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001fe8:	2004      	movs	r0, #4
 8001fea:	f000 fb14 	bl	8002616 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b002      	add	sp, #8
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	40021000 	.word	0x40021000

08001ffc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b095      	sub	sp, #84	@ 0x54
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	233c      	movs	r3, #60	@ 0x3c
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	0018      	movs	r0, r3
 800200a:	2314      	movs	r3, #20
 800200c:	001a      	movs	r2, r3
 800200e:	2100      	movs	r1, #0
 8002010:	f004 f958 	bl	80062c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002014:	2414      	movs	r4, #20
 8002016:	193b      	adds	r3, r7, r4
 8002018:	0018      	movs	r0, r3
 800201a:	2328      	movs	r3, #40	@ 0x28
 800201c:	001a      	movs	r2, r3
 800201e:	2100      	movs	r1, #0
 8002020:	f004 f950 	bl	80062c4 <memset>
  if(hi2c->Instance==I2C1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a22      	ldr	r2, [pc, #136]	@ (80020b4 <HAL_I2C_MspInit+0xb8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d13d      	bne.n	80020aa <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800202e:	193b      	adds	r3, r7, r4
 8002030:	2220      	movs	r2, #32
 8002032:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002034:	193b      	adds	r3, r7, r4
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800203a:	193b      	adds	r3, r7, r4
 800203c:	0018      	movs	r0, r3
 800203e:	f002 f83b 	bl	80040b8 <HAL_RCCEx_PeriphCLKConfig>
 8002042:	1e03      	subs	r3, r0, #0
 8002044:	d001      	beq.n	800204a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002046:	f7ff fe27 	bl	8001c98 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204a:	4b1b      	ldr	r3, [pc, #108]	@ (80020b8 <HAL_I2C_MspInit+0xbc>)
 800204c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800204e:	4b1a      	ldr	r3, [pc, #104]	@ (80020b8 <HAL_I2C_MspInit+0xbc>)
 8002050:	2102      	movs	r1, #2
 8002052:	430a      	orrs	r2, r1
 8002054:	635a      	str	r2, [r3, #52]	@ 0x34
 8002056:	4b18      	ldr	r3, [pc, #96]	@ (80020b8 <HAL_I2C_MspInit+0xbc>)
 8002058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800205a:	2202      	movs	r2, #2
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002062:	213c      	movs	r1, #60	@ 0x3c
 8002064:	187b      	adds	r3, r7, r1
 8002066:	22c0      	movs	r2, #192	@ 0xc0
 8002068:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800206a:	187b      	adds	r3, r7, r1
 800206c:	2212      	movs	r2, #18
 800206e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	187b      	adds	r3, r7, r1
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	187b      	adds	r3, r7, r1
 8002078:	2200      	movs	r2, #0
 800207a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800207c:	187b      	adds	r3, r7, r1
 800207e:	2206      	movs	r2, #6
 8002080:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002082:	187b      	adds	r3, r7, r1
 8002084:	4a0d      	ldr	r2, [pc, #52]	@ (80020bc <HAL_I2C_MspInit+0xc0>)
 8002086:	0019      	movs	r1, r3
 8002088:	0010      	movs	r0, r2
 800208a:	f000 fae1 	bl	8002650 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800208e:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <HAL_I2C_MspInit+0xbc>)
 8002090:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002092:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <HAL_I2C_MspInit+0xbc>)
 8002094:	2180      	movs	r1, #128	@ 0x80
 8002096:	0389      	lsls	r1, r1, #14
 8002098:	430a      	orrs	r2, r1
 800209a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800209c:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_I2C_MspInit+0xbc>)
 800209e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020a0:	2380      	movs	r3, #128	@ 0x80
 80020a2:	039b      	lsls	r3, r3, #14
 80020a4:	4013      	ands	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020aa:	46c0      	nop			@ (mov r8, r8)
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b015      	add	sp, #84	@ 0x54
 80020b0:	bd90      	pop	{r4, r7, pc}
 80020b2:	46c0      	nop			@ (mov r8, r8)
 80020b4:	40005400 	.word	0x40005400
 80020b8:	40021000 	.word	0x40021000
 80020bc:	50000400 	.word	0x50000400

080020c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b08f      	sub	sp, #60	@ 0x3c
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c8:	2410      	movs	r4, #16
 80020ca:	193b      	adds	r3, r7, r4
 80020cc:	0018      	movs	r0, r3
 80020ce:	2328      	movs	r3, #40	@ 0x28
 80020d0:	001a      	movs	r2, r3
 80020d2:	2100      	movs	r1, #0
 80020d4:	f004 f8f6 	bl	80062c4 <memset>
  if(hrtc->Instance==RTC)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a19      	ldr	r2, [pc, #100]	@ (8002144 <HAL_RTC_MspInit+0x84>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d12c      	bne.n	800213c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020e2:	193b      	adds	r3, r7, r4
 80020e4:	2280      	movs	r2, #128	@ 0x80
 80020e6:	0292      	lsls	r2, r2, #10
 80020e8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020ea:	193b      	adds	r3, r7, r4
 80020ec:	2280      	movs	r2, #128	@ 0x80
 80020ee:	0052      	lsls	r2, r2, #1
 80020f0:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020f2:	193b      	adds	r3, r7, r4
 80020f4:	0018      	movs	r0, r3
 80020f6:	f001 ffdf 	bl	80040b8 <HAL_RCCEx_PeriphCLKConfig>
 80020fa:	1e03      	subs	r3, r0, #0
 80020fc:	d001      	beq.n	8002102 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80020fe:	f7ff fdcb 	bl	8001c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002102:	4b11      	ldr	r3, [pc, #68]	@ (8002148 <HAL_RTC_MspInit+0x88>)
 8002104:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002106:	4b10      	ldr	r3, [pc, #64]	@ (8002148 <HAL_RTC_MspInit+0x88>)
 8002108:	2180      	movs	r1, #128	@ 0x80
 800210a:	0209      	lsls	r1, r1, #8
 800210c:	430a      	orrs	r2, r1
 800210e:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002110:	4b0d      	ldr	r3, [pc, #52]	@ (8002148 <HAL_RTC_MspInit+0x88>)
 8002112:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002114:	4b0c      	ldr	r3, [pc, #48]	@ (8002148 <HAL_RTC_MspInit+0x88>)
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	00c9      	lsls	r1, r1, #3
 800211a:	430a      	orrs	r2, r1
 800211c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800211e:	4b0a      	ldr	r3, [pc, #40]	@ (8002148 <HAL_RTC_MspInit+0x88>)
 8002120:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002122:	2380      	movs	r3, #128	@ 0x80
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4013      	ands	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800212c:	2200      	movs	r2, #0
 800212e:	2100      	movs	r1, #0
 8002130:	2002      	movs	r0, #2
 8002132:	f000 fa5b 	bl	80025ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8002136:	2002      	movs	r0, #2
 8002138:	f000 fa6d 	bl	8002616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800213c:	46c0      	nop			@ (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b00f      	add	sp, #60	@ 0x3c
 8002142:	bd90      	pop	{r4, r7, pc}
 8002144:	40002800 	.word	0x40002800
 8002148:	40021000 	.word	0x40021000

0800214c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2380      	movs	r3, #128	@ 0x80
 800215a:	05db      	lsls	r3, r3, #23
 800215c:	429a      	cmp	r2, r3
 800215e:	d10b      	bne.n	8002178 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002160:	4b07      	ldr	r3, [pc, #28]	@ (8002180 <HAL_TIM_PWM_MspInit+0x34>)
 8002162:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002164:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <HAL_TIM_PWM_MspInit+0x34>)
 8002166:	2101      	movs	r1, #1
 8002168:	430a      	orrs	r2, r1
 800216a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800216c:	4b04      	ldr	r3, [pc, #16]	@ (8002180 <HAL_TIM_PWM_MspInit+0x34>)
 800216e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002170:	2201      	movs	r2, #1
 8002172:	4013      	ands	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002178:	46c0      	nop			@ (mov r8, r8)
 800217a:	46bd      	mov	sp, r7
 800217c:	b004      	add	sp, #16
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40021000 	.word	0x40021000

08002184 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a18      	ldr	r2, [pc, #96]	@ (80021f4 <HAL_TIM_Base_MspInit+0x70>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d10e      	bne.n	80021b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002196:	4b18      	ldr	r3, [pc, #96]	@ (80021f8 <HAL_TIM_Base_MspInit+0x74>)
 8002198:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800219a:	4b17      	ldr	r3, [pc, #92]	@ (80021f8 <HAL_TIM_Base_MspInit+0x74>)
 800219c:	2180      	movs	r1, #128	@ 0x80
 800219e:	0209      	lsls	r1, r1, #8
 80021a0:	430a      	orrs	r2, r1
 80021a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80021a4:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <HAL_TIM_Base_MspInit+0x74>)
 80021a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021a8:	2380      	movs	r3, #128	@ 0x80
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	4013      	ands	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80021b2:	e01a      	b.n	80021ea <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a10      	ldr	r2, [pc, #64]	@ (80021fc <HAL_TIM_Base_MspInit+0x78>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d115      	bne.n	80021ea <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80021be:	4b0e      	ldr	r3, [pc, #56]	@ (80021f8 <HAL_TIM_Base_MspInit+0x74>)
 80021c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021c2:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <HAL_TIM_Base_MspInit+0x74>)
 80021c4:	2180      	movs	r1, #128	@ 0x80
 80021c6:	0289      	lsls	r1, r1, #10
 80021c8:	430a      	orrs	r2, r1
 80021ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80021cc:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <HAL_TIM_Base_MspInit+0x74>)
 80021ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021d0:	2380      	movs	r3, #128	@ 0x80
 80021d2:	029b      	lsls	r3, r3, #10
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	2015      	movs	r0, #21
 80021e0:	f000 fa04 	bl	80025ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80021e4:	2015      	movs	r0, #21
 80021e6:	f000 fa16 	bl	8002616 <HAL_NVIC_EnableIRQ>
}
 80021ea:	46c0      	nop			@ (mov r8, r8)
 80021ec:	46bd      	mov	sp, r7
 80021ee:	b004      	add	sp, #16
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	46c0      	nop			@ (mov r8, r8)
 80021f4:	40002000 	.word	0x40002000
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40014400 	.word	0x40014400

08002200 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b089      	sub	sp, #36	@ 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	240c      	movs	r4, #12
 800220a:	193b      	adds	r3, r7, r4
 800220c:	0018      	movs	r0, r3
 800220e:	2314      	movs	r3, #20
 8002210:	001a      	movs	r2, r3
 8002212:	2100      	movs	r1, #0
 8002214:	f004 f856 	bl	80062c4 <memset>
  if(htim->Instance==TIM2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	2380      	movs	r3, #128	@ 0x80
 800221e:	05db      	lsls	r3, r3, #23
 8002220:	429a      	cmp	r2, r3
 8002222:	d121      	bne.n	8002268 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002224:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HAL_TIM_MspPostInit+0x70>)
 8002226:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002228:	4b11      	ldr	r3, [pc, #68]	@ (8002270 <HAL_TIM_MspPostInit+0x70>)
 800222a:	2104      	movs	r1, #4
 800222c:	430a      	orrs	r2, r1
 800222e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002230:	4b0f      	ldr	r3, [pc, #60]	@ (8002270 <HAL_TIM_MspPostInit+0x70>)
 8002232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002234:	2204      	movs	r2, #4
 8002236:	4013      	ands	r3, r2
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 800223c:	0021      	movs	r1, r4
 800223e:	187b      	adds	r3, r7, r1
 8002240:	2240      	movs	r2, #64	@ 0x40
 8002242:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	187b      	adds	r3, r7, r1
 8002246:	2202      	movs	r2, #2
 8002248:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	187b      	adds	r3, r7, r1
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	187b      	adds	r3, r7, r1
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002256:	187b      	adds	r3, r7, r1
 8002258:	2202      	movs	r2, #2
 800225a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 800225c:	187b      	adds	r3, r7, r1
 800225e:	4a05      	ldr	r2, [pc, #20]	@ (8002274 <HAL_TIM_MspPostInit+0x74>)
 8002260:	0019      	movs	r1, r3
 8002262:	0010      	movs	r0, r2
 8002264:	f000 f9f4 	bl	8002650 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002268:	46c0      	nop			@ (mov r8, r8)
 800226a:	46bd      	mov	sp, r7
 800226c:	b009      	add	sp, #36	@ 0x24
 800226e:	bd90      	pop	{r4, r7, pc}
 8002270:	40021000 	.word	0x40021000
 8002274:	50000800 	.word	0x50000800

08002278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800227c:	46c0      	nop			@ (mov r8, r8)
 800227e:	e7fd      	b.n	800227c <NMI_Handler+0x4>

08002280 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002284:	46c0      	nop			@ (mov r8, r8)
 8002286:	e7fd      	b.n	8002284 <HardFault_Handler+0x4>

08002288 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800228c:	46c0      	nop			@ (mov r8, r8)
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002296:	46c0      	nop			@ (mov r8, r8)
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022a0:	f000 f8dc 	bl	800245c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a4:	46c0      	nop			@ (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80022b0:	4b03      	ldr	r3, [pc, #12]	@ (80022c0 <RTC_TAMP_IRQHandler+0x14>)
 80022b2:	0018      	movs	r0, r3
 80022b4:	f002 fd7e 	bl	8004db4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80022b8:	46c0      	nop			@ (mov r8, r8)
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	20000118 	.word	0x20000118

080022c4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80022c8:	46c0      	nop			@ (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 80022d2:	2001      	movs	r0, #1
 80022d4:	f000 fb76 	bl	80029c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 80022d8:	2002      	movs	r0, #2
 80022da:	f000 fb73 	bl	80029c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 80022e8:	2004      	movs	r0, #4
 80022ea:	f000 fb6b 	bl	80029c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 80022ee:	2008      	movs	r0, #8
 80022f0:	f000 fb68 	bl	80029c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80022f4:	46c0      	nop			@ (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 80022fe:	2380      	movs	r3, #128	@ 0x80
 8002300:	021b      	lsls	r3, r3, #8
 8002302:	0018      	movs	r0, r3
 8002304:	f000 fb5e 	bl	80029c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002308:	46c0      	nop			@ (mov r8, r8)
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002314:	4b03      	ldr	r3, [pc, #12]	@ (8002324 <TIM16_IRQHandler+0x14>)
 8002316:	0018      	movs	r0, r3
 8002318:	f003 f9e8 	bl	80056ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800231c:	46c0      	nop			@ (mov r8, r8)
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			@ (mov r8, r8)
 8002324:	200001dc 	.word	0x200001dc

08002328 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800232c:	46c0      	nop			@ (mov r8, r8)
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002334:	480d      	ldr	r0, [pc, #52]	@ (800236c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002336:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002338:	f7ff fff6 	bl	8002328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800233c:	480c      	ldr	r0, [pc, #48]	@ (8002370 <LoopForever+0x6>)
  ldr r1, =_edata
 800233e:	490d      	ldr	r1, [pc, #52]	@ (8002374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002340:	4a0d      	ldr	r2, [pc, #52]	@ (8002378 <LoopForever+0xe>)
  movs r3, #0
 8002342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002344:	e002      	b.n	800234c <LoopCopyDataInit>

08002346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800234a:	3304      	adds	r3, #4

0800234c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800234c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002350:	d3f9      	bcc.n	8002346 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002352:	4a0a      	ldr	r2, [pc, #40]	@ (800237c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002354:	4c0a      	ldr	r4, [pc, #40]	@ (8002380 <LoopForever+0x16>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002358:	e001      	b.n	800235e <LoopFillZerobss>

0800235a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800235a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800235c:	3204      	adds	r2, #4

0800235e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002360:	d3fb      	bcc.n	800235a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002362:	f003 ffb7 	bl	80062d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002366:	f7fe fb89 	bl	8000a7c <main>

0800236a <LoopForever>:

LoopForever:
  b LoopForever
 800236a:	e7fe      	b.n	800236a <LoopForever>
  ldr   r0, =_estack
 800236c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002374:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002378:	0800641c 	.word	0x0800641c
  ldr r2, =_sbss
 800237c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002380:	200002a0 	.word	0x200002a0

08002384 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002384:	e7fe      	b.n	8002384 <ADC1_IRQHandler>
	...

08002388 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800238e:	1dfb      	adds	r3, r7, #7
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002394:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <HAL_Init+0x3c>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <HAL_Init+0x3c>)
 800239a:	2180      	movs	r1, #128	@ 0x80
 800239c:	0049      	lsls	r1, r1, #1
 800239e:	430a      	orrs	r2, r1
 80023a0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023a2:	2003      	movs	r0, #3
 80023a4:	f000 f810 	bl	80023c8 <HAL_InitTick>
 80023a8:	1e03      	subs	r3, r0, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80023ac:	1dfb      	adds	r3, r7, #7
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	e001      	b.n	80023b8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80023b4:	f7ff fdf6 	bl	8001fa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023b8:	1dfb      	adds	r3, r7, #7
 80023ba:	781b      	ldrb	r3, [r3, #0]
}
 80023bc:	0018      	movs	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	b002      	add	sp, #8
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40022000 	.word	0x40022000

080023c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023d0:	230f      	movs	r3, #15
 80023d2:	18fb      	adds	r3, r7, r3
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80023d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002450 <HAL_InitTick+0x88>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d02b      	beq.n	8002438 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80023e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002454 <HAL_InitTick+0x8c>)
 80023e2:	681c      	ldr	r4, [r3, #0]
 80023e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002450 <HAL_InitTick+0x88>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	0019      	movs	r1, r3
 80023ea:	23fa      	movs	r3, #250	@ 0xfa
 80023ec:	0098      	lsls	r0, r3, #2
 80023ee:	f7fd fe89 	bl	8000104 <__udivsi3>
 80023f2:	0003      	movs	r3, r0
 80023f4:	0019      	movs	r1, r3
 80023f6:	0020      	movs	r0, r4
 80023f8:	f7fd fe84 	bl	8000104 <__udivsi3>
 80023fc:	0003      	movs	r3, r0
 80023fe:	0018      	movs	r0, r3
 8002400:	f000 f919 	bl	8002636 <HAL_SYSTICK_Config>
 8002404:	1e03      	subs	r3, r0, #0
 8002406:	d112      	bne.n	800242e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d80a      	bhi.n	8002424 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	2301      	movs	r3, #1
 8002412:	425b      	negs	r3, r3
 8002414:	2200      	movs	r2, #0
 8002416:	0018      	movs	r0, r3
 8002418:	f000 f8e8 	bl	80025ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800241c:	4b0e      	ldr	r3, [pc, #56]	@ (8002458 <HAL_InitTick+0x90>)
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	e00d      	b.n	8002440 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002424:	230f      	movs	r3, #15
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
 800242c:	e008      	b.n	8002440 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800242e:	230f      	movs	r3, #15
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]
 8002436:	e003      	b.n	8002440 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002438:	230f      	movs	r3, #15
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002440:	230f      	movs	r3, #15
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	781b      	ldrb	r3, [r3, #0]
}
 8002446:	0018      	movs	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	b005      	add	sp, #20
 800244c:	bd90      	pop	{r4, r7, pc}
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	20000070 	.word	0x20000070
 8002454:	20000068 	.word	0x20000068
 8002458:	2000006c 	.word	0x2000006c

0800245c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002460:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <HAL_IncTick+0x1c>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	001a      	movs	r2, r3
 8002466:	4b05      	ldr	r3, [pc, #20]	@ (800247c <HAL_IncTick+0x20>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	18d2      	adds	r2, r2, r3
 800246c:	4b03      	ldr	r3, [pc, #12]	@ (800247c <HAL_IncTick+0x20>)
 800246e:	601a      	str	r2, [r3, #0]
}
 8002470:	46c0      	nop			@ (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	20000070 	.word	0x20000070
 800247c:	2000029c 	.word	0x2000029c

08002480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  return uwTick;
 8002484:	4b02      	ldr	r3, [pc, #8]	@ (8002490 <HAL_GetTick+0x10>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			@ (mov r8, r8)
 8002490:	2000029c 	.word	0x2000029c

08002494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	0002      	movs	r2, r0
 800249c:	1dfb      	adds	r3, r7, #7
 800249e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024a0:	1dfb      	adds	r3, r7, #7
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80024a6:	d809      	bhi.n	80024bc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a8:	1dfb      	adds	r3, r7, #7
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	001a      	movs	r2, r3
 80024ae:	231f      	movs	r3, #31
 80024b0:	401a      	ands	r2, r3
 80024b2:	4b04      	ldr	r3, [pc, #16]	@ (80024c4 <__NVIC_EnableIRQ+0x30>)
 80024b4:	2101      	movs	r1, #1
 80024b6:	4091      	lsls	r1, r2
 80024b8:	000a      	movs	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80024bc:	46c0      	nop			@ (mov r8, r8)
 80024be:	46bd      	mov	sp, r7
 80024c0:	b002      	add	sp, #8
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	0002      	movs	r2, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	1dfb      	adds	r3, r7, #7
 80024d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024d6:	1dfb      	adds	r3, r7, #7
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b7f      	cmp	r3, #127	@ 0x7f
 80024dc:	d828      	bhi.n	8002530 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024de:	4a2f      	ldr	r2, [pc, #188]	@ (800259c <__NVIC_SetPriority+0xd4>)
 80024e0:	1dfb      	adds	r3, r7, #7
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	b25b      	sxtb	r3, r3
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	33c0      	adds	r3, #192	@ 0xc0
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	589b      	ldr	r3, [r3, r2]
 80024ee:	1dfa      	adds	r2, r7, #7
 80024f0:	7812      	ldrb	r2, [r2, #0]
 80024f2:	0011      	movs	r1, r2
 80024f4:	2203      	movs	r2, #3
 80024f6:	400a      	ands	r2, r1
 80024f8:	00d2      	lsls	r2, r2, #3
 80024fa:	21ff      	movs	r1, #255	@ 0xff
 80024fc:	4091      	lsls	r1, r2
 80024fe:	000a      	movs	r2, r1
 8002500:	43d2      	mvns	r2, r2
 8002502:	401a      	ands	r2, r3
 8002504:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	019b      	lsls	r3, r3, #6
 800250a:	22ff      	movs	r2, #255	@ 0xff
 800250c:	401a      	ands	r2, r3
 800250e:	1dfb      	adds	r3, r7, #7
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	0018      	movs	r0, r3
 8002514:	2303      	movs	r3, #3
 8002516:	4003      	ands	r3, r0
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800251c:	481f      	ldr	r0, [pc, #124]	@ (800259c <__NVIC_SetPriority+0xd4>)
 800251e:	1dfb      	adds	r3, r7, #7
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	b25b      	sxtb	r3, r3
 8002524:	089b      	lsrs	r3, r3, #2
 8002526:	430a      	orrs	r2, r1
 8002528:	33c0      	adds	r3, #192	@ 0xc0
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800252e:	e031      	b.n	8002594 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002530:	4a1b      	ldr	r2, [pc, #108]	@ (80025a0 <__NVIC_SetPriority+0xd8>)
 8002532:	1dfb      	adds	r3, r7, #7
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	0019      	movs	r1, r3
 8002538:	230f      	movs	r3, #15
 800253a:	400b      	ands	r3, r1
 800253c:	3b08      	subs	r3, #8
 800253e:	089b      	lsrs	r3, r3, #2
 8002540:	3306      	adds	r3, #6
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	18d3      	adds	r3, r2, r3
 8002546:	3304      	adds	r3, #4
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	1dfa      	adds	r2, r7, #7
 800254c:	7812      	ldrb	r2, [r2, #0]
 800254e:	0011      	movs	r1, r2
 8002550:	2203      	movs	r2, #3
 8002552:	400a      	ands	r2, r1
 8002554:	00d2      	lsls	r2, r2, #3
 8002556:	21ff      	movs	r1, #255	@ 0xff
 8002558:	4091      	lsls	r1, r2
 800255a:	000a      	movs	r2, r1
 800255c:	43d2      	mvns	r2, r2
 800255e:	401a      	ands	r2, r3
 8002560:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	019b      	lsls	r3, r3, #6
 8002566:	22ff      	movs	r2, #255	@ 0xff
 8002568:	401a      	ands	r2, r3
 800256a:	1dfb      	adds	r3, r7, #7
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	0018      	movs	r0, r3
 8002570:	2303      	movs	r3, #3
 8002572:	4003      	ands	r3, r0
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002578:	4809      	ldr	r0, [pc, #36]	@ (80025a0 <__NVIC_SetPriority+0xd8>)
 800257a:	1dfb      	adds	r3, r7, #7
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	001c      	movs	r4, r3
 8002580:	230f      	movs	r3, #15
 8002582:	4023      	ands	r3, r4
 8002584:	3b08      	subs	r3, #8
 8002586:	089b      	lsrs	r3, r3, #2
 8002588:	430a      	orrs	r2, r1
 800258a:	3306      	adds	r3, #6
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	18c3      	adds	r3, r0, r3
 8002590:	3304      	adds	r3, #4
 8002592:	601a      	str	r2, [r3, #0]
}
 8002594:	46c0      	nop			@ (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b003      	add	sp, #12
 800259a:	bd90      	pop	{r4, r7, pc}
 800259c:	e000e100 	.word	0xe000e100
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	1e5a      	subs	r2, r3, #1
 80025b0:	2380      	movs	r3, #128	@ 0x80
 80025b2:	045b      	lsls	r3, r3, #17
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d301      	bcc.n	80025bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025b8:	2301      	movs	r3, #1
 80025ba:	e010      	b.n	80025de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025bc:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <SysTick_Config+0x44>)
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	3a01      	subs	r2, #1
 80025c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025c4:	2301      	movs	r3, #1
 80025c6:	425b      	negs	r3, r3
 80025c8:	2103      	movs	r1, #3
 80025ca:	0018      	movs	r0, r3
 80025cc:	f7ff ff7c 	bl	80024c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d0:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <SysTick_Config+0x44>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025d6:	4b04      	ldr	r3, [pc, #16]	@ (80025e8 <SysTick_Config+0x44>)
 80025d8:	2207      	movs	r2, #7
 80025da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025dc:	2300      	movs	r3, #0
}
 80025de:	0018      	movs	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b002      	add	sp, #8
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	46c0      	nop			@ (mov r8, r8)
 80025e8:	e000e010 	.word	0xe000e010

080025ec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	210f      	movs	r1, #15
 80025f8:	187b      	adds	r3, r7, r1
 80025fa:	1c02      	adds	r2, r0, #0
 80025fc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	187b      	adds	r3, r7, r1
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	b25b      	sxtb	r3, r3
 8002606:	0011      	movs	r1, r2
 8002608:	0018      	movs	r0, r3
 800260a:	f7ff ff5d 	bl	80024c8 <__NVIC_SetPriority>
}
 800260e:	46c0      	nop			@ (mov r8, r8)
 8002610:	46bd      	mov	sp, r7
 8002612:	b004      	add	sp, #16
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	0002      	movs	r2, r0
 800261e:	1dfb      	adds	r3, r7, #7
 8002620:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002622:	1dfb      	adds	r3, r7, #7
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	b25b      	sxtb	r3, r3
 8002628:	0018      	movs	r0, r3
 800262a:	f7ff ff33 	bl	8002494 <__NVIC_EnableIRQ>
}
 800262e:	46c0      	nop			@ (mov r8, r8)
 8002630:	46bd      	mov	sp, r7
 8002632:	b002      	add	sp, #8
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	0018      	movs	r0, r3
 8002642:	f7ff ffaf 	bl	80025a4 <SysTick_Config>
 8002646:	0003      	movs	r3, r0
}
 8002648:	0018      	movs	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	b002      	add	sp, #8
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800265e:	e147      	b.n	80028f0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2101      	movs	r1, #1
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4091      	lsls	r1, r2
 800266a:	000a      	movs	r2, r1
 800266c:	4013      	ands	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d100      	bne.n	8002678 <HAL_GPIO_Init+0x28>
 8002676:	e138      	b.n	80028ea <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2203      	movs	r2, #3
 800267e:	4013      	ands	r3, r2
 8002680:	2b01      	cmp	r3, #1
 8002682:	d005      	beq.n	8002690 <HAL_GPIO_Init+0x40>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2203      	movs	r2, #3
 800268a:	4013      	ands	r3, r2
 800268c:	2b02      	cmp	r3, #2
 800268e:	d130      	bne.n	80026f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	2203      	movs	r2, #3
 800269c:	409a      	lsls	r2, r3
 800269e:	0013      	movs	r3, r2
 80026a0:	43da      	mvns	r2, r3
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	409a      	lsls	r2, r3
 80026b2:	0013      	movs	r3, r2
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026c6:	2201      	movs	r2, #1
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	409a      	lsls	r2, r3
 80026cc:	0013      	movs	r3, r2
 80026ce:	43da      	mvns	r2, r3
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	2201      	movs	r2, #1
 80026de:	401a      	ands	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	409a      	lsls	r2, r3
 80026e4:	0013      	movs	r3, r2
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2203      	movs	r2, #3
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d017      	beq.n	800272e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	2203      	movs	r2, #3
 800270a:	409a      	lsls	r2, r3
 800270c:	0013      	movs	r3, r2
 800270e:	43da      	mvns	r2, r3
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	409a      	lsls	r2, r3
 8002720:	0013      	movs	r3, r2
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2203      	movs	r2, #3
 8002734:	4013      	ands	r3, r2
 8002736:	2b02      	cmp	r3, #2
 8002738:	d123      	bne.n	8002782 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	08da      	lsrs	r2, r3, #3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3208      	adds	r2, #8
 8002742:	0092      	lsls	r2, r2, #2
 8002744:	58d3      	ldr	r3, [r2, r3]
 8002746:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2207      	movs	r2, #7
 800274c:	4013      	ands	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	220f      	movs	r2, #15
 8002752:	409a      	lsls	r2, r3
 8002754:	0013      	movs	r3, r2
 8002756:	43da      	mvns	r2, r3
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	691a      	ldr	r2, [r3, #16]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2107      	movs	r1, #7
 8002766:	400b      	ands	r3, r1
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	409a      	lsls	r2, r3
 800276c:	0013      	movs	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	08da      	lsrs	r2, r3, #3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3208      	adds	r2, #8
 800277c:	0092      	lsls	r2, r2, #2
 800277e:	6939      	ldr	r1, [r7, #16]
 8002780:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	2203      	movs	r2, #3
 800278e:	409a      	lsls	r2, r3
 8002790:	0013      	movs	r3, r2
 8002792:	43da      	mvns	r2, r3
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2203      	movs	r2, #3
 80027a0:	401a      	ands	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	409a      	lsls	r2, r3
 80027a8:	0013      	movs	r3, r2
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	23c0      	movs	r3, #192	@ 0xc0
 80027bc:	029b      	lsls	r3, r3, #10
 80027be:	4013      	ands	r3, r2
 80027c0:	d100      	bne.n	80027c4 <HAL_GPIO_Init+0x174>
 80027c2:	e092      	b.n	80028ea <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80027c4:	4a50      	ldr	r2, [pc, #320]	@ (8002908 <HAL_GPIO_Init+0x2b8>)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	089b      	lsrs	r3, r3, #2
 80027ca:	3318      	adds	r3, #24
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	589b      	ldr	r3, [r3, r2]
 80027d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2203      	movs	r2, #3
 80027d6:	4013      	ands	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	220f      	movs	r2, #15
 80027dc:	409a      	lsls	r2, r3
 80027de:	0013      	movs	r3, r2
 80027e0:	43da      	mvns	r2, r3
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	23a0      	movs	r3, #160	@ 0xa0
 80027ec:	05db      	lsls	r3, r3, #23
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d013      	beq.n	800281a <HAL_GPIO_Init+0x1ca>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a45      	ldr	r2, [pc, #276]	@ (800290c <HAL_GPIO_Init+0x2bc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00d      	beq.n	8002816 <HAL_GPIO_Init+0x1c6>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a44      	ldr	r2, [pc, #272]	@ (8002910 <HAL_GPIO_Init+0x2c0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d007      	beq.n	8002812 <HAL_GPIO_Init+0x1c2>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a43      	ldr	r2, [pc, #268]	@ (8002914 <HAL_GPIO_Init+0x2c4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d101      	bne.n	800280e <HAL_GPIO_Init+0x1be>
 800280a:	2303      	movs	r3, #3
 800280c:	e006      	b.n	800281c <HAL_GPIO_Init+0x1cc>
 800280e:	2305      	movs	r3, #5
 8002810:	e004      	b.n	800281c <HAL_GPIO_Init+0x1cc>
 8002812:	2302      	movs	r3, #2
 8002814:	e002      	b.n	800281c <HAL_GPIO_Init+0x1cc>
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <HAL_GPIO_Init+0x1cc>
 800281a:	2300      	movs	r3, #0
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	2103      	movs	r1, #3
 8002820:	400a      	ands	r2, r1
 8002822:	00d2      	lsls	r2, r2, #3
 8002824:	4093      	lsls	r3, r2
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800282c:	4936      	ldr	r1, [pc, #216]	@ (8002908 <HAL_GPIO_Init+0x2b8>)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	089b      	lsrs	r3, r3, #2
 8002832:	3318      	adds	r3, #24
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800283a:	4b33      	ldr	r3, [pc, #204]	@ (8002908 <HAL_GPIO_Init+0x2b8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	43da      	mvns	r2, r3
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4013      	ands	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	2380      	movs	r3, #128	@ 0x80
 8002850:	035b      	lsls	r3, r3, #13
 8002852:	4013      	ands	r3, r2
 8002854:	d003      	beq.n	800285e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800285e:	4b2a      	ldr	r3, [pc, #168]	@ (8002908 <HAL_GPIO_Init+0x2b8>)
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002864:	4b28      	ldr	r3, [pc, #160]	@ (8002908 <HAL_GPIO_Init+0x2b8>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	43da      	mvns	r2, r3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4013      	ands	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	2380      	movs	r3, #128	@ 0x80
 800287a:	039b      	lsls	r3, r3, #14
 800287c:	4013      	ands	r3, r2
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002888:	4b1f      	ldr	r3, [pc, #124]	@ (8002908 <HAL_GPIO_Init+0x2b8>)
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800288e:	4a1e      	ldr	r2, [pc, #120]	@ (8002908 <HAL_GPIO_Init+0x2b8>)
 8002890:	2384      	movs	r3, #132	@ 0x84
 8002892:	58d3      	ldr	r3, [r2, r3]
 8002894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	43da      	mvns	r2, r3
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	2380      	movs	r3, #128	@ 0x80
 80028a6:	029b      	lsls	r3, r3, #10
 80028a8:	4013      	ands	r3, r2
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028b4:	4914      	ldr	r1, [pc, #80]	@ (8002908 <HAL_GPIO_Init+0x2b8>)
 80028b6:	2284      	movs	r2, #132	@ 0x84
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80028bc:	4a12      	ldr	r2, [pc, #72]	@ (8002908 <HAL_GPIO_Init+0x2b8>)
 80028be:	2380      	movs	r3, #128	@ 0x80
 80028c0:	58d3      	ldr	r3, [r2, r3]
 80028c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	43da      	mvns	r2, r3
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4013      	ands	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	2380      	movs	r3, #128	@ 0x80
 80028d4:	025b      	lsls	r3, r3, #9
 80028d6:	4013      	ands	r3, r2
 80028d8:	d003      	beq.n	80028e2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028e2:	4909      	ldr	r1, [pc, #36]	@ (8002908 <HAL_GPIO_Init+0x2b8>)
 80028e4:	2280      	movs	r2, #128	@ 0x80
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	3301      	adds	r3, #1
 80028ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	40da      	lsrs	r2, r3
 80028f8:	1e13      	subs	r3, r2, #0
 80028fa:	d000      	beq.n	80028fe <HAL_GPIO_Init+0x2ae>
 80028fc:	e6b0      	b.n	8002660 <HAL_GPIO_Init+0x10>
  }
}
 80028fe:	46c0      	nop			@ (mov r8, r8)
 8002900:	46c0      	nop			@ (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	b006      	add	sp, #24
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021800 	.word	0x40021800
 800290c:	50000400 	.word	0x50000400
 8002910:	50000800 	.word	0x50000800
 8002914:	50000c00 	.word	0x50000c00

08002918 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	000a      	movs	r2, r1
 8002922:	1cbb      	adds	r3, r7, #2
 8002924:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	1cba      	adds	r2, r7, #2
 800292c:	8812      	ldrh	r2, [r2, #0]
 800292e:	4013      	ands	r3, r2
 8002930:	d004      	beq.n	800293c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002932:	230f      	movs	r3, #15
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
 800293a:	e003      	b.n	8002944 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800293c:	230f      	movs	r3, #15
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002944:	230f      	movs	r3, #15
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	781b      	ldrb	r3, [r3, #0]
}
 800294a:	0018      	movs	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	b004      	add	sp, #16
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	0008      	movs	r0, r1
 800295c:	0011      	movs	r1, r2
 800295e:	1cbb      	adds	r3, r7, #2
 8002960:	1c02      	adds	r2, r0, #0
 8002962:	801a      	strh	r2, [r3, #0]
 8002964:	1c7b      	adds	r3, r7, #1
 8002966:	1c0a      	adds	r2, r1, #0
 8002968:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800296a:	1c7b      	adds	r3, r7, #1
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d004      	beq.n	800297c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002972:	1cbb      	adds	r3, r7, #2
 8002974:	881a      	ldrh	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800297a:	e003      	b.n	8002984 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800297c:	1cbb      	adds	r3, r7, #2
 800297e:	881a      	ldrh	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002984:	46c0      	nop			@ (mov r8, r8)
 8002986:	46bd      	mov	sp, r7
 8002988:	b002      	add	sp, #8
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	000a      	movs	r2, r1
 8002996:	1cbb      	adds	r3, r7, #2
 8002998:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029a0:	1cbb      	adds	r3, r7, #2
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4013      	ands	r3, r2
 80029a8:	041a      	lsls	r2, r3, #16
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	1cb9      	adds	r1, r7, #2
 80029b0:	8809      	ldrh	r1, [r1, #0]
 80029b2:	400b      	ands	r3, r1
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	619a      	str	r2, [r3, #24]
}
 80029ba:	46c0      	nop			@ (mov r8, r8)
 80029bc:	46bd      	mov	sp, r7
 80029be:	b004      	add	sp, #16
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	0002      	movs	r2, r0
 80029cc:	1dbb      	adds	r3, r7, #6
 80029ce:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80029d0:	4b10      	ldr	r3, [pc, #64]	@ (8002a14 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	1dba      	adds	r2, r7, #6
 80029d6:	8812      	ldrh	r2, [r2, #0]
 80029d8:	4013      	ands	r3, r2
 80029da:	d008      	beq.n	80029ee <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80029dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002a14 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80029de:	1dba      	adds	r2, r7, #6
 80029e0:	8812      	ldrh	r2, [r2, #0]
 80029e2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80029e4:	1dbb      	adds	r3, r7, #6
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f000 f815 	bl	8002a18 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80029ee:	4b09      	ldr	r3, [pc, #36]	@ (8002a14 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	1dba      	adds	r2, r7, #6
 80029f4:	8812      	ldrh	r2, [r2, #0]
 80029f6:	4013      	ands	r3, r2
 80029f8:	d008      	beq.n	8002a0c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80029fa:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80029fc:	1dba      	adds	r2, r7, #6
 80029fe:	8812      	ldrh	r2, [r2, #0]
 8002a00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002a02:	1dbb      	adds	r3, r7, #6
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	0018      	movs	r0, r3
 8002a08:	f7fe fddc 	bl	80015c4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002a0c:	46c0      	nop			@ (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b002      	add	sp, #8
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021800 	.word	0x40021800

08002a18 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	0002      	movs	r2, r0
 8002a20:	1dbb      	adds	r3, r7, #6
 8002a22:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002a24:	46c0      	nop			@ (mov r8, r8)
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b002      	add	sp, #8
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e08f      	b.n	8002b5e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2241      	movs	r2, #65	@ 0x41
 8002a42:	5c9b      	ldrb	r3, [r3, r2]
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d107      	bne.n	8002a5a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2240      	movs	r2, #64	@ 0x40
 8002a4e:	2100      	movs	r1, #0
 8002a50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f7ff fad1 	bl	8001ffc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2241      	movs	r2, #65	@ 0x41
 8002a5e:	2124      	movs	r1, #36	@ 0x24
 8002a60:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	438a      	bics	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	493b      	ldr	r1, [pc, #236]	@ (8002b68 <HAL_I2C_Init+0x13c>)
 8002a7c:	400a      	ands	r2, r1
 8002a7e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4938      	ldr	r1, [pc, #224]	@ (8002b6c <HAL_I2C_Init+0x140>)
 8002a8c:	400a      	ands	r2, r1
 8002a8e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d108      	bne.n	8002aaa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2180      	movs	r1, #128	@ 0x80
 8002aa2:	0209      	lsls	r1, r1, #8
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	e007      	b.n	8002aba <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2184      	movs	r1, #132	@ 0x84
 8002ab4:	0209      	lsls	r1, r1, #8
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d109      	bne.n	8002ad6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2180      	movs	r1, #128	@ 0x80
 8002ace:	0109      	lsls	r1, r1, #4
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	605a      	str	r2, [r3, #4]
 8002ad4:	e007      	b.n	8002ae6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4923      	ldr	r1, [pc, #140]	@ (8002b70 <HAL_I2C_Init+0x144>)
 8002ae2:	400a      	ands	r2, r1
 8002ae4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4920      	ldr	r1, [pc, #128]	@ (8002b74 <HAL_I2C_Init+0x148>)
 8002af2:	430a      	orrs	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	491a      	ldr	r1, [pc, #104]	@ (8002b6c <HAL_I2C_Init+0x140>)
 8002b02:	400a      	ands	r2, r1
 8002b04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69d9      	ldr	r1, [r3, #28]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1a      	ldr	r2, [r3, #32]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2241      	movs	r2, #65	@ 0x41
 8002b4a:	2120      	movs	r1, #32
 8002b4c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2242      	movs	r2, #66	@ 0x42
 8002b58:	2100      	movs	r1, #0
 8002b5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	0018      	movs	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b002      	add	sp, #8
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	46c0      	nop			@ (mov r8, r8)
 8002b68:	f0ffffff 	.word	0xf0ffffff
 8002b6c:	ffff7fff 	.word	0xffff7fff
 8002b70:	fffff7ff 	.word	0xfffff7ff
 8002b74:	02008000 	.word	0x02008000

08002b78 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b78:	b590      	push	{r4, r7, lr}
 8002b7a:	b089      	sub	sp, #36	@ 0x24
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	0008      	movs	r0, r1
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	0019      	movs	r1, r3
 8002b86:	230a      	movs	r3, #10
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	1c02      	adds	r2, r0, #0
 8002b8c:	801a      	strh	r2, [r3, #0]
 8002b8e:	2308      	movs	r3, #8
 8002b90:	18fb      	adds	r3, r7, r3
 8002b92:	1c0a      	adds	r2, r1, #0
 8002b94:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2241      	movs	r2, #65	@ 0x41
 8002b9a:	5c9b      	ldrb	r3, [r3, r2]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b20      	cmp	r3, #32
 8002ba0:	d000      	beq.n	8002ba4 <HAL_I2C_Master_Transmit+0x2c>
 8002ba2:	e10a      	b.n	8002dba <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2240      	movs	r2, #64	@ 0x40
 8002ba8:	5c9b      	ldrb	r3, [r3, r2]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_I2C_Master_Transmit+0x3a>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e104      	b.n	8002dbc <HAL_I2C_Master_Transmit+0x244>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2240      	movs	r2, #64	@ 0x40
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bba:	f7ff fc61 	bl	8002480 <HAL_GetTick>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bc2:	2380      	movs	r3, #128	@ 0x80
 8002bc4:	0219      	lsls	r1, r3, #8
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2319      	movs	r3, #25
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f000 fa26 	bl	8003020 <I2C_WaitOnFlagUntilTimeout>
 8002bd4:	1e03      	subs	r3, r0, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0ef      	b.n	8002dbc <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2241      	movs	r2, #65	@ 0x41
 8002be0:	2121      	movs	r1, #33	@ 0x21
 8002be2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2242      	movs	r2, #66	@ 0x42
 8002be8:	2110      	movs	r1, #16
 8002bea:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2208      	movs	r2, #8
 8002bfc:	18ba      	adds	r2, r7, r2
 8002bfe:	8812      	ldrh	r2, [r2, #0]
 8002c00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2bff      	cmp	r3, #255	@ 0xff
 8002c10:	d906      	bls.n	8002c20 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	22ff      	movs	r2, #255	@ 0xff
 8002c16:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002c18:	2380      	movs	r3, #128	@ 0x80
 8002c1a:	045b      	lsls	r3, r3, #17
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	e007      	b.n	8002c30 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002c2a:	2380      	movs	r3, #128	@ 0x80
 8002c2c:	049b      	lsls	r3, r3, #18
 8002c2e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d027      	beq.n	8002c88 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3c:	781a      	ldrb	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	3301      	adds	r3, #1
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	697c      	ldr	r4, [r7, #20]
 8002c74:	230a      	movs	r3, #10
 8002c76:	18fb      	adds	r3, r7, r3
 8002c78:	8819      	ldrh	r1, [r3, #0]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	4b51      	ldr	r3, [pc, #324]	@ (8002dc4 <HAL_I2C_Master_Transmit+0x24c>)
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	0023      	movs	r3, r4
 8002c82:	f000 fc45 	bl	8003510 <I2C_TransferConfig>
 8002c86:	e06f      	b.n	8002d68 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	697c      	ldr	r4, [r7, #20]
 8002c90:	230a      	movs	r3, #10
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	8819      	ldrh	r1, [r3, #0]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc4 <HAL_I2C_Master_Transmit+0x24c>)
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	0023      	movs	r3, r4
 8002c9e:	f000 fc37 	bl	8003510 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002ca2:	e061      	b.n	8002d68 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	0018      	movs	r0, r3
 8002cac:	f000 fa10 	bl	80030d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cb0:	1e03      	subs	r3, r0, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e081      	b.n	8002dbc <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbc:	781a      	ldrb	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d03a      	beq.n	8002d68 <HAL_I2C_Master_Transmit+0x1f0>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d136      	bne.n	8002d68 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	0013      	movs	r3, r2
 8002d04:	2200      	movs	r2, #0
 8002d06:	2180      	movs	r1, #128	@ 0x80
 8002d08:	f000 f98a 	bl	8003020 <I2C_WaitOnFlagUntilTimeout>
 8002d0c:	1e03      	subs	r3, r0, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e053      	b.n	8002dbc <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2bff      	cmp	r3, #255	@ 0xff
 8002d1c:	d911      	bls.n	8002d42 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	22ff      	movs	r2, #255	@ 0xff
 8002d22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	2380      	movs	r3, #128	@ 0x80
 8002d2c:	045c      	lsls	r4, r3, #17
 8002d2e:	230a      	movs	r3, #10
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	8819      	ldrh	r1, [r3, #0]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	2300      	movs	r3, #0
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	0023      	movs	r3, r4
 8002d3c:	f000 fbe8 	bl	8003510 <I2C_TransferConfig>
 8002d40:	e012      	b.n	8002d68 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	2380      	movs	r3, #128	@ 0x80
 8002d54:	049c      	lsls	r4, r3, #18
 8002d56:	230a      	movs	r3, #10
 8002d58:	18fb      	adds	r3, r7, r3
 8002d5a:	8819      	ldrh	r1, [r3, #0]
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	0023      	movs	r3, r4
 8002d64:	f000 fbd4 	bl	8003510 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d198      	bne.n	8002ca4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f000 f9ef 	bl	800315c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d7e:	1e03      	subs	r3, r0, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e01a      	b.n	8002dbc <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	490b      	ldr	r1, [pc, #44]	@ (8002dc8 <HAL_I2C_Master_Transmit+0x250>)
 8002d9a:	400a      	ands	r2, r1
 8002d9c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2241      	movs	r2, #65	@ 0x41
 8002da2:	2120      	movs	r1, #32
 8002da4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2242      	movs	r2, #66	@ 0x42
 8002daa:	2100      	movs	r1, #0
 8002dac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2240      	movs	r2, #64	@ 0x40
 8002db2:	2100      	movs	r1, #0
 8002db4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e000      	b.n	8002dbc <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002dba:	2302      	movs	r3, #2
  }
}
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b007      	add	sp, #28
 8002dc2:	bd90      	pop	{r4, r7, pc}
 8002dc4:	80002000 	.word	0x80002000
 8002dc8:	fe00e800 	.word	0xfe00e800

08002dcc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b089      	sub	sp, #36	@ 0x24
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	0008      	movs	r0, r1
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	0019      	movs	r1, r3
 8002dda:	230a      	movs	r3, #10
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	1c02      	adds	r2, r0, #0
 8002de0:	801a      	strh	r2, [r3, #0]
 8002de2:	2308      	movs	r3, #8
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	1c0a      	adds	r2, r1, #0
 8002de8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2241      	movs	r2, #65	@ 0x41
 8002dee:	5c9b      	ldrb	r3, [r3, r2]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b20      	cmp	r3, #32
 8002df4:	d000      	beq.n	8002df8 <HAL_I2C_Master_Receive+0x2c>
 8002df6:	e0e8      	b.n	8002fca <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2240      	movs	r2, #64	@ 0x40
 8002dfc:	5c9b      	ldrb	r3, [r3, r2]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_I2C_Master_Receive+0x3a>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e0e2      	b.n	8002fcc <HAL_I2C_Master_Receive+0x200>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2240      	movs	r2, #64	@ 0x40
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e0e:	f7ff fb37 	bl	8002480 <HAL_GetTick>
 8002e12:	0003      	movs	r3, r0
 8002e14:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e16:	2380      	movs	r3, #128	@ 0x80
 8002e18:	0219      	lsls	r1, r3, #8
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	2319      	movs	r3, #25
 8002e22:	2201      	movs	r2, #1
 8002e24:	f000 f8fc 	bl	8003020 <I2C_WaitOnFlagUntilTimeout>
 8002e28:	1e03      	subs	r3, r0, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0cd      	b.n	8002fcc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2241      	movs	r2, #65	@ 0x41
 8002e34:	2122      	movs	r1, #34	@ 0x22
 8002e36:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2242      	movs	r2, #66	@ 0x42
 8002e3c:	2110      	movs	r1, #16
 8002e3e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2208      	movs	r2, #8
 8002e50:	18ba      	adds	r2, r7, r2
 8002e52:	8812      	ldrh	r2, [r2, #0]
 8002e54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2bff      	cmp	r3, #255	@ 0xff
 8002e64:	d911      	bls.n	8002e8a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	22ff      	movs	r2, #255	@ 0xff
 8002e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	2380      	movs	r3, #128	@ 0x80
 8002e74:	045c      	lsls	r4, r3, #17
 8002e76:	230a      	movs	r3, #10
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	8819      	ldrh	r1, [r3, #0]
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	4b55      	ldr	r3, [pc, #340]	@ (8002fd4 <HAL_I2C_Master_Receive+0x208>)
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	0023      	movs	r3, r4
 8002e84:	f000 fb44 	bl	8003510 <I2C_TransferConfig>
 8002e88:	e076      	b.n	8002f78 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	2380      	movs	r3, #128	@ 0x80
 8002e9c:	049c      	lsls	r4, r3, #18
 8002e9e:	230a      	movs	r3, #10
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	8819      	ldrh	r1, [r3, #0]
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd4 <HAL_I2C_Master_Receive+0x208>)
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	0023      	movs	r3, r4
 8002eac:	f000 fb30 	bl	8003510 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002eb0:	e062      	b.n	8002f78 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f000 f993 	bl	80031e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ebe:	1e03      	subs	r3, r0, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e082      	b.n	8002fcc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d03a      	beq.n	8002f78 <HAL_I2C_Master_Receive+0x1ac>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d136      	bne.n	8002f78 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	0013      	movs	r3, r2
 8002f14:	2200      	movs	r2, #0
 8002f16:	2180      	movs	r1, #128	@ 0x80
 8002f18:	f000 f882 	bl	8003020 <I2C_WaitOnFlagUntilTimeout>
 8002f1c:	1e03      	subs	r3, r0, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e053      	b.n	8002fcc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2bff      	cmp	r3, #255	@ 0xff
 8002f2c:	d911      	bls.n	8002f52 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	22ff      	movs	r2, #255	@ 0xff
 8002f32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	2380      	movs	r3, #128	@ 0x80
 8002f3c:	045c      	lsls	r4, r3, #17
 8002f3e:	230a      	movs	r3, #10
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	8819      	ldrh	r1, [r3, #0]
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	2300      	movs	r3, #0
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	0023      	movs	r3, r4
 8002f4c:	f000 fae0 	bl	8003510 <I2C_TransferConfig>
 8002f50:	e012      	b.n	8002f78 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	2380      	movs	r3, #128	@ 0x80
 8002f64:	049c      	lsls	r4, r3, #18
 8002f66:	230a      	movs	r3, #10
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	8819      	ldrh	r1, [r3, #0]
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	0023      	movs	r3, r4
 8002f74:	f000 facc 	bl	8003510 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d197      	bne.n	8002eb2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f000 f8e7 	bl	800315c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f8e:	1e03      	subs	r3, r0, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e01a      	b.n	8002fcc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	490b      	ldr	r1, [pc, #44]	@ (8002fd8 <HAL_I2C_Master_Receive+0x20c>)
 8002faa:	400a      	ands	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2241      	movs	r2, #65	@ 0x41
 8002fb2:	2120      	movs	r1, #32
 8002fb4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2242      	movs	r2, #66	@ 0x42
 8002fba:	2100      	movs	r1, #0
 8002fbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2240      	movs	r2, #64	@ 0x40
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e000      	b.n	8002fcc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002fca:	2302      	movs	r3, #2
  }
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b007      	add	sp, #28
 8002fd2:	bd90      	pop	{r4, r7, pc}
 8002fd4:	80002400 	.word	0x80002400
 8002fd8:	fe00e800 	.word	0xfe00e800

08002fdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2202      	movs	r2, #2
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d103      	bne.n	8002ffa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	2201      	movs	r2, #1
 8003002:	4013      	ands	r3, r2
 8003004:	2b01      	cmp	r3, #1
 8003006:	d007      	beq.n	8003018 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699a      	ldr	r2, [r3, #24]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2101      	movs	r1, #1
 8003014:	430a      	orrs	r2, r1
 8003016:	619a      	str	r2, [r3, #24]
  }
}
 8003018:	46c0      	nop			@ (mov r8, r8)
 800301a:	46bd      	mov	sp, r7
 800301c:	b002      	add	sp, #8
 800301e:	bd80      	pop	{r7, pc}

08003020 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	1dfb      	adds	r3, r7, #7
 800302e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003030:	e03a      	b.n	80030a8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	6839      	ldr	r1, [r7, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	0018      	movs	r0, r3
 800303a:	f000 f971 	bl	8003320 <I2C_IsErrorOccurred>
 800303e:	1e03      	subs	r3, r0, #0
 8003040:	d001      	beq.n	8003046 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e040      	b.n	80030c8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	3301      	adds	r3, #1
 800304a:	d02d      	beq.n	80030a8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304c:	f7ff fa18 	bl	8002480 <HAL_GetTick>
 8003050:	0002      	movs	r2, r0
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d302      	bcc.n	8003062 <I2C_WaitOnFlagUntilTimeout+0x42>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d122      	bne.n	80030a8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	4013      	ands	r3, r2
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	425a      	negs	r2, r3
 8003072:	4153      	adcs	r3, r2
 8003074:	b2db      	uxtb	r3, r3
 8003076:	001a      	movs	r2, r3
 8003078:	1dfb      	adds	r3, r7, #7
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d113      	bne.n	80030a8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003084:	2220      	movs	r2, #32
 8003086:	431a      	orrs	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2241      	movs	r2, #65	@ 0x41
 8003090:	2120      	movs	r1, #32
 8003092:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2242      	movs	r2, #66	@ 0x42
 8003098:	2100      	movs	r1, #0
 800309a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2240      	movs	r2, #64	@ 0x40
 80030a0:	2100      	movs	r1, #0
 80030a2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e00f      	b.n	80030c8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	4013      	ands	r3, r2
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	425a      	negs	r2, r3
 80030b8:	4153      	adcs	r3, r2
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	001a      	movs	r2, r3
 80030be:	1dfb      	adds	r3, r7, #7
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d0b5      	beq.n	8003032 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b004      	add	sp, #16
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030dc:	e032      	b.n	8003144 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f000 f91b 	bl	8003320 <I2C_IsErrorOccurred>
 80030ea:	1e03      	subs	r3, r0, #0
 80030ec:	d001      	beq.n	80030f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e030      	b.n	8003154 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	3301      	adds	r3, #1
 80030f6:	d025      	beq.n	8003144 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f8:	f7ff f9c2 	bl	8002480 <HAL_GetTick>
 80030fc:	0002      	movs	r2, r0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	429a      	cmp	r2, r3
 8003106:	d302      	bcc.n	800310e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d11a      	bne.n	8003144 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	2202      	movs	r2, #2
 8003116:	4013      	ands	r3, r2
 8003118:	2b02      	cmp	r3, #2
 800311a:	d013      	beq.n	8003144 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003120:	2220      	movs	r2, #32
 8003122:	431a      	orrs	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2241      	movs	r2, #65	@ 0x41
 800312c:	2120      	movs	r1, #32
 800312e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2242      	movs	r2, #66	@ 0x42
 8003134:	2100      	movs	r1, #0
 8003136:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2240      	movs	r2, #64	@ 0x40
 800313c:	2100      	movs	r1, #0
 800313e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e007      	b.n	8003154 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	2202      	movs	r2, #2
 800314c:	4013      	ands	r3, r2
 800314e:	2b02      	cmp	r3, #2
 8003150:	d1c5      	bne.n	80030de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	0018      	movs	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	b004      	add	sp, #16
 800315a:	bd80      	pop	{r7, pc}

0800315c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003168:	e02f      	b.n	80031ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	0018      	movs	r0, r3
 8003172:	f000 f8d5 	bl	8003320 <I2C_IsErrorOccurred>
 8003176:	1e03      	subs	r3, r0, #0
 8003178:	d001      	beq.n	800317e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e02d      	b.n	80031da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317e:	f7ff f97f 	bl	8002480 <HAL_GetTick>
 8003182:	0002      	movs	r2, r0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	429a      	cmp	r2, r3
 800318c:	d302      	bcc.n	8003194 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d11a      	bne.n	80031ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	2220      	movs	r2, #32
 800319c:	4013      	ands	r3, r2
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d013      	beq.n	80031ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a6:	2220      	movs	r2, #32
 80031a8:	431a      	orrs	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2241      	movs	r2, #65	@ 0x41
 80031b2:	2120      	movs	r1, #32
 80031b4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2242      	movs	r2, #66	@ 0x42
 80031ba:	2100      	movs	r1, #0
 80031bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2240      	movs	r2, #64	@ 0x40
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e007      	b.n	80031da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2220      	movs	r2, #32
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d1c8      	bne.n	800316a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	0018      	movs	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	b004      	add	sp, #16
 80031e0:	bd80      	pop	{r7, pc}
	...

080031e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f0:	2317      	movs	r3, #23
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80031f8:	e07b      	b.n	80032f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	0018      	movs	r0, r3
 8003202:	f000 f88d 	bl	8003320 <I2C_IsErrorOccurred>
 8003206:	1e03      	subs	r3, r0, #0
 8003208:	d003      	beq.n	8003212 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800320a:	2317      	movs	r3, #23
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2220      	movs	r2, #32
 800321a:	4013      	ands	r3, r2
 800321c:	2b20      	cmp	r3, #32
 800321e:	d140      	bne.n	80032a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003220:	2117      	movs	r1, #23
 8003222:	187b      	adds	r3, r7, r1
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d13b      	bne.n	80032a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	2204      	movs	r2, #4
 8003232:	4013      	ands	r3, r2
 8003234:	2b04      	cmp	r3, #4
 8003236:	d106      	bne.n	8003246 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003240:	187b      	adds	r3, r7, r1
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	2210      	movs	r2, #16
 800324e:	4013      	ands	r3, r2
 8003250:	2b10      	cmp	r3, #16
 8003252:	d123      	bne.n	800329c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2210      	movs	r2, #16
 800325a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2204      	movs	r2, #4
 8003260:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2220      	movs	r2, #32
 8003268:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4929      	ldr	r1, [pc, #164]	@ (800331c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8003276:	400a      	ands	r2, r1
 8003278:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2241      	movs	r2, #65	@ 0x41
 800327e:	2120      	movs	r1, #32
 8003280:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2242      	movs	r2, #66	@ 0x42
 8003286:	2100      	movs	r1, #0
 8003288:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2240      	movs	r2, #64	@ 0x40
 800328e:	2100      	movs	r1, #0
 8003290:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003292:	2317      	movs	r3, #23
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	2201      	movs	r2, #1
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	e002      	b.n	80032a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80032a2:	f7ff f8ed 	bl	8002480 <HAL_GetTick>
 80032a6:	0002      	movs	r2, r0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d302      	bcc.n	80032b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d11c      	bne.n	80032f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80032b8:	2017      	movs	r0, #23
 80032ba:	183b      	adds	r3, r7, r0
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d117      	bne.n	80032f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	2204      	movs	r2, #4
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d010      	beq.n	80032f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d4:	2220      	movs	r2, #32
 80032d6:	431a      	orrs	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2241      	movs	r2, #65	@ 0x41
 80032e0:	2120      	movs	r1, #32
 80032e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2240      	movs	r2, #64	@ 0x40
 80032e8:	2100      	movs	r1, #0
 80032ea:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80032ec:	183b      	adds	r3, r7, r0
 80032ee:	2201      	movs	r2, #1
 80032f0:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	2204      	movs	r2, #4
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d005      	beq.n	800330c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003300:	2317      	movs	r3, #23
 8003302:	18fb      	adds	r3, r7, r3
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d100      	bne.n	800330c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800330a:	e776      	b.n	80031fa <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 800330c:	2317      	movs	r3, #23
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	781b      	ldrb	r3, [r3, #0]
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b006      	add	sp, #24
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			@ (mov r8, r8)
 800331c:	fe00e800 	.word	0xfe00e800

08003320 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08a      	sub	sp, #40	@ 0x28
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800332c:	2327      	movs	r3, #39	@ 0x27
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2210      	movs	r2, #16
 8003348:	4013      	ands	r3, r2
 800334a:	d100      	bne.n	800334e <I2C_IsErrorOccurred+0x2e>
 800334c:	e079      	b.n	8003442 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2210      	movs	r2, #16
 8003354:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003356:	e057      	b.n	8003408 <I2C_IsErrorOccurred+0xe8>
 8003358:	2227      	movs	r2, #39	@ 0x27
 800335a:	18bb      	adds	r3, r7, r2
 800335c:	18ba      	adds	r2, r7, r2
 800335e:	7812      	ldrb	r2, [r2, #0]
 8003360:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	3301      	adds	r3, #1
 8003366:	d04f      	beq.n	8003408 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003368:	f7ff f88a 	bl	8002480 <HAL_GetTick>
 800336c:	0002      	movs	r2, r0
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	429a      	cmp	r2, r3
 8003376:	d302      	bcc.n	800337e <I2C_IsErrorOccurred+0x5e>
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d144      	bne.n	8003408 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	2380      	movs	r3, #128	@ 0x80
 8003386:	01db      	lsls	r3, r3, #7
 8003388:	4013      	ands	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800338c:	2013      	movs	r0, #19
 800338e:	183b      	adds	r3, r7, r0
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	2142      	movs	r1, #66	@ 0x42
 8003394:	5c52      	ldrb	r2, [r2, r1]
 8003396:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	2380      	movs	r3, #128	@ 0x80
 80033a0:	021b      	lsls	r3, r3, #8
 80033a2:	401a      	ands	r2, r3
 80033a4:	2380      	movs	r3, #128	@ 0x80
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d126      	bne.n	80033fa <I2C_IsErrorOccurred+0xda>
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	2380      	movs	r3, #128	@ 0x80
 80033b0:	01db      	lsls	r3, r3, #7
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d021      	beq.n	80033fa <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80033b6:	183b      	adds	r3, r7, r0
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d01d      	beq.n	80033fa <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2180      	movs	r1, #128	@ 0x80
 80033ca:	01c9      	lsls	r1, r1, #7
 80033cc:	430a      	orrs	r2, r1
 80033ce:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80033d0:	f7ff f856 	bl	8002480 <HAL_GetTick>
 80033d4:	0003      	movs	r3, r0
 80033d6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033d8:	e00f      	b.n	80033fa <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033da:	f7ff f851 	bl	8002480 <HAL_GetTick>
 80033de:	0002      	movs	r2, r0
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b19      	cmp	r3, #25
 80033e6:	d908      	bls.n	80033fa <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	2220      	movs	r2, #32
 80033ec:	4313      	orrs	r3, r2
 80033ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80033f0:	2327      	movs	r3, #39	@ 0x27
 80033f2:	18fb      	adds	r3, r7, r3
 80033f4:	2201      	movs	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]

              break;
 80033f8:	e006      	b.n	8003408 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2220      	movs	r2, #32
 8003402:	4013      	ands	r3, r2
 8003404:	2b20      	cmp	r3, #32
 8003406:	d1e8      	bne.n	80033da <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2220      	movs	r2, #32
 8003410:	4013      	ands	r3, r2
 8003412:	2b20      	cmp	r3, #32
 8003414:	d004      	beq.n	8003420 <I2C_IsErrorOccurred+0x100>
 8003416:	2327      	movs	r3, #39	@ 0x27
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d09b      	beq.n	8003358 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003420:	2327      	movs	r3, #39	@ 0x27
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d103      	bne.n	8003432 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2220      	movs	r2, #32
 8003430:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	2204      	movs	r2, #4
 8003436:	4313      	orrs	r3, r2
 8003438:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800343a:	2327      	movs	r3, #39	@ 0x27
 800343c:	18fb      	adds	r3, r7, r3
 800343e:	2201      	movs	r2, #1
 8003440:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	2380      	movs	r3, #128	@ 0x80
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4013      	ands	r3, r2
 8003452:	d00c      	beq.n	800346e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	2201      	movs	r2, #1
 8003458:	4313      	orrs	r3, r2
 800345a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2280      	movs	r2, #128	@ 0x80
 8003462:	0052      	lsls	r2, r2, #1
 8003464:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003466:	2327      	movs	r3, #39	@ 0x27
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	2201      	movs	r2, #1
 800346c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	2380      	movs	r3, #128	@ 0x80
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4013      	ands	r3, r2
 8003476:	d00c      	beq.n	8003492 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	2208      	movs	r2, #8
 800347c:	4313      	orrs	r3, r2
 800347e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2280      	movs	r2, #128	@ 0x80
 8003486:	00d2      	lsls	r2, r2, #3
 8003488:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800348a:	2327      	movs	r3, #39	@ 0x27
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	2380      	movs	r3, #128	@ 0x80
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4013      	ands	r3, r2
 800349a:	d00c      	beq.n	80034b6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	2202      	movs	r2, #2
 80034a0:	4313      	orrs	r3, r2
 80034a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2280      	movs	r2, #128	@ 0x80
 80034aa:	0092      	lsls	r2, r2, #2
 80034ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034ae:	2327      	movs	r3, #39	@ 0x27
 80034b0:	18fb      	adds	r3, r7, r3
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80034b6:	2327      	movs	r3, #39	@ 0x27
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01d      	beq.n	80034fc <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7ff fd8a 	bl	8002fdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	490e      	ldr	r1, [pc, #56]	@ (800350c <I2C_IsErrorOccurred+0x1ec>)
 80034d4:	400a      	ands	r2, r1
 80034d6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	431a      	orrs	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2241      	movs	r2, #65	@ 0x41
 80034e8:	2120      	movs	r1, #32
 80034ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2242      	movs	r2, #66	@ 0x42
 80034f0:	2100      	movs	r1, #0
 80034f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2240      	movs	r2, #64	@ 0x40
 80034f8:	2100      	movs	r1, #0
 80034fa:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80034fc:	2327      	movs	r3, #39	@ 0x27
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	781b      	ldrb	r3, [r3, #0]
}
 8003502:	0018      	movs	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	b00a      	add	sp, #40	@ 0x28
 8003508:	bd80      	pop	{r7, pc}
 800350a:	46c0      	nop			@ (mov r8, r8)
 800350c:	fe00e800 	.word	0xfe00e800

08003510 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	0008      	movs	r0, r1
 800351a:	0011      	movs	r1, r2
 800351c:	607b      	str	r3, [r7, #4]
 800351e:	240a      	movs	r4, #10
 8003520:	193b      	adds	r3, r7, r4
 8003522:	1c02      	adds	r2, r0, #0
 8003524:	801a      	strh	r2, [r3, #0]
 8003526:	2009      	movs	r0, #9
 8003528:	183b      	adds	r3, r7, r0
 800352a:	1c0a      	adds	r2, r1, #0
 800352c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800352e:	193b      	adds	r3, r7, r4
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	059b      	lsls	r3, r3, #22
 8003534:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003536:	183b      	adds	r3, r7, r0
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	0419      	lsls	r1, r3, #16
 800353c:	23ff      	movs	r3, #255	@ 0xff
 800353e:	041b      	lsls	r3, r3, #16
 8003540:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003542:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800354a:	4313      	orrs	r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	085b      	lsrs	r3, r3, #1
 8003550:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800355a:	0d51      	lsrs	r1, r2, #21
 800355c:	2280      	movs	r2, #128	@ 0x80
 800355e:	00d2      	lsls	r2, r2, #3
 8003560:	400a      	ands	r2, r1
 8003562:	4907      	ldr	r1, [pc, #28]	@ (8003580 <I2C_TransferConfig+0x70>)
 8003564:	430a      	orrs	r2, r1
 8003566:	43d2      	mvns	r2, r2
 8003568:	401a      	ands	r2, r3
 800356a:	0011      	movs	r1, r2
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003576:	46c0      	nop			@ (mov r8, r8)
 8003578:	46bd      	mov	sp, r7
 800357a:	b007      	add	sp, #28
 800357c:	bd90      	pop	{r4, r7, pc}
 800357e:	46c0      	nop			@ (mov r8, r8)
 8003580:	03ff63ff 	.word	0x03ff63ff

08003584 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2241      	movs	r2, #65	@ 0x41
 8003592:	5c9b      	ldrb	r3, [r3, r2]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b20      	cmp	r3, #32
 8003598:	d138      	bne.n	800360c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2240      	movs	r2, #64	@ 0x40
 800359e:	5c9b      	ldrb	r3, [r3, r2]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e032      	b.n	800360e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2240      	movs	r2, #64	@ 0x40
 80035ac:	2101      	movs	r1, #1
 80035ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2241      	movs	r2, #65	@ 0x41
 80035b4:	2124      	movs	r1, #36	@ 0x24
 80035b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2101      	movs	r1, #1
 80035c4:	438a      	bics	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4911      	ldr	r1, [pc, #68]	@ (8003618 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80035d4:	400a      	ands	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6819      	ldr	r1, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2101      	movs	r1, #1
 80035f4:	430a      	orrs	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2241      	movs	r2, #65	@ 0x41
 80035fc:	2120      	movs	r1, #32
 80035fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2240      	movs	r2, #64	@ 0x40
 8003604:	2100      	movs	r1, #0
 8003606:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	e000      	b.n	800360e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800360c:	2302      	movs	r3, #2
  }
}
 800360e:	0018      	movs	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	b002      	add	sp, #8
 8003614:	bd80      	pop	{r7, pc}
 8003616:	46c0      	nop			@ (mov r8, r8)
 8003618:	ffffefff 	.word	0xffffefff

0800361c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2241      	movs	r2, #65	@ 0x41
 800362a:	5c9b      	ldrb	r3, [r3, r2]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b20      	cmp	r3, #32
 8003630:	d139      	bne.n	80036a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2240      	movs	r2, #64	@ 0x40
 8003636:	5c9b      	ldrb	r3, [r3, r2]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800363c:	2302      	movs	r3, #2
 800363e:	e033      	b.n	80036a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2240      	movs	r2, #64	@ 0x40
 8003644:	2101      	movs	r1, #1
 8003646:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2241      	movs	r2, #65	@ 0x41
 800364c:	2124      	movs	r1, #36	@ 0x24
 800364e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2101      	movs	r1, #1
 800365c:	438a      	bics	r2, r1
 800365e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4a11      	ldr	r2, [pc, #68]	@ (80036b0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800366c:	4013      	ands	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	021b      	lsls	r3, r3, #8
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2101      	movs	r1, #1
 800368e:	430a      	orrs	r2, r1
 8003690:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2241      	movs	r2, #65	@ 0x41
 8003696:	2120      	movs	r1, #32
 8003698:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2240      	movs	r2, #64	@ 0x40
 800369e:	2100      	movs	r1, #0
 80036a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e000      	b.n	80036a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
  }
}
 80036a8:	0018      	movs	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b004      	add	sp, #16
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	fffff0ff 	.word	0xfffff0ff

080036b4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036b8:	4b04      	ldr	r3, [pc, #16]	@ (80036cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	4b03      	ldr	r3, [pc, #12]	@ (80036cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80036be:	2180      	movs	r1, #128	@ 0x80
 80036c0:	0049      	lsls	r1, r1, #1
 80036c2:	430a      	orrs	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]
}
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40007000 	.word	0x40007000

080036d0 <HAL_PWR_DisableBkUpAccess>:
/**
  * @brief  Disable access to the backup domain
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 80036d4:	4b04      	ldr	r3, [pc, #16]	@ (80036e8 <HAL_PWR_DisableBkUpAccess+0x18>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4b03      	ldr	r3, [pc, #12]	@ (80036e8 <HAL_PWR_DisableBkUpAccess+0x18>)
 80036da:	4904      	ldr	r1, [pc, #16]	@ (80036ec <HAL_PWR_DisableBkUpAccess+0x1c>)
 80036dc:	400a      	ands	r2, r1
 80036de:	601a      	str	r2, [r3, #0]
}
 80036e0:	46c0      	nop			@ (mov r8, r8)
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			@ (mov r8, r8)
 80036e8:	40007000 	.word	0x40007000
 80036ec:	fffffeff 	.word	0xfffffeff

080036f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80036f8:	4b19      	ldr	r3, [pc, #100]	@ (8003760 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a19      	ldr	r2, [pc, #100]	@ (8003764 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80036fe:	4013      	ands	r3, r2
 8003700:	0019      	movs	r1, r3
 8003702:	4b17      	ldr	r3, [pc, #92]	@ (8003760 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	430a      	orrs	r2, r1
 8003708:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	2380      	movs	r3, #128	@ 0x80
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	429a      	cmp	r2, r3
 8003712:	d11f      	bne.n	8003754 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003714:	4b14      	ldr	r3, [pc, #80]	@ (8003768 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	0013      	movs	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	189b      	adds	r3, r3, r2
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	4912      	ldr	r1, [pc, #72]	@ (800376c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003722:	0018      	movs	r0, r3
 8003724:	f7fc fcee 	bl	8000104 <__udivsi3>
 8003728:	0003      	movs	r3, r0
 800372a:	3301      	adds	r3, #1
 800372c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800372e:	e008      	b.n	8003742 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	3b01      	subs	r3, #1
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	e001      	b.n	8003742 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e009      	b.n	8003756 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003742:	4b07      	ldr	r3, [pc, #28]	@ (8003760 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	2380      	movs	r3, #128	@ 0x80
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	401a      	ands	r2, r3
 800374c:	2380      	movs	r3, #128	@ 0x80
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	429a      	cmp	r2, r3
 8003752:	d0ed      	beq.n	8003730 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	0018      	movs	r0, r3
 8003758:	46bd      	mov	sp, r7
 800375a:	b004      	add	sp, #16
 800375c:	bd80      	pop	{r7, pc}
 800375e:	46c0      	nop			@ (mov r8, r8)
 8003760:	40007000 	.word	0x40007000
 8003764:	fffff9ff 	.word	0xfffff9ff
 8003768:	20000068 	.word	0x20000068
 800376c:	000f4240 	.word	0x000f4240

08003770 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e2fe      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2201      	movs	r2, #1
 8003788:	4013      	ands	r3, r2
 800378a:	d100      	bne.n	800378e <HAL_RCC_OscConfig+0x1e>
 800378c:	e07c      	b.n	8003888 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800378e:	4bc3      	ldr	r3, [pc, #780]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2238      	movs	r2, #56	@ 0x38
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003798:	4bc0      	ldr	r3, [pc, #768]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	2203      	movs	r2, #3
 800379e:	4013      	ands	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b10      	cmp	r3, #16
 80037a6:	d102      	bne.n	80037ae <HAL_RCC_OscConfig+0x3e>
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d002      	beq.n	80037b4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d10b      	bne.n	80037cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b4:	4bb9      	ldr	r3, [pc, #740]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	2380      	movs	r3, #128	@ 0x80
 80037ba:	029b      	lsls	r3, r3, #10
 80037bc:	4013      	ands	r3, r2
 80037be:	d062      	beq.n	8003886 <HAL_RCC_OscConfig+0x116>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d15e      	bne.n	8003886 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e2d9      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	2380      	movs	r3, #128	@ 0x80
 80037d2:	025b      	lsls	r3, r3, #9
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d107      	bne.n	80037e8 <HAL_RCC_OscConfig+0x78>
 80037d8:	4bb0      	ldr	r3, [pc, #704]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4baf      	ldr	r3, [pc, #700]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80037de:	2180      	movs	r1, #128	@ 0x80
 80037e0:	0249      	lsls	r1, r1, #9
 80037e2:	430a      	orrs	r2, r1
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e020      	b.n	800382a <HAL_RCC_OscConfig+0xba>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	23a0      	movs	r3, #160	@ 0xa0
 80037ee:	02db      	lsls	r3, r3, #11
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d10e      	bne.n	8003812 <HAL_RCC_OscConfig+0xa2>
 80037f4:	4ba9      	ldr	r3, [pc, #676]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	4ba8      	ldr	r3, [pc, #672]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80037fa:	2180      	movs	r1, #128	@ 0x80
 80037fc:	02c9      	lsls	r1, r1, #11
 80037fe:	430a      	orrs	r2, r1
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	4ba6      	ldr	r3, [pc, #664]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4ba5      	ldr	r3, [pc, #660]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003808:	2180      	movs	r1, #128	@ 0x80
 800380a:	0249      	lsls	r1, r1, #9
 800380c:	430a      	orrs	r2, r1
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	e00b      	b.n	800382a <HAL_RCC_OscConfig+0xba>
 8003812:	4ba2      	ldr	r3, [pc, #648]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	4ba1      	ldr	r3, [pc, #644]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003818:	49a1      	ldr	r1, [pc, #644]	@ (8003aa0 <HAL_RCC_OscConfig+0x330>)
 800381a:	400a      	ands	r2, r1
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	4b9f      	ldr	r3, [pc, #636]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	4b9e      	ldr	r3, [pc, #632]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003824:	499f      	ldr	r1, [pc, #636]	@ (8003aa4 <HAL_RCC_OscConfig+0x334>)
 8003826:	400a      	ands	r2, r1
 8003828:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d014      	beq.n	800385c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003832:	f7fe fe25 	bl	8002480 <HAL_GetTick>
 8003836:	0003      	movs	r3, r0
 8003838:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800383c:	f7fe fe20 	bl	8002480 <HAL_GetTick>
 8003840:	0002      	movs	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	@ 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e298      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800384e:	4b93      	ldr	r3, [pc, #588]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	2380      	movs	r3, #128	@ 0x80
 8003854:	029b      	lsls	r3, r3, #10
 8003856:	4013      	ands	r3, r2
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0xcc>
 800385a:	e015      	b.n	8003888 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe fe10 	bl	8002480 <HAL_GetTick>
 8003860:	0003      	movs	r3, r0
 8003862:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003866:	f7fe fe0b 	bl	8002480 <HAL_GetTick>
 800386a:	0002      	movs	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b64      	cmp	r3, #100	@ 0x64
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e283      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003878:	4b88      	ldr	r3, [pc, #544]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	2380      	movs	r3, #128	@ 0x80
 800387e:	029b      	lsls	r3, r3, #10
 8003880:	4013      	ands	r3, r2
 8003882:	d1f0      	bne.n	8003866 <HAL_RCC_OscConfig+0xf6>
 8003884:	e000      	b.n	8003888 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003886:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2202      	movs	r2, #2
 800388e:	4013      	ands	r3, r2
 8003890:	d100      	bne.n	8003894 <HAL_RCC_OscConfig+0x124>
 8003892:	e099      	b.n	80039c8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003894:	4b81      	ldr	r3, [pc, #516]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2238      	movs	r2, #56	@ 0x38
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800389e:	4b7f      	ldr	r3, [pc, #508]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2203      	movs	r2, #3
 80038a4:	4013      	ands	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b10      	cmp	r3, #16
 80038ac:	d102      	bne.n	80038b4 <HAL_RCC_OscConfig+0x144>
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d002      	beq.n	80038ba <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d135      	bne.n	8003926 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038ba:	4b78      	ldr	r3, [pc, #480]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	2380      	movs	r3, #128	@ 0x80
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4013      	ands	r3, r2
 80038c4:	d005      	beq.n	80038d2 <HAL_RCC_OscConfig+0x162>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e256      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d2:	4b72      	ldr	r3, [pc, #456]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4a74      	ldr	r2, [pc, #464]	@ (8003aa8 <HAL_RCC_OscConfig+0x338>)
 80038d8:	4013      	ands	r3, r2
 80038da:	0019      	movs	r1, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	021a      	lsls	r2, r3, #8
 80038e2:	4b6e      	ldr	r3, [pc, #440]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80038e4:	430a      	orrs	r2, r1
 80038e6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d112      	bne.n	8003914 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80038ee:	4b6b      	ldr	r3, [pc, #428]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a6e      	ldr	r2, [pc, #440]	@ (8003aac <HAL_RCC_OscConfig+0x33c>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	0019      	movs	r1, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	4b67      	ldr	r3, [pc, #412]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80038fe:	430a      	orrs	r2, r1
 8003900:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003902:	4b66      	ldr	r3, [pc, #408]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	0adb      	lsrs	r3, r3, #11
 8003908:	2207      	movs	r2, #7
 800390a:	4013      	ands	r3, r2
 800390c:	4a68      	ldr	r2, [pc, #416]	@ (8003ab0 <HAL_RCC_OscConfig+0x340>)
 800390e:	40da      	lsrs	r2, r3
 8003910:	4b68      	ldr	r3, [pc, #416]	@ (8003ab4 <HAL_RCC_OscConfig+0x344>)
 8003912:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003914:	4b68      	ldr	r3, [pc, #416]	@ (8003ab8 <HAL_RCC_OscConfig+0x348>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	0018      	movs	r0, r3
 800391a:	f7fe fd55 	bl	80023c8 <HAL_InitTick>
 800391e:	1e03      	subs	r3, r0, #0
 8003920:	d051      	beq.n	80039c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e22c      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d030      	beq.n	8003990 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800392e:	4b5b      	ldr	r3, [pc, #364]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a5e      	ldr	r2, [pc, #376]	@ (8003aac <HAL_RCC_OscConfig+0x33c>)
 8003934:	4013      	ands	r3, r2
 8003936:	0019      	movs	r1, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	4b57      	ldr	r3, [pc, #348]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 800393e:	430a      	orrs	r2, r1
 8003940:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003942:	4b56      	ldr	r3, [pc, #344]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	4b55      	ldr	r3, [pc, #340]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003948:	2180      	movs	r1, #128	@ 0x80
 800394a:	0049      	lsls	r1, r1, #1
 800394c:	430a      	orrs	r2, r1
 800394e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fe fd96 	bl	8002480 <HAL_GetTick>
 8003954:	0003      	movs	r3, r0
 8003956:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800395a:	f7fe fd91 	bl	8002480 <HAL_GetTick>
 800395e:	0002      	movs	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e209      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800396c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	2380      	movs	r3, #128	@ 0x80
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4013      	ands	r3, r2
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003978:	4b48      	ldr	r3, [pc, #288]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	4a4a      	ldr	r2, [pc, #296]	@ (8003aa8 <HAL_RCC_OscConfig+0x338>)
 800397e:	4013      	ands	r3, r2
 8003980:	0019      	movs	r1, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	021a      	lsls	r2, r3, #8
 8003988:	4b44      	ldr	r3, [pc, #272]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	e01b      	b.n	80039c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003990:	4b42      	ldr	r3, [pc, #264]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	4b41      	ldr	r3, [pc, #260]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003996:	4949      	ldr	r1, [pc, #292]	@ (8003abc <HAL_RCC_OscConfig+0x34c>)
 8003998:	400a      	ands	r2, r1
 800399a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fe fd70 	bl	8002480 <HAL_GetTick>
 80039a0:	0003      	movs	r3, r0
 80039a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a6:	f7fe fd6b 	bl	8002480 <HAL_GetTick>
 80039aa:	0002      	movs	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e1e3      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039b8:	4b38      	ldr	r3, [pc, #224]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	2380      	movs	r3, #128	@ 0x80
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4013      	ands	r3, r2
 80039c2:	d1f0      	bne.n	80039a6 <HAL_RCC_OscConfig+0x236>
 80039c4:	e000      	b.n	80039c8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039c6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2208      	movs	r2, #8
 80039ce:	4013      	ands	r3, r2
 80039d0:	d047      	beq.n	8003a62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80039d2:	4b32      	ldr	r3, [pc, #200]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2238      	movs	r2, #56	@ 0x38
 80039d8:	4013      	ands	r3, r2
 80039da:	2b18      	cmp	r3, #24
 80039dc:	d10a      	bne.n	80039f4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80039de:	4b2f      	ldr	r3, [pc, #188]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80039e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e2:	2202      	movs	r2, #2
 80039e4:	4013      	ands	r3, r2
 80039e6:	d03c      	beq.n	8003a62 <HAL_RCC_OscConfig+0x2f2>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d138      	bne.n	8003a62 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e1c5      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d019      	beq.n	8003a30 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80039fc:	4b27      	ldr	r3, [pc, #156]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 80039fe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a00:	4b26      	ldr	r3, [pc, #152]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003a02:	2101      	movs	r1, #1
 8003a04:	430a      	orrs	r2, r1
 8003a06:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fe fd3a 	bl	8002480 <HAL_GetTick>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a12:	f7fe fd35 	bl	8002480 <HAL_GetTick>
 8003a16:	0002      	movs	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e1ad      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a24:	4b1d      	ldr	r3, [pc, #116]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a28:	2202      	movs	r2, #2
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d0f1      	beq.n	8003a12 <HAL_RCC_OscConfig+0x2a2>
 8003a2e:	e018      	b.n	8003a62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003a30:	4b1a      	ldr	r3, [pc, #104]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003a32:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a34:	4b19      	ldr	r3, [pc, #100]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003a36:	2101      	movs	r1, #1
 8003a38:	438a      	bics	r2, r1
 8003a3a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3c:	f7fe fd20 	bl	8002480 <HAL_GetTick>
 8003a40:	0003      	movs	r3, r0
 8003a42:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a46:	f7fe fd1b 	bl	8002480 <HAL_GetTick>
 8003a4a:	0002      	movs	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e193      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a58:	4b10      	ldr	r3, [pc, #64]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d1f1      	bne.n	8003a46 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2204      	movs	r2, #4
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d100      	bne.n	8003a6e <HAL_RCC_OscConfig+0x2fe>
 8003a6c:	e0c6      	b.n	8003bfc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6e:	231f      	movs	r3, #31
 8003a70:	18fb      	adds	r3, r7, r3
 8003a72:	2200      	movs	r2, #0
 8003a74:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003a76:	4b09      	ldr	r3, [pc, #36]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2238      	movs	r2, #56	@ 0x38
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	d11e      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003a82:	4b06      	ldr	r3, [pc, #24]	@ (8003a9c <HAL_RCC_OscConfig+0x32c>)
 8003a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a86:	2202      	movs	r2, #2
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d100      	bne.n	8003a8e <HAL_RCC_OscConfig+0x31e>
 8003a8c:	e0b6      	b.n	8003bfc <HAL_RCC_OscConfig+0x48c>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d000      	beq.n	8003a98 <HAL_RCC_OscConfig+0x328>
 8003a96:	e0b1      	b.n	8003bfc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e171      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	fffeffff 	.word	0xfffeffff
 8003aa4:	fffbffff 	.word	0xfffbffff
 8003aa8:	ffff80ff 	.word	0xffff80ff
 8003aac:	ffffc7ff 	.word	0xffffc7ff
 8003ab0:	00f42400 	.word	0x00f42400
 8003ab4:	20000068 	.word	0x20000068
 8003ab8:	2000006c 	.word	0x2000006c
 8003abc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ac0:	4bb1      	ldr	r3, [pc, #708]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003ac2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ac4:	2380      	movs	r3, #128	@ 0x80
 8003ac6:	055b      	lsls	r3, r3, #21
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d101      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x360>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <HAL_RCC_OscConfig+0x362>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d011      	beq.n	8003afa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003ad6:	4bac      	ldr	r3, [pc, #688]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003ad8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ada:	4bab      	ldr	r3, [pc, #684]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003adc:	2180      	movs	r1, #128	@ 0x80
 8003ade:	0549      	lsls	r1, r1, #21
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ae4:	4ba8      	ldr	r3, [pc, #672]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003ae6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ae8:	2380      	movs	r3, #128	@ 0x80
 8003aea:	055b      	lsls	r3, r3, #21
 8003aec:	4013      	ands	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003af2:	231f      	movs	r3, #31
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	2201      	movs	r2, #1
 8003af8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003afa:	4ba4      	ldr	r3, [pc, #656]	@ (8003d8c <HAL_RCC_OscConfig+0x61c>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	2380      	movs	r3, #128	@ 0x80
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	4013      	ands	r3, r2
 8003b04:	d11a      	bne.n	8003b3c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b06:	4ba1      	ldr	r3, [pc, #644]	@ (8003d8c <HAL_RCC_OscConfig+0x61c>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4ba0      	ldr	r3, [pc, #640]	@ (8003d8c <HAL_RCC_OscConfig+0x61c>)
 8003b0c:	2180      	movs	r1, #128	@ 0x80
 8003b0e:	0049      	lsls	r1, r1, #1
 8003b10:	430a      	orrs	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003b14:	f7fe fcb4 	bl	8002480 <HAL_GetTick>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1e:	f7fe fcaf 	bl	8002480 <HAL_GetTick>
 8003b22:	0002      	movs	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e127      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b30:	4b96      	ldr	r3, [pc, #600]	@ (8003d8c <HAL_RCC_OscConfig+0x61c>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	2380      	movs	r3, #128	@ 0x80
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d106      	bne.n	8003b52 <HAL_RCC_OscConfig+0x3e2>
 8003b44:	4b90      	ldr	r3, [pc, #576]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003b46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b48:	4b8f      	ldr	r3, [pc, #572]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b50:	e01c      	b.n	8003b8c <HAL_RCC_OscConfig+0x41c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b05      	cmp	r3, #5
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x404>
 8003b5a:	4b8b      	ldr	r3, [pc, #556]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003b5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b5e:	4b8a      	ldr	r3, [pc, #552]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003b60:	2104      	movs	r1, #4
 8003b62:	430a      	orrs	r2, r1
 8003b64:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b66:	4b88      	ldr	r3, [pc, #544]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003b68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b6a:	4b87      	ldr	r3, [pc, #540]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b72:	e00b      	b.n	8003b8c <HAL_RCC_OscConfig+0x41c>
 8003b74:	4b84      	ldr	r3, [pc, #528]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003b76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b78:	4b83      	ldr	r3, [pc, #524]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	438a      	bics	r2, r1
 8003b7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b80:	4b81      	ldr	r3, [pc, #516]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003b82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b84:	4b80      	ldr	r3, [pc, #512]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003b86:	2104      	movs	r1, #4
 8003b88:	438a      	bics	r2, r1
 8003b8a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d014      	beq.n	8003bbe <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fe fc74 	bl	8002480 <HAL_GetTick>
 8003b98:	0003      	movs	r3, r0
 8003b9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b9c:	e009      	b.n	8003bb2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9e:	f7fe fc6f 	bl	8002480 <HAL_GetTick>
 8003ba2:	0002      	movs	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	4a79      	ldr	r2, [pc, #484]	@ (8003d90 <HAL_RCC_OscConfig+0x620>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e0e6      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bb2:	4b75      	ldr	r3, [pc, #468]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x42e>
 8003bbc:	e013      	b.n	8003be6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbe:	f7fe fc5f 	bl	8002480 <HAL_GetTick>
 8003bc2:	0003      	movs	r3, r0
 8003bc4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bc6:	e009      	b.n	8003bdc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc8:	f7fe fc5a 	bl	8002480 <HAL_GetTick>
 8003bcc:	0002      	movs	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	4a6f      	ldr	r2, [pc, #444]	@ (8003d90 <HAL_RCC_OscConfig+0x620>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e0d1      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bdc:	4b6a      	ldr	r3, [pc, #424]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be0:	2202      	movs	r2, #2
 8003be2:	4013      	ands	r3, r2
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003be6:	231f      	movs	r3, #31
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d105      	bne.n	8003bfc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003bf0:	4b65      	ldr	r3, [pc, #404]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003bf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bf4:	4b64      	ldr	r3, [pc, #400]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003bf6:	4967      	ldr	r1, [pc, #412]	@ (8003d94 <HAL_RCC_OscConfig+0x624>)
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d100      	bne.n	8003c06 <HAL_RCC_OscConfig+0x496>
 8003c04:	e0bb      	b.n	8003d7e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c06:	4b60      	ldr	r3, [pc, #384]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2238      	movs	r2, #56	@ 0x38
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	2b10      	cmp	r3, #16
 8003c10:	d100      	bne.n	8003c14 <HAL_RCC_OscConfig+0x4a4>
 8003c12:	e07b      	b.n	8003d0c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d156      	bne.n	8003cca <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1c:	4b5a      	ldr	r3, [pc, #360]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b59      	ldr	r3, [pc, #356]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003c22:	495d      	ldr	r1, [pc, #372]	@ (8003d98 <HAL_RCC_OscConfig+0x628>)
 8003c24:	400a      	ands	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fe fc2a 	bl	8002480 <HAL_GetTick>
 8003c2c:	0003      	movs	r3, r0
 8003c2e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c32:	f7fe fc25 	bl	8002480 <HAL_GetTick>
 8003c36:	0002      	movs	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e09d      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c44:	4b50      	ldr	r3, [pc, #320]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	2380      	movs	r3, #128	@ 0x80
 8003c4a:	049b      	lsls	r3, r3, #18
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d1f0      	bne.n	8003c32 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c50:	4b4d      	ldr	r3, [pc, #308]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4a51      	ldr	r2, [pc, #324]	@ (8003d9c <HAL_RCC_OscConfig+0x62c>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	0019      	movs	r1, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1a      	ldr	r2, [r3, #32]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c68:	021b      	lsls	r3, r3, #8
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	4b42      	ldr	r3, [pc, #264]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003c80:	430a      	orrs	r2, r1
 8003c82:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c84:	4b40      	ldr	r3, [pc, #256]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	4b3f      	ldr	r3, [pc, #252]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003c8a:	2180      	movs	r1, #128	@ 0x80
 8003c8c:	0449      	lsls	r1, r1, #17
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003c92:	4b3d      	ldr	r3, [pc, #244]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	4b3c      	ldr	r3, [pc, #240]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003c98:	2180      	movs	r1, #128	@ 0x80
 8003c9a:	0549      	lsls	r1, r1, #21
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fe fbee 	bl	8002480 <HAL_GetTick>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003caa:	f7fe fbe9 	bl	8002480 <HAL_GetTick>
 8003cae:	0002      	movs	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e061      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbc:	4b32      	ldr	r3, [pc, #200]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	2380      	movs	r3, #128	@ 0x80
 8003cc2:	049b      	lsls	r3, r3, #18
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x53a>
 8003cc8:	e059      	b.n	8003d7e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cca:	4b2f      	ldr	r3, [pc, #188]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4b2e      	ldr	r3, [pc, #184]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003cd0:	4931      	ldr	r1, [pc, #196]	@ (8003d98 <HAL_RCC_OscConfig+0x628>)
 8003cd2:	400a      	ands	r2, r1
 8003cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd6:	f7fe fbd3 	bl	8002480 <HAL_GetTick>
 8003cda:	0003      	movs	r3, r0
 8003cdc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce0:	f7fe fbce 	bl	8002480 <HAL_GetTick>
 8003ce4:	0002      	movs	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e046      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cf2:	4b25      	ldr	r3, [pc, #148]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	2380      	movs	r3, #128	@ 0x80
 8003cf8:	049b      	lsls	r3, r3, #18
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003cfe:	4b22      	ldr	r3, [pc, #136]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	4b21      	ldr	r3, [pc, #132]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003d04:	4926      	ldr	r1, [pc, #152]	@ (8003da0 <HAL_RCC_OscConfig+0x630>)
 8003d06:	400a      	ands	r2, r1
 8003d08:	60da      	str	r2, [r3, #12]
 8003d0a:	e038      	b.n	8003d7e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e033      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003d18:	4b1b      	ldr	r3, [pc, #108]	@ (8003d88 <HAL_RCC_OscConfig+0x618>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2203      	movs	r2, #3
 8003d22:	401a      	ands	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d126      	bne.n	8003d7a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2270      	movs	r2, #112	@ 0x70
 8003d30:	401a      	ands	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d11f      	bne.n	8003d7a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	23fe      	movs	r3, #254	@ 0xfe
 8003d3e:	01db      	lsls	r3, r3, #7
 8003d40:	401a      	ands	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d46:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d116      	bne.n	8003d7a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	23f8      	movs	r3, #248	@ 0xf8
 8003d50:	039b      	lsls	r3, r3, #14
 8003d52:	401a      	ands	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d10e      	bne.n	8003d7a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	23e0      	movs	r3, #224	@ 0xe0
 8003d60:	051b      	lsls	r3, r3, #20
 8003d62:	401a      	ands	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d106      	bne.n	8003d7a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	0f5b      	lsrs	r3, r3, #29
 8003d70:	075a      	lsls	r2, r3, #29
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d001      	beq.n	8003d7e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	0018      	movs	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b008      	add	sp, #32
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40007000 	.word	0x40007000
 8003d90:	00001388 	.word	0x00001388
 8003d94:	efffffff 	.word	0xefffffff
 8003d98:	feffffff 	.word	0xfeffffff
 8003d9c:	11c1808c 	.word	0x11c1808c
 8003da0:	eefefffc 	.word	0xeefefffc

08003da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0e9      	b.n	8003f8c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003db8:	4b76      	ldr	r3, [pc, #472]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2207      	movs	r2, #7
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d91e      	bls.n	8003e04 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b73      	ldr	r3, [pc, #460]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2207      	movs	r2, #7
 8003dcc:	4393      	bics	r3, r2
 8003dce:	0019      	movs	r1, r3
 8003dd0:	4b70      	ldr	r3, [pc, #448]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003dd8:	f7fe fb52 	bl	8002480 <HAL_GetTick>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003de0:	e009      	b.n	8003df6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de2:	f7fe fb4d 	bl	8002480 <HAL_GetTick>
 8003de6:	0002      	movs	r2, r0
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	4a6a      	ldr	r2, [pc, #424]	@ (8003f98 <HAL_RCC_ClockConfig+0x1f4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e0ca      	b.n	8003f8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003df6:	4b67      	ldr	r3, [pc, #412]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2207      	movs	r2, #7
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d1ee      	bne.n	8003de2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d015      	beq.n	8003e3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2204      	movs	r2, #4
 8003e14:	4013      	ands	r3, r2
 8003e16:	d006      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003e18:	4b60      	ldr	r3, [pc, #384]	@ (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	4b5f      	ldr	r3, [pc, #380]	@ (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003e1e:	21e0      	movs	r1, #224	@ 0xe0
 8003e20:	01c9      	lsls	r1, r1, #7
 8003e22:	430a      	orrs	r2, r1
 8003e24:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e26:	4b5d      	ldr	r3, [pc, #372]	@ (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	4a5d      	ldr	r2, [pc, #372]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1fc>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	0019      	movs	r1, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	4b59      	ldr	r3, [pc, #356]	@ (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003e36:	430a      	orrs	r2, r1
 8003e38:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	4013      	ands	r3, r2
 8003e42:	d057      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d107      	bne.n	8003e5c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e4c:	4b53      	ldr	r3, [pc, #332]	@ (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	2380      	movs	r3, #128	@ 0x80
 8003e52:	029b      	lsls	r3, r3, #10
 8003e54:	4013      	ands	r3, r2
 8003e56:	d12b      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e097      	b.n	8003f8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d107      	bne.n	8003e74 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e64:	4b4d      	ldr	r3, [pc, #308]	@ (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	2380      	movs	r3, #128	@ 0x80
 8003e6a:	049b      	lsls	r3, r3, #18
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d11f      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e08b      	b.n	8003f8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e7c:	4b47      	ldr	r3, [pc, #284]	@ (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	2380      	movs	r3, #128	@ 0x80
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4013      	ands	r3, r2
 8003e86:	d113      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e07f      	b.n	8003f8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d106      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e94:	4b41      	ldr	r3, [pc, #260]	@ (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e98:	2202      	movs	r2, #2
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d108      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e074      	b.n	8003f8c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea2:	4b3e      	ldr	r3, [pc, #248]	@ (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e06d      	b.n	8003f8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eb0:	4b3a      	ldr	r3, [pc, #232]	@ (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2207      	movs	r2, #7
 8003eb6:	4393      	bics	r3, r2
 8003eb8:	0019      	movs	r1, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	4b37      	ldr	r3, [pc, #220]	@ (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec4:	f7fe fadc 	bl	8002480 <HAL_GetTick>
 8003ec8:	0003      	movs	r3, r0
 8003eca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ecc:	e009      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ece:	f7fe fad7 	bl	8002480 <HAL_GetTick>
 8003ed2:	0002      	movs	r2, r0
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	4a2f      	ldr	r2, [pc, #188]	@ (8003f98 <HAL_RCC_ClockConfig+0x1f4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e054      	b.n	8003f8c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	4b2e      	ldr	r3, [pc, #184]	@ (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2238      	movs	r2, #56	@ 0x38
 8003ee8:	401a      	ands	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d1ec      	bne.n	8003ece <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef4:	4b27      	ldr	r3, [pc, #156]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2207      	movs	r2, #7
 8003efa:	4013      	ands	r3, r2
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d21e      	bcs.n	8003f40 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f02:	4b24      	ldr	r3, [pc, #144]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2207      	movs	r2, #7
 8003f08:	4393      	bics	r3, r2
 8003f0a:	0019      	movs	r1, r3
 8003f0c:	4b21      	ldr	r3, [pc, #132]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f14:	f7fe fab4 	bl	8002480 <HAL_GetTick>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f1c:	e009      	b.n	8003f32 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f1e:	f7fe faaf 	bl	8002480 <HAL_GetTick>
 8003f22:	0002      	movs	r2, r0
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	4a1b      	ldr	r2, [pc, #108]	@ (8003f98 <HAL_RCC_ClockConfig+0x1f4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e02c      	b.n	8003f8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f32:	4b18      	ldr	r3, [pc, #96]	@ (8003f94 <HAL_RCC_ClockConfig+0x1f0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2207      	movs	r2, #7
 8003f38:	4013      	ands	r3, r2
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d1ee      	bne.n	8003f1e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2204      	movs	r2, #4
 8003f46:	4013      	ands	r3, r2
 8003f48:	d009      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003f4a:	4b14      	ldr	r3, [pc, #80]	@ (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	4a15      	ldr	r2, [pc, #84]	@ (8003fa4 <HAL_RCC_ClockConfig+0x200>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	0019      	movs	r1, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	4b10      	ldr	r3, [pc, #64]	@ (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003f5e:	f000 f829 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8003f62:	0001      	movs	r1, r0
 8003f64:	4b0d      	ldr	r3, [pc, #52]	@ (8003f9c <HAL_RCC_ClockConfig+0x1f8>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	0a1b      	lsrs	r3, r3, #8
 8003f6a:	220f      	movs	r2, #15
 8003f6c:	401a      	ands	r2, r3
 8003f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa8 <HAL_RCC_ClockConfig+0x204>)
 8003f70:	0092      	lsls	r2, r2, #2
 8003f72:	58d3      	ldr	r3, [r2, r3]
 8003f74:	221f      	movs	r2, #31
 8003f76:	4013      	ands	r3, r2
 8003f78:	000a      	movs	r2, r1
 8003f7a:	40da      	lsrs	r2, r3
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fac <HAL_RCC_ClockConfig+0x208>)
 8003f7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f80:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb0 <HAL_RCC_ClockConfig+0x20c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	0018      	movs	r0, r3
 8003f86:	f7fe fa1f 	bl	80023c8 <HAL_InitTick>
 8003f8a:	0003      	movs	r3, r0
}
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b004      	add	sp, #16
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40022000 	.word	0x40022000
 8003f98:	00001388 	.word	0x00001388
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	fffff0ff 	.word	0xfffff0ff
 8003fa4:	ffff8fff 	.word	0xffff8fff
 8003fa8:	08006380 	.word	0x08006380
 8003fac:	20000068 	.word	0x20000068
 8003fb0:	2000006c 	.word	0x2000006c

08003fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fba:	4b3c      	ldr	r3, [pc, #240]	@ (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2238      	movs	r2, #56	@ 0x38
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d10f      	bne.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003fc4:	4b39      	ldr	r3, [pc, #228]	@ (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	0adb      	lsrs	r3, r3, #11
 8003fca:	2207      	movs	r2, #7
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2201      	movs	r2, #1
 8003fd0:	409a      	lsls	r2, r3
 8003fd2:	0013      	movs	r3, r2
 8003fd4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003fd6:	6839      	ldr	r1, [r7, #0]
 8003fd8:	4835      	ldr	r0, [pc, #212]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003fda:	f7fc f893 	bl	8000104 <__udivsi3>
 8003fde:	0003      	movs	r3, r0
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	e05d      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fe4:	4b31      	ldr	r3, [pc, #196]	@ (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2238      	movs	r2, #56	@ 0x38
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d102      	bne.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ff0:	4b30      	ldr	r3, [pc, #192]	@ (80040b4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	e054      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2238      	movs	r2, #56	@ 0x38
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b10      	cmp	r3, #16
 8004000:	d138      	bne.n	8004074 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004002:	4b2a      	ldr	r3, [pc, #168]	@ (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	2203      	movs	r2, #3
 8004008:	4013      	ands	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800400c:	4b27      	ldr	r3, [pc, #156]	@ (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	2207      	movs	r2, #7
 8004014:	4013      	ands	r3, r2
 8004016:	3301      	adds	r3, #1
 8004018:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b03      	cmp	r3, #3
 800401e:	d10d      	bne.n	800403c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004020:	68b9      	ldr	r1, [r7, #8]
 8004022:	4824      	ldr	r0, [pc, #144]	@ (80040b4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004024:	f7fc f86e 	bl	8000104 <__udivsi3>
 8004028:	0003      	movs	r3, r0
 800402a:	0019      	movs	r1, r3
 800402c:	4b1f      	ldr	r3, [pc, #124]	@ (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	0a1b      	lsrs	r3, r3, #8
 8004032:	227f      	movs	r2, #127	@ 0x7f
 8004034:	4013      	ands	r3, r2
 8004036:	434b      	muls	r3, r1
 8004038:	617b      	str	r3, [r7, #20]
        break;
 800403a:	e00d      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800403c:	68b9      	ldr	r1, [r7, #8]
 800403e:	481c      	ldr	r0, [pc, #112]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004040:	f7fc f860 	bl	8000104 <__udivsi3>
 8004044:	0003      	movs	r3, r0
 8004046:	0019      	movs	r1, r3
 8004048:	4b18      	ldr	r3, [pc, #96]	@ (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	0a1b      	lsrs	r3, r3, #8
 800404e:	227f      	movs	r2, #127	@ 0x7f
 8004050:	4013      	ands	r3, r2
 8004052:	434b      	muls	r3, r1
 8004054:	617b      	str	r3, [r7, #20]
        break;
 8004056:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004058:	4b14      	ldr	r3, [pc, #80]	@ (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	0f5b      	lsrs	r3, r3, #29
 800405e:	2207      	movs	r2, #7
 8004060:	4013      	ands	r3, r2
 8004062:	3301      	adds	r3, #1
 8004064:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	6978      	ldr	r0, [r7, #20]
 800406a:	f7fc f84b 	bl	8000104 <__udivsi3>
 800406e:	0003      	movs	r3, r0
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	e015      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004074:	4b0d      	ldr	r3, [pc, #52]	@ (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	2238      	movs	r2, #56	@ 0x38
 800407a:	4013      	ands	r3, r2
 800407c:	2b20      	cmp	r3, #32
 800407e:	d103      	bne.n	8004088 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004080:	2380      	movs	r3, #128	@ 0x80
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	e00b      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004088:	4b08      	ldr	r3, [pc, #32]	@ (80040ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2238      	movs	r2, #56	@ 0x38
 800408e:	4013      	ands	r3, r2
 8004090:	2b18      	cmp	r3, #24
 8004092:	d103      	bne.n	800409c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004094:	23fa      	movs	r3, #250	@ 0xfa
 8004096:	01db      	lsls	r3, r3, #7
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	e001      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040a0:	693b      	ldr	r3, [r7, #16]
}
 80040a2:	0018      	movs	r0, r3
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b006      	add	sp, #24
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	46c0      	nop			@ (mov r8, r8)
 80040ac:	40021000 	.word	0x40021000
 80040b0:	00f42400 	.word	0x00f42400
 80040b4:	007a1200 	.word	0x007a1200

080040b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80040c0:	2313      	movs	r3, #19
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040c8:	2312      	movs	r3, #18
 80040ca:	18fb      	adds	r3, r7, r3
 80040cc:	2200      	movs	r2, #0
 80040ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	2380      	movs	r3, #128	@ 0x80
 80040d6:	029b      	lsls	r3, r3, #10
 80040d8:	4013      	ands	r3, r2
 80040da:	d100      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x26>
 80040dc:	e0a3      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040de:	2011      	movs	r0, #17
 80040e0:	183b      	adds	r3, r7, r0
 80040e2:	2200      	movs	r2, #0
 80040e4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040e6:	4ba5      	ldr	r3, [pc, #660]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040ea:	2380      	movs	r3, #128	@ 0x80
 80040ec:	055b      	lsls	r3, r3, #21
 80040ee:	4013      	ands	r3, r2
 80040f0:	d110      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f2:	4ba2      	ldr	r3, [pc, #648]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040f6:	4ba1      	ldr	r3, [pc, #644]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040f8:	2180      	movs	r1, #128	@ 0x80
 80040fa:	0549      	lsls	r1, r1, #21
 80040fc:	430a      	orrs	r2, r1
 80040fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004100:	4b9e      	ldr	r3, [pc, #632]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004102:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004104:	2380      	movs	r3, #128	@ 0x80
 8004106:	055b      	lsls	r3, r3, #21
 8004108:	4013      	ands	r3, r2
 800410a:	60bb      	str	r3, [r7, #8]
 800410c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800410e:	183b      	adds	r3, r7, r0
 8004110:	2201      	movs	r2, #1
 8004112:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004114:	4b9a      	ldr	r3, [pc, #616]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4b99      	ldr	r3, [pc, #612]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800411a:	2180      	movs	r1, #128	@ 0x80
 800411c:	0049      	lsls	r1, r1, #1
 800411e:	430a      	orrs	r2, r1
 8004120:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004122:	f7fe f9ad 	bl	8002480 <HAL_GetTick>
 8004126:	0003      	movs	r3, r0
 8004128:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800412a:	e00b      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800412c:	f7fe f9a8 	bl	8002480 <HAL_GetTick>
 8004130:	0002      	movs	r2, r0
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d904      	bls.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800413a:	2313      	movs	r3, #19
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	2203      	movs	r2, #3
 8004140:	701a      	strb	r2, [r3, #0]
        break;
 8004142:	e005      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004144:	4b8e      	ldr	r3, [pc, #568]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	2380      	movs	r3, #128	@ 0x80
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	4013      	ands	r3, r2
 800414e:	d0ed      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004150:	2313      	movs	r3, #19
 8004152:	18fb      	adds	r3, r7, r3
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d154      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800415a:	4b88      	ldr	r3, [pc, #544]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800415c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800415e:	23c0      	movs	r3, #192	@ 0xc0
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4013      	ands	r3, r2
 8004164:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d019      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	429a      	cmp	r2, r3
 8004174:	d014      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004176:	4b81      	ldr	r3, [pc, #516]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417a:	4a82      	ldr	r2, [pc, #520]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800417c:	4013      	ands	r3, r2
 800417e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004180:	4b7e      	ldr	r3, [pc, #504]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004182:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004184:	4b7d      	ldr	r3, [pc, #500]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004186:	2180      	movs	r1, #128	@ 0x80
 8004188:	0249      	lsls	r1, r1, #9
 800418a:	430a      	orrs	r2, r1
 800418c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800418e:	4b7b      	ldr	r3, [pc, #492]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004190:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004192:	4b7a      	ldr	r3, [pc, #488]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004194:	497c      	ldr	r1, [pc, #496]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004196:	400a      	ands	r2, r1
 8004198:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800419a:	4b78      	ldr	r3, [pc, #480]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2201      	movs	r2, #1
 80041a4:	4013      	ands	r3, r2
 80041a6:	d016      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fe f96a 	bl	8002480 <HAL_GetTick>
 80041ac:	0003      	movs	r3, r0
 80041ae:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041b0:	e00c      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b2:	f7fe f965 	bl	8002480 <HAL_GetTick>
 80041b6:	0002      	movs	r2, r0
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	4a73      	ldr	r2, [pc, #460]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d904      	bls.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80041c2:	2313      	movs	r3, #19
 80041c4:	18fb      	adds	r3, r7, r3
 80041c6:	2203      	movs	r2, #3
 80041c8:	701a      	strb	r2, [r3, #0]
            break;
 80041ca:	e004      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041cc:	4b6b      	ldr	r3, [pc, #428]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d0:	2202      	movs	r2, #2
 80041d2:	4013      	ands	r3, r2
 80041d4:	d0ed      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80041d6:	2313      	movs	r3, #19
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10a      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041e0:	4b66      	ldr	r3, [pc, #408]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e4:	4a67      	ldr	r2, [pc, #412]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80041e6:	4013      	ands	r3, r2
 80041e8:	0019      	movs	r1, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041ee:	4b63      	ldr	r3, [pc, #396]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041f0:	430a      	orrs	r2, r1
 80041f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80041f4:	e00c      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041f6:	2312      	movs	r3, #18
 80041f8:	18fb      	adds	r3, r7, r3
 80041fa:	2213      	movs	r2, #19
 80041fc:	18ba      	adds	r2, r7, r2
 80041fe:	7812      	ldrb	r2, [r2, #0]
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	e005      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004204:	2312      	movs	r3, #18
 8004206:	18fb      	adds	r3, r7, r3
 8004208:	2213      	movs	r2, #19
 800420a:	18ba      	adds	r2, r7, r2
 800420c:	7812      	ldrb	r2, [r2, #0]
 800420e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004210:	2311      	movs	r3, #17
 8004212:	18fb      	adds	r3, r7, r3
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d105      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800421a:	4b58      	ldr	r3, [pc, #352]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800421c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800421e:	4b57      	ldr	r3, [pc, #348]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004220:	495b      	ldr	r1, [pc, #364]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004222:	400a      	ands	r2, r1
 8004224:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2201      	movs	r2, #1
 800422c:	4013      	ands	r3, r2
 800422e:	d009      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004230:	4b52      	ldr	r3, [pc, #328]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004234:	2203      	movs	r2, #3
 8004236:	4393      	bics	r3, r2
 8004238:	0019      	movs	r1, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	4b4f      	ldr	r3, [pc, #316]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004240:	430a      	orrs	r2, r1
 8004242:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2210      	movs	r2, #16
 800424a:	4013      	ands	r3, r2
 800424c:	d009      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800424e:	4b4b      	ldr	r3, [pc, #300]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004252:	4a50      	ldr	r2, [pc, #320]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004254:	4013      	ands	r3, r2
 8004256:	0019      	movs	r1, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	4b47      	ldr	r3, [pc, #284]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800425e:	430a      	orrs	r2, r1
 8004260:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	2380      	movs	r3, #128	@ 0x80
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4013      	ands	r3, r2
 800426c:	d009      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800426e:	4b43      	ldr	r3, [pc, #268]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004272:	4a49      	ldr	r2, [pc, #292]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004274:	4013      	ands	r3, r2
 8004276:	0019      	movs	r1, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	695a      	ldr	r2, [r3, #20]
 800427c:	4b3f      	ldr	r3, [pc, #252]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800427e:	430a      	orrs	r2, r1
 8004280:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	2380      	movs	r3, #128	@ 0x80
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	4013      	ands	r3, r2
 800428c:	d009      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800428e:	4b3b      	ldr	r3, [pc, #236]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004292:	4a42      	ldr	r2, [pc, #264]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004294:	4013      	ands	r3, r2
 8004296:	0019      	movs	r1, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699a      	ldr	r2, [r3, #24]
 800429c:	4b37      	ldr	r3, [pc, #220]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800429e:	430a      	orrs	r2, r1
 80042a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2220      	movs	r2, #32
 80042a8:	4013      	ands	r3, r2
 80042aa:	d009      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042ac:	4b33      	ldr	r3, [pc, #204]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b0:	4a3b      	ldr	r2, [pc, #236]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	4b30      	ldr	r3, [pc, #192]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042bc:	430a      	orrs	r2, r1
 80042be:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	2380      	movs	r3, #128	@ 0x80
 80042c6:	01db      	lsls	r3, r3, #7
 80042c8:	4013      	ands	r3, r2
 80042ca:	d015      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042cc:	4b2b      	ldr	r3, [pc, #172]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	0899      	lsrs	r1, r3, #2
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	69da      	ldr	r2, [r3, #28]
 80042d8:	4b28      	ldr	r3, [pc, #160]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042da:	430a      	orrs	r2, r1
 80042dc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69da      	ldr	r2, [r3, #28]
 80042e2:	2380      	movs	r3, #128	@ 0x80
 80042e4:	05db      	lsls	r3, r3, #23
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d106      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80042ea:	4b24      	ldr	r3, [pc, #144]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	4b23      	ldr	r3, [pc, #140]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042f0:	2180      	movs	r1, #128	@ 0x80
 80042f2:	0249      	lsls	r1, r1, #9
 80042f4:	430a      	orrs	r2, r1
 80042f6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	2380      	movs	r3, #128	@ 0x80
 80042fe:	039b      	lsls	r3, r3, #14
 8004300:	4013      	ands	r3, r2
 8004302:	d016      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004304:	4b1d      	ldr	r3, [pc, #116]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004308:	4a26      	ldr	r2, [pc, #152]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800430a:	4013      	ands	r3, r2
 800430c:	0019      	movs	r1, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1a      	ldr	r2, [r3, #32]
 8004312:	4b1a      	ldr	r3, [pc, #104]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004314:	430a      	orrs	r2, r1
 8004316:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1a      	ldr	r2, [r3, #32]
 800431c:	2380      	movs	r3, #128	@ 0x80
 800431e:	03db      	lsls	r3, r3, #15
 8004320:	429a      	cmp	r2, r3
 8004322:	d106      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004324:	4b15      	ldr	r3, [pc, #84]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	4b14      	ldr	r3, [pc, #80]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800432a:	2180      	movs	r1, #128	@ 0x80
 800432c:	0449      	lsls	r1, r1, #17
 800432e:	430a      	orrs	r2, r1
 8004330:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	2380      	movs	r3, #128	@ 0x80
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	4013      	ands	r3, r2
 800433c:	d016      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800433e:	4b0f      	ldr	r3, [pc, #60]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004342:	4a19      	ldr	r2, [pc, #100]	@ (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004344:	4013      	ands	r3, r2
 8004346:	0019      	movs	r1, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800434e:	430a      	orrs	r2, r1
 8004350:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	2380      	movs	r3, #128	@ 0x80
 8004358:	01db      	lsls	r3, r3, #7
 800435a:	429a      	cmp	r2, r3
 800435c:	d106      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800435e:	4b07      	ldr	r3, [pc, #28]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	4b06      	ldr	r3, [pc, #24]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004364:	2180      	movs	r1, #128	@ 0x80
 8004366:	0249      	lsls	r1, r1, #9
 8004368:	430a      	orrs	r2, r1
 800436a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800436c:	2312      	movs	r3, #18
 800436e:	18fb      	adds	r3, r7, r3
 8004370:	781b      	ldrb	r3, [r3, #0]
}
 8004372:	0018      	movs	r0, r3
 8004374:	46bd      	mov	sp, r7
 8004376:	b006      	add	sp, #24
 8004378:	bd80      	pop	{r7, pc}
 800437a:	46c0      	nop			@ (mov r8, r8)
 800437c:	40021000 	.word	0x40021000
 8004380:	40007000 	.word	0x40007000
 8004384:	fffffcff 	.word	0xfffffcff
 8004388:	fffeffff 	.word	0xfffeffff
 800438c:	00001388 	.word	0x00001388
 8004390:	efffffff 	.word	0xefffffff
 8004394:	fffff3ff 	.word	0xfffff3ff
 8004398:	fff3ffff 	.word	0xfff3ffff
 800439c:	ffcfffff 	.word	0xffcfffff
 80043a0:	ffffcfff 	.word	0xffffcfff
 80043a4:	ffbfffff 	.word	0xffbfffff
 80043a8:	ffff3fff 	.word	0xffff3fff

080043ac <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 80043ac:	b590      	push	{r4, r7, lr}
 80043ae:	b08b      	sub	sp, #44	@ 0x2c
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 80043b4:	2427      	movs	r4, #39	@ 0x27
 80043b6:	193b      	adds	r3, r7, r4
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]
  FlagStatus       backupchanged = RESET;
 80043bc:	2326      	movs	r3, #38	@ 0x26
 80043be:	18fb      	adds	r3, r7, r3
 80043c0:	2200      	movs	r2, #0
 80043c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 80043c4:	4b31      	ldr	r3, [pc, #196]	@ (800448c <HAL_RCCEx_EnableLSCO+0xe0>)
 80043c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043c8:	4b30      	ldr	r3, [pc, #192]	@ (800448c <HAL_RCCEx_EnableLSCO+0xe0>)
 80043ca:	2101      	movs	r1, #1
 80043cc:	430a      	orrs	r2, r1
 80043ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80043d0:	4b2e      	ldr	r3, [pc, #184]	@ (800448c <HAL_RCCEx_EnableLSCO+0xe0>)
 80043d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d4:	2201      	movs	r2, #1
 80043d6:	4013      	ands	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 80043dc:	2110      	movs	r1, #16
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	2204      	movs	r2, #4
 80043e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043e4:	187b      	adds	r3, r7, r1
 80043e6:	2203      	movs	r2, #3
 80043e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ea:	187b      	adds	r3, r7, r1
 80043ec:	2203      	movs	r2, #3
 80043ee:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f0:	187b      	adds	r3, r7, r1
 80043f2:	2200      	movs	r2, #0
 80043f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 80043f6:	187a      	adds	r2, r7, r1
 80043f8:	23a0      	movs	r3, #160	@ 0xa0
 80043fa:	05db      	lsls	r3, r3, #23
 80043fc:	0011      	movs	r1, r2
 80043fe:	0018      	movs	r0, r3
 8004400:	f7fe f926 	bl	8002650 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004404:	4b21      	ldr	r3, [pc, #132]	@ (800448c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004406:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004408:	2380      	movs	r3, #128	@ 0x80
 800440a:	055b      	lsls	r3, r3, #21
 800440c:	4013      	ands	r3, r2
 800440e:	d110      	bne.n	8004432 <HAL_RCCEx_EnableLSCO+0x86>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004410:	4b1e      	ldr	r3, [pc, #120]	@ (800448c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004412:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004414:	4b1d      	ldr	r3, [pc, #116]	@ (800448c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004416:	2180      	movs	r1, #128	@ 0x80
 8004418:	0549      	lsls	r1, r1, #21
 800441a:	430a      	orrs	r2, r1
 800441c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800441e:	4b1b      	ldr	r3, [pc, #108]	@ (800448c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004420:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004422:	2380      	movs	r3, #128	@ 0x80
 8004424:	055b      	lsls	r3, r3, #21
 8004426:	4013      	ands	r3, r2
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 800442c:	193b      	adds	r3, r7, r4
 800442e:	2201      	movs	r2, #1
 8004430:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004432:	4b17      	ldr	r3, [pc, #92]	@ (8004490 <HAL_RCCEx_EnableLSCO+0xe4>)
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	2380      	movs	r3, #128	@ 0x80
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	4013      	ands	r3, r2
 800443c:	d105      	bne.n	800444a <HAL_RCCEx_EnableLSCO+0x9e>
  {
    HAL_PWR_EnableBkUpAccess();
 800443e:	f7ff f939 	bl	80036b4 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 8004442:	2326      	movs	r3, #38	@ 0x26
 8004444:	18fb      	adds	r3, r7, r3
 8004446:	2201      	movs	r2, #1
 8004448:	701a      	strb	r2, [r3, #0]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 800444a:	4b10      	ldr	r3, [pc, #64]	@ (800448c <HAL_RCCEx_EnableLSCO+0xe0>)
 800444c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800444e:	4a11      	ldr	r2, [pc, #68]	@ (8004494 <HAL_RCCEx_EnableLSCO+0xe8>)
 8004450:	401a      	ands	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	431a      	orrs	r2, r3
 8004456:	4b0d      	ldr	r3, [pc, #52]	@ (800448c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004458:	2180      	movs	r1, #128	@ 0x80
 800445a:	0449      	lsls	r1, r1, #17
 800445c:	430a      	orrs	r2, r1
 800445e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (backupchanged == SET)
 8004460:	2326      	movs	r3, #38	@ 0x26
 8004462:	18fb      	adds	r3, r7, r3
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_RCCEx_EnableLSCO+0xc2>
  {
    HAL_PWR_DisableBkUpAccess();
 800446a:	f7ff f931 	bl	80036d0 <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 800446e:	2327      	movs	r3, #39	@ 0x27
 8004470:	18fb      	adds	r3, r7, r3
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d105      	bne.n	8004484 <HAL_RCCEx_EnableLSCO+0xd8>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8004478:	4b04      	ldr	r3, [pc, #16]	@ (800448c <HAL_RCCEx_EnableLSCO+0xe0>)
 800447a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800447c:	4b03      	ldr	r3, [pc, #12]	@ (800448c <HAL_RCCEx_EnableLSCO+0xe0>)
 800447e:	4906      	ldr	r1, [pc, #24]	@ (8004498 <HAL_RCCEx_EnableLSCO+0xec>)
 8004480:	400a      	ands	r2, r1
 8004482:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8004484:	46c0      	nop			@ (mov r8, r8)
 8004486:	46bd      	mov	sp, r7
 8004488:	b00b      	add	sp, #44	@ 0x2c
 800448a:	bd90      	pop	{r4, r7, pc}
 800448c:	40021000 	.word	0x40021000
 8004490:	40007000 	.word	0x40007000
 8004494:	fcffffff 	.word	0xfcffffff
 8004498:	efffffff 	.word	0xefffffff

0800449c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800449c:	b5b0      	push	{r4, r5, r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80044a4:	230f      	movs	r3, #15
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	2201      	movs	r2, #1
 80044aa:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d100      	bne.n	80044b4 <HAL_RTC_Init+0x18>
 80044b2:	e08c      	b.n	80045ce <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2229      	movs	r2, #41	@ 0x29
 80044b8:	5c9b      	ldrb	r3, [r3, r2]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10b      	bne.n	80044d8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2228      	movs	r2, #40	@ 0x28
 80044c4:	2100      	movs	r1, #0
 80044c6:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2288      	movs	r2, #136	@ 0x88
 80044cc:	0212      	lsls	r2, r2, #8
 80044ce:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	0018      	movs	r0, r3
 80044d4:	f7fd fdf4 	bl	80020c0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2229      	movs	r2, #41	@ 0x29
 80044dc:	2102      	movs	r1, #2
 80044de:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	2210      	movs	r2, #16
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b10      	cmp	r3, #16
 80044ec:	d062      	beq.n	80045b4 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	22ca      	movs	r2, #202	@ 0xca
 80044f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2253      	movs	r2, #83	@ 0x53
 80044fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80044fe:	250f      	movs	r5, #15
 8004500:	197c      	adds	r4, r7, r5
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	0018      	movs	r0, r3
 8004506:	f000 fcb9 	bl	8004e7c <RTC_EnterInitMode>
 800450a:	0003      	movs	r3, r0
 800450c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800450e:	0028      	movs	r0, r5
 8004510:	183b      	adds	r3, r7, r0
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d12c      	bne.n	8004572 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	492e      	ldr	r1, [pc, #184]	@ (80045dc <HAL_RTC_Init+0x140>)
 8004524:	400a      	ands	r2, r1
 8004526:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6999      	ldr	r1, [r3, #24]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6912      	ldr	r2, [r2, #16]
 800454e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6919      	ldr	r1, [r3, #16]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	041a      	lsls	r2, r3, #16
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004564:	183c      	adds	r4, r7, r0
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	0018      	movs	r0, r3
 800456a:	f000 fcc9 	bl	8004f00 <RTC_ExitInitMode>
 800456e:	0003      	movs	r3, r0
 8004570:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004572:	230f      	movs	r3, #15
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d116      	bne.n	80045aa <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	00d2      	lsls	r2, r2, #3
 8004588:	08d2      	lsrs	r2, r2, #3
 800458a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6999      	ldr	r1, [r3, #24]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	22ff      	movs	r2, #255	@ 0xff
 80045b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80045b2:	e003      	b.n	80045bc <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80045b4:	230f      	movs	r3, #15
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80045bc:	230f      	movs	r3, #15
 80045be:	18fb      	adds	r3, r7, r3
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d103      	bne.n	80045ce <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2229      	movs	r2, #41	@ 0x29
 80045ca:	2101      	movs	r1, #1
 80045cc:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80045ce:	230f      	movs	r3, #15
 80045d0:	18fb      	adds	r3, r7, r3
 80045d2:	781b      	ldrb	r3, [r3, #0]
}
 80045d4:	0018      	movs	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b004      	add	sp, #16
 80045da:	bdb0      	pop	{r4, r5, r7, pc}
 80045dc:	fb8fffbf 	.word	0xfb8fffbf

080045e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80045e0:	b5b0      	push	{r4, r5, r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2228      	movs	r2, #40	@ 0x28
 80045f0:	5c9b      	ldrb	r3, [r3, r2]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <HAL_RTC_SetTime+0x1a>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e092      	b.n	8004720 <HAL_RTC_SetTime+0x140>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2228      	movs	r2, #40	@ 0x28
 80045fe:	2101      	movs	r1, #1
 8004600:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2229      	movs	r2, #41	@ 0x29
 8004606:	2102      	movs	r1, #2
 8004608:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	22ca      	movs	r2, #202	@ 0xca
 8004610:	625a      	str	r2, [r3, #36]	@ 0x24
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2253      	movs	r2, #83	@ 0x53
 8004618:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800461a:	2513      	movs	r5, #19
 800461c:	197c      	adds	r4, r7, r5
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	0018      	movs	r0, r3
 8004622:	f000 fc2b 	bl	8004e7c <RTC_EnterInitMode>
 8004626:	0003      	movs	r3, r0
 8004628:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800462a:	197b      	adds	r3, r7, r5
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d162      	bne.n	80046f8 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d125      	bne.n	8004684 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	2240      	movs	r2, #64	@ 0x40
 8004640:	4013      	ands	r3, r2
 8004642:	d102      	bne.n	800464a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2200      	movs	r2, #0
 8004648:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	0018      	movs	r0, r3
 8004650:	f000 fc9a 	bl	8004f88 <RTC_ByteToBcd2>
 8004654:	0003      	movs	r3, r0
 8004656:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	785b      	ldrb	r3, [r3, #1]
 800465c:	0018      	movs	r0, r3
 800465e:	f000 fc93 	bl	8004f88 <RTC_ByteToBcd2>
 8004662:	0003      	movs	r3, r0
 8004664:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004666:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	789b      	ldrb	r3, [r3, #2]
 800466c:	0018      	movs	r0, r3
 800466e:	f000 fc8b 	bl	8004f88 <RTC_ByteToBcd2>
 8004672:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004674:	0022      	movs	r2, r4
 8004676:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	78db      	ldrb	r3, [r3, #3]
 800467c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	e017      	b.n	80046b4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	2240      	movs	r2, #64	@ 0x40
 800468c:	4013      	ands	r3, r2
 800468e:	d102      	bne.n	8004696 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2200      	movs	r2, #0
 8004694:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	785b      	ldrb	r3, [r3, #1]
 80046a0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046a2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046a8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	78db      	ldrb	r3, [r3, #3]
 80046ae:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	491b      	ldr	r1, [pc, #108]	@ (8004728 <HAL_RTC_SetTime+0x148>)
 80046bc:	400a      	ands	r2, r1
 80046be:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4918      	ldr	r1, [pc, #96]	@ (800472c <HAL_RTC_SetTime+0x14c>)
 80046cc:	400a      	ands	r2, r1
 80046ce:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6999      	ldr	r1, [r3, #24]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	431a      	orrs	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80046e8:	2313      	movs	r3, #19
 80046ea:	18fc      	adds	r4, r7, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	0018      	movs	r0, r3
 80046f0:	f000 fc06 	bl	8004f00 <RTC_ExitInitMode>
 80046f4:	0003      	movs	r3, r0
 80046f6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	22ff      	movs	r2, #255	@ 0xff
 80046fe:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8004700:	2313      	movs	r3, #19
 8004702:	18fb      	adds	r3, r7, r3
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d103      	bne.n	8004712 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2229      	movs	r2, #41	@ 0x29
 800470e:	2101      	movs	r1, #1
 8004710:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2228      	movs	r2, #40	@ 0x28
 8004716:	2100      	movs	r1, #0
 8004718:	5499      	strb	r1, [r3, r2]

  return status;
 800471a:	2313      	movs	r3, #19
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	781b      	ldrb	r3, [r3, #0]
}
 8004720:	0018      	movs	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	b006      	add	sp, #24
 8004726:	bdb0      	pop	{r4, r5, r7, pc}
 8004728:	007f7f7f 	.word	0x007f7f7f
 800472c:	fffbffff 	.word	0xfffbffff

08004730 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	045b      	lsls	r3, r3, #17
 800474e:	0c5a      	lsrs	r2, r3, #17
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a22      	ldr	r2, [pc, #136]	@ (80047e4 <HAL_RTC_GetTime+0xb4>)
 800475c:	4013      	ands	r3, r2
 800475e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	0c1b      	lsrs	r3, r3, #16
 8004764:	b2db      	uxtb	r3, r3
 8004766:	223f      	movs	r2, #63	@ 0x3f
 8004768:	4013      	ands	r3, r2
 800476a:	b2da      	uxtb	r2, r3
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	0a1b      	lsrs	r3, r3, #8
 8004774:	b2db      	uxtb	r3, r3
 8004776:	227f      	movs	r2, #127	@ 0x7f
 8004778:	4013      	ands	r3, r2
 800477a:	b2da      	uxtb	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	b2db      	uxtb	r3, r3
 8004784:	227f      	movs	r2, #127	@ 0x7f
 8004786:	4013      	ands	r3, r2
 8004788:	b2da      	uxtb	r2, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	0d9b      	lsrs	r3, r3, #22
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2201      	movs	r2, #1
 8004796:	4013      	ands	r3, r2
 8004798:	b2da      	uxtb	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d11a      	bne.n	80047da <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	0018      	movs	r0, r3
 80047aa:	f000 fc15 	bl	8004fd8 <RTC_Bcd2ToByte>
 80047ae:	0003      	movs	r3, r0
 80047b0:	001a      	movs	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	785b      	ldrb	r3, [r3, #1]
 80047ba:	0018      	movs	r0, r3
 80047bc:	f000 fc0c 	bl	8004fd8 <RTC_Bcd2ToByte>
 80047c0:	0003      	movs	r3, r0
 80047c2:	001a      	movs	r2, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	789b      	ldrb	r3, [r3, #2]
 80047cc:	0018      	movs	r0, r3
 80047ce:	f000 fc03 	bl	8004fd8 <RTC_Bcd2ToByte>
 80047d2:	0003      	movs	r3, r0
 80047d4:	001a      	movs	r2, r3
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	0018      	movs	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	b006      	add	sp, #24
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	007f7f7f 	.word	0x007f7f7f

080047e8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80047e8:	b5b0      	push	{r4, r5, r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2228      	movs	r2, #40	@ 0x28
 80047f8:	5c9b      	ldrb	r3, [r3, r2]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_RTC_SetDate+0x1a>
 80047fe:	2302      	movs	r3, #2
 8004800:	e07e      	b.n	8004900 <HAL_RTC_SetDate+0x118>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2228      	movs	r2, #40	@ 0x28
 8004806:	2101      	movs	r1, #1
 8004808:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2229      	movs	r2, #41	@ 0x29
 800480e:	2102      	movs	r1, #2
 8004810:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10e      	bne.n	8004836 <HAL_RTC_SetDate+0x4e>
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	785b      	ldrb	r3, [r3, #1]
 800481c:	001a      	movs	r2, r3
 800481e:	2310      	movs	r3, #16
 8004820:	4013      	ands	r3, r2
 8004822:	d008      	beq.n	8004836 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	785b      	ldrb	r3, [r3, #1]
 8004828:	2210      	movs	r2, #16
 800482a:	4393      	bics	r3, r2
 800482c:	b2db      	uxtb	r3, r3
 800482e:	330a      	adds	r3, #10
 8004830:	b2da      	uxtb	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d11c      	bne.n	8004876 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	78db      	ldrb	r3, [r3, #3]
 8004840:	0018      	movs	r0, r3
 8004842:	f000 fba1 	bl	8004f88 <RTC_ByteToBcd2>
 8004846:	0003      	movs	r3, r0
 8004848:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	785b      	ldrb	r3, [r3, #1]
 800484e:	0018      	movs	r0, r3
 8004850:	f000 fb9a 	bl	8004f88 <RTC_ByteToBcd2>
 8004854:	0003      	movs	r3, r0
 8004856:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004858:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	789b      	ldrb	r3, [r3, #2]
 800485e:	0018      	movs	r0, r3
 8004860:	f000 fb92 	bl	8004f88 <RTC_ByteToBcd2>
 8004864:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004866:	0022      	movs	r2, r4
 8004868:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	e00e      	b.n	8004894 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	78db      	ldrb	r3, [r3, #3]
 800487a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	785b      	ldrb	r3, [r3, #1]
 8004880:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004882:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004888:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	22ca      	movs	r2, #202	@ 0xca
 800489a:	625a      	str	r2, [r3, #36]	@ 0x24
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2253      	movs	r2, #83	@ 0x53
 80048a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80048a4:	2513      	movs	r5, #19
 80048a6:	197c      	adds	r4, r7, r5
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	0018      	movs	r0, r3
 80048ac:	f000 fae6 	bl	8004e7c <RTC_EnterInitMode>
 80048b0:	0003      	movs	r3, r0
 80048b2:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80048b4:	0028      	movs	r0, r5
 80048b6:	183b      	adds	r3, r7, r0
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10c      	bne.n	80048d8 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4910      	ldr	r1, [pc, #64]	@ (8004908 <HAL_RTC_SetDate+0x120>)
 80048c6:	400a      	ands	r2, r1
 80048c8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80048ca:	183c      	adds	r4, r7, r0
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	0018      	movs	r0, r3
 80048d0:	f000 fb16 	bl	8004f00 <RTC_ExitInitMode>
 80048d4:	0003      	movs	r3, r0
 80048d6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	22ff      	movs	r2, #255	@ 0xff
 80048de:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80048e0:	2313      	movs	r3, #19
 80048e2:	18fb      	adds	r3, r7, r3
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d103      	bne.n	80048f2 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2229      	movs	r2, #41	@ 0x29
 80048ee:	2101      	movs	r1, #1
 80048f0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2228      	movs	r2, #40	@ 0x28
 80048f6:	2100      	movs	r1, #0
 80048f8:	5499      	strb	r1, [r3, r2]

  return status;
 80048fa:	2313      	movs	r3, #19
 80048fc:	18fb      	adds	r3, r7, r3
 80048fe:	781b      	ldrb	r3, [r3, #0]
}
 8004900:	0018      	movs	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	b006      	add	sp, #24
 8004906:	bdb0      	pop	{r4, r5, r7, pc}
 8004908:	00ffff3f 	.word	0x00ffff3f

0800490c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	4a21      	ldr	r2, [pc, #132]	@ (80049a4 <HAL_RTC_GetDate+0x98>)
 8004920:	4013      	ands	r3, r2
 8004922:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	0c1b      	lsrs	r3, r3, #16
 8004928:	b2da      	uxtb	r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	0a1b      	lsrs	r3, r3, #8
 8004932:	b2db      	uxtb	r3, r3
 8004934:	221f      	movs	r2, #31
 8004936:	4013      	ands	r3, r2
 8004938:	b2da      	uxtb	r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	223f      	movs	r2, #63	@ 0x3f
 8004944:	4013      	ands	r3, r2
 8004946:	b2da      	uxtb	r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	0b5b      	lsrs	r3, r3, #13
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2207      	movs	r2, #7
 8004954:	4013      	ands	r3, r2
 8004956:	b2da      	uxtb	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d11a      	bne.n	8004998 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	78db      	ldrb	r3, [r3, #3]
 8004966:	0018      	movs	r0, r3
 8004968:	f000 fb36 	bl	8004fd8 <RTC_Bcd2ToByte>
 800496c:	0003      	movs	r3, r0
 800496e:	001a      	movs	r2, r3
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	785b      	ldrb	r3, [r3, #1]
 8004978:	0018      	movs	r0, r3
 800497a:	f000 fb2d 	bl	8004fd8 <RTC_Bcd2ToByte>
 800497e:	0003      	movs	r3, r0
 8004980:	001a      	movs	r2, r3
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	789b      	ldrb	r3, [r3, #2]
 800498a:	0018      	movs	r0, r3
 800498c:	f000 fb24 	bl	8004fd8 <RTC_Bcd2ToByte>
 8004990:	0003      	movs	r3, r0
 8004992:	001a      	movs	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	0018      	movs	r0, r3
 800499c:	46bd      	mov	sp, r7
 800499e:	b006      	add	sp, #24
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	46c0      	nop			@ (mov r8, r8)
 80049a4:	00ffff3f 	.word	0x00ffff3f

080049a8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80049a8:	b590      	push	{r4, r7, lr}
 80049aa:	b089      	sub	sp, #36	@ 0x24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2228      	movs	r2, #40	@ 0x28
 80049b8:	5c9b      	ldrb	r3, [r3, r2]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <HAL_RTC_SetAlarm_IT+0x1a>
 80049be:	2302      	movs	r3, #2
 80049c0:	e127      	b.n	8004c12 <HAL_RTC_SetAlarm_IT+0x26a>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2228      	movs	r2, #40	@ 0x28
 80049c6:	2101      	movs	r1, #1
 80049c8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2229      	movs	r2, #41	@ 0x29
 80049ce:	2102      	movs	r1, #2
 80049d0:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d136      	bne.n	8004a46 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	2240      	movs	r2, #64	@ 0x40
 80049e0:	4013      	ands	r3, r2
 80049e2:	d102      	bne.n	80049ea <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2200      	movs	r2, #0
 80049e8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	0018      	movs	r0, r3
 80049f0:	f000 faca 	bl	8004f88 <RTC_ByteToBcd2>
 80049f4:	0003      	movs	r3, r0
 80049f6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	785b      	ldrb	r3, [r3, #1]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f000 fac3 	bl	8004f88 <RTC_ByteToBcd2>
 8004a02:	0003      	movs	r3, r0
 8004a04:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a06:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	789b      	ldrb	r3, [r3, #2]
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f000 fabb 	bl	8004f88 <RTC_ByteToBcd2>
 8004a12:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a14:	0022      	movs	r2, r4
 8004a16:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	78db      	ldrb	r3, [r3, #3]
 8004a1c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2220      	movs	r2, #32
 8004a26:	5c9b      	ldrb	r3, [r3, r2]
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f000 faad 	bl	8004f88 <RTC_ByteToBcd2>
 8004a2e:	0003      	movs	r3, r0
 8004a30:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a32:	0022      	movs	r2, r4
 8004a34:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a3a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a40:	4313      	orrs	r3, r2
 8004a42:	61fb      	str	r3, [r7, #28]
 8004a44:	e022      	b.n	8004a8c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	2240      	movs	r2, #64	@ 0x40
 8004a4e:	4013      	ands	r3, r2
 8004a50:	d102      	bne.n	8004a58 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2200      	movs	r2, #0
 8004a56:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	785b      	ldrb	r3, [r3, #1]
 8004a62:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a64:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a6a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	78db      	ldrb	r3, [r3, #3]
 8004a70:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a72:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2120      	movs	r1, #32
 8004a78:	5c5b      	ldrb	r3, [r3, r1]
 8004a7a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a7c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a82:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	22ca      	movs	r2, #202	@ 0xca
 8004a9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2253      	movs	r2, #83	@ 0x53
 8004aa6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004aac:	2380      	movs	r3, #128	@ 0x80
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d14c      	bne.n	8004b4e <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699a      	ldr	r2, [r3, #24]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4957      	ldr	r1, [pc, #348]	@ (8004c1c <HAL_RTC_SetAlarm_IT+0x274>)
 8004ac0:	400a      	ands	r2, r1
 8004ac2:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2101      	movs	r1, #1
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004ad4:	f7fd fcd4 	bl	8002480 <HAL_GetTick>
 8004ad8:	0003      	movs	r3, r0
 8004ada:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004adc:	e016      	b.n	8004b0c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004ade:	f7fd fccf 	bl	8002480 <HAL_GetTick>
 8004ae2:	0002      	movs	r2, r0
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	1ad2      	subs	r2, r2, r3
 8004ae8:	23fa      	movs	r3, #250	@ 0xfa
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d90d      	bls.n	8004b0c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	22ff      	movs	r2, #255	@ 0xff
 8004af6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2229      	movs	r2, #41	@ 0x29
 8004afc:	2103      	movs	r1, #3
 8004afe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2228      	movs	r2, #40	@ 0x28
 8004b04:	2100      	movs	r1, #0
 8004b06:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e082      	b.n	8004c12 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	4013      	ands	r3, r2
 8004b16:	d0e2      	beq.n	8004ade <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	69fa      	ldr	r2, [r7, #28]
 8004b1e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2180      	movs	r1, #128	@ 0x80
 8004b34:	0049      	lsls	r1, r1, #1
 8004b36:	430a      	orrs	r2, r1
 8004b38:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	699a      	ldr	r2, [r3, #24]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2180      	movs	r1, #128	@ 0x80
 8004b46:	0149      	lsls	r1, r1, #5
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	619a      	str	r2, [r3, #24]
 8004b4c:	e04b      	b.n	8004be6 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	699a      	ldr	r2, [r3, #24]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4931      	ldr	r1, [pc, #196]	@ (8004c20 <HAL_RTC_SetAlarm_IT+0x278>)
 8004b5a:	400a      	ands	r2, r1
 8004b5c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2102      	movs	r1, #2
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004b6e:	f7fd fc87 	bl	8002480 <HAL_GetTick>
 8004b72:	0003      	movs	r3, r0
 8004b74:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004b76:	e016      	b.n	8004ba6 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004b78:	f7fd fc82 	bl	8002480 <HAL_GetTick>
 8004b7c:	0002      	movs	r2, r0
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	1ad2      	subs	r2, r2, r3
 8004b82:	23fa      	movs	r3, #250	@ 0xfa
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d90d      	bls.n	8004ba6 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	22ff      	movs	r2, #255	@ 0xff
 8004b90:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2229      	movs	r2, #41	@ 0x29
 8004b96:	2103      	movs	r1, #3
 8004b98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2228      	movs	r2, #40	@ 0x28
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e035      	b.n	8004c12 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	2202      	movs	r2, #2
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d0e2      	beq.n	8004b78 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699a      	ldr	r2, [r3, #24]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2180      	movs	r1, #128	@ 0x80
 8004bce:	0089      	lsls	r1, r1, #2
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699a      	ldr	r2, [r3, #24]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2180      	movs	r1, #128	@ 0x80
 8004be0:	0189      	lsls	r1, r1, #6
 8004be2:	430a      	orrs	r2, r1
 8004be4:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004be6:	4a0f      	ldr	r2, [pc, #60]	@ (8004c24 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004be8:	2380      	movs	r3, #128	@ 0x80
 8004bea:	58d3      	ldr	r3, [r2, r3]
 8004bec:	490d      	ldr	r1, [pc, #52]	@ (8004c24 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004bee:	2280      	movs	r2, #128	@ 0x80
 8004bf0:	0312      	lsls	r2, r2, #12
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	2280      	movs	r2, #128	@ 0x80
 8004bf6:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	22ff      	movs	r2, #255	@ 0xff
 8004bfe:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2229      	movs	r2, #41	@ 0x29
 8004c04:	2101      	movs	r1, #1
 8004c06:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2228      	movs	r2, #40	@ 0x28
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	0018      	movs	r0, r3
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b009      	add	sp, #36	@ 0x24
 8004c18:	bd90      	pop	{r4, r7, pc}
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	fffffeff 	.word	0xfffffeff
 8004c20:	fffffdff 	.word	0xfffffdff
 8004c24:	40021800 	.word	0x40021800

08004c28 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	2380      	movs	r3, #128	@ 0x80
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d144      	bne.n	8004cca <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2280      	movs	r2, #128	@ 0x80
 8004c44:	0052      	lsls	r2, r2, #1
 8004c46:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4e:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c56:	045b      	lsls	r3, r3, #17
 8004c58:	0c5b      	lsrs	r3, r3, #17
 8004c5a:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	0c1b      	lsrs	r3, r3, #16
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	223f      	movs	r2, #63	@ 0x3f
 8004c64:	4013      	ands	r3, r2
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	0a1b      	lsrs	r3, r3, #8
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	227f      	movs	r2, #127	@ 0x7f
 8004c74:	4013      	ands	r3, r2
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	227f      	movs	r2, #127	@ 0x7f
 8004c82:	4013      	ands	r3, r2
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	0d9b      	lsrs	r3, r3, #22
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2201      	movs	r2, #1
 8004c92:	4013      	ands	r3, r2
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	0e1b      	lsrs	r3, r3, #24
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	223f      	movs	r2, #63	@ 0x3f
 8004ca8:	4013      	ands	r3, r2
 8004caa:	b2d9      	uxtb	r1, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	2380      	movs	r3, #128	@ 0x80
 8004cb6:	05db      	lsls	r3, r3, #23
 8004cb8:	401a      	ands	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	4a3b      	ldr	r2, [pc, #236]	@ (8004db0 <HAL_RTC_GetAlarm+0x188>)
 8004cc2:	401a      	ands	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	615a      	str	r2, [r3, #20]
 8004cc8:	e043      	b.n	8004d52 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2280      	movs	r2, #128	@ 0x80
 8004cce:	0092      	lsls	r2, r2, #2
 8004cd0:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cd8:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ce0:	045b      	lsls	r3, r3, #17
 8004ce2:	0c5b      	lsrs	r3, r3, #17
 8004ce4:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	0c1b      	lsrs	r3, r3, #16
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	223f      	movs	r2, #63	@ 0x3f
 8004cee:	4013      	ands	r3, r2
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	0a1b      	lsrs	r3, r3, #8
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	227f      	movs	r2, #127	@ 0x7f
 8004cfe:	4013      	ands	r3, r2
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	227f      	movs	r2, #127	@ 0x7f
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	0d9b      	lsrs	r3, r3, #22
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	0e1b      	lsrs	r3, r3, #24
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	223f      	movs	r2, #63	@ 0x3f
 8004d32:	4013      	ands	r3, r2
 8004d34:	b2d9      	uxtb	r1, r3
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	2380      	movs	r3, #128	@ 0x80
 8004d40:	05db      	lsls	r3, r3, #23
 8004d42:	401a      	ands	r2, r3
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	4a19      	ldr	r2, [pc, #100]	@ (8004db0 <HAL_RTC_GetAlarm+0x188>)
 8004d4c:	401a      	ands	r2, r3
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d125      	bne.n	8004da4 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	f000 f93b 	bl	8004fd8 <RTC_Bcd2ToByte>
 8004d62:	0003      	movs	r3, r0
 8004d64:	001a      	movs	r2, r3
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	785b      	ldrb	r3, [r3, #1]
 8004d6e:	0018      	movs	r0, r3
 8004d70:	f000 f932 	bl	8004fd8 <RTC_Bcd2ToByte>
 8004d74:	0003      	movs	r3, r0
 8004d76:	001a      	movs	r2, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	789b      	ldrb	r3, [r3, #2]
 8004d80:	0018      	movs	r0, r3
 8004d82:	f000 f929 	bl	8004fd8 <RTC_Bcd2ToByte>
 8004d86:	0003      	movs	r3, r0
 8004d88:	001a      	movs	r2, r3
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2220      	movs	r2, #32
 8004d92:	5c9b      	ldrb	r3, [r3, r2]
 8004d94:	0018      	movs	r0, r3
 8004d96:	f000 f91f 	bl	8004fd8 <RTC_Bcd2ToByte>
 8004d9a:	0003      	movs	r3, r0
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2220      	movs	r2, #32
 8004da2:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	0018      	movs	r0, r3
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b006      	add	sp, #24
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	46c0      	nop			@ (mov r8, r8)
 8004db0:	80808080 	.word	0x80808080

08004db4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	2380      	movs	r3, #128	@ 0x80
 8004dc4:	015b      	lsls	r3, r3, #5
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	d011      	beq.n	8004dee <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	d00b      	beq.n	8004dee <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2101      	movs	r1, #1
 8004de2:	430a      	orrs	r2, r1
 8004de4:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	0018      	movs	r0, r3
 8004dea:	f7fc fac3 	bl	8001374 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	699a      	ldr	r2, [r3, #24]
 8004df4:	2380      	movs	r3, #128	@ 0x80
 8004df6:	019b      	lsls	r3, r3, #6
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d011      	beq.n	8004e20 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e02:	2202      	movs	r2, #2
 8004e04:	4013      	ands	r3, r2
 8004e06:	d00b      	beq.n	8004e20 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2102      	movs	r1, #2
 8004e14:	430a      	orrs	r2, r1
 8004e16:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f000 f9a4 	bl	8005168 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2229      	movs	r2, #41	@ 0x29
 8004e24:	2101      	movs	r1, #1
 8004e26:	5499      	strb	r1, [r3, r2]
}
 8004e28:	46c0      	nop			@ (mov r8, r8)
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b002      	add	sp, #8
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a0e      	ldr	r2, [pc, #56]	@ (8004e78 <HAL_RTC_WaitForSynchro+0x48>)
 8004e3e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004e40:	f7fd fb1e 	bl	8002480 <HAL_GetTick>
 8004e44:	0003      	movs	r3, r0
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004e48:	e00a      	b.n	8004e60 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e4a:	f7fd fb19 	bl	8002480 <HAL_GetTick>
 8004e4e:	0002      	movs	r2, r0
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	1ad2      	subs	r2, r2, r3
 8004e54:	23fa      	movs	r3, #250	@ 0xfa
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d901      	bls.n	8004e60 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e006      	b.n	8004e6e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	4013      	ands	r3, r2
 8004e6a:	d0ee      	beq.n	8004e4a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	0018      	movs	r0, r3
 8004e70:	46bd      	mov	sp, r7
 8004e72:	b004      	add	sp, #16
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	46c0      	nop			@ (mov r8, r8)
 8004e78:	0001005f 	.word	0x0001005f

08004e7c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004e84:	230f      	movs	r3, #15
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	2200      	movs	r2, #0
 8004e8a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	2240      	movs	r2, #64	@ 0x40
 8004e94:	4013      	ands	r3, r2
 8004e96:	d12c      	bne.n	8004ef2 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2180      	movs	r1, #128	@ 0x80
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004ea8:	f7fd faea 	bl	8002480 <HAL_GetTick>
 8004eac:	0003      	movs	r3, r0
 8004eae:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004eb0:	e014      	b.n	8004edc <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004eb2:	f7fd fae5 	bl	8002480 <HAL_GetTick>
 8004eb6:	0002      	movs	r2, r0
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	1ad2      	subs	r2, r2, r3
 8004ebc:	200f      	movs	r0, #15
 8004ebe:	183b      	adds	r3, r7, r0
 8004ec0:	1839      	adds	r1, r7, r0
 8004ec2:	7809      	ldrb	r1, [r1, #0]
 8004ec4:	7019      	strb	r1, [r3, #0]
 8004ec6:	23fa      	movs	r3, #250	@ 0xfa
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d906      	bls.n	8004edc <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004ece:	183b      	adds	r3, r7, r0
 8004ed0:	2203      	movs	r2, #3
 8004ed2:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2229      	movs	r2, #41	@ 0x29
 8004ed8:	2103      	movs	r1, #3
 8004eda:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	2240      	movs	r2, #64	@ 0x40
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d104      	bne.n	8004ef2 <RTC_EnterInitMode+0x76>
 8004ee8:	230f      	movs	r3, #15
 8004eea:	18fb      	adds	r3, r7, r3
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d1df      	bne.n	8004eb2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004ef2:	230f      	movs	r3, #15
 8004ef4:	18fb      	adds	r3, r7, r3
 8004ef6:	781b      	ldrb	r3, [r3, #0]
}
 8004ef8:	0018      	movs	r0, r3
 8004efa:	46bd      	mov	sp, r7
 8004efc:	b004      	add	sp, #16
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f00:	b590      	push	{r4, r7, lr}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f08:	240f      	movs	r4, #15
 8004f0a:	193b      	adds	r3, r7, r4
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004f10:	4b1c      	ldr	r3, [pc, #112]	@ (8004f84 <RTC_ExitInitMode+0x84>)
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	4b1b      	ldr	r3, [pc, #108]	@ (8004f84 <RTC_ExitInitMode+0x84>)
 8004f16:	2180      	movs	r1, #128	@ 0x80
 8004f18:	438a      	bics	r2, r1
 8004f1a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004f1c:	4b19      	ldr	r3, [pc, #100]	@ (8004f84 <RTC_ExitInitMode+0x84>)
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	2220      	movs	r2, #32
 8004f22:	4013      	ands	r3, r2
 8004f24:	d10d      	bne.n	8004f42 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	0018      	movs	r0, r3
 8004f2a:	f7ff ff81 	bl	8004e30 <HAL_RTC_WaitForSynchro>
 8004f2e:	1e03      	subs	r3, r0, #0
 8004f30:	d021      	beq.n	8004f76 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2229      	movs	r2, #41	@ 0x29
 8004f36:	2103      	movs	r1, #3
 8004f38:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004f3a:	193b      	adds	r3, r7, r4
 8004f3c:	2203      	movs	r2, #3
 8004f3e:	701a      	strb	r2, [r3, #0]
 8004f40:	e019      	b.n	8004f76 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f42:	4b10      	ldr	r3, [pc, #64]	@ (8004f84 <RTC_ExitInitMode+0x84>)
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	4b0f      	ldr	r3, [pc, #60]	@ (8004f84 <RTC_ExitInitMode+0x84>)
 8004f48:	2120      	movs	r1, #32
 8004f4a:	438a      	bics	r2, r1
 8004f4c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	0018      	movs	r0, r3
 8004f52:	f7ff ff6d 	bl	8004e30 <HAL_RTC_WaitForSynchro>
 8004f56:	1e03      	subs	r3, r0, #0
 8004f58:	d007      	beq.n	8004f6a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2229      	movs	r2, #41	@ 0x29
 8004f5e:	2103      	movs	r1, #3
 8004f60:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004f62:	230f      	movs	r3, #15
 8004f64:	18fb      	adds	r3, r7, r3
 8004f66:	2203      	movs	r2, #3
 8004f68:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f6a:	4b06      	ldr	r3, [pc, #24]	@ (8004f84 <RTC_ExitInitMode+0x84>)
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	4b05      	ldr	r3, [pc, #20]	@ (8004f84 <RTC_ExitInitMode+0x84>)
 8004f70:	2120      	movs	r1, #32
 8004f72:	430a      	orrs	r2, r1
 8004f74:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004f76:	230f      	movs	r3, #15
 8004f78:	18fb      	adds	r3, r7, r3
 8004f7a:	781b      	ldrb	r3, [r3, #0]
}
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b005      	add	sp, #20
 8004f82:	bd90      	pop	{r4, r7, pc}
 8004f84:	40002800 	.word	0x40002800

08004f88 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	0002      	movs	r2, r0
 8004f90:	1dfb      	adds	r3, r7, #7
 8004f92:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004f98:	230b      	movs	r3, #11
 8004f9a:	18fb      	adds	r3, r7, r3
 8004f9c:	1dfa      	adds	r2, r7, #7
 8004f9e:	7812      	ldrb	r2, [r2, #0]
 8004fa0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004fa2:	e008      	b.n	8004fb6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004faa:	220b      	movs	r2, #11
 8004fac:	18bb      	adds	r3, r7, r2
 8004fae:	18ba      	adds	r2, r7, r2
 8004fb0:	7812      	ldrb	r2, [r2, #0]
 8004fb2:	3a0a      	subs	r2, #10
 8004fb4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004fb6:	210b      	movs	r1, #11
 8004fb8:	187b      	adds	r3, r7, r1
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b09      	cmp	r3, #9
 8004fbe:	d8f1      	bhi.n	8004fa4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	187b      	adds	r3, r7, r1
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	b2db      	uxtb	r3, r3
}
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	b004      	add	sp, #16
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	0002      	movs	r2, r0
 8004fe0:	1dfb      	adds	r3, r7, #7
 8004fe2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004fe4:	1dfb      	adds	r3, r7, #7
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	091b      	lsrs	r3, r3, #4
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	001a      	movs	r2, r3
 8004fee:	0013      	movs	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	189b      	adds	r3, r3, r2
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	1dfb      	adds	r3, r7, #7
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	210f      	movs	r1, #15
 8005002:	400b      	ands	r3, r1
 8005004:	b2db      	uxtb	r3, r3
 8005006:	18d3      	adds	r3, r2, r3
 8005008:	b2db      	uxtb	r3, r3
}
 800500a:	0018      	movs	r0, r3
 800500c:	46bd      	mov	sp, r7
 800500e:	b004      	add	sp, #16
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b086      	sub	sp, #24
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	607a      	str	r2, [r7, #4]
 800501e:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2228      	movs	r2, #40	@ 0x28
 8005024:	5c9b      	ldrb	r3, [r3, r2]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <HAL_RTCEx_SetSmoothCalib+0x1c>
 800502a:	2302      	movs	r3, #2
 800502c:	e04f      	b.n	80050ce <HAL_RTCEx_SetSmoothCalib+0xbc>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2228      	movs	r2, #40	@ 0x28
 8005032:	2101      	movs	r1, #1
 8005034:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2229      	movs	r2, #41	@ 0x29
 800503a:	2102      	movs	r1, #2
 800503c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	22ca      	movs	r2, #202	@ 0xca
 8005044:	625a      	str	r2, [r3, #36]	@ 0x24
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2253      	movs	r2, #83	@ 0x53
 800504c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	2380      	movs	r3, #128	@ 0x80
 8005056:	025b      	lsls	r3, r3, #9
 8005058:	4013      	ands	r3, r2
 800505a:	d022      	beq.n	80050a2 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 800505c:	f7fd fa10 	bl	8002480 <HAL_GetTick>
 8005060:	0003      	movs	r3, r0
 8005062:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8005064:	e016      	b.n	8005094 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005066:	f7fd fa0b 	bl	8002480 <HAL_GetTick>
 800506a:	0002      	movs	r2, r0
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	1ad2      	subs	r2, r2, r3
 8005070:	23fa      	movs	r3, #250	@ 0xfa
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	429a      	cmp	r2, r3
 8005076:	d90d      	bls.n	8005094 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	22ff      	movs	r2, #255	@ 0xff
 800507e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2229      	movs	r2, #41	@ 0x29
 8005084:	2103      	movs	r1, #3
 8005086:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2228      	movs	r2, #40	@ 0x28
 800508c:	2100      	movs	r1, #0
 800508e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e01c      	b.n	80050ce <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	2380      	movs	r3, #128	@ 0x80
 800509c:	025b      	lsls	r3, r3, #9
 800509e:	4013      	ands	r3, r2
 80050a0:	d1e1      	bne.n	8005066 <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	0011      	movs	r1, r2
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	22ff      	movs	r2, #255	@ 0xff
 80050ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2229      	movs	r2, #41	@ 0x29
 80050c0:	2101      	movs	r1, #1
 80050c2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2228      	movs	r2, #40	@ 0x28
 80050c8:	2100      	movs	r1, #0
 80050ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	0018      	movs	r0, r3
 80050d0:	46bd      	mov	sp, r7
 80050d2:	b006      	add	sp, #24
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2228      	movs	r2, #40	@ 0x28
 80050e6:	5c9b      	ldrb	r3, [r3, r2]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e035      	b.n	800515c <HAL_RTCEx_SetCalibrationOutPut+0x84>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2228      	movs	r2, #40	@ 0x28
 80050f4:	2101      	movs	r1, #1
 80050f6:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2229      	movs	r2, #41	@ 0x29
 80050fc:	2102      	movs	r1, #2
 80050fe:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	22ca      	movs	r2, #202	@ 0xca
 8005106:	625a      	str	r2, [r3, #36]	@ 0x24
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2253      	movs	r2, #83	@ 0x53
 800510e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699a      	ldr	r2, [r3, #24]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4912      	ldr	r1, [pc, #72]	@ (8005164 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 800511c:	400a      	ands	r2, r1
 800511e:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6999      	ldr	r1, [r3, #24]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2180      	movs	r1, #128	@ 0x80
 800513c:	0409      	lsls	r1, r1, #16
 800513e:	430a      	orrs	r2, r1
 8005140:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	22ff      	movs	r2, #255	@ 0xff
 8005148:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2229      	movs	r2, #41	@ 0x29
 800514e:	2101      	movs	r1, #1
 8005150:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2228      	movs	r2, #40	@ 0x28
 8005156:	2100      	movs	r1, #0
 8005158:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	0018      	movs	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	b002      	add	sp, #8
 8005162:	bd80      	pop	{r7, pc}
 8005164:	fff7ffff 	.word	0xfff7ffff

08005168 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005170:	46c0      	nop			@ (mov r8, r8)
 8005172:	46bd      	mov	sp, r7
 8005174:	b002      	add	sp, #8
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	001a      	movs	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	18d3      	adds	r3, r2, r3
 8005190:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	3301      	adds	r3, #1
 8005196:	33ff      	adds	r3, #255	@ 0xff
 8005198:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	18d3      	adds	r3, r2, r3
 80051a2:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	601a      	str	r2, [r3, #0]
}
 80051aa:	46c0      	nop			@ (mov r8, r8)
 80051ac:	46bd      	mov	sp, r7
 80051ae:	b006      	add	sp, #24
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b084      	sub	sp, #16
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	001a      	movs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	18d3      	adds	r3, r2, r3
 80051c8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3301      	adds	r3, #1
 80051ce:	33ff      	adds	r3, #255	@ 0xff
 80051d0:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	18d3      	adds	r3, r2, r3
 80051da:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	681b      	ldr	r3, [r3, #0]
}
 80051e0:	0018      	movs	r0, r3
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b004      	add	sp, #16
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e04a      	b.n	8005290 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	223d      	movs	r2, #61	@ 0x3d
 80051fe:	5c9b      	ldrb	r3, [r3, r2]
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d107      	bne.n	8005216 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	223c      	movs	r2, #60	@ 0x3c
 800520a:	2100      	movs	r1, #0
 800520c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	0018      	movs	r0, r3
 8005212:	f7fc ffb7 	bl	8002184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	223d      	movs	r2, #61	@ 0x3d
 800521a:	2102      	movs	r1, #2
 800521c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	3304      	adds	r3, #4
 8005226:	0019      	movs	r1, r3
 8005228:	0010      	movs	r0, r2
 800522a:	f000 fc87 	bl	8005b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2248      	movs	r2, #72	@ 0x48
 8005232:	2101      	movs	r1, #1
 8005234:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	223e      	movs	r2, #62	@ 0x3e
 800523a:	2101      	movs	r1, #1
 800523c:	5499      	strb	r1, [r3, r2]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	223f      	movs	r2, #63	@ 0x3f
 8005242:	2101      	movs	r1, #1
 8005244:	5499      	strb	r1, [r3, r2]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2240      	movs	r2, #64	@ 0x40
 800524a:	2101      	movs	r1, #1
 800524c:	5499      	strb	r1, [r3, r2]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2241      	movs	r2, #65	@ 0x41
 8005252:	2101      	movs	r1, #1
 8005254:	5499      	strb	r1, [r3, r2]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2242      	movs	r2, #66	@ 0x42
 800525a:	2101      	movs	r1, #1
 800525c:	5499      	strb	r1, [r3, r2]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2243      	movs	r2, #67	@ 0x43
 8005262:	2101      	movs	r1, #1
 8005264:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2244      	movs	r2, #68	@ 0x44
 800526a:	2101      	movs	r1, #1
 800526c:	5499      	strb	r1, [r3, r2]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2245      	movs	r2, #69	@ 0x45
 8005272:	2101      	movs	r1, #1
 8005274:	5499      	strb	r1, [r3, r2]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2246      	movs	r2, #70	@ 0x46
 800527a:	2101      	movs	r1, #1
 800527c:	5499      	strb	r1, [r3, r2]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2247      	movs	r2, #71	@ 0x47
 8005282:	2101      	movs	r1, #1
 8005284:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	223d      	movs	r2, #61	@ 0x3d
 800528a:	2101      	movs	r1, #1
 800528c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	0018      	movs	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	b002      	add	sp, #8
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	223d      	movs	r2, #61	@ 0x3d
 80052a4:	5c9b      	ldrb	r3, [r3, r2]
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d001      	beq.n	80052b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e035      	b.n	800531c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	223d      	movs	r2, #61	@ 0x3d
 80052b4:	2102      	movs	r1, #2
 80052b6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a19      	ldr	r2, [pc, #100]	@ (8005324 <HAL_TIM_Base_Start+0x8c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00a      	beq.n	80052d8 <HAL_TIM_Base_Start+0x40>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	2380      	movs	r3, #128	@ 0x80
 80052c8:	05db      	lsls	r3, r3, #23
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d004      	beq.n	80052d8 <HAL_TIM_Base_Start+0x40>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a15      	ldr	r2, [pc, #84]	@ (8005328 <HAL_TIM_Base_Start+0x90>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d116      	bne.n	8005306 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	4a13      	ldr	r2, [pc, #76]	@ (800532c <HAL_TIM_Base_Start+0x94>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b06      	cmp	r3, #6
 80052e8:	d016      	beq.n	8005318 <HAL_TIM_Base_Start+0x80>
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	2380      	movs	r3, #128	@ 0x80
 80052ee:	025b      	lsls	r3, r3, #9
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d011      	beq.n	8005318 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2101      	movs	r1, #1
 8005300:	430a      	orrs	r2, r1
 8005302:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005304:	e008      	b.n	8005318 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2101      	movs	r1, #1
 8005312:	430a      	orrs	r2, r1
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	e000      	b.n	800531a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005318:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	0018      	movs	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	b004      	add	sp, #16
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40012c00 	.word	0x40012c00
 8005328:	40000400 	.word	0x40000400
 800532c:	00010007 	.word	0x00010007

08005330 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	4a0d      	ldr	r2, [pc, #52]	@ (8005374 <HAL_TIM_Base_Stop+0x44>)
 8005340:	4013      	ands	r3, r2
 8005342:	d10d      	bne.n	8005360 <HAL_TIM_Base_Stop+0x30>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	4a0b      	ldr	r2, [pc, #44]	@ (8005378 <HAL_TIM_Base_Stop+0x48>)
 800534c:	4013      	ands	r3, r2
 800534e:	d107      	bne.n	8005360 <HAL_TIM_Base_Stop+0x30>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2101      	movs	r1, #1
 800535c:	438a      	bics	r2, r1
 800535e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	223d      	movs	r2, #61	@ 0x3d
 8005364:	2101      	movs	r1, #1
 8005366:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	0018      	movs	r0, r3
 800536c:	46bd      	mov	sp, r7
 800536e:	b002      	add	sp, #8
 8005370:	bd80      	pop	{r7, pc}
 8005372:	46c0      	nop			@ (mov r8, r8)
 8005374:	00001111 	.word	0x00001111
 8005378:	00000444 	.word	0x00000444

0800537c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	223d      	movs	r2, #61	@ 0x3d
 8005388:	5c9b      	ldrb	r3, [r3, r2]
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b01      	cmp	r3, #1
 800538e:	d001      	beq.n	8005394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e03d      	b.n	8005410 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	223d      	movs	r2, #61	@ 0x3d
 8005398:	2102      	movs	r1, #2
 800539a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2101      	movs	r1, #1
 80053a8:	430a      	orrs	r2, r1
 80053aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a19      	ldr	r2, [pc, #100]	@ (8005418 <HAL_TIM_Base_Start_IT+0x9c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00a      	beq.n	80053cc <HAL_TIM_Base_Start_IT+0x50>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	2380      	movs	r3, #128	@ 0x80
 80053bc:	05db      	lsls	r3, r3, #23
 80053be:	429a      	cmp	r2, r3
 80053c0:	d004      	beq.n	80053cc <HAL_TIM_Base_Start_IT+0x50>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a15      	ldr	r2, [pc, #84]	@ (800541c <HAL_TIM_Base_Start_IT+0xa0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d116      	bne.n	80053fa <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	4a13      	ldr	r2, [pc, #76]	@ (8005420 <HAL_TIM_Base_Start_IT+0xa4>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b06      	cmp	r3, #6
 80053dc:	d016      	beq.n	800540c <HAL_TIM_Base_Start_IT+0x90>
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	2380      	movs	r3, #128	@ 0x80
 80053e2:	025b      	lsls	r3, r3, #9
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d011      	beq.n	800540c <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2101      	movs	r1, #1
 80053f4:	430a      	orrs	r2, r1
 80053f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f8:	e008      	b.n	800540c <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2101      	movs	r1, #1
 8005406:	430a      	orrs	r2, r1
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	e000      	b.n	800540e <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	0018      	movs	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	b004      	add	sp, #16
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40012c00 	.word	0x40012c00
 800541c:	40000400 	.word	0x40000400
 8005420:	00010007 	.word	0x00010007

08005424 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2101      	movs	r1, #1
 8005438:	438a      	bics	r2, r1
 800543a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	4a0d      	ldr	r2, [pc, #52]	@ (8005478 <HAL_TIM_Base_Stop_IT+0x54>)
 8005444:	4013      	ands	r3, r2
 8005446:	d10d      	bne.n	8005464 <HAL_TIM_Base_Stop_IT+0x40>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	4a0b      	ldr	r2, [pc, #44]	@ (800547c <HAL_TIM_Base_Stop_IT+0x58>)
 8005450:	4013      	ands	r3, r2
 8005452:	d107      	bne.n	8005464 <HAL_TIM_Base_Stop_IT+0x40>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2101      	movs	r1, #1
 8005460:	438a      	bics	r2, r1
 8005462:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	223d      	movs	r2, #61	@ 0x3d
 8005468:	2101      	movs	r1, #1
 800546a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	0018      	movs	r0, r3
 8005470:	46bd      	mov	sp, r7
 8005472:	b002      	add	sp, #8
 8005474:	bd80      	pop	{r7, pc}
 8005476:	46c0      	nop			@ (mov r8, r8)
 8005478:	00001111 	.word	0x00001111
 800547c:	00000444 	.word	0x00000444

08005480 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e04a      	b.n	8005528 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	223d      	movs	r2, #61	@ 0x3d
 8005496:	5c9b      	ldrb	r3, [r3, r2]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d107      	bne.n	80054ae <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	223c      	movs	r2, #60	@ 0x3c
 80054a2:	2100      	movs	r1, #0
 80054a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	0018      	movs	r0, r3
 80054aa:	f7fc fe4f 	bl	800214c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	223d      	movs	r2, #61	@ 0x3d
 80054b2:	2102      	movs	r1, #2
 80054b4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3304      	adds	r3, #4
 80054be:	0019      	movs	r1, r3
 80054c0:	0010      	movs	r0, r2
 80054c2:	f000 fb3b 	bl	8005b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2248      	movs	r2, #72	@ 0x48
 80054ca:	2101      	movs	r1, #1
 80054cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	223e      	movs	r2, #62	@ 0x3e
 80054d2:	2101      	movs	r1, #1
 80054d4:	5499      	strb	r1, [r3, r2]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	223f      	movs	r2, #63	@ 0x3f
 80054da:	2101      	movs	r1, #1
 80054dc:	5499      	strb	r1, [r3, r2]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2240      	movs	r2, #64	@ 0x40
 80054e2:	2101      	movs	r1, #1
 80054e4:	5499      	strb	r1, [r3, r2]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2241      	movs	r2, #65	@ 0x41
 80054ea:	2101      	movs	r1, #1
 80054ec:	5499      	strb	r1, [r3, r2]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2242      	movs	r2, #66	@ 0x42
 80054f2:	2101      	movs	r1, #1
 80054f4:	5499      	strb	r1, [r3, r2]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2243      	movs	r2, #67	@ 0x43
 80054fa:	2101      	movs	r1, #1
 80054fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2244      	movs	r2, #68	@ 0x44
 8005502:	2101      	movs	r1, #1
 8005504:	5499      	strb	r1, [r3, r2]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2245      	movs	r2, #69	@ 0x45
 800550a:	2101      	movs	r1, #1
 800550c:	5499      	strb	r1, [r3, r2]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2246      	movs	r2, #70	@ 0x46
 8005512:	2101      	movs	r1, #1
 8005514:	5499      	strb	r1, [r3, r2]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2247      	movs	r2, #71	@ 0x47
 800551a:	2101      	movs	r1, #1
 800551c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	223d      	movs	r2, #61	@ 0x3d
 8005522:	2101      	movs	r1, #1
 8005524:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	0018      	movs	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	b002      	add	sp, #8
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d108      	bne.n	8005552 <HAL_TIM_PWM_Start+0x22>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	223e      	movs	r2, #62	@ 0x3e
 8005544:	5c9b      	ldrb	r3, [r3, r2]
 8005546:	b2db      	uxtb	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	1e5a      	subs	r2, r3, #1
 800554c:	4193      	sbcs	r3, r2
 800554e:	b2db      	uxtb	r3, r3
 8005550:	e037      	b.n	80055c2 <HAL_TIM_PWM_Start+0x92>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b04      	cmp	r3, #4
 8005556:	d108      	bne.n	800556a <HAL_TIM_PWM_Start+0x3a>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	223f      	movs	r2, #63	@ 0x3f
 800555c:	5c9b      	ldrb	r3, [r3, r2]
 800555e:	b2db      	uxtb	r3, r3
 8005560:	3b01      	subs	r3, #1
 8005562:	1e5a      	subs	r2, r3, #1
 8005564:	4193      	sbcs	r3, r2
 8005566:	b2db      	uxtb	r3, r3
 8005568:	e02b      	b.n	80055c2 <HAL_TIM_PWM_Start+0x92>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b08      	cmp	r3, #8
 800556e:	d108      	bne.n	8005582 <HAL_TIM_PWM_Start+0x52>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2240      	movs	r2, #64	@ 0x40
 8005574:	5c9b      	ldrb	r3, [r3, r2]
 8005576:	b2db      	uxtb	r3, r3
 8005578:	3b01      	subs	r3, #1
 800557a:	1e5a      	subs	r2, r3, #1
 800557c:	4193      	sbcs	r3, r2
 800557e:	b2db      	uxtb	r3, r3
 8005580:	e01f      	b.n	80055c2 <HAL_TIM_PWM_Start+0x92>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b0c      	cmp	r3, #12
 8005586:	d108      	bne.n	800559a <HAL_TIM_PWM_Start+0x6a>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2241      	movs	r2, #65	@ 0x41
 800558c:	5c9b      	ldrb	r3, [r3, r2]
 800558e:	b2db      	uxtb	r3, r3
 8005590:	3b01      	subs	r3, #1
 8005592:	1e5a      	subs	r2, r3, #1
 8005594:	4193      	sbcs	r3, r2
 8005596:	b2db      	uxtb	r3, r3
 8005598:	e013      	b.n	80055c2 <HAL_TIM_PWM_Start+0x92>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b10      	cmp	r3, #16
 800559e:	d108      	bne.n	80055b2 <HAL_TIM_PWM_Start+0x82>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2242      	movs	r2, #66	@ 0x42
 80055a4:	5c9b      	ldrb	r3, [r3, r2]
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	1e5a      	subs	r2, r3, #1
 80055ac:	4193      	sbcs	r3, r2
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	e007      	b.n	80055c2 <HAL_TIM_PWM_Start+0x92>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2243      	movs	r2, #67	@ 0x43
 80055b6:	5c9b      	ldrb	r3, [r3, r2]
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	1e5a      	subs	r2, r3, #1
 80055be:	4193      	sbcs	r3, r2
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e081      	b.n	80056ce <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d104      	bne.n	80055da <HAL_TIM_PWM_Start+0xaa>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	223e      	movs	r2, #62	@ 0x3e
 80055d4:	2102      	movs	r1, #2
 80055d6:	5499      	strb	r1, [r3, r2]
 80055d8:	e023      	b.n	8005622 <HAL_TIM_PWM_Start+0xf2>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d104      	bne.n	80055ea <HAL_TIM_PWM_Start+0xba>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	223f      	movs	r2, #63	@ 0x3f
 80055e4:	2102      	movs	r1, #2
 80055e6:	5499      	strb	r1, [r3, r2]
 80055e8:	e01b      	b.n	8005622 <HAL_TIM_PWM_Start+0xf2>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d104      	bne.n	80055fa <HAL_TIM_PWM_Start+0xca>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2240      	movs	r2, #64	@ 0x40
 80055f4:	2102      	movs	r1, #2
 80055f6:	5499      	strb	r1, [r3, r2]
 80055f8:	e013      	b.n	8005622 <HAL_TIM_PWM_Start+0xf2>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b0c      	cmp	r3, #12
 80055fe:	d104      	bne.n	800560a <HAL_TIM_PWM_Start+0xda>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2241      	movs	r2, #65	@ 0x41
 8005604:	2102      	movs	r1, #2
 8005606:	5499      	strb	r1, [r3, r2]
 8005608:	e00b      	b.n	8005622 <HAL_TIM_PWM_Start+0xf2>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b10      	cmp	r3, #16
 800560e:	d104      	bne.n	800561a <HAL_TIM_PWM_Start+0xea>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2242      	movs	r2, #66	@ 0x42
 8005614:	2102      	movs	r1, #2
 8005616:	5499      	strb	r1, [r3, r2]
 8005618:	e003      	b.n	8005622 <HAL_TIM_PWM_Start+0xf2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2243      	movs	r2, #67	@ 0x43
 800561e:	2102      	movs	r1, #2
 8005620:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6839      	ldr	r1, [r7, #0]
 8005628:	2201      	movs	r2, #1
 800562a:	0018      	movs	r0, r3
 800562c:	f000 fda6 	bl	800617c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a28      	ldr	r2, [pc, #160]	@ (80056d8 <HAL_TIM_PWM_Start+0x1a8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d009      	beq.n	800564e <HAL_TIM_PWM_Start+0x11e>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a27      	ldr	r2, [pc, #156]	@ (80056dc <HAL_TIM_PWM_Start+0x1ac>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d004      	beq.n	800564e <HAL_TIM_PWM_Start+0x11e>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a25      	ldr	r2, [pc, #148]	@ (80056e0 <HAL_TIM_PWM_Start+0x1b0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d101      	bne.n	8005652 <HAL_TIM_PWM_Start+0x122>
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <HAL_TIM_PWM_Start+0x124>
 8005652:	2300      	movs	r3, #0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2180      	movs	r1, #128	@ 0x80
 8005664:	0209      	lsls	r1, r1, #8
 8005666:	430a      	orrs	r2, r1
 8005668:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a1a      	ldr	r2, [pc, #104]	@ (80056d8 <HAL_TIM_PWM_Start+0x1a8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d00a      	beq.n	800568a <HAL_TIM_PWM_Start+0x15a>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	2380      	movs	r3, #128	@ 0x80
 800567a:	05db      	lsls	r3, r3, #23
 800567c:	429a      	cmp	r2, r3
 800567e:	d004      	beq.n	800568a <HAL_TIM_PWM_Start+0x15a>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a17      	ldr	r2, [pc, #92]	@ (80056e4 <HAL_TIM_PWM_Start+0x1b4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d116      	bne.n	80056b8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	4a15      	ldr	r2, [pc, #84]	@ (80056e8 <HAL_TIM_PWM_Start+0x1b8>)
 8005692:	4013      	ands	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b06      	cmp	r3, #6
 800569a:	d016      	beq.n	80056ca <HAL_TIM_PWM_Start+0x19a>
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	2380      	movs	r3, #128	@ 0x80
 80056a0:	025b      	lsls	r3, r3, #9
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d011      	beq.n	80056ca <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2101      	movs	r1, #1
 80056b2:	430a      	orrs	r2, r1
 80056b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b6:	e008      	b.n	80056ca <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2101      	movs	r1, #1
 80056c4:	430a      	orrs	r2, r1
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	e000      	b.n	80056cc <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ca:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	0018      	movs	r0, r3
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b004      	add	sp, #16
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	46c0      	nop			@ (mov r8, r8)
 80056d8:	40012c00 	.word	0x40012c00
 80056dc:	40014400 	.word	0x40014400
 80056e0:	40014800 	.word	0x40014800
 80056e4:	40000400 	.word	0x40000400
 80056e8:	00010007 	.word	0x00010007

080056ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2202      	movs	r2, #2
 8005708:	4013      	ands	r3, r2
 800570a:	d021      	beq.n	8005750 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2202      	movs	r2, #2
 8005710:	4013      	ands	r3, r2
 8005712:	d01d      	beq.n	8005750 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2203      	movs	r2, #3
 800571a:	4252      	negs	r2, r2
 800571c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	2203      	movs	r2, #3
 800572c:	4013      	ands	r3, r2
 800572e:	d004      	beq.n	800573a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	0018      	movs	r0, r3
 8005734:	f000 f9ea 	bl	8005b0c <HAL_TIM_IC_CaptureCallback>
 8005738:	e007      	b.n	800574a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	0018      	movs	r0, r3
 800573e:	f000 f9dd 	bl	8005afc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	0018      	movs	r0, r3
 8005746:	f000 f9e9 	bl	8005b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2204      	movs	r2, #4
 8005754:	4013      	ands	r3, r2
 8005756:	d022      	beq.n	800579e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2204      	movs	r2, #4
 800575c:	4013      	ands	r3, r2
 800575e:	d01e      	beq.n	800579e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2205      	movs	r2, #5
 8005766:	4252      	negs	r2, r2
 8005768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2202      	movs	r2, #2
 800576e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699a      	ldr	r2, [r3, #24]
 8005776:	23c0      	movs	r3, #192	@ 0xc0
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4013      	ands	r3, r2
 800577c:	d004      	beq.n	8005788 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	0018      	movs	r0, r3
 8005782:	f000 f9c3 	bl	8005b0c <HAL_TIM_IC_CaptureCallback>
 8005786:	e007      	b.n	8005798 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	0018      	movs	r0, r3
 800578c:	f000 f9b6 	bl	8005afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	0018      	movs	r0, r3
 8005794:	f000 f9c2 	bl	8005b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2208      	movs	r2, #8
 80057a2:	4013      	ands	r3, r2
 80057a4:	d021      	beq.n	80057ea <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2208      	movs	r2, #8
 80057aa:	4013      	ands	r3, r2
 80057ac:	d01d      	beq.n	80057ea <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2209      	movs	r2, #9
 80057b4:	4252      	negs	r2, r2
 80057b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2204      	movs	r2, #4
 80057bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	2203      	movs	r2, #3
 80057c6:	4013      	ands	r3, r2
 80057c8:	d004      	beq.n	80057d4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	0018      	movs	r0, r3
 80057ce:	f000 f99d 	bl	8005b0c <HAL_TIM_IC_CaptureCallback>
 80057d2:	e007      	b.n	80057e4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	0018      	movs	r0, r3
 80057d8:	f000 f990 	bl	8005afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	0018      	movs	r0, r3
 80057e0:	f000 f99c 	bl	8005b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2210      	movs	r2, #16
 80057ee:	4013      	ands	r3, r2
 80057f0:	d022      	beq.n	8005838 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2210      	movs	r2, #16
 80057f6:	4013      	ands	r3, r2
 80057f8:	d01e      	beq.n	8005838 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2211      	movs	r2, #17
 8005800:	4252      	negs	r2, r2
 8005802:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2208      	movs	r2, #8
 8005808:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69da      	ldr	r2, [r3, #28]
 8005810:	23c0      	movs	r3, #192	@ 0xc0
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4013      	ands	r3, r2
 8005816:	d004      	beq.n	8005822 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	0018      	movs	r0, r3
 800581c:	f000 f976 	bl	8005b0c <HAL_TIM_IC_CaptureCallback>
 8005820:	e007      	b.n	8005832 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	0018      	movs	r0, r3
 8005826:	f000 f969 	bl	8005afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	0018      	movs	r0, r3
 800582e:	f000 f975 	bl	8005b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2201      	movs	r2, #1
 800583c:	4013      	ands	r3, r2
 800583e:	d00c      	beq.n	800585a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	4013      	ands	r3, r2
 8005846:	d008      	beq.n	800585a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2202      	movs	r2, #2
 800584e:	4252      	negs	r2, r2
 8005850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	0018      	movs	r0, r3
 8005856:	f7fb fefd 	bl	8001654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2280      	movs	r2, #128	@ 0x80
 800585e:	4013      	ands	r3, r2
 8005860:	d104      	bne.n	800586c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	2380      	movs	r3, #128	@ 0x80
 8005866:	019b      	lsls	r3, r3, #6
 8005868:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800586a:	d00b      	beq.n	8005884 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2280      	movs	r2, #128	@ 0x80
 8005870:	4013      	ands	r3, r2
 8005872:	d007      	beq.n	8005884 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a1e      	ldr	r2, [pc, #120]	@ (80058f4 <HAL_TIM_IRQHandler+0x208>)
 800587a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	0018      	movs	r0, r3
 8005880:	f000 fd10 	bl	80062a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	2380      	movs	r3, #128	@ 0x80
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	4013      	ands	r3, r2
 800588c:	d00b      	beq.n	80058a6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2280      	movs	r2, #128	@ 0x80
 8005892:	4013      	ands	r3, r2
 8005894:	d007      	beq.n	80058a6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a17      	ldr	r2, [pc, #92]	@ (80058f8 <HAL_TIM_IRQHandler+0x20c>)
 800589c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	0018      	movs	r0, r3
 80058a2:	f000 fd07 	bl	80062b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2240      	movs	r2, #64	@ 0x40
 80058aa:	4013      	ands	r3, r2
 80058ac:	d00c      	beq.n	80058c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2240      	movs	r2, #64	@ 0x40
 80058b2:	4013      	ands	r3, r2
 80058b4:	d008      	beq.n	80058c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2241      	movs	r2, #65	@ 0x41
 80058bc:	4252      	negs	r2, r2
 80058be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	0018      	movs	r0, r3
 80058c4:	f000 f932 	bl	8005b2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2220      	movs	r2, #32
 80058cc:	4013      	ands	r3, r2
 80058ce:	d00c      	beq.n	80058ea <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	4013      	ands	r3, r2
 80058d6:	d008      	beq.n	80058ea <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2221      	movs	r2, #33	@ 0x21
 80058de:	4252      	negs	r2, r2
 80058e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	0018      	movs	r0, r3
 80058e6:	f000 fcd5 	bl	8006294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058ea:	46c0      	nop			@ (mov r8, r8)
 80058ec:	46bd      	mov	sp, r7
 80058ee:	b004      	add	sp, #16
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	46c0      	nop			@ (mov r8, r8)
 80058f4:	ffffdf7f 	.word	0xffffdf7f
 80058f8:	fffffeff 	.word	0xfffffeff

080058fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005908:	2317      	movs	r3, #23
 800590a:	18fb      	adds	r3, r7, r3
 800590c:	2200      	movs	r2, #0
 800590e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	223c      	movs	r2, #60	@ 0x3c
 8005914:	5c9b      	ldrb	r3, [r3, r2]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d101      	bne.n	800591e <HAL_TIM_PWM_ConfigChannel+0x22>
 800591a:	2302      	movs	r3, #2
 800591c:	e0e5      	b.n	8005aea <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	223c      	movs	r2, #60	@ 0x3c
 8005922:	2101      	movs	r1, #1
 8005924:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b14      	cmp	r3, #20
 800592a:	d900      	bls.n	800592e <HAL_TIM_PWM_ConfigChannel+0x32>
 800592c:	e0d1      	b.n	8005ad2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	009a      	lsls	r2, r3, #2
 8005932:	4b70      	ldr	r3, [pc, #448]	@ (8005af4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005934:	18d3      	adds	r3, r2, r3
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	0011      	movs	r1, r2
 8005942:	0018      	movs	r0, r3
 8005944:	f000 f97e 	bl	8005c44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699a      	ldr	r2, [r3, #24]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2108      	movs	r1, #8
 8005954:	430a      	orrs	r2, r1
 8005956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699a      	ldr	r2, [r3, #24]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2104      	movs	r1, #4
 8005964:	438a      	bics	r2, r1
 8005966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6999      	ldr	r1, [r3, #24]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	691a      	ldr	r2, [r3, #16]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	619a      	str	r2, [r3, #24]
      break;
 800597a:	e0af      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	0011      	movs	r1, r2
 8005984:	0018      	movs	r0, r3
 8005986:	f000 f9dd 	bl	8005d44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	699a      	ldr	r2, [r3, #24]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2180      	movs	r1, #128	@ 0x80
 8005996:	0109      	lsls	r1, r1, #4
 8005998:	430a      	orrs	r2, r1
 800599a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4954      	ldr	r1, [pc, #336]	@ (8005af8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80059a8:	400a      	ands	r2, r1
 80059aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6999      	ldr	r1, [r3, #24]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	021a      	lsls	r2, r3, #8
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	619a      	str	r2, [r3, #24]
      break;
 80059c0:	e08c      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	0011      	movs	r1, r2
 80059ca:	0018      	movs	r0, r3
 80059cc:	f000 fa38 	bl	8005e40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69da      	ldr	r2, [r3, #28]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2108      	movs	r1, #8
 80059dc:	430a      	orrs	r2, r1
 80059de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69da      	ldr	r2, [r3, #28]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2104      	movs	r1, #4
 80059ec:	438a      	bics	r2, r1
 80059ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	69d9      	ldr	r1, [r3, #28]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	691a      	ldr	r2, [r3, #16]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	61da      	str	r2, [r3, #28]
      break;
 8005a02:	e06b      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	0011      	movs	r1, r2
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	f000 fa99 	bl	8005f44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2180      	movs	r1, #128	@ 0x80
 8005a1e:	0109      	lsls	r1, r1, #4
 8005a20:	430a      	orrs	r2, r1
 8005a22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69da      	ldr	r2, [r3, #28]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4932      	ldr	r1, [pc, #200]	@ (8005af8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005a30:	400a      	ands	r2, r1
 8005a32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	69d9      	ldr	r1, [r3, #28]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	021a      	lsls	r2, r3, #8
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	61da      	str	r2, [r3, #28]
      break;
 8005a48:	e048      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	0011      	movs	r1, r2
 8005a52:	0018      	movs	r0, r3
 8005a54:	f000 fada 	bl	800600c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2108      	movs	r1, #8
 8005a64:	430a      	orrs	r2, r1
 8005a66:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2104      	movs	r1, #4
 8005a74:	438a      	bics	r2, r1
 8005a76:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	691a      	ldr	r2, [r3, #16]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005a8a:	e027      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	0011      	movs	r1, r2
 8005a94:	0018      	movs	r0, r3
 8005a96:	f000 fb13 	bl	80060c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2180      	movs	r1, #128	@ 0x80
 8005aa6:	0109      	lsls	r1, r1, #4
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4910      	ldr	r1, [pc, #64]	@ (8005af8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005ab8:	400a      	ands	r2, r1
 8005aba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	021a      	lsls	r2, r3, #8
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005ad0:	e004      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005ad2:	2317      	movs	r3, #23
 8005ad4:	18fb      	adds	r3, r7, r3
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	701a      	strb	r2, [r3, #0]
      break;
 8005ada:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	223c      	movs	r2, #60	@ 0x3c
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	5499      	strb	r1, [r3, r2]

  return status;
 8005ae4:	2317      	movs	r3, #23
 8005ae6:	18fb      	adds	r3, r7, r3
 8005ae8:	781b      	ldrb	r3, [r3, #0]
}
 8005aea:	0018      	movs	r0, r3
 8005aec:	46bd      	mov	sp, r7
 8005aee:	b006      	add	sp, #24
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	46c0      	nop			@ (mov r8, r8)
 8005af4:	080063c0 	.word	0x080063c0
 8005af8:	fffffbff 	.word	0xfffffbff

08005afc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b04:	46c0      	nop			@ (mov r8, r8)
 8005b06:	46bd      	mov	sp, r7
 8005b08:	b002      	add	sp, #8
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b14:	46c0      	nop			@ (mov r8, r8)
 8005b16:	46bd      	mov	sp, r7
 8005b18:	b002      	add	sp, #8
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b24:	46c0      	nop			@ (mov r8, r8)
 8005b26:	46bd      	mov	sp, r7
 8005b28:	b002      	add	sp, #8
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b34:	46c0      	nop			@ (mov r8, r8)
 8005b36:	46bd      	mov	sp, r7
 8005b38:	b002      	add	sp, #8
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a37      	ldr	r2, [pc, #220]	@ (8005c2c <TIM_Base_SetConfig+0xf0>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d008      	beq.n	8005b66 <TIM_Base_SetConfig+0x2a>
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	2380      	movs	r3, #128	@ 0x80
 8005b58:	05db      	lsls	r3, r3, #23
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d003      	beq.n	8005b66 <TIM_Base_SetConfig+0x2a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a33      	ldr	r2, [pc, #204]	@ (8005c30 <TIM_Base_SetConfig+0xf4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d108      	bne.n	8005b78 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2270      	movs	r2, #112	@ 0x70
 8005b6a:	4393      	bics	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a2c      	ldr	r2, [pc, #176]	@ (8005c2c <TIM_Base_SetConfig+0xf0>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d014      	beq.n	8005baa <TIM_Base_SetConfig+0x6e>
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	2380      	movs	r3, #128	@ 0x80
 8005b84:	05db      	lsls	r3, r3, #23
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d00f      	beq.n	8005baa <TIM_Base_SetConfig+0x6e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a28      	ldr	r2, [pc, #160]	@ (8005c30 <TIM_Base_SetConfig+0xf4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00b      	beq.n	8005baa <TIM_Base_SetConfig+0x6e>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a27      	ldr	r2, [pc, #156]	@ (8005c34 <TIM_Base_SetConfig+0xf8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d007      	beq.n	8005baa <TIM_Base_SetConfig+0x6e>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a26      	ldr	r2, [pc, #152]	@ (8005c38 <TIM_Base_SetConfig+0xfc>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d003      	beq.n	8005baa <TIM_Base_SetConfig+0x6e>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a25      	ldr	r2, [pc, #148]	@ (8005c3c <TIM_Base_SetConfig+0x100>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d108      	bne.n	8005bbc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4a24      	ldr	r2, [pc, #144]	@ (8005c40 <TIM_Base_SetConfig+0x104>)
 8005bae:	4013      	ands	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2280      	movs	r2, #128	@ 0x80
 8005bc0:	4393      	bics	r3, r2
 8005bc2:	001a      	movs	r2, r3
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a11      	ldr	r2, [pc, #68]	@ (8005c2c <TIM_Base_SetConfig+0xf0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d007      	beq.n	8005bfa <TIM_Base_SetConfig+0xbe>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a12      	ldr	r2, [pc, #72]	@ (8005c38 <TIM_Base_SetConfig+0xfc>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d003      	beq.n	8005bfa <TIM_Base_SetConfig+0xbe>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a11      	ldr	r2, [pc, #68]	@ (8005c3c <TIM_Base_SetConfig+0x100>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d103      	bne.n	8005c02 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	691a      	ldr	r2, [r3, #16]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	4013      	ands	r3, r2
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d106      	bne.n	8005c22 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	4393      	bics	r3, r2
 8005c1c:	001a      	movs	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	611a      	str	r2, [r3, #16]
  }
}
 8005c22:	46c0      	nop			@ (mov r8, r8)
 8005c24:	46bd      	mov	sp, r7
 8005c26:	b004      	add	sp, #16
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	46c0      	nop			@ (mov r8, r8)
 8005c2c:	40012c00 	.word	0x40012c00
 8005c30:	40000400 	.word	0x40000400
 8005c34:	40002000 	.word	0x40002000
 8005c38:	40014400 	.word	0x40014400
 8005c3c:	40014800 	.word	0x40014800
 8005c40:	fffffcff 	.word	0xfffffcff

08005c44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	4393      	bics	r3, r2
 8005c5c:	001a      	movs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4a2e      	ldr	r2, [pc, #184]	@ (8005d2c <TIM_OC1_SetConfig+0xe8>)
 8005c72:	4013      	ands	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2203      	movs	r2, #3
 8005c7a:	4393      	bics	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	4393      	bics	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a24      	ldr	r2, [pc, #144]	@ (8005d30 <TIM_OC1_SetConfig+0xec>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d007      	beq.n	8005cb2 <TIM_OC1_SetConfig+0x6e>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a23      	ldr	r2, [pc, #140]	@ (8005d34 <TIM_OC1_SetConfig+0xf0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d003      	beq.n	8005cb2 <TIM_OC1_SetConfig+0x6e>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a22      	ldr	r2, [pc, #136]	@ (8005d38 <TIM_OC1_SetConfig+0xf4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d10c      	bne.n	8005ccc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2208      	movs	r2, #8
 8005cb6:	4393      	bics	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2204      	movs	r2, #4
 8005cc8:	4393      	bics	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a18      	ldr	r2, [pc, #96]	@ (8005d30 <TIM_OC1_SetConfig+0xec>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d007      	beq.n	8005ce4 <TIM_OC1_SetConfig+0xa0>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a17      	ldr	r2, [pc, #92]	@ (8005d34 <TIM_OC1_SetConfig+0xf0>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d003      	beq.n	8005ce4 <TIM_OC1_SetConfig+0xa0>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a16      	ldr	r2, [pc, #88]	@ (8005d38 <TIM_OC1_SetConfig+0xf4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d111      	bne.n	8005d08 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	4a15      	ldr	r2, [pc, #84]	@ (8005d3c <TIM_OC1_SetConfig+0xf8>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	4a14      	ldr	r2, [pc, #80]	@ (8005d40 <TIM_OC1_SetConfig+0xfc>)
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	621a      	str	r2, [r3, #32]
}
 8005d22:	46c0      	nop			@ (mov r8, r8)
 8005d24:	46bd      	mov	sp, r7
 8005d26:	b006      	add	sp, #24
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	46c0      	nop			@ (mov r8, r8)
 8005d2c:	fffeff8f 	.word	0xfffeff8f
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40014400 	.word	0x40014400
 8005d38:	40014800 	.word	0x40014800
 8005d3c:	fffffeff 	.word	0xfffffeff
 8005d40:	fffffdff 	.word	0xfffffdff

08005d44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	2210      	movs	r2, #16
 8005d5a:	4393      	bics	r3, r2
 8005d5c:	001a      	movs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4a2c      	ldr	r2, [pc, #176]	@ (8005e24 <TIM_OC2_SetConfig+0xe0>)
 8005d72:	4013      	ands	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4a2b      	ldr	r2, [pc, #172]	@ (8005e28 <TIM_OC2_SetConfig+0xe4>)
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	4393      	bics	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a22      	ldr	r2, [pc, #136]	@ (8005e2c <TIM_OC2_SetConfig+0xe8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d10d      	bne.n	8005dc2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2280      	movs	r2, #128	@ 0x80
 8005daa:	4393      	bics	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2240      	movs	r2, #64	@ 0x40
 8005dbe:	4393      	bics	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a19      	ldr	r2, [pc, #100]	@ (8005e2c <TIM_OC2_SetConfig+0xe8>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d007      	beq.n	8005dda <TIM_OC2_SetConfig+0x96>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a18      	ldr	r2, [pc, #96]	@ (8005e30 <TIM_OC2_SetConfig+0xec>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d003      	beq.n	8005dda <TIM_OC2_SetConfig+0x96>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a17      	ldr	r2, [pc, #92]	@ (8005e34 <TIM_OC2_SetConfig+0xf0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d113      	bne.n	8005e02 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	4a16      	ldr	r2, [pc, #88]	@ (8005e38 <TIM_OC2_SetConfig+0xf4>)
 8005dde:	4013      	ands	r3, r2
 8005de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	4a15      	ldr	r2, [pc, #84]	@ (8005e3c <TIM_OC2_SetConfig+0xf8>)
 8005de6:	4013      	ands	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	621a      	str	r2, [r3, #32]
}
 8005e1c:	46c0      	nop			@ (mov r8, r8)
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	b006      	add	sp, #24
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	feff8fff 	.word	0xfeff8fff
 8005e28:	fffffcff 	.word	0xfffffcff
 8005e2c:	40012c00 	.word	0x40012c00
 8005e30:	40014400 	.word	0x40014400
 8005e34:	40014800 	.word	0x40014800
 8005e38:	fffffbff 	.word	0xfffffbff
 8005e3c:	fffff7ff 	.word	0xfffff7ff

08005e40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	4a31      	ldr	r2, [pc, #196]	@ (8005f1c <TIM_OC3_SetConfig+0xdc>)
 8005e56:	401a      	ands	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4a2d      	ldr	r2, [pc, #180]	@ (8005f20 <TIM_OC3_SetConfig+0xe0>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2203      	movs	r2, #3
 8005e74:	4393      	bics	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	4a27      	ldr	r2, [pc, #156]	@ (8005f24 <TIM_OC3_SetConfig+0xe4>)
 8005e86:	4013      	ands	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a23      	ldr	r2, [pc, #140]	@ (8005f28 <TIM_OC3_SetConfig+0xe8>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d10d      	bne.n	8005eba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	4a22      	ldr	r2, [pc, #136]	@ (8005f2c <TIM_OC3_SetConfig+0xec>)
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	021b      	lsls	r3, r3, #8
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	4a1e      	ldr	r2, [pc, #120]	@ (8005f30 <TIM_OC3_SetConfig+0xf0>)
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8005f28 <TIM_OC3_SetConfig+0xe8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d007      	beq.n	8005ed2 <TIM_OC3_SetConfig+0x92>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8005f34 <TIM_OC3_SetConfig+0xf4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d003      	beq.n	8005ed2 <TIM_OC3_SetConfig+0x92>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8005f38 <TIM_OC3_SetConfig+0xf8>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d113      	bne.n	8005efa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	4a19      	ldr	r2, [pc, #100]	@ (8005f3c <TIM_OC3_SetConfig+0xfc>)
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	4a18      	ldr	r2, [pc, #96]	@ (8005f40 <TIM_OC3_SetConfig+0x100>)
 8005ede:	4013      	ands	r3, r2
 8005ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	621a      	str	r2, [r3, #32]
}
 8005f14:	46c0      	nop			@ (mov r8, r8)
 8005f16:	46bd      	mov	sp, r7
 8005f18:	b006      	add	sp, #24
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	fffffeff 	.word	0xfffffeff
 8005f20:	fffeff8f 	.word	0xfffeff8f
 8005f24:	fffffdff 	.word	0xfffffdff
 8005f28:	40012c00 	.word	0x40012c00
 8005f2c:	fffff7ff 	.word	0xfffff7ff
 8005f30:	fffffbff 	.word	0xfffffbff
 8005f34:	40014400 	.word	0x40014400
 8005f38:	40014800 	.word	0x40014800
 8005f3c:	ffffefff 	.word	0xffffefff
 8005f40:	ffffdfff 	.word	0xffffdfff

08005f44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	4a24      	ldr	r2, [pc, #144]	@ (8005fec <TIM_OC4_SetConfig+0xa8>)
 8005f5a:	401a      	ands	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4a20      	ldr	r2, [pc, #128]	@ (8005ff0 <TIM_OC4_SetConfig+0xac>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4a1f      	ldr	r2, [pc, #124]	@ (8005ff4 <TIM_OC4_SetConfig+0xb0>)
 8005f78:	4013      	ands	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	021b      	lsls	r3, r3, #8
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ff8 <TIM_OC4_SetConfig+0xb4>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	031b      	lsls	r3, r3, #12
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a17      	ldr	r2, [pc, #92]	@ (8005ffc <TIM_OC4_SetConfig+0xb8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d007      	beq.n	8005fb4 <TIM_OC4_SetConfig+0x70>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a16      	ldr	r2, [pc, #88]	@ (8006000 <TIM_OC4_SetConfig+0xbc>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d003      	beq.n	8005fb4 <TIM_OC4_SetConfig+0x70>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a15      	ldr	r2, [pc, #84]	@ (8006004 <TIM_OC4_SetConfig+0xc0>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d109      	bne.n	8005fc8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	4a14      	ldr	r2, [pc, #80]	@ (8006008 <TIM_OC4_SetConfig+0xc4>)
 8005fb8:	4013      	ands	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	019b      	lsls	r3, r3, #6
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	621a      	str	r2, [r3, #32]
}
 8005fe2:	46c0      	nop			@ (mov r8, r8)
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	b006      	add	sp, #24
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	46c0      	nop			@ (mov r8, r8)
 8005fec:	ffffefff 	.word	0xffffefff
 8005ff0:	feff8fff 	.word	0xfeff8fff
 8005ff4:	fffffcff 	.word	0xfffffcff
 8005ff8:	ffffdfff 	.word	0xffffdfff
 8005ffc:	40012c00 	.word	0x40012c00
 8006000:	40014400 	.word	0x40014400
 8006004:	40014800 	.word	0x40014800
 8006008:	ffffbfff 	.word	0xffffbfff

0800600c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	4a21      	ldr	r2, [pc, #132]	@ (80060a8 <TIM_OC5_SetConfig+0x9c>)
 8006022:	401a      	ands	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4a1d      	ldr	r2, [pc, #116]	@ (80060ac <TIM_OC5_SetConfig+0xa0>)
 8006038:	4013      	ands	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	4a19      	ldr	r2, [pc, #100]	@ (80060b0 <TIM_OC5_SetConfig+0xa4>)
 800604a:	4013      	ands	r3, r2
 800604c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	041b      	lsls	r3, r3, #16
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	4313      	orrs	r3, r2
 8006058:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a15      	ldr	r2, [pc, #84]	@ (80060b4 <TIM_OC5_SetConfig+0xa8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d007      	beq.n	8006072 <TIM_OC5_SetConfig+0x66>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a14      	ldr	r2, [pc, #80]	@ (80060b8 <TIM_OC5_SetConfig+0xac>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d003      	beq.n	8006072 <TIM_OC5_SetConfig+0x66>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a13      	ldr	r2, [pc, #76]	@ (80060bc <TIM_OC5_SetConfig+0xb0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d109      	bne.n	8006086 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	4a0c      	ldr	r2, [pc, #48]	@ (80060a8 <TIM_OC5_SetConfig+0x9c>)
 8006076:	4013      	ands	r3, r2
 8006078:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	021b      	lsls	r3, r3, #8
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	621a      	str	r2, [r3, #32]
}
 80060a0:	46c0      	nop			@ (mov r8, r8)
 80060a2:	46bd      	mov	sp, r7
 80060a4:	b006      	add	sp, #24
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	fffeffff 	.word	0xfffeffff
 80060ac:	fffeff8f 	.word	0xfffeff8f
 80060b0:	fffdffff 	.word	0xfffdffff
 80060b4:	40012c00 	.word	0x40012c00
 80060b8:	40014400 	.word	0x40014400
 80060bc:	40014800 	.word	0x40014800

080060c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	4a22      	ldr	r2, [pc, #136]	@ (8006160 <TIM_OC6_SetConfig+0xa0>)
 80060d6:	401a      	ands	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4a1e      	ldr	r2, [pc, #120]	@ (8006164 <TIM_OC6_SetConfig+0xa4>)
 80060ec:	4013      	ands	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	021b      	lsls	r3, r3, #8
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006168 <TIM_OC6_SetConfig+0xa8>)
 8006100:	4013      	ands	r3, r2
 8006102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	051b      	lsls	r3, r3, #20
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a16      	ldr	r2, [pc, #88]	@ (800616c <TIM_OC6_SetConfig+0xac>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d007      	beq.n	8006128 <TIM_OC6_SetConfig+0x68>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a15      	ldr	r2, [pc, #84]	@ (8006170 <TIM_OC6_SetConfig+0xb0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d003      	beq.n	8006128 <TIM_OC6_SetConfig+0x68>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a14      	ldr	r2, [pc, #80]	@ (8006174 <TIM_OC6_SetConfig+0xb4>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d109      	bne.n	800613c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	4a13      	ldr	r2, [pc, #76]	@ (8006178 <TIM_OC6_SetConfig+0xb8>)
 800612c:	4013      	ands	r3, r2
 800612e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	029b      	lsls	r3, r3, #10
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	621a      	str	r2, [r3, #32]
}
 8006156:	46c0      	nop			@ (mov r8, r8)
 8006158:	46bd      	mov	sp, r7
 800615a:	b006      	add	sp, #24
 800615c:	bd80      	pop	{r7, pc}
 800615e:	46c0      	nop			@ (mov r8, r8)
 8006160:	ffefffff 	.word	0xffefffff
 8006164:	feff8fff 	.word	0xfeff8fff
 8006168:	ffdfffff 	.word	0xffdfffff
 800616c:	40012c00 	.word	0x40012c00
 8006170:	40014400 	.word	0x40014400
 8006174:	40014800 	.word	0x40014800
 8006178:	fffbffff 	.word	0xfffbffff

0800617c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	221f      	movs	r2, #31
 800618c:	4013      	ands	r3, r2
 800618e:	2201      	movs	r2, #1
 8006190:	409a      	lsls	r2, r3
 8006192:	0013      	movs	r3, r2
 8006194:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	43d2      	mvns	r2, r2
 800619e:	401a      	ands	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6a1a      	ldr	r2, [r3, #32]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	211f      	movs	r1, #31
 80061ac:	400b      	ands	r3, r1
 80061ae:	6879      	ldr	r1, [r7, #4]
 80061b0:	4099      	lsls	r1, r3
 80061b2:	000b      	movs	r3, r1
 80061b4:	431a      	orrs	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	621a      	str	r2, [r3, #32]
}
 80061ba:	46c0      	nop			@ (mov r8, r8)
 80061bc:	46bd      	mov	sp, r7
 80061be:	b006      	add	sp, #24
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	223c      	movs	r2, #60	@ 0x3c
 80061d2:	5c9b      	ldrb	r3, [r3, r2]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061d8:	2302      	movs	r3, #2
 80061da:	e050      	b.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	223c      	movs	r2, #60	@ 0x3c
 80061e0:	2101      	movs	r1, #1
 80061e2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	223d      	movs	r2, #61	@ 0x3d
 80061e8:	2102      	movs	r1, #2
 80061ea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a21      	ldr	r2, [pc, #132]	@ (8006288 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d108      	bne.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4a20      	ldr	r2, [pc, #128]	@ (800628c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800620a:	4013      	ands	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2270      	movs	r2, #112	@ 0x70
 800621c:	4393      	bics	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a14      	ldr	r2, [pc, #80]	@ (8006288 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00a      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	2380      	movs	r3, #128	@ 0x80
 8006242:	05db      	lsls	r3, r3, #23
 8006244:	429a      	cmp	r2, r3
 8006246:	d004      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a10      	ldr	r2, [pc, #64]	@ (8006290 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d10c      	bne.n	800626c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2280      	movs	r2, #128	@ 0x80
 8006256:	4393      	bics	r3, r2
 8006258:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	4313      	orrs	r3, r2
 8006262:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	223d      	movs	r2, #61	@ 0x3d
 8006270:	2101      	movs	r1, #1
 8006272:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	223c      	movs	r2, #60	@ 0x3c
 8006278:	2100      	movs	r1, #0
 800627a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	0018      	movs	r0, r3
 8006280:	46bd      	mov	sp, r7
 8006282:	b004      	add	sp, #16
 8006284:	bd80      	pop	{r7, pc}
 8006286:	46c0      	nop			@ (mov r8, r8)
 8006288:	40012c00 	.word	0x40012c00
 800628c:	ff0fffff 	.word	0xff0fffff
 8006290:	40000400 	.word	0x40000400

08006294 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800629c:	46c0      	nop			@ (mov r8, r8)
 800629e:	46bd      	mov	sp, r7
 80062a0:	b002      	add	sp, #8
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062ac:	46c0      	nop			@ (mov r8, r8)
 80062ae:	46bd      	mov	sp, r7
 80062b0:	b002      	add	sp, #8
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062bc:	46c0      	nop			@ (mov r8, r8)
 80062be:	46bd      	mov	sp, r7
 80062c0:	b002      	add	sp, #8
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <memset>:
 80062c4:	0003      	movs	r3, r0
 80062c6:	1882      	adds	r2, r0, r2
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d100      	bne.n	80062ce <memset+0xa>
 80062cc:	4770      	bx	lr
 80062ce:	7019      	strb	r1, [r3, #0]
 80062d0:	3301      	adds	r3, #1
 80062d2:	e7f9      	b.n	80062c8 <memset+0x4>

080062d4 <__libc_init_array>:
 80062d4:	b570      	push	{r4, r5, r6, lr}
 80062d6:	2600      	movs	r6, #0
 80062d8:	4c0c      	ldr	r4, [pc, #48]	@ (800630c <__libc_init_array+0x38>)
 80062da:	4d0d      	ldr	r5, [pc, #52]	@ (8006310 <__libc_init_array+0x3c>)
 80062dc:	1b64      	subs	r4, r4, r5
 80062de:	10a4      	asrs	r4, r4, #2
 80062e0:	42a6      	cmp	r6, r4
 80062e2:	d109      	bne.n	80062f8 <__libc_init_array+0x24>
 80062e4:	2600      	movs	r6, #0
 80062e6:	f000 f823 	bl	8006330 <_init>
 80062ea:	4c0a      	ldr	r4, [pc, #40]	@ (8006314 <__libc_init_array+0x40>)
 80062ec:	4d0a      	ldr	r5, [pc, #40]	@ (8006318 <__libc_init_array+0x44>)
 80062ee:	1b64      	subs	r4, r4, r5
 80062f0:	10a4      	asrs	r4, r4, #2
 80062f2:	42a6      	cmp	r6, r4
 80062f4:	d105      	bne.n	8006302 <__libc_init_array+0x2e>
 80062f6:	bd70      	pop	{r4, r5, r6, pc}
 80062f8:	00b3      	lsls	r3, r6, #2
 80062fa:	58eb      	ldr	r3, [r5, r3]
 80062fc:	4798      	blx	r3
 80062fe:	3601      	adds	r6, #1
 8006300:	e7ee      	b.n	80062e0 <__libc_init_array+0xc>
 8006302:	00b3      	lsls	r3, r6, #2
 8006304:	58eb      	ldr	r3, [r5, r3]
 8006306:	4798      	blx	r3
 8006308:	3601      	adds	r6, #1
 800630a:	e7f2      	b.n	80062f2 <__libc_init_array+0x1e>
 800630c:	08006414 	.word	0x08006414
 8006310:	08006414 	.word	0x08006414
 8006314:	08006418 	.word	0x08006418
 8006318:	08006414 	.word	0x08006414

0800631c <memcpy>:
 800631c:	2300      	movs	r3, #0
 800631e:	b510      	push	{r4, lr}
 8006320:	429a      	cmp	r2, r3
 8006322:	d100      	bne.n	8006326 <memcpy+0xa>
 8006324:	bd10      	pop	{r4, pc}
 8006326:	5ccc      	ldrb	r4, [r1, r3]
 8006328:	54c4      	strb	r4, [r0, r3]
 800632a:	3301      	adds	r3, #1
 800632c:	e7f8      	b.n	8006320 <memcpy+0x4>
	...

08006330 <_init>:
 8006330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006332:	46c0      	nop			@ (mov r8, r8)
 8006334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006336:	bc08      	pop	{r3}
 8006338:	469e      	mov	lr, r3
 800633a:	4770      	bx	lr

0800633c <_fini>:
 800633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633e:	46c0      	nop			@ (mov r8, r8)
 8006340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006342:	bc08      	pop	{r3}
 8006344:	469e      	mov	lr, r3
 8006346:	4770      	bx	lr
