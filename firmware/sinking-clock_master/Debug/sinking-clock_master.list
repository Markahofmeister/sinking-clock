
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006328  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080063e4  080063e4  000073e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064c0  080064c0  00008054  2**0
                  CONTENTS
  4 .ARM          00000000  080064c0  080064c0  00008054  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064c0  080064c0  00008054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064c0  080064c0  000074c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064c4  080064c4  000074c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  080064c8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000054  0800651c  00008054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  0800651c  00008238  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c09  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d81  00000000  00000000  0001bc85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0001ea08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa3  00000000  00000000  0001fe20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001950f  00000000  00000000  00020dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018467  00000000  00000000  0003a2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a209d  00000000  00000000  00052739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f47d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004924  00000000  00000000  000f481c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000f9140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000054 	.word	0x20000054
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080063cc 	.word	0x080063cc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000058 	.word	0x20000058
 8000100:	080063cc 	.word	0x080063cc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:
 */

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, uint8_t keyEnFlags) {
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	b087      	sub	sp, #28
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	2517      	movs	r5, #23
 800022c:	197b      	adds	r3, r7, r5
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	// Verify device ID
	uint8_t deviceIDRet = 0x00;
 8000238:	2615      	movs	r6, #21
 800023a:	19bb      	adds	r3, r7, r6
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]
	halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 8000240:	197c      	adds	r4, r7, r5
 8000242:	19ba      	adds	r2, r7, r6
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	0011      	movs	r1, r2
 8000248:	0018      	movs	r0, r3
 800024a:	f000 f84f 	bl	80002ec <capTouch_ReadDeviceID>
 800024e:	0003      	movs	r3, r0
 8000250:	7023      	strb	r3, [r4, #0]

	if(deviceIDRet != DEVICE_ID || halRet != HAL_OK) {
 8000252:	19bb      	adds	r3, r7, r6
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b2e      	cmp	r3, #46	@ 0x2e
 8000258:	d103      	bne.n	8000262 <capTouch_Init+0x46>
 800025a:	197b      	adds	r3, r7, r5
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <capTouch_Init+0x4a>
		return 1;
 8000262:	2301      	movs	r3, #1
 8000264:	e03e      	b.n	80002e4 <capTouch_Init+0xc8>
	}

	capTouch->deviceID = deviceIDRet;
 8000266:	2315      	movs	r3, #21
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	781a      	ldrb	r2, [r3, #0]
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	711a      	strb	r2, [r3, #4]

	// Force Device Recalibration
	halRet = capTouch_Recalibrate(capTouch);
 8000270:	2517      	movs	r5, #23
 8000272:	197c      	adds	r4, r7, r5
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	0018      	movs	r0, r3
 8000278:	f000 f87a 	bl	8000370 <capTouch_Recalibrate>
 800027c:	0003      	movs	r3, r0
 800027e:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000280:	197b      	adds	r3, r7, r5
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <capTouch_Init+0x70>
		return 2;
 8000288:	2302      	movs	r3, #2
 800028a:	e02b      	b.n	80002e4 <capTouch_Init+0xc8>
	}

	// Wait until calibration sequence completes
	while(capTouch_checkCal(capTouch)) {}
 800028c:	46c0      	nop			@ (mov r8, r8)
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	0018      	movs	r0, r3
 8000292:	f000 f88f 	bl	80003b4 <capTouch_checkCal>
 8000296:	1e03      	subs	r3, r0, #0
 8000298:	d1f9      	bne.n	800028e <capTouch_Init+0x72>

	// Get initial reading of channels
	uint8_t keyStatus = capTouch_readChannels(capTouch);
 800029a:	2316      	movs	r3, #22
 800029c:	18fc      	adds	r4, r7, r3
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	0018      	movs	r0, r3
 80002a2:	f000 f8cb 	bl	800043c <capTouch_readChannels>
 80002a6:	0003      	movs	r3, r0
 80002a8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 80002aa:	2317      	movs	r3, #23
 80002ac:	18fb      	adds	r3, r7, r3
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <capTouch_Init+0x9c>
		return 3;
 80002b4:	2303      	movs	r3, #3
 80002b6:	e015      	b.n	80002e4 <capTouch_Init+0xc8>
	}

	halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80002b8:	2517      	movs	r5, #23
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	1dfb      	adds	r3, r7, #7
 80002be:	781a      	ldrb	r2, [r3, #0]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8fd 	bl	80004c4 <capTouch_enableKeys>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <capTouch_Init+0xbe>
		return 4;
 80002d6:	2304      	movs	r3, #4
 80002d8:	e004      	b.n	80002e4 <capTouch_Init+0xc8>
	}
	capTouch->keys = keyEnFlags;
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	1dfa      	adds	r2, r7, #7
 80002de:	7812      	ldrb	r2, [r2, #0]
 80002e0:	715a      	strb	r2, [r3, #5]

	return 0;
 80002e2:	2300      	movs	r3, #0

}
 80002e4:	0018      	movs	r0, r3
 80002e6:	46bd      	mov	sp, r7
 80002e8:	b007      	add	sp, #28
 80002ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002ec <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ee:	b087      	sub	sp, #28
 80002f0:	af02      	add	r7, sp, #8
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 80002f6:	230e      	movs	r3, #14
 80002f8:	18fb      	adds	r3, r7, r3
 80002fa:	2200      	movs	r2, #0
 80002fc:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80002fe:	250f      	movs	r5, #15
 8000300:	197b      	adds	r3, r7, r5
 8000302:	2200      	movs	r2, #0
 8000304:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 8000306:	210c      	movs	r1, #12
 8000308:	187b      	adds	r3, r7, r1
 800030a:	4a18      	ldr	r2, [pc, #96]	@ (800036c <capTouch_ReadDeviceID+0x80>)
 800030c:	7812      	ldrb	r2, [r2, #0]
 800030e:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	6818      	ldr	r0, [r3, #0]
 8000314:	197c      	adds	r4, r7, r5
 8000316:	187a      	adds	r2, r7, r1
 8000318:	2301      	movs	r3, #1
 800031a:	425b      	negs	r3, r3
 800031c:	9300      	str	r3, [sp, #0]
 800031e:	2301      	movs	r3, #1
 8000320:	2136      	movs	r1, #54	@ 0x36
 8000322:	f002 ff65 	bl	80031f0 <HAL_I2C_Master_Transmit>
 8000326:	0003      	movs	r3, r0
 8000328:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800032a:	197b      	adds	r3, r7, r5
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d002      	beq.n	8000338 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 8000332:	197b      	adds	r3, r7, r5
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	e014      	b.n	8000362 <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	6818      	ldr	r0, [r3, #0]
 800033c:	250f      	movs	r5, #15
 800033e:	197c      	adds	r4, r7, r5
 8000340:	260e      	movs	r6, #14
 8000342:	19ba      	adds	r2, r7, r6
 8000344:	2301      	movs	r3, #1
 8000346:	425b      	negs	r3, r3
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	2301      	movs	r3, #1
 800034c:	2136      	movs	r1, #54	@ 0x36
 800034e:	f003 f879 	bl	8003444 <HAL_I2C_Master_Receive>
 8000352:	0003      	movs	r3, r0
 8000354:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 8000356:	19bb      	adds	r3, r7, r6
 8000358:	781a      	ldrb	r2, [r3, #0]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	701a      	strb	r2, [r3, #0]

	return halRet;
 800035e:	197b      	adds	r3, r7, r5
 8000360:	781b      	ldrb	r3, [r3, #0]

}
 8000362:	0018      	movs	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	b005      	add	sp, #20
 8000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036a:	46c0      	nop			@ (mov r8, r8)
 800036c:	080063e4 	.word	0x080063e4

08000370 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 8000370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000372:	b087      	sub	sp, #28
 8000374:	af02      	add	r7, sp, #8
 8000376:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000378:	210f      	movs	r1, #15
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 8000380:	260c      	movs	r6, #12
 8000382:	19bb      	adds	r3, r7, r6
 8000384:	22c8      	movs	r2, #200	@ 0xc8
 8000386:	4252      	negs	r2, r2
 8000388:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	6818      	ldr	r0, [r3, #0]
 800038e:	000d      	movs	r5, r1
 8000390:	187c      	adds	r4, r7, r1
 8000392:	19ba      	adds	r2, r7, r6
 8000394:	2301      	movs	r3, #1
 8000396:	425b      	negs	r3, r3
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	2302      	movs	r3, #2
 800039c:	2136      	movs	r1, #54	@ 0x36
 800039e:	f002 ff27 	bl	80031f0 <HAL_I2C_Master_Transmit>
 80003a2:	0003      	movs	r3, r0
 80003a4:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80003a6:	197b      	adds	r3, r7, r5
 80003a8:	781b      	ldrb	r3, [r3, #0]

}
 80003aa:	0018      	movs	r0, r3
 80003ac:	46bd      	mov	sp, r7
 80003ae:	b005      	add	sp, #20
 80003b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080003b4 <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80003b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003b6:	b087      	sub	sp, #28
 80003b8:	af02      	add	r7, sp, #8
 80003ba:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80003bc:	210f      	movs	r1, #15
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80003c4:	230d      	movs	r3, #13
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 80003cc:	260c      	movs	r6, #12
 80003ce:	19bb      	adds	r3, r7, r6
 80003d0:	4a19      	ldr	r2, [pc, #100]	@ (8000438 <capTouch_checkCal+0x84>)
 80003d2:	7812      	ldrb	r2, [r2, #0]
 80003d4:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	6818      	ldr	r0, [r3, #0]
 80003da:	000d      	movs	r5, r1
 80003dc:	187c      	adds	r4, r7, r1
 80003de:	19ba      	adds	r2, r7, r6
 80003e0:	2301      	movs	r3, #1
 80003e2:	425b      	negs	r3, r3
 80003e4:	9300      	str	r3, [sp, #0]
 80003e6:	2301      	movs	r3, #1
 80003e8:	2136      	movs	r1, #54	@ 0x36
 80003ea:	f002 ff01 	bl	80031f0 <HAL_I2C_Master_Transmit>
 80003ee:	0003      	movs	r3, r0
 80003f0:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80003f2:	197b      	adds	r3, r7, r5
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d002      	beq.n	8000400 <capTouch_checkCal+0x4c>
		return halRet;
 80003fa:	197b      	adds	r3, r7, r5
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	e016      	b.n	800042e <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	6818      	ldr	r0, [r3, #0]
 8000404:	230f      	movs	r3, #15
 8000406:	18fc      	adds	r4, r7, r3
 8000408:	250d      	movs	r5, #13
 800040a:	197a      	adds	r2, r7, r5
 800040c:	2301      	movs	r3, #1
 800040e:	425b      	negs	r3, r3
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2301      	movs	r3, #1
 8000414:	2136      	movs	r1, #54	@ 0x36
 8000416:	f003 f815 	bl	8003444 <HAL_I2C_Master_Receive>
 800041a:	0003      	movs	r3, r0
 800041c:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 800041e:	197b      	adds	r3, r7, r5
 8000420:	781a      	ldrb	r2, [r3, #0]
 8000422:	210e      	movs	r1, #14
 8000424:	187b      	adds	r3, r7, r1
 8000426:	09d2      	lsrs	r2, r2, #7
 8000428:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 800042a:	187b      	adds	r3, r7, r1
 800042c:	781b      	ldrb	r3, [r3, #0]

}
 800042e:	0018      	movs	r0, r3
 8000430:	46bd      	mov	sp, r7
 8000432:	b005      	add	sp, #20
 8000434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	080063e8 	.word	0x080063e8

0800043c <capTouch_readChannels>:

uint8_t capTouch_readChannels(QT1070 *capTouch) {
 800043c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800043e:	b087      	sub	sp, #28
 8000440:	af02      	add	r7, sp, #8
 8000442:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000444:	210f      	movs	r1, #15
 8000446:	187b      	adds	r3, r7, r1
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 800044c:	230e      	movs	r3, #14
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 8000454:	260c      	movs	r6, #12
 8000456:	19bb      	adds	r3, r7, r6
 8000458:	4a19      	ldr	r2, [pc, #100]	@ (80004c0 <capTouch_readChannels+0x84>)
 800045a:	7812      	ldrb	r2, [r2, #0]
 800045c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	6818      	ldr	r0, [r3, #0]
 8000462:	000d      	movs	r5, r1
 8000464:	187c      	adds	r4, r7, r1
 8000466:	19ba      	adds	r2, r7, r6
 8000468:	2301      	movs	r3, #1
 800046a:	425b      	negs	r3, r3
 800046c:	9300      	str	r3, [sp, #0]
 800046e:	2301      	movs	r3, #1
 8000470:	2136      	movs	r1, #54	@ 0x36
 8000472:	f002 febd 	bl	80031f0 <HAL_I2C_Master_Transmit>
 8000476:	0003      	movs	r3, r0
 8000478:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800047a:	197b      	adds	r3, r7, r5
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d002      	beq.n	8000488 <capTouch_readChannels+0x4c>
		return halRet;
 8000482:	197b      	adds	r3, r7, r5
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	e017      	b.n	80004b8 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	6818      	ldr	r0, [r3, #0]
 800048c:	230f      	movs	r3, #15
 800048e:	18fc      	adds	r4, r7, r3
 8000490:	250e      	movs	r5, #14
 8000492:	197a      	adds	r2, r7, r5
 8000494:	2301      	movs	r3, #1
 8000496:	425b      	negs	r3, r3
 8000498:	9300      	str	r3, [sp, #0]
 800049a:	2301      	movs	r3, #1
 800049c:	2136      	movs	r1, #54	@ 0x36
 800049e:	f002 ffd1 	bl	8003444 <HAL_I2C_Master_Receive>
 80004a2:	0003      	movs	r3, r0
 80004a4:	7023      	strb	r3, [r4, #0]

	keyStatusRet = keyStatusRet & 0b01111111;
 80004a6:	197b      	adds	r3, r7, r5
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	227f      	movs	r2, #127	@ 0x7f
 80004ac:	4013      	ands	r3, r2
 80004ae:	b2da      	uxtb	r2, r3
 80004b0:	197b      	adds	r3, r7, r5
 80004b2:	701a      	strb	r2, [r3, #0]

	return keyStatusRet;
 80004b4:	197b      	adds	r3, r7, r5
 80004b6:	781b      	ldrb	r3, [r3, #0]

}
 80004b8:	0018      	movs	r0, r3
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b005      	add	sp, #20
 80004be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c0:	080063ec 	.word	0x080063ec

080004c4 <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80004c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c6:	b08b      	sub	sp, #44	@ 0x2c
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	000a      	movs	r2, r1
 80004ce:	1cfb      	adds	r3, r7, #3
 80004d0:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004d2:	241b      	movs	r4, #27
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	2200      	movs	r2, #0
 80004d8:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80004da:	2314      	movs	r3, #20
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	4a36      	ldr	r2, [pc, #216]	@ (80005b8 <capTouch_enableKeys+0xf4>)
 80004e0:	6811      	ldr	r1, [r2, #0]
 80004e2:	6019      	str	r1, [r3, #0]
 80004e4:	8891      	ldrh	r1, [r2, #4]
 80004e6:	8099      	strh	r1, [r3, #4]
 80004e8:	7992      	ldrb	r2, [r2, #6]
 80004ea:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 80004ec:	260c      	movs	r6, #12
 80004ee:	19bb      	adds	r3, r7, r6
 80004f0:	4a32      	ldr	r2, [pc, #200]	@ (80005bc <capTouch_enableKeys+0xf8>)
 80004f2:	6811      	ldr	r1, [r2, #0]
 80004f4:	6019      	str	r1, [r3, #0]
 80004f6:	8891      	ldrh	r1, [r2, #4]
 80004f8:	8099      	strh	r1, [r3, #4]
 80004fa:	7992      	ldrb	r2, [r2, #6]
 80004fc:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6818      	ldr	r0, [r3, #0]
 8000502:	0025      	movs	r5, r4
 8000504:	193c      	adds	r4, r7, r4
 8000506:	19ba      	adds	r2, r7, r6
 8000508:	2301      	movs	r3, #1
 800050a:	425b      	negs	r3, r3
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	2301      	movs	r3, #1
 8000510:	2136      	movs	r1, #54	@ 0x36
 8000512:	f002 fe6d 	bl	80031f0 <HAL_I2C_Master_Transmit>
 8000516:	0003      	movs	r3, r0
 8000518:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800051a:	197b      	adds	r3, r7, r5
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d002      	beq.n	8000528 <capTouch_enableKeys+0x64>
		return halRet;
 8000522:	197b      	adds	r3, r7, r5
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	e042      	b.n	80005ae <capTouch_enableKeys+0xea>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	6818      	ldr	r0, [r3, #0]
 800052c:	251b      	movs	r5, #27
 800052e:	197c      	adds	r4, r7, r5
 8000530:	2314      	movs	r3, #20
 8000532:	18fa      	adds	r2, r7, r3
 8000534:	2301      	movs	r3, #1
 8000536:	425b      	negs	r3, r3
 8000538:	9300      	str	r3, [sp, #0]
 800053a:	2307      	movs	r3, #7
 800053c:	2136      	movs	r1, #54	@ 0x36
 800053e:	f002 ff81 	bl	8003444 <HAL_I2C_Master_Receive>
 8000542:	0003      	movs	r3, r0
 8000544:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000546:	197b      	adds	r3, r7, r5
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d002      	beq.n	8000554 <capTouch_enableKeys+0x90>
		return halRet;
 800054e:	197b      	adds	r3, r7, r5
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	e02c      	b.n	80005ae <capTouch_enableKeys+0xea>

	int i; //temp;

	for(i = 0; i <= 6; i++) {
 8000554:	2300      	movs	r3, #0
 8000556:	61fb      	str	r3, [r7, #28]
 8000558:	e019      	b.n	800058e <capTouch_enableKeys+0xca>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 800055a:	2014      	movs	r0, #20
 800055c:	183a      	adds	r2, r7, r0
 800055e:	69fb      	ldr	r3, [r7, #28]
 8000560:	18d3      	adds	r3, r2, r3
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	089b      	lsrs	r3, r3, #2
 8000566:	b2db      	uxtb	r3, r3
 8000568:	1cfa      	adds	r2, r7, #3
 800056a:	7811      	ldrb	r1, [r2, #0]
 800056c:	69fa      	ldr	r2, [r7, #28]
 800056e:	4111      	asrs	r1, r2
 8000570:	000a      	movs	r2, r1
 8000572:	b2d2      	uxtb	r2, r2
 8000574:	2101      	movs	r1, #1
 8000576:	400a      	ands	r2, r1
 8000578:	b2d2      	uxtb	r2, r2
 800057a:	4353      	muls	r3, r2
 800057c:	b2d9      	uxtb	r1, r3
 800057e:	183a      	adds	r2, r7, r0
 8000580:	69fb      	ldr	r3, [r7, #28]
 8000582:	18d3      	adds	r3, r2, r3
 8000584:	1c0a      	adds	r2, r1, #0
 8000586:	701a      	strb	r2, [r3, #0]
	for(i = 0; i <= 6; i++) {
 8000588:	69fb      	ldr	r3, [r7, #28]
 800058a:	3301      	adds	r3, #1
 800058c:	61fb      	str	r3, [r7, #28]
 800058e:	69fb      	ldr	r3, [r7, #28]
 8000590:	2b06      	cmp	r3, #6
 8000592:	dde2      	ble.n	800055a <capTouch_enableKeys+0x96>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 8000594:	251b      	movs	r5, #27
 8000596:	197c      	adds	r4, r7, r5
 8000598:	2314      	movs	r3, #20
 800059a:	18fa      	adds	r2, r7, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	0011      	movs	r1, r2
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 f80d 	bl	80005c0 <capTouch_SetAveragingFactor>
 80005a6:	0003      	movs	r3, r0
 80005a8:	7023      	strb	r3, [r4, #0]

	return halRet;
 80005aa:	197b      	adds	r3, r7, r5
 80005ac:	781b      	ldrb	r3, [r3, #0]

}
 80005ae:	0018      	movs	r0, r3
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b009      	add	sp, #36	@ 0x24
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	080063f0 	.word	0x080063f0
 80005bc:	080063f8 	.word	0x080063f8

080005c0 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	b08b      	sub	sp, #44	@ 0x2c
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80005ca:	241e      	movs	r4, #30
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80005d2:	2314      	movs	r3, #20
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	4a5d      	ldr	r2, [pc, #372]	@ (800074c <capTouch_SetAveragingFactor+0x18c>)
 80005d8:	6811      	ldr	r1, [r2, #0]
 80005da:	6019      	str	r1, [r3, #0]
 80005dc:	8891      	ldrh	r1, [r2, #4]
 80005de:	8099      	strh	r1, [r3, #4]
 80005e0:	7992      	ldrb	r2, [r2, #6]
 80005e2:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 80005e4:	260c      	movs	r6, #12
 80005e6:	19bb      	adds	r3, r7, r6
 80005e8:	4a59      	ldr	r2, [pc, #356]	@ (8000750 <capTouch_SetAveragingFactor+0x190>)
 80005ea:	6811      	ldr	r1, [r2, #0]
 80005ec:	6019      	str	r1, [r3, #0]
 80005ee:	8891      	ldrh	r1, [r2, #4]
 80005f0:	8099      	strh	r1, [r3, #4]
 80005f2:	7992      	ldrb	r2, [r2, #6]
 80005f4:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6818      	ldr	r0, [r3, #0]
 80005fa:	0025      	movs	r5, r4
 80005fc:	193c      	adds	r4, r7, r4
 80005fe:	19ba      	adds	r2, r7, r6
 8000600:	2301      	movs	r3, #1
 8000602:	425b      	negs	r3, r3
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2301      	movs	r3, #1
 8000608:	2136      	movs	r1, #54	@ 0x36
 800060a:	f002 fdf1 	bl	80031f0 <HAL_I2C_Master_Transmit>
 800060e:	0003      	movs	r3, r0
 8000610:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000612:	197b      	adds	r3, r7, r5
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d002      	beq.n	8000620 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 800061a:	197b      	adds	r3, r7, r5
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	e090      	b.n	8000742 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6818      	ldr	r0, [r3, #0]
 8000624:	251e      	movs	r5, #30
 8000626:	197c      	adds	r4, r7, r5
 8000628:	2314      	movs	r3, #20
 800062a:	18fa      	adds	r2, r7, r3
 800062c:	2301      	movs	r3, #1
 800062e:	425b      	negs	r3, r3
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2307      	movs	r3, #7
 8000634:	2136      	movs	r1, #54	@ 0x36
 8000636:	f002 ff05 	bl	8003444 <HAL_I2C_Master_Receive>
 800063a:	0003      	movs	r3, r0
 800063c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800063e:	197b      	adds	r3, r7, r5
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 8000646:	197b      	adds	r3, r7, r5
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	e07a      	b.n	8000742 <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 800064c:	2308      	movs	r3, #8
 800064e:	18fb      	adds	r3, r7, r3
 8000650:	2200      	movs	r2, #0
 8000652:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000654:	231d      	movs	r3, #29
 8000656:	18fb      	adds	r3, r7, r3
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800065c:	231f      	movs	r3, #31
 800065e:	18fb      	adds	r3, r7, r3
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
 8000664:	e041      	b.n	80006ea <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 8000666:	241f      	movs	r4, #31
 8000668:	193b      	adds	r3, r7, r4
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2214      	movs	r2, #20
 800066e:	18ba      	adds	r2, r7, r2
 8000670:	5cd2      	ldrb	r2, [r2, r3]
 8000672:	201d      	movs	r0, #29
 8000674:	183b      	adds	r3, r7, r0
 8000676:	2103      	movs	r1, #3
 8000678:	400a      	ands	r2, r1
 800067a:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 800067c:	193b      	adds	r3, r7, r4
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	683a      	ldr	r2, [r7, #0]
 8000682:	18d3      	adds	r3, r2, r3
 8000684:	781a      	ldrb	r2, [r3, #0]
 8000686:	251c      	movs	r5, #28
 8000688:	197b      	adds	r3, r7, r5
 800068a:	0092      	lsls	r2, r2, #2
 800068c:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 800068e:	183b      	adds	r3, r7, r0
 8000690:	1839      	adds	r1, r7, r0
 8000692:	197a      	adds	r2, r7, r5
 8000694:	7809      	ldrb	r1, [r1, #0]
 8000696:	7812      	ldrb	r2, [r2, #0]
 8000698:	430a      	orrs	r2, r1
 800069a:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 800069c:	193b      	adds	r3, r7, r4
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	220c      	movs	r2, #12
 80006a2:	18ba      	adds	r2, r7, r2
 80006a4:	5cd2      	ldrb	r2, [r2, r3]
 80006a6:	2108      	movs	r1, #8
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	183a      	adds	r2, r7, r0
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6818      	ldr	r0, [r3, #0]
 80006b8:	251e      	movs	r5, #30
 80006ba:	197c      	adds	r4, r7, r5
 80006bc:	187a      	adds	r2, r7, r1
 80006be:	2301      	movs	r3, #1
 80006c0:	425b      	negs	r3, r3
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2302      	movs	r3, #2
 80006c6:	2136      	movs	r1, #54	@ 0x36
 80006c8:	f002 fd92 	bl	80031f0 <HAL_I2C_Master_Transmit>
 80006cc:	0003      	movs	r3, r0
 80006ce:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 80006d0:	197b      	adds	r3, r7, r5
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d002      	beq.n	80006de <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 80006d8:	197b      	adds	r3, r7, r5
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	e031      	b.n	8000742 <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 80006de:	211f      	movs	r1, #31
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	781a      	ldrb	r2, [r3, #0]
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	3201      	adds	r2, #1
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	231f      	movs	r3, #31
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b06      	cmp	r3, #6
 80006f2:	d9b8      	bls.n	8000666 <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6818      	ldr	r0, [r3, #0]
 80006f8:	251e      	movs	r5, #30
 80006fa:	197c      	adds	r4, r7, r5
 80006fc:	230c      	movs	r3, #12
 80006fe:	18fa      	adds	r2, r7, r3
 8000700:	2301      	movs	r3, #1
 8000702:	425b      	negs	r3, r3
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2301      	movs	r3, #1
 8000708:	2136      	movs	r1, #54	@ 0x36
 800070a:	f002 fd71 	bl	80031f0 <HAL_I2C_Master_Transmit>
 800070e:	0003      	movs	r3, r0
 8000710:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000712:	197b      	adds	r3, r7, r5
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 800071a:	197b      	adds	r3, r7, r5
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	e010      	b.n	8000742 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	251e      	movs	r5, #30
 8000726:	197c      	adds	r4, r7, r5
 8000728:	2314      	movs	r3, #20
 800072a:	18fa      	adds	r2, r7, r3
 800072c:	2301      	movs	r3, #1
 800072e:	425b      	negs	r3, r3
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	2307      	movs	r3, #7
 8000734:	2136      	movs	r1, #54	@ 0x36
 8000736:	f002 fe85 	bl	8003444 <HAL_I2C_Master_Receive>
 800073a:	0003      	movs	r3, r0
 800073c:	7023      	strb	r3, [r4, #0]

	return halRet;
 800073e:	197b      	adds	r3, r7, r5
 8000740:	781b      	ldrb	r3, [r3, #0]

}
 8000742:	0018      	movs	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	b009      	add	sp, #36	@ 0x24
 8000748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	080063f0 	.word	0x080063f0
 8000750:	080063f8 	.word	0x080063f8

08000754 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 8000754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000756:	b08b      	sub	sp, #44	@ 0x2c
 8000758:	af02      	add	r7, sp, #8
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800075e:	231e      	movs	r3, #30
 8000760:	18fb      	adds	r3, r7, r3
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 8000766:	2314      	movs	r3, #20
 8000768:	18fb      	adds	r3, r7, r3
 800076a:	4a31      	ldr	r2, [pc, #196]	@ (8000830 <capTouch_SetDetectionIntegrator+0xdc>)
 800076c:	6811      	ldr	r1, [r2, #0]
 800076e:	6019      	str	r1, [r3, #0]
 8000770:	8891      	ldrh	r1, [r2, #4]
 8000772:	8099      	strh	r1, [r3, #4]
 8000774:	7992      	ldrb	r2, [r2, #6]
 8000776:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 8000778:	2310      	movs	r3, #16
 800077a:	18fb      	adds	r3, r7, r3
 800077c:	2200      	movs	r2, #0
 800077e:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 8000780:	231f      	movs	r3, #31
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
 8000788:	e022      	b.n	80007d0 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 800078a:	251f      	movs	r5, #31
 800078c:	197b      	adds	r3, r7, r5
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2214      	movs	r2, #20
 8000792:	18ba      	adds	r2, r7, r2
 8000794:	5cd2      	ldrb	r2, [r2, r3]
 8000796:	2110      	movs	r1, #16
 8000798:	187b      	adds	r3, r7, r1
 800079a:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 800079c:	197b      	adds	r3, r7, r5
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	18d3      	adds	r3, r2, r3
 80007a4:	781a      	ldrb	r2, [r3, #0]
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6818      	ldr	r0, [r3, #0]
 80007ae:	231e      	movs	r3, #30
 80007b0:	18fc      	adds	r4, r7, r3
 80007b2:	187a      	adds	r2, r7, r1
 80007b4:	2301      	movs	r3, #1
 80007b6:	425b      	negs	r3, r3
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	2302      	movs	r3, #2
 80007bc:	2136      	movs	r1, #54	@ 0x36
 80007be:	f002 fd17 	bl	80031f0 <HAL_I2C_Master_Transmit>
 80007c2:	0003      	movs	r3, r0
 80007c4:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 80007c6:	197b      	adds	r3, r7, r5
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	197b      	adds	r3, r7, r5
 80007cc:	3201      	adds	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
 80007d0:	231f      	movs	r3, #31
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b06      	cmp	r3, #6
 80007d8:	d9d7      	bls.n	800078a <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80007da:	2608      	movs	r6, #8
 80007dc:	19bb      	adds	r3, r7, r6
 80007de:	4a15      	ldr	r2, [pc, #84]	@ (8000834 <capTouch_SetDetectionIntegrator+0xe0>)
 80007e0:	6811      	ldr	r1, [r2, #0]
 80007e2:	6019      	str	r1, [r3, #0]
 80007e4:	8891      	ldrh	r1, [r2, #4]
 80007e6:	8099      	strh	r1, [r3, #4]
 80007e8:	7992      	ldrb	r2, [r2, #6]
 80007ea:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6818      	ldr	r0, [r3, #0]
 80007f0:	251e      	movs	r5, #30
 80007f2:	197c      	adds	r4, r7, r5
 80007f4:	2314      	movs	r3, #20
 80007f6:	18fa      	adds	r2, r7, r3
 80007f8:	2301      	movs	r3, #1
 80007fa:	425b      	negs	r3, r3
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	2136      	movs	r1, #54	@ 0x36
 8000802:	f002 fcf5 	bl	80031f0 <HAL_I2C_Master_Transmit>
 8000806:	0003      	movs	r3, r0
 8000808:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6818      	ldr	r0, [r3, #0]
 800080e:	197c      	adds	r4, r7, r5
 8000810:	19ba      	adds	r2, r7, r6
 8000812:	2301      	movs	r3, #1
 8000814:	425b      	negs	r3, r3
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2307      	movs	r3, #7
 800081a:	2136      	movs	r1, #54	@ 0x36
 800081c:	f002 fe12 	bl	8003444 <HAL_I2C_Master_Receive>
 8000820:	0003      	movs	r3, r0
 8000822:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000824:	197b      	adds	r3, r7, r5
 8000826:	781b      	ldrb	r3, [r3, #0]

}
 8000828:	0018      	movs	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	b009      	add	sp, #36	@ 0x24
 800082e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000830:	08006400 	.word	0x08006400
 8000834:	080063f0 	.word	0x080063f0

08000838 <initRTCTime>:
 */

#include "../Inc/alarm.h"


void initRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000838:	b5b0      	push	{r4, r5, r7, lr}
 800083a:	b09a      	sub	sp, #104	@ 0x68
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]

	currTime->Hours = 1;				// Initialize current RTC time to default values
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
	currTime->Minutes = 00;
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	2200      	movs	r2, #0
 800084e:	705a      	strb	r2, [r3, #1]
	currTime->Seconds = 00;
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2200      	movs	r2, #0
 8000854:	709a      	strb	r2, [r3, #2]
	currTime->TimeFormat = RTC_HOURFORMAT12_AM;			//This is initially in the A.M., so P.M. LED is off.
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	2200      	movs	r2, #0
 800085a:	70da      	strb	r2, [r3, #3]

	currDate->Year = 0;					// Initialize current RTC date to default values
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	70da      	strb	r2, [r3, #3]
	currDate->Month = RTC_MONTH_JANUARY;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2201      	movs	r2, #1
 8000866:	705a      	strb	r2, [r3, #1]
	currDate->Date = 0;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2200      	movs	r2, #0
 800086c:	709a      	strb	r2, [r3, #2]

	HAL_StatusTypeDef halRet = HAL_OK;
 800086e:	2567      	movs	r5, #103	@ 0x67
 8000870:	197b      	adds	r3, r7, r5
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
	halRet = HAL_RTC_SetTime(hrtc, currTime, RTCTimeFormat);
 8000876:	197c      	adds	r4, r7, r5
 8000878:	68b9      	ldr	r1, [r7, #8]
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	2200      	movs	r2, #0
 800087e:	0018      	movs	r0, r3
 8000880:	f004 f962 	bl	8004b48 <HAL_RTC_SetTime>
 8000884:	0003      	movs	r3, r0
 8000886:	7023      	strb	r3, [r4, #0]
	halRet = HAL_RTC_SetDate(hrtc, currDate, RTCTimeFormat);
 8000888:	197c      	adds	r4, r7, r5
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	2200      	movs	r2, #0
 8000890:	0018      	movs	r0, r3
 8000892:	f004 fa5d 	bl	8004d50 <HAL_RTC_SetDate>
 8000896:	0003      	movs	r3, r0
 8000898:	7023      	strb	r3, [r4, #0]
//	}
//	else {
//		printf("Error defaulting RTC time.\n\r");
//	}

	RTC_AlarmTypeDef internalAlarm_init = {0};
 800089a:	243c      	movs	r4, #60	@ 0x3c
 800089c:	193b      	adds	r3, r7, r4
 800089e:	0018      	movs	r0, r3
 80008a0:	2328      	movs	r3, #40	@ 0x28
 80008a2:	001a      	movs	r2, r3
 80008a4:	2100      	movs	r1, #0
 80008a6:	f005 fd65 	bl	8006374 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	781a      	ldrb	r2, [r3, #0]
 80008ae:	0021      	movs	r1, r4
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	785b      	ldrb	r3, [r3, #1]
 80008b8:	3301      	adds	r3, #1
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	789a      	ldrb	r2, [r3, #2]
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	685a      	ldr	r2, [r3, #4]
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	78da      	ldrb	r2, [r3, #3]
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	78da      	ldrb	r2, [r3, #3]
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008e0:	0008      	movs	r0, r1
 80008e2:	183b      	adds	r3, r7, r0
 80008e4:	2200      	movs	r2, #0
 80008e6:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008e8:	183b      	adds	r3, r7, r0
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80008ee:	183b      	adds	r3, r7, r0
 80008f0:	4a14      	ldr	r2, [pc, #80]	@ (8000944 <initRTCTime+0x10c>)
 80008f2:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80008f4:	183b      	adds	r3, r7, r0
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80008fa:	183b      	adds	r3, r7, r0
 80008fc:	2200      	movs	r2, #0
 80008fe:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 8000900:	183b      	adds	r3, r7, r0
 8000902:	2220      	movs	r2, #32
 8000904:	2101      	movs	r1, #1
 8000906:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 8000908:	0001      	movs	r1, r0
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2280      	movs	r2, #128	@ 0x80
 800090e:	0052      	lsls	r2, r2, #1
 8000910:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8000912:	197c      	adds	r4, r7, r5
 8000914:	1879      	adds	r1, r7, r1
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	2200      	movs	r2, #0
 800091a:	0018      	movs	r0, r3
 800091c:	f004 faf8 	bl	8004f10 <HAL_RTC_SetAlarm_IT>
 8000920:	0003      	movs	r3, r0
 8000922:	7023      	strb	r3, [r4, #0]

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8000924:	197c      	adds	r4, r7, r5
 8000926:	2380      	movs	r3, #128	@ 0x80
 8000928:	005a      	lsls	r2, r3, #1
 800092a:	2314      	movs	r3, #20
 800092c:	18f9      	adds	r1, r7, r3
 800092e:	68f8      	ldr	r0, [r7, #12]
 8000930:	2300      	movs	r3, #0
 8000932:	f004 fc2d 	bl	8005190 <HAL_RTC_GetAlarm>
 8000936:	0003      	movs	r3, r0
 8000938:	7023      	strb	r3, [r4, #0]
//	if(halRet == HAL_OK) {
//		printf("Internal alarm A defaulted to %u:%u:%u.\n\r", internalAlarm_initTest.AlarmTime.Hours,
//				internalAlarm_initTest.AlarmTime.Minutes, internalAlarm_initTest.AlarmTime.Seconds);
//	}

}
 800093a:	46c0      	nop			@ (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b01a      	add	sp, #104	@ 0x68
 8000940:	bdb0      	pop	{r4, r5, r7, pc}
 8000942:	46c0      	nop			@ (mov r8, r8)
 8000944:	80800080 	.word	0x80800080

08000948 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000954:	68b9      	ldr	r1, [r7, #8]
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	2200      	movs	r2, #0
 800095a:	0018      	movs	r0, r3
 800095c:	f004 f99c 	bl	8004c98 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000960:	6879      	ldr	r1, [r7, #4]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2200      	movs	r2, #0
 8000966:	0018      	movs	r0, r3
 8000968:	f004 fa84 	bl	8004e74 <HAL_RTC_GetDate>

}
 800096c:	46c0      	nop			@ (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b004      	add	sp, #16
 8000972:	bd80      	pop	{r7, pc}

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000976:	b08d      	sub	sp, #52	@ 0x34
 8000978:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097a:	f001 fbc3 	bl	8002104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097e:	f000 f8a1 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000982:	f000 faf1 	bl	8000f68 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000986:	f000 f909 	bl	8000b9c <MX_ADC1_Init>
  MX_RTC_Init();
 800098a:	f000 f9b3 	bl	8000cf4 <MX_RTC_Init>
  MX_I2C1_Init();
 800098e:	f000 f971 	bl	8000c74 <MX_I2C1_Init>
  MX_TIM14_Init();
 8000992:	f000 fac3 	bl	8000f1c <MX_TIM14_Init>
  MX_TIM2_Init();
 8000996:	f000 fa61 	bl	8000e5c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  uint8_t initRet = 0;
 800099a:	2517      	movs	r5, #23
 800099c:	197b      	adds	r3, r7, r5
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]

  initRTCTime(&hrtc, &currTime, &currDate);
 80009a2:	4a3b      	ldr	r2, [pc, #236]	@ (8000a90 <main+0x11c>)
 80009a4:	493b      	ldr	r1, [pc, #236]	@ (8000a94 <main+0x120>)
 80009a6:	4b3c      	ldr	r3, [pc, #240]	@ (8000a98 <main+0x124>)
 80009a8:	0018      	movs	r0, r3
 80009aa:	f7ff ff45 	bl	8000838 <initRTCTime>

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 80009ae:	2380      	movs	r3, #128	@ 0x80
 80009b0:	009c      	lsls	r4, r3, #2
 80009b2:	2380      	movs	r3, #128	@ 0x80
 80009b4:	00dd      	lsls	r5, r3, #3
 80009b6:	2680      	movs	r6, #128	@ 0x80
 80009b8:	2340      	movs	r3, #64	@ 0x40
 80009ba:	469c      	mov	ip, r3
 80009bc:	2380      	movs	r3, #128	@ 0x80
 80009be:	011a      	lsls	r2, r3, #4
 80009c0:	4b36      	ldr	r3, [pc, #216]	@ (8000a9c <main+0x128>)
 80009c2:	6819      	ldr	r1, [r3, #0]
 80009c4:	4b36      	ldr	r3, [pc, #216]	@ (8000aa0 <main+0x12c>)
 80009c6:	6818      	ldr	r0, [r3, #0]
 80009c8:	4b36      	ldr	r3, [pc, #216]	@ (8000aa4 <main+0x130>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	9304      	str	r3, [sp, #16]
 80009ce:	9003      	str	r0, [sp, #12]
 80009d0:	9102      	str	r1, [sp, #8]
 80009d2:	4b35      	ldr	r3, [pc, #212]	@ (8000aa8 <main+0x134>)
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	9200      	str	r2, [sp, #0]
 80009d8:	4663      	mov	r3, ip
 80009da:	0032      	movs	r2, r6
 80009dc:	0029      	movs	r1, r5
 80009de:	0020      	movs	r0, r4
 80009e0:	f000 ff7c 	bl	80018dc <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);

	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 80009e4:	2316      	movs	r3, #22
 80009e6:	18fc      	adds	r4, r7, r3
 80009e8:	f000 fb90 	bl	800110c <updateAndDisplayTime>
 80009ec:	0003      	movs	r3, r0
 80009ee:	7023      	strb	r3, [r4, #0]

    /*
     * Initialize capacitive touch sensor
     */

    initRet = capTouch_Init(&capTouch, &hi2c1, 0b00001111);
 80009f0:	2517      	movs	r5, #23
 80009f2:	197c      	adds	r4, r7, r5
 80009f4:	492d      	ldr	r1, [pc, #180]	@ (8000aac <main+0x138>)
 80009f6:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab0 <main+0x13c>)
 80009f8:	220f      	movs	r2, #15
 80009fa:	0018      	movs	r0, r3
 80009fc:	f7ff fc0e 	bl	800021c <capTouch_Init>
 8000a00:	0003      	movs	r3, r0
 8000a02:	7023      	strb	r3, [r4, #0]

    if(initRet != 0) {
 8000a04:	197b      	adds	r3, r7, r5
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <main+0x9c>
    	dispError();
 8000a0c:	f000 ff1e 	bl	800184c <dispError>
    }

    // Max. out averaging factor
    uint8_t avgFactors_New[7] = {32, 32, 32, 32, 0, 0, 0};
 8000a10:	200c      	movs	r0, #12
 8000a12:	183b      	adds	r3, r7, r0
 8000a14:	4a27      	ldr	r2, [pc, #156]	@ (8000ab4 <main+0x140>)
 8000a16:	6811      	ldr	r1, [r2, #0]
 8000a18:	6019      	str	r1, [r3, #0]
 8000a1a:	8891      	ldrh	r1, [r2, #4]
 8000a1c:	8099      	strh	r1, [r3, #4]
 8000a1e:	7992      	ldrb	r2, [r2, #6]
 8000a20:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000a22:	2516      	movs	r5, #22
 8000a24:	197c      	adds	r4, r7, r5
 8000a26:	183a      	adds	r2, r7, r0
 8000a28:	4b21      	ldr	r3, [pc, #132]	@ (8000ab0 <main+0x13c>)
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f7ff fdc7 	bl	80005c0 <capTouch_SetAveragingFactor>
 8000a32:	0003      	movs	r3, r0
 8000a34:	7023      	strb	r3, [r4, #0]

    if(halRet != HAL_OK) {
 8000a36:	197b      	adds	r3, r7, r5
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <main+0xce>
    	dispError();
 8000a3e:	f000 ff05 	bl	800184c <dispError>
    }

    // Set detection integration factors
    uint8_t detIntFactors_New[7] = {0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04};
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab8 <main+0x144>)
 8000a46:	6811      	ldr	r1, [r2, #0]
 8000a48:	6019      	str	r1, [r3, #0]
 8000a4a:	8891      	ldrh	r1, [r2, #4]
 8000a4c:	8099      	strh	r1, [r3, #4]
 8000a4e:	7992      	ldrb	r2, [r2, #6]
 8000a50:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 8000a52:	2516      	movs	r5, #22
 8000a54:	197c      	adds	r4, r7, r5
 8000a56:	1d3a      	adds	r2, r7, #4
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <main+0x13c>)
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f7ff fe79 	bl	8000754 <capTouch_SetDetectionIntegrator>
 8000a62:	0003      	movs	r3, r0
 8000a64:	7023      	strb	r3, [r4, #0]
    if(halRet != HAL_OK) {
 8000a66:	197b      	adds	r3, r7, r5
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <main+0xfe>
    	dispError();
 8000a6e:	f000 feed 	bl	800184c <dispError>
    }

	userAlarmToggle = false;			//Default to off
 8000a72:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <main+0x148>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]

    // User alarm default value
    userAlarmTime.Hours = 1;
 8000a78:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <main+0x14c>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	701a      	strb	r2, [r3, #0]
    userAlarmTime.Minutes = 1;
 8000a7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <main+0x14c>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	705a      	strb	r2, [r3, #1]
    userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000a84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <main+0x14c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	70da      	strb	r2, [r3, #3]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	e7fd      	b.n	8000a8a <main+0x116>
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	20000204 	.word	0x20000204
 8000a94:	200001f0 	.word	0x200001f0
 8000a98:	2000012c 	.word	0x2000012c
 8000a9c:	20000024 	.word	0x20000024
 8000aa0:	20000028 	.word	0x20000028
 8000aa4:	2000002c 	.word	0x2000002c
 8000aa8:	2000000c 	.word	0x2000000c
 8000aac:	200000d8 	.word	0x200000d8
 8000ab0:	20000220 	.word	0x20000220
 8000ab4:	08006408 	.word	0x08006408
 8000ab8:	08006410 	.word	0x08006410
 8000abc:	20000071 	.word	0x20000071
 8000ac0:	20000208 	.word	0x20000208

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b093      	sub	sp, #76	@ 0x4c
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	2410      	movs	r4, #16
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	0018      	movs	r0, r3
 8000ad0:	2338      	movs	r3, #56	@ 0x38
 8000ad2:	001a      	movs	r2, r3
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	f005 fc4d 	bl	8006374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ada:	003b      	movs	r3, r7
 8000adc:	0018      	movs	r0, r3
 8000ade:	2310      	movs	r3, #16
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	f005 fc46 	bl	8006374 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae8:	2380      	movs	r3, #128	@ 0x80
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	0018      	movs	r0, r3
 8000aee:	f003 f92b 	bl	8003d48 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000af2:	f003 f91b 	bl	8003d2c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000af6:	4b28      	ldr	r3, [pc, #160]	@ (8000b98 <SystemClock_Config+0xd4>)
 8000af8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000afa:	4b27      	ldr	r3, [pc, #156]	@ (8000b98 <SystemClock_Config+0xd4>)
 8000afc:	2118      	movs	r1, #24
 8000afe:	438a      	bics	r2, r1
 8000b00:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	2206      	movs	r2, #6
 8000b06:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	2280      	movs	r2, #128	@ 0x80
 8000b12:	0052      	lsls	r2, r2, #1
 8000b14:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000b16:	0021      	movs	r1, r4
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2240      	movs	r2, #64	@ 0x40
 8000b22:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2202      	movs	r2, #2
 8000b28:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2208      	movs	r2, #8
 8000b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2280      	movs	r2, #128	@ 0x80
 8000b40:	0292      	lsls	r2, r2, #10
 8000b42:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2280      	movs	r2, #128	@ 0x80
 8000b48:	0492      	lsls	r2, r2, #18
 8000b4a:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2280      	movs	r2, #128	@ 0x80
 8000b50:	0592      	lsls	r2, r2, #22
 8000b52:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	0018      	movs	r0, r3
 8000b58:	f003 f936 	bl	8003dc8 <HAL_RCC_OscConfig>
 8000b5c:	1e03      	subs	r3, r0, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000b60:	f000 feb6 	bl	80018d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b64:	003b      	movs	r3, r7
 8000b66:	2207      	movs	r2, #7
 8000b68:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6a:	003b      	movs	r3, r7
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b70:	003b      	movs	r3, r7
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b76:	003b      	movs	r3, r7
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b7c:	003b      	movs	r3, r7
 8000b7e:	2102      	movs	r1, #2
 8000b80:	0018      	movs	r0, r3
 8000b82:	f003 fc3b 	bl	80043fc <HAL_RCC_ClockConfig>
 8000b86:	1e03      	subs	r3, r0, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b8a:	f000 fea1 	bl	80018d0 <Error_Handler>
  }
}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b013      	add	sp, #76	@ 0x4c
 8000b94:	bd90      	pop	{r4, r7, pc}
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	40021000 	.word	0x40021000

08000b9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	230c      	movs	r3, #12
 8000ba8:	001a      	movs	r2, r3
 8000baa:	2100      	movs	r1, #0
 8000bac:	f005 fbe2 	bl	8006374 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000bb2:	4a2e      	ldr	r2, [pc, #184]	@ (8000c6c <MX_ADC1_Init+0xd0>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000bb8:	2280      	movs	r2, #128	@ 0x80
 8000bba:	05d2      	lsls	r2, r2, #23
 8000bbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bc4:	4b28      	ldr	r3, [pc, #160]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bca:	4b27      	ldr	r3, [pc, #156]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bd0:	4b25      	ldr	r3, [pc, #148]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bd6:	4b24      	ldr	r3, [pc, #144]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000bdc:	4b22      	ldr	r3, [pc, #136]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000be2:	4b21      	ldr	r3, [pc, #132]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000be8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bee:	4b1e      	ldr	r3, [pc, #120]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c02:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000c04:	222c      	movs	r2, #44	@ 0x2c
 8000c06:	2100      	movs	r1, #0
 8000c08:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c0a:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000c10:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000c16:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000c1e:	223c      	movs	r2, #60	@ 0x3c
 8000c20:	2100      	movs	r1, #0
 8000c22:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000c24:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f001 fbed 	bl	800240c <HAL_ADC_Init>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d001      	beq.n	8000c3a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000c36:	f000 fe4b 	bl	80018d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c70 <MX_ADC1_Init+0xd4>)
 8000c3e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2200      	movs	r2, #0
 8000c44:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c4c:	1d3a      	adds	r2, r7, #4
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <MX_ADC1_Init+0xcc>)
 8000c50:	0011      	movs	r1, r2
 8000c52:	0018      	movs	r0, r3
 8000c54:	f001 fd82 	bl	800275c <HAL_ADC_ConfigChannel>
 8000c58:	1e03      	subs	r3, r0, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000c5c:	f000 fe38 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b004      	add	sp, #16
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000074 	.word	0x20000074
 8000c6c:	40012400 	.word	0x40012400
 8000c70:	08000004 	.word	0x08000004

08000c74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cec <MX_I2C1_Init+0x78>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c80:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf0 <MX_I2C1_Init+0x7c>)
 8000c82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c84:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c90:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c96:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f002 f9f7 	bl	80030a4 <HAL_I2C_Init>
 8000cb6:	1e03      	subs	r3, r0, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cba:	f000 fe09 	bl	80018d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f002 ff9a 	bl	8003bfc <HAL_I2CEx_ConfigAnalogFilter>
 8000cc8:	1e03      	subs	r3, r0, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ccc:	f000 fe00 	bl	80018d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cd0:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f002 ffdd 	bl	8003c94 <HAL_I2CEx_ConfigDigitalFilter>
 8000cda:	1e03      	subs	r3, r0, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cde:	f000 fdf7 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200000d8 	.word	0x200000d8
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	00602173 	.word	0x00602173

08000cf4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b090      	sub	sp, #64	@ 0x40
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000cfa:	232c      	movs	r3, #44	@ 0x2c
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	0018      	movs	r0, r3
 8000d00:	2314      	movs	r3, #20
 8000d02:	001a      	movs	r2, r3
 8000d04:	2100      	movs	r1, #0
 8000d06:	f005 fb35 	bl	8006374 <memset>
  RTC_DateTypeDef sDate = {0};
 8000d0a:	2328      	movs	r3, #40	@ 0x28
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000d12:	003b      	movs	r3, r7
 8000d14:	0018      	movs	r0, r3
 8000d16:	2328      	movs	r3, #40	@ 0x28
 8000d18:	001a      	movs	r2, r3
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	f005 fb2a 	bl	8006374 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d20:	4b4b      	ldr	r3, [pc, #300]	@ (8000e50 <MX_RTC_Init+0x15c>)
 8000d22:	4a4c      	ldr	r2, [pc, #304]	@ (8000e54 <MX_RTC_Init+0x160>)
 8000d24:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000d26:	4b4a      	ldr	r3, [pc, #296]	@ (8000e50 <MX_RTC_Init+0x15c>)
 8000d28:	2240      	movs	r2, #64	@ 0x40
 8000d2a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000d2c:	4b48      	ldr	r3, [pc, #288]	@ (8000e50 <MX_RTC_Init+0x15c>)
 8000d2e:	227f      	movs	r2, #127	@ 0x7f
 8000d30:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000d32:	4b47      	ldr	r3, [pc, #284]	@ (8000e50 <MX_RTC_Init+0x15c>)
 8000d34:	22ff      	movs	r2, #255	@ 0xff
 8000d36:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d38:	4b45      	ldr	r3, [pc, #276]	@ (8000e50 <MX_RTC_Init+0x15c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d3e:	4b44      	ldr	r3, [pc, #272]	@ (8000e50 <MX_RTC_Init+0x15c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d44:	4b42      	ldr	r3, [pc, #264]	@ (8000e50 <MX_RTC_Init+0x15c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d4a:	4b41      	ldr	r3, [pc, #260]	@ (8000e50 <MX_RTC_Init+0x15c>)
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	05d2      	lsls	r2, r2, #23
 8000d50:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000d52:	4b3f      	ldr	r3, [pc, #252]	@ (8000e50 <MX_RTC_Init+0x15c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d58:	4b3d      	ldr	r3, [pc, #244]	@ (8000e50 <MX_RTC_Init+0x15c>)
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f003 fe52 	bl	8004a04 <HAL_RTC_Init>
 8000d60:	1e03      	subs	r3, r0, #0
 8000d62:	d001      	beq.n	8000d68 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000d64:	f000 fdb4 	bl	80018d0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000d68:	212c      	movs	r1, #44	@ 0x2c
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	2200      	movs	r2, #0
 8000d74:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	2200      	movs	r2, #0
 8000d80:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2200      	movs	r2, #0
 8000d86:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d94:	1879      	adds	r1, r7, r1
 8000d96:	4b2e      	ldr	r3, [pc, #184]	@ (8000e50 <MX_RTC_Init+0x15c>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f003 fed4 	bl	8004b48 <HAL_RTC_SetTime>
 8000da0:	1e03      	subs	r3, r0, #0
 8000da2:	d001      	beq.n	8000da8 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000da4:	f000 fd94 	bl	80018d0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000da8:	2128      	movs	r1, #40	@ 0x28
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2201      	movs	r2, #1
 8000db4:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2201      	movs	r2, #1
 8000dba:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000dc2:	1879      	adds	r1, r7, r1
 8000dc4:	4b22      	ldr	r3, [pc, #136]	@ (8000e50 <MX_RTC_Init+0x15c>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f003 ffc1 	bl	8004d50 <HAL_RTC_SetDate>
 8000dce:	1e03      	subs	r3, r0, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 8000dd2:	f000 fd7d 	bl	80018d0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000dd6:	003b      	movs	r3, r7
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000ddc:	003b      	movs	r3, r7
 8000dde:	2201      	movs	r2, #1
 8000de0:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000de2:	003b      	movs	r3, r7
 8000de4:	2200      	movs	r2, #0
 8000de6:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000de8:	003b      	movs	r3, r7
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000dee:	003b      	movs	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000df4:	003b      	movs	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000e00:	003b      	movs	r3, r7
 8000e02:	4a15      	ldr	r2, [pc, #84]	@ (8000e58 <MX_RTC_Init+0x164>)
 8000e04:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000e06:	003b      	movs	r3, r7
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000e0c:	003b      	movs	r3, r7
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000e12:	003b      	movs	r3, r7
 8000e14:	2220      	movs	r2, #32
 8000e16:	2101      	movs	r1, #1
 8000e18:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000e1a:	003b      	movs	r3, r7
 8000e1c:	2280      	movs	r2, #128	@ 0x80
 8000e1e:	0052      	lsls	r2, r2, #1
 8000e20:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e22:	0039      	movs	r1, r7
 8000e24:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <MX_RTC_Init+0x15c>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f004 f871 	bl	8004f10 <HAL_RTC_SetAlarm_IT>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <MX_RTC_Init+0x142>
  {
    Error_Handler();
 8000e32:	f000 fd4d 	bl	80018d0 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000e36:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <MX_RTC_Init+0x15c>)
 8000e38:	2100      	movs	r1, #0
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f004 fb9e 	bl	800557c <HAL_RTCEx_SetCalibrationOutPut>
 8000e40:	1e03      	subs	r3, r0, #0
 8000e42:	d001      	beq.n	8000e48 <MX_RTC_Init+0x154>
  {
    Error_Handler();
 8000e44:	f000 fd44 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e48:	46c0      	nop			@ (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b010      	add	sp, #64	@ 0x40
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	2000012c 	.word	0x2000012c
 8000e54:	40002800 	.word	0x40002800
 8000e58:	80800080 	.word	0x80800080

08000e5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	@ 0x28
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e62:	231c      	movs	r3, #28
 8000e64:	18fb      	adds	r3, r7, r3
 8000e66:	0018      	movs	r0, r3
 8000e68:	230c      	movs	r3, #12
 8000e6a:	001a      	movs	r2, r3
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	f005 fa81 	bl	8006374 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e72:	003b      	movs	r3, r7
 8000e74:	0018      	movs	r0, r3
 8000e76:	231c      	movs	r3, #28
 8000e78:	001a      	movs	r2, r3
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	f005 fa7a 	bl	8006374 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e80:	4b24      	ldr	r3, [pc, #144]	@ (8000f14 <MX_TIM2_Init+0xb8>)
 8000e82:	2280      	movs	r2, #128	@ 0x80
 8000e84:	05d2      	lsls	r2, r2, #23
 8000e86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8000e88:	4b22      	ldr	r3, [pc, #136]	@ (8000f14 <MX_TIM2_Init+0xb8>)
 8000e8a:	4a23      	ldr	r2, [pc, #140]	@ (8000f18 <MX_TIM2_Init+0xbc>)
 8000e8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <MX_TIM2_Init+0xb8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000e94:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <MX_TIM2_Init+0xb8>)
 8000e96:	2263      	movs	r2, #99	@ 0x63
 8000e98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f14 <MX_TIM2_Init+0xb8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <MX_TIM2_Init+0xb8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f14 <MX_TIM2_Init+0xb8>)
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f004 fc81 	bl	80057b0 <HAL_TIM_PWM_Init>
 8000eae:	1e03      	subs	r3, r0, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000eb2:	f000 fd0d 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb6:	211c      	movs	r1, #28
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ec4:	187a      	adds	r2, r7, r1
 8000ec6:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <MX_TIM2_Init+0xb8>)
 8000ec8:	0011      	movs	r1, r2
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f005 f9ea 	bl	80062a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed0:	1e03      	subs	r3, r0, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000ed4:	f000 fcfc 	bl	80018d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed8:	003b      	movs	r3, r7
 8000eda:	2260      	movs	r2, #96	@ 0x60
 8000edc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ede:	003b      	movs	r3, r7
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee4:	003b      	movs	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eea:	003b      	movs	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ef0:	0039      	movs	r1, r7
 8000ef2:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <MX_TIM2_Init+0xb8>)
 8000ef4:	2208      	movs	r2, #8
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f004 fd90 	bl	8005a1c <HAL_TIM_PWM_ConfigChannel>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000f00:	f000 fce6 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f04:	4b03      	ldr	r3, [pc, #12]	@ (8000f14 <MX_TIM2_Init+0xb8>)
 8000f06:	0018      	movs	r0, r3
 8000f08:	f001 f846 	bl	8001f98 <HAL_TIM_MspPostInit>

}
 8000f0c:	46c0      	nop			@ (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b00a      	add	sp, #40	@ 0x28
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000158 	.word	0x20000158
 8000f18:	0000031f 	.word	0x0000031f

08000f1c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f20:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <MX_TIM14_Init+0x40>)
 8000f22:	4a0f      	ldr	r2, [pc, #60]	@ (8000f60 <MX_TIM14_Init+0x44>)
 8000f24:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8000f26:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <MX_TIM14_Init+0x40>)
 8000f28:	22f4      	movs	r2, #244	@ 0xf4
 8000f2a:	0092      	lsls	r2, r2, #2
 8000f2c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <MX_TIM14_Init+0x40>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000f34:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <MX_TIM14_Init+0x40>)
 8000f36:	4a0b      	ldr	r2, [pc, #44]	@ (8000f64 <MX_TIM14_Init+0x48>)
 8000f38:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <MX_TIM14_Init+0x40>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <MX_TIM14_Init+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f46:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <MX_TIM14_Init+0x40>)
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f004 fb67 	bl	800561c <HAL_TIM_Base_Init>
 8000f4e:	1e03      	subs	r3, r0, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000f52:	f000 fcbd 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000f56:	46c0      	nop			@ (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200001a4 	.word	0x200001a4
 8000f60:	40002000 	.word	0x40002000
 8000f64:	0000ffff 	.word	0x0000ffff

08000f68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b08b      	sub	sp, #44	@ 0x2c
 8000f6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6e:	2414      	movs	r4, #20
 8000f70:	193b      	adds	r3, r7, r4
 8000f72:	0018      	movs	r0, r3
 8000f74:	2314      	movs	r3, #20
 8000f76:	001a      	movs	r2, r3
 8000f78:	2100      	movs	r1, #0
 8000f7a:	f005 f9fb 	bl	8006374 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7e:	4b5e      	ldr	r3, [pc, #376]	@ (80010f8 <MX_GPIO_Init+0x190>)
 8000f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f82:	4b5d      	ldr	r3, [pc, #372]	@ (80010f8 <MX_GPIO_Init+0x190>)
 8000f84:	2104      	movs	r1, #4
 8000f86:	430a      	orrs	r2, r1
 8000f88:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f8a:	4b5b      	ldr	r3, [pc, #364]	@ (80010f8 <MX_GPIO_Init+0x190>)
 8000f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f8e:	2204      	movs	r2, #4
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b58      	ldr	r3, [pc, #352]	@ (80010f8 <MX_GPIO_Init+0x190>)
 8000f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f9a:	4b57      	ldr	r3, [pc, #348]	@ (80010f8 <MX_GPIO_Init+0x190>)
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fa2:	4b55      	ldr	r3, [pc, #340]	@ (80010f8 <MX_GPIO_Init+0x190>)
 8000fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fae:	4b52      	ldr	r3, [pc, #328]	@ (80010f8 <MX_GPIO_Init+0x190>)
 8000fb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fb2:	4b51      	ldr	r3, [pc, #324]	@ (80010f8 <MX_GPIO_Init+0x190>)
 8000fb4:	2108      	movs	r1, #8
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fba:	4b4f      	ldr	r3, [pc, #316]	@ (80010f8 <MX_GPIO_Init+0x190>)
 8000fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fbe:	2208      	movs	r2, #8
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	4b4c      	ldr	r3, [pc, #304]	@ (80010f8 <MX_GPIO_Init+0x190>)
 8000fc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fca:	4b4b      	ldr	r3, [pc, #300]	@ (80010f8 <MX_GPIO_Init+0x190>)
 8000fcc:	2102      	movs	r1, #2
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fd2:	4b49      	ldr	r3, [pc, #292]	@ (80010f8 <MX_GPIO_Init+0x190>)
 8000fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	4013      	ands	r3, r2
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8000fde:	4947      	ldr	r1, [pc, #284]	@ (80010fc <MX_GPIO_Init+0x194>)
 8000fe0:	23a0      	movs	r3, #160	@ 0xa0
 8000fe2:	05db      	lsls	r3, r3, #23
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f001 ffef 	bl	8002fca <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8000fec:	4b44      	ldr	r3, [pc, #272]	@ (8001100 <MX_GPIO_Init+0x198>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2180      	movs	r1, #128	@ 0x80
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f001 ffe9 	bl	8002fca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_EN_GPIO_Port, CTOUCH_EN_Pin, GPIO_PIN_RESET);
 8000ff8:	2380      	movs	r3, #128	@ 0x80
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4841      	ldr	r0, [pc, #260]	@ (8001104 <MX_GPIO_Init+0x19c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	0019      	movs	r1, r3
 8001002:	f001 ffe2 	bl	8002fca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin BUZZER_OUT_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin
                           SHIFT_MCLR_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8001006:	193b      	adds	r3, r7, r4
 8001008:	4a3c      	ldr	r2, [pc, #240]	@ (80010fc <MX_GPIO_Init+0x194>)
 800100a:	601a      	str	r2, [r3, #0]
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	193b      	adds	r3, r7, r4
 800100e:	2201      	movs	r2, #1
 8001010:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	193b      	adds	r3, r7, r4
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	193b      	adds	r3, r7, r4
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	193a      	adds	r2, r7, r4
 8001020:	23a0      	movs	r3, #160	@ 0xa0
 8001022:	05db      	lsls	r3, r3, #23
 8001024:	0011      	movs	r1, r2
 8001026:	0018      	movs	r0, r3
 8001028:	f001 fe4e 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 800102c:	193b      	adds	r3, r7, r4
 800102e:	2280      	movs	r2, #128	@ 0x80
 8001030:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	193b      	adds	r3, r7, r4
 8001034:	2201      	movs	r2, #1
 8001036:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	193b      	adds	r3, r7, r4
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	193b      	adds	r3, r7, r4
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 8001044:	193b      	adds	r3, r7, r4
 8001046:	4a2e      	ldr	r2, [pc, #184]	@ (8001100 <MX_GPIO_Init+0x198>)
 8001048:	0019      	movs	r1, r3
 800104a:	0010      	movs	r0, r2
 800104c:	f001 fe3c 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 8001050:	193b      	adds	r3, r7, r4
 8001052:	2280      	movs	r2, #128	@ 0x80
 8001054:	0212      	lsls	r2, r2, #8
 8001056:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001058:	193b      	adds	r3, r7, r4
 800105a:	2284      	movs	r2, #132	@ 0x84
 800105c:	0392      	lsls	r2, r2, #14
 800105e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001060:	193b      	adds	r3, r7, r4
 8001062:	2201      	movs	r2, #1
 8001064:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001066:	193a      	adds	r2, r7, r4
 8001068:	23a0      	movs	r3, #160	@ 0xa0
 800106a:	05db      	lsls	r3, r3, #23
 800106c:	0011      	movs	r1, r2
 800106e:	0018      	movs	r0, r3
 8001070:	f001 fe2a 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 8001074:	0021      	movs	r1, r4
 8001076:	187b      	adds	r3, r7, r1
 8001078:	220f      	movs	r2, #15
 800107a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800107c:	187b      	adds	r3, r7, r1
 800107e:	2284      	movs	r2, #132	@ 0x84
 8001080:	0392      	lsls	r2, r2, #14
 8001082:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2201      	movs	r2, #1
 8001088:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108a:	000c      	movs	r4, r1
 800108c:	187b      	adds	r3, r7, r1
 800108e:	4a1e      	ldr	r2, [pc, #120]	@ (8001108 <MX_GPIO_Init+0x1a0>)
 8001090:	0019      	movs	r1, r3
 8001092:	0010      	movs	r0, r2
 8001094:	f001 fe18 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_EN_Pin */
  GPIO_InitStruct.Pin = CTOUCH_EN_Pin;
 8001098:	0021      	movs	r1, r4
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2280      	movs	r2, #128	@ 0x80
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	187b      	adds	r3, r7, r1
 80010a4:	2201      	movs	r2, #1
 80010a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	187b      	adds	r3, r7, r1
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_EN_GPIO_Port, &GPIO_InitStruct);
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	4a13      	ldr	r2, [pc, #76]	@ (8001104 <MX_GPIO_Init+0x19c>)
 80010b8:	0019      	movs	r1, r3
 80010ba:	0010      	movs	r0, r2
 80010bc:	f001 fe04 	bl	8002cc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2100      	movs	r1, #0
 80010c4:	2005      	movs	r0, #5
 80010c6:	f001 fdcd 	bl	8002c64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80010ca:	2005      	movs	r0, #5
 80010cc:	f001 fddf 	bl	8002c8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2100      	movs	r1, #0
 80010d4:	2006      	movs	r0, #6
 80010d6:	f001 fdc5 	bl	8002c64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80010da:	2006      	movs	r0, #6
 80010dc:	f001 fdd7 	bl	8002c8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2101      	movs	r1, #1
 80010e4:	2007      	movs	r0, #7
 80010e6:	f001 fdbd 	bl	8002c64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80010ea:	2007      	movs	r0, #7
 80010ec:	f001 fdcf 	bl	8002c8e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010f0:	46c0      	nop			@ (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b00b      	add	sp, #44	@ 0x2c
 80010f6:	bd90      	pop	{r4, r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	00001f01 	.word	0x00001f01
 8001100:	50000800 	.word	0x50000800
 8001104:	50000400 	.word	0x50000400
 8001108:	50000c00 	.word	0x50000c00

0800110c <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8001118:	4a07      	ldr	r2, [pc, #28]	@ (8001138 <updateAndDisplayTime+0x2c>)
 800111a:	4908      	ldr	r1, [pc, #32]	@ (800113c <updateAndDisplayTime+0x30>)
 800111c:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <updateAndDisplayTime+0x34>)
 800111e:	0018      	movs	r0, r3
 8001120:	f7ff fc12 	bl	8000948 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 8001124:	4b05      	ldr	r3, [pc, #20]	@ (800113c <updateAndDisplayTime+0x30>)
 8001126:	0018      	movs	r0, r3
 8001128:	f000 fcec 	bl	8001b04 <sevSeg_updateDigits>

	return halRet;
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	781b      	ldrb	r3, [r3, #0]

}
 8001130:	0018      	movs	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	b002      	add	sp, #8
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000204 	.word	0x20000204
 800113c:	200001f0 	.word	0x200001f0
 8001140:	2000012c 	.word	0x2000012c

08001144 <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 8001150:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <updateAndDisplayAlarm+0x20>)
 8001152:	0018      	movs	r0, r3
 8001154:	f000 fcd6 	bl	8001b04 <sevSeg_updateDigits>

	return halRet;
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	781b      	ldrb	r3, [r3, #0]

}
 800115c:	0018      	movs	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	b002      	add	sp, #8
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000208 	.word	0x20000208

08001168 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b08d      	sub	sp, #52	@ 0x34
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

	  //printf("Enter current time minute increment interrupt\n\r");

	  RTC_AlarmTypeDef sAlarm;
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8001170:	2380      	movs	r3, #128	@ 0x80
 8001172:	005a      	lsls	r2, r3, #1
 8001174:	2408      	movs	r4, #8
 8001176:	1939      	adds	r1, r7, r4
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	2300      	movs	r3, #0
 800117c:	f004 f808 	bl	8005190 <HAL_RTC_GetAlarm>
	  getRTCTime(hrtc, &currTime, &currDate);
 8001180:	4a22      	ldr	r2, [pc, #136]	@ (800120c <HAL_RTC_AlarmAEventCallback+0xa4>)
 8001182:	4923      	ldr	r1, [pc, #140]	@ (8001210 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	0018      	movs	r0, r3
 8001188:	f7ff fbde 	bl	8000948 <getRTCTime>

	  if(sAlarm.AlarmTime.Minutes>58) {
 800118c:	0022      	movs	r2, r4
 800118e:	18bb      	adds	r3, r7, r2
 8001190:	785b      	ldrb	r3, [r3, #1]
 8001192:	2b3a      	cmp	r3, #58	@ 0x3a
 8001194:	d903      	bls.n	800119e <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 8001196:	18bb      	adds	r3, r7, r2
 8001198:	2200      	movs	r2, #0
 800119a:	705a      	strb	r2, [r3, #1]
 800119c:	e00e      	b.n	80011bc <HAL_RTC_AlarmAEventCallback+0x54>
		//printf("Reset alarm time\n\r");
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 800119e:	2108      	movs	r1, #8
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	785b      	ldrb	r3, [r3, #1]
 80011a4:	3301      	adds	r3, #1
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 80011ac:	e006      	b.n	80011bc <HAL_RTC_AlarmAEventCallback+0x54>
			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 80011ae:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <HAL_RTC_AlarmAEventCallback+0xac>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2201      	movs	r2, #1
 80011b4:	0011      	movs	r1, r2
 80011b6:	0018      	movs	r0, r3
 80011b8:	f001 ff24 	bl	8003004 <HAL_GPIO_TogglePin>
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 80011bc:	2308      	movs	r3, #8
 80011be:	18f9      	adds	r1, r7, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	0018      	movs	r0, r3
 80011c6:	f003 fea3 	bl	8004f10 <HAL_RTC_SetAlarm_IT>
 80011ca:	1e03      	subs	r3, r0, #0
 80011cc:	d1ef      	bne.n	80011ae <HAL_RTC_AlarmAEventCallback+0x46>
		}

	  updateAndDisplayTime();
 80011ce:	f7ff ff9d 	bl	800110c <updateAndDisplayTime>

	  //printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <HAL_RTC_AlarmAEventCallback+0xb0>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d013      	beq.n	8001202 <HAL_RTC_AlarmAEventCallback+0x9a>
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <HAL_RTC_AlarmAEventCallback+0xb4>)
 80011dc:	781a      	ldrb	r2, [r3, #0]
 80011de:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <HAL_RTC_AlarmAEventCallback+0xa8>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d10d      	bne.n	8001202 <HAL_RTC_AlarmAEventCallback+0x9a>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 80011e6:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <HAL_RTC_AlarmAEventCallback+0xb4>)
 80011e8:	785a      	ldrb	r2, [r3, #1]
 80011ea:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <HAL_RTC_AlarmAEventCallback+0xa8>)
 80011ec:	785b      	ldrb	r3, [r3, #1]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d107      	bne.n	8001202 <HAL_RTC_AlarmAEventCallback+0x9a>
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <HAL_RTC_AlarmAEventCallback+0xb4>)
 80011f4:	78da      	ldrb	r2, [r3, #3]
 80011f6:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <HAL_RTC_AlarmAEventCallback+0xa8>)
 80011f8:	78db      	ldrb	r3, [r3, #3]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d101      	bne.n	8001202 <HAL_RTC_AlarmAEventCallback+0x9a>
		  userAlarmBeep();
 80011fe:	f000 f80f 	bl	8001220 <userAlarmBeep>
	  }

}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	46bd      	mov	sp, r7
 8001206:	b00d      	add	sp, #52	@ 0x34
 8001208:	bd90      	pop	{r4, r7, pc}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	20000204 	.word	0x20000204
 8001210:	200001f0 	.word	0x200001f0
 8001214:	20000020 	.word	0x20000020
 8001218:	20000071 	.word	0x20000071
 800121c:	20000208 	.word	0x20000208

08001220 <userAlarmBeep>:

void userAlarmBeep() {
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8001226:	4b3a      	ldr	r3, [pc, #232]	@ (8001310 <userAlarmBeep+0xf0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	0018      	movs	r0, r3
 800122c:	f004 fa9a 	bl	8005764 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001230:	4b37      	ldr	r3, [pc, #220]	@ (8001310 <userAlarmBeep+0xf0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	0018      	movs	r0, r3
 8001236:	f004 fa49 	bl	80056cc <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 800123a:	4b35      	ldr	r3, [pc, #212]	@ (8001310 <userAlarmBeep+0xf0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001242:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001244:	1cfb      	adds	r3, r7, #3
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]

	uint8_t channelRead = 0x00;
 800124a:	1cbb      	adds	r3, r7, #2
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 8001250:	f7ff ff5c 	bl	800110c <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 8001254:	4b2e      	ldr	r3, [pc, #184]	@ (8001310 <userAlarmBeep+0xf0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	4a2c      	ldr	r2, [pc, #176]	@ (8001314 <userAlarmBeep+0xf4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d926      	bls.n	80012b4 <userAlarmBeep+0x94>

			sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 8001266:	4b2c      	ldr	r3, [pc, #176]	@ (8001318 <userAlarmBeep+0xf8>)
 8001268:	6818      	ldr	r0, [r3, #0]
 800126a:	4b2c      	ldr	r3, [pc, #176]	@ (800131c <userAlarmBeep+0xfc>)
 800126c:	6819      	ldr	r1, [r3, #0]
 800126e:	1cfb      	adds	r3, r7, #3
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4a2b      	ldr	r2, [pc, #172]	@ (8001320 <userAlarmBeep+0x100>)
 8001274:	5cd3      	ldrb	r3, [r2, r3]
 8001276:	001a      	movs	r2, r3
 8001278:	f000 fcf6 	bl	8001c68 <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(buzzerPort, buzzerPin);					// Toggle Buzzer
 800127c:	4b29      	ldr	r3, [pc, #164]	@ (8001324 <userAlarmBeep+0x104>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2280      	movs	r2, #128	@ 0x80
 8001282:	0052      	lsls	r2, r2, #1
 8001284:	0011      	movs	r1, r2
 8001286:	0018      	movs	r0, r3
 8001288:	f001 febc 	bl	8003004 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 800128c:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <userAlarmBeep+0xf0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001294:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001296:	1cfb      	adds	r3, r7, #3
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	1e5a      	subs	r2, r3, #1
 800129c:	4193      	sbcs	r3, r2
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2201      	movs	r2, #1
 80012a2:	4053      	eors	r3, r2
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	001a      	movs	r2, r3
 80012a8:	1cfb      	adds	r3, r7, #3
 80012aa:	701a      	strb	r2, [r3, #0]
 80012ac:	781a      	ldrb	r2, [r3, #0]
 80012ae:	2101      	movs	r1, #1
 80012b0:	400a      	ands	r2, r1
 80012b2:	701a      	strb	r2, [r3, #0]

		}


		channelRead = capTouch_readChannels(&capTouch);
 80012b4:	1cbc      	adds	r4, r7, #2
 80012b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001328 <userAlarmBeep+0x108>)
 80012b8:	0018      	movs	r0, r3
 80012ba:	f7ff f8bf 	bl	800043c <capTouch_readChannels>
 80012be:	0003      	movs	r3, r0
 80012c0:	7023      	strb	r3, [r4, #0]

	} while(channelRead == 0x00);
 80012c2:	1cbb      	adds	r3, r7, #2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0c2      	beq.n	8001250 <userAlarmBeep+0x30>

	HAL_TIM_Base_Stop(timerDelay);
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <userAlarmBeep+0xf0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	0018      	movs	r0, r3
 80012d0:	f004 fa48 	bl	8005764 <HAL_TIM_Base_Stop>
	HAL_GPIO_WritePin(buzzerPort, buzzerPin, GPIO_PIN_RESET);
 80012d4:	4b13      	ldr	r3, [pc, #76]	@ (8001324 <userAlarmBeep+0x104>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2280      	movs	r2, #128	@ 0x80
 80012da:	0051      	lsls	r1, r2, #1
 80012dc:	2200      	movs	r2, #0
 80012de:	0018      	movs	r0, r3
 80012e0:	f001 fe73 	bl	8002fca <HAL_GPIO_WritePin>
	updateAndDisplayTime();				// Update to current time and display
 80012e4:	f7ff ff12 	bl	800110c <updateAndDisplayTime>
	sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[1]);	// Toggle 0% to 50% duty cycle
 80012e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <userAlarmBeep+0xf8>)
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <userAlarmBeep+0xfc>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	225a      	movs	r2, #90	@ 0x5a
 80012f2:	0019      	movs	r1, r3
 80012f4:	f000 fcb8 	bl	8001c68 <sevSeg_setIntensity>


	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 80012f8:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <userAlarmBeep+0x10c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2201      	movs	r2, #1
 80012fe:	0011      	movs	r1, r2
 8001300:	0018      	movs	r0, r3
 8001302:	f001 fe7f 	bl	8003004 <HAL_GPIO_TogglePin>

}
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b003      	add	sp, #12
 800130c:	bd90      	pop	{r4, r7, pc}
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	20000024 	.word	0x20000024
 8001314:	00007ffe 	.word	0x00007ffe
 8001318:	20000028 	.word	0x20000028
 800131c:	2000002c 	.word	0x2000002c
 8001320:	08006418 	.word	0x08006418
 8001324:	20000008 	.word	0x20000008
 8001328:	20000220 	.word	0x20000220
 800132c:	20000020 	.word	0x20000020

08001330 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	0002      	movs	r2, r0
 8001338:	1dbb      	adds	r3, r7, #6
 800133a:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 800133c:	2208      	movs	r2, #8
 800133e:	1dbb      	adds	r3, r7, #6
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	4293      	cmp	r3, r2
 8001344:	d106      	bne.n	8001354 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 8001346:	230f      	movs	r3, #15
 8001348:	18fc      	adds	r4, r7, r3
 800134a:	f000 f839 	bl	80013c0 <displayButtonISR>
 800134e:	0003      	movs	r3, r0
 8001350:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8001352:	e031      	b.n	80013b8 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8001354:	2204      	movs	r2, #4
 8001356:	1dbb      	adds	r3, r7, #6
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	4293      	cmp	r3, r2
 800135c:	d106      	bne.n	800136c <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 800135e:	230f      	movs	r3, #15
 8001360:	18fc      	adds	r4, r7, r3
 8001362:	f000 f85d 	bl	8001420 <alarmEnableISR>
 8001366:	0003      	movs	r3, r0
 8001368:	7023      	strb	r3, [r4, #0]
}
 800136a:	e025      	b.n	80013b8 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 800136c:	2380      	movs	r3, #128	@ 0x80
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	1dba      	adds	r2, r7, #6
 8001372:	8812      	ldrh	r2, [r2, #0]
 8001374:	429a      	cmp	r2, r3
 8001376:	d106      	bne.n	8001386 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 8001378:	230f      	movs	r3, #15
 800137a:	18fc      	adds	r4, r7, r3
 800137c:	f000 f884 	bl	8001488 <alarmSetISR>
 8001380:	0003      	movs	r3, r0
 8001382:	7023      	strb	r3, [r4, #0]
}
 8001384:	e018      	b.n	80013b8 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 8001386:	2201      	movs	r2, #1
 8001388:	1dbb      	adds	r3, r7, #6
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	4293      	cmp	r3, r2
 800138e:	d106      	bne.n	800139e <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 8001390:	230f      	movs	r3, #15
 8001392:	18fc      	adds	r4, r7, r3
 8001394:	f000 f954 	bl	8001640 <hourSetISR>
 8001398:	0003      	movs	r3, r0
 800139a:	7023      	strb	r3, [r4, #0]
}
 800139c:	e00c      	b.n	80013b8 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 800139e:	2202      	movs	r2, #2
 80013a0:	1dbb      	adds	r3, r7, #6
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d106      	bne.n	80013b6 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 80013a8:	230f      	movs	r3, #15
 80013aa:	18fc      	adds	r4, r7, r3
 80013ac:	f000 f974 	bl	8001698 <minuteSetISR>
 80013b0:	0003      	movs	r3, r0
 80013b2:	7023      	strb	r3, [r4, #0]
}
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 80013b6:	46c0      	nop			@ (mov r8, r8)
}
 80013b8:	46c0      	nop			@ (mov r8, r8)
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b005      	add	sp, #20
 80013be:	bd90      	pop	{r4, r7, pc}

080013c0 <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 80013c6:	1dfb      	adds	r3, r7, #7
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 80013cc:	f7ff fe9e 	bl	800110c <updateAndDisplayTime>

	sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 80013d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <displayButtonISR+0x50>)
 80013d2:	6818      	ldr	r0, [r3, #0]
 80013d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <displayButtonISR+0x54>)
 80013d6:	6819      	ldr	r1, [r3, #0]
 80013d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <displayButtonISR+0x58>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	001a      	movs	r2, r3
 80013de:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <displayButtonISR+0x5c>)
 80013e0:	5c9b      	ldrb	r3, [r3, r2]
 80013e2:	001a      	movs	r2, r3
 80013e4:	f000 fc40 	bl	8001c68 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <displayButtonISR+0x58>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d903      	bls.n	80013f8 <displayButtonISR+0x38>
		displayToggle = 0;
 80013f0:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <displayButtonISR+0x58>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	e005      	b.n	8001404 <displayButtonISR+0x44>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 80013f8:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <displayButtonISR+0x58>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <displayButtonISR+0x58>)
 8001402:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8001404:	1dfb      	adds	r3, r7, #7
 8001406:	781b      	ldrb	r3, [r3, #0]

}
 8001408:	0018      	movs	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	b002      	add	sp, #8
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000028 	.word	0x20000028
 8001414:	2000002c 	.word	0x2000002c
 8001418:	20000070 	.word	0x20000070
 800141c:	08006418 	.word	0x08006418

08001420 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <alarmEnableISR+0x60>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2201      	movs	r2, #1
 8001432:	4053      	eors	r3, r2
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 800143a:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <alarmEnableISR+0x64>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2280      	movs	r2, #128	@ 0x80
 8001440:	0151      	lsls	r1, r2, #5
 8001442:	2201      	movs	r2, #1
 8001444:	0018      	movs	r0, r3
 8001446:	f001 fdc0 	bl	8002fca <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 800144a:	4b0d      	ldr	r3, [pc, #52]	@ (8001480 <alarmEnableISR+0x60>)
 800144c:	2201      	movs	r2, #1
 800144e:	701a      	strb	r2, [r3, #0]
 8001450:	e010      	b.n	8001474 <alarmEnableISR+0x54>

		//printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
								//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8001452:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <alarmEnableISR+0x60>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00b      	beq.n	8001472 <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 800145a:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <alarmEnableISR+0x64>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2280      	movs	r2, #128	@ 0x80
 8001460:	0151      	lsls	r1, r2, #5
 8001462:	2200      	movs	r2, #0
 8001464:	0018      	movs	r0, r3
 8001466:	f001 fdb0 	bl	8002fca <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 800146a:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <alarmEnableISR+0x60>)
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
 8001470:	e000      	b.n	8001474 <alarmEnableISR+0x54>

		//printf("User alarm disabled.\n\r");
	}
	else {
		__NOP();							//Code should never reach here.
 8001472:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 8001474:	1dfb      	adds	r3, r7, #7
 8001476:	781b      	ldrb	r3, [r3, #0]

}
 8001478:	0018      	movs	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	b002      	add	sp, #8
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000071 	.word	0x20000071
 8001484:	20000004 	.word	0x20000004

08001488 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
	//printf("Enter user alarm set ISR.\n\r");

	//printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
			//userAlarmTime.Minutes, userAlarmTime.Seconds);

	HAL_StatusTypeDef halRet = HAL_OK;
 800148e:	1cbb      	adds	r3, r7, #2
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for switch debounce
	 */

	// First wait for button to deactivate again
	while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_SET);
 8001494:	46c0      	nop			@ (mov r8, r8)
 8001496:	4b64      	ldr	r3, [pc, #400]	@ (8001628 <alarmSetISR+0x1a0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2280      	movs	r2, #128	@ 0x80
 800149c:	0212      	lsls	r2, r2, #8
 800149e:	0011      	movs	r1, r2
 80014a0:	0018      	movs	r0, r3
 80014a2:	f001 fd75 	bl	8002f90 <HAL_GPIO_ReadPin>
 80014a6:	0003      	movs	r3, r0
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d1f4      	bne.n	8001496 <alarmSetISR+0xe>

	// Go through debounce
	HAL_TIM_Base_Stop(timerDelay);
 80014ac:	4b5f      	ldr	r3, [pc, #380]	@ (800162c <alarmSetISR+0x1a4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	0018      	movs	r0, r3
 80014b2:	f004 f957 	bl	8005764 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80014b6:	4b5d      	ldr	r3, [pc, #372]	@ (800162c <alarmSetISR+0x1a4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	0018      	movs	r0, r3
 80014bc:	f004 f906 	bl	80056cc <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80014c0:	4b5a      	ldr	r3, [pc, #360]	@ (800162c <alarmSetISR+0x1a4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c8:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 8));
 80014ca:	4b58      	ldr	r3, [pc, #352]	@ (800162c <alarmSetISR+0x1a4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	1ad2      	subs	r2, r2, r3
 80014d6:	2380      	movs	r3, #128	@ 0x80
 80014d8:	019b      	lsls	r3, r3, #6
 80014da:	429a      	cmp	r2, r3
 80014dc:	d9f5      	bls.n	80014ca <alarmSetISR+0x42>


	/*
	 *  Poll for 1 second to see if the alarm set button is pressed again
	 */
	HAL_TIM_Base_Stop(timerDelay);
 80014de:	4b53      	ldr	r3, [pc, #332]	@ (800162c <alarmSetISR+0x1a4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	0018      	movs	r0, r3
 80014e4:	f004 f93e 	bl	8005764 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80014e8:	4b50      	ldr	r3, [pc, #320]	@ (800162c <alarmSetISR+0x1a4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	0018      	movs	r0, r3
 80014ee:	f004 f8ed 	bl	80056cc <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80014f2:	4b4e      	ldr	r3, [pc, #312]	@ (800162c <alarmSetISR+0x1a4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fa:	607b      	str	r3, [r7, #4]

	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 80014fc:	e00d      	b.n	800151a <alarmSetISR+0x92>

		if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 80014fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001628 <alarmSetISR+0x1a0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2280      	movs	r2, #128	@ 0x80
 8001504:	0212      	lsls	r2, r2, #8
 8001506:	0011      	movs	r1, r2
 8001508:	0018      	movs	r0, r3
 800150a:	f001 fd41 	bl	8002f90 <HAL_GPIO_ReadPin>
 800150e:	1e03      	subs	r3, r0, #0
 8001510:	d103      	bne.n	800151a <alarmSetISR+0x92>
			alarmSetMode = true;
 8001512:	4b47      	ldr	r3, [pc, #284]	@ (8001630 <alarmSetISR+0x1a8>)
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
//			HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
			break;
 8001518:	e009      	b.n	800152e <alarmSetISR+0xa6>
	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 800151a:	4b44      	ldr	r3, [pc, #272]	@ (800162c <alarmSetISR+0x1a4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	1ad2      	subs	r2, r2, r3
 8001526:	2380      	movs	r3, #128	@ 0x80
 8001528:	025b      	lsls	r3, r3, #9
 800152a:	429a      	cmp	r2, r3
 800152c:	d9e7      	bls.n	80014fe <alarmSetISR+0x76>
		}

	}

	// Go through debounce once again
	HAL_TIM_Base_Stop(timerDelay);
 800152e:	4b3f      	ldr	r3, [pc, #252]	@ (800162c <alarmSetISR+0x1a4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	0018      	movs	r0, r3
 8001534:	f004 f916 	bl	8005764 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001538:	4b3c      	ldr	r3, [pc, #240]	@ (800162c <alarmSetISR+0x1a4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	0018      	movs	r0, r3
 800153e:	f004 f8c5 	bl	80056cc <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001542:	4b3a      	ldr	r3, [pc, #232]	@ (800162c <alarmSetISR+0x1a4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154a:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 4));
 800154c:	4b37      	ldr	r3, [pc, #220]	@ (800162c <alarmSetISR+0x1a4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	1ad2      	subs	r2, r2, r3
 8001558:	2380      	movs	r3, #128	@ 0x80
 800155a:	01db      	lsls	r3, r3, #7
 800155c:	429a      	cmp	r2, r3
 800155e:	d9f5      	bls.n	800154c <alarmSetISR+0xc4>
	/*
	 * Then, if we are in alarm set mode, go through the
	 * alarm set process until the button is pressed again
	 */

	HAL_TIM_Base_Stop(timerDelay);
 8001560:	4b32      	ldr	r3, [pc, #200]	@ (800162c <alarmSetISR+0x1a4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	0018      	movs	r0, r3
 8001566:	f004 f8fd 	bl	8005764 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 800156a:	4b30      	ldr	r3, [pc, #192]	@ (800162c <alarmSetISR+0x1a4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	0018      	movs	r0, r3
 8001570:	f004 f8ac 	bl	80056cc <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001574:	4b2d      	ldr	r3, [pc, #180]	@ (800162c <alarmSetISR+0x1a4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157c:	607b      	str	r3, [r7, #4]

	if(alarmSetMode) {
 800157e:	4b2c      	ldr	r3, [pc, #176]	@ (8001630 <alarmSetISR+0x1a8>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d046      	beq.n	8001614 <alarmSetISR+0x18c>

		bool displayBlink = false;
 8001586:	1cfb      	adds	r3, r7, #3
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			updateAndDisplayAlarm();
 800158c:	f7ff fdda 	bl	8001144 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 8001590:	4b26      	ldr	r3, [pc, #152]	@ (800162c <alarmSetISR+0x1a4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	1ad2      	subs	r2, r2, r3
 800159c:	2380      	movs	r3, #128	@ 0x80
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d31e      	bcc.n	80015e2 <alarmSetISR+0x15a>

//				HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

				sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 80015a4:	4b23      	ldr	r3, [pc, #140]	@ (8001634 <alarmSetISR+0x1ac>)
 80015a6:	6818      	ldr	r0, [r3, #0]
 80015a8:	4b23      	ldr	r3, [pc, #140]	@ (8001638 <alarmSetISR+0x1b0>)
 80015aa:	6819      	ldr	r1, [r3, #0]
 80015ac:	1cfb      	adds	r3, r7, #3
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4a22      	ldr	r2, [pc, #136]	@ (800163c <alarmSetISR+0x1b4>)
 80015b2:	5cd3      	ldrb	r3, [r2, r3]
 80015b4:	001a      	movs	r2, r3
 80015b6:	f000 fb57 	bl	8001c68 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 80015ba:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <alarmSetISR+0x1a4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c2:	607b      	str	r3, [r7, #4]
				displayBlink = !displayBlink;
 80015c4:	1cfb      	adds	r3, r7, #3
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	1e5a      	subs	r2, r3, #1
 80015ca:	4193      	sbcs	r3, r2
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2201      	movs	r2, #1
 80015d0:	4053      	eors	r3, r2
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	001a      	movs	r2, r3
 80015d6:	1cfb      	adds	r3, r7, #3
 80015d8:	701a      	strb	r2, [r3, #0]
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	2101      	movs	r1, #1
 80015de:	400a      	ands	r2, r1
 80015e0:	701a      	strb	r2, [r3, #0]

			}

		}while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET);
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <alarmSetISR+0x1a0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2280      	movs	r2, #128	@ 0x80
 80015e8:	0212      	lsls	r2, r2, #8
 80015ea:	0011      	movs	r1, r2
 80015ec:	0018      	movs	r0, r3
 80015ee:	f001 fccf 	bl	8002f90 <HAL_GPIO_ReadPin>
 80015f2:	1e03      	subs	r3, r0, #0
 80015f4:	d1ca      	bne.n	800158c <alarmSetISR+0x104>

//		HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_RESET);

		sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 80015f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <alarmSetISR+0x1ac>)
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <alarmSetISR+0x1b0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	225a      	movs	r2, #90	@ 0x5a
 8001600:	0019      	movs	r1, r3
 8001602:	f000 fb31 	bl	8001c68 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <alarmSetISR+0x1a4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	0018      	movs	r0, r3
 800160c:	f004 f8aa 	bl	8005764 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8001610:	f7ff fd7c 	bl	800110c <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <alarmSetISR+0x1a8>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 800161a:	1cbb      	adds	r3, r7, #2
 800161c:	781b      	ldrb	r3, [r3, #0]

}
 800161e:	0018      	movs	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	b002      	add	sp, #8
 8001624:	bd80      	pop	{r7, pc}
 8001626:	46c0      	nop			@ (mov r8, r8)
 8001628:	20000000 	.word	0x20000000
 800162c:	20000024 	.word	0x20000024
 8001630:	2000021c 	.word	0x2000021c
 8001634:	20000028 	.word	0x20000028
 8001638:	2000002c 	.word	0x2000002c
 800163c:	08006418 	.word	0x08006418

08001640 <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0

//	printf("Entered hour set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);


	HAL_StatusTypeDef halRet = HAL_OK;
 8001646:	1dfb      	adds	r3, r7, #7
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 800164c:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <hourSetISR+0x48>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <hourSetISR+0x1a>

		alarmHourInc();
 8001654:	f000 f84c 	bl	80016f0 <alarmHourInc>
 8001658:	e00f      	b.n	800167a <hourSetISR+0x3a>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 800165a:	f000 f877 	bl	800174c <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 800165e:	490b      	ldr	r1, [pc, #44]	@ (800168c <hourSetISR+0x4c>)
 8001660:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <hourSetISR+0x50>)
 8001662:	2200      	movs	r2, #0
 8001664:	0018      	movs	r0, r3
 8001666:	f003 fa6f 	bl	8004b48 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 800166a:	f7ff fd4f 	bl	800110c <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 800166e:	4a09      	ldr	r2, [pc, #36]	@ (8001694 <hourSetISR+0x54>)
 8001670:	4906      	ldr	r1, [pc, #24]	@ (800168c <hourSetISR+0x4c>)
 8001672:	4b07      	ldr	r3, [pc, #28]	@ (8001690 <hourSetISR+0x50>)
 8001674:	0018      	movs	r0, r3
 8001676:	f7ff f967 	bl	8000948 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 800167a:	1dfb      	adds	r3, r7, #7
 800167c:	781b      	ldrb	r3, [r3, #0]

}
 800167e:	0018      	movs	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	b002      	add	sp, #8
 8001684:	bd80      	pop	{r7, pc}
 8001686:	46c0      	nop			@ (mov r8, r8)
 8001688:	2000021c 	.word	0x2000021c
 800168c:	200001f0 	.word	0x200001f0
 8001690:	2000012c 	.word	0x2000012c
 8001694:	20000204 	.word	0x20000204

08001698 <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0

//	printf("Entered minute set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

	HAL_StatusTypeDef halRet = HAL_OK;
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80016a4:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <minuteSetISR+0x48>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <minuteSetISR+0x1a>

		alarmMinuteInc();
 80016ac:	f000 f888 	bl	80017c0 <alarmMinuteInc>
 80016b0:	e00f      	b.n	80016d2 <minuteSetISR+0x3a>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 80016b2:	f000 f8a3 	bl	80017fc <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80016b6:	490b      	ldr	r1, [pc, #44]	@ (80016e4 <minuteSetISR+0x4c>)
 80016b8:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <minuteSetISR+0x50>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	0018      	movs	r0, r3
 80016be:	f003 fa43 	bl	8004b48 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80016c2:	f7ff fd23 	bl	800110c <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80016c6:	4a09      	ldr	r2, [pc, #36]	@ (80016ec <minuteSetISR+0x54>)
 80016c8:	4906      	ldr	r1, [pc, #24]	@ (80016e4 <minuteSetISR+0x4c>)
 80016ca:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <minuteSetISR+0x50>)
 80016cc:	0018      	movs	r0, r3
 80016ce:	f7ff f93b 	bl	8000948 <getRTCTime>

		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 80016d2:	1dfb      	adds	r3, r7, #7
 80016d4:	781b      	ldrb	r3, [r3, #0]
}
 80016d6:	0018      	movs	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	b002      	add	sp, #8
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	46c0      	nop			@ (mov r8, r8)
 80016e0:	2000021c 	.word	0x2000021c
 80016e4:	200001f0 	.word	0x200001f0
 80016e8:	2000012c 	.word	0x2000012c
 80016ec:	20000204 	.word	0x20000204

080016f0 <alarmHourInc>:

void alarmHourInc(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 80016f4:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <alarmHourInc+0x58>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b0b      	cmp	r3, #11
 80016fa:	d903      	bls.n	8001704 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 80016fc:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <alarmHourInc+0x58>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 8001702:	e01e      	b.n	8001742 <alarmHourInc+0x52>
	else if(userAlarmTime.Hours == 11) {
 8001704:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <alarmHourInc+0x58>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b0b      	cmp	r3, #11
 800170a:	d10e      	bne.n	800172a <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800170c:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <alarmHourInc+0x58>)
 800170e:	78db      	ldrb	r3, [r3, #3]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d103      	bne.n	800171c <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001714:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <alarmHourInc+0x58>)
 8001716:	2201      	movs	r2, #1
 8001718:	70da      	strb	r2, [r3, #3]
 800171a:	e002      	b.n	8001722 <alarmHourInc+0x32>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800171c:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <alarmHourInc+0x58>)
 800171e:	2200      	movs	r2, #0
 8001720:	70da      	strb	r2, [r3, #3]
		userAlarmTime.Hours = 12;
 8001722:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <alarmHourInc+0x58>)
 8001724:	220c      	movs	r2, #12
 8001726:	701a      	strb	r2, [r3, #0]
}
 8001728:	e00b      	b.n	8001742 <alarmHourInc+0x52>
	else if(userAlarmTime.Hours < 11) {
 800172a:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <alarmHourInc+0x58>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b0a      	cmp	r3, #10
 8001730:	d806      	bhi.n	8001740 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001732:	4b05      	ldr	r3, [pc, #20]	@ (8001748 <alarmHourInc+0x58>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4b03      	ldr	r3, [pc, #12]	@ (8001748 <alarmHourInc+0x58>)
 800173c:	701a      	strb	r2, [r3, #0]
}
 800173e:	e000      	b.n	8001742 <alarmHourInc+0x52>
		__NOP();
 8001740:	46c0      	nop			@ (mov r8, r8)
}
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000208 	.word	0x20000208

0800174c <currHourInc>:

void currHourInc(void) {
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001750:	4a17      	ldr	r2, [pc, #92]	@ (80017b0 <currHourInc+0x64>)
 8001752:	4918      	ldr	r1, [pc, #96]	@ (80017b4 <currHourInc+0x68>)
 8001754:	4b18      	ldr	r3, [pc, #96]	@ (80017b8 <currHourInc+0x6c>)
 8001756:	0018      	movs	r0, r3
 8001758:	f7ff f8f6 	bl	8000948 <getRTCTime>

	if(currTime.Hours >= 12) {
 800175c:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <currHourInc+0x68>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b0b      	cmp	r3, #11
 8001762:	d903      	bls.n	800176c <currHourInc+0x20>
		currTime.Hours = 1;
 8001764:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <currHourInc+0x68>)
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 800176a:	e01e      	b.n	80017aa <currHourInc+0x5e>
	else if(currTime.Hours == 11) {
 800176c:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <currHourInc+0x68>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b0b      	cmp	r3, #11
 8001772:	d10e      	bne.n	8001792 <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001774:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <currHourInc+0x68>)
 8001776:	78db      	ldrb	r3, [r3, #3]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d103      	bne.n	8001784 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800177c:	4b0d      	ldr	r3, [pc, #52]	@ (80017b4 <currHourInc+0x68>)
 800177e:	2201      	movs	r2, #1
 8001780:	70da      	strb	r2, [r3, #3]
 8001782:	e002      	b.n	800178a <currHourInc+0x3e>
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001784:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <currHourInc+0x68>)
 8001786:	2200      	movs	r2, #0
 8001788:	70da      	strb	r2, [r3, #3]
		currTime.Hours = 12;
 800178a:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <currHourInc+0x68>)
 800178c:	220c      	movs	r2, #12
 800178e:	701a      	strb	r2, [r3, #0]
}
 8001790:	e00b      	b.n	80017aa <currHourInc+0x5e>
	else if(userAlarmTime.Hours < 11) {
 8001792:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <currHourInc+0x70>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b0a      	cmp	r3, #10
 8001798:	d806      	bhi.n	80017a8 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 800179a:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <currHourInc+0x68>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <currHourInc+0x68>)
 80017a4:	701a      	strb	r2, [r3, #0]
}
 80017a6:	e000      	b.n	80017aa <currHourInc+0x5e>
		__NOP();
 80017a8:	46c0      	nop			@ (mov r8, r8)
}
 80017aa:	46c0      	nop			@ (mov r8, r8)
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000204 	.word	0x20000204
 80017b4:	200001f0 	.word	0x200001f0
 80017b8:	2000012c 	.word	0x2000012c
 80017bc:	20000208 	.word	0x20000208

080017c0 <alarmMinuteInc>:

void alarmMinuteInc(void) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 80017c4:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <alarmMinuteInc+0x38>)
 80017c6:	785b      	ldrb	r3, [r3, #1]
 80017c8:	2b3a      	cmp	r3, #58	@ 0x3a
 80017ca:	d905      	bls.n	80017d8 <alarmMinuteInc+0x18>
		alarmHourInc();
 80017cc:	f7ff ff90 	bl	80016f0 <alarmHourInc>
		userAlarmTime.Minutes = 0;
 80017d0:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <alarmMinuteInc+0x38>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 80017d6:	e00b      	b.n	80017f0 <alarmMinuteInc+0x30>
	else if(userAlarmTime.Minutes < 59) {
 80017d8:	4b07      	ldr	r3, [pc, #28]	@ (80017f8 <alarmMinuteInc+0x38>)
 80017da:	785b      	ldrb	r3, [r3, #1]
 80017dc:	2b3a      	cmp	r3, #58	@ 0x3a
 80017de:	d806      	bhi.n	80017ee <alarmMinuteInc+0x2e>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 80017e0:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <alarmMinuteInc+0x38>)
 80017e2:	785b      	ldrb	r3, [r3, #1]
 80017e4:	3301      	adds	r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <alarmMinuteInc+0x38>)
 80017ea:	705a      	strb	r2, [r3, #1]
}
 80017ec:	e000      	b.n	80017f0 <alarmMinuteInc+0x30>
		__NOP();
 80017ee:	46c0      	nop			@ (mov r8, r8)
}
 80017f0:	46c0      	nop			@ (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	46c0      	nop			@ (mov r8, r8)
 80017f8:	20000208 	.word	0x20000208

080017fc <currMinuteInc>:

void currMinuteInc(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001800:	4a0f      	ldr	r2, [pc, #60]	@ (8001840 <currMinuteInc+0x44>)
 8001802:	4910      	ldr	r1, [pc, #64]	@ (8001844 <currMinuteInc+0x48>)
 8001804:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <currMinuteInc+0x4c>)
 8001806:	0018      	movs	r0, r3
 8001808:	f7ff f89e 	bl	8000948 <getRTCTime>

	if(currTime.Minutes >= 59) {
 800180c:	4b0d      	ldr	r3, [pc, #52]	@ (8001844 <currMinuteInc+0x48>)
 800180e:	785b      	ldrb	r3, [r3, #1]
 8001810:	2b3a      	cmp	r3, #58	@ 0x3a
 8001812:	d905      	bls.n	8001820 <currMinuteInc+0x24>
		currHourInc();
 8001814:	f7ff ff9a 	bl	800174c <currHourInc>
		currTime.Minutes = 0;
 8001818:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <currMinuteInc+0x48>)
 800181a:	2200      	movs	r2, #0
 800181c:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 800181e:	e00b      	b.n	8001838 <currMinuteInc+0x3c>
	else if(currTime.Minutes < 59) {
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <currMinuteInc+0x48>)
 8001822:	785b      	ldrb	r3, [r3, #1]
 8001824:	2b3a      	cmp	r3, #58	@ 0x3a
 8001826:	d806      	bhi.n	8001836 <currMinuteInc+0x3a>
		currTime.Minutes = currTime.Minutes + 1;
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <currMinuteInc+0x48>)
 800182a:	785b      	ldrb	r3, [r3, #1]
 800182c:	3301      	adds	r3, #1
 800182e:	b2da      	uxtb	r2, r3
 8001830:	4b04      	ldr	r3, [pc, #16]	@ (8001844 <currMinuteInc+0x48>)
 8001832:	705a      	strb	r2, [r3, #1]
}
 8001834:	e000      	b.n	8001838 <currMinuteInc+0x3c>
		__NOP();
 8001836:	46c0      	nop			@ (mov r8, r8)
}
 8001838:	46c0      	nop			@ (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			@ (mov r8, r8)
 8001840:	20000204 	.word	0x20000204
 8001844:	200001f0 	.word	0x200001f0
 8001848:	2000012c 	.word	0x2000012c

0800184c <dispError>:

void dispError(void) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8001852:	4b1c      	ldr	r3, [pc, #112]	@ (80018c4 <dispError+0x78>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	0018      	movs	r0, r3
 8001858:	f003 ff84 	bl	8005764 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 800185c:	4b19      	ldr	r3, [pc, #100]	@ (80018c4 <dispError+0x78>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	0018      	movs	r0, r3
 8001862:	f003 ff33 	bl	80056cc <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001866:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <dispError+0x78>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186e:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001870:	1cfb      	adds	r3, r7, #3
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001876:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <dispError+0x78>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	4a11      	ldr	r2, [pc, #68]	@ (80018c8 <dispError+0x7c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d9f6      	bls.n	8001876 <dispError+0x2a>

			HAL_GPIO_TogglePin(alarmLEDPort, alarmLEDPin);
 8001888:	4b10      	ldr	r3, [pc, #64]	@ (80018cc <dispError+0x80>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2280      	movs	r2, #128	@ 0x80
 800188e:	0152      	lsls	r2, r2, #5
 8001890:	0011      	movs	r1, r2
 8001892:	0018      	movs	r0, r3
 8001894:	f001 fbb6 	bl	8003004 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001898:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <dispError+0x78>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a0:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80018a2:	1cfb      	adds	r3, r7, #3
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	1e5a      	subs	r2, r3, #1
 80018a8:	4193      	sbcs	r3, r2
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2201      	movs	r2, #1
 80018ae:	4053      	eors	r3, r2
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	001a      	movs	r2, r3
 80018b4:	1cfb      	adds	r3, r7, #3
 80018b6:	701a      	strb	r2, [r3, #0]
 80018b8:	781a      	ldrb	r2, [r3, #0]
 80018ba:	2101      	movs	r1, #1
 80018bc:	400a      	ands	r2, r1
 80018be:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 80018c0:	e7d9      	b.n	8001876 <dispError+0x2a>
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	20000024 	.word	0x20000024
 80018c8:	00003ffe 	.word	0x00003ffe
 80018cc:	20000004 	.word	0x20000004

080018d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d4:	b672      	cpsid	i
}
 80018d6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d8:	46c0      	nop			@ (mov r8, r8)
 80018da:	e7fd      	b.n	80018d8 <Error_Handler+0x8>

080018dc <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM,
					uint32_t tim_PWM_CHANNEL) {
 80018dc:	b5b0      	push	{r4, r5, r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	0005      	movs	r5, r0
 80018e4:	000c      	movs	r4, r1
 80018e6:	0010      	movs	r0, r2
 80018e8:	0019      	movs	r1, r3
 80018ea:	1dbb      	adds	r3, r7, #6
 80018ec:	1c2a      	adds	r2, r5, #0
 80018ee:	801a      	strh	r2, [r3, #0]
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	1c22      	adds	r2, r4, #0
 80018f4:	801a      	strh	r2, [r3, #0]
 80018f6:	1cbb      	adds	r3, r7, #2
 80018f8:	1c02      	adds	r2, r0, #0
 80018fa:	801a      	strh	r2, [r3, #0]
 80018fc:	003b      	movs	r3, r7
 80018fe:	1c0a      	adds	r2, r1, #0
 8001900:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001902:	4b78      	ldr	r3, [pc, #480]	@ (8001ae4 <sevSeg_Init+0x208>)
 8001904:	1dba      	adds	r2, r7, #6
 8001906:	8812      	ldrh	r2, [r2, #0]
 8001908:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 800190a:	4b77      	ldr	r3, [pc, #476]	@ (8001ae8 <sevSeg_Init+0x20c>)
 800190c:	1d3a      	adds	r2, r7, #4
 800190e:	8812      	ldrh	r2, [r2, #0]
 8001910:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001912:	4b76      	ldr	r3, [pc, #472]	@ (8001aec <sevSeg_Init+0x210>)
 8001914:	1cba      	adds	r2, r7, #2
 8001916:	8812      	ldrh	r2, [r2, #0]
 8001918:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 800191a:	4b75      	ldr	r3, [pc, #468]	@ (8001af0 <sevSeg_Init+0x214>)
 800191c:	003a      	movs	r2, r7
 800191e:	8812      	ldrh	r2, [r2, #0]
 8001920:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001922:	4a74      	ldr	r2, [pc, #464]	@ (8001af4 <sevSeg_Init+0x218>)
 8001924:	2330      	movs	r3, #48	@ 0x30
 8001926:	18fb      	adds	r3, r7, r3
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	8013      	strh	r3, [r2, #0]

	for(int i = 0; i < 5; i++) {
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	e00b      	b.n	800194a <sevSeg_Init+0x6e>
		portArray[i] = GPIOPortArray[i];
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001938:	18d3      	adds	r3, r2, r3
 800193a:	6819      	ldr	r1, [r3, #0]
 800193c:	4b6e      	ldr	r3, [pc, #440]	@ (8001af8 <sevSeg_Init+0x21c>)
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	0092      	lsls	r2, r2, #2
 8001942:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	3301      	adds	r3, #1
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	2b04      	cmp	r3, #4
 800194e:	ddf0      	ble.n	8001932 <sevSeg_Init+0x56>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001950:	4b69      	ldr	r3, [pc, #420]	@ (8001af8 <sevSeg_Init+0x21c>)
 8001952:	6918      	ldr	r0, [r3, #16]
 8001954:	4b67      	ldr	r3, [pc, #412]	@ (8001af4 <sevSeg_Init+0x218>)
 8001956:	8819      	ldrh	r1, [r3, #0]
 8001958:	4b68      	ldr	r3, [pc, #416]	@ (8001afc <sevSeg_Init+0x220>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	001a      	movs	r2, r3
 800195e:	f001 fb34 	bl	8002fca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001962:	4b65      	ldr	r3, [pc, #404]	@ (8001af8 <sevSeg_Init+0x21c>)
 8001964:	6918      	ldr	r0, [r3, #16]
 8001966:	4b63      	ldr	r3, [pc, #396]	@ (8001af4 <sevSeg_Init+0x218>)
 8001968:	8819      	ldrh	r1, [r3, #0]
 800196a:	4b64      	ldr	r3, [pc, #400]	@ (8001afc <sevSeg_Init+0x220>)
 800196c:	785b      	ldrb	r3, [r3, #1]
 800196e:	001a      	movs	r2, r3
 8001970:	f001 fb2b 	bl	8002fca <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001974:	4b60      	ldr	r3, [pc, #384]	@ (8001af8 <sevSeg_Init+0x21c>)
 8001976:	6898      	ldr	r0, [r3, #8]
 8001978:	4b5c      	ldr	r3, [pc, #368]	@ (8001aec <sevSeg_Init+0x210>)
 800197a:	8819      	ldrh	r1, [r3, #0]
 800197c:	4b5f      	ldr	r3, [pc, #380]	@ (8001afc <sevSeg_Init+0x220>)
 800197e:	785b      	ldrb	r3, [r3, #1]
 8001980:	001a      	movs	r2, r3
 8001982:	f001 fb22 	bl	8002fca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001986:	4b5c      	ldr	r3, [pc, #368]	@ (8001af8 <sevSeg_Init+0x21c>)
 8001988:	6898      	ldr	r0, [r3, #8]
 800198a:	4b58      	ldr	r3, [pc, #352]	@ (8001aec <sevSeg_Init+0x210>)
 800198c:	8819      	ldrh	r1, [r3, #0]
 800198e:	4b5b      	ldr	r3, [pc, #364]	@ (8001afc <sevSeg_Init+0x220>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	001a      	movs	r2, r3
 8001994:	f001 fb19 	bl	8002fca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8001998:	4b57      	ldr	r3, [pc, #348]	@ (8001af8 <sevSeg_Init+0x21c>)
 800199a:	68d8      	ldr	r0, [r3, #12]
 800199c:	4b54      	ldr	r3, [pc, #336]	@ (8001af0 <sevSeg_Init+0x214>)
 800199e:	8819      	ldrh	r1, [r3, #0]
 80019a0:	4b56      	ldr	r3, [pc, #344]	@ (8001afc <sevSeg_Init+0x220>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	001a      	movs	r2, r3
 80019a6:	f001 fb10 	bl	8002fca <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(htim_PWM, tim_PWM_CHANNEL, 50);
 80019aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80019ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019ae:	2232      	movs	r2, #50	@ 0x32
 80019b0:	0018      	movs	r0, r3
 80019b2:	f000 f959 	bl	8001c68 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 80019b6:	2308      	movs	r3, #8
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	4a51      	ldr	r2, [pc, #324]	@ (8001b00 <sevSeg_Init+0x224>)
 80019bc:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	e038      	b.n	8001a36 <sevSeg_Init+0x15a>

		sendByte = hofSymb[i];
 80019c4:	231b      	movs	r3, #27
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	2208      	movs	r2, #8
 80019ca:	18b9      	adds	r1, r7, r2
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	188a      	adds	r2, r1, r2
 80019d0:	7812      	ldrb	r2, [r2, #0]
 80019d2:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	e027      	b.n	8001a2a <sevSeg_Init+0x14e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 80019da:	4b47      	ldr	r3, [pc, #284]	@ (8001af8 <sevSeg_Init+0x21c>)
 80019dc:	6818      	ldr	r0, [r3, #0]
 80019de:	4b41      	ldr	r3, [pc, #260]	@ (8001ae4 <sevSeg_Init+0x208>)
 80019e0:	8819      	ldrh	r1, [r3, #0]
 80019e2:	241b      	movs	r4, #27
 80019e4:	193b      	adds	r3, r7, r4
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2201      	movs	r2, #1
 80019ea:	4013      	ands	r3, r2
 80019ec:	4a43      	ldr	r2, [pc, #268]	@ (8001afc <sevSeg_Init+0x220>)
 80019ee:	5cd3      	ldrb	r3, [r2, r3]
 80019f0:	001a      	movs	r2, r3
 80019f2:	f001 faea 	bl	8002fca <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 80019f6:	4b40      	ldr	r3, [pc, #256]	@ (8001af8 <sevSeg_Init+0x21c>)
 80019f8:	6858      	ldr	r0, [r3, #4]
 80019fa:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae8 <sevSeg_Init+0x20c>)
 80019fc:	8819      	ldrh	r1, [r3, #0]
 80019fe:	4b3f      	ldr	r3, [pc, #252]	@ (8001afc <sevSeg_Init+0x220>)
 8001a00:	785b      	ldrb	r3, [r3, #1]
 8001a02:	001a      	movs	r2, r3
 8001a04:	f001 fae1 	bl	8002fca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001a08:	4b3b      	ldr	r3, [pc, #236]	@ (8001af8 <sevSeg_Init+0x21c>)
 8001a0a:	6858      	ldr	r0, [r3, #4]
 8001a0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ae8 <sevSeg_Init+0x20c>)
 8001a0e:	8819      	ldrh	r1, [r3, #0]
 8001a10:	4b3a      	ldr	r3, [pc, #232]	@ (8001afc <sevSeg_Init+0x220>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	001a      	movs	r2, r3
 8001a16:	f001 fad8 	bl	8002fca <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001a1a:	193b      	adds	r3, r7, r4
 8001a1c:	193a      	adds	r2, r7, r4
 8001a1e:	7812      	ldrb	r2, [r2, #0]
 8001a20:	0852      	lsrs	r2, r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	3301      	adds	r3, #1
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	2b07      	cmp	r3, #7
 8001a2e:	ddd4      	ble.n	80019da <sevSeg_Init+0xfe>
	for(int i = 0; i <= 3; i++) {
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3301      	adds	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	ddc3      	ble.n	80019c4 <sevSeg_Init+0xe8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001af8 <sevSeg_Init+0x21c>)
 8001a3e:	6898      	ldr	r0, [r3, #8]
 8001a40:	4b2a      	ldr	r3, [pc, #168]	@ (8001aec <sevSeg_Init+0x210>)
 8001a42:	8819      	ldrh	r1, [r3, #0]
 8001a44:	4b2d      	ldr	r3, [pc, #180]	@ (8001afc <sevSeg_Init+0x220>)
 8001a46:	785b      	ldrb	r3, [r3, #1]
 8001a48:	001a      	movs	r2, r3
 8001a4a:	f001 fabe 	bl	8002fca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001af8 <sevSeg_Init+0x21c>)
 8001a50:	6898      	ldr	r0, [r3, #8]
 8001a52:	4b26      	ldr	r3, [pc, #152]	@ (8001aec <sevSeg_Init+0x210>)
 8001a54:	8819      	ldrh	r1, [r3, #0]
 8001a56:	4b29      	ldr	r3, [pc, #164]	@ (8001afc <sevSeg_Init+0x220>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	001a      	movs	r2, r3
 8001a5c:	f001 fab5 	bl	8002fca <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8001a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a62:	0018      	movs	r0, r3
 8001a64:	f003 fe7e 	bl	8005764 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8001a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f003 fe2e 	bl	80056cc <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8001a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a76:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8001a78:	46c0      	nop			@ (mov r8, r8)
 8001a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1ad2      	subs	r2, r2, r3
 8001a84:	2380      	movs	r3, #128	@ 0x80
 8001a86:	01db      	lsls	r3, r3, #7
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d3f6      	bcc.n	8001a7a <sevSeg_Init+0x19e>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8001a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f003 fe68 	bl	8005764 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001a94:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <sevSeg_Init+0x21c>)
 8001a96:	6918      	ldr	r0, [r3, #16]
 8001a98:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <sevSeg_Init+0x218>)
 8001a9a:	8819      	ldrh	r1, [r3, #0]
 8001a9c:	4b17      	ldr	r3, [pc, #92]	@ (8001afc <sevSeg_Init+0x220>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	001a      	movs	r2, r3
 8001aa2:	f001 fa92 	bl	8002fca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001aa6:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <sevSeg_Init+0x21c>)
 8001aa8:	6918      	ldr	r0, [r3, #16]
 8001aaa:	4b12      	ldr	r3, [pc, #72]	@ (8001af4 <sevSeg_Init+0x218>)
 8001aac:	8819      	ldrh	r1, [r3, #0]
 8001aae:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <sevSeg_Init+0x220>)
 8001ab0:	785b      	ldrb	r3, [r3, #1]
 8001ab2:	001a      	movs	r2, r3
 8001ab4:	f001 fa89 	bl	8002fca <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <sevSeg_Init+0x21c>)
 8001aba:	6898      	ldr	r0, [r3, #8]
 8001abc:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <sevSeg_Init+0x210>)
 8001abe:	8819      	ldrh	r1, [r3, #0]
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <sevSeg_Init+0x220>)
 8001ac2:	785b      	ldrb	r3, [r3, #1]
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	f001 fa80 	bl	8002fca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001aca:	4b0b      	ldr	r3, [pc, #44]	@ (8001af8 <sevSeg_Init+0x21c>)
 8001acc:	6898      	ldr	r0, [r3, #8]
 8001ace:	4b07      	ldr	r3, [pc, #28]	@ (8001aec <sevSeg_Init+0x210>)
 8001ad0:	8819      	ldrh	r1, [r3, #0]
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8001afc <sevSeg_Init+0x220>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	001a      	movs	r2, r3
 8001ad8:	f001 fa77 	bl	8002fca <HAL_GPIO_WritePin>

}
 8001adc:	46c0      	nop			@ (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b008      	add	sp, #32
 8001ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae4:	20000228 	.word	0x20000228
 8001ae8:	2000022a 	.word	0x2000022a
 8001aec:	2000022c 	.word	0x2000022c
 8001af0:	2000022e 	.word	0x2000022e
 8001af4:	20000230 	.word	0x20000230
 8001af8:	20000030 	.word	0x20000030
 8001afc:	20000044 	.word	0x20000044
 8001b00:	471d3700 	.word	0x471d3700

08001b04 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 8001b04:	b590      	push	{r4, r7, lr}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	210a      	movs	r1, #10
 8001b12:	0018      	movs	r0, r3
 8001b14:	f7fe faf6 	bl	8000104 <__udivsi3>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	2408      	movs	r4, #8
 8001b1e:	193b      	adds	r3, r7, r4
 8001b20:	701a      	strb	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	210a      	movs	r1, #10
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f7fe fb71 	bl	8000210 <__aeabi_uidivmod>
 8001b2e:	000b      	movs	r3, r1
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	193b      	adds	r3, r7, r4
 8001b34:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001b3a:	210a      	movs	r1, #10
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f7fe fae1 	bl	8000104 <__udivsi3>
 8001b42:	0003      	movs	r3, r0
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	193b      	adds	r3, r7, r4
 8001b48:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001b4e:	210a      	movs	r1, #10
 8001b50:	0018      	movs	r0, r3
 8001b52:	f7fe fb5d 	bl	8000210 <__aeabi_uidivmod>
 8001b56:	000b      	movs	r3, r1
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	193b      	adds	r3, r7, r4
 8001b5c:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 8001b5e:	2116      	movs	r1, #22
 8001b60:	187b      	adds	r3, r7, r1
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	78db      	ldrb	r3, [r3, #3]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d102      	bne.n	8001b74 <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 8001b6e:	187b      	adds	r3, r7, r1
 8001b70:	2202      	movs	r2, #2
 8001b72:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	e04f      	b.n	8001c1a <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 8001b7a:	2308      	movs	r3, #8
 8001b7c:	18fa      	adds	r2, r7, r3
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	18d3      	adds	r3, r2, r3
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	0019      	movs	r1, r3
 8001b86:	2417      	movs	r4, #23
 8001b88:	193b      	adds	r3, r7, r4
 8001b8a:	4a30      	ldr	r2, [pc, #192]	@ (8001c4c <sevSeg_updateDigits+0x148>)
 8001b8c:	5c52      	ldrb	r2, [r2, r1]
 8001b8e:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d110      	bne.n	8001bb8 <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	210a      	movs	r1, #10
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7fe fab1 	bl	8000104 <__udivsi3>
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	2316      	movs	r3, #22
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	18d2      	adds	r2, r2, r3
 8001bb0:	193b      	adds	r3, r7, r4
 8001bb2:	4927      	ldr	r1, [pc, #156]	@ (8001c50 <sevSeg_updateDigits+0x14c>)
 8001bb4:	5c8a      	ldrb	r2, [r1, r2]
 8001bb6:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	e027      	b.n	8001c0e <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001bbe:	4b25      	ldr	r3, [pc, #148]	@ (8001c54 <sevSeg_updateDigits+0x150>)
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	4b25      	ldr	r3, [pc, #148]	@ (8001c58 <sevSeg_updateDigits+0x154>)
 8001bc4:	8819      	ldrh	r1, [r3, #0]
 8001bc6:	2417      	movs	r4, #23
 8001bc8:	193b      	adds	r3, r7, r4
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4013      	ands	r3, r2
 8001bd0:	4a22      	ldr	r2, [pc, #136]	@ (8001c5c <sevSeg_updateDigits+0x158>)
 8001bd2:	5cd3      	ldrb	r3, [r2, r3]
 8001bd4:	001a      	movs	r2, r3
 8001bd6:	f001 f9f8 	bl	8002fca <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001bda:	4b1e      	ldr	r3, [pc, #120]	@ (8001c54 <sevSeg_updateDigits+0x150>)
 8001bdc:	6858      	ldr	r0, [r3, #4]
 8001bde:	4b20      	ldr	r3, [pc, #128]	@ (8001c60 <sevSeg_updateDigits+0x15c>)
 8001be0:	8819      	ldrh	r1, [r3, #0]
 8001be2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c5c <sevSeg_updateDigits+0x158>)
 8001be4:	785b      	ldrb	r3, [r3, #1]
 8001be6:	001a      	movs	r2, r3
 8001be8:	f001 f9ef 	bl	8002fca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001bec:	4b19      	ldr	r3, [pc, #100]	@ (8001c54 <sevSeg_updateDigits+0x150>)
 8001bee:	6858      	ldr	r0, [r3, #4]
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c60 <sevSeg_updateDigits+0x15c>)
 8001bf2:	8819      	ldrh	r1, [r3, #0]
 8001bf4:	4b19      	ldr	r3, [pc, #100]	@ (8001c5c <sevSeg_updateDigits+0x158>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	001a      	movs	r2, r3
 8001bfa:	f001 f9e6 	bl	8002fca <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001bfe:	193b      	adds	r3, r7, r4
 8001c00:	193a      	adds	r2, r7, r4
 8001c02:	7812      	ldrb	r2, [r2, #0]
 8001c04:	0852      	lsrs	r2, r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b07      	cmp	r3, #7
 8001c12:	ddd4      	ble.n	8001bbe <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	3301      	adds	r3, #1
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	ddac      	ble.n	8001b7a <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001c20:	4b0c      	ldr	r3, [pc, #48]	@ (8001c54 <sevSeg_updateDigits+0x150>)
 8001c22:	6898      	ldr	r0, [r3, #8]
 8001c24:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <sevSeg_updateDigits+0x160>)
 8001c26:	8819      	ldrh	r1, [r3, #0]
 8001c28:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <sevSeg_updateDigits+0x158>)
 8001c2a:	785b      	ldrb	r3, [r3, #1]
 8001c2c:	001a      	movs	r2, r3
 8001c2e:	f001 f9cc 	bl	8002fca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001c32:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <sevSeg_updateDigits+0x150>)
 8001c34:	6898      	ldr	r0, [r3, #8]
 8001c36:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <sevSeg_updateDigits+0x160>)
 8001c38:	8819      	ldrh	r1, [r3, #0]
 8001c3a:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <sevSeg_updateDigits+0x158>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	001a      	movs	r2, r3
 8001c40:	f001 f9c3 	bl	8002fca <HAL_GPIO_WritePin>

	return;
 8001c44:	46c0      	nop			@ (mov r8, r8)

}
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b007      	add	sp, #28
 8001c4a:	bd90      	pop	{r4, r7, pc}
 8001c4c:	0800641c 	.word	0x0800641c
 8001c50:	08006428 	.word	0x08006428
 8001c54:	20000030 	.word	0x20000030
 8001c58:	20000228 	.word	0x20000228
 8001c5c:	20000044 	.word	0x20000044
 8001c60:	2000022a 	.word	0x2000022a
 8001c64:	2000022c 	.word	0x2000022c

08001c68 <sevSeg_setIntensity>:

void sevSeg_setIntensity(TIM_HandleTypeDef *htim_PWM, uint32_t tim_PWM_CHANNEL, uint16_t dutyCycle) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	1dbb      	adds	r3, r7, #6
 8001c74:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(htim_PWM, tim_PWM_CHANNEL, dutyCycle);
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d105      	bne.n	8001c88 <sevSeg_setIntensity+0x20>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	1dba      	adds	r2, r7, #6
 8001c82:	8812      	ldrh	r2, [r2, #0]
 8001c84:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c86:	e028      	b.n	8001cda <sevSeg_setIntensity+0x72>
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d105      	bne.n	8001c9a <sevSeg_setIntensity+0x32>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	1dbb      	adds	r3, r7, #6
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c98:	e01f      	b.n	8001cda <sevSeg_setIntensity+0x72>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d105      	bne.n	8001cac <sevSeg_setIntensity+0x44>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	1dbb      	adds	r3, r7, #6
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001caa:	e016      	b.n	8001cda <sevSeg_setIntensity+0x72>
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	d105      	bne.n	8001cbe <sevSeg_setIntensity+0x56>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	1dbb      	adds	r3, r7, #6
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cbc:	e00d      	b.n	8001cda <sevSeg_setIntensity+0x72>
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b10      	cmp	r3, #16
 8001cc2:	d105      	bne.n	8001cd0 <sevSeg_setIntensity+0x68>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	1dbb      	adds	r3, r7, #6
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cce:	e004      	b.n	8001cda <sevSeg_setIntensity+0x72>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	1dbb      	adds	r3, r7, #6
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(htim_PWM, tim_PWM_CHANNEL);
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	0011      	movs	r1, r2
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f003 fdbd 	bl	8005860 <HAL_TIM_PWM_Start>

}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b004      	add	sp, #16
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf6:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <HAL_MspInit+0x54>)
 8001cf8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cfa:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <HAL_MspInit+0x54>)
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <HAL_MspInit+0x54>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	2201      	movs	r2, #1
 8001d08:	4013      	ands	r3, r2
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d44 <HAL_MspInit+0x54>)
 8001d10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d12:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <HAL_MspInit+0x54>)
 8001d14:	2180      	movs	r1, #128	@ 0x80
 8001d16:	0549      	lsls	r1, r1, #21
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d1c:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <HAL_MspInit+0x54>)
 8001d1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d20:	2380      	movs	r3, #128	@ 0x80
 8001d22:	055b      	lsls	r3, r3, #21
 8001d24:	4013      	ands	r3, r2
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2004      	movs	r0, #4
 8001d30:	f000 ff98 	bl	8002c64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001d34:	2004      	movs	r0, #4
 8001d36:	f000 ffaa 	bl	8002c8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3a:	46c0      	nop			@ (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b002      	add	sp, #8
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			@ (mov r8, r8)
 8001d44:	40021000 	.word	0x40021000

08001d48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b08b      	sub	sp, #44	@ 0x2c
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	2414      	movs	r4, #20
 8001d52:	193b      	adds	r3, r7, r4
 8001d54:	0018      	movs	r0, r3
 8001d56:	2314      	movs	r3, #20
 8001d58:	001a      	movs	r2, r3
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	f004 fb0a 	bl	8006374 <memset>
  if(hadc->Instance==ADC1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a18      	ldr	r2, [pc, #96]	@ (8001dc8 <HAL_ADC_MspInit+0x80>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d129      	bne.n	8001dbe <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d6a:	4b18      	ldr	r3, [pc, #96]	@ (8001dcc <HAL_ADC_MspInit+0x84>)
 8001d6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d6e:	4b17      	ldr	r3, [pc, #92]	@ (8001dcc <HAL_ADC_MspInit+0x84>)
 8001d70:	2180      	movs	r1, #128	@ 0x80
 8001d72:	0349      	lsls	r1, r1, #13
 8001d74:	430a      	orrs	r2, r1
 8001d76:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d78:	4b14      	ldr	r3, [pc, #80]	@ (8001dcc <HAL_ADC_MspInit+0x84>)
 8001d7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d7c:	2380      	movs	r3, #128	@ 0x80
 8001d7e:	035b      	lsls	r3, r3, #13
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <HAL_ADC_MspInit+0x84>)
 8001d88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d8a:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <HAL_ADC_MspInit+0x84>)
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d92:	4b0e      	ldr	r3, [pc, #56]	@ (8001dcc <HAL_ADC_MspInit+0x84>)
 8001d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d96:	2201      	movs	r2, #1
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d9e:	193b      	adds	r3, r7, r4
 8001da0:	2204      	movs	r2, #4
 8001da2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da4:	193b      	adds	r3, r7, r4
 8001da6:	2203      	movs	r2, #3
 8001da8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	193b      	adds	r3, r7, r4
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db0:	193a      	adds	r2, r7, r4
 8001db2:	23a0      	movs	r3, #160	@ 0xa0
 8001db4:	05db      	lsls	r3, r3, #23
 8001db6:	0011      	movs	r1, r2
 8001db8:	0018      	movs	r0, r3
 8001dba:	f000 ff85 	bl	8002cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dbe:	46c0      	nop			@ (mov r8, r8)
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b00b      	add	sp, #44	@ 0x2c
 8001dc4:	bd90      	pop	{r4, r7, pc}
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	40012400 	.word	0x40012400
 8001dcc:	40021000 	.word	0x40021000

08001dd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b095      	sub	sp, #84	@ 0x54
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	233c      	movs	r3, #60	@ 0x3c
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	0018      	movs	r0, r3
 8001dde:	2314      	movs	r3, #20
 8001de0:	001a      	movs	r2, r3
 8001de2:	2100      	movs	r1, #0
 8001de4:	f004 fac6 	bl	8006374 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001de8:	2414      	movs	r4, #20
 8001dea:	193b      	adds	r3, r7, r4
 8001dec:	0018      	movs	r0, r3
 8001dee:	2328      	movs	r3, #40	@ 0x28
 8001df0:	001a      	movs	r2, r3
 8001df2:	2100      	movs	r1, #0
 8001df4:	f004 fabe 	bl	8006374 <memset>
  if(hi2c->Instance==I2C1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a22      	ldr	r2, [pc, #136]	@ (8001e88 <HAL_I2C_MspInit+0xb8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d13d      	bne.n	8001e7e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e02:	193b      	adds	r3, r7, r4
 8001e04:	2220      	movs	r2, #32
 8001e06:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e08:	193b      	adds	r3, r7, r4
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e0e:	193b      	adds	r3, r7, r4
 8001e10:	0018      	movs	r0, r3
 8001e12:	f002 fc7d 	bl	8004710 <HAL_RCCEx_PeriphCLKConfig>
 8001e16:	1e03      	subs	r3, r0, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e1a:	f7ff fd59 	bl	80018d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e8c <HAL_I2C_MspInit+0xbc>)
 8001e20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e22:	4b1a      	ldr	r3, [pc, #104]	@ (8001e8c <HAL_I2C_MspInit+0xbc>)
 8001e24:	2102      	movs	r1, #2
 8001e26:	430a      	orrs	r2, r1
 8001e28:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e2a:	4b18      	ldr	r3, [pc, #96]	@ (8001e8c <HAL_I2C_MspInit+0xbc>)
 8001e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e2e:	2202      	movs	r2, #2
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e36:	213c      	movs	r1, #60	@ 0x3c
 8001e38:	187b      	adds	r3, r7, r1
 8001e3a:	22c0      	movs	r2, #192	@ 0xc0
 8001e3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e3e:	187b      	adds	r3, r7, r1
 8001e40:	2212      	movs	r2, #18
 8001e42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	187b      	adds	r3, r7, r1
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	187b      	adds	r3, r7, r1
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	2206      	movs	r2, #6
 8001e54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e56:	187b      	adds	r3, r7, r1
 8001e58:	4a0d      	ldr	r2, [pc, #52]	@ (8001e90 <HAL_I2C_MspInit+0xc0>)
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	0010      	movs	r0, r2
 8001e5e:	f000 ff33 	bl	8002cc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e62:	4b0a      	ldr	r3, [pc, #40]	@ (8001e8c <HAL_I2C_MspInit+0xbc>)
 8001e64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e66:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <HAL_I2C_MspInit+0xbc>)
 8001e68:	2180      	movs	r1, #128	@ 0x80
 8001e6a:	0389      	lsls	r1, r1, #14
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_I2C_MspInit+0xbc>)
 8001e72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e74:	2380      	movs	r3, #128	@ 0x80
 8001e76:	039b      	lsls	r3, r3, #14
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b015      	add	sp, #84	@ 0x54
 8001e84:	bd90      	pop	{r4, r7, pc}
 8001e86:	46c0      	nop			@ (mov r8, r8)
 8001e88:	40005400 	.word	0x40005400
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	50000400 	.word	0x50000400

08001e94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b08f      	sub	sp, #60	@ 0x3c
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e9c:	2410      	movs	r4, #16
 8001e9e:	193b      	adds	r3, r7, r4
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	2328      	movs	r3, #40	@ 0x28
 8001ea4:	001a      	movs	r2, r3
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	f004 fa64 	bl	8006374 <memset>
  if(hrtc->Instance==RTC)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a19      	ldr	r2, [pc, #100]	@ (8001f18 <HAL_RTC_MspInit+0x84>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d12c      	bne.n	8001f10 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001eb6:	193b      	adds	r3, r7, r4
 8001eb8:	2280      	movs	r2, #128	@ 0x80
 8001eba:	0292      	lsls	r2, r2, #10
 8001ebc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ebe:	193b      	adds	r3, r7, r4
 8001ec0:	2280      	movs	r2, #128	@ 0x80
 8001ec2:	0052      	lsls	r2, r2, #1
 8001ec4:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec6:	193b      	adds	r3, r7, r4
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f002 fc21 	bl	8004710 <HAL_RCCEx_PeriphCLKConfig>
 8001ece:	1e03      	subs	r3, r0, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001ed2:	f7ff fcfd 	bl	80018d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ed6:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <HAL_RTC_MspInit+0x88>)
 8001ed8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001eda:	4b10      	ldr	r3, [pc, #64]	@ (8001f1c <HAL_RTC_MspInit+0x88>)
 8001edc:	2180      	movs	r1, #128	@ 0x80
 8001ede:	0209      	lsls	r1, r1, #8
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8001f1c <HAL_RTC_MspInit+0x88>)
 8001ee6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f1c <HAL_RTC_MspInit+0x88>)
 8001eea:	2180      	movs	r1, #128	@ 0x80
 8001eec:	00c9      	lsls	r1, r1, #3
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f1c <HAL_RTC_MspInit+0x88>)
 8001ef4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ef6:	2380      	movs	r3, #128	@ 0x80
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4013      	ands	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2100      	movs	r1, #0
 8001f04:	2002      	movs	r0, #2
 8001f06:	f000 fead 	bl	8002c64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	f000 febf 	bl	8002c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f10:	46c0      	nop			@ (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b00f      	add	sp, #60	@ 0x3c
 8001f16:	bd90      	pop	{r4, r7, pc}
 8001f18:	40002800 	.word	0x40002800
 8001f1c:	40021000 	.word	0x40021000

08001f20 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	2380      	movs	r3, #128	@ 0x80
 8001f2e:	05db      	lsls	r3, r3, #23
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d10b      	bne.n	8001f4c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f34:	4b07      	ldr	r3, [pc, #28]	@ (8001f54 <HAL_TIM_PWM_MspInit+0x34>)
 8001f36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f38:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <HAL_TIM_PWM_MspInit+0x34>)
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f40:	4b04      	ldr	r3, [pc, #16]	@ (8001f54 <HAL_TIM_PWM_MspInit+0x34>)
 8001f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f44:	2201      	movs	r2, #1
 8001f46:	4013      	ands	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f4c:	46c0      	nop			@ (mov r8, r8)
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b004      	add	sp, #16
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40021000 	.word	0x40021000

08001f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0a      	ldr	r2, [pc, #40]	@ (8001f90 <HAL_TIM_Base_MspInit+0x38>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d10d      	bne.n	8001f86 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <HAL_TIM_Base_MspInit+0x3c>)
 8001f6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f6e:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <HAL_TIM_Base_MspInit+0x3c>)
 8001f70:	2180      	movs	r1, #128	@ 0x80
 8001f72:	0209      	lsls	r1, r1, #8
 8001f74:	430a      	orrs	r2, r1
 8001f76:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f78:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <HAL_TIM_Base_MspInit+0x3c>)
 8001f7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f7c:	2380      	movs	r3, #128	@ 0x80
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	4013      	ands	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001f86:	46c0      	nop			@ (mov r8, r8)
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b004      	add	sp, #16
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			@ (mov r8, r8)
 8001f90:	40002000 	.word	0x40002000
 8001f94:	40021000 	.word	0x40021000

08001f98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b089      	sub	sp, #36	@ 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	240c      	movs	r4, #12
 8001fa2:	193b      	adds	r3, r7, r4
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	2314      	movs	r3, #20
 8001fa8:	001a      	movs	r2, r3
 8001faa:	2100      	movs	r1, #0
 8001fac:	f004 f9e2 	bl	8006374 <memset>
  if(htim->Instance==TIM2)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2380      	movs	r3, #128	@ 0x80
 8001fb6:	05db      	lsls	r3, r3, #23
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d121      	bne.n	8002000 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbc:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <HAL_TIM_MspPostInit+0x70>)
 8001fbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fc0:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <HAL_TIM_MspPostInit+0x70>)
 8001fc2:	2104      	movs	r1, #4
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <HAL_TIM_MspPostInit+0x70>)
 8001fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fcc:	2204      	movs	r2, #4
 8001fce:	4013      	ands	r3, r2
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 8001fd4:	0021      	movs	r1, r4
 8001fd6:	187b      	adds	r3, r7, r1
 8001fd8:	2240      	movs	r2, #64	@ 0x40
 8001fda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	2202      	movs	r2, #2
 8001fe0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	187b      	adds	r3, r7, r1
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	187b      	adds	r3, r7, r1
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001fee:	187b      	adds	r3, r7, r1
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	187b      	adds	r3, r7, r1
 8001ff6:	4a05      	ldr	r2, [pc, #20]	@ (800200c <HAL_TIM_MspPostInit+0x74>)
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	0010      	movs	r0, r2
 8001ffc:	f000 fe64 	bl	8002cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002000:	46c0      	nop			@ (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	b009      	add	sp, #36	@ 0x24
 8002006:	bd90      	pop	{r4, r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	50000800 	.word	0x50000800

08002010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002014:	46c0      	nop			@ (mov r8, r8)
 8002016:	e7fd      	b.n	8002014 <NMI_Handler+0x4>

08002018 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800201c:	46c0      	nop			@ (mov r8, r8)
 800201e:	e7fd      	b.n	800201c <HardFault_Handler+0x4>

08002020 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002024:	46c0      	nop			@ (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002038:	f000 f8ce 	bl	80021d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203c:	46c0      	nop			@ (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002048:	4b03      	ldr	r3, [pc, #12]	@ (8002058 <RTC_TAMP_IRQHandler+0x14>)
 800204a:	0018      	movs	r0, r3
 800204c:	f003 f966 	bl	800531c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8002050:	46c0      	nop			@ (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	46c0      	nop			@ (mov r8, r8)
 8002058:	2000012c 	.word	0x2000012c

0800205c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002060:	46c0      	nop			@ (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 800206a:	2001      	movs	r0, #1
 800206c:	f000 ffe6 	bl	800303c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 8002070:	2002      	movs	r0, #2
 8002072:	f000 ffe3 	bl	800303c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 8002080:	2004      	movs	r0, #4
 8002082:	f000 ffdb 	bl	800303c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 8002086:	2008      	movs	r0, #8
 8002088:	f000 ffd8 	bl	800303c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800208c:	46c0      	nop			@ (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 8002096:	2380      	movs	r3, #128	@ 0x80
 8002098:	021b      	lsls	r3, r3, #8
 800209a:	0018      	movs	r0, r3
 800209c:	f000 ffce 	bl	800303c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80020a0:	46c0      	nop			@ (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020aa:	46c0      	nop			@ (mov r8, r8)
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020b0:	480d      	ldr	r0, [pc, #52]	@ (80020e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020b4:	f7ff fff7 	bl	80020a6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020b8:	480c      	ldr	r0, [pc, #48]	@ (80020ec <LoopForever+0x6>)
  ldr r1, =_edata
 80020ba:	490d      	ldr	r1, [pc, #52]	@ (80020f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020bc:	4a0d      	ldr	r2, [pc, #52]	@ (80020f4 <LoopForever+0xe>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c0:	e002      	b.n	80020c8 <LoopCopyDataInit>

080020c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c6:	3304      	adds	r3, #4

080020c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020cc:	d3f9      	bcc.n	80020c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ce:	4a0a      	ldr	r2, [pc, #40]	@ (80020f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020d0:	4c0a      	ldr	r4, [pc, #40]	@ (80020fc <LoopForever+0x16>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d4:	e001      	b.n	80020da <LoopFillZerobss>

080020d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d8:	3204      	adds	r2, #4

080020da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020dc:	d3fb      	bcc.n	80020d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020de:	f004 f951 	bl	8006384 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80020e2:	f7fe fc47 	bl	8000974 <main>

080020e6 <LoopForever>:

LoopForever:
  b LoopForever
 80020e6:	e7fe      	b.n	80020e6 <LoopForever>
  ldr   r0, =_estack
 80020e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80020ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80020f4:	080064c8 	.word	0x080064c8
  ldr r2, =_sbss
 80020f8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80020fc:	20000238 	.word	0x20000238

08002100 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002100:	e7fe      	b.n	8002100 <ADC1_IRQHandler>
	...

08002104 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800210a:	1dfb      	adds	r3, r7, #7
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002110:	4b0b      	ldr	r3, [pc, #44]	@ (8002140 <HAL_Init+0x3c>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b0a      	ldr	r3, [pc, #40]	@ (8002140 <HAL_Init+0x3c>)
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0049      	lsls	r1, r1, #1
 800211a:	430a      	orrs	r2, r1
 800211c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800211e:	2003      	movs	r0, #3
 8002120:	f000 f810 	bl	8002144 <HAL_InitTick>
 8002124:	1e03      	subs	r3, r0, #0
 8002126:	d003      	beq.n	8002130 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002128:	1dfb      	adds	r3, r7, #7
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	e001      	b.n	8002134 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002130:	f7ff fdde 	bl	8001cf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002134:	1dfb      	adds	r3, r7, #7
 8002136:	781b      	ldrb	r3, [r3, #0]
}
 8002138:	0018      	movs	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	b002      	add	sp, #8
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40022000 	.word	0x40022000

08002144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800214c:	230f      	movs	r3, #15
 800214e:	18fb      	adds	r3, r7, r3
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002154:	4b1d      	ldr	r3, [pc, #116]	@ (80021cc <HAL_InitTick+0x88>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d02b      	beq.n	80021b4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800215c:	4b1c      	ldr	r3, [pc, #112]	@ (80021d0 <HAL_InitTick+0x8c>)
 800215e:	681c      	ldr	r4, [r3, #0]
 8002160:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <HAL_InitTick+0x88>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	0019      	movs	r1, r3
 8002166:	23fa      	movs	r3, #250	@ 0xfa
 8002168:	0098      	lsls	r0, r3, #2
 800216a:	f7fd ffcb 	bl	8000104 <__udivsi3>
 800216e:	0003      	movs	r3, r0
 8002170:	0019      	movs	r1, r3
 8002172:	0020      	movs	r0, r4
 8002174:	f7fd ffc6 	bl	8000104 <__udivsi3>
 8002178:	0003      	movs	r3, r0
 800217a:	0018      	movs	r0, r3
 800217c:	f000 fd97 	bl	8002cae <HAL_SYSTICK_Config>
 8002180:	1e03      	subs	r3, r0, #0
 8002182:	d112      	bne.n	80021aa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b03      	cmp	r3, #3
 8002188:	d80a      	bhi.n	80021a0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	2301      	movs	r3, #1
 800218e:	425b      	negs	r3, r3
 8002190:	2200      	movs	r2, #0
 8002192:	0018      	movs	r0, r3
 8002194:	f000 fd66 	bl	8002c64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002198:	4b0e      	ldr	r3, [pc, #56]	@ (80021d4 <HAL_InitTick+0x90>)
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	e00d      	b.n	80021bc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80021a0:	230f      	movs	r3, #15
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
 80021a8:	e008      	b.n	80021bc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021aa:	230f      	movs	r3, #15
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
 80021b2:	e003      	b.n	80021bc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021b4:	230f      	movs	r3, #15
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80021bc:	230f      	movs	r3, #15
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	781b      	ldrb	r3, [r3, #0]
}
 80021c2:	0018      	movs	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b005      	add	sp, #20
 80021c8:	bd90      	pop	{r4, r7, pc}
 80021ca:	46c0      	nop			@ (mov r8, r8)
 80021cc:	20000050 	.word	0x20000050
 80021d0:	20000048 	.word	0x20000048
 80021d4:	2000004c 	.word	0x2000004c

080021d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <HAL_IncTick+0x1c>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	001a      	movs	r2, r3
 80021e2:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <HAL_IncTick+0x20>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	18d2      	adds	r2, r2, r3
 80021e8:	4b03      	ldr	r3, [pc, #12]	@ (80021f8 <HAL_IncTick+0x20>)
 80021ea:	601a      	str	r2, [r3, #0]
}
 80021ec:	46c0      	nop			@ (mov r8, r8)
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	46c0      	nop			@ (mov r8, r8)
 80021f4:	20000050 	.word	0x20000050
 80021f8:	20000234 	.word	0x20000234

080021fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002200:	4b02      	ldr	r3, [pc, #8]	@ (800220c <HAL_GetTick+0x10>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	0018      	movs	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	20000234 	.word	0x20000234

08002210 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a05      	ldr	r2, [pc, #20]	@ (8002234 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002220:	401a      	ands	r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	601a      	str	r2, [r3, #0]
}
 800222a:	46c0      	nop			@ (mov r8, r8)
 800222c:	46bd      	mov	sp, r7
 800222e:	b002      	add	sp, #8
 8002230:	bd80      	pop	{r7, pc}
 8002232:	46c0      	nop			@ (mov r8, r8)
 8002234:	fe3fffff 	.word	0xfe3fffff

08002238 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	23e0      	movs	r3, #224	@ 0xe0
 8002246:	045b      	lsls	r3, r3, #17
 8002248:	4013      	ands	r3, r2
}
 800224a:	0018      	movs	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	b002      	add	sp, #8
 8002250:	bd80      	pop	{r7, pc}

08002252 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	2104      	movs	r1, #4
 8002266:	400a      	ands	r2, r1
 8002268:	2107      	movs	r1, #7
 800226a:	4091      	lsls	r1, r2
 800226c:	000a      	movs	r2, r1
 800226e:	43d2      	mvns	r2, r2
 8002270:	401a      	ands	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2104      	movs	r1, #4
 8002276:	400b      	ands	r3, r1
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4099      	lsls	r1, r3
 800227c:	000b      	movs	r3, r1
 800227e:	431a      	orrs	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002284:	46c0      	nop			@ (mov r8, r8)
 8002286:	46bd      	mov	sp, r7
 8002288:	b004      	add	sp, #16
 800228a:	bd80      	pop	{r7, pc}

0800228c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	2104      	movs	r1, #4
 800229e:	400a      	ands	r2, r1
 80022a0:	2107      	movs	r1, #7
 80022a2:	4091      	lsls	r1, r2
 80022a4:	000a      	movs	r2, r1
 80022a6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	2104      	movs	r1, #4
 80022ac:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80022ae:	40da      	lsrs	r2, r3
 80022b0:	0013      	movs	r3, r2
}
 80022b2:	0018      	movs	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b002      	add	sp, #8
 80022b8:	bd80      	pop	{r7, pc}

080022ba <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b084      	sub	sp, #16
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	211f      	movs	r1, #31
 80022ce:	400a      	ands	r2, r1
 80022d0:	210f      	movs	r1, #15
 80022d2:	4091      	lsls	r1, r2
 80022d4:	000a      	movs	r2, r1
 80022d6:	43d2      	mvns	r2, r2
 80022d8:	401a      	ands	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	0e9b      	lsrs	r3, r3, #26
 80022de:	210f      	movs	r1, #15
 80022e0:	4019      	ands	r1, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	201f      	movs	r0, #31
 80022e6:	4003      	ands	r3, r0
 80022e8:	4099      	lsls	r1, r3
 80022ea:	000b      	movs	r3, r1
 80022ec:	431a      	orrs	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b004      	add	sp, #16
 80022f8:	bd80      	pop	{r7, pc}

080022fa <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	035b      	lsls	r3, r3, #13
 800230c:	0b5b      	lsrs	r3, r3, #13
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002314:	46c0      	nop			@ (mov r8, r8)
 8002316:	46bd      	mov	sp, r7
 8002318:	b002      	add	sp, #8
 800231a:	bd80      	pop	{r7, pc}

0800231c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	0352      	lsls	r2, r2, #13
 800232e:	0b52      	lsrs	r2, r2, #13
 8002330:	43d2      	mvns	r2, r2
 8002332:	401a      	ands	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002338:	46c0      	nop			@ (mov r8, r8)
 800233a:	46bd      	mov	sp, r7
 800233c:	b002      	add	sp, #8
 800233e:	bd80      	pop	{r7, pc}

08002340 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	0212      	lsls	r2, r2, #8
 8002354:	43d2      	mvns	r2, r2
 8002356:	401a      	ands	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	400b      	ands	r3, r1
 8002360:	4904      	ldr	r1, [pc, #16]	@ (8002374 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002362:	400b      	ands	r3, r1
 8002364:	431a      	orrs	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800236a:	46c0      	nop			@ (mov r8, r8)
 800236c:	46bd      	mov	sp, r7
 800236e:	b004      	add	sp, #16
 8002370:	bd80      	pop	{r7, pc}
 8002372:	46c0      	nop			@ (mov r8, r8)
 8002374:	07ffff00 	.word	0x07ffff00

08002378 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a05      	ldr	r2, [pc, #20]	@ (800239c <LL_ADC_EnableInternalRegulator+0x24>)
 8002386:	4013      	ands	r3, r2
 8002388:	2280      	movs	r2, #128	@ 0x80
 800238a:	0552      	lsls	r2, r2, #21
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002392:	46c0      	nop			@ (mov r8, r8)
 8002394:	46bd      	mov	sp, r7
 8002396:	b002      	add	sp, #8
 8002398:	bd80      	pop	{r7, pc}
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	6fffffe8 	.word	0x6fffffe8

080023a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	2380      	movs	r3, #128	@ 0x80
 80023ae:	055b      	lsls	r3, r3, #21
 80023b0:	401a      	ands	r2, r3
 80023b2:	2380      	movs	r3, #128	@ 0x80
 80023b4:	055b      	lsls	r3, r3, #21
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d101      	bne.n	80023be <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80023be:	2300      	movs	r3, #0
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b002      	add	sp, #8
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <LL_ADC_IsEnabled+0x18>
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <LL_ADC_IsEnabled+0x1a>
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	0018      	movs	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b002      	add	sp, #8
 80023e8:	bd80      	pop	{r7, pc}

080023ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2204      	movs	r2, #4
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d101      	bne.n	8002402 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002402:	2300      	movs	r3, #0
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b002      	add	sp, #8
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002414:	231f      	movs	r3, #31
 8002416:	18fb      	adds	r3, r7, r3
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800241c:	2300      	movs	r3, #0
 800241e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e17f      	b.n	8002732 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10a      	bne.n	8002450 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	0018      	movs	r0, r3
 800243e:	f7ff fc83 	bl	8001d48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2254      	movs	r2, #84	@ 0x54
 800244c:	2100      	movs	r1, #0
 800244e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0018      	movs	r0, r3
 8002456:	f7ff ffa3 	bl	80023a0 <LL_ADC_IsInternalRegulatorEnabled>
 800245a:	1e03      	subs	r3, r0, #0
 800245c:	d115      	bne.n	800248a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	0018      	movs	r0, r3
 8002464:	f7ff ff88 	bl	8002378 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002468:	4bb4      	ldr	r3, [pc, #720]	@ (800273c <HAL_ADC_Init+0x330>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	49b4      	ldr	r1, [pc, #720]	@ (8002740 <HAL_ADC_Init+0x334>)
 800246e:	0018      	movs	r0, r3
 8002470:	f7fd fe48 	bl	8000104 <__udivsi3>
 8002474:	0003      	movs	r3, r0
 8002476:	3301      	adds	r3, #1
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800247c:	e002      	b.n	8002484 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3b01      	subs	r3, #1
 8002482:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f9      	bne.n	800247e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	0018      	movs	r0, r3
 8002490:	f7ff ff86 	bl	80023a0 <LL_ADC_IsInternalRegulatorEnabled>
 8002494:	1e03      	subs	r3, r0, #0
 8002496:	d10f      	bne.n	80024b8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249c:	2210      	movs	r2, #16
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a8:	2201      	movs	r2, #1
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80024b0:	231f      	movs	r3, #31
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	0018      	movs	r0, r3
 80024be:	f7ff ff94 	bl	80023ea <LL_ADC_REG_IsConversionOngoing>
 80024c2:	0003      	movs	r3, r0
 80024c4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ca:	2210      	movs	r2, #16
 80024cc:	4013      	ands	r3, r2
 80024ce:	d000      	beq.n	80024d2 <HAL_ADC_Init+0xc6>
 80024d0:	e122      	b.n	8002718 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d000      	beq.n	80024da <HAL_ADC_Init+0xce>
 80024d8:	e11e      	b.n	8002718 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024de:	4a99      	ldr	r2, [pc, #612]	@ (8002744 <HAL_ADC_Init+0x338>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	2202      	movs	r2, #2
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	0018      	movs	r0, r3
 80024f0:	f7ff ff6a 	bl	80023c8 <LL_ADC_IsEnabled>
 80024f4:	1e03      	subs	r3, r0, #0
 80024f6:	d000      	beq.n	80024fa <HAL_ADC_Init+0xee>
 80024f8:	e0ad      	b.n	8002656 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	7e1b      	ldrb	r3, [r3, #24]
 8002502:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002504:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	7e5b      	ldrb	r3, [r3, #25]
 800250a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800250c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	7e9b      	ldrb	r3, [r3, #26]
 8002512:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002514:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <HAL_ADC_Init+0x118>
 800251e:	2380      	movs	r3, #128	@ 0x80
 8002520:	015b      	lsls	r3, r3, #5
 8002522:	e000      	b.n	8002526 <HAL_ADC_Init+0x11a>
 8002524:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002526:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800252c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	2b00      	cmp	r3, #0
 8002534:	da04      	bge.n	8002540 <HAL_ADC_Init+0x134>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	085b      	lsrs	r3, r3, #1
 800253e:	e001      	b.n	8002544 <HAL_ADC_Init+0x138>
 8002540:	2380      	movs	r3, #128	@ 0x80
 8002542:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002544:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	212c      	movs	r1, #44	@ 0x2c
 800254a:	5c5b      	ldrb	r3, [r3, r1]
 800254c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800254e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2220      	movs	r2, #32
 800255a:	5c9b      	ldrb	r3, [r3, r2]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d115      	bne.n	800258c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	7e9b      	ldrb	r3, [r3, #26]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2280      	movs	r2, #128	@ 0x80
 800256c:	0252      	lsls	r2, r2, #9
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	e00b      	b.n	800258c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002578:	2220      	movs	r2, #32
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002584:	2201      	movs	r2, #1
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00a      	beq.n	80025aa <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002598:	23e0      	movs	r3, #224	@ 0xe0
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80025a2:	4313      	orrs	r3, r2
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4a65      	ldr	r2, [pc, #404]	@ (8002748 <HAL_ADC_Init+0x33c>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	0019      	movs	r1, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	430a      	orrs	r2, r1
 80025be:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	0f9b      	lsrs	r3, r3, #30
 80025c6:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80025cc:	4313      	orrs	r3, r2
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	223c      	movs	r2, #60	@ 0x3c
 80025d8:	5c9b      	ldrb	r3, [r3, r2]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d111      	bne.n	8002602 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	0f9b      	lsrs	r3, r3, #30
 80025e4:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80025ea:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80025f0:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80025f6:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	2201      	movs	r2, #1
 80025fe:	4313      	orrs	r3, r2
 8002600:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	4a50      	ldr	r2, [pc, #320]	@ (800274c <HAL_ADC_Init+0x340>)
 800260a:	4013      	ands	r3, r2
 800260c:	0019      	movs	r1, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	430a      	orrs	r2, r1
 8002616:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	23c0      	movs	r3, #192	@ 0xc0
 800261e:	061b      	lsls	r3, r3, #24
 8002620:	429a      	cmp	r2, r3
 8002622:	d018      	beq.n	8002656 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002628:	2380      	movs	r3, #128	@ 0x80
 800262a:	05db      	lsls	r3, r3, #23
 800262c:	429a      	cmp	r2, r3
 800262e:	d012      	beq.n	8002656 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002634:	2380      	movs	r3, #128	@ 0x80
 8002636:	061b      	lsls	r3, r3, #24
 8002638:	429a      	cmp	r2, r3
 800263a:	d00c      	beq.n	8002656 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800263c:	4b44      	ldr	r3, [pc, #272]	@ (8002750 <HAL_ADC_Init+0x344>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a44      	ldr	r2, [pc, #272]	@ (8002754 <HAL_ADC_Init+0x348>)
 8002642:	4013      	ands	r3, r2
 8002644:	0019      	movs	r1, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	23f0      	movs	r3, #240	@ 0xf0
 800264c:	039b      	lsls	r3, r3, #14
 800264e:	401a      	ands	r2, r3
 8002650:	4b3f      	ldr	r3, [pc, #252]	@ (8002750 <HAL_ADC_Init+0x344>)
 8002652:	430a      	orrs	r2, r1
 8002654:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800265e:	001a      	movs	r2, r3
 8002660:	2100      	movs	r1, #0
 8002662:	f7ff fdf6 	bl	8002252 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800266e:	493a      	ldr	r1, [pc, #232]	@ (8002758 <HAL_ADC_Init+0x34c>)
 8002670:	001a      	movs	r2, r3
 8002672:	f7ff fdee 	bl	8002252 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2110      	movs	r1, #16
 800268a:	4249      	negs	r1, r1
 800268c:	430a      	orrs	r2, r1
 800268e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002690:	e018      	b.n	80026c4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691a      	ldr	r2, [r3, #16]
 8002696:	2380      	movs	r3, #128	@ 0x80
 8002698:	039b      	lsls	r3, r3, #14
 800269a:	429a      	cmp	r2, r3
 800269c:	d112      	bne.n	80026c4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	221c      	movs	r2, #28
 80026ae:	4013      	ands	r3, r2
 80026b0:	2210      	movs	r2, #16
 80026b2:	4252      	negs	r2, r2
 80026b4:	409a      	lsls	r2, r3
 80026b6:	0011      	movs	r1, r2
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2100      	movs	r1, #0
 80026ca:	0018      	movs	r0, r3
 80026cc:	f7ff fdde 	bl	800228c <LL_ADC_GetSamplingTimeCommonChannels>
 80026d0:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d10b      	bne.n	80026f2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e4:	2203      	movs	r2, #3
 80026e6:	4393      	bics	r3, r2
 80026e8:	2201      	movs	r2, #1
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80026f0:	e01c      	b.n	800272c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f6:	2212      	movs	r2, #18
 80026f8:	4393      	bics	r3, r2
 80026fa:	2210      	movs	r2, #16
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002706:	2201      	movs	r2, #1
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800270e:	231f      	movs	r3, #31
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002716:	e009      	b.n	800272c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271c:	2210      	movs	r2, #16
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002724:	231f      	movs	r3, #31
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800272c:	231f      	movs	r3, #31
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	781b      	ldrb	r3, [r3, #0]
}
 8002732:	0018      	movs	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	b008      	add	sp, #32
 8002738:	bd80      	pop	{r7, pc}
 800273a:	46c0      	nop			@ (mov r8, r8)
 800273c:	20000048 	.word	0x20000048
 8002740:	00030d40 	.word	0x00030d40
 8002744:	fffffefd 	.word	0xfffffefd
 8002748:	ffde0201 	.word	0xffde0201
 800274c:	1ffffc02 	.word	0x1ffffc02
 8002750:	40012708 	.word	0x40012708
 8002754:	ffc3ffff 	.word	0xffc3ffff
 8002758:	07ffff04 	.word	0x07ffff04

0800275c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002766:	2317      	movs	r3, #23
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2254      	movs	r2, #84	@ 0x54
 8002776:	5c9b      	ldrb	r3, [r3, r2]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x24>
 800277c:	2302      	movs	r3, #2
 800277e:	e1c0      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x3a6>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2254      	movs	r2, #84	@ 0x54
 8002784:	2101      	movs	r1, #1
 8002786:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	0018      	movs	r0, r3
 800278e:	f7ff fe2c 	bl	80023ea <LL_ADC_REG_IsConversionOngoing>
 8002792:	1e03      	subs	r3, r0, #0
 8002794:	d000      	beq.n	8002798 <HAL_ADC_ConfigChannel+0x3c>
 8002796:	e1a3      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d100      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x46>
 80027a0:	e143      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	2380      	movs	r3, #128	@ 0x80
 80027a8:	061b      	lsls	r3, r3, #24
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d004      	beq.n	80027b8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027b2:	4ac1      	ldr	r2, [pc, #772]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x35c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d108      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	0019      	movs	r1, r3
 80027c2:	0010      	movs	r0, r2
 80027c4:	f7ff fd99 	bl	80022fa <LL_ADC_REG_SetSequencerChAdd>
 80027c8:	e0c9      	b.n	800295e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	211f      	movs	r1, #31
 80027d4:	400b      	ands	r3, r1
 80027d6:	210f      	movs	r1, #15
 80027d8:	4099      	lsls	r1, r3
 80027da:	000b      	movs	r3, r1
 80027dc:	43db      	mvns	r3, r3
 80027de:	4013      	ands	r3, r2
 80027e0:	0019      	movs	r1, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	035b      	lsls	r3, r3, #13
 80027e8:	0b5b      	lsrs	r3, r3, #13
 80027ea:	d105      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x9c>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	0e9b      	lsrs	r3, r3, #26
 80027f2:	221f      	movs	r2, #31
 80027f4:	4013      	ands	r3, r2
 80027f6:	e098      	b.n	800292a <HAL_ADC_ConfigChannel+0x1ce>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2201      	movs	r2, #1
 80027fe:	4013      	ands	r3, r2
 8002800:	d000      	beq.n	8002804 <HAL_ADC_ConfigChannel+0xa8>
 8002802:	e091      	b.n	8002928 <HAL_ADC_ConfigChannel+0x1cc>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2202      	movs	r2, #2
 800280a:	4013      	ands	r3, r2
 800280c:	d000      	beq.n	8002810 <HAL_ADC_ConfigChannel+0xb4>
 800280e:	e089      	b.n	8002924 <HAL_ADC_ConfigChannel+0x1c8>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2204      	movs	r2, #4
 8002816:	4013      	ands	r3, r2
 8002818:	d000      	beq.n	800281c <HAL_ADC_ConfigChannel+0xc0>
 800281a:	e081      	b.n	8002920 <HAL_ADC_ConfigChannel+0x1c4>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2208      	movs	r2, #8
 8002822:	4013      	ands	r3, r2
 8002824:	d000      	beq.n	8002828 <HAL_ADC_ConfigChannel+0xcc>
 8002826:	e079      	b.n	800291c <HAL_ADC_ConfigChannel+0x1c0>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2210      	movs	r2, #16
 800282e:	4013      	ands	r3, r2
 8002830:	d000      	beq.n	8002834 <HAL_ADC_ConfigChannel+0xd8>
 8002832:	e071      	b.n	8002918 <HAL_ADC_ConfigChannel+0x1bc>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2220      	movs	r2, #32
 800283a:	4013      	ands	r3, r2
 800283c:	d000      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xe4>
 800283e:	e069      	b.n	8002914 <HAL_ADC_ConfigChannel+0x1b8>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2240      	movs	r2, #64	@ 0x40
 8002846:	4013      	ands	r3, r2
 8002848:	d000      	beq.n	800284c <HAL_ADC_ConfigChannel+0xf0>
 800284a:	e061      	b.n	8002910 <HAL_ADC_ConfigChannel+0x1b4>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2280      	movs	r2, #128	@ 0x80
 8002852:	4013      	ands	r3, r2
 8002854:	d000      	beq.n	8002858 <HAL_ADC_ConfigChannel+0xfc>
 8002856:	e059      	b.n	800290c <HAL_ADC_ConfigChannel+0x1b0>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4013      	ands	r3, r2
 8002862:	d151      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x1ac>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2380      	movs	r3, #128	@ 0x80
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4013      	ands	r3, r2
 800286e:	d149      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x1a8>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	@ 0x80
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4013      	ands	r3, r2
 800287a:	d141      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x1a4>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2380      	movs	r3, #128	@ 0x80
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	4013      	ands	r3, r2
 8002886:	d139      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x1a0>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	2380      	movs	r3, #128	@ 0x80
 800288e:	015b      	lsls	r3, r3, #5
 8002890:	4013      	ands	r3, r2
 8002892:	d131      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x19c>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	2380      	movs	r3, #128	@ 0x80
 800289a:	019b      	lsls	r3, r3, #6
 800289c:	4013      	ands	r3, r2
 800289e:	d129      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x198>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	2380      	movs	r3, #128	@ 0x80
 80028a6:	01db      	lsls	r3, r3, #7
 80028a8:	4013      	ands	r3, r2
 80028aa:	d121      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x194>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	2380      	movs	r3, #128	@ 0x80
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	4013      	ands	r3, r2
 80028b6:	d119      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x190>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	2380      	movs	r3, #128	@ 0x80
 80028be:	025b      	lsls	r3, r3, #9
 80028c0:	4013      	ands	r3, r2
 80028c2:	d111      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x18c>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	2380      	movs	r3, #128	@ 0x80
 80028ca:	029b      	lsls	r3, r3, #10
 80028cc:	4013      	ands	r3, r2
 80028ce:	d109      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x188>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	2380      	movs	r3, #128	@ 0x80
 80028d6:	02db      	lsls	r3, r3, #11
 80028d8:	4013      	ands	r3, r2
 80028da:	d001      	beq.n	80028e0 <HAL_ADC_ConfigChannel+0x184>
 80028dc:	2312      	movs	r3, #18
 80028de:	e024      	b.n	800292a <HAL_ADC_ConfigChannel+0x1ce>
 80028e0:	2300      	movs	r3, #0
 80028e2:	e022      	b.n	800292a <HAL_ADC_ConfigChannel+0x1ce>
 80028e4:	2311      	movs	r3, #17
 80028e6:	e020      	b.n	800292a <HAL_ADC_ConfigChannel+0x1ce>
 80028e8:	2310      	movs	r3, #16
 80028ea:	e01e      	b.n	800292a <HAL_ADC_ConfigChannel+0x1ce>
 80028ec:	230f      	movs	r3, #15
 80028ee:	e01c      	b.n	800292a <HAL_ADC_ConfigChannel+0x1ce>
 80028f0:	230e      	movs	r3, #14
 80028f2:	e01a      	b.n	800292a <HAL_ADC_ConfigChannel+0x1ce>
 80028f4:	230d      	movs	r3, #13
 80028f6:	e018      	b.n	800292a <HAL_ADC_ConfigChannel+0x1ce>
 80028f8:	230c      	movs	r3, #12
 80028fa:	e016      	b.n	800292a <HAL_ADC_ConfigChannel+0x1ce>
 80028fc:	230b      	movs	r3, #11
 80028fe:	e014      	b.n	800292a <HAL_ADC_ConfigChannel+0x1ce>
 8002900:	230a      	movs	r3, #10
 8002902:	e012      	b.n	800292a <HAL_ADC_ConfigChannel+0x1ce>
 8002904:	2309      	movs	r3, #9
 8002906:	e010      	b.n	800292a <HAL_ADC_ConfigChannel+0x1ce>
 8002908:	2308      	movs	r3, #8
 800290a:	e00e      	b.n	800292a <HAL_ADC_ConfigChannel+0x1ce>
 800290c:	2307      	movs	r3, #7
 800290e:	e00c      	b.n	800292a <HAL_ADC_ConfigChannel+0x1ce>
 8002910:	2306      	movs	r3, #6
 8002912:	e00a      	b.n	800292a <HAL_ADC_ConfigChannel+0x1ce>
 8002914:	2305      	movs	r3, #5
 8002916:	e008      	b.n	800292a <HAL_ADC_ConfigChannel+0x1ce>
 8002918:	2304      	movs	r3, #4
 800291a:	e006      	b.n	800292a <HAL_ADC_ConfigChannel+0x1ce>
 800291c:	2303      	movs	r3, #3
 800291e:	e004      	b.n	800292a <HAL_ADC_ConfigChannel+0x1ce>
 8002920:	2302      	movs	r3, #2
 8002922:	e002      	b.n	800292a <HAL_ADC_ConfigChannel+0x1ce>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <HAL_ADC_ConfigChannel+0x1ce>
 8002928:	2300      	movs	r3, #0
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	6852      	ldr	r2, [r2, #4]
 800292e:	201f      	movs	r0, #31
 8002930:	4002      	ands	r2, r0
 8002932:	4093      	lsls	r3, r2
 8002934:	000a      	movs	r2, r1
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	089b      	lsrs	r3, r3, #2
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	429a      	cmp	r2, r3
 800294a:	d808      	bhi.n	800295e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	001a      	movs	r2, r3
 800295a:	f7ff fcae 	bl	80022ba <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6819      	ldr	r1, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	001a      	movs	r2, r3
 800296c:	f7ff fce8 	bl	8002340 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	db00      	blt.n	800297a <HAL_ADC_ConfigChannel+0x21e>
 8002978:	e0bc      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800297a:	4b50      	ldr	r3, [pc, #320]	@ (8002abc <HAL_ADC_ConfigChannel+0x360>)
 800297c:	0018      	movs	r0, r3
 800297e:	f7ff fc5b 	bl	8002238 <LL_ADC_GetCommonPathInternalCh>
 8002982:	0003      	movs	r3, r0
 8002984:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a4d      	ldr	r2, [pc, #308]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x364>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d122      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	2380      	movs	r3, #128	@ 0x80
 8002994:	041b      	lsls	r3, r3, #16
 8002996:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002998:	d11d      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2280      	movs	r2, #128	@ 0x80
 800299e:	0412      	lsls	r2, r2, #16
 80029a0:	4313      	orrs	r3, r2
 80029a2:	4a46      	ldr	r2, [pc, #280]	@ (8002abc <HAL_ADC_ConfigChannel+0x360>)
 80029a4:	0019      	movs	r1, r3
 80029a6:	0010      	movs	r0, r2
 80029a8:	f7ff fc32 	bl	8002210 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029ac:	4b45      	ldr	r3, [pc, #276]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x368>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4945      	ldr	r1, [pc, #276]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x36c>)
 80029b2:	0018      	movs	r0, r3
 80029b4:	f7fd fba6 	bl	8000104 <__udivsi3>
 80029b8:	0003      	movs	r3, r0
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	0013      	movs	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	189b      	adds	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029c6:	e002      	b.n	80029ce <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f9      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029d4:	e08e      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a3c      	ldr	r2, [pc, #240]	@ (8002acc <HAL_ADC_ConfigChannel+0x370>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d10e      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	2380      	movs	r3, #128	@ 0x80
 80029e4:	045b      	lsls	r3, r3, #17
 80029e6:	4013      	ands	r3, r2
 80029e8:	d109      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	2280      	movs	r2, #128	@ 0x80
 80029ee:	0452      	lsls	r2, r2, #17
 80029f0:	4313      	orrs	r3, r2
 80029f2:	4a32      	ldr	r2, [pc, #200]	@ (8002abc <HAL_ADC_ConfigChannel+0x360>)
 80029f4:	0019      	movs	r1, r3
 80029f6:	0010      	movs	r0, r2
 80029f8:	f7ff fc0a 	bl	8002210 <LL_ADC_SetCommonPathInternalCh>
 80029fc:	e07a      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a33      	ldr	r2, [pc, #204]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x374>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d000      	beq.n	8002a0a <HAL_ADC_ConfigChannel+0x2ae>
 8002a08:	e074      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	2380      	movs	r3, #128	@ 0x80
 8002a0e:	03db      	lsls	r3, r3, #15
 8002a10:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002a12:	d000      	beq.n	8002a16 <HAL_ADC_ConfigChannel+0x2ba>
 8002a14:	e06e      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	2280      	movs	r2, #128	@ 0x80
 8002a1a:	03d2      	lsls	r2, r2, #15
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	4a27      	ldr	r2, [pc, #156]	@ (8002abc <HAL_ADC_ConfigChannel+0x360>)
 8002a20:	0019      	movs	r1, r3
 8002a22:	0010      	movs	r0, r2
 8002a24:	f7ff fbf4 	bl	8002210 <LL_ADC_SetCommonPathInternalCh>
 8002a28:	e064      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	2380      	movs	r3, #128	@ 0x80
 8002a30:	061b      	lsls	r3, r3, #24
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d004      	beq.n	8002a40 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x35c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d107      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	0019      	movs	r1, r3
 8002a4a:	0010      	movs	r0, r2
 8002a4c:	f7ff fc66 	bl	800231c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	da4d      	bge.n	8002af4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a58:	4b18      	ldr	r3, [pc, #96]	@ (8002abc <HAL_ADC_ConfigChannel+0x360>)
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f7ff fbec 	bl	8002238 <LL_ADC_GetCommonPathInternalCh>
 8002a60:	0003      	movs	r3, r0
 8002a62:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a15      	ldr	r2, [pc, #84]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x364>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d108      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4a18      	ldr	r2, [pc, #96]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x378>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	4a11      	ldr	r2, [pc, #68]	@ (8002abc <HAL_ADC_ConfigChannel+0x360>)
 8002a76:	0019      	movs	r1, r3
 8002a78:	0010      	movs	r0, r2
 8002a7a:	f7ff fbc9 	bl	8002210 <LL_ADC_SetCommonPathInternalCh>
 8002a7e:	e039      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a11      	ldr	r2, [pc, #68]	@ (8002acc <HAL_ADC_ConfigChannel+0x370>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d108      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4a12      	ldr	r2, [pc, #72]	@ (8002ad8 <HAL_ADC_ConfigChannel+0x37c>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	4a0a      	ldr	r2, [pc, #40]	@ (8002abc <HAL_ADC_ConfigChannel+0x360>)
 8002a92:	0019      	movs	r1, r3
 8002a94:	0010      	movs	r0, r2
 8002a96:	f7ff fbbb 	bl	8002210 <LL_ADC_SetCommonPathInternalCh>
 8002a9a:	e02b      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x374>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d126      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4a0c      	ldr	r2, [pc, #48]	@ (8002adc <HAL_ADC_ConfigChannel+0x380>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	4a03      	ldr	r2, [pc, #12]	@ (8002abc <HAL_ADC_ConfigChannel+0x360>)
 8002aae:	0019      	movs	r1, r3
 8002ab0:	0010      	movs	r0, r2
 8002ab2:	f7ff fbad 	bl	8002210 <LL_ADC_SetCommonPathInternalCh>
 8002ab6:	e01d      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x398>
 8002ab8:	80000004 	.word	0x80000004
 8002abc:	40012708 	.word	0x40012708
 8002ac0:	b0001000 	.word	0xb0001000
 8002ac4:	20000048 	.word	0x20000048
 8002ac8:	00030d40 	.word	0x00030d40
 8002acc:	b8004000 	.word	0xb8004000
 8002ad0:	b4002000 	.word	0xb4002000
 8002ad4:	ff7fffff 	.word	0xff7fffff
 8002ad8:	feffffff 	.word	0xfeffffff
 8002adc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002aec:	2317      	movs	r3, #23
 8002aee:	18fb      	adds	r3, r7, r3
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2254      	movs	r2, #84	@ 0x54
 8002af8:	2100      	movs	r1, #0
 8002afa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002afc:	2317      	movs	r3, #23
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	781b      	ldrb	r3, [r3, #0]
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b006      	add	sp, #24
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	46c0      	nop			@ (mov r8, r8)

08002b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	0002      	movs	r2, r0
 8002b14:	1dfb      	adds	r3, r7, #7
 8002b16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b18:	1dfb      	adds	r3, r7, #7
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b1e:	d809      	bhi.n	8002b34 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b20:	1dfb      	adds	r3, r7, #7
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	001a      	movs	r2, r3
 8002b26:	231f      	movs	r3, #31
 8002b28:	401a      	ands	r2, r3
 8002b2a:	4b04      	ldr	r3, [pc, #16]	@ (8002b3c <__NVIC_EnableIRQ+0x30>)
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	4091      	lsls	r1, r2
 8002b30:	000a      	movs	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002b34:	46c0      	nop			@ (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b002      	add	sp, #8
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	e000e100 	.word	0xe000e100

08002b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	0002      	movs	r2, r0
 8002b48:	6039      	str	r1, [r7, #0]
 8002b4a:	1dfb      	adds	r3, r7, #7
 8002b4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b4e:	1dfb      	adds	r3, r7, #7
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b54:	d828      	bhi.n	8002ba8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b56:	4a2f      	ldr	r2, [pc, #188]	@ (8002c14 <__NVIC_SetPriority+0xd4>)
 8002b58:	1dfb      	adds	r3, r7, #7
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	b25b      	sxtb	r3, r3
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	33c0      	adds	r3, #192	@ 0xc0
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	589b      	ldr	r3, [r3, r2]
 8002b66:	1dfa      	adds	r2, r7, #7
 8002b68:	7812      	ldrb	r2, [r2, #0]
 8002b6a:	0011      	movs	r1, r2
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	400a      	ands	r2, r1
 8002b70:	00d2      	lsls	r2, r2, #3
 8002b72:	21ff      	movs	r1, #255	@ 0xff
 8002b74:	4091      	lsls	r1, r2
 8002b76:	000a      	movs	r2, r1
 8002b78:	43d2      	mvns	r2, r2
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	019b      	lsls	r3, r3, #6
 8002b82:	22ff      	movs	r2, #255	@ 0xff
 8002b84:	401a      	ands	r2, r3
 8002b86:	1dfb      	adds	r3, r7, #7
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	4003      	ands	r3, r0
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b94:	481f      	ldr	r0, [pc, #124]	@ (8002c14 <__NVIC_SetPriority+0xd4>)
 8002b96:	1dfb      	adds	r3, r7, #7
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	b25b      	sxtb	r3, r3
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	33c0      	adds	r3, #192	@ 0xc0
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002ba6:	e031      	b.n	8002c0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c18 <__NVIC_SetPriority+0xd8>)
 8002baa:	1dfb      	adds	r3, r7, #7
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	0019      	movs	r1, r3
 8002bb0:	230f      	movs	r3, #15
 8002bb2:	400b      	ands	r3, r1
 8002bb4:	3b08      	subs	r3, #8
 8002bb6:	089b      	lsrs	r3, r3, #2
 8002bb8:	3306      	adds	r3, #6
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	18d3      	adds	r3, r2, r3
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	1dfa      	adds	r2, r7, #7
 8002bc4:	7812      	ldrb	r2, [r2, #0]
 8002bc6:	0011      	movs	r1, r2
 8002bc8:	2203      	movs	r2, #3
 8002bca:	400a      	ands	r2, r1
 8002bcc:	00d2      	lsls	r2, r2, #3
 8002bce:	21ff      	movs	r1, #255	@ 0xff
 8002bd0:	4091      	lsls	r1, r2
 8002bd2:	000a      	movs	r2, r1
 8002bd4:	43d2      	mvns	r2, r2
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	019b      	lsls	r3, r3, #6
 8002bde:	22ff      	movs	r2, #255	@ 0xff
 8002be0:	401a      	ands	r2, r3
 8002be2:	1dfb      	adds	r3, r7, #7
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	0018      	movs	r0, r3
 8002be8:	2303      	movs	r3, #3
 8002bea:	4003      	ands	r3, r0
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bf0:	4809      	ldr	r0, [pc, #36]	@ (8002c18 <__NVIC_SetPriority+0xd8>)
 8002bf2:	1dfb      	adds	r3, r7, #7
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	001c      	movs	r4, r3
 8002bf8:	230f      	movs	r3, #15
 8002bfa:	4023      	ands	r3, r4
 8002bfc:	3b08      	subs	r3, #8
 8002bfe:	089b      	lsrs	r3, r3, #2
 8002c00:	430a      	orrs	r2, r1
 8002c02:	3306      	adds	r3, #6
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	18c3      	adds	r3, r0, r3
 8002c08:	3304      	adds	r3, #4
 8002c0a:	601a      	str	r2, [r3, #0]
}
 8002c0c:	46c0      	nop			@ (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b003      	add	sp, #12
 8002c12:	bd90      	pop	{r4, r7, pc}
 8002c14:	e000e100 	.word	0xe000e100
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	1e5a      	subs	r2, r3, #1
 8002c28:	2380      	movs	r3, #128	@ 0x80
 8002c2a:	045b      	lsls	r3, r3, #17
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d301      	bcc.n	8002c34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c30:	2301      	movs	r3, #1
 8002c32:	e010      	b.n	8002c56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c34:	4b0a      	ldr	r3, [pc, #40]	@ (8002c60 <SysTick_Config+0x44>)
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	3a01      	subs	r2, #1
 8002c3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	425b      	negs	r3, r3
 8002c40:	2103      	movs	r1, #3
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7ff ff7c 	bl	8002b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c48:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <SysTick_Config+0x44>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c4e:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <SysTick_Config+0x44>)
 8002c50:	2207      	movs	r2, #7
 8002c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	0018      	movs	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b002      	add	sp, #8
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	46c0      	nop			@ (mov r8, r8)
 8002c60:	e000e010 	.word	0xe000e010

08002c64 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	210f      	movs	r1, #15
 8002c70:	187b      	adds	r3, r7, r1
 8002c72:	1c02      	adds	r2, r0, #0
 8002c74:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	187b      	adds	r3, r7, r1
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	b25b      	sxtb	r3, r3
 8002c7e:	0011      	movs	r1, r2
 8002c80:	0018      	movs	r0, r3
 8002c82:	f7ff ff5d 	bl	8002b40 <__NVIC_SetPriority>
}
 8002c86:	46c0      	nop			@ (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b004      	add	sp, #16
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	0002      	movs	r2, r0
 8002c96:	1dfb      	adds	r3, r7, #7
 8002c98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c9a:	1dfb      	adds	r3, r7, #7
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	b25b      	sxtb	r3, r3
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7ff ff33 	bl	8002b0c <__NVIC_EnableIRQ>
}
 8002ca6:	46c0      	nop			@ (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b002      	add	sp, #8
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f7ff ffaf 	bl	8002c1c <SysTick_Config>
 8002cbe:	0003      	movs	r3, r0
}
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b002      	add	sp, #8
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cd6:	e147      	b.n	8002f68 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2101      	movs	r1, #1
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4091      	lsls	r1, r2
 8002ce2:	000a      	movs	r2, r1
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d100      	bne.n	8002cf0 <HAL_GPIO_Init+0x28>
 8002cee:	e138      	b.n	8002f62 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d005      	beq.n	8002d08 <HAL_GPIO_Init+0x40>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2203      	movs	r2, #3
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d130      	bne.n	8002d6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	2203      	movs	r2, #3
 8002d14:	409a      	lsls	r2, r3
 8002d16:	0013      	movs	r3, r2
 8002d18:	43da      	mvns	r2, r3
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	409a      	lsls	r2, r3
 8002d2a:	0013      	movs	r3, r2
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d3e:	2201      	movs	r2, #1
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	409a      	lsls	r2, r3
 8002d44:	0013      	movs	r3, r2
 8002d46:	43da      	mvns	r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	091b      	lsrs	r3, r3, #4
 8002d54:	2201      	movs	r2, #1
 8002d56:	401a      	ands	r2, r3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	0013      	movs	r3, r2
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2203      	movs	r2, #3
 8002d70:	4013      	ands	r3, r2
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d017      	beq.n	8002da6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	2203      	movs	r2, #3
 8002d82:	409a      	lsls	r2, r3
 8002d84:	0013      	movs	r3, r2
 8002d86:	43da      	mvns	r2, r3
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	409a      	lsls	r2, r3
 8002d98:	0013      	movs	r3, r2
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2203      	movs	r2, #3
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d123      	bne.n	8002dfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	08da      	lsrs	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3208      	adds	r2, #8
 8002dba:	0092      	lsls	r2, r2, #2
 8002dbc:	58d3      	ldr	r3, [r2, r3]
 8002dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	2207      	movs	r2, #7
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	220f      	movs	r2, #15
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	0013      	movs	r3, r2
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2107      	movs	r1, #7
 8002dde:	400b      	ands	r3, r1
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	409a      	lsls	r2, r3
 8002de4:	0013      	movs	r3, r2
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	08da      	lsrs	r2, r3, #3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3208      	adds	r2, #8
 8002df4:	0092      	lsls	r2, r2, #2
 8002df6:	6939      	ldr	r1, [r7, #16]
 8002df8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	2203      	movs	r2, #3
 8002e06:	409a      	lsls	r2, r3
 8002e08:	0013      	movs	r3, r2
 8002e0a:	43da      	mvns	r2, r3
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2203      	movs	r2, #3
 8002e18:	401a      	ands	r2, r3
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	0013      	movs	r3, r2
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	23c0      	movs	r3, #192	@ 0xc0
 8002e34:	029b      	lsls	r3, r3, #10
 8002e36:	4013      	ands	r3, r2
 8002e38:	d100      	bne.n	8002e3c <HAL_GPIO_Init+0x174>
 8002e3a:	e092      	b.n	8002f62 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002e3c:	4a50      	ldr	r2, [pc, #320]	@ (8002f80 <HAL_GPIO_Init+0x2b8>)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	089b      	lsrs	r3, r3, #2
 8002e42:	3318      	adds	r3, #24
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	589b      	ldr	r3, [r3, r2]
 8002e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2203      	movs	r2, #3
 8002e4e:	4013      	ands	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	220f      	movs	r2, #15
 8002e54:	409a      	lsls	r2, r3
 8002e56:	0013      	movs	r3, r2
 8002e58:	43da      	mvns	r2, r3
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	23a0      	movs	r3, #160	@ 0xa0
 8002e64:	05db      	lsls	r3, r3, #23
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d013      	beq.n	8002e92 <HAL_GPIO_Init+0x1ca>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a45      	ldr	r2, [pc, #276]	@ (8002f84 <HAL_GPIO_Init+0x2bc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00d      	beq.n	8002e8e <HAL_GPIO_Init+0x1c6>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a44      	ldr	r2, [pc, #272]	@ (8002f88 <HAL_GPIO_Init+0x2c0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d007      	beq.n	8002e8a <HAL_GPIO_Init+0x1c2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a43      	ldr	r2, [pc, #268]	@ (8002f8c <HAL_GPIO_Init+0x2c4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d101      	bne.n	8002e86 <HAL_GPIO_Init+0x1be>
 8002e82:	2303      	movs	r3, #3
 8002e84:	e006      	b.n	8002e94 <HAL_GPIO_Init+0x1cc>
 8002e86:	2305      	movs	r3, #5
 8002e88:	e004      	b.n	8002e94 <HAL_GPIO_Init+0x1cc>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e002      	b.n	8002e94 <HAL_GPIO_Init+0x1cc>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <HAL_GPIO_Init+0x1cc>
 8002e92:	2300      	movs	r3, #0
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	2103      	movs	r1, #3
 8002e98:	400a      	ands	r2, r1
 8002e9a:	00d2      	lsls	r2, r2, #3
 8002e9c:	4093      	lsls	r3, r2
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002ea4:	4936      	ldr	r1, [pc, #216]	@ (8002f80 <HAL_GPIO_Init+0x2b8>)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	089b      	lsrs	r3, r3, #2
 8002eaa:	3318      	adds	r3, #24
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002eb2:	4b33      	ldr	r3, [pc, #204]	@ (8002f80 <HAL_GPIO_Init+0x2b8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	2380      	movs	r3, #128	@ 0x80
 8002ec8:	035b      	lsls	r3, r3, #13
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f80 <HAL_GPIO_Init+0x2b8>)
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002edc:	4b28      	ldr	r3, [pc, #160]	@ (8002f80 <HAL_GPIO_Init+0x2b8>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	43da      	mvns	r2, r3
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	2380      	movs	r3, #128	@ 0x80
 8002ef2:	039b      	lsls	r3, r3, #14
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f00:	4b1f      	ldr	r3, [pc, #124]	@ (8002f80 <HAL_GPIO_Init+0x2b8>)
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f06:	4a1e      	ldr	r2, [pc, #120]	@ (8002f80 <HAL_GPIO_Init+0x2b8>)
 8002f08:	2384      	movs	r3, #132	@ 0x84
 8002f0a:	58d3      	ldr	r3, [r2, r3]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	43da      	mvns	r2, r3
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	2380      	movs	r3, #128	@ 0x80
 8002f1e:	029b      	lsls	r3, r3, #10
 8002f20:	4013      	ands	r3, r2
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f2c:	4914      	ldr	r1, [pc, #80]	@ (8002f80 <HAL_GPIO_Init+0x2b8>)
 8002f2e:	2284      	movs	r2, #132	@ 0x84
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002f34:	4a12      	ldr	r2, [pc, #72]	@ (8002f80 <HAL_GPIO_Init+0x2b8>)
 8002f36:	2380      	movs	r3, #128	@ 0x80
 8002f38:	58d3      	ldr	r3, [r2, r3]
 8002f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4013      	ands	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	2380      	movs	r3, #128	@ 0x80
 8002f4c:	025b      	lsls	r3, r3, #9
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f5a:	4909      	ldr	r1, [pc, #36]	@ (8002f80 <HAL_GPIO_Init+0x2b8>)
 8002f5c:	2280      	movs	r2, #128	@ 0x80
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	3301      	adds	r3, #1
 8002f66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	40da      	lsrs	r2, r3
 8002f70:	1e13      	subs	r3, r2, #0
 8002f72:	d000      	beq.n	8002f76 <HAL_GPIO_Init+0x2ae>
 8002f74:	e6b0      	b.n	8002cd8 <HAL_GPIO_Init+0x10>
  }
}
 8002f76:	46c0      	nop			@ (mov r8, r8)
 8002f78:	46c0      	nop			@ (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b006      	add	sp, #24
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40021800 	.word	0x40021800
 8002f84:	50000400 	.word	0x50000400
 8002f88:	50000800 	.word	0x50000800
 8002f8c:	50000c00 	.word	0x50000c00

08002f90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	000a      	movs	r2, r1
 8002f9a:	1cbb      	adds	r3, r7, #2
 8002f9c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	1cba      	adds	r2, r7, #2
 8002fa4:	8812      	ldrh	r2, [r2, #0]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d004      	beq.n	8002fb4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002faa:	230f      	movs	r3, #15
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]
 8002fb2:	e003      	b.n	8002fbc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fb4:	230f      	movs	r3, #15
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002fbc:	230f      	movs	r3, #15
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	781b      	ldrb	r3, [r3, #0]
}
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b004      	add	sp, #16
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	0008      	movs	r0, r1
 8002fd4:	0011      	movs	r1, r2
 8002fd6:	1cbb      	adds	r3, r7, #2
 8002fd8:	1c02      	adds	r2, r0, #0
 8002fda:	801a      	strh	r2, [r3, #0]
 8002fdc:	1c7b      	adds	r3, r7, #1
 8002fde:	1c0a      	adds	r2, r1, #0
 8002fe0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fe2:	1c7b      	adds	r3, r7, #1
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d004      	beq.n	8002ff4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fea:	1cbb      	adds	r3, r7, #2
 8002fec:	881a      	ldrh	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ff2:	e003      	b.n	8002ffc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ff4:	1cbb      	adds	r3, r7, #2
 8002ff6:	881a      	ldrh	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ffc:	46c0      	nop			@ (mov r8, r8)
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b002      	add	sp, #8
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	000a      	movs	r2, r1
 800300e:	1cbb      	adds	r3, r7, #2
 8003010:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003018:	1cbb      	adds	r3, r7, #2
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4013      	ands	r3, r2
 8003020:	041a      	lsls	r2, r3, #16
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	43db      	mvns	r3, r3
 8003026:	1cb9      	adds	r1, r7, #2
 8003028:	8809      	ldrh	r1, [r1, #0]
 800302a:	400b      	ands	r3, r1
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	619a      	str	r2, [r3, #24]
}
 8003032:	46c0      	nop			@ (mov r8, r8)
 8003034:	46bd      	mov	sp, r7
 8003036:	b004      	add	sp, #16
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	0002      	movs	r2, r0
 8003044:	1dbb      	adds	r3, r7, #6
 8003046:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003048:	4b10      	ldr	r3, [pc, #64]	@ (800308c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	1dba      	adds	r2, r7, #6
 800304e:	8812      	ldrh	r2, [r2, #0]
 8003050:	4013      	ands	r3, r2
 8003052:	d008      	beq.n	8003066 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003054:	4b0d      	ldr	r3, [pc, #52]	@ (800308c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003056:	1dba      	adds	r2, r7, #6
 8003058:	8812      	ldrh	r2, [r2, #0]
 800305a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800305c:	1dbb      	adds	r3, r7, #6
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	0018      	movs	r0, r3
 8003062:	f000 f815 	bl	8003090 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003066:	4b09      	ldr	r3, [pc, #36]	@ (800308c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	1dba      	adds	r2, r7, #6
 800306c:	8812      	ldrh	r2, [r2, #0]
 800306e:	4013      	ands	r3, r2
 8003070:	d008      	beq.n	8003084 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003072:	4b06      	ldr	r3, [pc, #24]	@ (800308c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003074:	1dba      	adds	r2, r7, #6
 8003076:	8812      	ldrh	r2, [r2, #0]
 8003078:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800307a:	1dbb      	adds	r3, r7, #6
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	0018      	movs	r0, r3
 8003080:	f7fe f956 	bl	8001330 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003084:	46c0      	nop			@ (mov r8, r8)
 8003086:	46bd      	mov	sp, r7
 8003088:	b002      	add	sp, #8
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40021800 	.word	0x40021800

08003090 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	0002      	movs	r2, r0
 8003098:	1dbb      	adds	r3, r7, #6
 800309a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800309c:	46c0      	nop			@ (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b002      	add	sp, #8
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e08f      	b.n	80031d6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2241      	movs	r2, #65	@ 0x41
 80030ba:	5c9b      	ldrb	r3, [r3, r2]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d107      	bne.n	80030d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2240      	movs	r2, #64	@ 0x40
 80030c6:	2100      	movs	r1, #0
 80030c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	0018      	movs	r0, r3
 80030ce:	f7fe fe7f 	bl	8001dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2241      	movs	r2, #65	@ 0x41
 80030d6:	2124      	movs	r1, #36	@ 0x24
 80030d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2101      	movs	r1, #1
 80030e6:	438a      	bics	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	493b      	ldr	r1, [pc, #236]	@ (80031e0 <HAL_I2C_Init+0x13c>)
 80030f4:	400a      	ands	r2, r1
 80030f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4938      	ldr	r1, [pc, #224]	@ (80031e4 <HAL_I2C_Init+0x140>)
 8003104:	400a      	ands	r2, r1
 8003106:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d108      	bne.n	8003122 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2180      	movs	r1, #128	@ 0x80
 800311a:	0209      	lsls	r1, r1, #8
 800311c:	430a      	orrs	r2, r1
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	e007      	b.n	8003132 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2184      	movs	r1, #132	@ 0x84
 800312c:	0209      	lsls	r1, r1, #8
 800312e:	430a      	orrs	r2, r1
 8003130:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d109      	bne.n	800314e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2180      	movs	r1, #128	@ 0x80
 8003146:	0109      	lsls	r1, r1, #4
 8003148:	430a      	orrs	r2, r1
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	e007      	b.n	800315e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4923      	ldr	r1, [pc, #140]	@ (80031e8 <HAL_I2C_Init+0x144>)
 800315a:	400a      	ands	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4920      	ldr	r1, [pc, #128]	@ (80031ec <HAL_I2C_Init+0x148>)
 800316a:	430a      	orrs	r2, r1
 800316c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	491a      	ldr	r1, [pc, #104]	@ (80031e4 <HAL_I2C_Init+0x140>)
 800317a:	400a      	ands	r2, r1
 800317c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	431a      	orrs	r2, r3
 8003188:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69d9      	ldr	r1, [r3, #28]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1a      	ldr	r2, [r3, #32]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2101      	movs	r1, #1
 80031b4:	430a      	orrs	r2, r1
 80031b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2241      	movs	r2, #65	@ 0x41
 80031c2:	2120      	movs	r1, #32
 80031c4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2242      	movs	r2, #66	@ 0x42
 80031d0:	2100      	movs	r1, #0
 80031d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	0018      	movs	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	b002      	add	sp, #8
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	46c0      	nop			@ (mov r8, r8)
 80031e0:	f0ffffff 	.word	0xf0ffffff
 80031e4:	ffff7fff 	.word	0xffff7fff
 80031e8:	fffff7ff 	.word	0xfffff7ff
 80031ec:	02008000 	.word	0x02008000

080031f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80031f0:	b590      	push	{r4, r7, lr}
 80031f2:	b089      	sub	sp, #36	@ 0x24
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	0008      	movs	r0, r1
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	0019      	movs	r1, r3
 80031fe:	230a      	movs	r3, #10
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	1c02      	adds	r2, r0, #0
 8003204:	801a      	strh	r2, [r3, #0]
 8003206:	2308      	movs	r3, #8
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	1c0a      	adds	r2, r1, #0
 800320c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2241      	movs	r2, #65	@ 0x41
 8003212:	5c9b      	ldrb	r3, [r3, r2]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b20      	cmp	r3, #32
 8003218:	d000      	beq.n	800321c <HAL_I2C_Master_Transmit+0x2c>
 800321a:	e10a      	b.n	8003432 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2240      	movs	r2, #64	@ 0x40
 8003220:	5c9b      	ldrb	r3, [r3, r2]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_I2C_Master_Transmit+0x3a>
 8003226:	2302      	movs	r3, #2
 8003228:	e104      	b.n	8003434 <HAL_I2C_Master_Transmit+0x244>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2240      	movs	r2, #64	@ 0x40
 800322e:	2101      	movs	r1, #1
 8003230:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003232:	f7fe ffe3 	bl	80021fc <HAL_GetTick>
 8003236:	0003      	movs	r3, r0
 8003238:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800323a:	2380      	movs	r3, #128	@ 0x80
 800323c:	0219      	lsls	r1, r3, #8
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	2319      	movs	r3, #25
 8003246:	2201      	movs	r2, #1
 8003248:	f000 fa26 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 800324c:	1e03      	subs	r3, r0, #0
 800324e:	d001      	beq.n	8003254 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0ef      	b.n	8003434 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2241      	movs	r2, #65	@ 0x41
 8003258:	2121      	movs	r1, #33	@ 0x21
 800325a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2242      	movs	r2, #66	@ 0x42
 8003260:	2110      	movs	r1, #16
 8003262:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2208      	movs	r2, #8
 8003274:	18ba      	adds	r2, r7, r2
 8003276:	8812      	ldrh	r2, [r2, #0]
 8003278:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	2bff      	cmp	r3, #255	@ 0xff
 8003288:	d906      	bls.n	8003298 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	22ff      	movs	r2, #255	@ 0xff
 800328e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003290:	2380      	movs	r3, #128	@ 0x80
 8003292:	045b      	lsls	r3, r3, #17
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	e007      	b.n	80032a8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80032a2:	2380      	movs	r3, #128	@ 0x80
 80032a4:	049b      	lsls	r3, r3, #18
 80032a6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d027      	beq.n	8003300 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	781a      	ldrb	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	3301      	adds	r3, #1
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	697c      	ldr	r4, [r7, #20]
 80032ec:	230a      	movs	r3, #10
 80032ee:	18fb      	adds	r3, r7, r3
 80032f0:	8819      	ldrh	r1, [r3, #0]
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	4b51      	ldr	r3, [pc, #324]	@ (800343c <HAL_I2C_Master_Transmit+0x24c>)
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	0023      	movs	r3, r4
 80032fa:	f000 fc45 	bl	8003b88 <I2C_TransferConfig>
 80032fe:	e06f      	b.n	80033e0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003304:	b2da      	uxtb	r2, r3
 8003306:	697c      	ldr	r4, [r7, #20]
 8003308:	230a      	movs	r3, #10
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	8819      	ldrh	r1, [r3, #0]
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	4b4a      	ldr	r3, [pc, #296]	@ (800343c <HAL_I2C_Master_Transmit+0x24c>)
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	0023      	movs	r3, r4
 8003316:	f000 fc37 	bl	8003b88 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800331a:	e061      	b.n	80033e0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	0018      	movs	r0, r3
 8003324:	f000 fa10 	bl	8003748 <I2C_WaitOnTXISFlagUntilTimeout>
 8003328:	1e03      	subs	r3, r0, #0
 800332a:	d001      	beq.n	8003330 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e081      	b.n	8003434 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	781a      	ldrb	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d03a      	beq.n	80033e0 <HAL_I2C_Master_Transmit+0x1f0>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336e:	2b00      	cmp	r3, #0
 8003370:	d136      	bne.n	80033e0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	0013      	movs	r3, r2
 800337c:	2200      	movs	r2, #0
 800337e:	2180      	movs	r1, #128	@ 0x80
 8003380:	f000 f98a 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8003384:	1e03      	subs	r3, r0, #0
 8003386:	d001      	beq.n	800338c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e053      	b.n	8003434 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	2bff      	cmp	r3, #255	@ 0xff
 8003394:	d911      	bls.n	80033ba <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	22ff      	movs	r2, #255	@ 0xff
 800339a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	2380      	movs	r3, #128	@ 0x80
 80033a4:	045c      	lsls	r4, r3, #17
 80033a6:	230a      	movs	r3, #10
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	8819      	ldrh	r1, [r3, #0]
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	2300      	movs	r3, #0
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	0023      	movs	r3, r4
 80033b4:	f000 fbe8 	bl	8003b88 <I2C_TransferConfig>
 80033b8:	e012      	b.n	80033e0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	2380      	movs	r3, #128	@ 0x80
 80033cc:	049c      	lsls	r4, r3, #18
 80033ce:	230a      	movs	r3, #10
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	8819      	ldrh	r1, [r3, #0]
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	2300      	movs	r3, #0
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	0023      	movs	r3, r4
 80033dc:	f000 fbd4 	bl	8003b88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d198      	bne.n	800331c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f000 f9ef 	bl	80037d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033f6:	1e03      	subs	r3, r0, #0
 80033f8:	d001      	beq.n	80033fe <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e01a      	b.n	8003434 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2220      	movs	r2, #32
 8003404:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	490b      	ldr	r1, [pc, #44]	@ (8003440 <HAL_I2C_Master_Transmit+0x250>)
 8003412:	400a      	ands	r2, r1
 8003414:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2241      	movs	r2, #65	@ 0x41
 800341a:	2120      	movs	r1, #32
 800341c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2242      	movs	r2, #66	@ 0x42
 8003422:	2100      	movs	r1, #0
 8003424:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2240      	movs	r2, #64	@ 0x40
 800342a:	2100      	movs	r1, #0
 800342c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	e000      	b.n	8003434 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003432:	2302      	movs	r3, #2
  }
}
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	b007      	add	sp, #28
 800343a:	bd90      	pop	{r4, r7, pc}
 800343c:	80002000 	.word	0x80002000
 8003440:	fe00e800 	.word	0xfe00e800

08003444 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003444:	b590      	push	{r4, r7, lr}
 8003446:	b089      	sub	sp, #36	@ 0x24
 8003448:	af02      	add	r7, sp, #8
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	0008      	movs	r0, r1
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	0019      	movs	r1, r3
 8003452:	230a      	movs	r3, #10
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	1c02      	adds	r2, r0, #0
 8003458:	801a      	strh	r2, [r3, #0]
 800345a:	2308      	movs	r3, #8
 800345c:	18fb      	adds	r3, r7, r3
 800345e:	1c0a      	adds	r2, r1, #0
 8003460:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2241      	movs	r2, #65	@ 0x41
 8003466:	5c9b      	ldrb	r3, [r3, r2]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b20      	cmp	r3, #32
 800346c:	d000      	beq.n	8003470 <HAL_I2C_Master_Receive+0x2c>
 800346e:	e0e8      	b.n	8003642 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2240      	movs	r2, #64	@ 0x40
 8003474:	5c9b      	ldrb	r3, [r3, r2]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_I2C_Master_Receive+0x3a>
 800347a:	2302      	movs	r3, #2
 800347c:	e0e2      	b.n	8003644 <HAL_I2C_Master_Receive+0x200>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2240      	movs	r2, #64	@ 0x40
 8003482:	2101      	movs	r1, #1
 8003484:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003486:	f7fe feb9 	bl	80021fc <HAL_GetTick>
 800348a:	0003      	movs	r3, r0
 800348c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800348e:	2380      	movs	r3, #128	@ 0x80
 8003490:	0219      	lsls	r1, r3, #8
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	2319      	movs	r3, #25
 800349a:	2201      	movs	r2, #1
 800349c:	f000 f8fc 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 80034a0:	1e03      	subs	r3, r0, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0cd      	b.n	8003644 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2241      	movs	r2, #65	@ 0x41
 80034ac:	2122      	movs	r1, #34	@ 0x22
 80034ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2242      	movs	r2, #66	@ 0x42
 80034b4:	2110      	movs	r1, #16
 80034b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2208      	movs	r2, #8
 80034c8:	18ba      	adds	r2, r7, r2
 80034ca:	8812      	ldrh	r2, [r2, #0]
 80034cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2bff      	cmp	r3, #255	@ 0xff
 80034dc:	d911      	bls.n	8003502 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	22ff      	movs	r2, #255	@ 0xff
 80034e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	2380      	movs	r3, #128	@ 0x80
 80034ec:	045c      	lsls	r4, r3, #17
 80034ee:	230a      	movs	r3, #10
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	8819      	ldrh	r1, [r3, #0]
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	4b55      	ldr	r3, [pc, #340]	@ (800364c <HAL_I2C_Master_Receive+0x208>)
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	0023      	movs	r3, r4
 80034fc:	f000 fb44 	bl	8003b88 <I2C_TransferConfig>
 8003500:	e076      	b.n	80035f0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003510:	b2da      	uxtb	r2, r3
 8003512:	2380      	movs	r3, #128	@ 0x80
 8003514:	049c      	lsls	r4, r3, #18
 8003516:	230a      	movs	r3, #10
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	8819      	ldrh	r1, [r3, #0]
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	4b4b      	ldr	r3, [pc, #300]	@ (800364c <HAL_I2C_Master_Receive+0x208>)
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	0023      	movs	r3, r4
 8003524:	f000 fb30 	bl	8003b88 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003528:	e062      	b.n	80035f0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	0018      	movs	r0, r3
 8003532:	f000 f993 	bl	800385c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003536:	1e03      	subs	r3, r0, #0
 8003538:	d001      	beq.n	800353e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e082      	b.n	8003644 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d03a      	beq.n	80035f0 <HAL_I2C_Master_Receive+0x1ac>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800357e:	2b00      	cmp	r3, #0
 8003580:	d136      	bne.n	80035f0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003582:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	0013      	movs	r3, r2
 800358c:	2200      	movs	r2, #0
 800358e:	2180      	movs	r1, #128	@ 0x80
 8003590:	f000 f882 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8003594:	1e03      	subs	r3, r0, #0
 8003596:	d001      	beq.n	800359c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e053      	b.n	8003644 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2bff      	cmp	r3, #255	@ 0xff
 80035a4:	d911      	bls.n	80035ca <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	22ff      	movs	r2, #255	@ 0xff
 80035aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	2380      	movs	r3, #128	@ 0x80
 80035b4:	045c      	lsls	r4, r3, #17
 80035b6:	230a      	movs	r3, #10
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	8819      	ldrh	r1, [r3, #0]
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	2300      	movs	r3, #0
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	0023      	movs	r3, r4
 80035c4:	f000 fae0 	bl	8003b88 <I2C_TransferConfig>
 80035c8:	e012      	b.n	80035f0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	2380      	movs	r3, #128	@ 0x80
 80035dc:	049c      	lsls	r4, r3, #18
 80035de:	230a      	movs	r3, #10
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	8819      	ldrh	r1, [r3, #0]
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	2300      	movs	r3, #0
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	0023      	movs	r3, r4
 80035ec:	f000 facc 	bl	8003b88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d197      	bne.n	800352a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	0018      	movs	r0, r3
 8003602:	f000 f8e7 	bl	80037d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003606:	1e03      	subs	r3, r0, #0
 8003608:	d001      	beq.n	800360e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e01a      	b.n	8003644 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2220      	movs	r2, #32
 8003614:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	490b      	ldr	r1, [pc, #44]	@ (8003650 <HAL_I2C_Master_Receive+0x20c>)
 8003622:	400a      	ands	r2, r1
 8003624:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2241      	movs	r2, #65	@ 0x41
 800362a:	2120      	movs	r1, #32
 800362c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2242      	movs	r2, #66	@ 0x42
 8003632:	2100      	movs	r1, #0
 8003634:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2240      	movs	r2, #64	@ 0x40
 800363a:	2100      	movs	r1, #0
 800363c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003642:	2302      	movs	r3, #2
  }
}
 8003644:	0018      	movs	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	b007      	add	sp, #28
 800364a:	bd90      	pop	{r4, r7, pc}
 800364c:	80002400 	.word	0x80002400
 8003650:	fe00e800 	.word	0xfe00e800

08003654 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2202      	movs	r2, #2
 8003664:	4013      	ands	r3, r2
 8003666:	2b02      	cmp	r3, #2
 8003668:	d103      	bne.n	8003672 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2200      	movs	r2, #0
 8003670:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	2201      	movs	r2, #1
 800367a:	4013      	ands	r3, r2
 800367c:	2b01      	cmp	r3, #1
 800367e:	d007      	beq.n	8003690 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2101      	movs	r1, #1
 800368c:	430a      	orrs	r2, r1
 800368e:	619a      	str	r2, [r3, #24]
  }
}
 8003690:	46c0      	nop			@ (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b002      	add	sp, #8
 8003696:	bd80      	pop	{r7, pc}

08003698 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	1dfb      	adds	r3, r7, #7
 80036a6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036a8:	e03a      	b.n	8003720 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	6839      	ldr	r1, [r7, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	0018      	movs	r0, r3
 80036b2:	f000 f971 	bl	8003998 <I2C_IsErrorOccurred>
 80036b6:	1e03      	subs	r3, r0, #0
 80036b8:	d001      	beq.n	80036be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e040      	b.n	8003740 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	3301      	adds	r3, #1
 80036c2:	d02d      	beq.n	8003720 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c4:	f7fe fd9a 	bl	80021fc <HAL_GetTick>
 80036c8:	0002      	movs	r2, r0
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d302      	bcc.n	80036da <I2C_WaitOnFlagUntilTimeout+0x42>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d122      	bne.n	8003720 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	4013      	ands	r3, r2
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	425a      	negs	r2, r3
 80036ea:	4153      	adcs	r3, r2
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	001a      	movs	r2, r3
 80036f0:	1dfb      	adds	r3, r7, #7
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d113      	bne.n	8003720 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fc:	2220      	movs	r2, #32
 80036fe:	431a      	orrs	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2241      	movs	r2, #65	@ 0x41
 8003708:	2120      	movs	r1, #32
 800370a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2242      	movs	r2, #66	@ 0x42
 8003710:	2100      	movs	r1, #0
 8003712:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2240      	movs	r2, #64	@ 0x40
 8003718:	2100      	movs	r1, #0
 800371a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e00f      	b.n	8003740 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	4013      	ands	r3, r2
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	425a      	negs	r2, r3
 8003730:	4153      	adcs	r3, r2
 8003732:	b2db      	uxtb	r3, r3
 8003734:	001a      	movs	r2, r3
 8003736:	1dfb      	adds	r3, r7, #7
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d0b5      	beq.n	80036aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	0018      	movs	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	b004      	add	sp, #16
 8003746:	bd80      	pop	{r7, pc}

08003748 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003754:	e032      	b.n	80037bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	0018      	movs	r0, r3
 800375e:	f000 f91b 	bl	8003998 <I2C_IsErrorOccurred>
 8003762:	1e03      	subs	r3, r0, #0
 8003764:	d001      	beq.n	800376a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e030      	b.n	80037cc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	3301      	adds	r3, #1
 800376e:	d025      	beq.n	80037bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003770:	f7fe fd44 	bl	80021fc <HAL_GetTick>
 8003774:	0002      	movs	r2, r0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	429a      	cmp	r2, r3
 800377e:	d302      	bcc.n	8003786 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d11a      	bne.n	80037bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2202      	movs	r2, #2
 800378e:	4013      	ands	r3, r2
 8003790:	2b02      	cmp	r3, #2
 8003792:	d013      	beq.n	80037bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003798:	2220      	movs	r2, #32
 800379a:	431a      	orrs	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2241      	movs	r2, #65	@ 0x41
 80037a4:	2120      	movs	r1, #32
 80037a6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2242      	movs	r2, #66	@ 0x42
 80037ac:	2100      	movs	r1, #0
 80037ae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2240      	movs	r2, #64	@ 0x40
 80037b4:	2100      	movs	r1, #0
 80037b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e007      	b.n	80037cc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	2202      	movs	r2, #2
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d1c5      	bne.n	8003756 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	0018      	movs	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b004      	add	sp, #16
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037e0:	e02f      	b.n	8003842 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 f8d5 	bl	8003998 <I2C_IsErrorOccurred>
 80037ee:	1e03      	subs	r3, r0, #0
 80037f0:	d001      	beq.n	80037f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e02d      	b.n	8003852 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f6:	f7fe fd01 	bl	80021fc <HAL_GetTick>
 80037fa:	0002      	movs	r2, r0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	429a      	cmp	r2, r3
 8003804:	d302      	bcc.n	800380c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d11a      	bne.n	8003842 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2220      	movs	r2, #32
 8003814:	4013      	ands	r3, r2
 8003816:	2b20      	cmp	r3, #32
 8003818:	d013      	beq.n	8003842 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381e:	2220      	movs	r2, #32
 8003820:	431a      	orrs	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2241      	movs	r2, #65	@ 0x41
 800382a:	2120      	movs	r1, #32
 800382c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2242      	movs	r2, #66	@ 0x42
 8003832:	2100      	movs	r1, #0
 8003834:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2240      	movs	r2, #64	@ 0x40
 800383a:	2100      	movs	r1, #0
 800383c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e007      	b.n	8003852 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	2220      	movs	r2, #32
 800384a:	4013      	ands	r3, r2
 800384c:	2b20      	cmp	r3, #32
 800384e:	d1c8      	bne.n	80037e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	0018      	movs	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	b004      	add	sp, #16
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003868:	2317      	movs	r3, #23
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003870:	e07b      	b.n	800396a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	68b9      	ldr	r1, [r7, #8]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	0018      	movs	r0, r3
 800387a:	f000 f88d 	bl	8003998 <I2C_IsErrorOccurred>
 800387e:	1e03      	subs	r3, r0, #0
 8003880:	d003      	beq.n	800388a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8003882:	2317      	movs	r3, #23
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	2201      	movs	r2, #1
 8003888:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	2220      	movs	r2, #32
 8003892:	4013      	ands	r3, r2
 8003894:	2b20      	cmp	r3, #32
 8003896:	d140      	bne.n	800391a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003898:	2117      	movs	r1, #23
 800389a:	187b      	adds	r3, r7, r1
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d13b      	bne.n	800391a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	2204      	movs	r2, #4
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d106      	bne.n	80038be <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80038b8:	187b      	adds	r3, r7, r1
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2210      	movs	r2, #16
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b10      	cmp	r3, #16
 80038ca:	d123      	bne.n	8003914 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2210      	movs	r2, #16
 80038d2:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2204      	movs	r2, #4
 80038d8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2220      	movs	r2, #32
 80038e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4929      	ldr	r1, [pc, #164]	@ (8003994 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80038ee:	400a      	ands	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2241      	movs	r2, #65	@ 0x41
 80038f6:	2120      	movs	r1, #32
 80038f8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2242      	movs	r2, #66	@ 0x42
 80038fe:	2100      	movs	r1, #0
 8003900:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2240      	movs	r2, #64	@ 0x40
 8003906:	2100      	movs	r1, #0
 8003908:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800390a:	2317      	movs	r3, #23
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	2201      	movs	r2, #1
 8003910:	701a      	strb	r2, [r3, #0]
 8003912:	e002      	b.n	800391a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800391a:	f7fe fc6f 	bl	80021fc <HAL_GetTick>
 800391e:	0002      	movs	r2, r0
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	429a      	cmp	r2, r3
 8003928:	d302      	bcc.n	8003930 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d11c      	bne.n	800396a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003930:	2017      	movs	r0, #23
 8003932:	183b      	adds	r3, r7, r0
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d117      	bne.n	800396a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2204      	movs	r2, #4
 8003942:	4013      	ands	r3, r2
 8003944:	2b04      	cmp	r3, #4
 8003946:	d010      	beq.n	800396a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394c:	2220      	movs	r2, #32
 800394e:	431a      	orrs	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2241      	movs	r2, #65	@ 0x41
 8003958:	2120      	movs	r1, #32
 800395a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2240      	movs	r2, #64	@ 0x40
 8003960:	2100      	movs	r1, #0
 8003962:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003964:	183b      	adds	r3, r7, r0
 8003966:	2201      	movs	r2, #1
 8003968:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	2204      	movs	r2, #4
 8003972:	4013      	ands	r3, r2
 8003974:	2b04      	cmp	r3, #4
 8003976:	d005      	beq.n	8003984 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003978:	2317      	movs	r3, #23
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d100      	bne.n	8003984 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003982:	e776      	b.n	8003872 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8003984:	2317      	movs	r3, #23
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	781b      	ldrb	r3, [r3, #0]
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b006      	add	sp, #24
 8003990:	bd80      	pop	{r7, pc}
 8003992:	46c0      	nop			@ (mov r8, r8)
 8003994:	fe00e800 	.word	0xfe00e800

08003998 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	@ 0x28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a4:	2327      	movs	r3, #39	@ 0x27
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	2200      	movs	r2, #0
 80039aa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	2210      	movs	r2, #16
 80039c0:	4013      	ands	r3, r2
 80039c2:	d100      	bne.n	80039c6 <I2C_IsErrorOccurred+0x2e>
 80039c4:	e079      	b.n	8003aba <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2210      	movs	r2, #16
 80039cc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039ce:	e057      	b.n	8003a80 <I2C_IsErrorOccurred+0xe8>
 80039d0:	2227      	movs	r2, #39	@ 0x27
 80039d2:	18bb      	adds	r3, r7, r2
 80039d4:	18ba      	adds	r2, r7, r2
 80039d6:	7812      	ldrb	r2, [r2, #0]
 80039d8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	3301      	adds	r3, #1
 80039de:	d04f      	beq.n	8003a80 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039e0:	f7fe fc0c 	bl	80021fc <HAL_GetTick>
 80039e4:	0002      	movs	r2, r0
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d302      	bcc.n	80039f6 <I2C_IsErrorOccurred+0x5e>
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d144      	bne.n	8003a80 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	2380      	movs	r3, #128	@ 0x80
 80039fe:	01db      	lsls	r3, r3, #7
 8003a00:	4013      	ands	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a04:	2013      	movs	r0, #19
 8003a06:	183b      	adds	r3, r7, r0
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	2142      	movs	r1, #66	@ 0x42
 8003a0c:	5c52      	ldrb	r2, [r2, r1]
 8003a0e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	2380      	movs	r3, #128	@ 0x80
 8003a18:	021b      	lsls	r3, r3, #8
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	2380      	movs	r3, #128	@ 0x80
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d126      	bne.n	8003a72 <I2C_IsErrorOccurred+0xda>
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	2380      	movs	r3, #128	@ 0x80
 8003a28:	01db      	lsls	r3, r3, #7
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d021      	beq.n	8003a72 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003a2e:	183b      	adds	r3, r7, r0
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d01d      	beq.n	8003a72 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2180      	movs	r1, #128	@ 0x80
 8003a42:	01c9      	lsls	r1, r1, #7
 8003a44:	430a      	orrs	r2, r1
 8003a46:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a48:	f7fe fbd8 	bl	80021fc <HAL_GetTick>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a50:	e00f      	b.n	8003a72 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a52:	f7fe fbd3 	bl	80021fc <HAL_GetTick>
 8003a56:	0002      	movs	r2, r0
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b19      	cmp	r3, #25
 8003a5e:	d908      	bls.n	8003a72 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	2220      	movs	r2, #32
 8003a64:	4313      	orrs	r3, r2
 8003a66:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a68:	2327      	movs	r3, #39	@ 0x27
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	701a      	strb	r2, [r3, #0]

              break;
 8003a70:	e006      	b.n	8003a80 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d1e8      	bne.n	8003a52 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	2220      	movs	r2, #32
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b20      	cmp	r3, #32
 8003a8c:	d004      	beq.n	8003a98 <I2C_IsErrorOccurred+0x100>
 8003a8e:	2327      	movs	r3, #39	@ 0x27
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d09b      	beq.n	80039d0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a98:	2327      	movs	r3, #39	@ 0x27
 8003a9a:	18fb      	adds	r3, r7, r3
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d103      	bne.n	8003aaa <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	2204      	movs	r2, #4
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ab2:	2327      	movs	r3, #39	@ 0x27
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	2380      	movs	r3, #128	@ 0x80
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d00c      	beq.n	8003ae6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2280      	movs	r2, #128	@ 0x80
 8003ada:	0052      	lsls	r2, r2, #1
 8003adc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ade:	2327      	movs	r3, #39	@ 0x27
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	2380      	movs	r3, #128	@ 0x80
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4013      	ands	r3, r2
 8003aee:	d00c      	beq.n	8003b0a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	2208      	movs	r2, #8
 8003af4:	4313      	orrs	r3, r2
 8003af6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2280      	movs	r2, #128	@ 0x80
 8003afe:	00d2      	lsls	r2, r2, #3
 8003b00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b02:	2327      	movs	r3, #39	@ 0x27
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	2201      	movs	r2, #1
 8003b08:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	2380      	movs	r3, #128	@ 0x80
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4013      	ands	r3, r2
 8003b12:	d00c      	beq.n	8003b2e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	2202      	movs	r2, #2
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2280      	movs	r2, #128	@ 0x80
 8003b22:	0092      	lsls	r2, r2, #2
 8003b24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b26:	2327      	movs	r3, #39	@ 0x27
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003b2e:	2327      	movs	r3, #39	@ 0x27
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01d      	beq.n	8003b74 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f7ff fd8a 	bl	8003654 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	490e      	ldr	r1, [pc, #56]	@ (8003b84 <I2C_IsErrorOccurred+0x1ec>)
 8003b4c:	400a      	ands	r2, r1
 8003b4e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2241      	movs	r2, #65	@ 0x41
 8003b60:	2120      	movs	r1, #32
 8003b62:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2242      	movs	r2, #66	@ 0x42
 8003b68:	2100      	movs	r1, #0
 8003b6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2240      	movs	r2, #64	@ 0x40
 8003b70:	2100      	movs	r1, #0
 8003b72:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003b74:	2327      	movs	r3, #39	@ 0x27
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	781b      	ldrb	r3, [r3, #0]
}
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	b00a      	add	sp, #40	@ 0x28
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	46c0      	nop			@ (mov r8, r8)
 8003b84:	fe00e800 	.word	0xfe00e800

08003b88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b88:	b590      	push	{r4, r7, lr}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	0008      	movs	r0, r1
 8003b92:	0011      	movs	r1, r2
 8003b94:	607b      	str	r3, [r7, #4]
 8003b96:	240a      	movs	r4, #10
 8003b98:	193b      	adds	r3, r7, r4
 8003b9a:	1c02      	adds	r2, r0, #0
 8003b9c:	801a      	strh	r2, [r3, #0]
 8003b9e:	2009      	movs	r0, #9
 8003ba0:	183b      	adds	r3, r7, r0
 8003ba2:	1c0a      	adds	r2, r1, #0
 8003ba4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ba6:	193b      	adds	r3, r7, r4
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	059b      	lsls	r3, r3, #22
 8003bac:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bae:	183b      	adds	r3, r7, r0
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	0419      	lsls	r1, r3, #16
 8003bb4:	23ff      	movs	r3, #255	@ 0xff
 8003bb6:	041b      	lsls	r3, r3, #16
 8003bb8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bba:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bd2:	0d51      	lsrs	r1, r2, #21
 8003bd4:	2280      	movs	r2, #128	@ 0x80
 8003bd6:	00d2      	lsls	r2, r2, #3
 8003bd8:	400a      	ands	r2, r1
 8003bda:	4907      	ldr	r1, [pc, #28]	@ (8003bf8 <I2C_TransferConfig+0x70>)
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	43d2      	mvns	r2, r2
 8003be0:	401a      	ands	r2, r3
 8003be2:	0011      	movs	r1, r2
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bee:	46c0      	nop			@ (mov r8, r8)
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b007      	add	sp, #28
 8003bf4:	bd90      	pop	{r4, r7, pc}
 8003bf6:	46c0      	nop			@ (mov r8, r8)
 8003bf8:	03ff63ff 	.word	0x03ff63ff

08003bfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2241      	movs	r2, #65	@ 0x41
 8003c0a:	5c9b      	ldrb	r3, [r3, r2]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	d138      	bne.n	8003c84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2240      	movs	r2, #64	@ 0x40
 8003c16:	5c9b      	ldrb	r3, [r3, r2]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e032      	b.n	8003c86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2240      	movs	r2, #64	@ 0x40
 8003c24:	2101      	movs	r1, #1
 8003c26:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2241      	movs	r2, #65	@ 0x41
 8003c2c:	2124      	movs	r1, #36	@ 0x24
 8003c2e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	438a      	bics	r2, r1
 8003c3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4911      	ldr	r1, [pc, #68]	@ (8003c90 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003c4c:	400a      	ands	r2, r1
 8003c4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6819      	ldr	r1, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2241      	movs	r2, #65	@ 0x41
 8003c74:	2120      	movs	r1, #32
 8003c76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2240      	movs	r2, #64	@ 0x40
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	e000      	b.n	8003c86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c84:	2302      	movs	r3, #2
  }
}
 8003c86:	0018      	movs	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b002      	add	sp, #8
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	46c0      	nop			@ (mov r8, r8)
 8003c90:	ffffefff 	.word	0xffffefff

08003c94 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2241      	movs	r2, #65	@ 0x41
 8003ca2:	5c9b      	ldrb	r3, [r3, r2]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d139      	bne.n	8003d1e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2240      	movs	r2, #64	@ 0x40
 8003cae:	5c9b      	ldrb	r3, [r3, r2]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e033      	b.n	8003d20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2240      	movs	r2, #64	@ 0x40
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2241      	movs	r2, #65	@ 0x41
 8003cc4:	2124      	movs	r1, #36	@ 0x24
 8003cc6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	438a      	bics	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4a11      	ldr	r2, [pc, #68]	@ (8003d28 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2101      	movs	r1, #1
 8003d06:	430a      	orrs	r2, r1
 8003d08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2241      	movs	r2, #65	@ 0x41
 8003d0e:	2120      	movs	r1, #32
 8003d10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2240      	movs	r2, #64	@ 0x40
 8003d16:	2100      	movs	r1, #0
 8003d18:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e000      	b.n	8003d20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d1e:	2302      	movs	r3, #2
  }
}
 8003d20:	0018      	movs	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b004      	add	sp, #16
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	fffff0ff 	.word	0xfffff0ff

08003d2c <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d30:	4b04      	ldr	r3, [pc, #16]	@ (8003d44 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	4b03      	ldr	r3, [pc, #12]	@ (8003d44 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003d36:	2180      	movs	r1, #128	@ 0x80
 8003d38:	0049      	lsls	r1, r1, #1
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	601a      	str	r2, [r3, #0]
}
 8003d3e:	46c0      	nop			@ (mov r8, r8)
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40007000 	.word	0x40007000

08003d48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003d50:	4b19      	ldr	r3, [pc, #100]	@ (8003db8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a19      	ldr	r2, [pc, #100]	@ (8003dbc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	0019      	movs	r1, r3
 8003d5a:	4b17      	ldr	r3, [pc, #92]	@ (8003db8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	2380      	movs	r3, #128	@ 0x80
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d11f      	bne.n	8003dac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003d6c:	4b14      	ldr	r3, [pc, #80]	@ (8003dc0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	0013      	movs	r3, r2
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	189b      	adds	r3, r3, r2
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	4912      	ldr	r1, [pc, #72]	@ (8003dc4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7fc f9c2 	bl	8000104 <__udivsi3>
 8003d80:	0003      	movs	r3, r0
 8003d82:	3301      	adds	r3, #1
 8003d84:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d86:	e008      	b.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	e001      	b.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e009      	b.n	8003dae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d9a:	4b07      	ldr	r3, [pc, #28]	@ (8003db8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	2380      	movs	r3, #128	@ 0x80
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	401a      	ands	r2, r3
 8003da4:	2380      	movs	r3, #128	@ 0x80
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d0ed      	beq.n	8003d88 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	0018      	movs	r0, r3
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b004      	add	sp, #16
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	46c0      	nop			@ (mov r8, r8)
 8003db8:	40007000 	.word	0x40007000
 8003dbc:	fffff9ff 	.word	0xfffff9ff
 8003dc0:	20000048 	.word	0x20000048
 8003dc4:	000f4240 	.word	0x000f4240

08003dc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e2fe      	b.n	80043d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2201      	movs	r2, #1
 8003de0:	4013      	ands	r3, r2
 8003de2:	d100      	bne.n	8003de6 <HAL_RCC_OscConfig+0x1e>
 8003de4:	e07c      	b.n	8003ee0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003de6:	4bc3      	ldr	r3, [pc, #780]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2238      	movs	r2, #56	@ 0x38
 8003dec:	4013      	ands	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003df0:	4bc0      	ldr	r3, [pc, #768]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	2203      	movs	r2, #3
 8003df6:	4013      	ands	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d102      	bne.n	8003e06 <HAL_RCC_OscConfig+0x3e>
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d002      	beq.n	8003e0c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d10b      	bne.n	8003e24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e0c:	4bb9      	ldr	r3, [pc, #740]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	2380      	movs	r3, #128	@ 0x80
 8003e12:	029b      	lsls	r3, r3, #10
 8003e14:	4013      	ands	r3, r2
 8003e16:	d062      	beq.n	8003ede <HAL_RCC_OscConfig+0x116>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d15e      	bne.n	8003ede <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e2d9      	b.n	80043d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	2380      	movs	r3, #128	@ 0x80
 8003e2a:	025b      	lsls	r3, r3, #9
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d107      	bne.n	8003e40 <HAL_RCC_OscConfig+0x78>
 8003e30:	4bb0      	ldr	r3, [pc, #704]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	4baf      	ldr	r3, [pc, #700]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003e36:	2180      	movs	r1, #128	@ 0x80
 8003e38:	0249      	lsls	r1, r1, #9
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	e020      	b.n	8003e82 <HAL_RCC_OscConfig+0xba>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	23a0      	movs	r3, #160	@ 0xa0
 8003e46:	02db      	lsls	r3, r3, #11
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d10e      	bne.n	8003e6a <HAL_RCC_OscConfig+0xa2>
 8003e4c:	4ba9      	ldr	r3, [pc, #676]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4ba8      	ldr	r3, [pc, #672]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003e52:	2180      	movs	r1, #128	@ 0x80
 8003e54:	02c9      	lsls	r1, r1, #11
 8003e56:	430a      	orrs	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	4ba6      	ldr	r3, [pc, #664]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4ba5      	ldr	r3, [pc, #660]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003e60:	2180      	movs	r1, #128	@ 0x80
 8003e62:	0249      	lsls	r1, r1, #9
 8003e64:	430a      	orrs	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	e00b      	b.n	8003e82 <HAL_RCC_OscConfig+0xba>
 8003e6a:	4ba2      	ldr	r3, [pc, #648]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	4ba1      	ldr	r3, [pc, #644]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003e70:	49a1      	ldr	r1, [pc, #644]	@ (80040f8 <HAL_RCC_OscConfig+0x330>)
 8003e72:	400a      	ands	r2, r1
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	4b9f      	ldr	r3, [pc, #636]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	4b9e      	ldr	r3, [pc, #632]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003e7c:	499f      	ldr	r1, [pc, #636]	@ (80040fc <HAL_RCC_OscConfig+0x334>)
 8003e7e:	400a      	ands	r2, r1
 8003e80:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d014      	beq.n	8003eb4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8a:	f7fe f9b7 	bl	80021fc <HAL_GetTick>
 8003e8e:	0003      	movs	r3, r0
 8003e90:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e94:	f7fe f9b2 	bl	80021fc <HAL_GetTick>
 8003e98:	0002      	movs	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b64      	cmp	r3, #100	@ 0x64
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e298      	b.n	80043d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ea6:	4b93      	ldr	r3, [pc, #588]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	2380      	movs	r3, #128	@ 0x80
 8003eac:	029b      	lsls	r3, r3, #10
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0xcc>
 8003eb2:	e015      	b.n	8003ee0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fe f9a2 	bl	80021fc <HAL_GetTick>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ebe:	f7fe f99d 	bl	80021fc <HAL_GetTick>
 8003ec2:	0002      	movs	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b64      	cmp	r3, #100	@ 0x64
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e283      	b.n	80043d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ed0:	4b88      	ldr	r3, [pc, #544]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	2380      	movs	r3, #128	@ 0x80
 8003ed6:	029b      	lsls	r3, r3, #10
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d1f0      	bne.n	8003ebe <HAL_RCC_OscConfig+0xf6>
 8003edc:	e000      	b.n	8003ee0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ede:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	d100      	bne.n	8003eec <HAL_RCC_OscConfig+0x124>
 8003eea:	e099      	b.n	8004020 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eec:	4b81      	ldr	r3, [pc, #516]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2238      	movs	r2, #56	@ 0x38
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	2203      	movs	r2, #3
 8003efc:	4013      	ands	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b10      	cmp	r3, #16
 8003f04:	d102      	bne.n	8003f0c <HAL_RCC_OscConfig+0x144>
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d002      	beq.n	8003f12 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d135      	bne.n	8003f7e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f12:	4b78      	ldr	r3, [pc, #480]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	2380      	movs	r3, #128	@ 0x80
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d005      	beq.n	8003f2a <HAL_RCC_OscConfig+0x162>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e256      	b.n	80043d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2a:	4b72      	ldr	r3, [pc, #456]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4a74      	ldr	r2, [pc, #464]	@ (8004100 <HAL_RCC_OscConfig+0x338>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	0019      	movs	r1, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	021a      	lsls	r2, r3, #8
 8003f3a:	4b6e      	ldr	r3, [pc, #440]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d112      	bne.n	8003f6c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f46:	4b6b      	ldr	r3, [pc, #428]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a6e      	ldr	r2, [pc, #440]	@ (8004104 <HAL_RCC_OscConfig+0x33c>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	0019      	movs	r1, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	4b67      	ldr	r3, [pc, #412]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003f56:	430a      	orrs	r2, r1
 8003f58:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003f5a:	4b66      	ldr	r3, [pc, #408]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	0adb      	lsrs	r3, r3, #11
 8003f60:	2207      	movs	r2, #7
 8003f62:	4013      	ands	r3, r2
 8003f64:	4a68      	ldr	r2, [pc, #416]	@ (8004108 <HAL_RCC_OscConfig+0x340>)
 8003f66:	40da      	lsrs	r2, r3
 8003f68:	4b68      	ldr	r3, [pc, #416]	@ (800410c <HAL_RCC_OscConfig+0x344>)
 8003f6a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f6c:	4b68      	ldr	r3, [pc, #416]	@ (8004110 <HAL_RCC_OscConfig+0x348>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	0018      	movs	r0, r3
 8003f72:	f7fe f8e7 	bl	8002144 <HAL_InitTick>
 8003f76:	1e03      	subs	r3, r0, #0
 8003f78:	d051      	beq.n	800401e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e22c      	b.n	80043d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d030      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f86:	4b5b      	ldr	r3, [pc, #364]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a5e      	ldr	r2, [pc, #376]	@ (8004104 <HAL_RCC_OscConfig+0x33c>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	0019      	movs	r1, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	4b57      	ldr	r3, [pc, #348]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003f96:	430a      	orrs	r2, r1
 8003f98:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003f9a:	4b56      	ldr	r3, [pc, #344]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4b55      	ldr	r3, [pc, #340]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003fa0:	2180      	movs	r1, #128	@ 0x80
 8003fa2:	0049      	lsls	r1, r1, #1
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fe f928 	bl	80021fc <HAL_GetTick>
 8003fac:	0003      	movs	r3, r0
 8003fae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fb2:	f7fe f923 	bl	80021fc <HAL_GetTick>
 8003fb6:	0002      	movs	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e209      	b.n	80043d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fc4:	4b4b      	ldr	r3, [pc, #300]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	2380      	movs	r3, #128	@ 0x80
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd0:	4b48      	ldr	r3, [pc, #288]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	4a4a      	ldr	r2, [pc, #296]	@ (8004100 <HAL_RCC_OscConfig+0x338>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	0019      	movs	r1, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	021a      	lsls	r2, r3, #8
 8003fe0:	4b44      	ldr	r3, [pc, #272]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
 8003fe6:	e01b      	b.n	8004020 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003fe8:	4b42      	ldr	r3, [pc, #264]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	4b41      	ldr	r3, [pc, #260]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8003fee:	4949      	ldr	r1, [pc, #292]	@ (8004114 <HAL_RCC_OscConfig+0x34c>)
 8003ff0:	400a      	ands	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff4:	f7fe f902 	bl	80021fc <HAL_GetTick>
 8003ff8:	0003      	movs	r3, r0
 8003ffa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ffe:	f7fe f8fd 	bl	80021fc <HAL_GetTick>
 8004002:	0002      	movs	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e1e3      	b.n	80043d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004010:	4b38      	ldr	r3, [pc, #224]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	2380      	movs	r3, #128	@ 0x80
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	4013      	ands	r3, r2
 800401a:	d1f0      	bne.n	8003ffe <HAL_RCC_OscConfig+0x236>
 800401c:	e000      	b.n	8004020 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800401e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2208      	movs	r2, #8
 8004026:	4013      	ands	r3, r2
 8004028:	d047      	beq.n	80040ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800402a:	4b32      	ldr	r3, [pc, #200]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2238      	movs	r2, #56	@ 0x38
 8004030:	4013      	ands	r3, r2
 8004032:	2b18      	cmp	r3, #24
 8004034:	d10a      	bne.n	800404c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004036:	4b2f      	ldr	r3, [pc, #188]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8004038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800403a:	2202      	movs	r2, #2
 800403c:	4013      	ands	r3, r2
 800403e:	d03c      	beq.n	80040ba <HAL_RCC_OscConfig+0x2f2>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d138      	bne.n	80040ba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e1c5      	b.n	80043d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d019      	beq.n	8004088 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004054:	4b27      	ldr	r3, [pc, #156]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 8004056:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004058:	4b26      	ldr	r3, [pc, #152]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 800405a:	2101      	movs	r1, #1
 800405c:	430a      	orrs	r2, r1
 800405e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004060:	f7fe f8cc 	bl	80021fc <HAL_GetTick>
 8004064:	0003      	movs	r3, r0
 8004066:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800406a:	f7fe f8c7 	bl	80021fc <HAL_GetTick>
 800406e:	0002      	movs	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e1ad      	b.n	80043d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800407c:	4b1d      	ldr	r3, [pc, #116]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 800407e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004080:	2202      	movs	r2, #2
 8004082:	4013      	ands	r3, r2
 8004084:	d0f1      	beq.n	800406a <HAL_RCC_OscConfig+0x2a2>
 8004086:	e018      	b.n	80040ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004088:	4b1a      	ldr	r3, [pc, #104]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 800408a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800408c:	4b19      	ldr	r3, [pc, #100]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 800408e:	2101      	movs	r1, #1
 8004090:	438a      	bics	r2, r1
 8004092:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004094:	f7fe f8b2 	bl	80021fc <HAL_GetTick>
 8004098:	0003      	movs	r3, r0
 800409a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800409e:	f7fe f8ad 	bl	80021fc <HAL_GetTick>
 80040a2:	0002      	movs	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e193      	b.n	80043d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040b0:	4b10      	ldr	r3, [pc, #64]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 80040b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b4:	2202      	movs	r2, #2
 80040b6:	4013      	ands	r3, r2
 80040b8:	d1f1      	bne.n	800409e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2204      	movs	r2, #4
 80040c0:	4013      	ands	r3, r2
 80040c2:	d100      	bne.n	80040c6 <HAL_RCC_OscConfig+0x2fe>
 80040c4:	e0c6      	b.n	8004254 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040c6:	231f      	movs	r3, #31
 80040c8:	18fb      	adds	r3, r7, r3
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80040ce:	4b09      	ldr	r3, [pc, #36]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2238      	movs	r2, #56	@ 0x38
 80040d4:	4013      	ands	r3, r2
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d11e      	bne.n	8004118 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80040da:	4b06      	ldr	r3, [pc, #24]	@ (80040f4 <HAL_RCC_OscConfig+0x32c>)
 80040dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040de:	2202      	movs	r2, #2
 80040e0:	4013      	ands	r3, r2
 80040e2:	d100      	bne.n	80040e6 <HAL_RCC_OscConfig+0x31e>
 80040e4:	e0b6      	b.n	8004254 <HAL_RCC_OscConfig+0x48c>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d000      	beq.n	80040f0 <HAL_RCC_OscConfig+0x328>
 80040ee:	e0b1      	b.n	8004254 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e171      	b.n	80043d8 <HAL_RCC_OscConfig+0x610>
 80040f4:	40021000 	.word	0x40021000
 80040f8:	fffeffff 	.word	0xfffeffff
 80040fc:	fffbffff 	.word	0xfffbffff
 8004100:	ffff80ff 	.word	0xffff80ff
 8004104:	ffffc7ff 	.word	0xffffc7ff
 8004108:	00f42400 	.word	0x00f42400
 800410c:	20000048 	.word	0x20000048
 8004110:	2000004c 	.word	0x2000004c
 8004114:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004118:	4bb1      	ldr	r3, [pc, #708]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 800411a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800411c:	2380      	movs	r3, #128	@ 0x80
 800411e:	055b      	lsls	r3, r3, #21
 8004120:	4013      	ands	r3, r2
 8004122:	d101      	bne.n	8004128 <HAL_RCC_OscConfig+0x360>
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <HAL_RCC_OscConfig+0x362>
 8004128:	2300      	movs	r3, #0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d011      	beq.n	8004152 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800412e:	4bac      	ldr	r3, [pc, #688]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 8004130:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004132:	4bab      	ldr	r3, [pc, #684]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 8004134:	2180      	movs	r1, #128	@ 0x80
 8004136:	0549      	lsls	r1, r1, #21
 8004138:	430a      	orrs	r2, r1
 800413a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800413c:	4ba8      	ldr	r3, [pc, #672]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 800413e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004140:	2380      	movs	r3, #128	@ 0x80
 8004142:	055b      	lsls	r3, r3, #21
 8004144:	4013      	ands	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800414a:	231f      	movs	r3, #31
 800414c:	18fb      	adds	r3, r7, r3
 800414e:	2201      	movs	r2, #1
 8004150:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004152:	4ba4      	ldr	r3, [pc, #656]	@ (80043e4 <HAL_RCC_OscConfig+0x61c>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	2380      	movs	r3, #128	@ 0x80
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	4013      	ands	r3, r2
 800415c:	d11a      	bne.n	8004194 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800415e:	4ba1      	ldr	r3, [pc, #644]	@ (80043e4 <HAL_RCC_OscConfig+0x61c>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4ba0      	ldr	r3, [pc, #640]	@ (80043e4 <HAL_RCC_OscConfig+0x61c>)
 8004164:	2180      	movs	r1, #128	@ 0x80
 8004166:	0049      	lsls	r1, r1, #1
 8004168:	430a      	orrs	r2, r1
 800416a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800416c:	f7fe f846 	bl	80021fc <HAL_GetTick>
 8004170:	0003      	movs	r3, r0
 8004172:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004176:	f7fe f841 	bl	80021fc <HAL_GetTick>
 800417a:	0002      	movs	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e127      	b.n	80043d8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004188:	4b96      	ldr	r3, [pc, #600]	@ (80043e4 <HAL_RCC_OscConfig+0x61c>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	2380      	movs	r3, #128	@ 0x80
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	4013      	ands	r3, r2
 8004192:	d0f0      	beq.n	8004176 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d106      	bne.n	80041aa <HAL_RCC_OscConfig+0x3e2>
 800419c:	4b90      	ldr	r3, [pc, #576]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 800419e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80041a0:	4b8f      	ldr	r3, [pc, #572]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 80041a2:	2101      	movs	r1, #1
 80041a4:	430a      	orrs	r2, r1
 80041a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80041a8:	e01c      	b.n	80041e4 <HAL_RCC_OscConfig+0x41c>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	2b05      	cmp	r3, #5
 80041b0:	d10c      	bne.n	80041cc <HAL_RCC_OscConfig+0x404>
 80041b2:	4b8b      	ldr	r3, [pc, #556]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 80041b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80041b6:	4b8a      	ldr	r3, [pc, #552]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 80041b8:	2104      	movs	r1, #4
 80041ba:	430a      	orrs	r2, r1
 80041bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80041be:	4b88      	ldr	r3, [pc, #544]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 80041c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80041c2:	4b87      	ldr	r3, [pc, #540]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 80041c4:	2101      	movs	r1, #1
 80041c6:	430a      	orrs	r2, r1
 80041c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80041ca:	e00b      	b.n	80041e4 <HAL_RCC_OscConfig+0x41c>
 80041cc:	4b84      	ldr	r3, [pc, #528]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 80041ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80041d0:	4b83      	ldr	r3, [pc, #524]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 80041d2:	2101      	movs	r1, #1
 80041d4:	438a      	bics	r2, r1
 80041d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80041d8:	4b81      	ldr	r3, [pc, #516]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 80041da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80041dc:	4b80      	ldr	r3, [pc, #512]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 80041de:	2104      	movs	r1, #4
 80041e0:	438a      	bics	r2, r1
 80041e2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d014      	beq.n	8004216 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ec:	f7fe f806 	bl	80021fc <HAL_GetTick>
 80041f0:	0003      	movs	r3, r0
 80041f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041f4:	e009      	b.n	800420a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f6:	f7fe f801 	bl	80021fc <HAL_GetTick>
 80041fa:	0002      	movs	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	4a79      	ldr	r2, [pc, #484]	@ (80043e8 <HAL_RCC_OscConfig+0x620>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e0e6      	b.n	80043d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800420a:	4b75      	ldr	r3, [pc, #468]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 800420c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800420e:	2202      	movs	r2, #2
 8004210:	4013      	ands	r3, r2
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x42e>
 8004214:	e013      	b.n	800423e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004216:	f7fd fff1 	bl	80021fc <HAL_GetTick>
 800421a:	0003      	movs	r3, r0
 800421c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800421e:	e009      	b.n	8004234 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004220:	f7fd ffec 	bl	80021fc <HAL_GetTick>
 8004224:	0002      	movs	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	4a6f      	ldr	r2, [pc, #444]	@ (80043e8 <HAL_RCC_OscConfig+0x620>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e0d1      	b.n	80043d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004234:	4b6a      	ldr	r3, [pc, #424]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 8004236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004238:	2202      	movs	r2, #2
 800423a:	4013      	ands	r3, r2
 800423c:	d1f0      	bne.n	8004220 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800423e:	231f      	movs	r3, #31
 8004240:	18fb      	adds	r3, r7, r3
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d105      	bne.n	8004254 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004248:	4b65      	ldr	r3, [pc, #404]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 800424a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800424c:	4b64      	ldr	r3, [pc, #400]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 800424e:	4967      	ldr	r1, [pc, #412]	@ (80043ec <HAL_RCC_OscConfig+0x624>)
 8004250:	400a      	ands	r2, r1
 8004252:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d100      	bne.n	800425e <HAL_RCC_OscConfig+0x496>
 800425c:	e0bb      	b.n	80043d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800425e:	4b60      	ldr	r3, [pc, #384]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2238      	movs	r2, #56	@ 0x38
 8004264:	4013      	ands	r3, r2
 8004266:	2b10      	cmp	r3, #16
 8004268:	d100      	bne.n	800426c <HAL_RCC_OscConfig+0x4a4>
 800426a:	e07b      	b.n	8004364 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d156      	bne.n	8004322 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004274:	4b5a      	ldr	r3, [pc, #360]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	4b59      	ldr	r3, [pc, #356]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 800427a:	495d      	ldr	r1, [pc, #372]	@ (80043f0 <HAL_RCC_OscConfig+0x628>)
 800427c:	400a      	ands	r2, r1
 800427e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fd ffbc 	bl	80021fc <HAL_GetTick>
 8004284:	0003      	movs	r3, r0
 8004286:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800428a:	f7fd ffb7 	bl	80021fc <HAL_GetTick>
 800428e:	0002      	movs	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e09d      	b.n	80043d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800429c:	4b50      	ldr	r3, [pc, #320]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	2380      	movs	r3, #128	@ 0x80
 80042a2:	049b      	lsls	r3, r3, #18
 80042a4:	4013      	ands	r3, r2
 80042a6:	d1f0      	bne.n	800428a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a8:	4b4d      	ldr	r3, [pc, #308]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4a51      	ldr	r2, [pc, #324]	@ (80043f4 <HAL_RCC_OscConfig+0x62c>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	0019      	movs	r1, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1a      	ldr	r2, [r3, #32]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c8:	431a      	orrs	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d4:	431a      	orrs	r2, r3
 80042d6:	4b42      	ldr	r3, [pc, #264]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 80042d8:	430a      	orrs	r2, r1
 80042da:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042dc:	4b40      	ldr	r3, [pc, #256]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4b3f      	ldr	r3, [pc, #252]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 80042e2:	2180      	movs	r1, #128	@ 0x80
 80042e4:	0449      	lsls	r1, r1, #17
 80042e6:	430a      	orrs	r2, r1
 80042e8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80042ea:	4b3d      	ldr	r3, [pc, #244]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	4b3c      	ldr	r3, [pc, #240]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 80042f0:	2180      	movs	r1, #128	@ 0x80
 80042f2:	0549      	lsls	r1, r1, #21
 80042f4:	430a      	orrs	r2, r1
 80042f6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f8:	f7fd ff80 	bl	80021fc <HAL_GetTick>
 80042fc:	0003      	movs	r3, r0
 80042fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004302:	f7fd ff7b 	bl	80021fc <HAL_GetTick>
 8004306:	0002      	movs	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e061      	b.n	80043d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004314:	4b32      	ldr	r3, [pc, #200]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	2380      	movs	r3, #128	@ 0x80
 800431a:	049b      	lsls	r3, r3, #18
 800431c:	4013      	ands	r3, r2
 800431e:	d0f0      	beq.n	8004302 <HAL_RCC_OscConfig+0x53a>
 8004320:	e059      	b.n	80043d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004322:	4b2f      	ldr	r3, [pc, #188]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	4b2e      	ldr	r3, [pc, #184]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 8004328:	4931      	ldr	r1, [pc, #196]	@ (80043f0 <HAL_RCC_OscConfig+0x628>)
 800432a:	400a      	ands	r2, r1
 800432c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432e:	f7fd ff65 	bl	80021fc <HAL_GetTick>
 8004332:	0003      	movs	r3, r0
 8004334:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004338:	f7fd ff60 	bl	80021fc <HAL_GetTick>
 800433c:	0002      	movs	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e046      	b.n	80043d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800434a:	4b25      	ldr	r3, [pc, #148]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	2380      	movs	r3, #128	@ 0x80
 8004350:	049b      	lsls	r3, r3, #18
 8004352:	4013      	ands	r3, r2
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004356:	4b22      	ldr	r3, [pc, #136]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	4b21      	ldr	r3, [pc, #132]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 800435c:	4926      	ldr	r1, [pc, #152]	@ (80043f8 <HAL_RCC_OscConfig+0x630>)
 800435e:	400a      	ands	r2, r1
 8004360:	60da      	str	r2, [r3, #12]
 8004362:	e038      	b.n	80043d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e033      	b.n	80043d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004370:	4b1b      	ldr	r3, [pc, #108]	@ (80043e0 <HAL_RCC_OscConfig+0x618>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2203      	movs	r2, #3
 800437a:	401a      	ands	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	429a      	cmp	r2, r3
 8004382:	d126      	bne.n	80043d2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2270      	movs	r2, #112	@ 0x70
 8004388:	401a      	ands	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800438e:	429a      	cmp	r2, r3
 8004390:	d11f      	bne.n	80043d2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	23fe      	movs	r3, #254	@ 0xfe
 8004396:	01db      	lsls	r3, r3, #7
 8004398:	401a      	ands	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d116      	bne.n	80043d2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	23f8      	movs	r3, #248	@ 0xf8
 80043a8:	039b      	lsls	r3, r3, #14
 80043aa:	401a      	ands	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d10e      	bne.n	80043d2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	23e0      	movs	r3, #224	@ 0xe0
 80043b8:	051b      	lsls	r3, r3, #20
 80043ba:	401a      	ands	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d106      	bne.n	80043d2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	0f5b      	lsrs	r3, r3, #29
 80043c8:	075a      	lsls	r2, r3, #29
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d001      	beq.n	80043d6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e000      	b.n	80043d8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	0018      	movs	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	b008      	add	sp, #32
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40007000 	.word	0x40007000
 80043e8:	00001388 	.word	0x00001388
 80043ec:	efffffff 	.word	0xefffffff
 80043f0:	feffffff 	.word	0xfeffffff
 80043f4:	11c1808c 	.word	0x11c1808c
 80043f8:	eefefffc 	.word	0xeefefffc

080043fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e0e9      	b.n	80045e4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004410:	4b76      	ldr	r3, [pc, #472]	@ (80045ec <HAL_RCC_ClockConfig+0x1f0>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2207      	movs	r2, #7
 8004416:	4013      	ands	r3, r2
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d91e      	bls.n	800445c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441e:	4b73      	ldr	r3, [pc, #460]	@ (80045ec <HAL_RCC_ClockConfig+0x1f0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2207      	movs	r2, #7
 8004424:	4393      	bics	r3, r2
 8004426:	0019      	movs	r1, r3
 8004428:	4b70      	ldr	r3, [pc, #448]	@ (80045ec <HAL_RCC_ClockConfig+0x1f0>)
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004430:	f7fd fee4 	bl	80021fc <HAL_GetTick>
 8004434:	0003      	movs	r3, r0
 8004436:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004438:	e009      	b.n	800444e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800443a:	f7fd fedf 	bl	80021fc <HAL_GetTick>
 800443e:	0002      	movs	r2, r0
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	4a6a      	ldr	r2, [pc, #424]	@ (80045f0 <HAL_RCC_ClockConfig+0x1f4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e0ca      	b.n	80045e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800444e:	4b67      	ldr	r3, [pc, #412]	@ (80045ec <HAL_RCC_ClockConfig+0x1f0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2207      	movs	r2, #7
 8004454:	4013      	ands	r3, r2
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d1ee      	bne.n	800443a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2202      	movs	r2, #2
 8004462:	4013      	ands	r3, r2
 8004464:	d015      	beq.n	8004492 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2204      	movs	r2, #4
 800446c:	4013      	ands	r3, r2
 800446e:	d006      	beq.n	800447e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004470:	4b60      	ldr	r3, [pc, #384]	@ (80045f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	4b5f      	ldr	r3, [pc, #380]	@ (80045f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004476:	21e0      	movs	r1, #224	@ 0xe0
 8004478:	01c9      	lsls	r1, r1, #7
 800447a:	430a      	orrs	r2, r1
 800447c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800447e:	4b5d      	ldr	r3, [pc, #372]	@ (80045f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	4a5d      	ldr	r2, [pc, #372]	@ (80045f8 <HAL_RCC_ClockConfig+0x1fc>)
 8004484:	4013      	ands	r3, r2
 8004486:	0019      	movs	r1, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	4b59      	ldr	r3, [pc, #356]	@ (80045f4 <HAL_RCC_ClockConfig+0x1f8>)
 800448e:	430a      	orrs	r2, r1
 8004490:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2201      	movs	r2, #1
 8004498:	4013      	ands	r3, r2
 800449a:	d057      	beq.n	800454c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d107      	bne.n	80044b4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044a4:	4b53      	ldr	r3, [pc, #332]	@ (80045f4 <HAL_RCC_ClockConfig+0x1f8>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	2380      	movs	r3, #128	@ 0x80
 80044aa:	029b      	lsls	r3, r3, #10
 80044ac:	4013      	ands	r3, r2
 80044ae:	d12b      	bne.n	8004508 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e097      	b.n	80045e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d107      	bne.n	80044cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044bc:	4b4d      	ldr	r3, [pc, #308]	@ (80045f4 <HAL_RCC_ClockConfig+0x1f8>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	2380      	movs	r3, #128	@ 0x80
 80044c2:	049b      	lsls	r3, r3, #18
 80044c4:	4013      	ands	r3, r2
 80044c6:	d11f      	bne.n	8004508 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e08b      	b.n	80045e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d107      	bne.n	80044e4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044d4:	4b47      	ldr	r3, [pc, #284]	@ (80045f4 <HAL_RCC_ClockConfig+0x1f8>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	2380      	movs	r3, #128	@ 0x80
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4013      	ands	r3, r2
 80044de:	d113      	bne.n	8004508 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e07f      	b.n	80045e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d106      	bne.n	80044fa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044ec:	4b41      	ldr	r3, [pc, #260]	@ (80045f4 <HAL_RCC_ClockConfig+0x1f8>)
 80044ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f0:	2202      	movs	r2, #2
 80044f2:	4013      	ands	r3, r2
 80044f4:	d108      	bne.n	8004508 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e074      	b.n	80045e4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044fa:	4b3e      	ldr	r3, [pc, #248]	@ (80045f4 <HAL_RCC_ClockConfig+0x1f8>)
 80044fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044fe:	2202      	movs	r2, #2
 8004500:	4013      	ands	r3, r2
 8004502:	d101      	bne.n	8004508 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e06d      	b.n	80045e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004508:	4b3a      	ldr	r3, [pc, #232]	@ (80045f4 <HAL_RCC_ClockConfig+0x1f8>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2207      	movs	r2, #7
 800450e:	4393      	bics	r3, r2
 8004510:	0019      	movs	r1, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	4b37      	ldr	r3, [pc, #220]	@ (80045f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004518:	430a      	orrs	r2, r1
 800451a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800451c:	f7fd fe6e 	bl	80021fc <HAL_GetTick>
 8004520:	0003      	movs	r3, r0
 8004522:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004524:	e009      	b.n	800453a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004526:	f7fd fe69 	bl	80021fc <HAL_GetTick>
 800452a:	0002      	movs	r2, r0
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	4a2f      	ldr	r2, [pc, #188]	@ (80045f0 <HAL_RCC_ClockConfig+0x1f4>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e054      	b.n	80045e4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	4b2e      	ldr	r3, [pc, #184]	@ (80045f4 <HAL_RCC_ClockConfig+0x1f8>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2238      	movs	r2, #56	@ 0x38
 8004540:	401a      	ands	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	429a      	cmp	r2, r3
 800454a:	d1ec      	bne.n	8004526 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800454c:	4b27      	ldr	r3, [pc, #156]	@ (80045ec <HAL_RCC_ClockConfig+0x1f0>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2207      	movs	r2, #7
 8004552:	4013      	ands	r3, r2
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d21e      	bcs.n	8004598 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455a:	4b24      	ldr	r3, [pc, #144]	@ (80045ec <HAL_RCC_ClockConfig+0x1f0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2207      	movs	r2, #7
 8004560:	4393      	bics	r3, r2
 8004562:	0019      	movs	r1, r3
 8004564:	4b21      	ldr	r3, [pc, #132]	@ (80045ec <HAL_RCC_ClockConfig+0x1f0>)
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800456c:	f7fd fe46 	bl	80021fc <HAL_GetTick>
 8004570:	0003      	movs	r3, r0
 8004572:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004574:	e009      	b.n	800458a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004576:	f7fd fe41 	bl	80021fc <HAL_GetTick>
 800457a:	0002      	movs	r2, r0
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	4a1b      	ldr	r2, [pc, #108]	@ (80045f0 <HAL_RCC_ClockConfig+0x1f4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d901      	bls.n	800458a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e02c      	b.n	80045e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800458a:	4b18      	ldr	r3, [pc, #96]	@ (80045ec <HAL_RCC_ClockConfig+0x1f0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2207      	movs	r2, #7
 8004590:	4013      	ands	r3, r2
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d1ee      	bne.n	8004576 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2204      	movs	r2, #4
 800459e:	4013      	ands	r3, r2
 80045a0:	d009      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80045a2:	4b14      	ldr	r3, [pc, #80]	@ (80045f4 <HAL_RCC_ClockConfig+0x1f8>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	4a15      	ldr	r2, [pc, #84]	@ (80045fc <HAL_RCC_ClockConfig+0x200>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	0019      	movs	r1, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	4b10      	ldr	r3, [pc, #64]	@ (80045f4 <HAL_RCC_ClockConfig+0x1f8>)
 80045b2:	430a      	orrs	r2, r1
 80045b4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80045b6:	f000 f829 	bl	800460c <HAL_RCC_GetSysClockFreq>
 80045ba:	0001      	movs	r1, r0
 80045bc:	4b0d      	ldr	r3, [pc, #52]	@ (80045f4 <HAL_RCC_ClockConfig+0x1f8>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	0a1b      	lsrs	r3, r3, #8
 80045c2:	220f      	movs	r2, #15
 80045c4:	401a      	ands	r2, r3
 80045c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004600 <HAL_RCC_ClockConfig+0x204>)
 80045c8:	0092      	lsls	r2, r2, #2
 80045ca:	58d3      	ldr	r3, [r2, r3]
 80045cc:	221f      	movs	r2, #31
 80045ce:	4013      	ands	r3, r2
 80045d0:	000a      	movs	r2, r1
 80045d2:	40da      	lsrs	r2, r3
 80045d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004604 <HAL_RCC_ClockConfig+0x208>)
 80045d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80045d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004608 <HAL_RCC_ClockConfig+0x20c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	0018      	movs	r0, r3
 80045de:	f7fd fdb1 	bl	8002144 <HAL_InitTick>
 80045e2:	0003      	movs	r3, r0
}
 80045e4:	0018      	movs	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b004      	add	sp, #16
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40022000 	.word	0x40022000
 80045f0:	00001388 	.word	0x00001388
 80045f4:	40021000 	.word	0x40021000
 80045f8:	fffff0ff 	.word	0xfffff0ff
 80045fc:	ffff8fff 	.word	0xffff8fff
 8004600:	0800642c 	.word	0x0800642c
 8004604:	20000048 	.word	0x20000048
 8004608:	2000004c 	.word	0x2000004c

0800460c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004612:	4b3c      	ldr	r3, [pc, #240]	@ (8004704 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2238      	movs	r2, #56	@ 0x38
 8004618:	4013      	ands	r3, r2
 800461a:	d10f      	bne.n	800463c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800461c:	4b39      	ldr	r3, [pc, #228]	@ (8004704 <HAL_RCC_GetSysClockFreq+0xf8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	0adb      	lsrs	r3, r3, #11
 8004622:	2207      	movs	r2, #7
 8004624:	4013      	ands	r3, r2
 8004626:	2201      	movs	r2, #1
 8004628:	409a      	lsls	r2, r3
 800462a:	0013      	movs	r3, r2
 800462c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800462e:	6839      	ldr	r1, [r7, #0]
 8004630:	4835      	ldr	r0, [pc, #212]	@ (8004708 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004632:	f7fb fd67 	bl	8000104 <__udivsi3>
 8004636:	0003      	movs	r3, r0
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	e05d      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800463c:	4b31      	ldr	r3, [pc, #196]	@ (8004704 <HAL_RCC_GetSysClockFreq+0xf8>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2238      	movs	r2, #56	@ 0x38
 8004642:	4013      	ands	r3, r2
 8004644:	2b08      	cmp	r3, #8
 8004646:	d102      	bne.n	800464e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004648:	4b30      	ldr	r3, [pc, #192]	@ (800470c <HAL_RCC_GetSysClockFreq+0x100>)
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	e054      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800464e:	4b2d      	ldr	r3, [pc, #180]	@ (8004704 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2238      	movs	r2, #56	@ 0x38
 8004654:	4013      	ands	r3, r2
 8004656:	2b10      	cmp	r3, #16
 8004658:	d138      	bne.n	80046cc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800465a:	4b2a      	ldr	r3, [pc, #168]	@ (8004704 <HAL_RCC_GetSysClockFreq+0xf8>)
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	2203      	movs	r2, #3
 8004660:	4013      	ands	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004664:	4b27      	ldr	r3, [pc, #156]	@ (8004704 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	091b      	lsrs	r3, r3, #4
 800466a:	2207      	movs	r2, #7
 800466c:	4013      	ands	r3, r2
 800466e:	3301      	adds	r3, #1
 8004670:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b03      	cmp	r3, #3
 8004676:	d10d      	bne.n	8004694 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	4824      	ldr	r0, [pc, #144]	@ (800470c <HAL_RCC_GetSysClockFreq+0x100>)
 800467c:	f7fb fd42 	bl	8000104 <__udivsi3>
 8004680:	0003      	movs	r3, r0
 8004682:	0019      	movs	r1, r3
 8004684:	4b1f      	ldr	r3, [pc, #124]	@ (8004704 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	0a1b      	lsrs	r3, r3, #8
 800468a:	227f      	movs	r2, #127	@ 0x7f
 800468c:	4013      	ands	r3, r2
 800468e:	434b      	muls	r3, r1
 8004690:	617b      	str	r3, [r7, #20]
        break;
 8004692:	e00d      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004694:	68b9      	ldr	r1, [r7, #8]
 8004696:	481c      	ldr	r0, [pc, #112]	@ (8004708 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004698:	f7fb fd34 	bl	8000104 <__udivsi3>
 800469c:	0003      	movs	r3, r0
 800469e:	0019      	movs	r1, r3
 80046a0:	4b18      	ldr	r3, [pc, #96]	@ (8004704 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	0a1b      	lsrs	r3, r3, #8
 80046a6:	227f      	movs	r2, #127	@ 0x7f
 80046a8:	4013      	ands	r3, r2
 80046aa:	434b      	muls	r3, r1
 80046ac:	617b      	str	r3, [r7, #20]
        break;
 80046ae:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80046b0:	4b14      	ldr	r3, [pc, #80]	@ (8004704 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	0f5b      	lsrs	r3, r3, #29
 80046b6:	2207      	movs	r2, #7
 80046b8:	4013      	ands	r3, r2
 80046ba:	3301      	adds	r3, #1
 80046bc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	6978      	ldr	r0, [r7, #20]
 80046c2:	f7fb fd1f 	bl	8000104 <__udivsi3>
 80046c6:	0003      	movs	r3, r0
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	e015      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80046cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004704 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2238      	movs	r2, #56	@ 0x38
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d103      	bne.n	80046e0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80046d8:	2380      	movs	r3, #128	@ 0x80
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	e00b      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80046e0:	4b08      	ldr	r3, [pc, #32]	@ (8004704 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2238      	movs	r2, #56	@ 0x38
 80046e6:	4013      	ands	r3, r2
 80046e8:	2b18      	cmp	r3, #24
 80046ea:	d103      	bne.n	80046f4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80046ec:	23fa      	movs	r3, #250	@ 0xfa
 80046ee:	01db      	lsls	r3, r3, #7
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	e001      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80046f8:	693b      	ldr	r3, [r7, #16]
}
 80046fa:	0018      	movs	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b006      	add	sp, #24
 8004700:	bd80      	pop	{r7, pc}
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	40021000 	.word	0x40021000
 8004708:	00f42400 	.word	0x00f42400
 800470c:	007a1200 	.word	0x007a1200

08004710 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004718:	2313      	movs	r3, #19
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	2200      	movs	r2, #0
 800471e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004720:	2312      	movs	r3, #18
 8004722:	18fb      	adds	r3, r7, r3
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	2380      	movs	r3, #128	@ 0x80
 800472e:	029b      	lsls	r3, r3, #10
 8004730:	4013      	ands	r3, r2
 8004732:	d100      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004734:	e0a3      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004736:	2011      	movs	r0, #17
 8004738:	183b      	adds	r3, r7, r0
 800473a:	2200      	movs	r2, #0
 800473c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800473e:	4ba5      	ldr	r3, [pc, #660]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004740:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004742:	2380      	movs	r3, #128	@ 0x80
 8004744:	055b      	lsls	r3, r3, #21
 8004746:	4013      	ands	r3, r2
 8004748:	d110      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800474a:	4ba2      	ldr	r3, [pc, #648]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800474c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800474e:	4ba1      	ldr	r3, [pc, #644]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004750:	2180      	movs	r1, #128	@ 0x80
 8004752:	0549      	lsls	r1, r1, #21
 8004754:	430a      	orrs	r2, r1
 8004756:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004758:	4b9e      	ldr	r3, [pc, #632]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800475a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800475c:	2380      	movs	r3, #128	@ 0x80
 800475e:	055b      	lsls	r3, r3, #21
 8004760:	4013      	ands	r3, r2
 8004762:	60bb      	str	r3, [r7, #8]
 8004764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004766:	183b      	adds	r3, r7, r0
 8004768:	2201      	movs	r2, #1
 800476a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800476c:	4b9a      	ldr	r3, [pc, #616]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	4b99      	ldr	r3, [pc, #612]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004772:	2180      	movs	r1, #128	@ 0x80
 8004774:	0049      	lsls	r1, r1, #1
 8004776:	430a      	orrs	r2, r1
 8004778:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800477a:	f7fd fd3f 	bl	80021fc <HAL_GetTick>
 800477e:	0003      	movs	r3, r0
 8004780:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004782:	e00b      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004784:	f7fd fd3a 	bl	80021fc <HAL_GetTick>
 8004788:	0002      	movs	r2, r0
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d904      	bls.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004792:	2313      	movs	r3, #19
 8004794:	18fb      	adds	r3, r7, r3
 8004796:	2203      	movs	r2, #3
 8004798:	701a      	strb	r2, [r3, #0]
        break;
 800479a:	e005      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800479c:	4b8e      	ldr	r3, [pc, #568]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	2380      	movs	r3, #128	@ 0x80
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	4013      	ands	r3, r2
 80047a6:	d0ed      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80047a8:	2313      	movs	r3, #19
 80047aa:	18fb      	adds	r3, r7, r3
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d154      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047b2:	4b88      	ldr	r3, [pc, #544]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80047b6:	23c0      	movs	r3, #192	@ 0xc0
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4013      	ands	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d019      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d014      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047ce:	4b81      	ldr	r3, [pc, #516]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d2:	4a82      	ldr	r2, [pc, #520]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047d8:	4b7e      	ldr	r3, [pc, #504]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80047dc:	4b7d      	ldr	r3, [pc, #500]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047de:	2180      	movs	r1, #128	@ 0x80
 80047e0:	0249      	lsls	r1, r1, #9
 80047e2:	430a      	orrs	r2, r1
 80047e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047e6:	4b7b      	ldr	r3, [pc, #492]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80047ea:	4b7a      	ldr	r3, [pc, #488]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047ec:	497c      	ldr	r1, [pc, #496]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80047ee:	400a      	ands	r2, r1
 80047f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047f2:	4b78      	ldr	r3, [pc, #480]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2201      	movs	r2, #1
 80047fc:	4013      	ands	r3, r2
 80047fe:	d016      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004800:	f7fd fcfc 	bl	80021fc <HAL_GetTick>
 8004804:	0003      	movs	r3, r0
 8004806:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004808:	e00c      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480a:	f7fd fcf7 	bl	80021fc <HAL_GetTick>
 800480e:	0002      	movs	r2, r0
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	4a73      	ldr	r2, [pc, #460]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d904      	bls.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800481a:	2313      	movs	r3, #19
 800481c:	18fb      	adds	r3, r7, r3
 800481e:	2203      	movs	r2, #3
 8004820:	701a      	strb	r2, [r3, #0]
            break;
 8004822:	e004      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004824:	4b6b      	ldr	r3, [pc, #428]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004828:	2202      	movs	r2, #2
 800482a:	4013      	ands	r3, r2
 800482c:	d0ed      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800482e:	2313      	movs	r3, #19
 8004830:	18fb      	adds	r3, r7, r3
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004838:	4b66      	ldr	r3, [pc, #408]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800483a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483c:	4a67      	ldr	r2, [pc, #412]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800483e:	4013      	ands	r3, r2
 8004840:	0019      	movs	r1, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004846:	4b63      	ldr	r3, [pc, #396]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004848:	430a      	orrs	r2, r1
 800484a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800484c:	e00c      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800484e:	2312      	movs	r3, #18
 8004850:	18fb      	adds	r3, r7, r3
 8004852:	2213      	movs	r2, #19
 8004854:	18ba      	adds	r2, r7, r2
 8004856:	7812      	ldrb	r2, [r2, #0]
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	e005      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485c:	2312      	movs	r3, #18
 800485e:	18fb      	adds	r3, r7, r3
 8004860:	2213      	movs	r2, #19
 8004862:	18ba      	adds	r2, r7, r2
 8004864:	7812      	ldrb	r2, [r2, #0]
 8004866:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004868:	2311      	movs	r3, #17
 800486a:	18fb      	adds	r3, r7, r3
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d105      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004872:	4b58      	ldr	r3, [pc, #352]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004874:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004876:	4b57      	ldr	r3, [pc, #348]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004878:	495b      	ldr	r1, [pc, #364]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800487a:	400a      	ands	r2, r1
 800487c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2201      	movs	r2, #1
 8004884:	4013      	ands	r3, r2
 8004886:	d009      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004888:	4b52      	ldr	r3, [pc, #328]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800488a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800488c:	2203      	movs	r2, #3
 800488e:	4393      	bics	r3, r2
 8004890:	0019      	movs	r1, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	4b4f      	ldr	r3, [pc, #316]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004898:	430a      	orrs	r2, r1
 800489a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2210      	movs	r2, #16
 80048a2:	4013      	ands	r3, r2
 80048a4:	d009      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048a6:	4b4b      	ldr	r3, [pc, #300]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048aa:	4a50      	ldr	r2, [pc, #320]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	0019      	movs	r1, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	4b47      	ldr	r3, [pc, #284]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048b6:	430a      	orrs	r2, r1
 80048b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	2380      	movs	r3, #128	@ 0x80
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4013      	ands	r3, r2
 80048c4:	d009      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048c6:	4b43      	ldr	r3, [pc, #268]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ca:	4a49      	ldr	r2, [pc, #292]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	0019      	movs	r1, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695a      	ldr	r2, [r3, #20]
 80048d4:	4b3f      	ldr	r3, [pc, #252]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048d6:	430a      	orrs	r2, r1
 80048d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	2380      	movs	r3, #128	@ 0x80
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	4013      	ands	r3, r2
 80048e4:	d009      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048e6:	4b3b      	ldr	r3, [pc, #236]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ea:	4a42      	ldr	r2, [pc, #264]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	0019      	movs	r1, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699a      	ldr	r2, [r3, #24]
 80048f4:	4b37      	ldr	r3, [pc, #220]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048f6:	430a      	orrs	r2, r1
 80048f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2220      	movs	r2, #32
 8004900:	4013      	ands	r3, r2
 8004902:	d009      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004904:	4b33      	ldr	r3, [pc, #204]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004908:	4a3b      	ldr	r2, [pc, #236]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800490a:	4013      	ands	r3, r2
 800490c:	0019      	movs	r1, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	4b30      	ldr	r3, [pc, #192]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004914:	430a      	orrs	r2, r1
 8004916:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	2380      	movs	r3, #128	@ 0x80
 800491e:	01db      	lsls	r3, r3, #7
 8004920:	4013      	ands	r3, r2
 8004922:	d015      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004924:	4b2b      	ldr	r3, [pc, #172]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	0899      	lsrs	r1, r3, #2
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69da      	ldr	r2, [r3, #28]
 8004930:	4b28      	ldr	r3, [pc, #160]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004932:	430a      	orrs	r2, r1
 8004934:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69da      	ldr	r2, [r3, #28]
 800493a:	2380      	movs	r3, #128	@ 0x80
 800493c:	05db      	lsls	r3, r3, #23
 800493e:	429a      	cmp	r2, r3
 8004940:	d106      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004942:	4b24      	ldr	r3, [pc, #144]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	4b23      	ldr	r3, [pc, #140]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004948:	2180      	movs	r1, #128	@ 0x80
 800494a:	0249      	lsls	r1, r1, #9
 800494c:	430a      	orrs	r2, r1
 800494e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	2380      	movs	r3, #128	@ 0x80
 8004956:	039b      	lsls	r3, r3, #14
 8004958:	4013      	ands	r3, r2
 800495a:	d016      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800495c:	4b1d      	ldr	r3, [pc, #116]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800495e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004960:	4a26      	ldr	r2, [pc, #152]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004962:	4013      	ands	r3, r2
 8004964:	0019      	movs	r1, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1a      	ldr	r2, [r3, #32]
 800496a:	4b1a      	ldr	r3, [pc, #104]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800496c:	430a      	orrs	r2, r1
 800496e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a1a      	ldr	r2, [r3, #32]
 8004974:	2380      	movs	r3, #128	@ 0x80
 8004976:	03db      	lsls	r3, r3, #15
 8004978:	429a      	cmp	r2, r3
 800497a:	d106      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800497c:	4b15      	ldr	r3, [pc, #84]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	4b14      	ldr	r3, [pc, #80]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004982:	2180      	movs	r1, #128	@ 0x80
 8004984:	0449      	lsls	r1, r1, #17
 8004986:	430a      	orrs	r2, r1
 8004988:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	2380      	movs	r3, #128	@ 0x80
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	4013      	ands	r3, r2
 8004994:	d016      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004996:	4b0f      	ldr	r3, [pc, #60]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499a:	4a19      	ldr	r2, [pc, #100]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800499c:	4013      	ands	r3, r2
 800499e:	0019      	movs	r1, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	4b0b      	ldr	r3, [pc, #44]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049a6:	430a      	orrs	r2, r1
 80049a8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	2380      	movs	r3, #128	@ 0x80
 80049b0:	01db      	lsls	r3, r3, #7
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d106      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80049b6:	4b07      	ldr	r3, [pc, #28]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	4b06      	ldr	r3, [pc, #24]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049bc:	2180      	movs	r1, #128	@ 0x80
 80049be:	0249      	lsls	r1, r1, #9
 80049c0:	430a      	orrs	r2, r1
 80049c2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80049c4:	2312      	movs	r3, #18
 80049c6:	18fb      	adds	r3, r7, r3
 80049c8:	781b      	ldrb	r3, [r3, #0]
}
 80049ca:	0018      	movs	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b006      	add	sp, #24
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	40021000 	.word	0x40021000
 80049d8:	40007000 	.word	0x40007000
 80049dc:	fffffcff 	.word	0xfffffcff
 80049e0:	fffeffff 	.word	0xfffeffff
 80049e4:	00001388 	.word	0x00001388
 80049e8:	efffffff 	.word	0xefffffff
 80049ec:	fffff3ff 	.word	0xfffff3ff
 80049f0:	fff3ffff 	.word	0xfff3ffff
 80049f4:	ffcfffff 	.word	0xffcfffff
 80049f8:	ffffcfff 	.word	0xffffcfff
 80049fc:	ffbfffff 	.word	0xffbfffff
 8004a00:	ffff3fff 	.word	0xffff3fff

08004a04 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004a04:	b5b0      	push	{r4, r5, r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a0c:	230f      	movs	r3, #15
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	2201      	movs	r2, #1
 8004a12:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d100      	bne.n	8004a1c <HAL_RTC_Init+0x18>
 8004a1a:	e08c      	b.n	8004b36 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2229      	movs	r2, #41	@ 0x29
 8004a20:	5c9b      	ldrb	r3, [r3, r2]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10b      	bne.n	8004a40 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2228      	movs	r2, #40	@ 0x28
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2288      	movs	r2, #136	@ 0x88
 8004a34:	0212      	lsls	r2, r2, #8
 8004a36:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f7fd fa2a 	bl	8001e94 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2229      	movs	r2, #41	@ 0x29
 8004a44:	2102      	movs	r1, #2
 8004a46:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	2210      	movs	r2, #16
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b10      	cmp	r3, #16
 8004a54:	d062      	beq.n	8004b1c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	22ca      	movs	r2, #202	@ 0xca
 8004a5c:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2253      	movs	r2, #83	@ 0x53
 8004a64:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004a66:	250f      	movs	r5, #15
 8004a68:	197c      	adds	r4, r7, r5
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f000 fcb9 	bl	80053e4 <RTC_EnterInitMode>
 8004a72:	0003      	movs	r3, r0
 8004a74:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004a76:	0028      	movs	r0, r5
 8004a78:	183b      	adds	r3, r7, r0
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d12c      	bne.n	8004ada <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	492e      	ldr	r1, [pc, #184]	@ (8004b44 <HAL_RTC_Init+0x140>)
 8004a8c:	400a      	ands	r2, r1
 8004a8e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6999      	ldr	r1, [r3, #24]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6912      	ldr	r2, [r2, #16]
 8004ab6:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6919      	ldr	r1, [r3, #16]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	041a      	lsls	r2, r3, #16
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004acc:	183c      	adds	r4, r7, r0
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f000 fcc9 	bl	8005468 <RTC_ExitInitMode>
 8004ad6:	0003      	movs	r3, r0
 8004ad8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004ada:	230f      	movs	r3, #15
 8004adc:	18fb      	adds	r3, r7, r3
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d116      	bne.n	8004b12 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	00d2      	lsls	r2, r2, #3
 8004af0:	08d2      	lsrs	r2, r2, #3
 8004af2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6999      	ldr	r1, [r3, #24]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	22ff      	movs	r2, #255	@ 0xff
 8004b18:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b1a:	e003      	b.n	8004b24 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004b1c:	230f      	movs	r3, #15
 8004b1e:	18fb      	adds	r3, r7, r3
 8004b20:	2200      	movs	r2, #0
 8004b22:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004b24:	230f      	movs	r3, #15
 8004b26:	18fb      	adds	r3, r7, r3
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d103      	bne.n	8004b36 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2229      	movs	r2, #41	@ 0x29
 8004b32:	2101      	movs	r1, #1
 8004b34:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004b36:	230f      	movs	r3, #15
 8004b38:	18fb      	adds	r3, r7, r3
 8004b3a:	781b      	ldrb	r3, [r3, #0]
}
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	b004      	add	sp, #16
 8004b42:	bdb0      	pop	{r4, r5, r7, pc}
 8004b44:	fb8fffbf 	.word	0xfb8fffbf

08004b48 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b48:	b5b0      	push	{r4, r5, r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2228      	movs	r2, #40	@ 0x28
 8004b58:	5c9b      	ldrb	r3, [r3, r2]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_RTC_SetTime+0x1a>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e092      	b.n	8004c88 <HAL_RTC_SetTime+0x140>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2228      	movs	r2, #40	@ 0x28
 8004b66:	2101      	movs	r1, #1
 8004b68:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2229      	movs	r2, #41	@ 0x29
 8004b6e:	2102      	movs	r1, #2
 8004b70:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	22ca      	movs	r2, #202	@ 0xca
 8004b78:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2253      	movs	r2, #83	@ 0x53
 8004b80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004b82:	2513      	movs	r5, #19
 8004b84:	197c      	adds	r4, r7, r5
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f000 fc2b 	bl	80053e4 <RTC_EnterInitMode>
 8004b8e:	0003      	movs	r3, r0
 8004b90:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004b92:	197b      	adds	r3, r7, r5
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d162      	bne.n	8004c60 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d125      	bne.n	8004bec <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	2240      	movs	r2, #64	@ 0x40
 8004ba8:	4013      	ands	r3, r2
 8004baa:	d102      	bne.n	8004bb2 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f000 fc9a 	bl	80054f0 <RTC_ByteToBcd2>
 8004bbc:	0003      	movs	r3, r0
 8004bbe:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	785b      	ldrb	r3, [r3, #1]
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f000 fc93 	bl	80054f0 <RTC_ByteToBcd2>
 8004bca:	0003      	movs	r3, r0
 8004bcc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004bce:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	789b      	ldrb	r3, [r3, #2]
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f000 fc8b 	bl	80054f0 <RTC_ByteToBcd2>
 8004bda:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004bdc:	0022      	movs	r2, r4
 8004bde:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	78db      	ldrb	r3, [r3, #3]
 8004be4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	e017      	b.n	8004c1c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	2240      	movs	r2, #64	@ 0x40
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	d102      	bne.n	8004bfe <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	785b      	ldrb	r3, [r3, #1]
 8004c08:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c0a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c10:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	78db      	ldrb	r3, [r3, #3]
 8004c16:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	491b      	ldr	r1, [pc, #108]	@ (8004c90 <HAL_RTC_SetTime+0x148>)
 8004c24:	400a      	ands	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4918      	ldr	r1, [pc, #96]	@ (8004c94 <HAL_RTC_SetTime+0x14c>)
 8004c34:	400a      	ands	r2, r1
 8004c36:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6999      	ldr	r1, [r3, #24]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c50:	2313      	movs	r3, #19
 8004c52:	18fc      	adds	r4, r7, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	0018      	movs	r0, r3
 8004c58:	f000 fc06 	bl	8005468 <RTC_ExitInitMode>
 8004c5c:	0003      	movs	r3, r0
 8004c5e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	22ff      	movs	r2, #255	@ 0xff
 8004c66:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8004c68:	2313      	movs	r3, #19
 8004c6a:	18fb      	adds	r3, r7, r3
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d103      	bne.n	8004c7a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2229      	movs	r2, #41	@ 0x29
 8004c76:	2101      	movs	r1, #1
 8004c78:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2228      	movs	r2, #40	@ 0x28
 8004c7e:	2100      	movs	r1, #0
 8004c80:	5499      	strb	r1, [r3, r2]

  return status;
 8004c82:	2313      	movs	r3, #19
 8004c84:	18fb      	adds	r3, r7, r3
 8004c86:	781b      	ldrb	r3, [r3, #0]
}
 8004c88:	0018      	movs	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	b006      	add	sp, #24
 8004c8e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c90:	007f7f7f 	.word	0x007f7f7f
 8004c94:	fffbffff 	.word	0xfffbffff

08004c98 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	045b      	lsls	r3, r3, #17
 8004cb6:	0c5a      	lsrs	r2, r3, #17
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a22      	ldr	r2, [pc, #136]	@ (8004d4c <HAL_RTC_GetTime+0xb4>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	0c1b      	lsrs	r3, r3, #16
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	223f      	movs	r2, #63	@ 0x3f
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	0a1b      	lsrs	r3, r3, #8
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	227f      	movs	r2, #127	@ 0x7f
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	227f      	movs	r2, #127	@ 0x7f
 8004cee:	4013      	ands	r3, r2
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	0d9b      	lsrs	r3, r3, #22
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	4013      	ands	r3, r2
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d11a      	bne.n	8004d42 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	0018      	movs	r0, r3
 8004d12:	f000 fc15 	bl	8005540 <RTC_Bcd2ToByte>
 8004d16:	0003      	movs	r3, r0
 8004d18:	001a      	movs	r2, r3
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	785b      	ldrb	r3, [r3, #1]
 8004d22:	0018      	movs	r0, r3
 8004d24:	f000 fc0c 	bl	8005540 <RTC_Bcd2ToByte>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	001a      	movs	r2, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	789b      	ldrb	r3, [r3, #2]
 8004d34:	0018      	movs	r0, r3
 8004d36:	f000 fc03 	bl	8005540 <RTC_Bcd2ToByte>
 8004d3a:	0003      	movs	r3, r0
 8004d3c:	001a      	movs	r2, r3
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	0018      	movs	r0, r3
 8004d46:	46bd      	mov	sp, r7
 8004d48:	b006      	add	sp, #24
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	007f7f7f 	.word	0x007f7f7f

08004d50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004d50:	b5b0      	push	{r4, r5, r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2228      	movs	r2, #40	@ 0x28
 8004d60:	5c9b      	ldrb	r3, [r3, r2]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_RTC_SetDate+0x1a>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e07e      	b.n	8004e68 <HAL_RTC_SetDate+0x118>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2228      	movs	r2, #40	@ 0x28
 8004d6e:	2101      	movs	r1, #1
 8004d70:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2229      	movs	r2, #41	@ 0x29
 8004d76:	2102      	movs	r1, #2
 8004d78:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10e      	bne.n	8004d9e <HAL_RTC_SetDate+0x4e>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	785b      	ldrb	r3, [r3, #1]
 8004d84:	001a      	movs	r2, r3
 8004d86:	2310      	movs	r3, #16
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d008      	beq.n	8004d9e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	785b      	ldrb	r3, [r3, #1]
 8004d90:	2210      	movs	r2, #16
 8004d92:	4393      	bics	r3, r2
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	330a      	adds	r3, #10
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d11c      	bne.n	8004dde <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	78db      	ldrb	r3, [r3, #3]
 8004da8:	0018      	movs	r0, r3
 8004daa:	f000 fba1 	bl	80054f0 <RTC_ByteToBcd2>
 8004dae:	0003      	movs	r3, r0
 8004db0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	785b      	ldrb	r3, [r3, #1]
 8004db6:	0018      	movs	r0, r3
 8004db8:	f000 fb9a 	bl	80054f0 <RTC_ByteToBcd2>
 8004dbc:	0003      	movs	r3, r0
 8004dbe:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004dc0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	789b      	ldrb	r3, [r3, #2]
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f000 fb92 	bl	80054f0 <RTC_ByteToBcd2>
 8004dcc:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004dce:	0022      	movs	r2, r4
 8004dd0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	e00e      	b.n	8004dfc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	78db      	ldrb	r3, [r3, #3]
 8004de2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	785b      	ldrb	r3, [r3, #1]
 8004de8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004dea:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004df0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	22ca      	movs	r2, #202	@ 0xca
 8004e02:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2253      	movs	r2, #83	@ 0x53
 8004e0a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004e0c:	2513      	movs	r5, #19
 8004e0e:	197c      	adds	r4, r7, r5
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	0018      	movs	r0, r3
 8004e14:	f000 fae6 	bl	80053e4 <RTC_EnterInitMode>
 8004e18:	0003      	movs	r3, r0
 8004e1a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004e1c:	0028      	movs	r0, r5
 8004e1e:	183b      	adds	r3, r7, r0
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10c      	bne.n	8004e40 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	4910      	ldr	r1, [pc, #64]	@ (8004e70 <HAL_RTC_SetDate+0x120>)
 8004e2e:	400a      	ands	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004e32:	183c      	adds	r4, r7, r0
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	0018      	movs	r0, r3
 8004e38:	f000 fb16 	bl	8005468 <RTC_ExitInitMode>
 8004e3c:	0003      	movs	r3, r0
 8004e3e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	22ff      	movs	r2, #255	@ 0xff
 8004e46:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004e48:	2313      	movs	r3, #19
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d103      	bne.n	8004e5a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2229      	movs	r2, #41	@ 0x29
 8004e56:	2101      	movs	r1, #1
 8004e58:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2228      	movs	r2, #40	@ 0x28
 8004e5e:	2100      	movs	r1, #0
 8004e60:	5499      	strb	r1, [r3, r2]

  return status;
 8004e62:	2313      	movs	r3, #19
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	781b      	ldrb	r3, [r3, #0]
}
 8004e68:	0018      	movs	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b006      	add	sp, #24
 8004e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e70:	00ffff3f 	.word	0x00ffff3f

08004e74 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	4a21      	ldr	r2, [pc, #132]	@ (8004f0c <HAL_RTC_GetDate+0x98>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	0c1b      	lsrs	r3, r3, #16
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	0a1b      	lsrs	r3, r3, #8
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	221f      	movs	r2, #31
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	223f      	movs	r2, #63	@ 0x3f
 8004eac:	4013      	ands	r3, r2
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	0b5b      	lsrs	r3, r3, #13
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2207      	movs	r2, #7
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d11a      	bne.n	8004f00 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	78db      	ldrb	r3, [r3, #3]
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f000 fb36 	bl	8005540 <RTC_Bcd2ToByte>
 8004ed4:	0003      	movs	r3, r0
 8004ed6:	001a      	movs	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	785b      	ldrb	r3, [r3, #1]
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f000 fb2d 	bl	8005540 <RTC_Bcd2ToByte>
 8004ee6:	0003      	movs	r3, r0
 8004ee8:	001a      	movs	r2, r3
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	789b      	ldrb	r3, [r3, #2]
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f000 fb24 	bl	8005540 <RTC_Bcd2ToByte>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	001a      	movs	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	0018      	movs	r0, r3
 8004f04:	46bd      	mov	sp, r7
 8004f06:	b006      	add	sp, #24
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	46c0      	nop			@ (mov r8, r8)
 8004f0c:	00ffff3f 	.word	0x00ffff3f

08004f10 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004f10:	b590      	push	{r4, r7, lr}
 8004f12:	b089      	sub	sp, #36	@ 0x24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2228      	movs	r2, #40	@ 0x28
 8004f20:	5c9b      	ldrb	r3, [r3, r2]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_RTC_SetAlarm_IT+0x1a>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e127      	b.n	800517a <HAL_RTC_SetAlarm_IT+0x26a>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2228      	movs	r2, #40	@ 0x28
 8004f2e:	2101      	movs	r1, #1
 8004f30:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2229      	movs	r2, #41	@ 0x29
 8004f36:	2102      	movs	r1, #2
 8004f38:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d136      	bne.n	8004fae <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	2240      	movs	r2, #64	@ 0x40
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d102      	bne.n	8004f52 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	0018      	movs	r0, r3
 8004f58:	f000 faca 	bl	80054f0 <RTC_ByteToBcd2>
 8004f5c:	0003      	movs	r3, r0
 8004f5e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	785b      	ldrb	r3, [r3, #1]
 8004f64:	0018      	movs	r0, r3
 8004f66:	f000 fac3 	bl	80054f0 <RTC_ByteToBcd2>
 8004f6a:	0003      	movs	r3, r0
 8004f6c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004f6e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	789b      	ldrb	r3, [r3, #2]
 8004f74:	0018      	movs	r0, r3
 8004f76:	f000 fabb 	bl	80054f0 <RTC_ByteToBcd2>
 8004f7a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004f7c:	0022      	movs	r2, r4
 8004f7e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	78db      	ldrb	r3, [r3, #3]
 8004f84:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004f86:	431a      	orrs	r2, r3
 8004f88:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	5c9b      	ldrb	r3, [r3, r2]
 8004f90:	0018      	movs	r0, r3
 8004f92:	f000 faad 	bl	80054f0 <RTC_ByteToBcd2>
 8004f96:	0003      	movs	r3, r0
 8004f98:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004f9a:	0022      	movs	r2, r4
 8004f9c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004fa2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	61fb      	str	r3, [r7, #28]
 8004fac:	e022      	b.n	8004ff4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	2240      	movs	r2, #64	@ 0x40
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	d102      	bne.n	8004fc0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	785b      	ldrb	r3, [r3, #1]
 8004fca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004fcc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004fd2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	78db      	ldrb	r3, [r3, #3]
 8004fd8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004fda:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2120      	movs	r1, #32
 8004fe0:	5c5b      	ldrb	r3, [r3, r1]
 8004fe2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004fe4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004fea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	22ca      	movs	r2, #202	@ 0xca
 8005006:	625a      	str	r2, [r3, #36]	@ 0x24
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2253      	movs	r2, #83	@ 0x53
 800500e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005014:	2380      	movs	r3, #128	@ 0x80
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	429a      	cmp	r2, r3
 800501a:	d14c      	bne.n	80050b6 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699a      	ldr	r2, [r3, #24]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4957      	ldr	r1, [pc, #348]	@ (8005184 <HAL_RTC_SetAlarm_IT+0x274>)
 8005028:	400a      	ands	r2, r1
 800502a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2101      	movs	r1, #1
 8005038:	430a      	orrs	r2, r1
 800503a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800503c:	f7fd f8de 	bl	80021fc <HAL_GetTick>
 8005040:	0003      	movs	r3, r0
 8005042:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005044:	e016      	b.n	8005074 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005046:	f7fd f8d9 	bl	80021fc <HAL_GetTick>
 800504a:	0002      	movs	r2, r0
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	1ad2      	subs	r2, r2, r3
 8005050:	23fa      	movs	r3, #250	@ 0xfa
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	429a      	cmp	r2, r3
 8005056:	d90d      	bls.n	8005074 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	22ff      	movs	r2, #255	@ 0xff
 800505e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2229      	movs	r2, #41	@ 0x29
 8005064:	2103      	movs	r1, #3
 8005066:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2228      	movs	r2, #40	@ 0x28
 800506c:	2100      	movs	r1, #0
 800506e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e082      	b.n	800517a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	2201      	movs	r2, #1
 800507c:	4013      	ands	r3, r2
 800507e:	d0e2      	beq.n	8005046 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	69fa      	ldr	r2, [r7, #28]
 8005086:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2180      	movs	r1, #128	@ 0x80
 800509c:	0049      	lsls	r1, r1, #1
 800509e:	430a      	orrs	r2, r1
 80050a0:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	699a      	ldr	r2, [r3, #24]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2180      	movs	r1, #128	@ 0x80
 80050ae:	0149      	lsls	r1, r1, #5
 80050b0:	430a      	orrs	r2, r1
 80050b2:	619a      	str	r2, [r3, #24]
 80050b4:	e04b      	b.n	800514e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	699a      	ldr	r2, [r3, #24]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4931      	ldr	r1, [pc, #196]	@ (8005188 <HAL_RTC_SetAlarm_IT+0x278>)
 80050c2:	400a      	ands	r2, r1
 80050c4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2102      	movs	r1, #2
 80050d2:	430a      	orrs	r2, r1
 80050d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80050d6:	f7fd f891 	bl	80021fc <HAL_GetTick>
 80050da:	0003      	movs	r3, r0
 80050dc:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80050de:	e016      	b.n	800510e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80050e0:	f7fd f88c 	bl	80021fc <HAL_GetTick>
 80050e4:	0002      	movs	r2, r0
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	1ad2      	subs	r2, r2, r3
 80050ea:	23fa      	movs	r3, #250	@ 0xfa
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d90d      	bls.n	800510e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	22ff      	movs	r2, #255	@ 0xff
 80050f8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2229      	movs	r2, #41	@ 0x29
 80050fe:	2103      	movs	r1, #3
 8005100:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2228      	movs	r2, #40	@ 0x28
 8005106:	2100      	movs	r1, #0
 8005108:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e035      	b.n	800517a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	2202      	movs	r2, #2
 8005116:	4013      	ands	r3, r2
 8005118:	d0e2      	beq.n	80050e0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69fa      	ldr	r2, [r7, #28]
 8005120:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	699a      	ldr	r2, [r3, #24]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2180      	movs	r1, #128	@ 0x80
 8005136:	0089      	lsls	r1, r1, #2
 8005138:	430a      	orrs	r2, r1
 800513a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2180      	movs	r1, #128	@ 0x80
 8005148:	0189      	lsls	r1, r1, #6
 800514a:	430a      	orrs	r2, r1
 800514c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800514e:	4a0f      	ldr	r2, [pc, #60]	@ (800518c <HAL_RTC_SetAlarm_IT+0x27c>)
 8005150:	2380      	movs	r3, #128	@ 0x80
 8005152:	58d3      	ldr	r3, [r2, r3]
 8005154:	490d      	ldr	r1, [pc, #52]	@ (800518c <HAL_RTC_SetAlarm_IT+0x27c>)
 8005156:	2280      	movs	r2, #128	@ 0x80
 8005158:	0312      	lsls	r2, r2, #12
 800515a:	4313      	orrs	r3, r2
 800515c:	2280      	movs	r2, #128	@ 0x80
 800515e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	22ff      	movs	r2, #255	@ 0xff
 8005166:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2229      	movs	r2, #41	@ 0x29
 800516c:	2101      	movs	r1, #1
 800516e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2228      	movs	r2, #40	@ 0x28
 8005174:	2100      	movs	r1, #0
 8005176:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	0018      	movs	r0, r3
 800517c:	46bd      	mov	sp, r7
 800517e:	b009      	add	sp, #36	@ 0x24
 8005180:	bd90      	pop	{r4, r7, pc}
 8005182:	46c0      	nop			@ (mov r8, r8)
 8005184:	fffffeff 	.word	0xfffffeff
 8005188:	fffffdff 	.word	0xfffffdff
 800518c:	40021800 	.word	0x40021800

08005190 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	2380      	movs	r3, #128	@ 0x80
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d144      	bne.n	8005232 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2280      	movs	r2, #128	@ 0x80
 80051ac:	0052      	lsls	r2, r2, #1
 80051ae:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b6:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051be:	045b      	lsls	r3, r3, #17
 80051c0:	0c5b      	lsrs	r3, r3, #17
 80051c2:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	0c1b      	lsrs	r3, r3, #16
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	223f      	movs	r2, #63	@ 0x3f
 80051cc:	4013      	ands	r3, r2
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	0a1b      	lsrs	r3, r3, #8
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	227f      	movs	r2, #127	@ 0x7f
 80051dc:	4013      	ands	r3, r2
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	227f      	movs	r2, #127	@ 0x7f
 80051ea:	4013      	ands	r3, r2
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	0d9b      	lsrs	r3, r3, #22
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2201      	movs	r2, #1
 80051fa:	4013      	ands	r3, r2
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	0e1b      	lsrs	r3, r3, #24
 800520c:	b2db      	uxtb	r3, r3
 800520e:	223f      	movs	r2, #63	@ 0x3f
 8005210:	4013      	ands	r3, r2
 8005212:	b2d9      	uxtb	r1, r3
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2220      	movs	r2, #32
 8005218:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	2380      	movs	r3, #128	@ 0x80
 800521e:	05db      	lsls	r3, r3, #23
 8005220:	401a      	ands	r2, r3
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	4a3b      	ldr	r2, [pc, #236]	@ (8005318 <HAL_RTC_GetAlarm+0x188>)
 800522a:	401a      	ands	r2, r3
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	615a      	str	r2, [r3, #20]
 8005230:	e043      	b.n	80052ba <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2280      	movs	r2, #128	@ 0x80
 8005236:	0092      	lsls	r2, r2, #2
 8005238:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005240:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005248:	045b      	lsls	r3, r3, #17
 800524a:	0c5b      	lsrs	r3, r3, #17
 800524c:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	0c1b      	lsrs	r3, r3, #16
 8005252:	b2db      	uxtb	r3, r3
 8005254:	223f      	movs	r2, #63	@ 0x3f
 8005256:	4013      	ands	r3, r2
 8005258:	b2da      	uxtb	r2, r3
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	0a1b      	lsrs	r3, r3, #8
 8005262:	b2db      	uxtb	r3, r3
 8005264:	227f      	movs	r2, #127	@ 0x7f
 8005266:	4013      	ands	r3, r2
 8005268:	b2da      	uxtb	r2, r3
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	b2db      	uxtb	r3, r3
 8005272:	227f      	movs	r2, #127	@ 0x7f
 8005274:	4013      	ands	r3, r2
 8005276:	b2da      	uxtb	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	0d9b      	lsrs	r3, r3, #22
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2201      	movs	r2, #1
 8005284:	4013      	ands	r3, r2
 8005286:	b2da      	uxtb	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	0e1b      	lsrs	r3, r3, #24
 8005296:	b2db      	uxtb	r3, r3
 8005298:	223f      	movs	r2, #63	@ 0x3f
 800529a:	4013      	ands	r3, r2
 800529c:	b2d9      	uxtb	r1, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2220      	movs	r2, #32
 80052a2:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	2380      	movs	r3, #128	@ 0x80
 80052a8:	05db      	lsls	r3, r3, #23
 80052aa:	401a      	ands	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	4a19      	ldr	r2, [pc, #100]	@ (8005318 <HAL_RTC_GetAlarm+0x188>)
 80052b4:	401a      	ands	r2, r3
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d125      	bne.n	800530c <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	0018      	movs	r0, r3
 80052c6:	f000 f93b 	bl	8005540 <RTC_Bcd2ToByte>
 80052ca:	0003      	movs	r3, r0
 80052cc:	001a      	movs	r2, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	785b      	ldrb	r3, [r3, #1]
 80052d6:	0018      	movs	r0, r3
 80052d8:	f000 f932 	bl	8005540 <RTC_Bcd2ToByte>
 80052dc:	0003      	movs	r3, r0
 80052de:	001a      	movs	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	789b      	ldrb	r3, [r3, #2]
 80052e8:	0018      	movs	r0, r3
 80052ea:	f000 f929 	bl	8005540 <RTC_Bcd2ToByte>
 80052ee:	0003      	movs	r3, r0
 80052f0:	001a      	movs	r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2220      	movs	r2, #32
 80052fa:	5c9b      	ldrb	r3, [r3, r2]
 80052fc:	0018      	movs	r0, r3
 80052fe:	f000 f91f 	bl	8005540 <RTC_Bcd2ToByte>
 8005302:	0003      	movs	r3, r0
 8005304:	0019      	movs	r1, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2220      	movs	r2, #32
 800530a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	0018      	movs	r0, r3
 8005310:	46bd      	mov	sp, r7
 8005312:	b006      	add	sp, #24
 8005314:	bd80      	pop	{r7, pc}
 8005316:	46c0      	nop			@ (mov r8, r8)
 8005318:	80808080 	.word	0x80808080

0800531c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	2380      	movs	r3, #128	@ 0x80
 800532c:	015b      	lsls	r3, r3, #5
 800532e:	4013      	ands	r3, r2
 8005330:	d011      	beq.n	8005356 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005338:	2201      	movs	r2, #1
 800533a:	4013      	ands	r3, r2
 800533c:	d00b      	beq.n	8005356 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2101      	movs	r1, #1
 800534a:	430a      	orrs	r2, r1
 800534c:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	0018      	movs	r0, r3
 8005352:	f7fb ff09 	bl	8001168 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	699a      	ldr	r2, [r3, #24]
 800535c:	2380      	movs	r3, #128	@ 0x80
 800535e:	019b      	lsls	r3, r3, #6
 8005360:	4013      	ands	r3, r2
 8005362:	d011      	beq.n	8005388 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800536a:	2202      	movs	r2, #2
 800536c:	4013      	ands	r3, r2
 800536e:	d00b      	beq.n	8005388 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2102      	movs	r1, #2
 800537c:	430a      	orrs	r2, r1
 800537e:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	0018      	movs	r0, r3
 8005384:	f000 f942 	bl	800560c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2229      	movs	r2, #41	@ 0x29
 800538c:	2101      	movs	r1, #1
 800538e:	5499      	strb	r1, [r3, r2]
}
 8005390:	46c0      	nop			@ (mov r8, r8)
 8005392:	46bd      	mov	sp, r7
 8005394:	b002      	add	sp, #8
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a0e      	ldr	r2, [pc, #56]	@ (80053e0 <HAL_RTC_WaitForSynchro+0x48>)
 80053a6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80053a8:	f7fc ff28 	bl	80021fc <HAL_GetTick>
 80053ac:	0003      	movs	r3, r0
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80053b0:	e00a      	b.n	80053c8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80053b2:	f7fc ff23 	bl	80021fc <HAL_GetTick>
 80053b6:	0002      	movs	r2, r0
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	1ad2      	subs	r2, r2, r3
 80053bc:	23fa      	movs	r3, #250	@ 0xfa
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d901      	bls.n	80053c8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e006      	b.n	80053d6 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	2220      	movs	r2, #32
 80053d0:	4013      	ands	r3, r2
 80053d2:	d0ee      	beq.n	80053b2 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	0018      	movs	r0, r3
 80053d8:	46bd      	mov	sp, r7
 80053da:	b004      	add	sp, #16
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	46c0      	nop			@ (mov r8, r8)
 80053e0:	0001005f 	.word	0x0001005f

080053e4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80053ec:	230f      	movs	r3, #15
 80053ee:	18fb      	adds	r3, r7, r3
 80053f0:	2200      	movs	r2, #0
 80053f2:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	2240      	movs	r2, #64	@ 0x40
 80053fc:	4013      	ands	r3, r2
 80053fe:	d12c      	bne.n	800545a <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2180      	movs	r1, #128	@ 0x80
 800540c:	430a      	orrs	r2, r1
 800540e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005410:	f7fc fef4 	bl	80021fc <HAL_GetTick>
 8005414:	0003      	movs	r3, r0
 8005416:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005418:	e014      	b.n	8005444 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800541a:	f7fc feef 	bl	80021fc <HAL_GetTick>
 800541e:	0002      	movs	r2, r0
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	1ad2      	subs	r2, r2, r3
 8005424:	200f      	movs	r0, #15
 8005426:	183b      	adds	r3, r7, r0
 8005428:	1839      	adds	r1, r7, r0
 800542a:	7809      	ldrb	r1, [r1, #0]
 800542c:	7019      	strb	r1, [r3, #0]
 800542e:	23fa      	movs	r3, #250	@ 0xfa
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	429a      	cmp	r2, r3
 8005434:	d906      	bls.n	8005444 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005436:	183b      	adds	r3, r7, r0
 8005438:	2203      	movs	r2, #3
 800543a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2229      	movs	r2, #41	@ 0x29
 8005440:	2103      	movs	r1, #3
 8005442:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	2240      	movs	r2, #64	@ 0x40
 800544c:	4013      	ands	r3, r2
 800544e:	d104      	bne.n	800545a <RTC_EnterInitMode+0x76>
 8005450:	230f      	movs	r3, #15
 8005452:	18fb      	adds	r3, r7, r3
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2b03      	cmp	r3, #3
 8005458:	d1df      	bne.n	800541a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800545a:	230f      	movs	r3, #15
 800545c:	18fb      	adds	r3, r7, r3
 800545e:	781b      	ldrb	r3, [r3, #0]
}
 8005460:	0018      	movs	r0, r3
 8005462:	46bd      	mov	sp, r7
 8005464:	b004      	add	sp, #16
 8005466:	bd80      	pop	{r7, pc}

08005468 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005468:	b590      	push	{r4, r7, lr}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005470:	240f      	movs	r4, #15
 8005472:	193b      	adds	r3, r7, r4
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005478:	4b1c      	ldr	r3, [pc, #112]	@ (80054ec <RTC_ExitInitMode+0x84>)
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	4b1b      	ldr	r3, [pc, #108]	@ (80054ec <RTC_ExitInitMode+0x84>)
 800547e:	2180      	movs	r1, #128	@ 0x80
 8005480:	438a      	bics	r2, r1
 8005482:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005484:	4b19      	ldr	r3, [pc, #100]	@ (80054ec <RTC_ExitInitMode+0x84>)
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	2220      	movs	r2, #32
 800548a:	4013      	ands	r3, r2
 800548c:	d10d      	bne.n	80054aa <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	0018      	movs	r0, r3
 8005492:	f7ff ff81 	bl	8005398 <HAL_RTC_WaitForSynchro>
 8005496:	1e03      	subs	r3, r0, #0
 8005498:	d021      	beq.n	80054de <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2229      	movs	r2, #41	@ 0x29
 800549e:	2103      	movs	r1, #3
 80054a0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80054a2:	193b      	adds	r3, r7, r4
 80054a4:	2203      	movs	r2, #3
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	e019      	b.n	80054de <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80054aa:	4b10      	ldr	r3, [pc, #64]	@ (80054ec <RTC_ExitInitMode+0x84>)
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	4b0f      	ldr	r3, [pc, #60]	@ (80054ec <RTC_ExitInitMode+0x84>)
 80054b0:	2120      	movs	r1, #32
 80054b2:	438a      	bics	r2, r1
 80054b4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	0018      	movs	r0, r3
 80054ba:	f7ff ff6d 	bl	8005398 <HAL_RTC_WaitForSynchro>
 80054be:	1e03      	subs	r3, r0, #0
 80054c0:	d007      	beq.n	80054d2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2229      	movs	r2, #41	@ 0x29
 80054c6:	2103      	movs	r1, #3
 80054c8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80054ca:	230f      	movs	r3, #15
 80054cc:	18fb      	adds	r3, r7, r3
 80054ce:	2203      	movs	r2, #3
 80054d0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80054d2:	4b06      	ldr	r3, [pc, #24]	@ (80054ec <RTC_ExitInitMode+0x84>)
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	4b05      	ldr	r3, [pc, #20]	@ (80054ec <RTC_ExitInitMode+0x84>)
 80054d8:	2120      	movs	r1, #32
 80054da:	430a      	orrs	r2, r1
 80054dc:	619a      	str	r2, [r3, #24]
  }

  return status;
 80054de:	230f      	movs	r3, #15
 80054e0:	18fb      	adds	r3, r7, r3
 80054e2:	781b      	ldrb	r3, [r3, #0]
}
 80054e4:	0018      	movs	r0, r3
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b005      	add	sp, #20
 80054ea:	bd90      	pop	{r4, r7, pc}
 80054ec:	40002800 	.word	0x40002800

080054f0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	0002      	movs	r2, r0
 80054f8:	1dfb      	adds	r3, r7, #7
 80054fa:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005500:	230b      	movs	r3, #11
 8005502:	18fb      	adds	r3, r7, r3
 8005504:	1dfa      	adds	r2, r7, #7
 8005506:	7812      	ldrb	r2, [r2, #0]
 8005508:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800550a:	e008      	b.n	800551e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3301      	adds	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005512:	220b      	movs	r2, #11
 8005514:	18bb      	adds	r3, r7, r2
 8005516:	18ba      	adds	r2, r7, r2
 8005518:	7812      	ldrb	r2, [r2, #0]
 800551a:	3a0a      	subs	r2, #10
 800551c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800551e:	210b      	movs	r1, #11
 8005520:	187b      	adds	r3, r7, r1
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b09      	cmp	r3, #9
 8005526:	d8f1      	bhi.n	800550c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	b2da      	uxtb	r2, r3
 8005530:	187b      	adds	r3, r7, r1
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	4313      	orrs	r3, r2
 8005536:	b2db      	uxtb	r3, r3
}
 8005538:	0018      	movs	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	b004      	add	sp, #16
 800553e:	bd80      	pop	{r7, pc}

08005540 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	0002      	movs	r2, r0
 8005548:	1dfb      	adds	r3, r7, #7
 800554a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800554c:	1dfb      	adds	r3, r7, #7
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	091b      	lsrs	r3, r3, #4
 8005552:	b2db      	uxtb	r3, r3
 8005554:	001a      	movs	r2, r3
 8005556:	0013      	movs	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	189b      	adds	r3, r3, r2
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	b2da      	uxtb	r2, r3
 8005564:	1dfb      	adds	r3, r7, #7
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	210f      	movs	r1, #15
 800556a:	400b      	ands	r3, r1
 800556c:	b2db      	uxtb	r3, r3
 800556e:	18d3      	adds	r3, r2, r3
 8005570:	b2db      	uxtb	r3, r3
}
 8005572:	0018      	movs	r0, r3
 8005574:	46bd      	mov	sp, r7
 8005576:	b004      	add	sp, #16
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2228      	movs	r2, #40	@ 0x28
 800558a:	5c9b      	ldrb	r3, [r3, r2]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d101      	bne.n	8005594 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8005590:	2302      	movs	r3, #2
 8005592:	e035      	b.n	8005600 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2228      	movs	r2, #40	@ 0x28
 8005598:	2101      	movs	r1, #1
 800559a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2229      	movs	r2, #41	@ 0x29
 80055a0:	2102      	movs	r1, #2
 80055a2:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	22ca      	movs	r2, #202	@ 0xca
 80055aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2253      	movs	r2, #83	@ 0x53
 80055b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699a      	ldr	r2, [r3, #24]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4912      	ldr	r1, [pc, #72]	@ (8005608 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 80055c0:	400a      	ands	r2, r1
 80055c2:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6999      	ldr	r1, [r3, #24]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2180      	movs	r1, #128	@ 0x80
 80055e0:	0409      	lsls	r1, r1, #16
 80055e2:	430a      	orrs	r2, r1
 80055e4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	22ff      	movs	r2, #255	@ 0xff
 80055ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2229      	movs	r2, #41	@ 0x29
 80055f2:	2101      	movs	r1, #1
 80055f4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2228      	movs	r2, #40	@ 0x28
 80055fa:	2100      	movs	r1, #0
 80055fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	0018      	movs	r0, r3
 8005602:	46bd      	mov	sp, r7
 8005604:	b002      	add	sp, #8
 8005606:	bd80      	pop	{r7, pc}
 8005608:	fff7ffff 	.word	0xfff7ffff

0800560c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005614:	46c0      	nop			@ (mov r8, r8)
 8005616:	46bd      	mov	sp, r7
 8005618:	b002      	add	sp, #8
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e04a      	b.n	80056c4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	223d      	movs	r2, #61	@ 0x3d
 8005632:	5c9b      	ldrb	r3, [r3, r2]
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d107      	bne.n	800564a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	223c      	movs	r2, #60	@ 0x3c
 800563e:	2100      	movs	r1, #0
 8005640:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	0018      	movs	r0, r3
 8005646:	f7fc fc87 	bl	8001f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	223d      	movs	r2, #61	@ 0x3d
 800564e:	2102      	movs	r1, #2
 8005650:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3304      	adds	r3, #4
 800565a:	0019      	movs	r1, r3
 800565c:	0010      	movs	r0, r2
 800565e:	f000 fadd 	bl	8005c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2248      	movs	r2, #72	@ 0x48
 8005666:	2101      	movs	r1, #1
 8005668:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	223e      	movs	r2, #62	@ 0x3e
 800566e:	2101      	movs	r1, #1
 8005670:	5499      	strb	r1, [r3, r2]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	223f      	movs	r2, #63	@ 0x3f
 8005676:	2101      	movs	r1, #1
 8005678:	5499      	strb	r1, [r3, r2]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2240      	movs	r2, #64	@ 0x40
 800567e:	2101      	movs	r1, #1
 8005680:	5499      	strb	r1, [r3, r2]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2241      	movs	r2, #65	@ 0x41
 8005686:	2101      	movs	r1, #1
 8005688:	5499      	strb	r1, [r3, r2]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2242      	movs	r2, #66	@ 0x42
 800568e:	2101      	movs	r1, #1
 8005690:	5499      	strb	r1, [r3, r2]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2243      	movs	r2, #67	@ 0x43
 8005696:	2101      	movs	r1, #1
 8005698:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2244      	movs	r2, #68	@ 0x44
 800569e:	2101      	movs	r1, #1
 80056a0:	5499      	strb	r1, [r3, r2]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2245      	movs	r2, #69	@ 0x45
 80056a6:	2101      	movs	r1, #1
 80056a8:	5499      	strb	r1, [r3, r2]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2246      	movs	r2, #70	@ 0x46
 80056ae:	2101      	movs	r1, #1
 80056b0:	5499      	strb	r1, [r3, r2]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2247      	movs	r2, #71	@ 0x47
 80056b6:	2101      	movs	r1, #1
 80056b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	223d      	movs	r2, #61	@ 0x3d
 80056be:	2101      	movs	r1, #1
 80056c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	0018      	movs	r0, r3
 80056c6:	46bd      	mov	sp, r7
 80056c8:	b002      	add	sp, #8
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	223d      	movs	r2, #61	@ 0x3d
 80056d8:	5c9b      	ldrb	r3, [r3, r2]
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d001      	beq.n	80056e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e035      	b.n	8005750 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	223d      	movs	r2, #61	@ 0x3d
 80056e8:	2102      	movs	r1, #2
 80056ea:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a19      	ldr	r2, [pc, #100]	@ (8005758 <HAL_TIM_Base_Start+0x8c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00a      	beq.n	800570c <HAL_TIM_Base_Start+0x40>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	2380      	movs	r3, #128	@ 0x80
 80056fc:	05db      	lsls	r3, r3, #23
 80056fe:	429a      	cmp	r2, r3
 8005700:	d004      	beq.n	800570c <HAL_TIM_Base_Start+0x40>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a15      	ldr	r2, [pc, #84]	@ (800575c <HAL_TIM_Base_Start+0x90>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d116      	bne.n	800573a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	4a13      	ldr	r2, [pc, #76]	@ (8005760 <HAL_TIM_Base_Start+0x94>)
 8005714:	4013      	ands	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b06      	cmp	r3, #6
 800571c:	d016      	beq.n	800574c <HAL_TIM_Base_Start+0x80>
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	2380      	movs	r3, #128	@ 0x80
 8005722:	025b      	lsls	r3, r3, #9
 8005724:	429a      	cmp	r2, r3
 8005726:	d011      	beq.n	800574c <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2101      	movs	r1, #1
 8005734:	430a      	orrs	r2, r1
 8005736:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005738:	e008      	b.n	800574c <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2101      	movs	r1, #1
 8005746:	430a      	orrs	r2, r1
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	e000      	b.n	800574e <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	0018      	movs	r0, r3
 8005752:	46bd      	mov	sp, r7
 8005754:	b004      	add	sp, #16
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40012c00 	.word	0x40012c00
 800575c:	40000400 	.word	0x40000400
 8005760:	00010007 	.word	0x00010007

08005764 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	4a0d      	ldr	r2, [pc, #52]	@ (80057a8 <HAL_TIM_Base_Stop+0x44>)
 8005774:	4013      	ands	r3, r2
 8005776:	d10d      	bne.n	8005794 <HAL_TIM_Base_Stop+0x30>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	4a0b      	ldr	r2, [pc, #44]	@ (80057ac <HAL_TIM_Base_Stop+0x48>)
 8005780:	4013      	ands	r3, r2
 8005782:	d107      	bne.n	8005794 <HAL_TIM_Base_Stop+0x30>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2101      	movs	r1, #1
 8005790:	438a      	bics	r2, r1
 8005792:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	223d      	movs	r2, #61	@ 0x3d
 8005798:	2101      	movs	r1, #1
 800579a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	0018      	movs	r0, r3
 80057a0:	46bd      	mov	sp, r7
 80057a2:	b002      	add	sp, #8
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	46c0      	nop			@ (mov r8, r8)
 80057a8:	00001111 	.word	0x00001111
 80057ac:	00000444 	.word	0x00000444

080057b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e04a      	b.n	8005858 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	223d      	movs	r2, #61	@ 0x3d
 80057c6:	5c9b      	ldrb	r3, [r3, r2]
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d107      	bne.n	80057de <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	223c      	movs	r2, #60	@ 0x3c
 80057d2:	2100      	movs	r1, #0
 80057d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	0018      	movs	r0, r3
 80057da:	f7fc fba1 	bl	8001f20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	223d      	movs	r2, #61	@ 0x3d
 80057e2:	2102      	movs	r1, #2
 80057e4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3304      	adds	r3, #4
 80057ee:	0019      	movs	r1, r3
 80057f0:	0010      	movs	r0, r2
 80057f2:	f000 fa13 	bl	8005c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2248      	movs	r2, #72	@ 0x48
 80057fa:	2101      	movs	r1, #1
 80057fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	223e      	movs	r2, #62	@ 0x3e
 8005802:	2101      	movs	r1, #1
 8005804:	5499      	strb	r1, [r3, r2]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	223f      	movs	r2, #63	@ 0x3f
 800580a:	2101      	movs	r1, #1
 800580c:	5499      	strb	r1, [r3, r2]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2240      	movs	r2, #64	@ 0x40
 8005812:	2101      	movs	r1, #1
 8005814:	5499      	strb	r1, [r3, r2]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2241      	movs	r2, #65	@ 0x41
 800581a:	2101      	movs	r1, #1
 800581c:	5499      	strb	r1, [r3, r2]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2242      	movs	r2, #66	@ 0x42
 8005822:	2101      	movs	r1, #1
 8005824:	5499      	strb	r1, [r3, r2]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2243      	movs	r2, #67	@ 0x43
 800582a:	2101      	movs	r1, #1
 800582c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2244      	movs	r2, #68	@ 0x44
 8005832:	2101      	movs	r1, #1
 8005834:	5499      	strb	r1, [r3, r2]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2245      	movs	r2, #69	@ 0x45
 800583a:	2101      	movs	r1, #1
 800583c:	5499      	strb	r1, [r3, r2]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2246      	movs	r2, #70	@ 0x46
 8005842:	2101      	movs	r1, #1
 8005844:	5499      	strb	r1, [r3, r2]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2247      	movs	r2, #71	@ 0x47
 800584a:	2101      	movs	r1, #1
 800584c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	223d      	movs	r2, #61	@ 0x3d
 8005852:	2101      	movs	r1, #1
 8005854:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	0018      	movs	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	b002      	add	sp, #8
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d108      	bne.n	8005882 <HAL_TIM_PWM_Start+0x22>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	223e      	movs	r2, #62	@ 0x3e
 8005874:	5c9b      	ldrb	r3, [r3, r2]
 8005876:	b2db      	uxtb	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	1e5a      	subs	r2, r3, #1
 800587c:	4193      	sbcs	r3, r2
 800587e:	b2db      	uxtb	r3, r3
 8005880:	e037      	b.n	80058f2 <HAL_TIM_PWM_Start+0x92>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b04      	cmp	r3, #4
 8005886:	d108      	bne.n	800589a <HAL_TIM_PWM_Start+0x3a>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	223f      	movs	r2, #63	@ 0x3f
 800588c:	5c9b      	ldrb	r3, [r3, r2]
 800588e:	b2db      	uxtb	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	1e5a      	subs	r2, r3, #1
 8005894:	4193      	sbcs	r3, r2
 8005896:	b2db      	uxtb	r3, r3
 8005898:	e02b      	b.n	80058f2 <HAL_TIM_PWM_Start+0x92>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b08      	cmp	r3, #8
 800589e:	d108      	bne.n	80058b2 <HAL_TIM_PWM_Start+0x52>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2240      	movs	r2, #64	@ 0x40
 80058a4:	5c9b      	ldrb	r3, [r3, r2]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	1e5a      	subs	r2, r3, #1
 80058ac:	4193      	sbcs	r3, r2
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	e01f      	b.n	80058f2 <HAL_TIM_PWM_Start+0x92>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b0c      	cmp	r3, #12
 80058b6:	d108      	bne.n	80058ca <HAL_TIM_PWM_Start+0x6a>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2241      	movs	r2, #65	@ 0x41
 80058bc:	5c9b      	ldrb	r3, [r3, r2]
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	3b01      	subs	r3, #1
 80058c2:	1e5a      	subs	r2, r3, #1
 80058c4:	4193      	sbcs	r3, r2
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	e013      	b.n	80058f2 <HAL_TIM_PWM_Start+0x92>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d108      	bne.n	80058e2 <HAL_TIM_PWM_Start+0x82>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2242      	movs	r2, #66	@ 0x42
 80058d4:	5c9b      	ldrb	r3, [r3, r2]
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	3b01      	subs	r3, #1
 80058da:	1e5a      	subs	r2, r3, #1
 80058dc:	4193      	sbcs	r3, r2
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	e007      	b.n	80058f2 <HAL_TIM_PWM_Start+0x92>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2243      	movs	r2, #67	@ 0x43
 80058e6:	5c9b      	ldrb	r3, [r3, r2]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	3b01      	subs	r3, #1
 80058ec:	1e5a      	subs	r2, r3, #1
 80058ee:	4193      	sbcs	r3, r2
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e081      	b.n	80059fe <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d104      	bne.n	800590a <HAL_TIM_PWM_Start+0xaa>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	223e      	movs	r2, #62	@ 0x3e
 8005904:	2102      	movs	r1, #2
 8005906:	5499      	strb	r1, [r3, r2]
 8005908:	e023      	b.n	8005952 <HAL_TIM_PWM_Start+0xf2>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b04      	cmp	r3, #4
 800590e:	d104      	bne.n	800591a <HAL_TIM_PWM_Start+0xba>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	223f      	movs	r2, #63	@ 0x3f
 8005914:	2102      	movs	r1, #2
 8005916:	5499      	strb	r1, [r3, r2]
 8005918:	e01b      	b.n	8005952 <HAL_TIM_PWM_Start+0xf2>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b08      	cmp	r3, #8
 800591e:	d104      	bne.n	800592a <HAL_TIM_PWM_Start+0xca>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2240      	movs	r2, #64	@ 0x40
 8005924:	2102      	movs	r1, #2
 8005926:	5499      	strb	r1, [r3, r2]
 8005928:	e013      	b.n	8005952 <HAL_TIM_PWM_Start+0xf2>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b0c      	cmp	r3, #12
 800592e:	d104      	bne.n	800593a <HAL_TIM_PWM_Start+0xda>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2241      	movs	r2, #65	@ 0x41
 8005934:	2102      	movs	r1, #2
 8005936:	5499      	strb	r1, [r3, r2]
 8005938:	e00b      	b.n	8005952 <HAL_TIM_PWM_Start+0xf2>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b10      	cmp	r3, #16
 800593e:	d104      	bne.n	800594a <HAL_TIM_PWM_Start+0xea>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2242      	movs	r2, #66	@ 0x42
 8005944:	2102      	movs	r1, #2
 8005946:	5499      	strb	r1, [r3, r2]
 8005948:	e003      	b.n	8005952 <HAL_TIM_PWM_Start+0xf2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2243      	movs	r2, #67	@ 0x43
 800594e:	2102      	movs	r1, #2
 8005950:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6839      	ldr	r1, [r7, #0]
 8005958:	2201      	movs	r2, #1
 800595a:	0018      	movs	r0, r3
 800595c:	f000 fc7e 	bl	800625c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a28      	ldr	r2, [pc, #160]	@ (8005a08 <HAL_TIM_PWM_Start+0x1a8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d009      	beq.n	800597e <HAL_TIM_PWM_Start+0x11e>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a27      	ldr	r2, [pc, #156]	@ (8005a0c <HAL_TIM_PWM_Start+0x1ac>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d004      	beq.n	800597e <HAL_TIM_PWM_Start+0x11e>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a25      	ldr	r2, [pc, #148]	@ (8005a10 <HAL_TIM_PWM_Start+0x1b0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d101      	bne.n	8005982 <HAL_TIM_PWM_Start+0x122>
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <HAL_TIM_PWM_Start+0x124>
 8005982:	2300      	movs	r3, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d008      	beq.n	800599a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2180      	movs	r1, #128	@ 0x80
 8005994:	0209      	lsls	r1, r1, #8
 8005996:	430a      	orrs	r2, r1
 8005998:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a1a      	ldr	r2, [pc, #104]	@ (8005a08 <HAL_TIM_PWM_Start+0x1a8>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00a      	beq.n	80059ba <HAL_TIM_PWM_Start+0x15a>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	2380      	movs	r3, #128	@ 0x80
 80059aa:	05db      	lsls	r3, r3, #23
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d004      	beq.n	80059ba <HAL_TIM_PWM_Start+0x15a>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a17      	ldr	r2, [pc, #92]	@ (8005a14 <HAL_TIM_PWM_Start+0x1b4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d116      	bne.n	80059e8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	4a15      	ldr	r2, [pc, #84]	@ (8005a18 <HAL_TIM_PWM_Start+0x1b8>)
 80059c2:	4013      	ands	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b06      	cmp	r3, #6
 80059ca:	d016      	beq.n	80059fa <HAL_TIM_PWM_Start+0x19a>
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	2380      	movs	r3, #128	@ 0x80
 80059d0:	025b      	lsls	r3, r3, #9
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d011      	beq.n	80059fa <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2101      	movs	r1, #1
 80059e2:	430a      	orrs	r2, r1
 80059e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e6:	e008      	b.n	80059fa <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2101      	movs	r1, #1
 80059f4:	430a      	orrs	r2, r1
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	e000      	b.n	80059fc <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fa:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	0018      	movs	r0, r3
 8005a00:	46bd      	mov	sp, r7
 8005a02:	b004      	add	sp, #16
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	46c0      	nop			@ (mov r8, r8)
 8005a08:	40012c00 	.word	0x40012c00
 8005a0c:	40014400 	.word	0x40014400
 8005a10:	40014800 	.word	0x40014800
 8005a14:	40000400 	.word	0x40000400
 8005a18:	00010007 	.word	0x00010007

08005a1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a28:	2317      	movs	r3, #23
 8005a2a:	18fb      	adds	r3, r7, r3
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	223c      	movs	r2, #60	@ 0x3c
 8005a34:	5c9b      	ldrb	r3, [r3, r2]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <HAL_TIM_PWM_ConfigChannel+0x22>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e0e5      	b.n	8005c0a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	223c      	movs	r2, #60	@ 0x3c
 8005a42:	2101      	movs	r1, #1
 8005a44:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b14      	cmp	r3, #20
 8005a4a:	d900      	bls.n	8005a4e <HAL_TIM_PWM_ConfigChannel+0x32>
 8005a4c:	e0d1      	b.n	8005bf2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	009a      	lsls	r2, r3, #2
 8005a52:	4b70      	ldr	r3, [pc, #448]	@ (8005c14 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005a54:	18d3      	adds	r3, r2, r3
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	0011      	movs	r1, r2
 8005a62:	0018      	movs	r0, r3
 8005a64:	f000 f95e 	bl	8005d24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2108      	movs	r1, #8
 8005a74:	430a      	orrs	r2, r1
 8005a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699a      	ldr	r2, [r3, #24]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2104      	movs	r1, #4
 8005a84:	438a      	bics	r2, r1
 8005a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6999      	ldr	r1, [r3, #24]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	691a      	ldr	r2, [r3, #16]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	619a      	str	r2, [r3, #24]
      break;
 8005a9a:	e0af      	b.n	8005bfc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	0011      	movs	r1, r2
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	f000 f9bd 	bl	8005e24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	699a      	ldr	r2, [r3, #24]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2180      	movs	r1, #128	@ 0x80
 8005ab6:	0109      	lsls	r1, r1, #4
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4954      	ldr	r1, [pc, #336]	@ (8005c18 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005ac8:	400a      	ands	r2, r1
 8005aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6999      	ldr	r1, [r3, #24]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	021a      	lsls	r2, r3, #8
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	619a      	str	r2, [r3, #24]
      break;
 8005ae0:	e08c      	b.n	8005bfc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	0011      	movs	r1, r2
 8005aea:	0018      	movs	r0, r3
 8005aec:	f000 fa18 	bl	8005f20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	69da      	ldr	r2, [r3, #28]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2108      	movs	r1, #8
 8005afc:	430a      	orrs	r2, r1
 8005afe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	69da      	ldr	r2, [r3, #28]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2104      	movs	r1, #4
 8005b0c:	438a      	bics	r2, r1
 8005b0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	69d9      	ldr	r1, [r3, #28]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	691a      	ldr	r2, [r3, #16]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	61da      	str	r2, [r3, #28]
      break;
 8005b22:	e06b      	b.n	8005bfc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	0011      	movs	r1, r2
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	f000 fa79 	bl	8006024 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69da      	ldr	r2, [r3, #28]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2180      	movs	r1, #128	@ 0x80
 8005b3e:	0109      	lsls	r1, r1, #4
 8005b40:	430a      	orrs	r2, r1
 8005b42:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69da      	ldr	r2, [r3, #28]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4932      	ldr	r1, [pc, #200]	@ (8005c18 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005b50:	400a      	ands	r2, r1
 8005b52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	69d9      	ldr	r1, [r3, #28]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	021a      	lsls	r2, r3, #8
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	61da      	str	r2, [r3, #28]
      break;
 8005b68:	e048      	b.n	8005bfc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	0011      	movs	r1, r2
 8005b72:	0018      	movs	r0, r3
 8005b74:	f000 faba 	bl	80060ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2108      	movs	r1, #8
 8005b84:	430a      	orrs	r2, r1
 8005b86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2104      	movs	r1, #4
 8005b94:	438a      	bics	r2, r1
 8005b96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	691a      	ldr	r2, [r3, #16]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005baa:	e027      	b.n	8005bfc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	0011      	movs	r1, r2
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f000 faf3 	bl	80061a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2180      	movs	r1, #128	@ 0x80
 8005bc6:	0109      	lsls	r1, r1, #4
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4910      	ldr	r1, [pc, #64]	@ (8005c18 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005bd8:	400a      	ands	r2, r1
 8005bda:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	021a      	lsls	r2, r3, #8
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005bf0:	e004      	b.n	8005bfc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005bf2:	2317      	movs	r3, #23
 8005bf4:	18fb      	adds	r3, r7, r3
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	701a      	strb	r2, [r3, #0]
      break;
 8005bfa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	223c      	movs	r2, #60	@ 0x3c
 8005c00:	2100      	movs	r1, #0
 8005c02:	5499      	strb	r1, [r3, r2]

  return status;
 8005c04:	2317      	movs	r3, #23
 8005c06:	18fb      	adds	r3, r7, r3
 8005c08:	781b      	ldrb	r3, [r3, #0]
}
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	b006      	add	sp, #24
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	46c0      	nop			@ (mov r8, r8)
 8005c14:	0800646c 	.word	0x0800646c
 8005c18:	fffffbff 	.word	0xfffffbff

08005c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a37      	ldr	r2, [pc, #220]	@ (8005d0c <TIM_Base_SetConfig+0xf0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d008      	beq.n	8005c46 <TIM_Base_SetConfig+0x2a>
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	2380      	movs	r3, #128	@ 0x80
 8005c38:	05db      	lsls	r3, r3, #23
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d003      	beq.n	8005c46 <TIM_Base_SetConfig+0x2a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a33      	ldr	r2, [pc, #204]	@ (8005d10 <TIM_Base_SetConfig+0xf4>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d108      	bne.n	8005c58 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2270      	movs	r2, #112	@ 0x70
 8005c4a:	4393      	bics	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a2c      	ldr	r2, [pc, #176]	@ (8005d0c <TIM_Base_SetConfig+0xf0>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d014      	beq.n	8005c8a <TIM_Base_SetConfig+0x6e>
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	2380      	movs	r3, #128	@ 0x80
 8005c64:	05db      	lsls	r3, r3, #23
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d00f      	beq.n	8005c8a <TIM_Base_SetConfig+0x6e>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a28      	ldr	r2, [pc, #160]	@ (8005d10 <TIM_Base_SetConfig+0xf4>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d00b      	beq.n	8005c8a <TIM_Base_SetConfig+0x6e>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a27      	ldr	r2, [pc, #156]	@ (8005d14 <TIM_Base_SetConfig+0xf8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d007      	beq.n	8005c8a <TIM_Base_SetConfig+0x6e>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a26      	ldr	r2, [pc, #152]	@ (8005d18 <TIM_Base_SetConfig+0xfc>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d003      	beq.n	8005c8a <TIM_Base_SetConfig+0x6e>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a25      	ldr	r2, [pc, #148]	@ (8005d1c <TIM_Base_SetConfig+0x100>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d108      	bne.n	8005c9c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4a24      	ldr	r2, [pc, #144]	@ (8005d20 <TIM_Base_SetConfig+0x104>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2280      	movs	r2, #128	@ 0x80
 8005ca0:	4393      	bics	r3, r2
 8005ca2:	001a      	movs	r2, r3
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a11      	ldr	r2, [pc, #68]	@ (8005d0c <TIM_Base_SetConfig+0xf0>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d007      	beq.n	8005cda <TIM_Base_SetConfig+0xbe>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a12      	ldr	r2, [pc, #72]	@ (8005d18 <TIM_Base_SetConfig+0xfc>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d003      	beq.n	8005cda <TIM_Base_SetConfig+0xbe>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a11      	ldr	r2, [pc, #68]	@ (8005d1c <TIM_Base_SetConfig+0x100>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d103      	bne.n	8005ce2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	691a      	ldr	r2, [r3, #16]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	2201      	movs	r2, #1
 8005cee:	4013      	ands	r3, r2
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d106      	bne.n	8005d02 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	4393      	bics	r3, r2
 8005cfc:	001a      	movs	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	611a      	str	r2, [r3, #16]
  }
}
 8005d02:	46c0      	nop			@ (mov r8, r8)
 8005d04:	46bd      	mov	sp, r7
 8005d06:	b004      	add	sp, #16
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	46c0      	nop			@ (mov r8, r8)
 8005d0c:	40012c00 	.word	0x40012c00
 8005d10:	40000400 	.word	0x40000400
 8005d14:	40002000 	.word	0x40002000
 8005d18:	40014400 	.word	0x40014400
 8005d1c:	40014800 	.word	0x40014800
 8005d20:	fffffcff 	.word	0xfffffcff

08005d24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	4393      	bics	r3, r2
 8005d3c:	001a      	movs	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	4a2e      	ldr	r2, [pc, #184]	@ (8005e0c <TIM_OC1_SetConfig+0xe8>)
 8005d52:	4013      	ands	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2203      	movs	r2, #3
 8005d5a:	4393      	bics	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	4393      	bics	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a24      	ldr	r2, [pc, #144]	@ (8005e10 <TIM_OC1_SetConfig+0xec>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d007      	beq.n	8005d92 <TIM_OC1_SetConfig+0x6e>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a23      	ldr	r2, [pc, #140]	@ (8005e14 <TIM_OC1_SetConfig+0xf0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d003      	beq.n	8005d92 <TIM_OC1_SetConfig+0x6e>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a22      	ldr	r2, [pc, #136]	@ (8005e18 <TIM_OC1_SetConfig+0xf4>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d10c      	bne.n	8005dac <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2208      	movs	r2, #8
 8005d96:	4393      	bics	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	2204      	movs	r2, #4
 8005da8:	4393      	bics	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a18      	ldr	r2, [pc, #96]	@ (8005e10 <TIM_OC1_SetConfig+0xec>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d007      	beq.n	8005dc4 <TIM_OC1_SetConfig+0xa0>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a17      	ldr	r2, [pc, #92]	@ (8005e14 <TIM_OC1_SetConfig+0xf0>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_OC1_SetConfig+0xa0>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a16      	ldr	r2, [pc, #88]	@ (8005e18 <TIM_OC1_SetConfig+0xf4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d111      	bne.n	8005de8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4a15      	ldr	r2, [pc, #84]	@ (8005e1c <TIM_OC1_SetConfig+0xf8>)
 8005dc8:	4013      	ands	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	4a14      	ldr	r2, [pc, #80]	@ (8005e20 <TIM_OC1_SetConfig+0xfc>)
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	621a      	str	r2, [r3, #32]
}
 8005e02:	46c0      	nop			@ (mov r8, r8)
 8005e04:	46bd      	mov	sp, r7
 8005e06:	b006      	add	sp, #24
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	46c0      	nop			@ (mov r8, r8)
 8005e0c:	fffeff8f 	.word	0xfffeff8f
 8005e10:	40012c00 	.word	0x40012c00
 8005e14:	40014400 	.word	0x40014400
 8005e18:	40014800 	.word	0x40014800
 8005e1c:	fffffeff 	.word	0xfffffeff
 8005e20:	fffffdff 	.word	0xfffffdff

08005e24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	2210      	movs	r2, #16
 8005e3a:	4393      	bics	r3, r2
 8005e3c:	001a      	movs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4a2c      	ldr	r2, [pc, #176]	@ (8005f04 <TIM_OC2_SetConfig+0xe0>)
 8005e52:	4013      	ands	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4a2b      	ldr	r2, [pc, #172]	@ (8005f08 <TIM_OC2_SetConfig+0xe4>)
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	4393      	bics	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a22      	ldr	r2, [pc, #136]	@ (8005f0c <TIM_OC2_SetConfig+0xe8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d10d      	bne.n	8005ea2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2280      	movs	r2, #128	@ 0x80
 8005e8a:	4393      	bics	r3, r2
 8005e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2240      	movs	r2, #64	@ 0x40
 8005e9e:	4393      	bics	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a19      	ldr	r2, [pc, #100]	@ (8005f0c <TIM_OC2_SetConfig+0xe8>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d007      	beq.n	8005eba <TIM_OC2_SetConfig+0x96>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a18      	ldr	r2, [pc, #96]	@ (8005f10 <TIM_OC2_SetConfig+0xec>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d003      	beq.n	8005eba <TIM_OC2_SetConfig+0x96>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a17      	ldr	r2, [pc, #92]	@ (8005f14 <TIM_OC2_SetConfig+0xf0>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d113      	bne.n	8005ee2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	4a16      	ldr	r2, [pc, #88]	@ (8005f18 <TIM_OC2_SetConfig+0xf4>)
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	4a15      	ldr	r2, [pc, #84]	@ (8005f1c <TIM_OC2_SetConfig+0xf8>)
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	621a      	str	r2, [r3, #32]
}
 8005efc:	46c0      	nop			@ (mov r8, r8)
 8005efe:	46bd      	mov	sp, r7
 8005f00:	b006      	add	sp, #24
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	feff8fff 	.word	0xfeff8fff
 8005f08:	fffffcff 	.word	0xfffffcff
 8005f0c:	40012c00 	.word	0x40012c00
 8005f10:	40014400 	.word	0x40014400
 8005f14:	40014800 	.word	0x40014800
 8005f18:	fffffbff 	.word	0xfffffbff
 8005f1c:	fffff7ff 	.word	0xfffff7ff

08005f20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	4a31      	ldr	r2, [pc, #196]	@ (8005ffc <TIM_OC3_SetConfig+0xdc>)
 8005f36:	401a      	ands	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4a2d      	ldr	r2, [pc, #180]	@ (8006000 <TIM_OC3_SetConfig+0xe0>)
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2203      	movs	r2, #3
 8005f54:	4393      	bics	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	4a27      	ldr	r2, [pc, #156]	@ (8006004 <TIM_OC3_SetConfig+0xe4>)
 8005f66:	4013      	ands	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	021b      	lsls	r3, r3, #8
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a23      	ldr	r2, [pc, #140]	@ (8006008 <TIM_OC3_SetConfig+0xe8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d10d      	bne.n	8005f9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	4a22      	ldr	r2, [pc, #136]	@ (800600c <TIM_OC3_SetConfig+0xec>)
 8005f82:	4013      	ands	r3, r2
 8005f84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	021b      	lsls	r3, r3, #8
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	4a1e      	ldr	r2, [pc, #120]	@ (8006010 <TIM_OC3_SetConfig+0xf0>)
 8005f96:	4013      	ands	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a1a      	ldr	r2, [pc, #104]	@ (8006008 <TIM_OC3_SetConfig+0xe8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d007      	beq.n	8005fb2 <TIM_OC3_SetConfig+0x92>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8006014 <TIM_OC3_SetConfig+0xf4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d003      	beq.n	8005fb2 <TIM_OC3_SetConfig+0x92>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a1a      	ldr	r2, [pc, #104]	@ (8006018 <TIM_OC3_SetConfig+0xf8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d113      	bne.n	8005fda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	4a19      	ldr	r2, [pc, #100]	@ (800601c <TIM_OC3_SetConfig+0xfc>)
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	4a18      	ldr	r2, [pc, #96]	@ (8006020 <TIM_OC3_SetConfig+0x100>)
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	621a      	str	r2, [r3, #32]
}
 8005ff4:	46c0      	nop			@ (mov r8, r8)
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	b006      	add	sp, #24
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	fffffeff 	.word	0xfffffeff
 8006000:	fffeff8f 	.word	0xfffeff8f
 8006004:	fffffdff 	.word	0xfffffdff
 8006008:	40012c00 	.word	0x40012c00
 800600c:	fffff7ff 	.word	0xfffff7ff
 8006010:	fffffbff 	.word	0xfffffbff
 8006014:	40014400 	.word	0x40014400
 8006018:	40014800 	.word	0x40014800
 800601c:	ffffefff 	.word	0xffffefff
 8006020:	ffffdfff 	.word	0xffffdfff

08006024 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	4a24      	ldr	r2, [pc, #144]	@ (80060cc <TIM_OC4_SetConfig+0xa8>)
 800603a:	401a      	ands	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4a20      	ldr	r2, [pc, #128]	@ (80060d0 <TIM_OC4_SetConfig+0xac>)
 8006050:	4013      	ands	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4a1f      	ldr	r2, [pc, #124]	@ (80060d4 <TIM_OC4_SetConfig+0xb0>)
 8006058:	4013      	ands	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	021b      	lsls	r3, r3, #8
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	4a1b      	ldr	r2, [pc, #108]	@ (80060d8 <TIM_OC4_SetConfig+0xb4>)
 800606c:	4013      	ands	r3, r2
 800606e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	031b      	lsls	r3, r3, #12
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	4313      	orrs	r3, r2
 800607a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a17      	ldr	r2, [pc, #92]	@ (80060dc <TIM_OC4_SetConfig+0xb8>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d007      	beq.n	8006094 <TIM_OC4_SetConfig+0x70>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a16      	ldr	r2, [pc, #88]	@ (80060e0 <TIM_OC4_SetConfig+0xbc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d003      	beq.n	8006094 <TIM_OC4_SetConfig+0x70>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a15      	ldr	r2, [pc, #84]	@ (80060e4 <TIM_OC4_SetConfig+0xc0>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d109      	bne.n	80060a8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	4a14      	ldr	r2, [pc, #80]	@ (80060e8 <TIM_OC4_SetConfig+0xc4>)
 8006098:	4013      	ands	r3, r2
 800609a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	019b      	lsls	r3, r3, #6
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	621a      	str	r2, [r3, #32]
}
 80060c2:	46c0      	nop			@ (mov r8, r8)
 80060c4:	46bd      	mov	sp, r7
 80060c6:	b006      	add	sp, #24
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	46c0      	nop			@ (mov r8, r8)
 80060cc:	ffffefff 	.word	0xffffefff
 80060d0:	feff8fff 	.word	0xfeff8fff
 80060d4:	fffffcff 	.word	0xfffffcff
 80060d8:	ffffdfff 	.word	0xffffdfff
 80060dc:	40012c00 	.word	0x40012c00
 80060e0:	40014400 	.word	0x40014400
 80060e4:	40014800 	.word	0x40014800
 80060e8:	ffffbfff 	.word	0xffffbfff

080060ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	4a21      	ldr	r2, [pc, #132]	@ (8006188 <TIM_OC5_SetConfig+0x9c>)
 8006102:	401a      	ands	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4a1d      	ldr	r2, [pc, #116]	@ (800618c <TIM_OC5_SetConfig+0xa0>)
 8006118:	4013      	ands	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	4a19      	ldr	r2, [pc, #100]	@ (8006190 <TIM_OC5_SetConfig+0xa4>)
 800612a:	4013      	ands	r3, r2
 800612c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	041b      	lsls	r3, r3, #16
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	4313      	orrs	r3, r2
 8006138:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a15      	ldr	r2, [pc, #84]	@ (8006194 <TIM_OC5_SetConfig+0xa8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d007      	beq.n	8006152 <TIM_OC5_SetConfig+0x66>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a14      	ldr	r2, [pc, #80]	@ (8006198 <TIM_OC5_SetConfig+0xac>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d003      	beq.n	8006152 <TIM_OC5_SetConfig+0x66>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a13      	ldr	r2, [pc, #76]	@ (800619c <TIM_OC5_SetConfig+0xb0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d109      	bne.n	8006166 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	4a0c      	ldr	r2, [pc, #48]	@ (8006188 <TIM_OC5_SetConfig+0x9c>)
 8006156:	4013      	ands	r3, r2
 8006158:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	021b      	lsls	r3, r3, #8
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	4313      	orrs	r3, r2
 8006164:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	621a      	str	r2, [r3, #32]
}
 8006180:	46c0      	nop			@ (mov r8, r8)
 8006182:	46bd      	mov	sp, r7
 8006184:	b006      	add	sp, #24
 8006186:	bd80      	pop	{r7, pc}
 8006188:	fffeffff 	.word	0xfffeffff
 800618c:	fffeff8f 	.word	0xfffeff8f
 8006190:	fffdffff 	.word	0xfffdffff
 8006194:	40012c00 	.word	0x40012c00
 8006198:	40014400 	.word	0x40014400
 800619c:	40014800 	.word	0x40014800

080061a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	4a22      	ldr	r2, [pc, #136]	@ (8006240 <TIM_OC6_SetConfig+0xa0>)
 80061b6:	401a      	ands	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4a1e      	ldr	r2, [pc, #120]	@ (8006244 <TIM_OC6_SetConfig+0xa4>)
 80061cc:	4013      	ands	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	021b      	lsls	r3, r3, #8
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	4313      	orrs	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	4a1a      	ldr	r2, [pc, #104]	@ (8006248 <TIM_OC6_SetConfig+0xa8>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	051b      	lsls	r3, r3, #20
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a16      	ldr	r2, [pc, #88]	@ (800624c <TIM_OC6_SetConfig+0xac>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d007      	beq.n	8006208 <TIM_OC6_SetConfig+0x68>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a15      	ldr	r2, [pc, #84]	@ (8006250 <TIM_OC6_SetConfig+0xb0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d003      	beq.n	8006208 <TIM_OC6_SetConfig+0x68>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a14      	ldr	r2, [pc, #80]	@ (8006254 <TIM_OC6_SetConfig+0xb4>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d109      	bne.n	800621c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	4a13      	ldr	r2, [pc, #76]	@ (8006258 <TIM_OC6_SetConfig+0xb8>)
 800620c:	4013      	ands	r3, r2
 800620e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	029b      	lsls	r3, r3, #10
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	621a      	str	r2, [r3, #32]
}
 8006236:	46c0      	nop			@ (mov r8, r8)
 8006238:	46bd      	mov	sp, r7
 800623a:	b006      	add	sp, #24
 800623c:	bd80      	pop	{r7, pc}
 800623e:	46c0      	nop			@ (mov r8, r8)
 8006240:	ffefffff 	.word	0xffefffff
 8006244:	feff8fff 	.word	0xfeff8fff
 8006248:	ffdfffff 	.word	0xffdfffff
 800624c:	40012c00 	.word	0x40012c00
 8006250:	40014400 	.word	0x40014400
 8006254:	40014800 	.word	0x40014800
 8006258:	fffbffff 	.word	0xfffbffff

0800625c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	221f      	movs	r2, #31
 800626c:	4013      	ands	r3, r2
 800626e:	2201      	movs	r2, #1
 8006270:	409a      	lsls	r2, r3
 8006272:	0013      	movs	r3, r2
 8006274:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	43d2      	mvns	r2, r2
 800627e:	401a      	ands	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a1a      	ldr	r2, [r3, #32]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	211f      	movs	r1, #31
 800628c:	400b      	ands	r3, r1
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	4099      	lsls	r1, r3
 8006292:	000b      	movs	r3, r1
 8006294:	431a      	orrs	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	621a      	str	r2, [r3, #32]
}
 800629a:	46c0      	nop			@ (mov r8, r8)
 800629c:	46bd      	mov	sp, r7
 800629e:	b006      	add	sp, #24
 80062a0:	bd80      	pop	{r7, pc}
	...

080062a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	223c      	movs	r2, #60	@ 0x3c
 80062b2:	5c9b      	ldrb	r3, [r3, r2]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062b8:	2302      	movs	r3, #2
 80062ba:	e050      	b.n	800635e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	223c      	movs	r2, #60	@ 0x3c
 80062c0:	2101      	movs	r1, #1
 80062c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	223d      	movs	r2, #61	@ 0x3d
 80062c8:	2102      	movs	r1, #2
 80062ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a21      	ldr	r2, [pc, #132]	@ (8006368 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d108      	bne.n	80062f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	4a20      	ldr	r2, [pc, #128]	@ (800636c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80062ea:	4013      	ands	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2270      	movs	r2, #112	@ 0x70
 80062fc:	4393      	bics	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	4313      	orrs	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a14      	ldr	r2, [pc, #80]	@ (8006368 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d00a      	beq.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	2380      	movs	r3, #128	@ 0x80
 8006322:	05db      	lsls	r3, r3, #23
 8006324:	429a      	cmp	r2, r3
 8006326:	d004      	beq.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a10      	ldr	r2, [pc, #64]	@ (8006370 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d10c      	bne.n	800634c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2280      	movs	r2, #128	@ 0x80
 8006336:	4393      	bics	r3, r2
 8006338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	4313      	orrs	r3, r2
 8006342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	223d      	movs	r2, #61	@ 0x3d
 8006350:	2101      	movs	r1, #1
 8006352:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	223c      	movs	r2, #60	@ 0x3c
 8006358:	2100      	movs	r1, #0
 800635a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	0018      	movs	r0, r3
 8006360:	46bd      	mov	sp, r7
 8006362:	b004      	add	sp, #16
 8006364:	bd80      	pop	{r7, pc}
 8006366:	46c0      	nop			@ (mov r8, r8)
 8006368:	40012c00 	.word	0x40012c00
 800636c:	ff0fffff 	.word	0xff0fffff
 8006370:	40000400 	.word	0x40000400

08006374 <memset>:
 8006374:	0003      	movs	r3, r0
 8006376:	1882      	adds	r2, r0, r2
 8006378:	4293      	cmp	r3, r2
 800637a:	d100      	bne.n	800637e <memset+0xa>
 800637c:	4770      	bx	lr
 800637e:	7019      	strb	r1, [r3, #0]
 8006380:	3301      	adds	r3, #1
 8006382:	e7f9      	b.n	8006378 <memset+0x4>

08006384 <__libc_init_array>:
 8006384:	b570      	push	{r4, r5, r6, lr}
 8006386:	2600      	movs	r6, #0
 8006388:	4c0c      	ldr	r4, [pc, #48]	@ (80063bc <__libc_init_array+0x38>)
 800638a:	4d0d      	ldr	r5, [pc, #52]	@ (80063c0 <__libc_init_array+0x3c>)
 800638c:	1b64      	subs	r4, r4, r5
 800638e:	10a4      	asrs	r4, r4, #2
 8006390:	42a6      	cmp	r6, r4
 8006392:	d109      	bne.n	80063a8 <__libc_init_array+0x24>
 8006394:	2600      	movs	r6, #0
 8006396:	f000 f819 	bl	80063cc <_init>
 800639a:	4c0a      	ldr	r4, [pc, #40]	@ (80063c4 <__libc_init_array+0x40>)
 800639c:	4d0a      	ldr	r5, [pc, #40]	@ (80063c8 <__libc_init_array+0x44>)
 800639e:	1b64      	subs	r4, r4, r5
 80063a0:	10a4      	asrs	r4, r4, #2
 80063a2:	42a6      	cmp	r6, r4
 80063a4:	d105      	bne.n	80063b2 <__libc_init_array+0x2e>
 80063a6:	bd70      	pop	{r4, r5, r6, pc}
 80063a8:	00b3      	lsls	r3, r6, #2
 80063aa:	58eb      	ldr	r3, [r5, r3]
 80063ac:	4798      	blx	r3
 80063ae:	3601      	adds	r6, #1
 80063b0:	e7ee      	b.n	8006390 <__libc_init_array+0xc>
 80063b2:	00b3      	lsls	r3, r6, #2
 80063b4:	58eb      	ldr	r3, [r5, r3]
 80063b6:	4798      	blx	r3
 80063b8:	3601      	adds	r6, #1
 80063ba:	e7f2      	b.n	80063a2 <__libc_init_array+0x1e>
 80063bc:	080064c0 	.word	0x080064c0
 80063c0:	080064c0 	.word	0x080064c0
 80063c4:	080064c4 	.word	0x080064c4
 80063c8:	080064c0 	.word	0x080064c0

080063cc <_init>:
 80063cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ce:	46c0      	nop			@ (mov r8, r8)
 80063d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d2:	bc08      	pop	{r3}
 80063d4:	469e      	mov	lr, r3
 80063d6:	4770      	bx	lr

080063d8 <_fini>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	46c0      	nop			@ (mov r8, r8)
 80063dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063de:	bc08      	pop	{r3}
 80063e0:	469e      	mov	lr, r3
 80063e2:	4770      	bx	lr
