
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066bc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08006778  08006778  00007778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006844  08006844  00008074  2**0
                  CONTENTS
  4 .ARM          00000000  08006844  08006844  00008074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006844  08006844  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006844  08006844  00007844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006848  08006848  00007848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800684c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000074  080068c0  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080068c0  000082ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e89  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba9  00000000  00000000  0001af25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0001dad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e3a  00000000  00000000  0001ed10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001810a  00000000  00000000  0001fb4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016732  00000000  00000000  00037c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098457  00000000  00000000  0004e386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000e67dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004210  00000000  00000000  000e6864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000eaa74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006760 	.word	0x08006760

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	08006760 	.word	0x08006760

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231e      	movs	r3, #30
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-high hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	899b      	ldrh	r3, [r3, #12]
 8000258:	2201      	movs	r2, #1
 800025a:	0019      	movs	r1, r3
 800025c:	f002 fcf5 	bl	8002c4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	899b      	ldrh	r3, [r3, #12]
 800026a:	2200      	movs	r2, #0
 800026c:	0019      	movs	r1, r3
 800026e:	f002 fcec 	bl	8002c4a <HAL_GPIO_WritePin>

	/*
	 *  Delay for 500 ms using hardware timer
	 */
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f005 f9d6 	bl	8005628 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	0018      	movs	r0, r3
 8000282:	f005 f985 	bl	8005590 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028e:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	2380      	movs	r3, #128	@ 0x80
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f5      	bcc.n	8000292 <capTouch_Init+0x76>

    // Determines the number of times to try each initialization step
	uint8_t numTries = 3;
 80002a6:	231f      	movs	r3, #31
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2203      	movs	r2, #3
 80002ac:	701a      	strb	r2, [r3, #0]

	// Verify device ID
		uint8_t deviceIDRet = 0x00;
 80002ae:	2317      	movs	r3, #23
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]

		while(numTries != 0) {
 80002b6:	e014      	b.n	80002e2 <capTouch_Init+0xc6>
			halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b8:	251e      	movs	r5, #30
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	2317      	movs	r3, #23
 80002be:	18fa      	adds	r2, r7, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ad 	bl	8000424 <capTouch_ReadDeviceID>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d00b      	beq.n	80002ee <capTouch_Init+0xd2>
				break;

			numTries--;
 80002d6:	211f      	movs	r1, #31
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	3a01      	subs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80002e2:	231f      	movs	r3, #31
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1e5      	bne.n	80002b8 <capTouch_Init+0x9c>
 80002ec:	e000      	b.n	80002f0 <capTouch_Init+0xd4>
				break;
 80002ee:	46c0      	nop			@ (mov r8, r8)
		}
		if(deviceIDRet != DEVICE_ID || numTries == 0) {
 80002f0:	2317      	movs	r3, #23
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80002f8:	d104      	bne.n	8000304 <capTouch_Init+0xe8>
 80002fa:	231f      	movs	r3, #31
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <capTouch_Init+0xec>
			return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e089      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->deviceID = deviceIDRet;
 8000308:	2317      	movs	r3, #23
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	739a      	strb	r2, [r3, #14]

		numTries = 3;
 8000312:	231f      	movs	r3, #31
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	2203      	movs	r2, #3
 8000318:	701a      	strb	r2, [r3, #0]

	// Force Device Recalibration
		while(numTries != 0) {
 800031a:	e019      	b.n	8000350 <capTouch_Init+0x134>
			halRet = capTouch_Recalibrate(capTouch);
 800031c:	231e      	movs	r3, #30
 800031e:	18fc      	adds	r4, r7, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	0018      	movs	r0, r3
 8000324:	f000 f8c0 	bl	80004a8 <capTouch_Recalibrate>
 8000328:	0003      	movs	r3, r0
 800032a:	7023      	strb	r3, [r4, #0]

			// Wait until calibration sequence completes
			while(capTouch_checkCal(capTouch)) {}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f8db 	bl	80004ec <capTouch_checkCal>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d1f9      	bne.n	800032e <capTouch_Init+0x112>

			if (halRet == HAL_OK)
 800033a:	231e      	movs	r3, #30
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00b      	beq.n	800035c <capTouch_Init+0x140>
				break;

			numTries--;
 8000344:	211f      	movs	r1, #31
 8000346:	187b      	adds	r3, r7, r1
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	187b      	adds	r3, r7, r1
 800034c:	3a01      	subs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 8000350:	231f      	movs	r3, #31
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1e0      	bne.n	800031c <capTouch_Init+0x100>
 800035a:	e000      	b.n	800035e <capTouch_Init+0x142>
				break;
 800035c:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 800035e:	231f      	movs	r3, #31
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d101      	bne.n	800036c <capTouch_Init+0x150>
			return 2;
 8000368:	2302      	movs	r3, #2
 800036a:	e057      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 800036c:	231f      	movs	r3, #31
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2203      	movs	r2, #3
 8000372:	701a      	strb	r2, [r3, #0]

	// Get initial reading of channels
		while(numTries != 0) {
 8000374:	e011      	b.n	800039a <capTouch_Init+0x17e>

			halRet = capTouch_readChannels(capTouch);
 8000376:	251e      	movs	r5, #30
 8000378:	197c      	adds	r4, r7, r5
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	0018      	movs	r0, r3
 800037e:	f000 f8f9 	bl	8000574 <capTouch_readChannels>
 8000382:	0003      	movs	r3, r0
 8000384:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 8000386:	197b      	adds	r3, r7, r5
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <capTouch_Init+0x18a>
				break;

			numTries--;
 800038e:	211f      	movs	r1, #31
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	3a01      	subs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 800039a:	231f      	movs	r3, #31
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e8      	bne.n	8000376 <capTouch_Init+0x15a>
 80003a4:	e000      	b.n	80003a8 <capTouch_Init+0x18c>
				break;
 80003a6:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003a8:	231f      	movs	r3, #31
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <capTouch_Init+0x19a>
			return 3;
 80003b2:	2303      	movs	r3, #3
 80003b4:	e032      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 80003b6:	231f      	movs	r3, #31
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2203      	movs	r2, #3
 80003bc:	701a      	strb	r2, [r3, #0]

	// Enable keys based on passed initialization byte
		while(numTries != 0) {
 80003be:	e015      	b.n	80003ec <capTouch_Init+0x1d0>

			halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80003c0:	251e      	movs	r5, #30
 80003c2:	197c      	adds	r4, r7, r5
 80003c4:	2334      	movs	r3, #52	@ 0x34
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f914 	bl	80005fc <capTouch_enableKeys>
 80003d4:	0003      	movs	r3, r0
 80003d6:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00b      	beq.n	80003f8 <capTouch_Init+0x1dc>
				break;

			numTries--;
 80003e0:	211f      	movs	r1, #31
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	3a01      	subs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80003ec:	231f      	movs	r3, #31
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1e4      	bne.n	80003c0 <capTouch_Init+0x1a4>
 80003f6:	e000      	b.n	80003fa <capTouch_Init+0x1de>
				break;
 80003f8:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003fa:	231f      	movs	r3, #31
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <capTouch_Init+0x1ec>
			return 4;
 8000404:	2304      	movs	r3, #4
 8000406:	e009      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->keys = keyEnFlags;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2234      	movs	r2, #52	@ 0x34
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	73da      	strb	r2, [r3, #15]

		numTries = 3;
 8000412:	231f      	movs	r3, #31
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]

	return 0;
 800041a:	2300      	movs	r3, #0

}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	b008      	add	sp, #32
 8000422:	bdb0      	pop	{r4, r5, r7, pc}

08000424 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 800042e:	230e      	movs	r3, #14
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000436:	250f      	movs	r5, #15
 8000438:	197b      	adds	r3, r7, r5
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <capTouch_ReadDeviceID+0x80>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f002 fd09 	bl	8002e70 <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000462:	197b      	adds	r3, r7, r5
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 800046a:	197b      	adds	r3, r7, r5
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	e014      	b.n	800049a <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	250f      	movs	r5, #15
 8000476:	197c      	adds	r4, r7, r5
 8000478:	260e      	movs	r6, #14
 800047a:	19ba      	adds	r2, r7, r6
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2136      	movs	r1, #54	@ 0x36
 8000486:	f002 fe1d 	bl	80030c4 <HAL_I2C_Master_Receive>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000496:	197b      	adds	r3, r7, r5
 8000498:	781b      	ldrb	r3, [r3, #0]

}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b005      	add	sp, #20
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	08006778 	.word	0x08006778

080004a8 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b0:	210f      	movs	r1, #15
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 80004b8:	260c      	movs	r6, #12
 80004ba:	19bb      	adds	r3, r7, r6
 80004bc:	22c8      	movs	r2, #200	@ 0xc8
 80004be:	4252      	negs	r2, r2
 80004c0:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	000d      	movs	r5, r1
 80004c8:	187c      	adds	r4, r7, r1
 80004ca:	19ba      	adds	r2, r7, r6
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2302      	movs	r3, #2
 80004d4:	2136      	movs	r1, #54	@ 0x36
 80004d6:	f002 fccb 	bl	8002e70 <HAL_I2C_Master_Transmit>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]

}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b005      	add	sp, #20
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080004ec <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004f4:	210f      	movs	r1, #15
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80004fc:	230d      	movs	r3, #13
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 8000504:	260c      	movs	r6, #12
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <capTouch_checkCal+0x84>)
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	000d      	movs	r5, r1
 8000514:	187c      	adds	r4, r7, r1
 8000516:	19ba      	adds	r2, r7, r6
 8000518:	2301      	movs	r3, #1
 800051a:	425b      	negs	r3, r3
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2136      	movs	r1, #54	@ 0x36
 8000522:	f002 fca5 	bl	8002e70 <HAL_I2C_Master_Transmit>
 8000526:	0003      	movs	r3, r0
 8000528:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <capTouch_checkCal+0x4c>
		return halRet;
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	e016      	b.n	8000566 <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230f      	movs	r3, #15
 800053e:	18fc      	adds	r4, r7, r3
 8000540:	250d      	movs	r5, #13
 8000542:	197a      	adds	r2, r7, r5
 8000544:	2301      	movs	r3, #1
 8000546:	425b      	negs	r3, r3
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	2136      	movs	r1, #54	@ 0x36
 800054e:	f002 fdb9 	bl	80030c4 <HAL_I2C_Master_Receive>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000556:	197b      	adds	r3, r7, r5
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	210e      	movs	r1, #14
 800055c:	187b      	adds	r3, r7, r1
 800055e:	09d2      	lsrs	r2, r2, #7
 8000560:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	781b      	ldrb	r3, [r3, #0]

}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b005      	add	sp, #20
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	0800677c 	.word	0x0800677c

08000574 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800057c:	210f      	movs	r1, #15
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000584:	230e      	movs	r3, #14
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800058c:	260c      	movs	r6, #12
 800058e:	19bb      	adds	r3, r7, r6
 8000590:	4a19      	ldr	r2, [pc, #100]	@ (80005f8 <capTouch_readChannels+0x84>)
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	000d      	movs	r5, r1
 800059c:	187c      	adds	r4, r7, r1
 800059e:	19ba      	adds	r2, r7, r6
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	2136      	movs	r1, #54	@ 0x36
 80005aa:	f002 fc61 	bl	8002e70 <HAL_I2C_Master_Transmit>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80005b2:	197b      	adds	r3, r7, r5
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <capTouch_readChannels+0x4c>
		return halRet;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e017      	b.n	80005f0 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	250f      	movs	r5, #15
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	260e      	movs	r6, #14
 80005ca:	19ba      	adds	r2, r7, r6
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2136      	movs	r1, #54	@ 0x36
 80005d6:	f002 fd75 	bl	80030c4 <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 80005de:	19bb      	adds	r3, r7, r6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	227f      	movs	r2, #127	@ 0x7f
 80005e4:	4013      	ands	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	741a      	strb	r2, [r3, #16]

	return halRet;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]

}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b005      	add	sp, #20
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	08006780 	.word	0x08006780

080005fc <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	b08b      	sub	sp, #44	@ 0x2c
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	000a      	movs	r2, r1
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800060a:	241e      	movs	r4, #30
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000612:	2314      	movs	r3, #20
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	4a39      	ldr	r2, [pc, #228]	@ (80006fc <capTouch_enableKeys+0x100>)
 8000618:	6811      	ldr	r1, [r2, #0]
 800061a:	6019      	str	r1, [r3, #0]
 800061c:	8891      	ldrh	r1, [r2, #4]
 800061e:	8099      	strh	r1, [r3, #4]
 8000620:	7992      	ldrb	r2, [r2, #6]
 8000622:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000624:	260c      	movs	r6, #12
 8000626:	19bb      	adds	r3, r7, r6
 8000628:	4a35      	ldr	r2, [pc, #212]	@ (8000700 <capTouch_enableKeys+0x104>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	6019      	str	r1, [r3, #0]
 800062e:	8891      	ldrh	r1, [r2, #4]
 8000630:	8099      	strh	r1, [r3, #4]
 8000632:	7992      	ldrb	r2, [r2, #6]
 8000634:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	0025      	movs	r5, r4
 800063c:	193c      	adds	r4, r7, r4
 800063e:	19ba      	adds	r2, r7, r6
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	2136      	movs	r1, #54	@ 0x36
 800064a:	f002 fc11 	bl	8002e70 <HAL_I2C_Master_Transmit>
 800064e:	0003      	movs	r3, r0
 8000650:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000652:	197b      	adds	r3, r7, r5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <capTouch_enableKeys+0x64>
		return halRet;
 800065a:	197b      	adds	r3, r7, r5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e049      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	251e      	movs	r5, #30
 8000666:	197c      	adds	r4, r7, r5
 8000668:	2314      	movs	r3, #20
 800066a:	18fa      	adds	r2, r7, r3
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2307      	movs	r3, #7
 8000674:	2136      	movs	r1, #54	@ 0x36
 8000676:	f002 fd25 	bl	80030c4 <HAL_I2C_Master_Receive>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800067e:	197b      	adds	r3, r7, r5
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <capTouch_enableKeys+0x90>
		return halRet;
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	e033      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800068c:	231f      	movs	r3, #31
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e01c      	b.n	80006d0 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 8000696:	201f      	movs	r0, #31
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2414      	movs	r4, #20
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	5cd3      	ldrb	r3, [r2, r3]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	7819      	ldrb	r1, [r3, #0]
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4119      	asrs	r1, r3
 80006b0:	000b      	movs	r3, r1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	400b      	ands	r3, r1
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	434a      	muls	r2, r1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 80006c6:	183b      	adds	r3, r7, r0
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	3201      	adds	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	231f      	movs	r3, #31
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d9dd      	bls.n	8000696 <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 80006da:	251e      	movs	r5, #30
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	2314      	movs	r3, #20
 80006e0:	18fa      	adds	r2, r7, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f80c 	bl	8000704 <capTouch_SetAveragingFactor>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]

}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	@ 0x24
 80006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fc:	08006784 	.word	0x08006784
 8000700:	0800678c 	.word	0x0800678c

08000704 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800070e:	241e      	movs	r4, #30
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000716:	2314      	movs	r3, #20
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	4a5d      	ldr	r2, [pc, #372]	@ (8000890 <capTouch_SetAveragingFactor+0x18c>)
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	6019      	str	r1, [r3, #0]
 8000720:	8891      	ldrh	r1, [r2, #4]
 8000722:	8099      	strh	r1, [r3, #4]
 8000724:	7992      	ldrb	r2, [r2, #6]
 8000726:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000728:	260c      	movs	r6, #12
 800072a:	19bb      	adds	r3, r7, r6
 800072c:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <capTouch_SetAveragingFactor+0x190>)
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	6019      	str	r1, [r3, #0]
 8000732:	8891      	ldrh	r1, [r2, #4]
 8000734:	8099      	strh	r1, [r3, #4]
 8000736:	7992      	ldrb	r2, [r2, #6]
 8000738:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	0025      	movs	r5, r4
 8000740:	193c      	adds	r4, r7, r4
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2136      	movs	r1, #54	@ 0x36
 800074e:	f002 fb8f 	bl	8002e70 <HAL_I2C_Master_Transmit>
 8000752:	0003      	movs	r3, r0
 8000754:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000756:	197b      	adds	r3, r7, r5
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 800075e:	197b      	adds	r3, r7, r5
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	e090      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	251e      	movs	r5, #30
 800076a:	197c      	adds	r4, r7, r5
 800076c:	2314      	movs	r3, #20
 800076e:	18fa      	adds	r2, r7, r3
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2307      	movs	r3, #7
 8000778:	2136      	movs	r1, #54	@ 0x36
 800077a:	f002 fca3 	bl	80030c4 <HAL_I2C_Master_Receive>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000782:	197b      	adds	r3, r7, r5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e07a      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000790:	2308      	movs	r3, #8
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000798:	231d      	movs	r3, #29
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80007a0:	231f      	movs	r3, #31
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e041      	b.n	800082e <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80007aa:	241f      	movs	r4, #31
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2214      	movs	r2, #20
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	201d      	movs	r0, #29
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	2103      	movs	r1, #3
 80007bc:	400a      	ands	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	251c      	movs	r5, #28
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	1839      	adds	r1, r7, r0
 80007d6:	197a      	adds	r2, r7, r5
 80007d8:	7809      	ldrb	r1, [r1, #0]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	220c      	movs	r2, #12
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	5cd2      	ldrb	r2, [r2, r3]
 80007ea:	2108      	movs	r1, #8
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	251e      	movs	r5, #30
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	187a      	adds	r2, r7, r1
 8000802:	2301      	movs	r3, #1
 8000804:	425b      	negs	r3, r3
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2136      	movs	r1, #54	@ 0x36
 800080c:	f002 fb30 	bl	8002e70 <HAL_I2C_Master_Transmit>
 8000810:	0003      	movs	r3, r0
 8000812:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 800081c:	197b      	adds	r3, r7, r5
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e031      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 8000822:	211f      	movs	r1, #31
 8000824:	187b      	adds	r3, r7, r1
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	3201      	adds	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	231f      	movs	r3, #31
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d9b8      	bls.n	80007aa <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	251e      	movs	r5, #30
 800083e:	197c      	adds	r4, r7, r5
 8000840:	230c      	movs	r3, #12
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2136      	movs	r1, #54	@ 0x36
 800084e:	f002 fb0f 	bl	8002e70 <HAL_I2C_Master_Transmit>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 800085e:	197b      	adds	r3, r7, r5
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e010      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	251e      	movs	r5, #30
 800086a:	197c      	adds	r4, r7, r5
 800086c:	2314      	movs	r3, #20
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2307      	movs	r3, #7
 8000878:	2136      	movs	r1, #54	@ 0x36
 800087a:	f002 fc23 	bl	80030c4 <HAL_I2C_Master_Receive>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781b      	ldrb	r3, [r3, #0]

}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	@ 0x24
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	08006784 	.word	0x08006784
 8000894:	0800678c 	.word	0x0800678c

08000898 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008a2:	231e      	movs	r3, #30
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80008aa:	2314      	movs	r3, #20
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <capTouch_SetDetectionIntegrator+0xdc>)
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	6019      	str	r1, [r3, #0]
 80008b4:	8891      	ldrh	r1, [r2, #4]
 80008b6:	8099      	strh	r1, [r3, #4]
 80008b8:	7992      	ldrb	r2, [r2, #6]
 80008ba:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 80008bc:	2310      	movs	r3, #16
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80008c4:	231f      	movs	r3, #31
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e022      	b.n	8000914 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 80008ce:	251f      	movs	r5, #31
 80008d0:	197b      	adds	r3, r7, r5
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2214      	movs	r2, #20
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	5cd2      	ldrb	r2, [r2, r3]
 80008da:	2110      	movs	r1, #16
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	231e      	movs	r3, #30
 80008f4:	18fc      	adds	r4, r7, r3
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2136      	movs	r1, #54	@ 0x36
 8000902:	f002 fab5 	bl	8002e70 <HAL_I2C_Master_Transmit>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 800090a:	197b      	adds	r3, r7, r5
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	197b      	adds	r3, r7, r5
 8000910:	3201      	adds	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	231f      	movs	r3, #31
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d9d7      	bls.n	80008ce <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800091e:	2608      	movs	r6, #8
 8000920:	19bb      	adds	r3, r7, r6
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <capTouch_SetDetectionIntegrator+0xe0>)
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	6019      	str	r1, [r3, #0]
 8000928:	8891      	ldrh	r1, [r2, #4]
 800092a:	8099      	strh	r1, [r3, #4]
 800092c:	7992      	ldrb	r2, [r2, #6]
 800092e:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	251e      	movs	r5, #30
 8000936:	197c      	adds	r4, r7, r5
 8000938:	2314      	movs	r3, #20
 800093a:	18fa      	adds	r2, r7, r3
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2136      	movs	r1, #54	@ 0x36
 8000946:	f002 fa93 	bl	8002e70 <HAL_I2C_Master_Transmit>
 800094a:	0003      	movs	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	197c      	adds	r4, r7, r5
 8000954:	19ba      	adds	r2, r7, r6
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2307      	movs	r3, #7
 800095e:	2136      	movs	r1, #54	@ 0x36
 8000960:	f002 fbb0 	bl	80030c4 <HAL_I2C_Master_Receive>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000968:	197b      	adds	r3, r7, r5
 800096a:	781b      	ldrb	r3, [r3, #0]

}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	@ 0x24
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	08006794 	.word	0x08006794
 8000978:	08006784 	.word	0x08006784

0800097c <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


HAL_StatusTypeDef initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b09a      	sub	sp, #104	@ 0x68
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000988:	2567      	movs	r5, #103	@ 0x67
 800098a:	197b      	adds	r3, r7, r5
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 8000990:	243c      	movs	r4, #60	@ 0x3c
 8000992:	193b      	adds	r3, r7, r4
 8000994:	0018      	movs	r0, r3
 8000996:	2328      	movs	r3, #40	@ 0x28
 8000998:	001a      	movs	r2, r3
 800099a:	2100      	movs	r1, #0
 800099c:	f005 feaa 	bl	80066f4 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	781a      	ldrb	r2, [r3, #0]
 80009a4:	0021      	movs	r1, r4
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	789a      	ldrb	r2, [r3, #2]
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	78da      	ldrb	r2, [r3, #3]
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	78da      	ldrb	r2, [r3, #3]
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009d6:	0008      	movs	r0, r1
 80009d8:	183b      	adds	r3, r7, r0
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009de:	183b      	adds	r3, r7, r0
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80009e4:	183b      	adds	r3, r7, r0
 80009e6:	4a19      	ldr	r2, [pc, #100]	@ (8000a4c <initRTCInternalAlarm+0xd0>)
 80009e8:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009ea:	183b      	adds	r3, r7, r0
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009f0:	183b      	adds	r3, r7, r0
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 80009f6:	183b      	adds	r3, r7, r0
 80009f8:	2220      	movs	r2, #32
 80009fa:	2101      	movs	r1, #1
 80009fc:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 80009fe:	0001      	movs	r1, r0
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2280      	movs	r2, #128	@ 0x80
 8000a04:	0052      	lsls	r2, r2, #1
 8000a06:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8000a08:	197c      	adds	r4, r7, r5
 8000a0a:	1879      	adds	r1, r7, r1
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f004 f945 	bl	8004ca0 <HAL_RTC_SetAlarm_IT>
 8000a16:	0003      	movs	r3, r0
 8000a18:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000a1a:	197b      	adds	r3, r7, r5
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <initRTCInternalAlarm+0xac>
		return halRet;
 8000a22:	197b      	adds	r3, r7, r5
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	e00d      	b.n	8000a44 <initRTCInternalAlarm+0xc8>

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8000a28:	2567      	movs	r5, #103	@ 0x67
 8000a2a:	197c      	adds	r4, r7, r5
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	005a      	lsls	r2, r3, #1
 8000a30:	2314      	movs	r3, #20
 8000a32:	18f9      	adds	r1, r7, r3
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	2300      	movs	r3, #0
 8000a38:	f004 fa72 	bl	8004f20 <HAL_RTC_GetAlarm>
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	7023      	strb	r3, [r4, #0]
	return halRet;
 8000a40:	197b      	adds	r3, r7, r5
 8000a42:	781b      	ldrb	r3, [r3, #0]

}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b01a      	add	sp, #104	@ 0x68
 8000a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a4c:	80800080 	.word	0x80800080

08000a50 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2200      	movs	r2, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f003 ffe0 	bl	8004a28 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f004 f8c8 	bl	8004c04 <HAL_RTC_GetDate>

}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b004      	add	sp, #16
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	b08d      	sub	sp, #52	@ 0x34
 8000a80:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a82:	f001 fdd9 	bl	8002638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f000 f983 	bl	8000d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f000 fc35 	bl	80012f8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000a8e:	f000 fa33 	bl	8000ef8 <MX_RTC_Init>
  MX_I2C1_Init();
 8000a92:	f000 f9f1 	bl	8000e78 <MX_I2C1_Init>
  MX_TIM14_Init();
 8000a96:	f000 fbcf 	bl	8001238 <MX_TIM14_Init>
  MX_TIM2_Init();
 8000a9a:	f000 fb6d 	bl	8001178 <MX_TIM2_Init>
  MX_TIM16_Init();
 8000a9e:	f000 fbf1 	bl	8001284 <MX_TIM16_Init>
  MX_TIM1_Init();
 8000aa2:	f000 fabd 	bl	8001020 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // HAL Status handle for error-checking
  HAL_StatusTypeDef halRet = HAL_OK;
 8000aa6:	2517      	movs	r5, #23
 8000aa8:	197b      	adds	r3, r7, r5
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]

  // Set Smooth Calibration Value
  halRet = HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 8000aae:	4ba2      	ldr	r3, [pc, #648]	@ (8000d38 <main+0x2bc>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	197c      	adds	r4, r7, r5
 8000ab4:	2280      	movs	r2, #128	@ 0x80
 8000ab6:	01d1      	lsls	r1, r2, #7
 8000ab8:	48a0      	ldr	r0, [pc, #640]	@ (8000d3c <main+0x2c0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	f004 fc25 	bl	800530a <HAL_RTCEx_SetSmoothCalib>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	7023      	strb	r3, [r4, #0]
    							RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);
  if(halRet != HAL_OK) {
 8000ac4:	197b      	adds	r3, r7, r5
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <main+0x54>
	  // Failure to talk to RTC is a hard failure
	  dispFailure();
 8000acc:	f001 f976 	bl	8001dbc <dispFailure>
  }

  // Init the internal RTC alarm time to track the current time
  halRet = initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 8000ad0:	2517      	movs	r5, #23
 8000ad2:	197c      	adds	r4, r7, r5
 8000ad4:	4a9a      	ldr	r2, [pc, #616]	@ (8000d40 <main+0x2c4>)
 8000ad6:	499b      	ldr	r1, [pc, #620]	@ (8000d44 <main+0x2c8>)
 8000ad8:	4b98      	ldr	r3, [pc, #608]	@ (8000d3c <main+0x2c0>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f7ff ff4e 	bl	800097c <initRTCInternalAlarm>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	7023      	strb	r3, [r4, #0]
  if(halRet != HAL_OK) {
 8000ae4:	197b      	adds	r3, r7, r5
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <main+0x74>
  	  // Failure to initialize RTC alarm is a hard failure
  	  dispFailure();
 8000aec:	f001 f966 	bl	8001dbc <dispFailure>
    }

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000af0:	2380      	movs	r3, #128	@ 0x80
 8000af2:	009c      	lsls	r4, r3, #2
 8000af4:	2380      	movs	r3, #128	@ 0x80
 8000af6:	00dd      	lsls	r5, r3, #3
 8000af8:	2680      	movs	r6, #128	@ 0x80
 8000afa:	2340      	movs	r3, #64	@ 0x40
 8000afc:	469c      	mov	ip, r3
 8000afe:	2380      	movs	r3, #128	@ 0x80
 8000b00:	011a      	lsls	r2, r3, #4
 8000b02:	4b91      	ldr	r3, [pc, #580]	@ (8000d48 <main+0x2cc>)
 8000b04:	6819      	ldr	r1, [r3, #0]
 8000b06:	4b91      	ldr	r3, [pc, #580]	@ (8000d4c <main+0x2d0>)
 8000b08:	6818      	ldr	r0, [r3, #0]
 8000b0a:	4b91      	ldr	r3, [pc, #580]	@ (8000d50 <main+0x2d4>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	9304      	str	r3, [sp, #16]
 8000b10:	9003      	str	r0, [sp, #12]
 8000b12:	9102      	str	r1, [sp, #8]
 8000b14:	4b8f      	ldr	r3, [pc, #572]	@ (8000d54 <main+0x2d8>)
 8000b16:	9301      	str	r3, [sp, #4]
 8000b18:	9200      	str	r2, [sp, #0]
 8000b1a:	4663      	mov	r3, ip
 8000b1c:	0032      	movs	r2, r6
 8000b1e:	0029      	movs	r1, r5
 8000b20:	0020      	movs	r0, r4
 8000b22:	f001 f9bd 	bl	8001ea0 <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);

    // Set to max brightness
    sevSeg_setIntensity(sevSeg_intensityDuty[2]);
 8000b26:	234b      	movs	r3, #75	@ 0x4b
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f001 faed 	bl	8002108 <sevSeg_setIntensity>

	halRet = updateAndDisplayTime();
 8000b2e:	2517      	movs	r5, #23
 8000b30:	197c      	adds	r4, r7, r5
 8000b32:	f000 fcc3 	bl	80014bc <updateAndDisplayTime>
 8000b36:	0003      	movs	r3, r0
 8000b38:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000b3a:	197b      	adds	r3, r7, r5
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <main+0xca>
	  // Failure to display current time is a hard failure
	  dispFailure();
 8000b42:	f001 f93b 	bl	8001dbc <dispFailure>
    /*
     * Initialize capacitive touch sensor
     */

	// Used to separate return initializations into critical and non-critical errors.
	uint8_t initRet = 0;
 8000b46:	2116      	movs	r1, #22
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]

    initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 8000b4e:	4b7e      	ldr	r3, [pc, #504]	@ (8000d48 <main+0x2cc>)
 8000b50:	681d      	ldr	r5, [r3, #0]
 8000b52:	2380      	movs	r3, #128	@ 0x80
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4a80      	ldr	r2, [pc, #512]	@ (8000d58 <main+0x2dc>)
 8000b58:	7812      	ldrb	r2, [r2, #0]
 8000b5a:	187c      	adds	r4, r7, r1
 8000b5c:	4e7f      	ldr	r6, [pc, #508]	@ (8000d5c <main+0x2e0>)
 8000b5e:	4980      	ldr	r1, [pc, #512]	@ (8000d60 <main+0x2e4>)
 8000b60:	4880      	ldr	r0, [pc, #512]	@ (8000d64 <main+0x2e8>)
 8000b62:	9201      	str	r2, [sp, #4]
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	0033      	movs	r3, r6
 8000b68:	002a      	movs	r2, r5
 8000b6a:	f7ff fb57 	bl	800021c <capTouch_Init>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	7023      	strb	r3, [r4, #0]
    						&capTouchResetPort, capTouchResetPin, capTouchChannels);
    if( (initRet == 1) || (initRet == 3) || (initRet == 4)) {
 8000b72:	2116      	movs	r1, #22
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d007      	beq.n	8000b8c <main+0x110>
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d003      	beq.n	8000b8c <main+0x110>
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d102      	bne.n	8000b92 <main+0x116>
    	/* Critical Errors:
    	 * 1 = Failure to read correct device ID
    	 * 2 = Failure to read Keys
    	 * 3 = Failure to enable keys
    	 */
    	dispFailure();
 8000b8c:	f001 f916 	bl	8001dbc <dispFailure>
 8000b90:	e00d      	b.n	8000bae <main+0x132>
    }
    else if (initRet == 2) {
 8000b92:	2316      	movs	r3, #22
 8000b94:	18fb      	adds	r3, r7, r3
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d102      	bne.n	8000ba2 <main+0x126>
    	/*
    	 * Non-critical Errors:
    	 * 2 = Failure to Recalibrate
    	 */
    	dispFault();
 8000b9c:	f001 f900 	bl	8001da0 <dispFault>
 8000ba0:	e005      	b.n	8000bae <main+0x132>
    }
    else if(initRet == 0) {
 8000ba2:	2316      	movs	r3, #22
 8000ba4:	18fb      	adds	r3, r7, r3
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d100      	bne.n	8000bae <main+0x132>
    	// initRet = 0 = all is well
    	__NOP();
 8000bac:	46c0      	nop			@ (mov r8, r8)
    }

    // Set averaging factor
    uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 8000bae:	4b6e      	ldr	r3, [pc, #440]	@ (8000d68 <main+0x2ec>)
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	210c      	movs	r1, #12
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	4b6b      	ldr	r3, [pc, #428]	@ (8000d68 <main+0x2ec>)
 8000bba:	781a      	ldrb	r2, [r3, #0]
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	705a      	strb	r2, [r3, #1]
 8000bc0:	4b69      	ldr	r3, [pc, #420]	@ (8000d68 <main+0x2ec>)
 8000bc2:	781a      	ldrb	r2, [r3, #0]
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	709a      	strb	r2, [r3, #2]
 8000bc8:	4b67      	ldr	r3, [pc, #412]	@ (8000d68 <main+0x2ec>)
 8000bca:	781a      	ldrb	r2, [r3, #0]
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	70da      	strb	r2, [r3, #3]
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	711a      	strb	r2, [r3, #4]
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	715a      	strb	r2, [r3, #5]
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2200      	movs	r2, #0
 8000be0:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000be2:	2517      	movs	r5, #23
 8000be4:	197c      	adds	r4, r7, r5
 8000be6:	187a      	adds	r2, r7, r1
 8000be8:	4b5e      	ldr	r3, [pc, #376]	@ (8000d64 <main+0x2e8>)
 8000bea:	0011      	movs	r1, r2
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff fd89 	bl	8000704 <capTouch_SetAveragingFactor>
 8000bf2:	0003      	movs	r3, r0
 8000bf4:	7023      	strb	r3, [r4, #0]

    if(halRet != HAL_OK) {
 8000bf6:	197b      	adds	r3, r7, r5
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <main+0x186>
    	// This is sensitivity-setting and a non-critical error
    	dispFault();
 8000bfe:	f001 f8cf 	bl	8001da0 <dispFault>
    }

    // Set detection integration factors
    uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 8000c02:	4b5a      	ldr	r3, [pc, #360]	@ (8000d6c <main+0x2f0>)
 8000c04:	781a      	ldrb	r2, [r3, #0]
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	4b58      	ldr	r3, [pc, #352]	@ (8000d6c <main+0x2f0>)
 8000c0c:	781a      	ldrb	r2, [r3, #0]
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	705a      	strb	r2, [r3, #1]
 8000c12:	4b56      	ldr	r3, [pc, #344]	@ (8000d6c <main+0x2f0>)
 8000c14:	781a      	ldrb	r2, [r3, #0]
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	709a      	strb	r2, [r3, #2]
 8000c1a:	4b54      	ldr	r3, [pc, #336]	@ (8000d6c <main+0x2f0>)
 8000c1c:	781a      	ldrb	r2, [r3, #0]
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	70da      	strb	r2, [r3, #3]
 8000c22:	4b52      	ldr	r3, [pc, #328]	@ (8000d6c <main+0x2f0>)
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	711a      	strb	r2, [r3, #4]
 8000c2a:	4b50      	ldr	r3, [pc, #320]	@ (8000d6c <main+0x2f0>)
 8000c2c:	781a      	ldrb	r2, [r3, #0]
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	715a      	strb	r2, [r3, #5]
 8000c32:	4b4e      	ldr	r3, [pc, #312]	@ (8000d6c <main+0x2f0>)
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 8000c3a:	2517      	movs	r5, #23
 8000c3c:	197c      	adds	r4, r7, r5
 8000c3e:	1d3a      	adds	r2, r7, #4
 8000c40:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <main+0x2e8>)
 8000c42:	0011      	movs	r1, r2
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff fe27 	bl	8000898 <capTouch_SetDetectionIntegrator>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	7023      	strb	r3, [r4, #0]
    if(halRet != HAL_OK) {
 8000c4e:	197b      	adds	r3, r7, r5
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <main+0x1de>
    	// This is sensitivity-setting and a non-critical error
		dispFault();
 8000c56:	f001 f8a3 	bl	8001da0 <dispFault>
    }

    userAlarmToggle = false;			//Default to off
 8000c5a:	4b45      	ldr	r3, [pc, #276]	@ (8000d70 <main+0x2f4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
     * initialize the alarm time to a default value.
     *
     * Else, initialize to whatever is stored in backup registers.
     */

    if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 8000c60:	4b44      	ldr	r3, [pc, #272]	@ (8000d74 <main+0x2f8>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b35      	ldr	r3, [pc, #212]	@ (8000d3c <main+0x2c0>)
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f004 fc1e 	bl	80054aa <HAL_RTCEx_BKUPRead>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d11c      	bne.n	8000cb0 <main+0x234>

    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 8000c76:	4b40      	ldr	r3, [pc, #256]	@ (8000d78 <main+0x2fc>)
 8000c78:	6819      	ldr	r1, [r3, #0]
 8000c7a:	4b30      	ldr	r3, [pc, #192]	@ (8000d3c <main+0x2c0>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f004 fbf6 	bl	8005470 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 8000c84:	4b3d      	ldr	r3, [pc, #244]	@ (8000d7c <main+0x300>)
 8000c86:	6819      	ldr	r1, [r3, #0]
 8000c88:	4b2c      	ldr	r3, [pc, #176]	@ (8000d3c <main+0x2c0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f004 fbef 	bl	8005470 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 8000c92:	4b3b      	ldr	r3, [pc, #236]	@ (8000d80 <main+0x304>)
 8000c94:	6819      	ldr	r1, [r3, #0]
 8000c96:	4b29      	ldr	r3, [pc, #164]	@ (8000d3c <main+0x2c0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f004 fbe8 	bl	8005470 <HAL_RTCEx_BKUPWrite>

    	// Write backup register with a non-zero value to signify that it has been initialized before
    	HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8000ca0:	4b34      	ldr	r3, [pc, #208]	@ (8000d74 <main+0x2f8>)
 8000ca2:	6819      	ldr	r1, [r3, #0]
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	425a      	negs	r2, r3
 8000ca8:	4b24      	ldr	r3, [pc, #144]	@ (8000d3c <main+0x2c0>)
 8000caa:	0018      	movs	r0, r3
 8000cac:	f004 fbe0 	bl	8005470 <HAL_RTCEx_BKUPWrite>

    }

	userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8000cb0:	4b31      	ldr	r3, [pc, #196]	@ (8000d78 <main+0x2fc>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b21      	ldr	r3, [pc, #132]	@ (8000d3c <main+0x2c0>)
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f004 fbf6 	bl	80054aa <HAL_RTCEx_BKUPRead>
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b30      	ldr	r3, [pc, #192]	@ (8000d84 <main+0x308>)
 8000cc4:	701a      	strb	r2, [r3, #0]
	userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 8000cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d7c <main+0x300>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <main+0x2c0>)
 8000ccc:	0011      	movs	r1, r2
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f004 fbeb 	bl	80054aa <HAL_RTCEx_BKUPRead>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d84 <main+0x308>)
 8000cda:	705a      	strb	r2, [r3, #1]
	userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 8000cdc:	4b28      	ldr	r3, [pc, #160]	@ (8000d80 <main+0x304>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <main+0x2c0>)
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f004 fbe0 	bl	80054aa <HAL_RTCEx_BKUPRead>
 8000cea:	0003      	movs	r3, r0
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b25      	ldr	r3, [pc, #148]	@ (8000d84 <main+0x308>)
 8000cf0:	70da      	strb	r2, [r3, #3]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  htim1.Instance->PSC = 65535;
 8000cf2:	4b25      	ldr	r3, [pc, #148]	@ (8000d88 <main+0x30c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a25      	ldr	r2, [pc, #148]	@ (8000d8c <main+0x310>)
 8000cf8:	629a      	str	r2, [r3, #40]	@ 0x28

	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 50);
 8000cfa:	4b23      	ldr	r3, [pc, #140]	@ (8000d88 <main+0x30c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2232      	movs	r2, #50	@ 0x32
 8000d00:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d02:	4b21      	ldr	r3, [pc, #132]	@ (8000d88 <main+0x30c>)
 8000d04:	2100      	movs	r1, #0
 8000d06:	0018      	movs	r0, r3
 8000d08:	f004 fd8e 	bl	8005828 <HAL_TIM_PWM_Start>

	  HAL_Delay(500);
 8000d0c:	23fa      	movs	r3, #250	@ 0xfa
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	0018      	movs	r0, r3
 8000d12:	f001 fd17 	bl	8002744 <HAL_Delay>

	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000d16:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <main+0x30c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <main+0x30c>)
 8000d20:	2100      	movs	r1, #0
 8000d22:	0018      	movs	r0, r3
 8000d24:	f004 fd80 	bl	8005828 <HAL_TIM_PWM_Start>

	  HAL_Delay(500);
 8000d28:	23fa      	movs	r3, #250	@ 0xfa
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f001 fd09 	bl	8002744 <HAL_Delay>
	  htim1.Instance->PSC = 65535;
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	e7dd      	b.n	8000cf2 <main+0x276>
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	20000030 	.word	0x20000030
 8000d3c:	20000118 	.word	0x20000118
 8000d40:	200000a8 	.word	0x200000a8
 8000d44:	20000094 	.word	0x20000094
 8000d48:	20000048 	.word	0x20000048
 8000d4c:	20000044 	.word	0x20000044
 8000d50:	20000034 	.word	0x20000034
 8000d54:	20000018 	.word	0x20000018
 8000d58:	2000000c 	.word	0x2000000c
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	200000c4 	.word	0x200000c4
 8000d64:	20000278 	.word	0x20000278
 8000d68:	2000000d 	.word	0x2000000d
 8000d6c:	2000000e 	.word	0x2000000e
 8000d70:	20000091 	.word	0x20000091
 8000d74:	20000040 	.word	0x20000040
 8000d78:	200000c0 	.word	0x200000c0
 8000d7c:	20000038 	.word	0x20000038
 8000d80:	2000003c 	.word	0x2000003c
 8000d84:	200000ac 	.word	0x200000ac
 8000d88:	20000144 	.word	0x20000144
 8000d8c:	0000ffff 	.word	0x0000ffff

08000d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b093      	sub	sp, #76	@ 0x4c
 8000d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	2410      	movs	r4, #16
 8000d98:	193b      	adds	r3, r7, r4
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	2338      	movs	r3, #56	@ 0x38
 8000d9e:	001a      	movs	r2, r3
 8000da0:	2100      	movs	r1, #0
 8000da2:	f005 fca7 	bl	80066f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da6:	003b      	movs	r3, r7
 8000da8:	0018      	movs	r0, r3
 8000daa:	2310      	movs	r3, #16
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f005 fca0 	bl	80066f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000db4:	2380      	movs	r3, #128	@ 0x80
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	0018      	movs	r0, r3
 8000dba:	f002 fe15 	bl	80039e8 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000dbe:	f002 fdf5 	bl	80039ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 8000dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e74 <SystemClock_Config+0xe4>)
 8000dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000dc6:	2218      	movs	r2, #24
 8000dc8:	4393      	bics	r3, r2
 8000dca:	001a      	movs	r2, r3
 8000dcc:	4b29      	ldr	r3, [pc, #164]	@ (8000e74 <SystemClock_Config+0xe4>)
 8000dce:	2108      	movs	r1, #8
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000dd4:	193b      	adds	r3, r7, r4
 8000dd6:	220e      	movs	r2, #14
 8000dd8:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000dda:	193b      	adds	r3, r7, r4
 8000ddc:	2201      	movs	r2, #1
 8000dde:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de0:	193b      	adds	r3, r7, r4
 8000de2:	2280      	movs	r2, #128	@ 0x80
 8000de4:	0052      	lsls	r2, r2, #1
 8000de6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000de8:	0021      	movs	r1, r4
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2240      	movs	r2, #64	@ 0x40
 8000df4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2201      	movs	r2, #1
 8000dfa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2202      	movs	r2, #2
 8000e00:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	2202      	movs	r2, #2
 8000e06:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2208      	movs	r2, #8
 8000e12:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2280      	movs	r2, #128	@ 0x80
 8000e18:	0292      	lsls	r2, r2, #10
 8000e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2280      	movs	r2, #128	@ 0x80
 8000e20:	0492      	lsls	r2, r2, #18
 8000e22:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	2280      	movs	r2, #128	@ 0x80
 8000e28:	0592      	lsls	r2, r2, #22
 8000e2a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f002 fe1a 	bl	8003a68 <HAL_RCC_OscConfig>
 8000e34:	1e03      	subs	r3, r0, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e38:	f001 f82c 	bl	8001e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3c:	003b      	movs	r3, r7
 8000e3e:	2207      	movs	r2, #7
 8000e40:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e42:	003b      	movs	r3, r7
 8000e44:	2202      	movs	r2, #2
 8000e46:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e48:	003b      	movs	r3, r7
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e4e:	003b      	movs	r3, r7
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e54:	003b      	movs	r3, r7
 8000e56:	2102      	movs	r1, #2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f003 f91f 	bl	800409c <HAL_RCC_ClockConfig>
 8000e5e:	1e03      	subs	r3, r0, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000e62:	f001 f817 	bl	8001e94 <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8000e66:	2000      	movs	r0, #0
 8000e68:	f003 fc1c 	bl	80046a4 <HAL_RCCEx_EnableLSCO>
}
 8000e6c:	46c0      	nop			@ (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b013      	add	sp, #76	@ 0x4c
 8000e72:	bd90      	pop	{r4, r7, pc}
 8000e74:	40021000 	.word	0x40021000

08000e78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000eec <MX_I2C1_Init+0x74>)
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef0 <MX_I2C1_Init+0x78>)
 8000e80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	@ (8000eec <MX_I2C1_Init+0x74>)
 8000e84:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef4 <MX_I2C1_Init+0x7c>)
 8000e86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e88:	4b18      	ldr	r3, [pc, #96]	@ (8000eec <MX_I2C1_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <MX_I2C1_Init+0x74>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e94:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <MX_I2C1_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	@ (8000eec <MX_I2C1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <MX_I2C1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <MX_I2C1_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <MX_I2C1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <MX_I2C1_Init+0x74>)
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f001 ff35 	bl	8002d24 <HAL_I2C_Init>
 8000eba:	1e03      	subs	r3, r0, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ebe:	f000 ffe9 	bl	8001e94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <MX_I2C1_Init+0x74>)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f002 fcd8 	bl	800387c <HAL_I2CEx_ConfigAnalogFilter>
 8000ecc:	1e03      	subs	r3, r0, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ed0:	f000 ffe0 	bl	8001e94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <MX_I2C1_Init+0x74>)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f002 fd1b 	bl	8003914 <HAL_I2CEx_ConfigDigitalFilter>
 8000ede:	1e03      	subs	r3, r0, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ee2:	f000 ffd7 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200000c4 	.word	0x200000c4
 8000ef0:	40005400 	.word	0x40005400
 8000ef4:	00602173 	.word	0x00602173

08000ef8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08c      	sub	sp, #48	@ 0x30
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

//  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 8000efe:	232c      	movs	r3, #44	@ 0x2c
 8000f00:	18fb      	adds	r3, r7, r3
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	0018      	movs	r0, r3
 8000f0a:	2328      	movs	r3, #40	@ 0x28
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	2100      	movs	r1, #0
 8000f10:	f005 fbf0 	bl	80066f4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f14:	4b3e      	ldr	r3, [pc, #248]	@ (8001010 <MX_RTC_Init+0x118>)
 8000f16:	4a3f      	ldr	r2, [pc, #252]	@ (8001014 <MX_RTC_Init+0x11c>)
 8000f18:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000f1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001010 <MX_RTC_Init+0x118>)
 8000f1c:	2240      	movs	r2, #64	@ 0x40
 8000f1e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000f20:	4b3b      	ldr	r3, [pc, #236]	@ (8001010 <MX_RTC_Init+0x118>)
 8000f22:	227f      	movs	r2, #127	@ 0x7f
 8000f24:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000f26:	4b3a      	ldr	r3, [pc, #232]	@ (8001010 <MX_RTC_Init+0x118>)
 8000f28:	22ff      	movs	r2, #255	@ 0xff
 8000f2a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f2c:	4b38      	ldr	r3, [pc, #224]	@ (8001010 <MX_RTC_Init+0x118>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f32:	4b37      	ldr	r3, [pc, #220]	@ (8001010 <MX_RTC_Init+0x118>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f38:	4b35      	ldr	r3, [pc, #212]	@ (8001010 <MX_RTC_Init+0x118>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f3e:	4b34      	ldr	r3, [pc, #208]	@ (8001010 <MX_RTC_Init+0x118>)
 8000f40:	2280      	movs	r2, #128	@ 0x80
 8000f42:	05d2      	lsls	r2, r2, #23
 8000f44:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000f46:	4b32      	ldr	r3, [pc, #200]	@ (8001010 <MX_RTC_Init+0x118>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f4c:	4b30      	ldr	r3, [pc, #192]	@ (8001010 <MX_RTC_Init+0x118>)
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f003 fc20 	bl	8004794 <HAL_RTC_Init>
 8000f54:	1e03      	subs	r3, r0, #0
 8000f56:	d001      	beq.n	8000f5c <MX_RTC_Init+0x64>
  {
    Error_Handler();
 8000f58:	f000 ff9c 	bl	8001e94 <Error_Handler>
//  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
//  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
//  {
//    Error_Handler();
//  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f5c:	212c      	movs	r1, #44	@ 0x2c
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	2201      	movs	r2, #1
 8000f68:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000f70:	187b      	adds	r3, r7, r1
 8000f72:	2200      	movs	r2, #0
 8000f74:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f76:	1879      	adds	r1, r7, r1
 8000f78:	4b25      	ldr	r3, [pc, #148]	@ (8001010 <MX_RTC_Init+0x118>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f003 fdaf 	bl	8004ae0 <HAL_RTC_SetDate>
 8000f82:	1e03      	subs	r3, r0, #0
 8000f84:	d001      	beq.n	8000f8a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000f86:	f000 ff85 	bl	8001e94 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2201      	movs	r2, #1
 8000f94:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	4a18      	ldr	r2, [pc, #96]	@ (8001018 <MX_RTC_Init+0x120>)
 8000fb8:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2220      	movs	r2, #32
 8000fca:	2101      	movs	r1, #1
 8000fcc:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2280      	movs	r2, #128	@ 0x80
 8000fd2:	0052      	lsls	r2, r2, #1
 8000fd4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000fd6:	1d39      	adds	r1, r7, #4
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001010 <MX_RTC_Init+0x118>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f003 fe5f 	bl	8004ca0 <HAL_RTC_SetAlarm_IT>
 8000fe2:	1e03      	subs	r3, r0, #0
 8000fe4:	d001      	beq.n	8000fea <MX_RTC_Init+0xf2>
  {
    Error_Handler();
 8000fe6:	f000 ff55 	bl	8001e94 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000fea:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <MX_RTC_Init+0x118>)
 8000fec:	2100      	movs	r1, #0
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f004 f9ee 	bl	80053d0 <HAL_RTCEx_SetCalibrationOutPut>
 8000ff4:	1e03      	subs	r3, r0, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_RTC_Init+0x104>
  {
    Error_Handler();
 8000ff8:	f000 ff4c 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8000ffc:	4907      	ldr	r1, [pc, #28]	@ (800101c <MX_RTC_Init+0x124>)
 8000ffe:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <MX_RTC_Init+0x118>)
 8001000:	2200      	movs	r2, #0
 8001002:	0018      	movs	r0, r3
 8001004:	f003 fd10 	bl	8004a28 <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 8001008:	46c0      	nop			@ (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	b00c      	add	sp, #48	@ 0x30
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000118 	.word	0x20000118
 8001014:	40002800 	.word	0x40002800
 8001018:	80800080 	.word	0x80800080
 800101c:	20000094 	.word	0x20000094

08001020 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b098      	sub	sp, #96	@ 0x60
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001026:	2354      	movs	r3, #84	@ 0x54
 8001028:	18fb      	adds	r3, r7, r3
 800102a:	0018      	movs	r0, r3
 800102c:	230c      	movs	r3, #12
 800102e:	001a      	movs	r2, r3
 8001030:	2100      	movs	r1, #0
 8001032:	f005 fb5f 	bl	80066f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001036:	2338      	movs	r3, #56	@ 0x38
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	0018      	movs	r0, r3
 800103c:	231c      	movs	r3, #28
 800103e:	001a      	movs	r2, r3
 8001040:	2100      	movs	r1, #0
 8001042:	f005 fb57 	bl	80066f4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	0018      	movs	r0, r3
 800104a:	2334      	movs	r3, #52	@ 0x34
 800104c:	001a      	movs	r2, r3
 800104e:	2100      	movs	r1, #0
 8001050:	f005 fb50 	bl	80066f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001054:	4b45      	ldr	r3, [pc, #276]	@ (800116c <MX_TIM1_Init+0x14c>)
 8001056:	4a46      	ldr	r2, [pc, #280]	@ (8001170 <MX_TIM1_Init+0x150>)
 8001058:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 800-1;
 800105a:	4b44      	ldr	r3, [pc, #272]	@ (800116c <MX_TIM1_Init+0x14c>)
 800105c:	4a45      	ldr	r2, [pc, #276]	@ (8001174 <MX_TIM1_Init+0x154>)
 800105e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001060:	4b42      	ldr	r3, [pc, #264]	@ (800116c <MX_TIM1_Init+0x14c>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001066:	4b41      	ldr	r3, [pc, #260]	@ (800116c <MX_TIM1_Init+0x14c>)
 8001068:	2263      	movs	r2, #99	@ 0x63
 800106a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106c:	4b3f      	ldr	r3, [pc, #252]	@ (800116c <MX_TIM1_Init+0x14c>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001072:	4b3e      	ldr	r3, [pc, #248]	@ (800116c <MX_TIM1_Init+0x14c>)
 8001074:	2200      	movs	r2, #0
 8001076:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001078:	4b3c      	ldr	r3, [pc, #240]	@ (800116c <MX_TIM1_Init+0x14c>)
 800107a:	2200      	movs	r2, #0
 800107c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800107e:	4b3b      	ldr	r3, [pc, #236]	@ (800116c <MX_TIM1_Init+0x14c>)
 8001080:	0018      	movs	r0, r3
 8001082:	f004 fb79 	bl	8005778 <HAL_TIM_PWM_Init>
 8001086:	1e03      	subs	r3, r0, #0
 8001088:	d001      	beq.n	800108e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800108a:	f000 ff03 	bl	8001e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800108e:	2154      	movs	r1, #84	@ 0x54
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001096:	187b      	adds	r3, r7, r1
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109c:	187b      	adds	r3, r7, r1
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010a2:	187a      	adds	r2, r7, r1
 80010a4:	4b31      	ldr	r3, [pc, #196]	@ (800116c <MX_TIM1_Init+0x14c>)
 80010a6:	0011      	movs	r1, r2
 80010a8:	0018      	movs	r0, r3
 80010aa:	f005 fa07 	bl	80064bc <HAL_TIMEx_MasterConfigSynchronization>
 80010ae:	1e03      	subs	r3, r0, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80010b2:	f000 feef 	bl	8001e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b6:	2138      	movs	r1, #56	@ 0x38
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	2260      	movs	r2, #96	@ 0x60
 80010bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80010be:	187b      	adds	r3, r7, r1
 80010c0:	2200      	movs	r2, #0
 80010c2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ca:	187b      	adds	r3, r7, r1
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e2:	1879      	adds	r1, r7, r1
 80010e4:	4b21      	ldr	r3, [pc, #132]	@ (800116c <MX_TIM1_Init+0x14c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	0018      	movs	r0, r3
 80010ea:	f004 fd83 	bl	8005bf4 <HAL_TIM_PWM_ConfigChannel>
 80010ee:	1e03      	subs	r3, r0, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80010f2:	f000 fecf 	bl	8001e94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2200      	movs	r2, #0
 8001100:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2280      	movs	r2, #128	@ 0x80
 8001118:	0192      	lsls	r2, r2, #6
 800111a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2200      	movs	r2, #0
 8001126:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2280      	movs	r2, #128	@ 0x80
 8001132:	0492      	lsls	r2, r2, #18
 8001134:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2200      	movs	r2, #0
 800113a:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2200      	movs	r2, #0
 8001146:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001148:	1d3a      	adds	r2, r7, #4
 800114a:	4b08      	ldr	r3, [pc, #32]	@ (800116c <MX_TIM1_Init+0x14c>)
 800114c:	0011      	movs	r1, r2
 800114e:	0018      	movs	r0, r3
 8001150:	f005 fa1c 	bl	800658c <HAL_TIMEx_ConfigBreakDeadTime>
 8001154:	1e03      	subs	r3, r0, #0
 8001156:	d001      	beq.n	800115c <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001158:	f000 fe9c 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800115c:	4b03      	ldr	r3, [pc, #12]	@ (800116c <MX_TIM1_Init+0x14c>)
 800115e:	0018      	movs	r0, r3
 8001160:	f001 f97a 	bl	8002458 <HAL_TIM_MspPostInit>

}
 8001164:	46c0      	nop			@ (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	b018      	add	sp, #96	@ 0x60
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000144 	.word	0x20000144
 8001170:	40012c00 	.word	0x40012c00
 8001174:	0000031f 	.word	0x0000031f

08001178 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	@ 0x28
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117e:	231c      	movs	r3, #28
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	0018      	movs	r0, r3
 8001184:	230c      	movs	r3, #12
 8001186:	001a      	movs	r2, r3
 8001188:	2100      	movs	r1, #0
 800118a:	f005 fab3 	bl	80066f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800118e:	003b      	movs	r3, r7
 8001190:	0018      	movs	r0, r3
 8001192:	231c      	movs	r3, #28
 8001194:	001a      	movs	r2, r3
 8001196:	2100      	movs	r1, #0
 8001198:	f005 faac 	bl	80066f4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800119c:	4b24      	ldr	r3, [pc, #144]	@ (8001230 <MX_TIM2_Init+0xb8>)
 800119e:	2280      	movs	r2, #128	@ 0x80
 80011a0:	05d2      	lsls	r2, r2, #23
 80011a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 80011a4:	4b22      	ldr	r3, [pc, #136]	@ (8001230 <MX_TIM2_Init+0xb8>)
 80011a6:	4a23      	ldr	r2, [pc, #140]	@ (8001234 <MX_TIM2_Init+0xbc>)
 80011a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011aa:	4b21      	ldr	r3, [pc, #132]	@ (8001230 <MX_TIM2_Init+0xb8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80011b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001230 <MX_TIM2_Init+0xb8>)
 80011b2:	2263      	movs	r2, #99	@ 0x63
 80011b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <MX_TIM2_Init+0xb8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001230 <MX_TIM2_Init+0xb8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001230 <MX_TIM2_Init+0xb8>)
 80011c4:	0018      	movs	r0, r3
 80011c6:	f004 fad7 	bl	8005778 <HAL_TIM_PWM_Init>
 80011ca:	1e03      	subs	r3, r0, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80011ce:	f000 fe61 	bl	8001e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d2:	211c      	movs	r1, #28
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e0:	187a      	adds	r2, r7, r1
 80011e2:	4b13      	ldr	r3, [pc, #76]	@ (8001230 <MX_TIM2_Init+0xb8>)
 80011e4:	0011      	movs	r1, r2
 80011e6:	0018      	movs	r0, r3
 80011e8:	f005 f968 	bl	80064bc <HAL_TIMEx_MasterConfigSynchronization>
 80011ec:	1e03      	subs	r3, r0, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80011f0:	f000 fe50 	bl	8001e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f4:	003b      	movs	r3, r7
 80011f6:	2260      	movs	r2, #96	@ 0x60
 80011f8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80011fa:	003b      	movs	r3, r7
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001200:	003b      	movs	r3, r7
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001206:	003b      	movs	r3, r7
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800120c:	0039      	movs	r1, r7
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <MX_TIM2_Init+0xb8>)
 8001210:	2208      	movs	r2, #8
 8001212:	0018      	movs	r0, r3
 8001214:	f004 fcee 	bl	8005bf4 <HAL_TIM_PWM_ConfigChannel>
 8001218:	1e03      	subs	r3, r0, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800121c:	f000 fe3a 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001220:	4b03      	ldr	r3, [pc, #12]	@ (8001230 <MX_TIM2_Init+0xb8>)
 8001222:	0018      	movs	r0, r3
 8001224:	f001 f918 	bl	8002458 <HAL_TIM_MspPostInit>

}
 8001228:	46c0      	nop			@ (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	b00a      	add	sp, #40	@ 0x28
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000190 	.word	0x20000190
 8001234:	0000031f 	.word	0x0000031f

08001238 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800123c:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <MX_TIM14_Init+0x40>)
 800123e:	4a0f      	ldr	r2, [pc, #60]	@ (800127c <MX_TIM14_Init+0x44>)
 8001240:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8001242:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <MX_TIM14_Init+0x40>)
 8001244:	22f4      	movs	r2, #244	@ 0xf4
 8001246:	0092      	lsls	r2, r2, #2
 8001248:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <MX_TIM14_Init+0x40>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <MX_TIM14_Init+0x40>)
 8001252:	4a0b      	ldr	r2, [pc, #44]	@ (8001280 <MX_TIM14_Init+0x48>)
 8001254:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <MX_TIM14_Init+0x40>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <MX_TIM14_Init+0x40>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001262:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <MX_TIM14_Init+0x40>)
 8001264:	0018      	movs	r0, r3
 8001266:	f004 f93b 	bl	80054e0 <HAL_TIM_Base_Init>
 800126a:	1e03      	subs	r3, r0, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800126e:	f000 fe11 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001272:	46c0      	nop			@ (mov r8, r8)
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200001dc 	.word	0x200001dc
 800127c:	40002000 	.word	0x40002000
 8001280:	0000ffff 	.word	0x0000ffff

08001284 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001288:	4b16      	ldr	r3, [pc, #88]	@ (80012e4 <MX_TIM16_Init+0x60>)
 800128a:	4a17      	ldr	r2, [pc, #92]	@ (80012e8 <MX_TIM16_Init+0x64>)
 800128c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = (58595 / 10) - 1;
 800128e:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <MX_TIM16_Init+0x60>)
 8001290:	4a16      	ldr	r2, [pc, #88]	@ (80012ec <MX_TIM16_Init+0x68>)
 8001292:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001294:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <MX_TIM16_Init+0x60>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800129a:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <MX_TIM16_Init+0x60>)
 800129c:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <MX_TIM16_Init+0x6c>)
 800129e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a0:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <MX_TIM16_Init+0x60>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 10;
 80012a6:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <MX_TIM16_Init+0x60>)
 80012a8:	220a      	movs	r2, #10
 80012aa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ac:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <MX_TIM16_Init+0x60>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80012b2:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <MX_TIM16_Init+0x60>)
 80012b4:	0018      	movs	r0, r3
 80012b6:	f004 f913 	bl	80054e0 <HAL_TIM_Base_Init>
 80012ba:	1e03      	subs	r3, r0, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80012be:	f000 fde9 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  // Decrease interrupt priority
  HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2101      	movs	r1, #1
 80012c6:	2015      	movs	r0, #21
 80012c8:	f001 fb0c 	bl	80028e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80012cc:	2015      	movs	r0, #21
 80012ce:	f001 fb1e 	bl	800290e <HAL_NVIC_EnableIRQ>

  // Clear SR interrupts
  __HAL_TIM_CLEAR_IT(timerSnooze, TIM_IT_UPDATE);
 80012d2:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <MX_TIM16_Init+0x70>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2202      	movs	r2, #2
 80012da:	4252      	negs	r2, r2
 80012dc:	611a      	str	r2, [r3, #16]
//	timerSnooze->Instance->RCR |= timerSnooze_RCR;


  /* USER CODE END TIM16_Init 2 */

}
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000228 	.word	0x20000228
 80012e8:	40014400 	.word	0x40014400
 80012ec:	000016e2 	.word	0x000016e2
 80012f0:	0000ffff 	.word	0x0000ffff
 80012f4:	2000004c 	.word	0x2000004c

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b08b      	sub	sp, #44	@ 0x2c
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	2414      	movs	r4, #20
 8001300:	193b      	adds	r3, r7, r4
 8001302:	0018      	movs	r0, r3
 8001304:	2314      	movs	r3, #20
 8001306:	001a      	movs	r2, r3
 8001308:	2100      	movs	r1, #0
 800130a:	f005 f9f3 	bl	80066f4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	4b66      	ldr	r3, [pc, #408]	@ (80014a8 <MX_GPIO_Init+0x1b0>)
 8001310:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001312:	4b65      	ldr	r3, [pc, #404]	@ (80014a8 <MX_GPIO_Init+0x1b0>)
 8001314:	2104      	movs	r1, #4
 8001316:	430a      	orrs	r2, r1
 8001318:	635a      	str	r2, [r3, #52]	@ 0x34
 800131a:	4b63      	ldr	r3, [pc, #396]	@ (80014a8 <MX_GPIO_Init+0x1b0>)
 800131c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800131e:	2204      	movs	r2, #4
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	4b60      	ldr	r3, [pc, #384]	@ (80014a8 <MX_GPIO_Init+0x1b0>)
 8001328:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800132a:	4b5f      	ldr	r3, [pc, #380]	@ (80014a8 <MX_GPIO_Init+0x1b0>)
 800132c:	2101      	movs	r1, #1
 800132e:	430a      	orrs	r2, r1
 8001330:	635a      	str	r2, [r3, #52]	@ 0x34
 8001332:	4b5d      	ldr	r3, [pc, #372]	@ (80014a8 <MX_GPIO_Init+0x1b0>)
 8001334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001336:	2201      	movs	r2, #1
 8001338:	4013      	ands	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800133e:	4b5a      	ldr	r3, [pc, #360]	@ (80014a8 <MX_GPIO_Init+0x1b0>)
 8001340:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001342:	4b59      	ldr	r3, [pc, #356]	@ (80014a8 <MX_GPIO_Init+0x1b0>)
 8001344:	2108      	movs	r1, #8
 8001346:	430a      	orrs	r2, r1
 8001348:	635a      	str	r2, [r3, #52]	@ 0x34
 800134a:	4b57      	ldr	r3, [pc, #348]	@ (80014a8 <MX_GPIO_Init+0x1b0>)
 800134c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800134e:	2208      	movs	r2, #8
 8001350:	4013      	ands	r3, r2
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	4b54      	ldr	r3, [pc, #336]	@ (80014a8 <MX_GPIO_Init+0x1b0>)
 8001358:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800135a:	4b53      	ldr	r3, [pc, #332]	@ (80014a8 <MX_GPIO_Init+0x1b0>)
 800135c:	2102      	movs	r1, #2
 800135e:	430a      	orrs	r2, r1
 8001360:	635a      	str	r2, [r3, #52]	@ 0x34
 8001362:	4b51      	ldr	r3, [pc, #324]	@ (80014a8 <MX_GPIO_Init+0x1b0>)
 8001364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001366:	2202      	movs	r2, #2
 8001368:	4013      	ands	r3, r2
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin
 800136e:	494f      	ldr	r1, [pc, #316]	@ (80014ac <MX_GPIO_Init+0x1b4>)
 8001370:	23a0      	movs	r3, #160	@ 0xa0
 8001372:	05db      	lsls	r3, r3, #23
 8001374:	2200      	movs	r2, #0
 8001376:	0018      	movs	r0, r3
 8001378:	f001 fc67 	bl	8002c4a <HAL_GPIO_WritePin>
                          |ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 800137c:	4b4c      	ldr	r3, [pc, #304]	@ (80014b0 <MX_GPIO_Init+0x1b8>)
 800137e:	2200      	movs	r2, #0
 8001380:	2180      	movs	r1, #128	@ 0x80
 8001382:	0018      	movs	r0, r3
 8001384:	f001 fc61 	bl	8002c4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_RST_GPIO_Port, CTOUCH_RST_Pin, GPIO_PIN_RESET);
 8001388:	2380      	movs	r3, #128	@ 0x80
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	4849      	ldr	r0, [pc, #292]	@ (80014b4 <MX_GPIO_Init+0x1bc>)
 800138e:	2200      	movs	r2, #0
 8001390:	0019      	movs	r1, r3
 8001392:	f001 fc5a 	bl	8002c4a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin SHIFT_MCLR_Pin
                           ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin
 8001396:	193b      	adds	r3, r7, r4
 8001398:	4a44      	ldr	r2, [pc, #272]	@ (80014ac <MX_GPIO_Init+0x1b4>)
 800139a:	601a      	str	r2, [r3, #0]
                          |ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	193b      	adds	r3, r7, r4
 800139e:	2201      	movs	r2, #1
 80013a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	193b      	adds	r3, r7, r4
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	193b      	adds	r3, r7, r4
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	193a      	adds	r2, r7, r4
 80013b0:	23a0      	movs	r3, #160	@ 0xa0
 80013b2:	05db      	lsls	r3, r3, #23
 80013b4:	0011      	movs	r1, r2
 80013b6:	0018      	movs	r0, r3
 80013b8:	f001 fac6 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013bc:	193b      	adds	r3, r7, r4
 80013be:	2204      	movs	r2, #4
 80013c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c2:	193b      	adds	r3, r7, r4
 80013c4:	2203      	movs	r2, #3
 80013c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	193b      	adds	r3, r7, r4
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	193a      	adds	r2, r7, r4
 80013d0:	23a0      	movs	r3, #160	@ 0xa0
 80013d2:	05db      	lsls	r3, r3, #23
 80013d4:	0011      	movs	r1, r2
 80013d6:	0018      	movs	r0, r3
 80013d8:	f001 fab6 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 80013dc:	193b      	adds	r3, r7, r4
 80013de:	2280      	movs	r2, #128	@ 0x80
 80013e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	193b      	adds	r3, r7, r4
 80013e4:	2201      	movs	r2, #1
 80013e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	193b      	adds	r3, r7, r4
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	193b      	adds	r3, r7, r4
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 80013f4:	193b      	adds	r3, r7, r4
 80013f6:	4a2e      	ldr	r2, [pc, #184]	@ (80014b0 <MX_GPIO_Init+0x1b8>)
 80013f8:	0019      	movs	r1, r3
 80013fa:	0010      	movs	r0, r2
 80013fc:	f001 faa4 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 8001400:	193b      	adds	r3, r7, r4
 8001402:	2280      	movs	r2, #128	@ 0x80
 8001404:	0212      	lsls	r2, r2, #8
 8001406:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001408:	193b      	adds	r3, r7, r4
 800140a:	2284      	movs	r2, #132	@ 0x84
 800140c:	0392      	lsls	r2, r2, #14
 800140e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001410:	193b      	adds	r3, r7, r4
 8001412:	2201      	movs	r2, #1
 8001414:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001416:	193a      	adds	r2, r7, r4
 8001418:	23a0      	movs	r3, #160	@ 0xa0
 800141a:	05db      	lsls	r3, r3, #23
 800141c:	0011      	movs	r1, r2
 800141e:	0018      	movs	r0, r3
 8001420:	f001 fa92 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 8001424:	0021      	movs	r1, r4
 8001426:	187b      	adds	r3, r7, r1
 8001428:	220f      	movs	r2, #15
 800142a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800142c:	187b      	adds	r3, r7, r1
 800142e:	2284      	movs	r2, #132	@ 0x84
 8001430:	0392      	lsls	r2, r2, #14
 8001432:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001434:	187b      	adds	r3, r7, r1
 8001436:	2201      	movs	r2, #1
 8001438:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143a:	000c      	movs	r4, r1
 800143c:	187b      	adds	r3, r7, r1
 800143e:	4a1e      	ldr	r2, [pc, #120]	@ (80014b8 <MX_GPIO_Init+0x1c0>)
 8001440:	0019      	movs	r1, r3
 8001442:	0010      	movs	r0, r2
 8001444:	f001 fa80 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_RST_Pin */
  GPIO_InitStruct.Pin = CTOUCH_RST_Pin;
 8001448:	0021      	movs	r1, r4
 800144a:	187b      	adds	r3, r7, r1
 800144c:	2280      	movs	r2, #128	@ 0x80
 800144e:	0052      	lsls	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	187b      	adds	r3, r7, r1
 8001454:	2201      	movs	r2, #1
 8001456:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	187b      	adds	r3, r7, r1
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	187b      	adds	r3, r7, r1
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001464:	187b      	adds	r3, r7, r1
 8001466:	4a13      	ldr	r2, [pc, #76]	@ (80014b4 <MX_GPIO_Init+0x1bc>)
 8001468:	0019      	movs	r1, r3
 800146a:	0010      	movs	r0, r2
 800146c:	f001 fa6c 	bl	8002948 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2100      	movs	r1, #0
 8001474:	2005      	movs	r0, #5
 8001476:	f001 fa35 	bl	80028e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800147a:	2005      	movs	r0, #5
 800147c:	f001 fa47 	bl	800290e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	2006      	movs	r0, #6
 8001486:	f001 fa2d 	bl	80028e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800148a:	2006      	movs	r0, #6
 800148c:	f001 fa3f 	bl	800290e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2101      	movs	r1, #1
 8001494:	2007      	movs	r0, #7
 8001496:	f001 fa25 	bl	80028e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800149a:	2007      	movs	r0, #7
 800149c:	f001 fa37 	bl	800290e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a0:	46c0      	nop			@ (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b00b      	add	sp, #44	@ 0x2c
 80014a6:	bd90      	pop	{r4, r7, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	00001e01 	.word	0x00001e01
 80014b0:	50000800 	.word	0x50000800
 80014b4:	50000400 	.word	0x50000400
 80014b8:	50000c00 	.word	0x50000c00

080014bc <updateAndDisplayTime>:
/* USER CODE BEGIN 4 */

/*
 * Pulls updated time from RTC and send new time to user display
 */
HAL_StatusTypeDef updateAndDisplayTime(void) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 80014c8:	4a07      	ldr	r2, [pc, #28]	@ (80014e8 <updateAndDisplayTime+0x2c>)
 80014ca:	4908      	ldr	r1, [pc, #32]	@ (80014ec <updateAndDisplayTime+0x30>)
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <updateAndDisplayTime+0x34>)
 80014ce:	0018      	movs	r0, r3
 80014d0:	f7ff fabe 	bl	8000a50 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <updateAndDisplayTime+0x30>)
 80014d6:	0018      	movs	r0, r3
 80014d8:	f000 fd64 	bl	8001fa4 <sevSeg_updateDigits>

	return halRet;
 80014dc:	1dfb      	adds	r3, r7, #7
 80014de:	781b      	ldrb	r3, [r3, #0]

}
 80014e0:	0018      	movs	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b002      	add	sp, #8
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200000a8 	.word	0x200000a8
 80014ec:	20000094 	.word	0x20000094
 80014f0:	20000118 	.word	0x20000118

080014f4 <updateAndDisplayAlarm>:
/*
 * Sends current user alarm time to user display
 * This doesn't pull from the RTC because the RTC alarm is not being used for that
 */

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80014fa:	1dfb      	adds	r3, r7, #7
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 8001500:	4b04      	ldr	r3, [pc, #16]	@ (8001514 <updateAndDisplayAlarm+0x20>)
 8001502:	0018      	movs	r0, r3
 8001504:	f000 fd4e 	bl	8001fa4 <sevSeg_updateDigits>

	return halRet;
 8001508:	1dfb      	adds	r3, r7, #7
 800150a:	781b      	ldrb	r3, [r3, #0]

}
 800150c:	0018      	movs	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	b002      	add	sp, #8
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200000ac 	.word	0x200000ac

08001518 <HAL_RTC_AlarmAEventCallback>:
 * Occurs every minute increment
 *
 * Pulls alarm time from RTC, increments and sets new alarm time, and updates time.
 * Sets off user alarm if the alarm is enabled.
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b08d      	sub	sp, #52	@ 0x34
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

	  RTC_AlarmTypeDef sAlarm = {0};
 8001520:	2408      	movs	r4, #8
 8001522:	193b      	adds	r3, r7, r4
 8001524:	0018      	movs	r0, r3
 8001526:	2328      	movs	r3, #40	@ 0x28
 8001528:	001a      	movs	r2, r3
 800152a:	2100      	movs	r1, #0
 800152c:	f005 f8e2 	bl	80066f4 <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8001530:	2380      	movs	r3, #128	@ 0x80
 8001532:	005a      	lsls	r2, r3, #1
 8001534:	1939      	adds	r1, r7, r4
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	2300      	movs	r3, #0
 800153a:	f003 fcf1 	bl	8004f20 <HAL_RTC_GetAlarm>

	  getRTCTime(hrtc, &currTime, &currDate);
 800153e:	4a1f      	ldr	r2, [pc, #124]	@ (80015bc <HAL_RTC_AlarmAEventCallback+0xa4>)
 8001540:	491f      	ldr	r1, [pc, #124]	@ (80015c0 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	0018      	movs	r0, r3
 8001546:	f7ff fa83 	bl	8000a50 <getRTCTime>

	  if(currTime.Minutes > 58) {
 800154a:	4b1d      	ldr	r3, [pc, #116]	@ (80015c0 <HAL_RTC_AlarmAEventCallback+0xa8>)
 800154c:	785b      	ldrb	r3, [r3, #1]
 800154e:	2b3a      	cmp	r3, #58	@ 0x3a
 8001550:	d903      	bls.n	800155a <HAL_RTC_AlarmAEventCallback+0x42>
		sAlarm.AlarmTime.Minutes = 0;
 8001552:	193b      	adds	r3, r7, r4
 8001554:	2200      	movs	r2, #0
 8001556:	705a      	strb	r2, [r3, #1]
 8001558:	e008      	b.n	800156c <HAL_RTC_AlarmAEventCallback+0x54>
	  } else {
		sAlarm.AlarmTime.Minutes = currTime.Minutes + 1;
 800155a:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <HAL_RTC_AlarmAEventCallback+0xa8>)
 800155c:	785b      	ldrb	r3, [r3, #1]
 800155e:	3301      	adds	r3, #1
 8001560:	b2da      	uxtb	r2, r3
 8001562:	2308      	movs	r3, #8
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001568:	e000      	b.n	800156c <HAL_RTC_AlarmAEventCallback+0x54>

			__NOP();
 800156a:	46c0      	nop			@ (mov r8, r8)
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 800156c:	2308      	movs	r3, #8
 800156e:	18f9      	adds	r1, r7, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	0018      	movs	r0, r3
 8001576:	f003 fb93 	bl	8004ca0 <HAL_RTC_SetAlarm_IT>
 800157a:	1e03      	subs	r3, r0, #0
 800157c:	d1f5      	bne.n	800156a <HAL_RTC_AlarmAEventCallback+0x52>

		}

	  updateAndDisplayTime();
 800157e:	f7ff ff9d 	bl	80014bc <updateAndDisplayTime>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 8001582:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <HAL_RTC_AlarmAEventCallback+0xac>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d013      	beq.n	80015b2 <HAL_RTC_AlarmAEventCallback+0x9a>
 800158a:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <HAL_RTC_AlarmAEventCallback+0xb0>)
 800158c:	781a      	ldrb	r2, [r3, #0]
 800158e:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d10d      	bne.n	80015b2 <HAL_RTC_AlarmAEventCallback+0x9a>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 8001596:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8001598:	785a      	ldrb	r2, [r3, #1]
 800159a:	4b09      	ldr	r3, [pc, #36]	@ (80015c0 <HAL_RTC_AlarmAEventCallback+0xa8>)
 800159c:	785b      	ldrb	r3, [r3, #1]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d107      	bne.n	80015b2 <HAL_RTC_AlarmAEventCallback+0x9a>
 80015a2:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <HAL_RTC_AlarmAEventCallback+0xb0>)
 80015a4:	78da      	ldrb	r2, [r3, #3]
 80015a6:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <HAL_RTC_AlarmAEventCallback+0xa8>)
 80015a8:	78db      	ldrb	r3, [r3, #3]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d101      	bne.n	80015b2 <HAL_RTC_AlarmAEventCallback+0x9a>
		  userAlarmBeep();
 80015ae:	f000 f80d 	bl	80015cc <userAlarmBeep>
	  }


}
 80015b2:	46c0      	nop			@ (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b00d      	add	sp, #52	@ 0x34
 80015b8:	bd90      	pop	{r4, r7, pc}
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	200000a8 	.word	0x200000a8
 80015c0:	20000094 	.word	0x20000094
 80015c4:	20000091 	.word	0x20000091
 80015c8:	200000ac 	.word	0x200000ac

080015cc <userAlarmBeep>:
 * Functionality depends on whether or not this is the first or second snooze.
 * 		First Snooze: 10-minute timer is started and alarm
 * 		              is beeped again at the end of this 10 minutes.
 * 		Second Snooze: No timer is started and silencing the alarm silences it for good.
 */
void userAlarmBeep() {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 80015d2:	4b5e      	ldr	r3, [pc, #376]	@ (800174c <userAlarmBeep+0x180>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d018      	beq.n	800160c <userAlarmBeep+0x40>

			// Stop the timer and
			HAL_TIM_Base_Stop_IT(timerSnooze);
 80015da:	4b5d      	ldr	r3, [pc, #372]	@ (8001750 <userAlarmBeep+0x184>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	0018      	movs	r0, r3
 80015e0:	f004 f89c 	bl	800571c <HAL_TIM_Base_Stop_IT>

			// Reset count to 0
			// only bits 0 - 15 should be changed.
			timerSnooze->Instance->CNT &= 0xFFFF0000;
 80015e4:	4b5a      	ldr	r3, [pc, #360]	@ (8001750 <userAlarmBeep+0x184>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015ec:	4b58      	ldr	r3, [pc, #352]	@ (8001750 <userAlarmBeep+0x184>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	0c12      	lsrs	r2, r2, #16
 80015f4:	0412      	lsls	r2, r2, #16
 80015f6:	625a      	str	r2, [r3, #36]	@ 0x24

			// Reset interrupt status register
			timerSnooze->Instance->SR &= 0xFFFC;
 80015f8:	4b55      	ldr	r3, [pc, #340]	@ (8001750 <userAlarmBeep+0x184>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	4b53      	ldr	r3, [pc, #332]	@ (8001750 <userAlarmBeep+0x184>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4953      	ldr	r1, [pc, #332]	@ (8001754 <userAlarmBeep+0x188>)
 8001608:	400a      	ands	r2, r1
 800160a:	611a      	str	r2, [r3, #16]
//			timerSnooze->Instance->RCR &= 0xFF00;
//			timerSnooze->Instance->RCR |= timerSnooze_RCR;

		}

	HAL_TIM_Base_Stop(timerDelay);
 800160c:	4b52      	ldr	r3, [pc, #328]	@ (8001758 <userAlarmBeep+0x18c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	0018      	movs	r0, r3
 8001612:	f004 f809 	bl	8005628 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001616:	4b50      	ldr	r3, [pc, #320]	@ (8001758 <userAlarmBeep+0x18c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	0018      	movs	r0, r3
 800161c:	f003 ffb8 	bl	8005590 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001620:	4b4d      	ldr	r3, [pc, #308]	@ (8001758 <userAlarmBeep+0x18c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001628:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 800162a:	1cfb      	adds	r3, r7, #3
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine whether to toggle high or low brightness
	 */
	uint8_t intenSet;
	if(displayToggle == 0) { 				// If the user has full brightness enabled, toggle full btightness
 8001630:	4b4a      	ldr	r3, [pc, #296]	@ (800175c <userAlarmBeep+0x190>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d103      	bne.n	8001640 <userAlarmBeep+0x74>
		intenSet = 2;
 8001638:	1cbb      	adds	r3, r7, #2
 800163a:	2202      	movs	r2, #2
 800163c:	701a      	strb	r2, [r3, #0]
 800163e:	e002      	b.n	8001646 <userAlarmBeep+0x7a>
	}
	else {									// Else, toggle low brightness
		intenSet = 1;
 8001640:	1cbb      	adds	r3, r7, #2
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
	}

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 8001646:	f7ff ff39 	bl	80014bc <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 800164a:	4b43      	ldr	r3, [pc, #268]	@ (8001758 <userAlarmBeep+0x18c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	4a42      	ldr	r2, [pc, #264]	@ (8001760 <userAlarmBeep+0x194>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d925      	bls.n	80016a8 <userAlarmBeep+0xdc>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink * intenSet]);	// Toggle on/off
 800165c:	1cfb      	adds	r3, r7, #3
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	1cba      	adds	r2, r7, #2
 8001662:	7812      	ldrb	r2, [r2, #0]
 8001664:	4353      	muls	r3, r2
 8001666:	4a3f      	ldr	r2, [pc, #252]	@ (8001764 <userAlarmBeep+0x198>)
 8001668:	5cd3      	ldrb	r3, [r2, r3]
 800166a:	0018      	movs	r0, r3
 800166c:	f000 fd4c 	bl	8002108 <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(buzzerPort, buzzerPin);					// Toggle Buzzer
 8001670:	4b3d      	ldr	r3, [pc, #244]	@ (8001768 <userAlarmBeep+0x19c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2280      	movs	r2, #128	@ 0x80
 8001676:	0052      	lsls	r2, r2, #1
 8001678:	0011      	movs	r1, r2
 800167a:	0018      	movs	r0, r3
 800167c:	f001 fb02 	bl	8002c84 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001680:	4b35      	ldr	r3, [pc, #212]	@ (8001758 <userAlarmBeep+0x18c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001688:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 800168a:	1cfb      	adds	r3, r7, #3
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	1e5a      	subs	r2, r3, #1
 8001690:	4193      	sbcs	r3, r2
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2201      	movs	r2, #1
 8001696:	4053      	eors	r3, r2
 8001698:	b2db      	uxtb	r3, r3
 800169a:	001a      	movs	r2, r3
 800169c:	1cfb      	adds	r3, r7, #3
 800169e:	701a      	strb	r2, [r3, #0]
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	2101      	movs	r1, #1
 80016a4:	400a      	ands	r2, r1
 80016a6:	701a      	strb	r2, [r3, #0]

		}


		capTouch_readChannels(&capTouch);
 80016a8:	4b30      	ldr	r3, [pc, #192]	@ (800176c <userAlarmBeep+0x1a0>)
 80016aa:	0018      	movs	r0, r3
 80016ac:	f7fe ff62 	bl	8000574 <capTouch_readChannels>

	} while(capTouch.keyStat == 0x00 &&
 80016b0:	4b2e      	ldr	r3, [pc, #184]	@ (800176c <userAlarmBeep+0x1a0>)
 80016b2:	7c1b      	ldrb	r3, [r3, #16]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10e      	bne.n	80016d6 <userAlarmBeep+0x10a>
			(HAL_GPIO_ReadPin(alarmEnableButtonPort, alarmEnableButtonPin) != GPIO_PIN_RESET));
 80016b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001770 <userAlarmBeep+0x1a4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2204      	movs	r2, #4
 80016be:	0011      	movs	r1, r2
 80016c0:	0018      	movs	r0, r3
 80016c2:	f001 faa5 	bl	8002c10 <HAL_GPIO_ReadPin>
 80016c6:	0003      	movs	r3, r0
 80016c8:	0019      	movs	r1, r3
 80016ca:	1cbb      	adds	r3, r7, #2
 80016cc:	1cba      	adds	r2, r7, #2
 80016ce:	7812      	ldrb	r2, [r2, #0]
 80016d0:	701a      	strb	r2, [r3, #0]
	} while(capTouch.keyStat == 0x00 &&
 80016d2:	2900      	cmp	r1, #0
 80016d4:	d1b7      	bne.n	8001646 <userAlarmBeep+0x7a>

	/*
	 * Stop blinking, turn off buzzer, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 80016d6:	4b20      	ldr	r3, [pc, #128]	@ (8001758 <userAlarmBeep+0x18c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	0018      	movs	r0, r3
 80016dc:	f003 ffa4 	bl	8005628 <HAL_TIM_Base_Stop>
	HAL_GPIO_WritePin(buzzerPort, buzzerPin, GPIO_PIN_RESET);
 80016e0:	4b21      	ldr	r3, [pc, #132]	@ (8001768 <userAlarmBeep+0x19c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2280      	movs	r2, #128	@ 0x80
 80016e6:	0051      	lsls	r1, r2, #1
 80016e8:	2200      	movs	r2, #0
 80016ea:	0018      	movs	r0, r3
 80016ec:	f001 faad 	bl	8002c4a <HAL_GPIO_WritePin>
	updateAndDisplayTime();				// Update to current time and display
 80016f0:	f7ff fee4 	bl	80014bc <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[intenSet]);	// Turn display back on
 80016f4:	1cbb      	adds	r3, r7, #2
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001764 <userAlarmBeep+0x198>)
 80016fa:	5cd3      	ldrb	r3, [r2, r3]
 80016fc:	0018      	movs	r0, r3
 80016fe:	f000 fd03 	bl	8002108 <sevSeg_setIntensity>
	if(intenSet == 2) {
 8001702:	1cbb      	adds	r3, r7, #2
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d103      	bne.n	8001712 <userAlarmBeep+0x146>
		displayToggle = 0;
 800170a:	4b14      	ldr	r3, [pc, #80]	@ (800175c <userAlarmBeep+0x190>)
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
 8001710:	e002      	b.n	8001718 <userAlarmBeep+0x14c>
	}
	else {
		displayToggle = 2;
 8001712:	4b12      	ldr	r3, [pc, #72]	@ (800175c <userAlarmBeep+0x190>)
 8001714:	2202      	movs	r2, #2
 8001716:	701a      	strb	r2, [r3, #0]
	}

	// If this is the first snooze,
	if(!secondSnooze) {
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <userAlarmBeep+0x180>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2201      	movs	r2, #1
 800171e:	4053      	eors	r3, r2
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d008      	beq.n	8001738 <userAlarmBeep+0x16c>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 8001726:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <userAlarmBeep+0x184>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	0018      	movs	r0, r3
 800172c:	f003 ffa2 	bl	8005674 <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <userAlarmBeep+0x180>)
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
		 */
		secondSnooze = false;

	}

}
 8001736:	e005      	b.n	8001744 <userAlarmBeep+0x178>
		snoozeCounter = 0;
 8001738:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <userAlarmBeep+0x1a8>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
		secondSnooze = false;
 800173e:	4b03      	ldr	r3, [pc, #12]	@ (800174c <userAlarmBeep+0x180>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
}
 8001744:	46c0      	nop			@ (mov r8, r8)
 8001746:	46bd      	mov	sp, r7
 8001748:	b002      	add	sp, #8
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000276 	.word	0x20000276
 8001750:	2000004c 	.word	0x2000004c
 8001754:	0000fffc 	.word	0x0000fffc
 8001758:	20000048 	.word	0x20000048
 800175c:	20000090 	.word	0x20000090
 8001760:	00007ffe 	.word	0x00007ffe
 8001764:	0800679c 	.word	0x0800679c
 8001768:	20000014 	.word	0x20000014
 800176c:	20000278 	.word	0x20000278
 8001770:	20000000 	.word	0x20000000
 8001774:	20000274 	.word	0x20000274

08001778 <HAL_GPIO_EXTI_Falling_Callback>:
 * General Falling-Edge EXTI Callback function
 *
 * Internal conditional determines which function to call
 * based on which button was pressed.
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	0002      	movs	r2, r0
 8001780:	1dbb      	adds	r3, r7, #6
 8001782:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8001784:	2208      	movs	r2, #8
 8001786:	1dbb      	adds	r3, r7, #6
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	4293      	cmp	r3, r2
 800178c:	d106      	bne.n	800179c <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 800178e:	230f      	movs	r3, #15
 8001790:	18fc      	adds	r4, r7, r3
 8001792:	f000 f85f 	bl	8001854 <displayButtonISR>
 8001796:	0003      	movs	r3, r0
 8001798:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 800179a:	e031      	b.n	8001800 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 800179c:	2204      	movs	r2, #4
 800179e:	1dbb      	adds	r3, r7, #6
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d106      	bne.n	80017b4 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 80017a6:	230f      	movs	r3, #15
 80017a8:	18fc      	adds	r4, r7, r3
 80017aa:	f000 f87b 	bl	80018a4 <alarmEnableISR>
 80017ae:	0003      	movs	r3, r0
 80017b0:	7023      	strb	r3, [r4, #0]
}
 80017b2:	e025      	b.n	8001800 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 80017b4:	2380      	movs	r3, #128	@ 0x80
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	1dba      	adds	r2, r7, #6
 80017ba:	8812      	ldrh	r2, [r2, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d106      	bne.n	80017ce <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 80017c0:	230f      	movs	r3, #15
 80017c2:	18fc      	adds	r4, r7, r3
 80017c4:	f000 f8ca 	bl	800195c <alarmSetISR>
 80017c8:	0003      	movs	r3, r0
 80017ca:	7023      	strb	r3, [r4, #0]
}
 80017cc:	e018      	b.n	8001800 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 80017ce:	2201      	movs	r2, #1
 80017d0:	1dbb      	adds	r3, r7, #6
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d106      	bne.n	80017e6 <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 80017d8:	230f      	movs	r3, #15
 80017da:	18fc      	adds	r4, r7, r3
 80017dc:	f000 f9a2 	bl	8001b24 <hourSetISR>
 80017e0:	0003      	movs	r3, r0
 80017e2:	7023      	strb	r3, [r4, #0]
}
 80017e4:	e00c      	b.n	8001800 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 80017e6:	2202      	movs	r2, #2
 80017e8:	1dbb      	adds	r3, r7, #6
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d106      	bne.n	80017fe <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 80017f0:	230f      	movs	r3, #15
 80017f2:	18fc      	adds	r4, r7, r3
 80017f4:	f000 f9c2 	bl	8001b7c <minuteSetISR>
 80017f8:	0003      	movs	r3, r0
 80017fa:	7023      	strb	r3, [r4, #0]
}
 80017fc:	e000      	b.n	8001800 <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 80017fe:	46c0      	nop			@ (mov r8, r8)
}
 8001800:	46c0      	nop			@ (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	b005      	add	sp, #20
 8001806:	bd90      	pop	{r4, r7, pc}

08001808 <HAL_TIM_PeriodElapsedCallback>:
 * Used for second snooze functionality
 *
 * This is entered at the end of a 10-minute snooze, at
 * which point the timer kicks back an interrupt.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

	snoozeCounter++;
 8001810:	4b0d      	ldr	r3, [pc, #52]	@ (8001848 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	b2da      	uxtb	r2, r3
 8001818:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800181a:	701a      	strb	r2, [r3, #0]

	if((htim == timerSnooze) && (secondSnooze == true) && (snoozeCounter == timerSnooze_RCR)) {
 800181c:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	429a      	cmp	r2, r3
 8001824:	d10b      	bne.n	800183e <HAL_TIM_PeriodElapsedCallback+0x36>
 8001826:	4b0a      	ldr	r3, [pc, #40]	@ (8001850 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d007      	beq.n	800183e <HAL_TIM_PeriodElapsedCallback+0x36>
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	001a      	movs	r2, r3
 8001834:	2364      	movs	r3, #100	@ 0x64
 8001836:	429a      	cmp	r2, r3
 8001838:	d101      	bne.n	800183e <HAL_TIM_PeriodElapsedCallback+0x36>

		userAlarmBeep();
 800183a:	f7ff fec7 	bl	80015cc <userAlarmBeep>

	}

}
 800183e:	46c0      	nop			@ (mov r8, r8)
 8001840:	46bd      	mov	sp, r7
 8001842:	b002      	add	sp, #8
 8001844:	bd80      	pop	{r7, pc}
 8001846:	46c0      	nop			@ (mov r8, r8)
 8001848:	20000274 	.word	0x20000274
 800184c:	2000004c 	.word	0x2000004c
 8001850:	20000276 	.word	0x20000276

08001854 <displayButtonISR>:

/*
 * Toggles through user time display brightness settings
 */
HAL_StatusTypeDef displayButtonISR(void) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 8001860:	f7ff fe2c 	bl	80014bc <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8001864:	4b0d      	ldr	r3, [pc, #52]	@ (800189c <displayButtonISR+0x48>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	001a      	movs	r2, r3
 800186a:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <displayButtonISR+0x4c>)
 800186c:	5c9b      	ldrb	r3, [r3, r2]
 800186e:	0018      	movs	r0, r3
 8001870:	f000 fc4a 	bl	8002108 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8001874:	4b09      	ldr	r3, [pc, #36]	@ (800189c <displayButtonISR+0x48>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d903      	bls.n	8001884 <displayButtonISR+0x30>
		displayToggle = 0;
 800187c:	4b07      	ldr	r3, [pc, #28]	@ (800189c <displayButtonISR+0x48>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e005      	b.n	8001890 <displayButtonISR+0x3c>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 8001884:	4b05      	ldr	r3, [pc, #20]	@ (800189c <displayButtonISR+0x48>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	3301      	adds	r3, #1
 800188a:	b2da      	uxtb	r2, r3
 800188c:	4b03      	ldr	r3, [pc, #12]	@ (800189c <displayButtonISR+0x48>)
 800188e:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8001890:	1dfb      	adds	r3, r7, #7
 8001892:	781b      	ldrb	r3, [r3, #0]

}
 8001894:	0018      	movs	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	b002      	add	sp, #8
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000090 	.word	0x20000090
 80018a0:	0800679c 	.word	0x0800679c

080018a4 <alarmEnableISR>:

/*
 * Toggles user alarm enable bool and alarm enable LED.
 */
HAL_StatusTypeDef alarmEnableISR(void) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 80018aa:	1dfb      	adds	r3, r7, #7
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 80018b0:	4b24      	ldr	r3, [pc, #144]	@ (8001944 <alarmEnableISR+0xa0>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2201      	movs	r2, #1
 80018b6:	4053      	eors	r3, r2
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00b      	beq.n	80018d6 <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 80018be:	4b22      	ldr	r3, [pc, #136]	@ (8001948 <alarmEnableISR+0xa4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2280      	movs	r2, #128	@ 0x80
 80018c4:	0151      	lsls	r1, r2, #5
 80018c6:	2201      	movs	r2, #1
 80018c8:	0018      	movs	r0, r3
 80018ca:	f001 f9be 	bl	8002c4a <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 80018ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001944 <alarmEnableISR+0xa0>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	701a      	strb	r2, [r3, #0]
 80018d4:	e010      	b.n	80018f8 <alarmEnableISR+0x54>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 80018d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001944 <alarmEnableISR+0xa0>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00b      	beq.n	80018f6 <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 80018de:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <alarmEnableISR+0xa4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2280      	movs	r2, #128	@ 0x80
 80018e4:	0151      	lsls	r1, r2, #5
 80018e6:	2200      	movs	r2, #0
 80018e8:	0018      	movs	r0, r3
 80018ea:	f001 f9ae 	bl	8002c4a <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 80018ee:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <alarmEnableISR+0xa0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
 80018f4:	e000      	b.n	80018f8 <alarmEnableISR+0x54>

	}
	else {
		__NOP();							//Code should never reach here.
 80018f6:	46c0      	nop			@ (mov r8, r8)
	}

	/*
	 * Reset snooze time
	 */
	secondSnooze = false;
 80018f8:	4b14      	ldr	r3, [pc, #80]	@ (800194c <alarmEnableISR+0xa8>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
	snoozeCounter = 0;
 80018fe:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <alarmEnableISR+0xac>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Stop_IT(timerSnooze);					// Stop snooze timer in case it is going
 8001904:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <alarmEnableISR+0xb0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	0018      	movs	r0, r3
 800190a:	f003 ff07 	bl	800571c <HAL_TIM_Base_Stop_IT>
	timerSnooze->Instance->CNT &= 0xFFFF0000;
 800190e:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <alarmEnableISR+0xb0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001916:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <alarmEnableISR+0xb0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	0c12      	lsrs	r2, r2, #16
 800191e:	0412      	lsls	r2, r2, #16
 8001920:	625a      	str	r2, [r3, #36]	@ 0x24
	timerSnooze->Instance->SR &= 0xFFFC;
 8001922:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <alarmEnableISR+0xb0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691a      	ldr	r2, [r3, #16]
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <alarmEnableISR+0xb0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4909      	ldr	r1, [pc, #36]	@ (8001958 <alarmEnableISR+0xb4>)
 8001932:	400a      	ands	r2, r1
 8001934:	611a      	str	r2, [r3, #16]

	return halRet;
 8001936:	1dfb      	adds	r3, r7, #7
 8001938:	781b      	ldrb	r3, [r3, #0]

}
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	b002      	add	sp, #8
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	20000091 	.word	0x20000091
 8001948:	20000010 	.word	0x20000010
 800194c:	20000276 	.word	0x20000276
 8001950:	20000274 	.word	0x20000274
 8001954:	2000004c 	.word	0x2000004c
 8001958:	0000fffc 	.word	0x0000fffc

0800195c <alarmSetISR>:
 * Delays for 3 seconds, checks if alarm set button is still pressed.
 * If it is, allow user to set the new alarm time
 * and blink display to indicate this
 *
 */
HAL_StatusTypeDef alarmSetISR(void) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001962:	003b      	movs	r3, r7
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for 3 seconds to see if alarm set button is still pressed
	 */

	// Delay for 3 * 1s intervals
	for(uint8_t i = 0; i < 3; i++) {
 8001968:	1dfb      	adds	r3, r7, #7
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
 800196e:	e01a      	b.n	80019a6 <alarmSetISR+0x4a>

		HAL_TIM_Base_Stop(timerDelay);
 8001970:	4b64      	ldr	r3, [pc, #400]	@ (8001b04 <alarmSetISR+0x1a8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	0018      	movs	r0, r3
 8001976:	f003 fe57 	bl	8005628 <HAL_TIM_Base_Stop>
		timerDelay->Instance->CNT = 0;						// Reset timer base
 800197a:	4b62      	ldr	r3, [pc, #392]	@ (8001b04 <alarmSetISR+0x1a8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2200      	movs	r2, #0
 8001982:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001984:	4b5f      	ldr	r3, [pc, #380]	@ (8001b04 <alarmSetISR+0x1a8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	0018      	movs	r0, r3
 800198a:	f003 fe01 	bl	8005590 <HAL_TIM_Base_Start>
	//	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to

		do {

		} while(__HAL_TIM_GET_COUNTER(timerDelay) < (65535));
 800198e:	4b5d      	ldr	r3, [pc, #372]	@ (8001b04 <alarmSetISR+0x1a8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001996:	4a5c      	ldr	r2, [pc, #368]	@ (8001b08 <alarmSetISR+0x1ac>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d9f8      	bls.n	800198e <alarmSetISR+0x32>
	for(uint8_t i = 0; i < 3; i++) {
 800199c:	1dfb      	adds	r3, r7, #7
 800199e:	781a      	ldrb	r2, [r3, #0]
 80019a0:	1dfb      	adds	r3, r7, #7
 80019a2:	3201      	adds	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	1dfb      	adds	r3, r7, #7
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d9e0      	bls.n	8001970 <alarmSetISR+0x14>
	}

	// If button is still pressed, we are in alarm set mode.
	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 80019ae:	4b57      	ldr	r3, [pc, #348]	@ (8001b0c <alarmSetISR+0x1b0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2280      	movs	r2, #128	@ 0x80
 80019b4:	0212      	lsls	r2, r2, #8
 80019b6:	0011      	movs	r1, r2
 80019b8:	0018      	movs	r0, r3
 80019ba:	f001 f929 	bl	8002c10 <HAL_GPIO_ReadPin>
 80019be:	1e03      	subs	r3, r0, #0
 80019c0:	d102      	bne.n	80019c8 <alarmSetISR+0x6c>
		alarmSetMode = true;
 80019c2:	4b53      	ldr	r3, [pc, #332]	@ (8001b10 <alarmSetISR+0x1b4>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
	 * alarm set process until the button is pressed again
	 */


	// Reset Timer
	HAL_TIM_Base_Stop(timerDelay);
 80019c8:	4b4e      	ldr	r3, [pc, #312]	@ (8001b04 <alarmSetISR+0x1a8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	0018      	movs	r0, r3
 80019ce:	f003 fe2b 	bl	8005628 <HAL_TIM_Base_Stop>
	timerDelay->Instance->CNT = 0;
 80019d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001b04 <alarmSetISR+0x1a8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2200      	movs	r2, #0
 80019da:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80019dc:	4b49      	ldr	r3, [pc, #292]	@ (8001b04 <alarmSetISR+0x1a8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	0018      	movs	r0, r3
 80019e2:	f003 fdd5 	bl	8005590 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80019e6:	4b47      	ldr	r3, [pc, #284]	@ (8001b04 <alarmSetISR+0x1a8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	801a      	strh	r2, [r3, #0]

	bool alarmSetButtonReset = false;
 80019f2:	1cfb      	adds	r3, r7, #3
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {
 80019f8:	4b45      	ldr	r3, [pc, #276]	@ (8001b10 <alarmSetISR+0x1b4>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d100      	bne.n	8001a02 <alarmSetISR+0xa6>
 8001a00:	e077      	b.n	8001af2 <alarmSetISR+0x196>

		// If we were in second snooze mode, kill it.
		secondSnooze = false;
 8001a02:	4b44      	ldr	r3, [pc, #272]	@ (8001b14 <alarmSetISR+0x1b8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
		snoozeCounter = 0;
 8001a08:	4b43      	ldr	r3, [pc, #268]	@ (8001b18 <alarmSetISR+0x1bc>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]

		bool displayBlink = false;
 8001a0e:	1cbb      	adds	r3, r7, #2
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]

		/*
		 * Determine whether to toggle high or low brightness
		 */
		uint8_t intenSet;
		if(displayToggle == 0) { 				// If the user has full brightness enabled, toggle full btightness
 8001a14:	4b41      	ldr	r3, [pc, #260]	@ (8001b1c <alarmSetISR+0x1c0>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d103      	bne.n	8001a24 <alarmSetISR+0xc8>
			intenSet = 2;
 8001a1c:	1c7b      	adds	r3, r7, #1
 8001a1e:	2202      	movs	r2, #2
 8001a20:	701a      	strb	r2, [r3, #0]
 8001a22:	e002      	b.n	8001a2a <alarmSetISR+0xce>
		}
		else {									// Else, toggle low brightness
			intenSet = 1;
 8001a24:	1c7b      	adds	r3, r7, #1
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
		}

		do {											// while the alarm set button is not held down, blink display.

			// Check to make sure the user has released the set button from the initial hold
			if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_SET) {
 8001a2a:	4b38      	ldr	r3, [pc, #224]	@ (8001b0c <alarmSetISR+0x1b0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2280      	movs	r2, #128	@ 0x80
 8001a30:	0212      	lsls	r2, r2, #8
 8001a32:	0011      	movs	r1, r2
 8001a34:	0018      	movs	r0, r3
 8001a36:	f001 f8eb 	bl	8002c10 <HAL_GPIO_ReadPin>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d102      	bne.n	8001a46 <alarmSetISR+0xea>
				alarmSetButtonReset = true;
 8001a40:	1cfb      	adds	r3, r7, #3
 8001a42:	2201      	movs	r2, #1
 8001a44:	701a      	strb	r2, [r3, #0]
			}

			updateAndDisplayAlarm();
 8001a46:	f7ff fd55 	bl	80014f4 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 8001a4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b04 <alarmSetISR+0x1a8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	1ad2      	subs	r2, r2, r3
 8001a58:	2380      	movs	r3, #128	@ 0x80
 8001a5a:	021b      	lsls	r3, r3, #8
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d31e      	bcc.n	8001a9e <alarmSetISR+0x142>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink * intenSet]);		// Initialize to whatever duty cycle
 8001a60:	1cbb      	adds	r3, r7, #2
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	1c7a      	adds	r2, r7, #1
 8001a66:	7812      	ldrb	r2, [r2, #0]
 8001a68:	4353      	muls	r3, r2
 8001a6a:	4a2d      	ldr	r2, [pc, #180]	@ (8001b20 <alarmSetISR+0x1c4>)
 8001a6c:	5cd3      	ldrb	r3, [r2, r3]
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f000 fb4a 	bl	8002108 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 8001a74:	4b23      	ldr	r3, [pc, #140]	@ (8001b04 <alarmSetISR+0x1a8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	801a      	strh	r2, [r3, #0]
				displayBlink = !displayBlink;
 8001a80:	1cbb      	adds	r3, r7, #2
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	1e5a      	subs	r2, r3, #1
 8001a86:	4193      	sbcs	r3, r2
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4053      	eors	r3, r2
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	001a      	movs	r2, r3
 8001a92:	1cbb      	adds	r3, r7, #2
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	781a      	ldrb	r2, [r3, #0]
 8001a98:	2101      	movs	r1, #1
 8001a9a:	400a      	ands	r2, r1
 8001a9c:	701a      	strb	r2, [r3, #0]

			}

		}while((HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET)
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b0c <alarmSetISR+0x1b0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2280      	movs	r2, #128	@ 0x80
 8001aa4:	0212      	lsls	r2, r2, #8
 8001aa6:	0011      	movs	r1, r2
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f001 f8b1 	bl	8002c10 <HAL_GPIO_ReadPin>
 8001aae:	1e03      	subs	r3, r0, #0
				|| !alarmSetButtonReset);
 8001ab0:	d1bb      	bne.n	8001a2a <alarmSetISR+0xce>
 8001ab2:	1cfb      	adds	r3, r7, #3
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4053      	eors	r3, r2
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1b4      	bne.n	8001a2a <alarmSetISR+0xce>

		sevSeg_setIntensity(sevSeg_intensityDuty[intenSet]);			// Turn display back on
 8001ac0:	1c7b      	adds	r3, r7, #1
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	4a16      	ldr	r2, [pc, #88]	@ (8001b20 <alarmSetISR+0x1c4>)
 8001ac6:	5cd3      	ldrb	r3, [r2, r3]
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f000 fb1d 	bl	8002108 <sevSeg_setIntensity>
		if(intenSet == 2) {
 8001ace:	1c7b      	adds	r3, r7, #1
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d103      	bne.n	8001ade <alarmSetISR+0x182>
			displayToggle = 0;
 8001ad6:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <alarmSetISR+0x1c0>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
 8001adc:	e002      	b.n	8001ae4 <alarmSetISR+0x188>
		}
		else {
			displayToggle = 2;
 8001ade:	4b0f      	ldr	r3, [pc, #60]	@ (8001b1c <alarmSetISR+0x1c0>)
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	701a      	strb	r2, [r3, #0]
		}


		HAL_TIM_Base_Stop(timerDelay);
 8001ae4:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <alarmSetISR+0x1a8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f003 fd9d 	bl	8005628 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8001aee:	f7ff fce5 	bl	80014bc <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8001af2:	4b07      	ldr	r3, [pc, #28]	@ (8001b10 <alarmSetISR+0x1b4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 8001af8:	003b      	movs	r3, r7
 8001afa:	781b      	ldrb	r3, [r3, #0]

}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b002      	add	sp, #8
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000048 	.word	0x20000048
 8001b08:	0000fffe 	.word	0x0000fffe
 8001b0c:	20000004 	.word	0x20000004
 8001b10:	20000275 	.word	0x20000275
 8001b14:	20000276 	.word	0x20000276
 8001b18:	20000274 	.word	0x20000274
 8001b1c:	20000090 	.word	0x20000090
 8001b20:	0800679c 	.word	0x0800679c

08001b24 <hourSetISR>:

/*
 * Increment either user alarm hour value or RTC hour value
 */
HAL_StatusTypeDef hourSetISR(void) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0


	HAL_StatusTypeDef halRet = HAL_OK;
 8001b2a:	1dfb      	adds	r3, r7, #7
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001b30:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <hourSetISR+0x48>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <hourSetISR+0x1a>

		alarmHourInc();
 8001b38:	f000 f878 	bl	8001c2c <alarmHourInc>
 8001b3c:	e00f      	b.n	8001b5e <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 8001b3e:	f000 f8a5 	bl	8001c8c <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001b42:	490b      	ldr	r1, [pc, #44]	@ (8001b70 <hourSetISR+0x4c>)
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <hourSetISR+0x50>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f002 fec5 	bl	80048d8 <HAL_RTC_SetTime>


		updateAndDisplayTime();
 8001b4e:	f7ff fcb5 	bl	80014bc <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001b52:	4a09      	ldr	r2, [pc, #36]	@ (8001b78 <hourSetISR+0x54>)
 8001b54:	4906      	ldr	r1, [pc, #24]	@ (8001b70 <hourSetISR+0x4c>)
 8001b56:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <hourSetISR+0x50>)
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7fe ff79 	bl	8000a50 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 8001b5e:	1dfb      	adds	r3, r7, #7
 8001b60:	781b      	ldrb	r3, [r3, #0]

}
 8001b62:	0018      	movs	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b002      	add	sp, #8
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	46c0      	nop			@ (mov r8, r8)
 8001b6c:	20000275 	.word	0x20000275
 8001b70:	20000094 	.word	0x20000094
 8001b74:	20000118 	.word	0x20000118
 8001b78:	200000a8 	.word	0x200000a8

08001b7c <minuteSetISR>:

/*
 * Increment either user alarm minute value or RTC minute value
 */
HAL_StatusTypeDef minuteSetISR(void) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	@ 0x30
 8001b80:	af00      	add	r7, sp, #0


	HAL_StatusTypeDef halRet = HAL_OK;
 8001b82:	232f      	movs	r3, #47	@ 0x2f
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001b8a:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <minuteSetISR+0xa0>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <minuteSetISR+0x1c>

		alarmMinuteInc();
 8001b92:	f000 f8bb 	bl	8001d0c <alarmMinuteInc>
 8001b96:	e03a      	b.n	8001c0e <minuteSetISR+0x92>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 8001b98:	f000 f8d6 	bl	8001d48 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001b9c:	4920      	ldr	r1, [pc, #128]	@ (8001c20 <minuteSetISR+0xa4>)
 8001b9e:	4b21      	ldr	r3, [pc, #132]	@ (8001c24 <minuteSetISR+0xa8>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f002 fe98 	bl	80048d8 <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	0018      	movs	r0, r3
 8001bac:	2328      	movs	r3, #40	@ 0x28
 8001bae:	001a      	movs	r2, r3
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	f004 fd9f 	bl	80066f4 <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8001bb6:	2380      	movs	r3, #128	@ 0x80
 8001bb8:	005a      	lsls	r2, r3, #1
 8001bba:	1d39      	adds	r1, r7, #4
 8001bbc:	4819      	ldr	r0, [pc, #100]	@ (8001c24 <minuteSetISR+0xa8>)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f003 f9ae 	bl	8004f20 <HAL_RTC_GetAlarm>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001bc4:	4a18      	ldr	r2, [pc, #96]	@ (8001c28 <minuteSetISR+0xac>)
 8001bc6:	4916      	ldr	r1, [pc, #88]	@ (8001c20 <minuteSetISR+0xa4>)
 8001bc8:	4b16      	ldr	r3, [pc, #88]	@ (8001c24 <minuteSetISR+0xa8>)
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f7fe ff40 	bl	8000a50 <getRTCTime>

		if(currTime.Minutes > 58) {
 8001bd0:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <minuteSetISR+0xa4>)
 8001bd2:	785b      	ldrb	r3, [r3, #1]
 8001bd4:	2b3a      	cmp	r3, #58	@ 0x3a
 8001bd6:	d903      	bls.n	8001be0 <minuteSetISR+0x64>
			sAlarm.AlarmTime.Minutes = 0;
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	2200      	movs	r2, #0
 8001bdc:	705a      	strb	r2, [r3, #1]
 8001bde:	e005      	b.n	8001bec <minuteSetISR+0x70>
		} else {
			sAlarm.AlarmTime.Minutes = currTime.Minutes + 1;
 8001be0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c20 <minuteSetISR+0xa4>)
 8001be2:	785b      	ldrb	r3, [r3, #1]
 8001be4:	3301      	adds	r3, #1
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8001bec:	46c0      	nop			@ (mov r8, r8)
 8001bee:	1d39      	adds	r1, r7, #4
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <minuteSetISR+0xa8>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f003 f853 	bl	8004ca0 <HAL_RTC_SetAlarm_IT>
 8001bfa:	1e03      	subs	r3, r0, #0
 8001bfc:	d1f7      	bne.n	8001bee <minuteSetISR+0x72>


		updateAndDisplayTime();
 8001bfe:	f7ff fc5d 	bl	80014bc <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001c02:	4a09      	ldr	r2, [pc, #36]	@ (8001c28 <minuteSetISR+0xac>)
 8001c04:	4906      	ldr	r1, [pc, #24]	@ (8001c20 <minuteSetISR+0xa4>)
 8001c06:	4b07      	ldr	r3, [pc, #28]	@ (8001c24 <minuteSetISR+0xa8>)
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f7fe ff21 	bl	8000a50 <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 8001c0e:	232f      	movs	r3, #47	@ 0x2f
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	781b      	ldrb	r3, [r3, #0]
}
 8001c14:	0018      	movs	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b00c      	add	sp, #48	@ 0x30
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000275 	.word	0x20000275
 8001c20:	20000094 	.word	0x20000094
 8001c24:	20000118 	.word	0x20000118
 8001c28:	200000a8 	.word	0x200000a8

08001c2c <alarmHourInc>:

/*
 * Increment user alarm time hour
 */
void alarmHourInc(void) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8001c30:	4b15      	ldr	r3, [pc, #84]	@ (8001c88 <alarmHourInc+0x5c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b0b      	cmp	r3, #11
 8001c36:	d903      	bls.n	8001c40 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8001c38:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <alarmHourInc+0x5c>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
 8001c3e:	e01e      	b.n	8001c7e <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 8001c40:	4b11      	ldr	r3, [pc, #68]	@ (8001c88 <alarmHourInc+0x5c>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b0b      	cmp	r3, #11
 8001c46:	d10e      	bne.n	8001c66 <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001c48:	4b0f      	ldr	r3, [pc, #60]	@ (8001c88 <alarmHourInc+0x5c>)
 8001c4a:	78db      	ldrb	r3, [r3, #3]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d103      	bne.n	8001c58 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001c50:	4b0d      	ldr	r3, [pc, #52]	@ (8001c88 <alarmHourInc+0x5c>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	70da      	strb	r2, [r3, #3]
 8001c56:	e002      	b.n	8001c5e <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001c58:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <alarmHourInc+0x5c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <alarmHourInc+0x5c>)
 8001c60:	220c      	movs	r2, #12
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	e00b      	b.n	8001c7e <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 8001c66:	4b08      	ldr	r3, [pc, #32]	@ (8001c88 <alarmHourInc+0x5c>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b0a      	cmp	r3, #10
 8001c6c:	d806      	bhi.n	8001c7c <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <alarmHourInc+0x5c>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	3301      	adds	r3, #1
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <alarmHourInc+0x5c>)
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	e000      	b.n	8001c7e <alarmHourInc+0x52>
	}
	else {
		__NOP();
 8001c7c:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001c7e:	f000 f8df 	bl	8001e40 <updateRTCBackupReg>

}
 8001c82:	46c0      	nop			@ (mov r8, r8)
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	200000ac 	.word	0x200000ac

08001c8c <currHourInc>:

/*
 * Increment current time hour
 */
void currHourInc(void) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001c90:	4a1a      	ldr	r2, [pc, #104]	@ (8001cfc <currHourInc+0x70>)
 8001c92:	491b      	ldr	r1, [pc, #108]	@ (8001d00 <currHourInc+0x74>)
 8001c94:	4b1b      	ldr	r3, [pc, #108]	@ (8001d04 <currHourInc+0x78>)
 8001c96:	0018      	movs	r0, r3
 8001c98:	f7fe feda 	bl	8000a50 <getRTCTime>

	if(currTime.Hours >= 12) {
 8001c9c:	4b18      	ldr	r3, [pc, #96]	@ (8001d00 <currHourInc+0x74>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b0b      	cmp	r3, #11
 8001ca2:	d903      	bls.n	8001cac <currHourInc+0x20>
		currTime.Hours = 1;
 8001ca4:	4b16      	ldr	r3, [pc, #88]	@ (8001d00 <currHourInc+0x74>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	e01e      	b.n	8001cea <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 8001cac:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <currHourInc+0x74>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b0b      	cmp	r3, #11
 8001cb2:	d10e      	bne.n	8001cd2 <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001cb4:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <currHourInc+0x74>)
 8001cb6:	78db      	ldrb	r3, [r3, #3]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d103      	bne.n	8001cc4 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001cbc:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <currHourInc+0x74>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	70da      	strb	r2, [r3, #3]
 8001cc2:	e002      	b.n	8001cca <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <currHourInc+0x74>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 8001cca:	4b0d      	ldr	r3, [pc, #52]	@ (8001d00 <currHourInc+0x74>)
 8001ccc:	220c      	movs	r2, #12
 8001cce:	701a      	strb	r2, [r3, #0]
 8001cd0:	e00b      	b.n	8001cea <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <currHourInc+0x7c>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b0a      	cmp	r3, #10
 8001cd8:	d806      	bhi.n	8001ce8 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 8001cda:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <currHourInc+0x74>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <currHourInc+0x74>)
 8001ce4:	701a      	strb	r2, [r3, #0]
 8001ce6:	e000      	b.n	8001cea <currHourInc+0x5e>
	}
	else {
		__NOP();
 8001ce8:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001cea:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <currHourInc+0x74>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	@ (8001d00 <currHourInc+0x74>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]

}
 8001cf6:	46c0      	nop			@ (mov r8, r8)
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	200000a8 	.word	0x200000a8
 8001d00:	20000094 	.word	0x20000094
 8001d04:	20000118 	.word	0x20000118
 8001d08:	200000ac 	.word	0x200000ac

08001d0c <alarmMinuteInc>:

/*
 * Increment User alarm time minute
 */
void alarmMinuteInc(void) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 8001d10:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <alarmMinuteInc+0x38>)
 8001d12:	785b      	ldrb	r3, [r3, #1]
 8001d14:	2b3a      	cmp	r3, #58	@ 0x3a
 8001d16:	d903      	bls.n	8001d20 <alarmMinuteInc+0x14>
		/*
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		//alarmHourInc();
		userAlarmTime.Minutes = 0;
 8001d18:	4b0a      	ldr	r3, [pc, #40]	@ (8001d44 <alarmMinuteInc+0x38>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	705a      	strb	r2, [r3, #1]
 8001d1e:	e00b      	b.n	8001d38 <alarmMinuteInc+0x2c>
	}
	else if(userAlarmTime.Minutes < 59) {
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <alarmMinuteInc+0x38>)
 8001d22:	785b      	ldrb	r3, [r3, #1]
 8001d24:	2b3a      	cmp	r3, #58	@ 0x3a
 8001d26:	d806      	bhi.n	8001d36 <alarmMinuteInc+0x2a>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8001d28:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <alarmMinuteInc+0x38>)
 8001d2a:	785b      	ldrb	r3, [r3, #1]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <alarmMinuteInc+0x38>)
 8001d32:	705a      	strb	r2, [r3, #1]
 8001d34:	e000      	b.n	8001d38 <alarmMinuteInc+0x2c>
	}
	else {
		__NOP();
 8001d36:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001d38:	f000 f882 	bl	8001e40 <updateRTCBackupReg>

}
 8001d3c:	46c0      	nop			@ (mov r8, r8)
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			@ (mov r8, r8)
 8001d44:	200000ac 	.word	0x200000ac

08001d48 <currMinuteInc>:

/*
 * Increment current time minute
 */
void currMinuteInc(void) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001d4c:	4a11      	ldr	r2, [pc, #68]	@ (8001d94 <currMinuteInc+0x4c>)
 8001d4e:	4912      	ldr	r1, [pc, #72]	@ (8001d98 <currMinuteInc+0x50>)
 8001d50:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <currMinuteInc+0x54>)
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7fe fe7c 	bl	8000a50 <getRTCTime>

	if(currTime.Minutes >= 59) {
 8001d58:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <currMinuteInc+0x50>)
 8001d5a:	785b      	ldrb	r3, [r3, #1]
 8001d5c:	2b3a      	cmp	r3, #58	@ 0x3a
 8001d5e:	d903      	bls.n	8001d68 <currMinuteInc+0x20>
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		// currHourInc();

		currTime.Minutes = 0;
 8001d60:	4b0d      	ldr	r3, [pc, #52]	@ (8001d98 <currMinuteInc+0x50>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	705a      	strb	r2, [r3, #1]
 8001d66:	e00b      	b.n	8001d80 <currMinuteInc+0x38>
	}
	else if(currTime.Minutes < 59) {
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <currMinuteInc+0x50>)
 8001d6a:	785b      	ldrb	r3, [r3, #1]
 8001d6c:	2b3a      	cmp	r3, #58	@ 0x3a
 8001d6e:	d806      	bhi.n	8001d7e <currMinuteInc+0x36>
		currTime.Minutes = currTime.Minutes + 1;
 8001d70:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <currMinuteInc+0x50>)
 8001d72:	785b      	ldrb	r3, [r3, #1]
 8001d74:	3301      	adds	r3, #1
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <currMinuteInc+0x50>)
 8001d7a:	705a      	strb	r2, [r3, #1]
 8001d7c:	e000      	b.n	8001d80 <currMinuteInc+0x38>
	}
	else {
		__NOP();
 8001d7e:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001d80:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <currMinuteInc+0x50>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001d86:	4b04      	ldr	r3, [pc, #16]	@ (8001d98 <currMinuteInc+0x50>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]

}
 8001d8c:	46c0      	nop			@ (mov r8, r8)
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	46c0      	nop			@ (mov r8, r8)
 8001d94:	200000a8 	.word	0x200000a8
 8001d98:	20000094 	.word	0x20000094
 8001d9c:	20000118 	.word	0x20000118

08001da0 <dispFault>:

/*
 * Displays a non-critical fault to indicate reduced functionality
 */
void dispFault(void) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
 8001da4:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <dispFault+0x18>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2101      	movs	r1, #1
 8001daa:	2201      	movs	r2, #1
 8001dac:	0018      	movs	r0, r3
 8001dae:	f000 ff4c 	bl	8002c4a <HAL_GPIO_WritePin>
}
 8001db2:	46c0      	nop			@ (mov r8, r8)
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	2000002c 	.word	0x2000002c

08001dbc <dispFailure>:

/*
 * Displays a critical failure and ceases all operations
 */
void dispFailure(void) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e34 <dispFailure+0x78>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f003 fc2e 	bl	8005628 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001dcc:	4b19      	ldr	r3, [pc, #100]	@ (8001e34 <dispFailure+0x78>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f003 fbdd 	bl	8005590 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001dd6:	4b17      	ldr	r3, [pc, #92]	@ (8001e34 <dispFailure+0x78>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dde:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001de0:	1cfb      	adds	r3, r7, #3
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001de6:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <dispFailure+0x78>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	4a11      	ldr	r2, [pc, #68]	@ (8001e38 <dispFailure+0x7c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d9f6      	bls.n	8001de6 <dispFailure+0x2a>

			HAL_GPIO_TogglePin(alarmLEDPort, alarmLEDPin);
 8001df8:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <dispFailure+0x80>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2280      	movs	r2, #128	@ 0x80
 8001dfe:	0152      	lsls	r2, r2, #5
 8001e00:	0011      	movs	r1, r2
 8001e02:	0018      	movs	r0, r3
 8001e04:	f000 ff3e 	bl	8002c84 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001e08:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <dispFailure+0x78>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e10:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001e12:	1cfb      	adds	r3, r7, #3
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	1e5a      	subs	r2, r3, #1
 8001e18:	4193      	sbcs	r3, r2
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4053      	eors	r3, r2
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	001a      	movs	r2, r3
 8001e24:	1cfb      	adds	r3, r7, #3
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	781a      	ldrb	r2, [r3, #0]
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	400a      	ands	r2, r1
 8001e2e:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001e30:	e7d9      	b.n	8001de6 <dispFailure+0x2a>
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	20000048 	.word	0x20000048
 8001e38:	00003ffe 	.word	0x00003ffe
 8001e3c:	20000010 	.word	0x20000010

08001e40 <updateRTCBackupReg>:
}

/*
 * Updates RTC backup register with user alarm time to be later pulled from in the case of a power outage
 */
void updateRTCBackupReg(void) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8001e44:	4b0e      	ldr	r3, [pc, #56]	@ (8001e80 <updateRTCBackupReg+0x40>)
 8001e46:	6819      	ldr	r1, [r3, #0]
 8001e48:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <updateRTCBackupReg+0x44>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	001a      	movs	r2, r3
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <updateRTCBackupReg+0x48>)
 8001e50:	0018      	movs	r0, r3
 8001e52:	f003 fb0d 	bl	8005470 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 8001e56:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <updateRTCBackupReg+0x4c>)
 8001e58:	6819      	ldr	r1, [r3, #0]
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <updateRTCBackupReg+0x44>)
 8001e5c:	785b      	ldrb	r3, [r3, #1]
 8001e5e:	001a      	movs	r2, r3
 8001e60:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <updateRTCBackupReg+0x48>)
 8001e62:	0018      	movs	r0, r3
 8001e64:	f003 fb04 	bl	8005470 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 8001e68:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <updateRTCBackupReg+0x50>)
 8001e6a:	6819      	ldr	r1, [r3, #0]
 8001e6c:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <updateRTCBackupReg+0x44>)
 8001e6e:	78db      	ldrb	r3, [r3, #3]
 8001e70:	001a      	movs	r2, r3
 8001e72:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <updateRTCBackupReg+0x48>)
 8001e74:	0018      	movs	r0, r3
 8001e76:	f003 fafb 	bl	8005470 <HAL_RTCEx_BKUPWrite>

}
 8001e7a:	46c0      	nop			@ (mov r8, r8)
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	200000c0 	.word	0x200000c0
 8001e84:	200000ac 	.word	0x200000ac
 8001e88:	20000118 	.word	0x20000118
 8001e8c:	20000038 	.word	0x20000038
 8001e90:	2000003c 	.word	0x2000003c

08001e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e98:	b672      	cpsid	i
}
 8001e9a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e9c:	46c0      	nop			@ (mov r8, r8)
 8001e9e:	e7fd      	b.n	8001e9c <Error_Handler+0x8>

08001ea0 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8001ea0:	b5b0      	push	{r4, r5, r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	0005      	movs	r5, r0
 8001ea8:	000c      	movs	r4, r1
 8001eaa:	0010      	movs	r0, r2
 8001eac:	0019      	movs	r1, r3
 8001eae:	1dbb      	adds	r3, r7, #6
 8001eb0:	1c2a      	adds	r2, r5, #0
 8001eb2:	801a      	strh	r2, [r3, #0]
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	1c22      	adds	r2, r4, #0
 8001eb8:	801a      	strh	r2, [r3, #0]
 8001eba:	1cbb      	adds	r3, r7, #2
 8001ebc:	1c02      	adds	r2, r0, #0
 8001ebe:	801a      	strh	r2, [r3, #0]
 8001ec0:	003b      	movs	r3, r7
 8001ec2:	1c0a      	adds	r2, r1, #0
 8001ec4:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8001f80 <sevSeg_Init+0xe0>)
 8001ec8:	1dba      	adds	r2, r7, #6
 8001eca:	8812      	ldrh	r2, [r2, #0]
 8001ecc:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8001ece:	4b2d      	ldr	r3, [pc, #180]	@ (8001f84 <sevSeg_Init+0xe4>)
 8001ed0:	1d3a      	adds	r2, r7, #4
 8001ed2:	8812      	ldrh	r2, [r2, #0]
 8001ed4:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001ed6:	4b2c      	ldr	r3, [pc, #176]	@ (8001f88 <sevSeg_Init+0xe8>)
 8001ed8:	1cba      	adds	r2, r7, #2
 8001eda:	8812      	ldrh	r2, [r2, #0]
 8001edc:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8001ede:	4b2b      	ldr	r3, [pc, #172]	@ (8001f8c <sevSeg_Init+0xec>)
 8001ee0:	003a      	movs	r2, r7
 8001ee2:	8812      	ldrh	r2, [r2, #0]
 8001ee4:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001ee6:	4a2a      	ldr	r2, [pc, #168]	@ (8001f90 <sevSeg_Init+0xf0>)
 8001ee8:	2320      	movs	r3, #32
 8001eea:	18fb      	adds	r3, r7, r3
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8001ef0:	4a28      	ldr	r2, [pc, #160]	@ (8001f94 <sevSeg_Init+0xf4>)
 8001ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ef4:	0010      	movs	r0, r2
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	234c      	movs	r3, #76	@ 0x4c
 8001efa:	001a      	movs	r2, r3
 8001efc:	f004 fc26 	bl	800674c <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8001f00:	4b25      	ldr	r3, [pc, #148]	@ (8001f98 <sevSeg_Init+0xf8>)
 8001f02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f04:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	e00b      	b.n	8001f24 <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f12:	18d3      	adds	r3, r2, r3
 8001f14:	6819      	ldr	r1, [r3, #0]
 8001f16:	4b21      	ldr	r3, [pc, #132]	@ (8001f9c <sevSeg_Init+0xfc>)
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	0092      	lsls	r2, r2, #2
 8001f1c:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3301      	adds	r3, #1
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	ddf0      	ble.n	8001f0c <sevSeg_Init+0x6c>
	}

	sevSeg_setIntensity(50);
 8001f2a:	2032      	movs	r0, #50	@ 0x32
 8001f2c:	f000 f8ec 	bl	8002108 <sevSeg_setIntensity>
//	}
//
//	HAL_TIM_Base_Stop(htim);

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001f30:	4b1a      	ldr	r3, [pc, #104]	@ (8001f9c <sevSeg_Init+0xfc>)
 8001f32:	6918      	ldr	r0, [r3, #16]
 8001f34:	4b16      	ldr	r3, [pc, #88]	@ (8001f90 <sevSeg_Init+0xf0>)
 8001f36:	8819      	ldrh	r1, [r3, #0]
 8001f38:	4b19      	ldr	r3, [pc, #100]	@ (8001fa0 <sevSeg_Init+0x100>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	001a      	movs	r2, r3
 8001f3e:	f000 fe84 	bl	8002c4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001f42:	4b16      	ldr	r3, [pc, #88]	@ (8001f9c <sevSeg_Init+0xfc>)
 8001f44:	6918      	ldr	r0, [r3, #16]
 8001f46:	4b12      	ldr	r3, [pc, #72]	@ (8001f90 <sevSeg_Init+0xf0>)
 8001f48:	8819      	ldrh	r1, [r3, #0]
 8001f4a:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <sevSeg_Init+0x100>)
 8001f4c:	785b      	ldrb	r3, [r3, #1]
 8001f4e:	001a      	movs	r2, r3
 8001f50:	f000 fe7b 	bl	8002c4a <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001f54:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <sevSeg_Init+0xfc>)
 8001f56:	6898      	ldr	r0, [r3, #8]
 8001f58:	4b0b      	ldr	r3, [pc, #44]	@ (8001f88 <sevSeg_Init+0xe8>)
 8001f5a:	8819      	ldrh	r1, [r3, #0]
 8001f5c:	4b10      	ldr	r3, [pc, #64]	@ (8001fa0 <sevSeg_Init+0x100>)
 8001f5e:	785b      	ldrb	r3, [r3, #1]
 8001f60:	001a      	movs	r2, r3
 8001f62:	f000 fe72 	bl	8002c4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001f66:	4b0d      	ldr	r3, [pc, #52]	@ (8001f9c <sevSeg_Init+0xfc>)
 8001f68:	6898      	ldr	r0, [r3, #8]
 8001f6a:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <sevSeg_Init+0xe8>)
 8001f6c:	8819      	ldrh	r1, [r3, #0]
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <sevSeg_Init+0x100>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	001a      	movs	r2, r3
 8001f74:	f000 fe69 	bl	8002c4a <HAL_GPIO_WritePin>

}
 8001f78:	46c0      	nop			@ (mov r8, r8)
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b004      	add	sp, #16
 8001f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f80:	2000028c 	.word	0x2000028c
 8001f84:	2000028e 	.word	0x2000028e
 8001f88:	20000290 	.word	0x20000290
 8001f8c:	20000292 	.word	0x20000292
 8001f90:	20000294 	.word	0x20000294
 8001f94:	20000298 	.word	0x20000298
 8001f98:	200002e4 	.word	0x200002e4
 8001f9c:	20000050 	.word	0x20000050
 8001fa0:	20000064 	.word	0x20000064

08001fa4 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	210a      	movs	r1, #10
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f7fe f8a6 	bl	8000104 <__udivsi3>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	2408      	movs	r4, #8
 8001fbe:	193b      	adds	r3, r7, r4
 8001fc0:	701a      	strb	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	210a      	movs	r1, #10
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f7fe f921 	bl	8000210 <__aeabi_uidivmod>
 8001fce:	000b      	movs	r3, r1
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	193b      	adds	r3, r7, r4
 8001fd4:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001fda:	210a      	movs	r1, #10
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f7fe f891 	bl	8000104 <__udivsi3>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	193b      	adds	r3, r7, r4
 8001fe8:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001fee:	210a      	movs	r1, #10
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f7fe f90d 	bl	8000210 <__aeabi_uidivmod>
 8001ff6:	000b      	movs	r3, r1
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	193b      	adds	r3, r7, r4
 8001ffc:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 8001ffe:	2116      	movs	r1, #22
 8002000:	187b      	adds	r3, r7, r1
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	78db      	ldrb	r3, [r3, #3]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d102      	bne.n	8002014 <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 800200e:	187b      	adds	r3, r7, r1
 8002010:	2202      	movs	r2, #2
 8002012:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 8002014:	2300      	movs	r3, #0
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	e04f      	b.n	80020ba <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 800201a:	2308      	movs	r3, #8
 800201c:	18fa      	adds	r2, r7, r3
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	18d3      	adds	r3, r2, r3
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	0019      	movs	r1, r3
 8002026:	2417      	movs	r4, #23
 8002028:	193b      	adds	r3, r7, r4
 800202a:	4a30      	ldr	r2, [pc, #192]	@ (80020ec <sevSeg_updateDigits+0x148>)
 800202c:	5c52      	ldrb	r2, [r2, r1]
 800202e:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d110      	bne.n	8002058 <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	210a      	movs	r1, #10
 800203c:	0018      	movs	r0, r3
 800203e:	f7fe f861 	bl	8000104 <__udivsi3>
 8002042:	0003      	movs	r3, r0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	001a      	movs	r2, r3
 8002048:	2316      	movs	r3, #22
 800204a:	18fb      	adds	r3, r7, r3
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	18d2      	adds	r2, r2, r3
 8002050:	193b      	adds	r3, r7, r4
 8002052:	4927      	ldr	r1, [pc, #156]	@ (80020f0 <sevSeg_updateDigits+0x14c>)
 8002054:	5c8a      	ldrb	r2, [r1, r2]
 8002056:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	e027      	b.n	80020ae <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 800205e:	4b25      	ldr	r3, [pc, #148]	@ (80020f4 <sevSeg_updateDigits+0x150>)
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	4b25      	ldr	r3, [pc, #148]	@ (80020f8 <sevSeg_updateDigits+0x154>)
 8002064:	8819      	ldrh	r1, [r3, #0]
 8002066:	2417      	movs	r4, #23
 8002068:	193b      	adds	r3, r7, r4
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2201      	movs	r2, #1
 800206e:	4013      	ands	r3, r2
 8002070:	4a22      	ldr	r2, [pc, #136]	@ (80020fc <sevSeg_updateDigits+0x158>)
 8002072:	5cd3      	ldrb	r3, [r2, r3]
 8002074:	001a      	movs	r2, r3
 8002076:	f000 fde8 	bl	8002c4a <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 800207a:	4b1e      	ldr	r3, [pc, #120]	@ (80020f4 <sevSeg_updateDigits+0x150>)
 800207c:	6858      	ldr	r0, [r3, #4]
 800207e:	4b20      	ldr	r3, [pc, #128]	@ (8002100 <sevSeg_updateDigits+0x15c>)
 8002080:	8819      	ldrh	r1, [r3, #0]
 8002082:	4b1e      	ldr	r3, [pc, #120]	@ (80020fc <sevSeg_updateDigits+0x158>)
 8002084:	785b      	ldrb	r3, [r3, #1]
 8002086:	001a      	movs	r2, r3
 8002088:	f000 fddf 	bl	8002c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 800208c:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <sevSeg_updateDigits+0x150>)
 800208e:	6858      	ldr	r0, [r3, #4]
 8002090:	4b1b      	ldr	r3, [pc, #108]	@ (8002100 <sevSeg_updateDigits+0x15c>)
 8002092:	8819      	ldrh	r1, [r3, #0]
 8002094:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <sevSeg_updateDigits+0x158>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	001a      	movs	r2, r3
 800209a:	f000 fdd6 	bl	8002c4a <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 800209e:	193b      	adds	r3, r7, r4
 80020a0:	193a      	adds	r2, r7, r4
 80020a2:	7812      	ldrb	r2, [r2, #0]
 80020a4:	0852      	lsrs	r2, r2, #1
 80020a6:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3301      	adds	r3, #1
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b07      	cmp	r3, #7
 80020b2:	ddd4      	ble.n	800205e <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	3301      	adds	r3, #1
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	ddac      	ble.n	800201a <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80020c0:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <sevSeg_updateDigits+0x150>)
 80020c2:	6898      	ldr	r0, [r3, #8]
 80020c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002104 <sevSeg_updateDigits+0x160>)
 80020c6:	8819      	ldrh	r1, [r3, #0]
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <sevSeg_updateDigits+0x158>)
 80020ca:	785b      	ldrb	r3, [r3, #1]
 80020cc:	001a      	movs	r2, r3
 80020ce:	f000 fdbc 	bl	8002c4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80020d2:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <sevSeg_updateDigits+0x150>)
 80020d4:	6898      	ldr	r0, [r3, #8]
 80020d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002104 <sevSeg_updateDigits+0x160>)
 80020d8:	8819      	ldrh	r1, [r3, #0]
 80020da:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <sevSeg_updateDigits+0x158>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	001a      	movs	r2, r3
 80020e0:	f000 fdb3 	bl	8002c4a <HAL_GPIO_WritePin>

	return;
 80020e4:	46c0      	nop			@ (mov r8, r8)

}
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b007      	add	sp, #28
 80020ea:	bd90      	pop	{r4, r7, pc}
 80020ec:	080067a0 	.word	0x080067a0
 80020f0:	080067ac 	.word	0x080067ac
 80020f4:	20000050 	.word	0x20000050
 80020f8:	2000028c 	.word	0x2000028c
 80020fc:	20000064 	.word	0x20000064
 8002100:	2000028e 	.word	0x2000028e
 8002104:	20000290 	.word	0x20000290

08002108 <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	0002      	movs	r2, r0
 8002110:	1dbb      	adds	r3, r7, #6
 8002112:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 8002114:	4b20      	ldr	r3, [pc, #128]	@ (8002198 <sevSeg_setIntensity+0x90>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d105      	bne.n	8002128 <sevSeg_setIntensity+0x20>
 800211c:	4b1f      	ldr	r3, [pc, #124]	@ (800219c <sevSeg_setIntensity+0x94>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	1dba      	adds	r2, r7, #6
 8002122:	8812      	ldrh	r2, [r2, #0]
 8002124:	635a      	str	r2, [r3, #52]	@ 0x34
 8002126:	e02c      	b.n	8002182 <sevSeg_setIntensity+0x7a>
 8002128:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <sevSeg_setIntensity+0x90>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b04      	cmp	r3, #4
 800212e:	d105      	bne.n	800213c <sevSeg_setIntensity+0x34>
 8002130:	4b1a      	ldr	r3, [pc, #104]	@ (800219c <sevSeg_setIntensity+0x94>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	1dbb      	adds	r3, r7, #6
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	6393      	str	r3, [r2, #56]	@ 0x38
 800213a:	e022      	b.n	8002182 <sevSeg_setIntensity+0x7a>
 800213c:	4b16      	ldr	r3, [pc, #88]	@ (8002198 <sevSeg_setIntensity+0x90>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b08      	cmp	r3, #8
 8002142:	d105      	bne.n	8002150 <sevSeg_setIntensity+0x48>
 8002144:	4b15      	ldr	r3, [pc, #84]	@ (800219c <sevSeg_setIntensity+0x94>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	1dbb      	adds	r3, r7, #6
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800214e:	e018      	b.n	8002182 <sevSeg_setIntensity+0x7a>
 8002150:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <sevSeg_setIntensity+0x90>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b0c      	cmp	r3, #12
 8002156:	d105      	bne.n	8002164 <sevSeg_setIntensity+0x5c>
 8002158:	4b10      	ldr	r3, [pc, #64]	@ (800219c <sevSeg_setIntensity+0x94>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	1dbb      	adds	r3, r7, #6
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	6413      	str	r3, [r2, #64]	@ 0x40
 8002162:	e00e      	b.n	8002182 <sevSeg_setIntensity+0x7a>
 8002164:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <sevSeg_setIntensity+0x90>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b10      	cmp	r3, #16
 800216a:	d105      	bne.n	8002178 <sevSeg_setIntensity+0x70>
 800216c:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <sevSeg_setIntensity+0x94>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	1dbb      	adds	r3, r7, #6
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	6593      	str	r3, [r2, #88]	@ 0x58
 8002176:	e004      	b.n	8002182 <sevSeg_setIntensity+0x7a>
 8002178:	4b08      	ldr	r3, [pc, #32]	@ (800219c <sevSeg_setIntensity+0x94>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	1dbb      	adds	r3, r7, #6
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 8002182:	4b05      	ldr	r3, [pc, #20]	@ (8002198 <sevSeg_setIntensity+0x90>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4b05      	ldr	r3, [pc, #20]	@ (800219c <sevSeg_setIntensity+0x94>)
 8002188:	0011      	movs	r1, r2
 800218a:	0018      	movs	r0, r3
 800218c:	f003 fb4c 	bl	8005828 <HAL_TIM_PWM_Start>

}
 8002190:	46c0      	nop			@ (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b002      	add	sp, #8
 8002196:	bd80      	pop	{r7, pc}
 8002198:	200002e4 	.word	0x200002e4
 800219c:	20000298 	.word	0x20000298

080021a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a6:	4b13      	ldr	r3, [pc, #76]	@ (80021f4 <HAL_MspInit+0x54>)
 80021a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021aa:	4b12      	ldr	r3, [pc, #72]	@ (80021f4 <HAL_MspInit+0x54>)
 80021ac:	2101      	movs	r1, #1
 80021ae:	430a      	orrs	r2, r1
 80021b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80021b2:	4b10      	ldr	r3, [pc, #64]	@ (80021f4 <HAL_MspInit+0x54>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	2201      	movs	r2, #1
 80021b8:	4013      	ands	r3, r2
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <HAL_MspInit+0x54>)
 80021c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021c2:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <HAL_MspInit+0x54>)
 80021c4:	2180      	movs	r1, #128	@ 0x80
 80021c6:	0549      	lsls	r1, r1, #21
 80021c8:	430a      	orrs	r2, r1
 80021ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021cc:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <HAL_MspInit+0x54>)
 80021ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021d0:	2380      	movs	r3, #128	@ 0x80
 80021d2:	055b      	lsls	r3, r3, #21
 80021d4:	4013      	ands	r3, r2
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	2004      	movs	r0, #4
 80021e0:	f000 fb80 	bl	80028e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80021e4:	2004      	movs	r0, #4
 80021e6:	f000 fb92 	bl	800290e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ea:	46c0      	nop			@ (mov r8, r8)
 80021ec:	46bd      	mov	sp, r7
 80021ee:	b002      	add	sp, #8
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	46c0      	nop			@ (mov r8, r8)
 80021f4:	40021000 	.word	0x40021000

080021f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b095      	sub	sp, #84	@ 0x54
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	233c      	movs	r3, #60	@ 0x3c
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	0018      	movs	r0, r3
 8002206:	2314      	movs	r3, #20
 8002208:	001a      	movs	r2, r3
 800220a:	2100      	movs	r1, #0
 800220c:	f004 fa72 	bl	80066f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002210:	2414      	movs	r4, #20
 8002212:	193b      	adds	r3, r7, r4
 8002214:	0018      	movs	r0, r3
 8002216:	2328      	movs	r3, #40	@ 0x28
 8002218:	001a      	movs	r2, r3
 800221a:	2100      	movs	r1, #0
 800221c:	f004 fa6a 	bl	80066f4 <memset>
  if(hi2c->Instance==I2C1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a22      	ldr	r2, [pc, #136]	@ (80022b0 <HAL_I2C_MspInit+0xb8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d13d      	bne.n	80022a6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800222a:	193b      	adds	r3, r7, r4
 800222c:	2220      	movs	r2, #32
 800222e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002230:	193b      	adds	r3, r7, r4
 8002232:	2200      	movs	r2, #0
 8002234:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002236:	193b      	adds	r3, r7, r4
 8002238:	0018      	movs	r0, r3
 800223a:	f002 f8b9 	bl	80043b0 <HAL_RCCEx_PeriphCLKConfig>
 800223e:	1e03      	subs	r3, r0, #0
 8002240:	d001      	beq.n	8002246 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002242:	f7ff fe27 	bl	8001e94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002246:	4b1b      	ldr	r3, [pc, #108]	@ (80022b4 <HAL_I2C_MspInit+0xbc>)
 8002248:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800224a:	4b1a      	ldr	r3, [pc, #104]	@ (80022b4 <HAL_I2C_MspInit+0xbc>)
 800224c:	2102      	movs	r1, #2
 800224e:	430a      	orrs	r2, r1
 8002250:	635a      	str	r2, [r3, #52]	@ 0x34
 8002252:	4b18      	ldr	r3, [pc, #96]	@ (80022b4 <HAL_I2C_MspInit+0xbc>)
 8002254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002256:	2202      	movs	r2, #2
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800225e:	213c      	movs	r1, #60	@ 0x3c
 8002260:	187b      	adds	r3, r7, r1
 8002262:	22c0      	movs	r2, #192	@ 0xc0
 8002264:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002266:	187b      	adds	r3, r7, r1
 8002268:	2212      	movs	r2, #18
 800226a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	187b      	adds	r3, r7, r1
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	187b      	adds	r3, r7, r1
 8002274:	2200      	movs	r2, #0
 8002276:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002278:	187b      	adds	r3, r7, r1
 800227a:	2206      	movs	r2, #6
 800227c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227e:	187b      	adds	r3, r7, r1
 8002280:	4a0d      	ldr	r2, [pc, #52]	@ (80022b8 <HAL_I2C_MspInit+0xc0>)
 8002282:	0019      	movs	r1, r3
 8002284:	0010      	movs	r0, r2
 8002286:	f000 fb5f 	bl	8002948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800228a:	4b0a      	ldr	r3, [pc, #40]	@ (80022b4 <HAL_I2C_MspInit+0xbc>)
 800228c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800228e:	4b09      	ldr	r3, [pc, #36]	@ (80022b4 <HAL_I2C_MspInit+0xbc>)
 8002290:	2180      	movs	r1, #128	@ 0x80
 8002292:	0389      	lsls	r1, r1, #14
 8002294:	430a      	orrs	r2, r1
 8002296:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002298:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <HAL_I2C_MspInit+0xbc>)
 800229a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800229c:	2380      	movs	r3, #128	@ 0x80
 800229e:	039b      	lsls	r3, r3, #14
 80022a0:	4013      	ands	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022a6:	46c0      	nop			@ (mov r8, r8)
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b015      	add	sp, #84	@ 0x54
 80022ac:	bd90      	pop	{r4, r7, pc}
 80022ae:	46c0      	nop			@ (mov r8, r8)
 80022b0:	40005400 	.word	0x40005400
 80022b4:	40021000 	.word	0x40021000
 80022b8:	50000400 	.word	0x50000400

080022bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b08f      	sub	sp, #60	@ 0x3c
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022c4:	2410      	movs	r4, #16
 80022c6:	193b      	adds	r3, r7, r4
 80022c8:	0018      	movs	r0, r3
 80022ca:	2328      	movs	r3, #40	@ 0x28
 80022cc:	001a      	movs	r2, r3
 80022ce:	2100      	movs	r1, #0
 80022d0:	f004 fa10 	bl	80066f4 <memset>
  if(hrtc->Instance==RTC)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a19      	ldr	r2, [pc, #100]	@ (8002340 <HAL_RTC_MspInit+0x84>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d12c      	bne.n	8002338 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022de:	193b      	adds	r3, r7, r4
 80022e0:	2280      	movs	r2, #128	@ 0x80
 80022e2:	0292      	lsls	r2, r2, #10
 80022e4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80022e6:	193b      	adds	r3, r7, r4
 80022e8:	2280      	movs	r2, #128	@ 0x80
 80022ea:	0052      	lsls	r2, r2, #1
 80022ec:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ee:	193b      	adds	r3, r7, r4
 80022f0:	0018      	movs	r0, r3
 80022f2:	f002 f85d 	bl	80043b0 <HAL_RCCEx_PeriphCLKConfig>
 80022f6:	1e03      	subs	r3, r0, #0
 80022f8:	d001      	beq.n	80022fe <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80022fa:	f7ff fdcb 	bl	8001e94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022fe:	4b11      	ldr	r3, [pc, #68]	@ (8002344 <HAL_RTC_MspInit+0x88>)
 8002300:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002302:	4b10      	ldr	r3, [pc, #64]	@ (8002344 <HAL_RTC_MspInit+0x88>)
 8002304:	2180      	movs	r1, #128	@ 0x80
 8002306:	0209      	lsls	r1, r1, #8
 8002308:	430a      	orrs	r2, r1
 800230a:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800230c:	4b0d      	ldr	r3, [pc, #52]	@ (8002344 <HAL_RTC_MspInit+0x88>)
 800230e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002310:	4b0c      	ldr	r3, [pc, #48]	@ (8002344 <HAL_RTC_MspInit+0x88>)
 8002312:	2180      	movs	r1, #128	@ 0x80
 8002314:	00c9      	lsls	r1, r1, #3
 8002316:	430a      	orrs	r2, r1
 8002318:	63da      	str	r2, [r3, #60]	@ 0x3c
 800231a:	4b0a      	ldr	r3, [pc, #40]	@ (8002344 <HAL_RTC_MspInit+0x88>)
 800231c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800231e:	2380      	movs	r3, #128	@ 0x80
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4013      	ands	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8002328:	2200      	movs	r2, #0
 800232a:	2100      	movs	r1, #0
 800232c:	2002      	movs	r0, #2
 800232e:	f000 fad9 	bl	80028e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8002332:	2002      	movs	r0, #2
 8002334:	f000 faeb 	bl	800290e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002338:	46c0      	nop			@ (mov r8, r8)
 800233a:	46bd      	mov	sp, r7
 800233c:	b00f      	add	sp, #60	@ 0x3c
 800233e:	bd90      	pop	{r4, r7, pc}
 8002340:	40002800 	.word	0x40002800
 8002344:	40021000 	.word	0x40021000

08002348 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b08f      	sub	sp, #60	@ 0x3c
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002350:	2410      	movs	r4, #16
 8002352:	193b      	adds	r3, r7, r4
 8002354:	0018      	movs	r0, r3
 8002356:	2328      	movs	r3, #40	@ 0x28
 8002358:	001a      	movs	r2, r3
 800235a:	2100      	movs	r1, #0
 800235c:	f004 f9ca 	bl	80066f4 <memset>
  if(htim_pwm->Instance==TIM1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a1b      	ldr	r2, [pc, #108]	@ (80023d4 <HAL_TIM_PWM_MspInit+0x8c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d11d      	bne.n	80023a6 <HAL_TIM_PWM_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800236a:	193b      	adds	r3, r7, r4
 800236c:	2280      	movs	r2, #128	@ 0x80
 800236e:	0392      	lsls	r2, r2, #14
 8002370:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8002372:	193b      	adds	r3, r7, r4
 8002374:	2200      	movs	r2, #0
 8002376:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002378:	193b      	adds	r3, r7, r4
 800237a:	0018      	movs	r0, r3
 800237c:	f002 f818 	bl	80043b0 <HAL_RCCEx_PeriphCLKConfig>
 8002380:	1e03      	subs	r3, r0, #0
 8002382:	d001      	beq.n	8002388 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8002384:	f7ff fd86 	bl	8001e94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002388:	4b13      	ldr	r3, [pc, #76]	@ (80023d8 <HAL_TIM_PWM_MspInit+0x90>)
 800238a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800238c:	4b12      	ldr	r3, [pc, #72]	@ (80023d8 <HAL_TIM_PWM_MspInit+0x90>)
 800238e:	2180      	movs	r1, #128	@ 0x80
 8002390:	0109      	lsls	r1, r1, #4
 8002392:	430a      	orrs	r2, r1
 8002394:	641a      	str	r2, [r3, #64]	@ 0x40
 8002396:	4b10      	ldr	r3, [pc, #64]	@ (80023d8 <HAL_TIM_PWM_MspInit+0x90>)
 8002398:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800239a:	2380      	movs	r3, #128	@ 0x80
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	4013      	ands	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80023a4:	e011      	b.n	80023ca <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM2)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	2380      	movs	r3, #128	@ 0x80
 80023ac:	05db      	lsls	r3, r3, #23
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d10b      	bne.n	80023ca <HAL_TIM_PWM_MspInit+0x82>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023b2:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <HAL_TIM_PWM_MspInit+0x90>)
 80023b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023b6:	4b08      	ldr	r3, [pc, #32]	@ (80023d8 <HAL_TIM_PWM_MspInit+0x90>)
 80023b8:	2101      	movs	r1, #1
 80023ba:	430a      	orrs	r2, r1
 80023bc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_TIM_PWM_MspInit+0x90>)
 80023c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c2:	2201      	movs	r2, #1
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
}
 80023ca:	46c0      	nop			@ (mov r8, r8)
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b00f      	add	sp, #60	@ 0x3c
 80023d0:	bd90      	pop	{r4, r7, pc}
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	40012c00 	.word	0x40012c00
 80023d8:	40021000 	.word	0x40021000

080023dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a18      	ldr	r2, [pc, #96]	@ (800244c <HAL_TIM_Base_MspInit+0x70>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d10e      	bne.n	800240c <HAL_TIM_Base_MspInit+0x30>
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80023ee:	4b18      	ldr	r3, [pc, #96]	@ (8002450 <HAL_TIM_Base_MspInit+0x74>)
 80023f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023f2:	4b17      	ldr	r3, [pc, #92]	@ (8002450 <HAL_TIM_Base_MspInit+0x74>)
 80023f4:	2180      	movs	r1, #128	@ 0x80
 80023f6:	0209      	lsls	r1, r1, #8
 80023f8:	430a      	orrs	r2, r1
 80023fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80023fc:	4b14      	ldr	r3, [pc, #80]	@ (8002450 <HAL_TIM_Base_MspInit+0x74>)
 80023fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002400:	2380      	movs	r3, #128	@ 0x80
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	4013      	ands	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800240a:	e01a      	b.n	8002442 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a10      	ldr	r2, [pc, #64]	@ (8002454 <HAL_TIM_Base_MspInit+0x78>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d115      	bne.n	8002442 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002416:	4b0e      	ldr	r3, [pc, #56]	@ (8002450 <HAL_TIM_Base_MspInit+0x74>)
 8002418:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800241a:	4b0d      	ldr	r3, [pc, #52]	@ (8002450 <HAL_TIM_Base_MspInit+0x74>)
 800241c:	2180      	movs	r1, #128	@ 0x80
 800241e:	0289      	lsls	r1, r1, #10
 8002420:	430a      	orrs	r2, r1
 8002422:	641a      	str	r2, [r3, #64]	@ 0x40
 8002424:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <HAL_TIM_Base_MspInit+0x74>)
 8002426:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002428:	2380      	movs	r3, #128	@ 0x80
 800242a:	029b      	lsls	r3, r3, #10
 800242c:	4013      	ands	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	2100      	movs	r1, #0
 8002436:	2015      	movs	r0, #21
 8002438:	f000 fa54 	bl	80028e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800243c:	2015      	movs	r0, #21
 800243e:	f000 fa66 	bl	800290e <HAL_NVIC_EnableIRQ>
}
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	46bd      	mov	sp, r7
 8002446:	b004      	add	sp, #16
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			@ (mov r8, r8)
 800244c:	40002000 	.word	0x40002000
 8002450:	40021000 	.word	0x40021000
 8002454:	40014400 	.word	0x40014400

08002458 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002458:	b590      	push	{r4, r7, lr}
 800245a:	b08b      	sub	sp, #44	@ 0x2c
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	2414      	movs	r4, #20
 8002462:	193b      	adds	r3, r7, r4
 8002464:	0018      	movs	r0, r3
 8002466:	2314      	movs	r3, #20
 8002468:	001a      	movs	r2, r3
 800246a:	2100      	movs	r1, #0
 800246c:	f004 f942 	bl	80066f4 <memset>
  if(htim->Instance==TIM1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a29      	ldr	r2, [pc, #164]	@ (800251c <HAL_TIM_MspPostInit+0xc4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d124      	bne.n	80024c4 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247a:	4b29      	ldr	r3, [pc, #164]	@ (8002520 <HAL_TIM_MspPostInit+0xc8>)
 800247c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800247e:	4b28      	ldr	r3, [pc, #160]	@ (8002520 <HAL_TIM_MspPostInit+0xc8>)
 8002480:	2101      	movs	r1, #1
 8002482:	430a      	orrs	r2, r1
 8002484:	635a      	str	r2, [r3, #52]	@ 0x34
 8002486:	4b26      	ldr	r3, [pc, #152]	@ (8002520 <HAL_TIM_MspPostInit+0xc8>)
 8002488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800248a:	2201      	movs	r2, #1
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002492:	193b      	adds	r3, r7, r4
 8002494:	2280      	movs	r2, #128	@ 0x80
 8002496:	0052      	lsls	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	0021      	movs	r1, r4
 800249c:	187b      	adds	r3, r7, r1
 800249e:	2202      	movs	r2, #2
 80024a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	187b      	adds	r3, r7, r1
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a8:	187b      	adds	r3, r7, r1
 80024aa:	2200      	movs	r2, #0
 80024ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80024ae:	187b      	adds	r3, r7, r1
 80024b0:	2202      	movs	r2, #2
 80024b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b4:	187a      	adds	r2, r7, r1
 80024b6:	23a0      	movs	r3, #160	@ 0xa0
 80024b8:	05db      	lsls	r3, r3, #23
 80024ba:	0011      	movs	r1, r2
 80024bc:	0018      	movs	r0, r3
 80024be:	f000 fa43 	bl	8002948 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024c2:	e027      	b.n	8002514 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	2380      	movs	r3, #128	@ 0x80
 80024ca:	05db      	lsls	r3, r3, #23
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d121      	bne.n	8002514 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d0:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <HAL_TIM_MspPostInit+0xc8>)
 80024d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024d4:	4b12      	ldr	r3, [pc, #72]	@ (8002520 <HAL_TIM_MspPostInit+0xc8>)
 80024d6:	2104      	movs	r1, #4
 80024d8:	430a      	orrs	r2, r1
 80024da:	635a      	str	r2, [r3, #52]	@ 0x34
 80024dc:	4b10      	ldr	r3, [pc, #64]	@ (8002520 <HAL_TIM_MspPostInit+0xc8>)
 80024de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e0:	2204      	movs	r2, #4
 80024e2:	4013      	ands	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 80024e8:	2114      	movs	r1, #20
 80024ea:	187b      	adds	r3, r7, r1
 80024ec:	2240      	movs	r2, #64	@ 0x40
 80024ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	187b      	adds	r3, r7, r1
 80024f2:	2202      	movs	r2, #2
 80024f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	2200      	movs	r2, #0
 8002500:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002502:	187b      	adds	r3, r7, r1
 8002504:	2202      	movs	r2, #2
 8002506:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 8002508:	187b      	adds	r3, r7, r1
 800250a:	4a06      	ldr	r2, [pc, #24]	@ (8002524 <HAL_TIM_MspPostInit+0xcc>)
 800250c:	0019      	movs	r1, r3
 800250e:	0010      	movs	r0, r2
 8002510:	f000 fa1a 	bl	8002948 <HAL_GPIO_Init>
}
 8002514:	46c0      	nop			@ (mov r8, r8)
 8002516:	46bd      	mov	sp, r7
 8002518:	b00b      	add	sp, #44	@ 0x2c
 800251a:	bd90      	pop	{r4, r7, pc}
 800251c:	40012c00 	.word	0x40012c00
 8002520:	40021000 	.word	0x40021000
 8002524:	50000800 	.word	0x50000800

08002528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800252c:	46c0      	nop			@ (mov r8, r8)
 800252e:	e7fd      	b.n	800252c <NMI_Handler+0x4>

08002530 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002534:	46c0      	nop			@ (mov r8, r8)
 8002536:	e7fd      	b.n	8002534 <HardFault_Handler+0x4>

08002538 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800253c:	46c0      	nop			@ (mov r8, r8)
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002550:	f000 f8dc 	bl	800270c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002554:	46c0      	nop			@ (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002560:	4b03      	ldr	r3, [pc, #12]	@ (8002570 <RTC_TAMP_IRQHandler+0x14>)
 8002562:	0018      	movs	r0, r3
 8002564:	f002 fda2 	bl	80050ac <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8002568:	46c0      	nop			@ (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	20000118 	.word	0x20000118

08002574 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002578:	46c0      	nop			@ (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 8002582:	2001      	movs	r0, #1
 8002584:	f000 fb9a 	bl	8002cbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 8002588:	2002      	movs	r0, #2
 800258a:	f000 fb97 	bl	8002cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800258e:	46c0      	nop			@ (mov r8, r8)
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 8002598:	2004      	movs	r0, #4
 800259a:	f000 fb8f 	bl	8002cbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 800259e:	2008      	movs	r0, #8
 80025a0:	f000 fb8c 	bl	8002cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80025a4:	46c0      	nop			@ (mov r8, r8)
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 80025ae:	2380      	movs	r3, #128	@ 0x80
 80025b0:	021b      	lsls	r3, r3, #8
 80025b2:	0018      	movs	r0, r3
 80025b4:	f000 fb82 	bl	8002cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80025b8:	46c0      	nop			@ (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80025c4:	4b03      	ldr	r3, [pc, #12]	@ (80025d4 <TIM16_IRQHandler+0x14>)
 80025c6:	0018      	movs	r0, r3
 80025c8:	f003 fa0c 	bl	80059e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80025cc:	46c0      	nop			@ (mov r8, r8)
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	46c0      	nop			@ (mov r8, r8)
 80025d4:	20000228 	.word	0x20000228

080025d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025dc:	46c0      	nop			@ (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025e4:	480d      	ldr	r0, [pc, #52]	@ (800261c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025e8:	f7ff fff6 	bl	80025d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025ec:	480c      	ldr	r0, [pc, #48]	@ (8002620 <LoopForever+0x6>)
  ldr r1, =_edata
 80025ee:	490d      	ldr	r1, [pc, #52]	@ (8002624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002628 <LoopForever+0xe>)
  movs r3, #0
 80025f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f4:	e002      	b.n	80025fc <LoopCopyDataInit>

080025f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fa:	3304      	adds	r3, #4

080025fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002600:	d3f9      	bcc.n	80025f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002602:	4a0a      	ldr	r2, [pc, #40]	@ (800262c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002604:	4c0a      	ldr	r4, [pc, #40]	@ (8002630 <LoopForever+0x16>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002608:	e001      	b.n	800260e <LoopFillZerobss>

0800260a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800260c:	3204      	adds	r2, #4

0800260e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800260e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002610:	d3fb      	bcc.n	800260a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002612:	f004 f877 	bl	8006704 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002616:	f7fe fa31 	bl	8000a7c <main>

0800261a <LoopForever>:

LoopForever:
  b LoopForever
 800261a:	e7fe      	b.n	800261a <LoopForever>
  ldr   r0, =_estack
 800261c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002624:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002628:	0800684c 	.word	0x0800684c
  ldr r2, =_sbss
 800262c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002630:	200002ec 	.word	0x200002ec

08002634 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002634:	e7fe      	b.n	8002634 <ADC1_IRQHandler>
	...

08002638 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800263e:	1dfb      	adds	r3, r7, #7
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002644:	4b0b      	ldr	r3, [pc, #44]	@ (8002674 <HAL_Init+0x3c>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b0a      	ldr	r3, [pc, #40]	@ (8002674 <HAL_Init+0x3c>)
 800264a:	2180      	movs	r1, #128	@ 0x80
 800264c:	0049      	lsls	r1, r1, #1
 800264e:	430a      	orrs	r2, r1
 8002650:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002652:	2003      	movs	r0, #3
 8002654:	f000 f810 	bl	8002678 <HAL_InitTick>
 8002658:	1e03      	subs	r3, r0, #0
 800265a:	d003      	beq.n	8002664 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800265c:	1dfb      	adds	r3, r7, #7
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
 8002662:	e001      	b.n	8002668 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002664:	f7ff fd9c 	bl	80021a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002668:	1dfb      	adds	r3, r7, #7
 800266a:	781b      	ldrb	r3, [r3, #0]
}
 800266c:	0018      	movs	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	b002      	add	sp, #8
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40022000 	.word	0x40022000

08002678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002680:	230f      	movs	r3, #15
 8002682:	18fb      	adds	r3, r7, r3
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002688:	4b1d      	ldr	r3, [pc, #116]	@ (8002700 <HAL_InitTick+0x88>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d02b      	beq.n	80026e8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002690:	4b1c      	ldr	r3, [pc, #112]	@ (8002704 <HAL_InitTick+0x8c>)
 8002692:	681c      	ldr	r4, [r3, #0]
 8002694:	4b1a      	ldr	r3, [pc, #104]	@ (8002700 <HAL_InitTick+0x88>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	0019      	movs	r1, r3
 800269a:	23fa      	movs	r3, #250	@ 0xfa
 800269c:	0098      	lsls	r0, r3, #2
 800269e:	f7fd fd31 	bl	8000104 <__udivsi3>
 80026a2:	0003      	movs	r3, r0
 80026a4:	0019      	movs	r1, r3
 80026a6:	0020      	movs	r0, r4
 80026a8:	f7fd fd2c 	bl	8000104 <__udivsi3>
 80026ac:	0003      	movs	r3, r0
 80026ae:	0018      	movs	r0, r3
 80026b0:	f000 f93d 	bl	800292e <HAL_SYSTICK_Config>
 80026b4:	1e03      	subs	r3, r0, #0
 80026b6:	d112      	bne.n	80026de <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d80a      	bhi.n	80026d4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	2301      	movs	r3, #1
 80026c2:	425b      	negs	r3, r3
 80026c4:	2200      	movs	r2, #0
 80026c6:	0018      	movs	r0, r3
 80026c8:	f000 f90c 	bl	80028e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002708 <HAL_InitTick+0x90>)
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	e00d      	b.n	80026f0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80026d4:	230f      	movs	r3, #15
 80026d6:	18fb      	adds	r3, r7, r3
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
 80026dc:	e008      	b.n	80026f0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026de:	230f      	movs	r3, #15
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	2201      	movs	r2, #1
 80026e4:	701a      	strb	r2, [r3, #0]
 80026e6:	e003      	b.n	80026f0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026e8:	230f      	movs	r3, #15
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80026f0:	230f      	movs	r3, #15
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	781b      	ldrb	r3, [r3, #0]
}
 80026f6:	0018      	movs	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b005      	add	sp, #20
 80026fc:	bd90      	pop	{r4, r7, pc}
 80026fe:	46c0      	nop			@ (mov r8, r8)
 8002700:	20000070 	.word	0x20000070
 8002704:	20000068 	.word	0x20000068
 8002708:	2000006c 	.word	0x2000006c

0800270c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002710:	4b05      	ldr	r3, [pc, #20]	@ (8002728 <HAL_IncTick+0x1c>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	001a      	movs	r2, r3
 8002716:	4b05      	ldr	r3, [pc, #20]	@ (800272c <HAL_IncTick+0x20>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	18d2      	adds	r2, r2, r3
 800271c:	4b03      	ldr	r3, [pc, #12]	@ (800272c <HAL_IncTick+0x20>)
 800271e:	601a      	str	r2, [r3, #0]
}
 8002720:	46c0      	nop			@ (mov r8, r8)
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	46c0      	nop			@ (mov r8, r8)
 8002728:	20000070 	.word	0x20000070
 800272c:	200002e8 	.word	0x200002e8

08002730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  return uwTick;
 8002734:	4b02      	ldr	r3, [pc, #8]	@ (8002740 <HAL_GetTick+0x10>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	0018      	movs	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			@ (mov r8, r8)
 8002740:	200002e8 	.word	0x200002e8

08002744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800274c:	f7ff fff0 	bl	8002730 <HAL_GetTick>
 8002750:	0003      	movs	r3, r0
 8002752:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	3301      	adds	r3, #1
 800275c:	d005      	beq.n	800276a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800275e:	4b0a      	ldr	r3, [pc, #40]	@ (8002788 <HAL_Delay+0x44>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	001a      	movs	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	189b      	adds	r3, r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	f7ff ffe0 	bl	8002730 <HAL_GetTick>
 8002770:	0002      	movs	r2, r0
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	429a      	cmp	r2, r3
 800277a:	d8f7      	bhi.n	800276c <HAL_Delay+0x28>
  {
  }
}
 800277c:	46c0      	nop			@ (mov r8, r8)
 800277e:	46c0      	nop			@ (mov r8, r8)
 8002780:	46bd      	mov	sp, r7
 8002782:	b004      	add	sp, #16
 8002784:	bd80      	pop	{r7, pc}
 8002786:	46c0      	nop			@ (mov r8, r8)
 8002788:	20000070 	.word	0x20000070

0800278c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	0002      	movs	r2, r0
 8002794:	1dfb      	adds	r3, r7, #7
 8002796:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002798:	1dfb      	adds	r3, r7, #7
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b7f      	cmp	r3, #127	@ 0x7f
 800279e:	d809      	bhi.n	80027b4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a0:	1dfb      	adds	r3, r7, #7
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	001a      	movs	r2, r3
 80027a6:	231f      	movs	r3, #31
 80027a8:	401a      	ands	r2, r3
 80027aa:	4b04      	ldr	r3, [pc, #16]	@ (80027bc <__NVIC_EnableIRQ+0x30>)
 80027ac:	2101      	movs	r1, #1
 80027ae:	4091      	lsls	r1, r2
 80027b0:	000a      	movs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80027b4:	46c0      	nop			@ (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b002      	add	sp, #8
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	e000e100 	.word	0xe000e100

080027c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	0002      	movs	r2, r0
 80027c8:	6039      	str	r1, [r7, #0]
 80027ca:	1dfb      	adds	r3, r7, #7
 80027cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80027d4:	d828      	bhi.n	8002828 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002894 <__NVIC_SetPriority+0xd4>)
 80027d8:	1dfb      	adds	r3, r7, #7
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	b25b      	sxtb	r3, r3
 80027de:	089b      	lsrs	r3, r3, #2
 80027e0:	33c0      	adds	r3, #192	@ 0xc0
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	589b      	ldr	r3, [r3, r2]
 80027e6:	1dfa      	adds	r2, r7, #7
 80027e8:	7812      	ldrb	r2, [r2, #0]
 80027ea:	0011      	movs	r1, r2
 80027ec:	2203      	movs	r2, #3
 80027ee:	400a      	ands	r2, r1
 80027f0:	00d2      	lsls	r2, r2, #3
 80027f2:	21ff      	movs	r1, #255	@ 0xff
 80027f4:	4091      	lsls	r1, r2
 80027f6:	000a      	movs	r2, r1
 80027f8:	43d2      	mvns	r2, r2
 80027fa:	401a      	ands	r2, r3
 80027fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	019b      	lsls	r3, r3, #6
 8002802:	22ff      	movs	r2, #255	@ 0xff
 8002804:	401a      	ands	r2, r3
 8002806:	1dfb      	adds	r3, r7, #7
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	0018      	movs	r0, r3
 800280c:	2303      	movs	r3, #3
 800280e:	4003      	ands	r3, r0
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002814:	481f      	ldr	r0, [pc, #124]	@ (8002894 <__NVIC_SetPriority+0xd4>)
 8002816:	1dfb      	adds	r3, r7, #7
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b25b      	sxtb	r3, r3
 800281c:	089b      	lsrs	r3, r3, #2
 800281e:	430a      	orrs	r2, r1
 8002820:	33c0      	adds	r3, #192	@ 0xc0
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002826:	e031      	b.n	800288c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002828:	4a1b      	ldr	r2, [pc, #108]	@ (8002898 <__NVIC_SetPriority+0xd8>)
 800282a:	1dfb      	adds	r3, r7, #7
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	0019      	movs	r1, r3
 8002830:	230f      	movs	r3, #15
 8002832:	400b      	ands	r3, r1
 8002834:	3b08      	subs	r3, #8
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	3306      	adds	r3, #6
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	18d3      	adds	r3, r2, r3
 800283e:	3304      	adds	r3, #4
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	1dfa      	adds	r2, r7, #7
 8002844:	7812      	ldrb	r2, [r2, #0]
 8002846:	0011      	movs	r1, r2
 8002848:	2203      	movs	r2, #3
 800284a:	400a      	ands	r2, r1
 800284c:	00d2      	lsls	r2, r2, #3
 800284e:	21ff      	movs	r1, #255	@ 0xff
 8002850:	4091      	lsls	r1, r2
 8002852:	000a      	movs	r2, r1
 8002854:	43d2      	mvns	r2, r2
 8002856:	401a      	ands	r2, r3
 8002858:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	019b      	lsls	r3, r3, #6
 800285e:	22ff      	movs	r2, #255	@ 0xff
 8002860:	401a      	ands	r2, r3
 8002862:	1dfb      	adds	r3, r7, #7
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	0018      	movs	r0, r3
 8002868:	2303      	movs	r3, #3
 800286a:	4003      	ands	r3, r0
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002870:	4809      	ldr	r0, [pc, #36]	@ (8002898 <__NVIC_SetPriority+0xd8>)
 8002872:	1dfb      	adds	r3, r7, #7
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	001c      	movs	r4, r3
 8002878:	230f      	movs	r3, #15
 800287a:	4023      	ands	r3, r4
 800287c:	3b08      	subs	r3, #8
 800287e:	089b      	lsrs	r3, r3, #2
 8002880:	430a      	orrs	r2, r1
 8002882:	3306      	adds	r3, #6
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	18c3      	adds	r3, r0, r3
 8002888:	3304      	adds	r3, #4
 800288a:	601a      	str	r2, [r3, #0]
}
 800288c:	46c0      	nop			@ (mov r8, r8)
 800288e:	46bd      	mov	sp, r7
 8002890:	b003      	add	sp, #12
 8002892:	bd90      	pop	{r4, r7, pc}
 8002894:	e000e100 	.word	0xe000e100
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	1e5a      	subs	r2, r3, #1
 80028a8:	2380      	movs	r3, #128	@ 0x80
 80028aa:	045b      	lsls	r3, r3, #17
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d301      	bcc.n	80028b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028b0:	2301      	movs	r3, #1
 80028b2:	e010      	b.n	80028d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b4:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <SysTick_Config+0x44>)
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	3a01      	subs	r2, #1
 80028ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028bc:	2301      	movs	r3, #1
 80028be:	425b      	negs	r3, r3
 80028c0:	2103      	movs	r1, #3
 80028c2:	0018      	movs	r0, r3
 80028c4:	f7ff ff7c 	bl	80027c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c8:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <SysTick_Config+0x44>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ce:	4b04      	ldr	r3, [pc, #16]	@ (80028e0 <SysTick_Config+0x44>)
 80028d0:	2207      	movs	r2, #7
 80028d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	0018      	movs	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	b002      	add	sp, #8
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			@ (mov r8, r8)
 80028e0:	e000e010 	.word	0xe000e010

080028e4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	210f      	movs	r1, #15
 80028f0:	187b      	adds	r3, r7, r1
 80028f2:	1c02      	adds	r2, r0, #0
 80028f4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	b25b      	sxtb	r3, r3
 80028fe:	0011      	movs	r1, r2
 8002900:	0018      	movs	r0, r3
 8002902:	f7ff ff5d 	bl	80027c0 <__NVIC_SetPriority>
}
 8002906:	46c0      	nop			@ (mov r8, r8)
 8002908:	46bd      	mov	sp, r7
 800290a:	b004      	add	sp, #16
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	0002      	movs	r2, r0
 8002916:	1dfb      	adds	r3, r7, #7
 8002918:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800291a:	1dfb      	adds	r3, r7, #7
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	b25b      	sxtb	r3, r3
 8002920:	0018      	movs	r0, r3
 8002922:	f7ff ff33 	bl	800278c <__NVIC_EnableIRQ>
}
 8002926:	46c0      	nop			@ (mov r8, r8)
 8002928:	46bd      	mov	sp, r7
 800292a:	b002      	add	sp, #8
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	0018      	movs	r0, r3
 800293a:	f7ff ffaf 	bl	800289c <SysTick_Config>
 800293e:	0003      	movs	r3, r0
}
 8002940:	0018      	movs	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	b002      	add	sp, #8
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002956:	e147      	b.n	8002be8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2101      	movs	r1, #1
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4091      	lsls	r1, r2
 8002962:	000a      	movs	r2, r1
 8002964:	4013      	ands	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d100      	bne.n	8002970 <HAL_GPIO_Init+0x28>
 800296e:	e138      	b.n	8002be2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2203      	movs	r2, #3
 8002976:	4013      	ands	r3, r2
 8002978:	2b01      	cmp	r3, #1
 800297a:	d005      	beq.n	8002988 <HAL_GPIO_Init+0x40>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2203      	movs	r2, #3
 8002982:	4013      	ands	r3, r2
 8002984:	2b02      	cmp	r3, #2
 8002986:	d130      	bne.n	80029ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2203      	movs	r2, #3
 8002994:	409a      	lsls	r2, r3
 8002996:	0013      	movs	r3, r2
 8002998:	43da      	mvns	r2, r3
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	409a      	lsls	r2, r3
 80029aa:	0013      	movs	r3, r2
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029be:	2201      	movs	r2, #1
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	409a      	lsls	r2, r3
 80029c4:	0013      	movs	r3, r2
 80029c6:	43da      	mvns	r2, r3
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4013      	ands	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	091b      	lsrs	r3, r3, #4
 80029d4:	2201      	movs	r2, #1
 80029d6:	401a      	ands	r2, r3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	409a      	lsls	r2, r3
 80029dc:	0013      	movs	r3, r2
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2203      	movs	r2, #3
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d017      	beq.n	8002a26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	2203      	movs	r2, #3
 8002a02:	409a      	lsls	r2, r3
 8002a04:	0013      	movs	r3, r2
 8002a06:	43da      	mvns	r2, r3
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	409a      	lsls	r2, r3
 8002a18:	0013      	movs	r3, r2
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d123      	bne.n	8002a7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	08da      	lsrs	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3208      	adds	r2, #8
 8002a3a:	0092      	lsls	r2, r2, #2
 8002a3c:	58d3      	ldr	r3, [r2, r3]
 8002a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2207      	movs	r2, #7
 8002a44:	4013      	ands	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	220f      	movs	r2, #15
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	0013      	movs	r3, r2
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4013      	ands	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2107      	movs	r1, #7
 8002a5e:	400b      	ands	r3, r1
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	409a      	lsls	r2, r3
 8002a64:	0013      	movs	r3, r2
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	08da      	lsrs	r2, r3, #3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3208      	adds	r2, #8
 8002a74:	0092      	lsls	r2, r2, #2
 8002a76:	6939      	ldr	r1, [r7, #16]
 8002a78:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	2203      	movs	r2, #3
 8002a86:	409a      	lsls	r2, r3
 8002a88:	0013      	movs	r3, r2
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2203      	movs	r2, #3
 8002a98:	401a      	ands	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	0013      	movs	r3, r2
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	23c0      	movs	r3, #192	@ 0xc0
 8002ab4:	029b      	lsls	r3, r3, #10
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d100      	bne.n	8002abc <HAL_GPIO_Init+0x174>
 8002aba:	e092      	b.n	8002be2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002abc:	4a50      	ldr	r2, [pc, #320]	@ (8002c00 <HAL_GPIO_Init+0x2b8>)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	089b      	lsrs	r3, r3, #2
 8002ac2:	3318      	adds	r3, #24
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	589b      	ldr	r3, [r3, r2]
 8002ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2203      	movs	r2, #3
 8002ace:	4013      	ands	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	0013      	movs	r3, r2
 8002ad8:	43da      	mvns	r2, r3
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	23a0      	movs	r3, #160	@ 0xa0
 8002ae4:	05db      	lsls	r3, r3, #23
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d013      	beq.n	8002b12 <HAL_GPIO_Init+0x1ca>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a45      	ldr	r2, [pc, #276]	@ (8002c04 <HAL_GPIO_Init+0x2bc>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00d      	beq.n	8002b0e <HAL_GPIO_Init+0x1c6>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a44      	ldr	r2, [pc, #272]	@ (8002c08 <HAL_GPIO_Init+0x2c0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d007      	beq.n	8002b0a <HAL_GPIO_Init+0x1c2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a43      	ldr	r2, [pc, #268]	@ (8002c0c <HAL_GPIO_Init+0x2c4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d101      	bne.n	8002b06 <HAL_GPIO_Init+0x1be>
 8002b02:	2303      	movs	r3, #3
 8002b04:	e006      	b.n	8002b14 <HAL_GPIO_Init+0x1cc>
 8002b06:	2305      	movs	r3, #5
 8002b08:	e004      	b.n	8002b14 <HAL_GPIO_Init+0x1cc>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e002      	b.n	8002b14 <HAL_GPIO_Init+0x1cc>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <HAL_GPIO_Init+0x1cc>
 8002b12:	2300      	movs	r3, #0
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	2103      	movs	r1, #3
 8002b18:	400a      	ands	r2, r1
 8002b1a:	00d2      	lsls	r2, r2, #3
 8002b1c:	4093      	lsls	r3, r2
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002b24:	4936      	ldr	r1, [pc, #216]	@ (8002c00 <HAL_GPIO_Init+0x2b8>)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	089b      	lsrs	r3, r3, #2
 8002b2a:	3318      	adds	r3, #24
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b32:	4b33      	ldr	r3, [pc, #204]	@ (8002c00 <HAL_GPIO_Init+0x2b8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	2380      	movs	r3, #128	@ 0x80
 8002b48:	035b      	lsls	r3, r3, #13
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b56:	4b2a      	ldr	r3, [pc, #168]	@ (8002c00 <HAL_GPIO_Init+0x2b8>)
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002b5c:	4b28      	ldr	r3, [pc, #160]	@ (8002c00 <HAL_GPIO_Init+0x2b8>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	43da      	mvns	r2, r3
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	2380      	movs	r3, #128	@ 0x80
 8002b72:	039b      	lsls	r3, r3, #14
 8002b74:	4013      	ands	r3, r2
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b80:	4b1f      	ldr	r3, [pc, #124]	@ (8002c00 <HAL_GPIO_Init+0x2b8>)
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b86:	4a1e      	ldr	r2, [pc, #120]	@ (8002c00 <HAL_GPIO_Init+0x2b8>)
 8002b88:	2384      	movs	r3, #132	@ 0x84
 8002b8a:	58d3      	ldr	r3, [r2, r3]
 8002b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	43da      	mvns	r2, r3
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	2380      	movs	r3, #128	@ 0x80
 8002b9e:	029b      	lsls	r3, r3, #10
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bac:	4914      	ldr	r1, [pc, #80]	@ (8002c00 <HAL_GPIO_Init+0x2b8>)
 8002bae:	2284      	movs	r2, #132	@ 0x84
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002bb4:	4a12      	ldr	r2, [pc, #72]	@ (8002c00 <HAL_GPIO_Init+0x2b8>)
 8002bb6:	2380      	movs	r3, #128	@ 0x80
 8002bb8:	58d3      	ldr	r3, [r2, r3]
 8002bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	2380      	movs	r3, #128	@ 0x80
 8002bcc:	025b      	lsls	r3, r3, #9
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bda:	4909      	ldr	r1, [pc, #36]	@ (8002c00 <HAL_GPIO_Init+0x2b8>)
 8002bdc:	2280      	movs	r2, #128	@ 0x80
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	3301      	adds	r3, #1
 8002be6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	40da      	lsrs	r2, r3
 8002bf0:	1e13      	subs	r3, r2, #0
 8002bf2:	d000      	beq.n	8002bf6 <HAL_GPIO_Init+0x2ae>
 8002bf4:	e6b0      	b.n	8002958 <HAL_GPIO_Init+0x10>
  }
}
 8002bf6:	46c0      	nop			@ (mov r8, r8)
 8002bf8:	46c0      	nop			@ (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b006      	add	sp, #24
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021800 	.word	0x40021800
 8002c04:	50000400 	.word	0x50000400
 8002c08:	50000800 	.word	0x50000800
 8002c0c:	50000c00 	.word	0x50000c00

08002c10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	000a      	movs	r2, r1
 8002c1a:	1cbb      	adds	r3, r7, #2
 8002c1c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	1cba      	adds	r2, r7, #2
 8002c24:	8812      	ldrh	r2, [r2, #0]
 8002c26:	4013      	ands	r3, r2
 8002c28:	d004      	beq.n	8002c34 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002c2a:	230f      	movs	r3, #15
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	e003      	b.n	8002c3c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c34:	230f      	movs	r3, #15
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002c3c:	230f      	movs	r3, #15
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	781b      	ldrb	r3, [r3, #0]
}
 8002c42:	0018      	movs	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b004      	add	sp, #16
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	0008      	movs	r0, r1
 8002c54:	0011      	movs	r1, r2
 8002c56:	1cbb      	adds	r3, r7, #2
 8002c58:	1c02      	adds	r2, r0, #0
 8002c5a:	801a      	strh	r2, [r3, #0]
 8002c5c:	1c7b      	adds	r3, r7, #1
 8002c5e:	1c0a      	adds	r2, r1, #0
 8002c60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c62:	1c7b      	adds	r3, r7, #1
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d004      	beq.n	8002c74 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c6a:	1cbb      	adds	r3, r7, #2
 8002c6c:	881a      	ldrh	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c72:	e003      	b.n	8002c7c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c74:	1cbb      	adds	r3, r7, #2
 8002c76:	881a      	ldrh	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c7c:	46c0      	nop			@ (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b002      	add	sp, #8
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	000a      	movs	r2, r1
 8002c8e:	1cbb      	adds	r3, r7, #2
 8002c90:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c98:	1cbb      	adds	r3, r7, #2
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	041a      	lsls	r2, r3, #16
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	1cb9      	adds	r1, r7, #2
 8002ca8:	8809      	ldrh	r1, [r1, #0]
 8002caa:	400b      	ands	r3, r1
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	619a      	str	r2, [r3, #24]
}
 8002cb2:	46c0      	nop			@ (mov r8, r8)
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b004      	add	sp, #16
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	0002      	movs	r2, r0
 8002cc4:	1dbb      	adds	r3, r7, #6
 8002cc6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002cc8:	4b10      	ldr	r3, [pc, #64]	@ (8002d0c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	1dba      	adds	r2, r7, #6
 8002cce:	8812      	ldrh	r2, [r2, #0]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d008      	beq.n	8002ce6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8002d0c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002cd6:	1dba      	adds	r2, r7, #6
 8002cd8:	8812      	ldrh	r2, [r2, #0]
 8002cda:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002cdc:	1dbb      	adds	r3, r7, #6
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f000 f815 	bl	8002d10 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002ce6:	4b09      	ldr	r3, [pc, #36]	@ (8002d0c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	1dba      	adds	r2, r7, #6
 8002cec:	8812      	ldrh	r2, [r2, #0]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d008      	beq.n	8002d04 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002cf2:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002cf4:	1dba      	adds	r2, r7, #6
 8002cf6:	8812      	ldrh	r2, [r2, #0]
 8002cf8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002cfa:	1dbb      	adds	r3, r7, #6
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f7fe fd3a 	bl	8001778 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002d04:	46c0      	nop			@ (mov r8, r8)
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b002      	add	sp, #8
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021800 	.word	0x40021800

08002d10 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	0002      	movs	r2, r0
 8002d18:	1dbb      	adds	r3, r7, #6
 8002d1a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002d1c:	46c0      	nop			@ (mov r8, r8)
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b002      	add	sp, #8
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e08f      	b.n	8002e56 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2241      	movs	r2, #65	@ 0x41
 8002d3a:	5c9b      	ldrb	r3, [r3, r2]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d107      	bne.n	8002d52 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2240      	movs	r2, #64	@ 0x40
 8002d46:	2100      	movs	r1, #0
 8002d48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f7ff fa53 	bl	80021f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2241      	movs	r2, #65	@ 0x41
 8002d56:	2124      	movs	r1, #36	@ 0x24
 8002d58:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2101      	movs	r1, #1
 8002d66:	438a      	bics	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	493b      	ldr	r1, [pc, #236]	@ (8002e60 <HAL_I2C_Init+0x13c>)
 8002d74:	400a      	ands	r2, r1
 8002d76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4938      	ldr	r1, [pc, #224]	@ (8002e64 <HAL_I2C_Init+0x140>)
 8002d84:	400a      	ands	r2, r1
 8002d86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d108      	bne.n	8002da2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2180      	movs	r1, #128	@ 0x80
 8002d9a:	0209      	lsls	r1, r1, #8
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	e007      	b.n	8002db2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2184      	movs	r1, #132	@ 0x84
 8002dac:	0209      	lsls	r1, r1, #8
 8002dae:	430a      	orrs	r2, r1
 8002db0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d109      	bne.n	8002dce <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2180      	movs	r1, #128	@ 0x80
 8002dc6:	0109      	lsls	r1, r1, #4
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	605a      	str	r2, [r3, #4]
 8002dcc:	e007      	b.n	8002dde <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4923      	ldr	r1, [pc, #140]	@ (8002e68 <HAL_I2C_Init+0x144>)
 8002dda:	400a      	ands	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4920      	ldr	r1, [pc, #128]	@ (8002e6c <HAL_I2C_Init+0x148>)
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	491a      	ldr	r1, [pc, #104]	@ (8002e64 <HAL_I2C_Init+0x140>)
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69d9      	ldr	r1, [r3, #28]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1a      	ldr	r2, [r3, #32]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2101      	movs	r1, #1
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2241      	movs	r2, #65	@ 0x41
 8002e42:	2120      	movs	r1, #32
 8002e44:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2242      	movs	r2, #66	@ 0x42
 8002e50:	2100      	movs	r1, #0
 8002e52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	0018      	movs	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b002      	add	sp, #8
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	f0ffffff 	.word	0xf0ffffff
 8002e64:	ffff7fff 	.word	0xffff7fff
 8002e68:	fffff7ff 	.word	0xfffff7ff
 8002e6c:	02008000 	.word	0x02008000

08002e70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e70:	b590      	push	{r4, r7, lr}
 8002e72:	b089      	sub	sp, #36	@ 0x24
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	0008      	movs	r0, r1
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	230a      	movs	r3, #10
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	1c02      	adds	r2, r0, #0
 8002e84:	801a      	strh	r2, [r3, #0]
 8002e86:	2308      	movs	r3, #8
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	1c0a      	adds	r2, r1, #0
 8002e8c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2241      	movs	r2, #65	@ 0x41
 8002e92:	5c9b      	ldrb	r3, [r3, r2]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b20      	cmp	r3, #32
 8002e98:	d000      	beq.n	8002e9c <HAL_I2C_Master_Transmit+0x2c>
 8002e9a:	e10a      	b.n	80030b2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2240      	movs	r2, #64	@ 0x40
 8002ea0:	5c9b      	ldrb	r3, [r3, r2]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_I2C_Master_Transmit+0x3a>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e104      	b.n	80030b4 <HAL_I2C_Master_Transmit+0x244>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2240      	movs	r2, #64	@ 0x40
 8002eae:	2101      	movs	r1, #1
 8002eb0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002eb2:	f7ff fc3d 	bl	8002730 <HAL_GetTick>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002eba:	2380      	movs	r3, #128	@ 0x80
 8002ebc:	0219      	lsls	r1, r3, #8
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	2319      	movs	r3, #25
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f000 fa26 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 8002ecc:	1e03      	subs	r3, r0, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0ef      	b.n	80030b4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2241      	movs	r2, #65	@ 0x41
 8002ed8:	2121      	movs	r1, #33	@ 0x21
 8002eda:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2242      	movs	r2, #66	@ 0x42
 8002ee0:	2110      	movs	r1, #16
 8002ee2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2208      	movs	r2, #8
 8002ef4:	18ba      	adds	r2, r7, r2
 8002ef6:	8812      	ldrh	r2, [r2, #0]
 8002ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2bff      	cmp	r3, #255	@ 0xff
 8002f08:	d906      	bls.n	8002f18 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	22ff      	movs	r2, #255	@ 0xff
 8002f0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002f10:	2380      	movs	r3, #128	@ 0x80
 8002f12:	045b      	lsls	r3, r3, #17
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	e007      	b.n	8002f28 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002f22:	2380      	movs	r3, #128	@ 0x80
 8002f24:	049b      	lsls	r3, r3, #18
 8002f26:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d027      	beq.n	8002f80 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	781a      	ldrb	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	3301      	adds	r3, #1
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	697c      	ldr	r4, [r7, #20]
 8002f6c:	230a      	movs	r3, #10
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	8819      	ldrh	r1, [r3, #0]
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	4b51      	ldr	r3, [pc, #324]	@ (80030bc <HAL_I2C_Master_Transmit+0x24c>)
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	0023      	movs	r3, r4
 8002f7a:	f000 fc45 	bl	8003808 <I2C_TransferConfig>
 8002f7e:	e06f      	b.n	8003060 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	697c      	ldr	r4, [r7, #20]
 8002f88:	230a      	movs	r3, #10
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	8819      	ldrh	r1, [r3, #0]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	4b4a      	ldr	r3, [pc, #296]	@ (80030bc <HAL_I2C_Master_Transmit+0x24c>)
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	0023      	movs	r3, r4
 8002f96:	f000 fc37 	bl	8003808 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f9a:	e061      	b.n	8003060 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f000 fa10 	bl	80033c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fa8:	1e03      	subs	r3, r0, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e081      	b.n	80030b4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	781a      	ldrb	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d03a      	beq.n	8003060 <HAL_I2C_Master_Transmit+0x1f0>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d136      	bne.n	8003060 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ff2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	0013      	movs	r3, r2
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2180      	movs	r1, #128	@ 0x80
 8003000:	f000 f98a 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 8003004:	1e03      	subs	r3, r0, #0
 8003006:	d001      	beq.n	800300c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e053      	b.n	80030b4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003010:	b29b      	uxth	r3, r3
 8003012:	2bff      	cmp	r3, #255	@ 0xff
 8003014:	d911      	bls.n	800303a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	22ff      	movs	r2, #255	@ 0xff
 800301a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003020:	b2da      	uxtb	r2, r3
 8003022:	2380      	movs	r3, #128	@ 0x80
 8003024:	045c      	lsls	r4, r3, #17
 8003026:	230a      	movs	r3, #10
 8003028:	18fb      	adds	r3, r7, r3
 800302a:	8819      	ldrh	r1, [r3, #0]
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	2300      	movs	r3, #0
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	0023      	movs	r3, r4
 8003034:	f000 fbe8 	bl	8003808 <I2C_TransferConfig>
 8003038:	e012      	b.n	8003060 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003048:	b2da      	uxtb	r2, r3
 800304a:	2380      	movs	r3, #128	@ 0x80
 800304c:	049c      	lsls	r4, r3, #18
 800304e:	230a      	movs	r3, #10
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	8819      	ldrh	r1, [r3, #0]
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	2300      	movs	r3, #0
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	0023      	movs	r3, r4
 800305c:	f000 fbd4 	bl	8003808 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d198      	bne.n	8002f9c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	0018      	movs	r0, r3
 8003072:	f000 f9ef 	bl	8003454 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003076:	1e03      	subs	r3, r0, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e01a      	b.n	80030b4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2220      	movs	r2, #32
 8003084:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	490b      	ldr	r1, [pc, #44]	@ (80030c0 <HAL_I2C_Master_Transmit+0x250>)
 8003092:	400a      	ands	r2, r1
 8003094:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2241      	movs	r2, #65	@ 0x41
 800309a:	2120      	movs	r1, #32
 800309c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2242      	movs	r2, #66	@ 0x42
 80030a2:	2100      	movs	r1, #0
 80030a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2240      	movs	r2, #64	@ 0x40
 80030aa:	2100      	movs	r1, #0
 80030ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e000      	b.n	80030b4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80030b2:	2302      	movs	r3, #2
  }
}
 80030b4:	0018      	movs	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b007      	add	sp, #28
 80030ba:	bd90      	pop	{r4, r7, pc}
 80030bc:	80002000 	.word	0x80002000
 80030c0:	fe00e800 	.word	0xfe00e800

080030c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b089      	sub	sp, #36	@ 0x24
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	0008      	movs	r0, r1
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	0019      	movs	r1, r3
 80030d2:	230a      	movs	r3, #10
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	1c02      	adds	r2, r0, #0
 80030d8:	801a      	strh	r2, [r3, #0]
 80030da:	2308      	movs	r3, #8
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	1c0a      	adds	r2, r1, #0
 80030e0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2241      	movs	r2, #65	@ 0x41
 80030e6:	5c9b      	ldrb	r3, [r3, r2]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	d000      	beq.n	80030f0 <HAL_I2C_Master_Receive+0x2c>
 80030ee:	e0e8      	b.n	80032c2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2240      	movs	r2, #64	@ 0x40
 80030f4:	5c9b      	ldrb	r3, [r3, r2]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_I2C_Master_Receive+0x3a>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e0e2      	b.n	80032c4 <HAL_I2C_Master_Receive+0x200>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2240      	movs	r2, #64	@ 0x40
 8003102:	2101      	movs	r1, #1
 8003104:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003106:	f7ff fb13 	bl	8002730 <HAL_GetTick>
 800310a:	0003      	movs	r3, r0
 800310c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800310e:	2380      	movs	r3, #128	@ 0x80
 8003110:	0219      	lsls	r1, r3, #8
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	2319      	movs	r3, #25
 800311a:	2201      	movs	r2, #1
 800311c:	f000 f8fc 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 8003120:	1e03      	subs	r3, r0, #0
 8003122:	d001      	beq.n	8003128 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0cd      	b.n	80032c4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2241      	movs	r2, #65	@ 0x41
 800312c:	2122      	movs	r1, #34	@ 0x22
 800312e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2242      	movs	r2, #66	@ 0x42
 8003134:	2110      	movs	r1, #16
 8003136:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2208      	movs	r2, #8
 8003148:	18ba      	adds	r2, r7, r2
 800314a:	8812      	ldrh	r2, [r2, #0]
 800314c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	2bff      	cmp	r3, #255	@ 0xff
 800315c:	d911      	bls.n	8003182 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	22ff      	movs	r2, #255	@ 0xff
 8003162:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003168:	b2da      	uxtb	r2, r3
 800316a:	2380      	movs	r3, #128	@ 0x80
 800316c:	045c      	lsls	r4, r3, #17
 800316e:	230a      	movs	r3, #10
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	8819      	ldrh	r1, [r3, #0]
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	4b55      	ldr	r3, [pc, #340]	@ (80032cc <HAL_I2C_Master_Receive+0x208>)
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	0023      	movs	r3, r4
 800317c:	f000 fb44 	bl	8003808 <I2C_TransferConfig>
 8003180:	e076      	b.n	8003270 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003190:	b2da      	uxtb	r2, r3
 8003192:	2380      	movs	r3, #128	@ 0x80
 8003194:	049c      	lsls	r4, r3, #18
 8003196:	230a      	movs	r3, #10
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	8819      	ldrh	r1, [r3, #0]
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	4b4b      	ldr	r3, [pc, #300]	@ (80032cc <HAL_I2C_Master_Receive+0x208>)
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	0023      	movs	r3, r4
 80031a4:	f000 fb30 	bl	8003808 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80031a8:	e062      	b.n	8003270 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f000 f993 	bl	80034dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80031b6:	1e03      	subs	r3, r0, #0
 80031b8:	d001      	beq.n	80031be <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e082      	b.n	80032c4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d03a      	beq.n	8003270 <HAL_I2C_Master_Receive+0x1ac>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d136      	bne.n	8003270 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003202:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	0013      	movs	r3, r2
 800320c:	2200      	movs	r2, #0
 800320e:	2180      	movs	r1, #128	@ 0x80
 8003210:	f000 f882 	bl	8003318 <I2C_WaitOnFlagUntilTimeout>
 8003214:	1e03      	subs	r3, r0, #0
 8003216:	d001      	beq.n	800321c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e053      	b.n	80032c4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	2bff      	cmp	r3, #255	@ 0xff
 8003224:	d911      	bls.n	800324a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	22ff      	movs	r2, #255	@ 0xff
 800322a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003230:	b2da      	uxtb	r2, r3
 8003232:	2380      	movs	r3, #128	@ 0x80
 8003234:	045c      	lsls	r4, r3, #17
 8003236:	230a      	movs	r3, #10
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	8819      	ldrh	r1, [r3, #0]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	2300      	movs	r3, #0
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	0023      	movs	r3, r4
 8003244:	f000 fae0 	bl	8003808 <I2C_TransferConfig>
 8003248:	e012      	b.n	8003270 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003258:	b2da      	uxtb	r2, r3
 800325a:	2380      	movs	r3, #128	@ 0x80
 800325c:	049c      	lsls	r4, r3, #18
 800325e:	230a      	movs	r3, #10
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	8819      	ldrh	r1, [r3, #0]
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	2300      	movs	r3, #0
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	0023      	movs	r3, r4
 800326c:	f000 facc 	bl	8003808 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d197      	bne.n	80031aa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	0018      	movs	r0, r3
 8003282:	f000 f8e7 	bl	8003454 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003286:	1e03      	subs	r3, r0, #0
 8003288:	d001      	beq.n	800328e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e01a      	b.n	80032c4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2220      	movs	r2, #32
 8003294:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	490b      	ldr	r1, [pc, #44]	@ (80032d0 <HAL_I2C_Master_Receive+0x20c>)
 80032a2:	400a      	ands	r2, r1
 80032a4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2241      	movs	r2, #65	@ 0x41
 80032aa:	2120      	movs	r1, #32
 80032ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2242      	movs	r2, #66	@ 0x42
 80032b2:	2100      	movs	r1, #0
 80032b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2240      	movs	r2, #64	@ 0x40
 80032ba:	2100      	movs	r1, #0
 80032bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	e000      	b.n	80032c4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80032c2:	2302      	movs	r3, #2
  }
}
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b007      	add	sp, #28
 80032ca:	bd90      	pop	{r4, r7, pc}
 80032cc:	80002400 	.word	0x80002400
 80032d0:	fe00e800 	.word	0xfe00e800

080032d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	2202      	movs	r2, #2
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d103      	bne.n	80032f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2200      	movs	r2, #0
 80032f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	2201      	movs	r2, #1
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d007      	beq.n	8003310 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2101      	movs	r1, #1
 800330c:	430a      	orrs	r2, r1
 800330e:	619a      	str	r2, [r3, #24]
  }
}
 8003310:	46c0      	nop			@ (mov r8, r8)
 8003312:	46bd      	mov	sp, r7
 8003314:	b002      	add	sp, #8
 8003316:	bd80      	pop	{r7, pc}

08003318 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	1dfb      	adds	r3, r7, #7
 8003326:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003328:	e03a      	b.n	80033a0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	6839      	ldr	r1, [r7, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	0018      	movs	r0, r3
 8003332:	f000 f971 	bl	8003618 <I2C_IsErrorOccurred>
 8003336:	1e03      	subs	r3, r0, #0
 8003338:	d001      	beq.n	800333e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e040      	b.n	80033c0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	3301      	adds	r3, #1
 8003342:	d02d      	beq.n	80033a0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003344:	f7ff f9f4 	bl	8002730 <HAL_GetTick>
 8003348:	0002      	movs	r2, r0
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d302      	bcc.n	800335a <I2C_WaitOnFlagUntilTimeout+0x42>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d122      	bne.n	80033a0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	4013      	ands	r3, r2
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	425a      	negs	r2, r3
 800336a:	4153      	adcs	r3, r2
 800336c:	b2db      	uxtb	r3, r3
 800336e:	001a      	movs	r2, r3
 8003370:	1dfb      	adds	r3, r7, #7
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d113      	bne.n	80033a0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337c:	2220      	movs	r2, #32
 800337e:	431a      	orrs	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2241      	movs	r2, #65	@ 0x41
 8003388:	2120      	movs	r1, #32
 800338a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2242      	movs	r2, #66	@ 0x42
 8003390:	2100      	movs	r1, #0
 8003392:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2240      	movs	r2, #64	@ 0x40
 8003398:	2100      	movs	r1, #0
 800339a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e00f      	b.n	80033c0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	4013      	ands	r3, r2
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	425a      	negs	r2, r3
 80033b0:	4153      	adcs	r3, r2
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	001a      	movs	r2, r3
 80033b6:	1dfb      	adds	r3, r7, #7
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d0b5      	beq.n	800332a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	0018      	movs	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b004      	add	sp, #16
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033d4:	e032      	b.n	800343c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	0018      	movs	r0, r3
 80033de:	f000 f91b 	bl	8003618 <I2C_IsErrorOccurred>
 80033e2:	1e03      	subs	r3, r0, #0
 80033e4:	d001      	beq.n	80033ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e030      	b.n	800344c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	3301      	adds	r3, #1
 80033ee:	d025      	beq.n	800343c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f0:	f7ff f99e 	bl	8002730 <HAL_GetTick>
 80033f4:	0002      	movs	r2, r0
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d302      	bcc.n	8003406 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d11a      	bne.n	800343c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2202      	movs	r2, #2
 800340e:	4013      	ands	r3, r2
 8003410:	2b02      	cmp	r3, #2
 8003412:	d013      	beq.n	800343c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003418:	2220      	movs	r2, #32
 800341a:	431a      	orrs	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2241      	movs	r2, #65	@ 0x41
 8003424:	2120      	movs	r1, #32
 8003426:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2242      	movs	r2, #66	@ 0x42
 800342c:	2100      	movs	r1, #0
 800342e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2240      	movs	r2, #64	@ 0x40
 8003434:	2100      	movs	r1, #0
 8003436:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e007      	b.n	800344c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2202      	movs	r2, #2
 8003444:	4013      	ands	r3, r2
 8003446:	2b02      	cmp	r3, #2
 8003448:	d1c5      	bne.n	80033d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b004      	add	sp, #16
 8003452:	bd80      	pop	{r7, pc}

08003454 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003460:	e02f      	b.n	80034c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	0018      	movs	r0, r3
 800346a:	f000 f8d5 	bl	8003618 <I2C_IsErrorOccurred>
 800346e:	1e03      	subs	r3, r0, #0
 8003470:	d001      	beq.n	8003476 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e02d      	b.n	80034d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7ff f95b 	bl	8002730 <HAL_GetTick>
 800347a:	0002      	movs	r2, r0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d11a      	bne.n	80034c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2220      	movs	r2, #32
 8003494:	4013      	ands	r3, r2
 8003496:	2b20      	cmp	r3, #32
 8003498:	d013      	beq.n	80034c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349e:	2220      	movs	r2, #32
 80034a0:	431a      	orrs	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2241      	movs	r2, #65	@ 0x41
 80034aa:	2120      	movs	r1, #32
 80034ac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2242      	movs	r2, #66	@ 0x42
 80034b2:	2100      	movs	r1, #0
 80034b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2240      	movs	r2, #64	@ 0x40
 80034ba:	2100      	movs	r1, #0
 80034bc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e007      	b.n	80034d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	2220      	movs	r2, #32
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d1c8      	bne.n	8003462 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	0018      	movs	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b004      	add	sp, #16
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034e8:	2317      	movs	r3, #23
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80034f0:	e07b      	b.n	80035ea <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f000 f88d 	bl	8003618 <I2C_IsErrorOccurred>
 80034fe:	1e03      	subs	r3, r0, #0
 8003500:	d003      	beq.n	800350a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8003502:	2317      	movs	r3, #23
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2220      	movs	r2, #32
 8003512:	4013      	ands	r3, r2
 8003514:	2b20      	cmp	r3, #32
 8003516:	d140      	bne.n	800359a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003518:	2117      	movs	r1, #23
 800351a:	187b      	adds	r3, r7, r1
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d13b      	bne.n	800359a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	2204      	movs	r2, #4
 800352a:	4013      	ands	r3, r2
 800352c:	2b04      	cmp	r3, #4
 800352e:	d106      	bne.n	800353e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003538:	187b      	adds	r3, r7, r1
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2210      	movs	r2, #16
 8003546:	4013      	ands	r3, r2
 8003548:	2b10      	cmp	r3, #16
 800354a:	d123      	bne.n	8003594 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2210      	movs	r2, #16
 8003552:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2204      	movs	r2, #4
 8003558:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2220      	movs	r2, #32
 8003560:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4929      	ldr	r1, [pc, #164]	@ (8003614 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800356e:	400a      	ands	r2, r1
 8003570:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2241      	movs	r2, #65	@ 0x41
 8003576:	2120      	movs	r1, #32
 8003578:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2242      	movs	r2, #66	@ 0x42
 800357e:	2100      	movs	r1, #0
 8003580:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2240      	movs	r2, #64	@ 0x40
 8003586:	2100      	movs	r1, #0
 8003588:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800358a:	2317      	movs	r3, #23
 800358c:	18fb      	adds	r3, r7, r3
 800358e:	2201      	movs	r2, #1
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	e002      	b.n	800359a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800359a:	f7ff f8c9 	bl	8002730 <HAL_GetTick>
 800359e:	0002      	movs	r2, r0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d302      	bcc.n	80035b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d11c      	bne.n	80035ea <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80035b0:	2017      	movs	r0, #23
 80035b2:	183b      	adds	r3, r7, r0
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d117      	bne.n	80035ea <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	2204      	movs	r2, #4
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d010      	beq.n	80035ea <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035cc:	2220      	movs	r2, #32
 80035ce:	431a      	orrs	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2241      	movs	r2, #65	@ 0x41
 80035d8:	2120      	movs	r1, #32
 80035da:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2240      	movs	r2, #64	@ 0x40
 80035e0:	2100      	movs	r1, #0
 80035e2:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80035e4:	183b      	adds	r3, r7, r0
 80035e6:	2201      	movs	r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2204      	movs	r2, #4
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d005      	beq.n	8003604 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80035f8:	2317      	movs	r3, #23
 80035fa:	18fb      	adds	r3, r7, r3
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d100      	bne.n	8003604 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003602:	e776      	b.n	80034f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8003604:	2317      	movs	r3, #23
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	781b      	ldrb	r3, [r3, #0]
}
 800360a:	0018      	movs	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	b006      	add	sp, #24
 8003610:	bd80      	pop	{r7, pc}
 8003612:	46c0      	nop			@ (mov r8, r8)
 8003614:	fe00e800 	.word	0xfe00e800

08003618 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08a      	sub	sp, #40	@ 0x28
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003624:	2327      	movs	r3, #39	@ 0x27
 8003626:	18fb      	adds	r3, r7, r3
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2210      	movs	r2, #16
 8003640:	4013      	ands	r3, r2
 8003642:	d100      	bne.n	8003646 <I2C_IsErrorOccurred+0x2e>
 8003644:	e079      	b.n	800373a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2210      	movs	r2, #16
 800364c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800364e:	e057      	b.n	8003700 <I2C_IsErrorOccurred+0xe8>
 8003650:	2227      	movs	r2, #39	@ 0x27
 8003652:	18bb      	adds	r3, r7, r2
 8003654:	18ba      	adds	r2, r7, r2
 8003656:	7812      	ldrb	r2, [r2, #0]
 8003658:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	3301      	adds	r3, #1
 800365e:	d04f      	beq.n	8003700 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003660:	f7ff f866 	bl	8002730 <HAL_GetTick>
 8003664:	0002      	movs	r2, r0
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	429a      	cmp	r2, r3
 800366e:	d302      	bcc.n	8003676 <I2C_IsErrorOccurred+0x5e>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d144      	bne.n	8003700 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	2380      	movs	r3, #128	@ 0x80
 800367e:	01db      	lsls	r3, r3, #7
 8003680:	4013      	ands	r3, r2
 8003682:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003684:	2013      	movs	r0, #19
 8003686:	183b      	adds	r3, r7, r0
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	2142      	movs	r1, #66	@ 0x42
 800368c:	5c52      	ldrb	r2, [r2, r1]
 800368e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	2380      	movs	r3, #128	@ 0x80
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	401a      	ands	r2, r3
 800369c:	2380      	movs	r3, #128	@ 0x80
 800369e:	021b      	lsls	r3, r3, #8
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d126      	bne.n	80036f2 <I2C_IsErrorOccurred+0xda>
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	2380      	movs	r3, #128	@ 0x80
 80036a8:	01db      	lsls	r3, r3, #7
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d021      	beq.n	80036f2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80036ae:	183b      	adds	r3, r7, r0
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d01d      	beq.n	80036f2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2180      	movs	r1, #128	@ 0x80
 80036c2:	01c9      	lsls	r1, r1, #7
 80036c4:	430a      	orrs	r2, r1
 80036c6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036c8:	f7ff f832 	bl	8002730 <HAL_GetTick>
 80036cc:	0003      	movs	r3, r0
 80036ce:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036d0:	e00f      	b.n	80036f2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036d2:	f7ff f82d 	bl	8002730 <HAL_GetTick>
 80036d6:	0002      	movs	r2, r0
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b19      	cmp	r3, #25
 80036de:	d908      	bls.n	80036f2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	2220      	movs	r2, #32
 80036e4:	4313      	orrs	r3, r2
 80036e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036e8:	2327      	movs	r3, #39	@ 0x27
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	2201      	movs	r2, #1
 80036ee:	701a      	strb	r2, [r3, #0]

              break;
 80036f0:	e006      	b.n	8003700 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	2220      	movs	r2, #32
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d1e8      	bne.n	80036d2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	2220      	movs	r2, #32
 8003708:	4013      	ands	r3, r2
 800370a:	2b20      	cmp	r3, #32
 800370c:	d004      	beq.n	8003718 <I2C_IsErrorOccurred+0x100>
 800370e:	2327      	movs	r3, #39	@ 0x27
 8003710:	18fb      	adds	r3, r7, r3
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d09b      	beq.n	8003650 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003718:	2327      	movs	r3, #39	@ 0x27
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d103      	bne.n	800372a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2220      	movs	r2, #32
 8003728:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	2204      	movs	r2, #4
 800372e:	4313      	orrs	r3, r2
 8003730:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003732:	2327      	movs	r3, #39	@ 0x27
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	2201      	movs	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	2380      	movs	r3, #128	@ 0x80
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4013      	ands	r3, r2
 800374a:	d00c      	beq.n	8003766 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	2201      	movs	r2, #1
 8003750:	4313      	orrs	r3, r2
 8003752:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2280      	movs	r2, #128	@ 0x80
 800375a:	0052      	lsls	r2, r2, #1
 800375c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800375e:	2327      	movs	r3, #39	@ 0x27
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	2201      	movs	r2, #1
 8003764:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	2380      	movs	r3, #128	@ 0x80
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	4013      	ands	r3, r2
 800376e:	d00c      	beq.n	800378a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	2208      	movs	r2, #8
 8003774:	4313      	orrs	r3, r2
 8003776:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2280      	movs	r2, #128	@ 0x80
 800377e:	00d2      	lsls	r2, r2, #3
 8003780:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003782:	2327      	movs	r3, #39	@ 0x27
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	2201      	movs	r2, #1
 8003788:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	2380      	movs	r3, #128	@ 0x80
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4013      	ands	r3, r2
 8003792:	d00c      	beq.n	80037ae <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	2202      	movs	r2, #2
 8003798:	4313      	orrs	r3, r2
 800379a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2280      	movs	r2, #128	@ 0x80
 80037a2:	0092      	lsls	r2, r2, #2
 80037a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037a6:	2327      	movs	r3, #39	@ 0x27
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	2201      	movs	r2, #1
 80037ac:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80037ae:	2327      	movs	r3, #39	@ 0x27
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01d      	beq.n	80037f4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	0018      	movs	r0, r3
 80037bc:	f7ff fd8a 	bl	80032d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	490e      	ldr	r1, [pc, #56]	@ (8003804 <I2C_IsErrorOccurred+0x1ec>)
 80037cc:	400a      	ands	r2, r1
 80037ce:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2241      	movs	r2, #65	@ 0x41
 80037e0:	2120      	movs	r1, #32
 80037e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2242      	movs	r2, #66	@ 0x42
 80037e8:	2100      	movs	r1, #0
 80037ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2240      	movs	r2, #64	@ 0x40
 80037f0:	2100      	movs	r1, #0
 80037f2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80037f4:	2327      	movs	r3, #39	@ 0x27
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	781b      	ldrb	r3, [r3, #0]
}
 80037fa:	0018      	movs	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	b00a      	add	sp, #40	@ 0x28
 8003800:	bd80      	pop	{r7, pc}
 8003802:	46c0      	nop			@ (mov r8, r8)
 8003804:	fe00e800 	.word	0xfe00e800

08003808 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003808:	b590      	push	{r4, r7, lr}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	0008      	movs	r0, r1
 8003812:	0011      	movs	r1, r2
 8003814:	607b      	str	r3, [r7, #4]
 8003816:	240a      	movs	r4, #10
 8003818:	193b      	adds	r3, r7, r4
 800381a:	1c02      	adds	r2, r0, #0
 800381c:	801a      	strh	r2, [r3, #0]
 800381e:	2009      	movs	r0, #9
 8003820:	183b      	adds	r3, r7, r0
 8003822:	1c0a      	adds	r2, r1, #0
 8003824:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003826:	193b      	adds	r3, r7, r4
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	059b      	lsls	r3, r3, #22
 800382c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800382e:	183b      	adds	r3, r7, r0
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	0419      	lsls	r1, r3, #16
 8003834:	23ff      	movs	r3, #255	@ 0xff
 8003836:	041b      	lsls	r3, r3, #16
 8003838:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800383a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003842:	4313      	orrs	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	085b      	lsrs	r3, r3, #1
 8003848:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003852:	0d51      	lsrs	r1, r2, #21
 8003854:	2280      	movs	r2, #128	@ 0x80
 8003856:	00d2      	lsls	r2, r2, #3
 8003858:	400a      	ands	r2, r1
 800385a:	4907      	ldr	r1, [pc, #28]	@ (8003878 <I2C_TransferConfig+0x70>)
 800385c:	430a      	orrs	r2, r1
 800385e:	43d2      	mvns	r2, r2
 8003860:	401a      	ands	r2, r3
 8003862:	0011      	movs	r1, r2
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	430a      	orrs	r2, r1
 800386c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800386e:	46c0      	nop			@ (mov r8, r8)
 8003870:	46bd      	mov	sp, r7
 8003872:	b007      	add	sp, #28
 8003874:	bd90      	pop	{r4, r7, pc}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	03ff63ff 	.word	0x03ff63ff

0800387c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2241      	movs	r2, #65	@ 0x41
 800388a:	5c9b      	ldrb	r3, [r3, r2]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b20      	cmp	r3, #32
 8003890:	d138      	bne.n	8003904 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2240      	movs	r2, #64	@ 0x40
 8003896:	5c9b      	ldrb	r3, [r3, r2]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800389c:	2302      	movs	r3, #2
 800389e:	e032      	b.n	8003906 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2240      	movs	r2, #64	@ 0x40
 80038a4:	2101      	movs	r1, #1
 80038a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2241      	movs	r2, #65	@ 0x41
 80038ac:	2124      	movs	r1, #36	@ 0x24
 80038ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2101      	movs	r1, #1
 80038bc:	438a      	bics	r2, r1
 80038be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4911      	ldr	r1, [pc, #68]	@ (8003910 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80038cc:	400a      	ands	r2, r1
 80038ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6819      	ldr	r1, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2101      	movs	r1, #1
 80038ec:	430a      	orrs	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2241      	movs	r2, #65	@ 0x41
 80038f4:	2120      	movs	r1, #32
 80038f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2240      	movs	r2, #64	@ 0x40
 80038fc:	2100      	movs	r1, #0
 80038fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	e000      	b.n	8003906 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003904:	2302      	movs	r3, #2
  }
}
 8003906:	0018      	movs	r0, r3
 8003908:	46bd      	mov	sp, r7
 800390a:	b002      	add	sp, #8
 800390c:	bd80      	pop	{r7, pc}
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	ffffefff 	.word	0xffffefff

08003914 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2241      	movs	r2, #65	@ 0x41
 8003922:	5c9b      	ldrb	r3, [r3, r2]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b20      	cmp	r3, #32
 8003928:	d139      	bne.n	800399e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2240      	movs	r2, #64	@ 0x40
 800392e:	5c9b      	ldrb	r3, [r3, r2]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003934:	2302      	movs	r3, #2
 8003936:	e033      	b.n	80039a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2240      	movs	r2, #64	@ 0x40
 800393c:	2101      	movs	r1, #1
 800393e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2241      	movs	r2, #65	@ 0x41
 8003944:	2124      	movs	r1, #36	@ 0x24
 8003946:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2101      	movs	r1, #1
 8003954:	438a      	bics	r2, r1
 8003956:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4a11      	ldr	r2, [pc, #68]	@ (80039a8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003964:	4013      	ands	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	021b      	lsls	r3, r3, #8
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2101      	movs	r1, #1
 8003986:	430a      	orrs	r2, r1
 8003988:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2241      	movs	r2, #65	@ 0x41
 800398e:	2120      	movs	r1, #32
 8003990:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2240      	movs	r2, #64	@ 0x40
 8003996:	2100      	movs	r1, #0
 8003998:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	e000      	b.n	80039a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800399e:	2302      	movs	r3, #2
  }
}
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b004      	add	sp, #16
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	fffff0ff 	.word	0xfffff0ff

080039ac <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b0:	4b04      	ldr	r3, [pc, #16]	@ (80039c4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	4b03      	ldr	r3, [pc, #12]	@ (80039c4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80039b6:	2180      	movs	r1, #128	@ 0x80
 80039b8:	0049      	lsls	r1, r1, #1
 80039ba:	430a      	orrs	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]
}
 80039be:	46c0      	nop			@ (mov r8, r8)
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40007000 	.word	0x40007000

080039c8 <HAL_PWR_DisableBkUpAccess>:
/**
  * @brief  Disable access to the backup domain
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 80039cc:	4b04      	ldr	r3, [pc, #16]	@ (80039e0 <HAL_PWR_DisableBkUpAccess+0x18>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4b03      	ldr	r3, [pc, #12]	@ (80039e0 <HAL_PWR_DisableBkUpAccess+0x18>)
 80039d2:	4904      	ldr	r1, [pc, #16]	@ (80039e4 <HAL_PWR_DisableBkUpAccess+0x1c>)
 80039d4:	400a      	ands	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]
}
 80039d8:	46c0      	nop			@ (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	46c0      	nop			@ (mov r8, r8)
 80039e0:	40007000 	.word	0x40007000
 80039e4:	fffffeff 	.word	0xfffffeff

080039e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80039f0:	4b19      	ldr	r3, [pc, #100]	@ (8003a58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a19      	ldr	r2, [pc, #100]	@ (8003a5c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	0019      	movs	r1, r3
 80039fa:	4b17      	ldr	r3, [pc, #92]	@ (8003a58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	2380      	movs	r3, #128	@ 0x80
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d11f      	bne.n	8003a4c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003a0c:	4b14      	ldr	r3, [pc, #80]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	0013      	movs	r3, r2
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	189b      	adds	r3, r3, r2
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	4912      	ldr	r1, [pc, #72]	@ (8003a64 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f7fc fb72 	bl	8000104 <__udivsi3>
 8003a20:	0003      	movs	r3, r0
 8003a22:	3301      	adds	r3, #1
 8003a24:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a26:	e008      	b.n	8003a3a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	3b01      	subs	r3, #1
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	e001      	b.n	8003a3a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e009      	b.n	8003a4e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a3a:	4b07      	ldr	r3, [pc, #28]	@ (8003a58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a3c:	695a      	ldr	r2, [r3, #20]
 8003a3e:	2380      	movs	r3, #128	@ 0x80
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	401a      	ands	r2, r3
 8003a44:	2380      	movs	r3, #128	@ 0x80
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d0ed      	beq.n	8003a28 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	0018      	movs	r0, r3
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b004      	add	sp, #16
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	40007000 	.word	0x40007000
 8003a5c:	fffff9ff 	.word	0xfffff9ff
 8003a60:	20000068 	.word	0x20000068
 8003a64:	000f4240 	.word	0x000f4240

08003a68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e2fe      	b.n	8004078 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	4013      	ands	r3, r2
 8003a82:	d100      	bne.n	8003a86 <HAL_RCC_OscConfig+0x1e>
 8003a84:	e07c      	b.n	8003b80 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a86:	4bc3      	ldr	r3, [pc, #780]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2238      	movs	r2, #56	@ 0x38
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a90:	4bc0      	ldr	r3, [pc, #768]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	2203      	movs	r2, #3
 8003a96:	4013      	ands	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b10      	cmp	r3, #16
 8003a9e:	d102      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x3e>
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d002      	beq.n	8003aac <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d10b      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aac:	4bb9      	ldr	r3, [pc, #740]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	2380      	movs	r3, #128	@ 0x80
 8003ab2:	029b      	lsls	r3, r3, #10
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d062      	beq.n	8003b7e <HAL_RCC_OscConfig+0x116>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d15e      	bne.n	8003b7e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e2d9      	b.n	8004078 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	2380      	movs	r3, #128	@ 0x80
 8003aca:	025b      	lsls	r3, r3, #9
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d107      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x78>
 8003ad0:	4bb0      	ldr	r3, [pc, #704]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	4baf      	ldr	r3, [pc, #700]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003ad6:	2180      	movs	r1, #128	@ 0x80
 8003ad8:	0249      	lsls	r1, r1, #9
 8003ada:	430a      	orrs	r2, r1
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	e020      	b.n	8003b22 <HAL_RCC_OscConfig+0xba>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	23a0      	movs	r3, #160	@ 0xa0
 8003ae6:	02db      	lsls	r3, r3, #11
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d10e      	bne.n	8003b0a <HAL_RCC_OscConfig+0xa2>
 8003aec:	4ba9      	ldr	r3, [pc, #676]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	4ba8      	ldr	r3, [pc, #672]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003af2:	2180      	movs	r1, #128	@ 0x80
 8003af4:	02c9      	lsls	r1, r1, #11
 8003af6:	430a      	orrs	r2, r1
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	4ba6      	ldr	r3, [pc, #664]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	4ba5      	ldr	r3, [pc, #660]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003b00:	2180      	movs	r1, #128	@ 0x80
 8003b02:	0249      	lsls	r1, r1, #9
 8003b04:	430a      	orrs	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	e00b      	b.n	8003b22 <HAL_RCC_OscConfig+0xba>
 8003b0a:	4ba2      	ldr	r3, [pc, #648]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	4ba1      	ldr	r3, [pc, #644]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003b10:	49a1      	ldr	r1, [pc, #644]	@ (8003d98 <HAL_RCC_OscConfig+0x330>)
 8003b12:	400a      	ands	r2, r1
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	4b9f      	ldr	r3, [pc, #636]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	4b9e      	ldr	r3, [pc, #632]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003b1c:	499f      	ldr	r1, [pc, #636]	@ (8003d9c <HAL_RCC_OscConfig+0x334>)
 8003b1e:	400a      	ands	r2, r1
 8003b20:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d014      	beq.n	8003b54 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2a:	f7fe fe01 	bl	8002730 <HAL_GetTick>
 8003b2e:	0003      	movs	r3, r0
 8003b30:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b34:	f7fe fdfc 	bl	8002730 <HAL_GetTick>
 8003b38:	0002      	movs	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	@ 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e298      	b.n	8004078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b46:	4b93      	ldr	r3, [pc, #588]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	2380      	movs	r3, #128	@ 0x80
 8003b4c:	029b      	lsls	r3, r3, #10
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0xcc>
 8003b52:	e015      	b.n	8003b80 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fe fdec 	bl	8002730 <HAL_GetTick>
 8003b58:	0003      	movs	r3, r0
 8003b5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b5e:	f7fe fde7 	bl	8002730 <HAL_GetTick>
 8003b62:	0002      	movs	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b64      	cmp	r3, #100	@ 0x64
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e283      	b.n	8004078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b70:	4b88      	ldr	r3, [pc, #544]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	2380      	movs	r3, #128	@ 0x80
 8003b76:	029b      	lsls	r3, r3, #10
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d1f0      	bne.n	8003b5e <HAL_RCC_OscConfig+0xf6>
 8003b7c:	e000      	b.n	8003b80 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2202      	movs	r2, #2
 8003b86:	4013      	ands	r3, r2
 8003b88:	d100      	bne.n	8003b8c <HAL_RCC_OscConfig+0x124>
 8003b8a:	e099      	b.n	8003cc0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b8c:	4b81      	ldr	r3, [pc, #516]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2238      	movs	r2, #56	@ 0x38
 8003b92:	4013      	ands	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b96:	4b7f      	ldr	r3, [pc, #508]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b10      	cmp	r3, #16
 8003ba4:	d102      	bne.n	8003bac <HAL_RCC_OscConfig+0x144>
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d002      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d135      	bne.n	8003c1e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bb2:	4b78      	ldr	r3, [pc, #480]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	2380      	movs	r3, #128	@ 0x80
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d005      	beq.n	8003bca <HAL_RCC_OscConfig+0x162>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e256      	b.n	8004078 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bca:	4b72      	ldr	r3, [pc, #456]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	4a74      	ldr	r2, [pc, #464]	@ (8003da0 <HAL_RCC_OscConfig+0x338>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	0019      	movs	r1, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	021a      	lsls	r2, r3, #8
 8003bda:	4b6e      	ldr	r3, [pc, #440]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d112      	bne.n	8003c0c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003be6:	4b6b      	ldr	r3, [pc, #428]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a6e      	ldr	r2, [pc, #440]	@ (8003da4 <HAL_RCC_OscConfig+0x33c>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	0019      	movs	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	4b67      	ldr	r3, [pc, #412]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003bfa:	4b66      	ldr	r3, [pc, #408]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	0adb      	lsrs	r3, r3, #11
 8003c00:	2207      	movs	r2, #7
 8003c02:	4013      	ands	r3, r2
 8003c04:	4a68      	ldr	r2, [pc, #416]	@ (8003da8 <HAL_RCC_OscConfig+0x340>)
 8003c06:	40da      	lsrs	r2, r3
 8003c08:	4b68      	ldr	r3, [pc, #416]	@ (8003dac <HAL_RCC_OscConfig+0x344>)
 8003c0a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c0c:	4b68      	ldr	r3, [pc, #416]	@ (8003db0 <HAL_RCC_OscConfig+0x348>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	0018      	movs	r0, r3
 8003c12:	f7fe fd31 	bl	8002678 <HAL_InitTick>
 8003c16:	1e03      	subs	r3, r0, #0
 8003c18:	d051      	beq.n	8003cbe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e22c      	b.n	8004078 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d030      	beq.n	8003c88 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003c26:	4b5b      	ldr	r3, [pc, #364]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a5e      	ldr	r2, [pc, #376]	@ (8003da4 <HAL_RCC_OscConfig+0x33c>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	0019      	movs	r1, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	4b57      	ldr	r3, [pc, #348]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003c36:	430a      	orrs	r2, r1
 8003c38:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003c3a:	4b56      	ldr	r3, [pc, #344]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	4b55      	ldr	r3, [pc, #340]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003c40:	2180      	movs	r1, #128	@ 0x80
 8003c42:	0049      	lsls	r1, r1, #1
 8003c44:	430a      	orrs	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fe fd72 	bl	8002730 <HAL_GetTick>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c52:	f7fe fd6d 	bl	8002730 <HAL_GetTick>
 8003c56:	0002      	movs	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e209      	b.n	8004078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c64:	4b4b      	ldr	r3, [pc, #300]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	2380      	movs	r3, #128	@ 0x80
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c70:	4b48      	ldr	r3, [pc, #288]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	4a4a      	ldr	r2, [pc, #296]	@ (8003da0 <HAL_RCC_OscConfig+0x338>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	0019      	movs	r1, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	021a      	lsls	r2, r3, #8
 8003c80:	4b44      	ldr	r3, [pc, #272]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]
 8003c86:	e01b      	b.n	8003cc0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003c88:	4b42      	ldr	r3, [pc, #264]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b41      	ldr	r3, [pc, #260]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003c8e:	4949      	ldr	r1, [pc, #292]	@ (8003db4 <HAL_RCC_OscConfig+0x34c>)
 8003c90:	400a      	ands	r2, r1
 8003c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c94:	f7fe fd4c 	bl	8002730 <HAL_GetTick>
 8003c98:	0003      	movs	r3, r0
 8003c9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9e:	f7fe fd47 	bl	8002730 <HAL_GetTick>
 8003ca2:	0002      	movs	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e1e3      	b.n	8004078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cb0:	4b38      	ldr	r3, [pc, #224]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	2380      	movs	r3, #128	@ 0x80
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d1f0      	bne.n	8003c9e <HAL_RCC_OscConfig+0x236>
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cbe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2208      	movs	r2, #8
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d047      	beq.n	8003d5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003cca:	4b32      	ldr	r3, [pc, #200]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2238      	movs	r2, #56	@ 0x38
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b18      	cmp	r3, #24
 8003cd4:	d10a      	bne.n	8003cec <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cda:	2202      	movs	r2, #2
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d03c      	beq.n	8003d5a <HAL_RCC_OscConfig+0x2f2>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d138      	bne.n	8003d5a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e1c5      	b.n	8004078 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d019      	beq.n	8003d28 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003cf4:	4b27      	ldr	r3, [pc, #156]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003cf6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003cf8:	4b26      	ldr	r3, [pc, #152]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fe fd16 	bl	8002730 <HAL_GetTick>
 8003d04:	0003      	movs	r3, r0
 8003d06:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d0a:	f7fe fd11 	bl	8002730 <HAL_GetTick>
 8003d0e:	0002      	movs	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e1ad      	b.n	8004078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d20:	2202      	movs	r2, #2
 8003d22:	4013      	ands	r3, r2
 8003d24:	d0f1      	beq.n	8003d0a <HAL_RCC_OscConfig+0x2a2>
 8003d26:	e018      	b.n	8003d5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003d28:	4b1a      	ldr	r3, [pc, #104]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003d2a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d2c:	4b19      	ldr	r3, [pc, #100]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003d2e:	2101      	movs	r1, #1
 8003d30:	438a      	bics	r2, r1
 8003d32:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7fe fcfc 	bl	8002730 <HAL_GetTick>
 8003d38:	0003      	movs	r3, r0
 8003d3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d3e:	f7fe fcf7 	bl	8002730 <HAL_GetTick>
 8003d42:	0002      	movs	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e193      	b.n	8004078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d50:	4b10      	ldr	r3, [pc, #64]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d54:	2202      	movs	r2, #2
 8003d56:	4013      	ands	r3, r2
 8003d58:	d1f1      	bne.n	8003d3e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2204      	movs	r2, #4
 8003d60:	4013      	ands	r3, r2
 8003d62:	d100      	bne.n	8003d66 <HAL_RCC_OscConfig+0x2fe>
 8003d64:	e0c6      	b.n	8003ef4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d66:	231f      	movs	r3, #31
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003d6e:	4b09      	ldr	r3, [pc, #36]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2238      	movs	r2, #56	@ 0x38
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	d11e      	bne.n	8003db8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003d7a:	4b06      	ldr	r3, [pc, #24]	@ (8003d94 <HAL_RCC_OscConfig+0x32c>)
 8003d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7e:	2202      	movs	r2, #2
 8003d80:	4013      	ands	r3, r2
 8003d82:	d100      	bne.n	8003d86 <HAL_RCC_OscConfig+0x31e>
 8003d84:	e0b6      	b.n	8003ef4 <HAL_RCC_OscConfig+0x48c>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d000      	beq.n	8003d90 <HAL_RCC_OscConfig+0x328>
 8003d8e:	e0b1      	b.n	8003ef4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e171      	b.n	8004078 <HAL_RCC_OscConfig+0x610>
 8003d94:	40021000 	.word	0x40021000
 8003d98:	fffeffff 	.word	0xfffeffff
 8003d9c:	fffbffff 	.word	0xfffbffff
 8003da0:	ffff80ff 	.word	0xffff80ff
 8003da4:	ffffc7ff 	.word	0xffffc7ff
 8003da8:	00f42400 	.word	0x00f42400
 8003dac:	20000068 	.word	0x20000068
 8003db0:	2000006c 	.word	0x2000006c
 8003db4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003db8:	4bb1      	ldr	r3, [pc, #708]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003dba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dbc:	2380      	movs	r3, #128	@ 0x80
 8003dbe:	055b      	lsls	r3, r3, #21
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d101      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x360>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <HAL_RCC_OscConfig+0x362>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d011      	beq.n	8003df2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003dce:	4bac      	ldr	r3, [pc, #688]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003dd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dd2:	4bab      	ldr	r3, [pc, #684]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003dd4:	2180      	movs	r1, #128	@ 0x80
 8003dd6:	0549      	lsls	r1, r1, #21
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ddc:	4ba8      	ldr	r3, [pc, #672]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003dde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003de0:	2380      	movs	r3, #128	@ 0x80
 8003de2:	055b      	lsls	r3, r3, #21
 8003de4:	4013      	ands	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003dea:	231f      	movs	r3, #31
 8003dec:	18fb      	adds	r3, r7, r3
 8003dee:	2201      	movs	r2, #1
 8003df0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df2:	4ba4      	ldr	r3, [pc, #656]	@ (8004084 <HAL_RCC_OscConfig+0x61c>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	2380      	movs	r3, #128	@ 0x80
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d11a      	bne.n	8003e34 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dfe:	4ba1      	ldr	r3, [pc, #644]	@ (8004084 <HAL_RCC_OscConfig+0x61c>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	4ba0      	ldr	r3, [pc, #640]	@ (8004084 <HAL_RCC_OscConfig+0x61c>)
 8003e04:	2180      	movs	r1, #128	@ 0x80
 8003e06:	0049      	lsls	r1, r1, #1
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003e0c:	f7fe fc90 	bl	8002730 <HAL_GetTick>
 8003e10:	0003      	movs	r3, r0
 8003e12:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e16:	f7fe fc8b 	bl	8002730 <HAL_GetTick>
 8003e1a:	0002      	movs	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e127      	b.n	8004078 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e28:	4b96      	ldr	r3, [pc, #600]	@ (8004084 <HAL_RCC_OscConfig+0x61c>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	2380      	movs	r3, #128	@ 0x80
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	4013      	ands	r3, r2
 8003e32:	d0f0      	beq.n	8003e16 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d106      	bne.n	8003e4a <HAL_RCC_OscConfig+0x3e2>
 8003e3c:	4b90      	ldr	r3, [pc, #576]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003e3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e40:	4b8f      	ldr	r3, [pc, #572]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003e42:	2101      	movs	r1, #1
 8003e44:	430a      	orrs	r2, r1
 8003e46:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e48:	e01c      	b.n	8003e84 <HAL_RCC_OscConfig+0x41c>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b05      	cmp	r3, #5
 8003e50:	d10c      	bne.n	8003e6c <HAL_RCC_OscConfig+0x404>
 8003e52:	4b8b      	ldr	r3, [pc, #556]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003e54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e56:	4b8a      	ldr	r3, [pc, #552]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003e58:	2104      	movs	r1, #4
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e5e:	4b88      	ldr	r3, [pc, #544]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003e60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e62:	4b87      	ldr	r3, [pc, #540]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003e64:	2101      	movs	r1, #1
 8003e66:	430a      	orrs	r2, r1
 8003e68:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e6a:	e00b      	b.n	8003e84 <HAL_RCC_OscConfig+0x41c>
 8003e6c:	4b84      	ldr	r3, [pc, #528]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003e6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e70:	4b83      	ldr	r3, [pc, #524]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003e72:	2101      	movs	r1, #1
 8003e74:	438a      	bics	r2, r1
 8003e76:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e78:	4b81      	ldr	r3, [pc, #516]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003e7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e7c:	4b80      	ldr	r3, [pc, #512]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003e7e:	2104      	movs	r1, #4
 8003e80:	438a      	bics	r2, r1
 8003e82:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d014      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fe fc50 	bl	8002730 <HAL_GetTick>
 8003e90:	0003      	movs	r3, r0
 8003e92:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e94:	e009      	b.n	8003eaa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e96:	f7fe fc4b 	bl	8002730 <HAL_GetTick>
 8003e9a:	0002      	movs	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	4a79      	ldr	r2, [pc, #484]	@ (8004088 <HAL_RCC_OscConfig+0x620>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e0e6      	b.n	8004078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eaa:	4b75      	ldr	r3, [pc, #468]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eae:	2202      	movs	r2, #2
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x42e>
 8003eb4:	e013      	b.n	8003ede <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb6:	f7fe fc3b 	bl	8002730 <HAL_GetTick>
 8003eba:	0003      	movs	r3, r0
 8003ebc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ebe:	e009      	b.n	8003ed4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec0:	f7fe fc36 	bl	8002730 <HAL_GetTick>
 8003ec4:	0002      	movs	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	4a6f      	ldr	r2, [pc, #444]	@ (8004088 <HAL_RCC_OscConfig+0x620>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e0d1      	b.n	8004078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ed4:	4b6a      	ldr	r3, [pc, #424]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed8:	2202      	movs	r2, #2
 8003eda:	4013      	ands	r3, r2
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003ede:	231f      	movs	r3, #31
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d105      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003ee8:	4b65      	ldr	r3, [pc, #404]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003eea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003eec:	4b64      	ldr	r3, [pc, #400]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003eee:	4967      	ldr	r1, [pc, #412]	@ (800408c <HAL_RCC_OscConfig+0x624>)
 8003ef0:	400a      	ands	r2, r1
 8003ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d100      	bne.n	8003efe <HAL_RCC_OscConfig+0x496>
 8003efc:	e0bb      	b.n	8004076 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003efe:	4b60      	ldr	r3, [pc, #384]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2238      	movs	r2, #56	@ 0x38
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b10      	cmp	r3, #16
 8003f08:	d100      	bne.n	8003f0c <HAL_RCC_OscConfig+0x4a4>
 8003f0a:	e07b      	b.n	8004004 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d156      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f14:	4b5a      	ldr	r3, [pc, #360]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	4b59      	ldr	r3, [pc, #356]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003f1a:	495d      	ldr	r1, [pc, #372]	@ (8004090 <HAL_RCC_OscConfig+0x628>)
 8003f1c:	400a      	ands	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fe fc06 	bl	8002730 <HAL_GetTick>
 8003f24:	0003      	movs	r3, r0
 8003f26:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f2a:	f7fe fc01 	bl	8002730 <HAL_GetTick>
 8003f2e:	0002      	movs	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e09d      	b.n	8004078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f3c:	4b50      	ldr	r3, [pc, #320]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	2380      	movs	r3, #128	@ 0x80
 8003f42:	049b      	lsls	r3, r3, #18
 8003f44:	4013      	ands	r3, r2
 8003f46:	d1f0      	bne.n	8003f2a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f48:	4b4d      	ldr	r3, [pc, #308]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	4a51      	ldr	r2, [pc, #324]	@ (8004094 <HAL_RCC_OscConfig+0x62c>)
 8003f4e:	4013      	ands	r3, r2
 8003f50:	0019      	movs	r1, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1a      	ldr	r2, [r3, #32]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f60:	021b      	lsls	r3, r3, #8
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f74:	431a      	orrs	r2, r3
 8003f76:	4b42      	ldr	r3, [pc, #264]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f7c:	4b40      	ldr	r3, [pc, #256]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	4b3f      	ldr	r3, [pc, #252]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003f82:	2180      	movs	r1, #128	@ 0x80
 8003f84:	0449      	lsls	r1, r1, #17
 8003f86:	430a      	orrs	r2, r1
 8003f88:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003f8a:	4b3d      	ldr	r3, [pc, #244]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003f90:	2180      	movs	r1, #128	@ 0x80
 8003f92:	0549      	lsls	r1, r1, #21
 8003f94:	430a      	orrs	r2, r1
 8003f96:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7fe fbca 	bl	8002730 <HAL_GetTick>
 8003f9c:	0003      	movs	r3, r0
 8003f9e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa2:	f7fe fbc5 	bl	8002730 <HAL_GetTick>
 8003fa6:	0002      	movs	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e061      	b.n	8004078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fb4:	4b32      	ldr	r3, [pc, #200]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	2380      	movs	r3, #128	@ 0x80
 8003fba:	049b      	lsls	r3, r3, #18
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x53a>
 8003fc0:	e059      	b.n	8004076 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4b2e      	ldr	r3, [pc, #184]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003fc8:	4931      	ldr	r1, [pc, #196]	@ (8004090 <HAL_RCC_OscConfig+0x628>)
 8003fca:	400a      	ands	r2, r1
 8003fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fce:	f7fe fbaf 	bl	8002730 <HAL_GetTick>
 8003fd2:	0003      	movs	r3, r0
 8003fd4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7fe fbaa 	bl	8002730 <HAL_GetTick>
 8003fdc:	0002      	movs	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e046      	b.n	8004078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fea:	4b25      	ldr	r3, [pc, #148]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	2380      	movs	r3, #128	@ 0x80
 8003ff0:	049b      	lsls	r3, r3, #18
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003ff6:	4b22      	ldr	r3, [pc, #136]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	4b21      	ldr	r3, [pc, #132]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8003ffc:	4926      	ldr	r1, [pc, #152]	@ (8004098 <HAL_RCC_OscConfig+0x630>)
 8003ffe:	400a      	ands	r2, r1
 8004000:	60da      	str	r2, [r3, #12]
 8004002:	e038      	b.n	8004076 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e033      	b.n	8004078 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004010:	4b1b      	ldr	r3, [pc, #108]	@ (8004080 <HAL_RCC_OscConfig+0x618>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2203      	movs	r2, #3
 800401a:	401a      	ands	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	429a      	cmp	r2, r3
 8004022:	d126      	bne.n	8004072 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2270      	movs	r2, #112	@ 0x70
 8004028:	401a      	ands	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402e:	429a      	cmp	r2, r3
 8004030:	d11f      	bne.n	8004072 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	23fe      	movs	r3, #254	@ 0xfe
 8004036:	01db      	lsls	r3, r3, #7
 8004038:	401a      	ands	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d116      	bne.n	8004072 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	23f8      	movs	r3, #248	@ 0xf8
 8004048:	039b      	lsls	r3, r3, #14
 800404a:	401a      	ands	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004050:	429a      	cmp	r2, r3
 8004052:	d10e      	bne.n	8004072 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	23e0      	movs	r3, #224	@ 0xe0
 8004058:	051b      	lsls	r3, r3, #20
 800405a:	401a      	ands	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004060:	429a      	cmp	r2, r3
 8004062:	d106      	bne.n	8004072 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	0f5b      	lsrs	r3, r3, #29
 8004068:	075a      	lsls	r2, r3, #29
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d001      	beq.n	8004076 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	0018      	movs	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	b008      	add	sp, #32
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40021000 	.word	0x40021000
 8004084:	40007000 	.word	0x40007000
 8004088:	00001388 	.word	0x00001388
 800408c:	efffffff 	.word	0xefffffff
 8004090:	feffffff 	.word	0xfeffffff
 8004094:	11c1808c 	.word	0x11c1808c
 8004098:	eefefffc 	.word	0xeefefffc

0800409c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0e9      	b.n	8004284 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040b0:	4b76      	ldr	r3, [pc, #472]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2207      	movs	r2, #7
 80040b6:	4013      	ands	r3, r2
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d91e      	bls.n	80040fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040be:	4b73      	ldr	r3, [pc, #460]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2207      	movs	r2, #7
 80040c4:	4393      	bics	r3, r2
 80040c6:	0019      	movs	r1, r3
 80040c8:	4b70      	ldr	r3, [pc, #448]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040d0:	f7fe fb2e 	bl	8002730 <HAL_GetTick>
 80040d4:	0003      	movs	r3, r0
 80040d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040d8:	e009      	b.n	80040ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040da:	f7fe fb29 	bl	8002730 <HAL_GetTick>
 80040de:	0002      	movs	r2, r0
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	4a6a      	ldr	r2, [pc, #424]	@ (8004290 <HAL_RCC_ClockConfig+0x1f4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e0ca      	b.n	8004284 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040ee:	4b67      	ldr	r3, [pc, #412]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2207      	movs	r2, #7
 80040f4:	4013      	ands	r3, r2
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d1ee      	bne.n	80040da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2202      	movs	r2, #2
 8004102:	4013      	ands	r3, r2
 8004104:	d015      	beq.n	8004132 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2204      	movs	r2, #4
 800410c:	4013      	ands	r3, r2
 800410e:	d006      	beq.n	800411e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004110:	4b60      	ldr	r3, [pc, #384]	@ (8004294 <HAL_RCC_ClockConfig+0x1f8>)
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	4b5f      	ldr	r3, [pc, #380]	@ (8004294 <HAL_RCC_ClockConfig+0x1f8>)
 8004116:	21e0      	movs	r1, #224	@ 0xe0
 8004118:	01c9      	lsls	r1, r1, #7
 800411a:	430a      	orrs	r2, r1
 800411c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800411e:	4b5d      	ldr	r3, [pc, #372]	@ (8004294 <HAL_RCC_ClockConfig+0x1f8>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	4a5d      	ldr	r2, [pc, #372]	@ (8004298 <HAL_RCC_ClockConfig+0x1fc>)
 8004124:	4013      	ands	r3, r2
 8004126:	0019      	movs	r1, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	4b59      	ldr	r3, [pc, #356]	@ (8004294 <HAL_RCC_ClockConfig+0x1f8>)
 800412e:	430a      	orrs	r2, r1
 8004130:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2201      	movs	r2, #1
 8004138:	4013      	ands	r3, r2
 800413a:	d057      	beq.n	80041ec <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d107      	bne.n	8004154 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004144:	4b53      	ldr	r3, [pc, #332]	@ (8004294 <HAL_RCC_ClockConfig+0x1f8>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	2380      	movs	r3, #128	@ 0x80
 800414a:	029b      	lsls	r3, r3, #10
 800414c:	4013      	ands	r3, r2
 800414e:	d12b      	bne.n	80041a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e097      	b.n	8004284 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b02      	cmp	r3, #2
 800415a:	d107      	bne.n	800416c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800415c:	4b4d      	ldr	r3, [pc, #308]	@ (8004294 <HAL_RCC_ClockConfig+0x1f8>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	2380      	movs	r3, #128	@ 0x80
 8004162:	049b      	lsls	r3, r3, #18
 8004164:	4013      	ands	r3, r2
 8004166:	d11f      	bne.n	80041a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e08b      	b.n	8004284 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d107      	bne.n	8004184 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004174:	4b47      	ldr	r3, [pc, #284]	@ (8004294 <HAL_RCC_ClockConfig+0x1f8>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	2380      	movs	r3, #128	@ 0x80
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4013      	ands	r3, r2
 800417e:	d113      	bne.n	80041a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e07f      	b.n	8004284 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b03      	cmp	r3, #3
 800418a:	d106      	bne.n	800419a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800418c:	4b41      	ldr	r3, [pc, #260]	@ (8004294 <HAL_RCC_ClockConfig+0x1f8>)
 800418e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004190:	2202      	movs	r2, #2
 8004192:	4013      	ands	r3, r2
 8004194:	d108      	bne.n	80041a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e074      	b.n	8004284 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800419a:	4b3e      	ldr	r3, [pc, #248]	@ (8004294 <HAL_RCC_ClockConfig+0x1f8>)
 800419c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800419e:	2202      	movs	r2, #2
 80041a0:	4013      	ands	r3, r2
 80041a2:	d101      	bne.n	80041a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e06d      	b.n	8004284 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041a8:	4b3a      	ldr	r3, [pc, #232]	@ (8004294 <HAL_RCC_ClockConfig+0x1f8>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2207      	movs	r2, #7
 80041ae:	4393      	bics	r3, r2
 80041b0:	0019      	movs	r1, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	4b37      	ldr	r3, [pc, #220]	@ (8004294 <HAL_RCC_ClockConfig+0x1f8>)
 80041b8:	430a      	orrs	r2, r1
 80041ba:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041bc:	f7fe fab8 	bl	8002730 <HAL_GetTick>
 80041c0:	0003      	movs	r3, r0
 80041c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c4:	e009      	b.n	80041da <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c6:	f7fe fab3 	bl	8002730 <HAL_GetTick>
 80041ca:	0002      	movs	r2, r0
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004290 <HAL_RCC_ClockConfig+0x1f4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e054      	b.n	8004284 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	4b2e      	ldr	r3, [pc, #184]	@ (8004294 <HAL_RCC_ClockConfig+0x1f8>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2238      	movs	r2, #56	@ 0x38
 80041e0:	401a      	ands	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d1ec      	bne.n	80041c6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041ec:	4b27      	ldr	r3, [pc, #156]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2207      	movs	r2, #7
 80041f2:	4013      	ands	r3, r2
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d21e      	bcs.n	8004238 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	4b24      	ldr	r3, [pc, #144]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2207      	movs	r2, #7
 8004200:	4393      	bics	r3, r2
 8004202:	0019      	movs	r1, r3
 8004204:	4b21      	ldr	r3, [pc, #132]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800420c:	f7fe fa90 	bl	8002730 <HAL_GetTick>
 8004210:	0003      	movs	r3, r0
 8004212:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004214:	e009      	b.n	800422a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004216:	f7fe fa8b 	bl	8002730 <HAL_GetTick>
 800421a:	0002      	movs	r2, r0
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	4a1b      	ldr	r2, [pc, #108]	@ (8004290 <HAL_RCC_ClockConfig+0x1f4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e02c      	b.n	8004284 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800422a:	4b18      	ldr	r3, [pc, #96]	@ (800428c <HAL_RCC_ClockConfig+0x1f0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2207      	movs	r2, #7
 8004230:	4013      	ands	r3, r2
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d1ee      	bne.n	8004216 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2204      	movs	r2, #4
 800423e:	4013      	ands	r3, r2
 8004240:	d009      	beq.n	8004256 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004242:	4b14      	ldr	r3, [pc, #80]	@ (8004294 <HAL_RCC_ClockConfig+0x1f8>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	4a15      	ldr	r2, [pc, #84]	@ (800429c <HAL_RCC_ClockConfig+0x200>)
 8004248:	4013      	ands	r3, r2
 800424a:	0019      	movs	r1, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	4b10      	ldr	r3, [pc, #64]	@ (8004294 <HAL_RCC_ClockConfig+0x1f8>)
 8004252:	430a      	orrs	r2, r1
 8004254:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004256:	f000 f829 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 800425a:	0001      	movs	r1, r0
 800425c:	4b0d      	ldr	r3, [pc, #52]	@ (8004294 <HAL_RCC_ClockConfig+0x1f8>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	0a1b      	lsrs	r3, r3, #8
 8004262:	220f      	movs	r2, #15
 8004264:	401a      	ands	r2, r3
 8004266:	4b0e      	ldr	r3, [pc, #56]	@ (80042a0 <HAL_RCC_ClockConfig+0x204>)
 8004268:	0092      	lsls	r2, r2, #2
 800426a:	58d3      	ldr	r3, [r2, r3]
 800426c:	221f      	movs	r2, #31
 800426e:	4013      	ands	r3, r2
 8004270:	000a      	movs	r2, r1
 8004272:	40da      	lsrs	r2, r3
 8004274:	4b0b      	ldr	r3, [pc, #44]	@ (80042a4 <HAL_RCC_ClockConfig+0x208>)
 8004276:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004278:	4b0b      	ldr	r3, [pc, #44]	@ (80042a8 <HAL_RCC_ClockConfig+0x20c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	0018      	movs	r0, r3
 800427e:	f7fe f9fb 	bl	8002678 <HAL_InitTick>
 8004282:	0003      	movs	r3, r0
}
 8004284:	0018      	movs	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	b004      	add	sp, #16
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40022000 	.word	0x40022000
 8004290:	00001388 	.word	0x00001388
 8004294:	40021000 	.word	0x40021000
 8004298:	fffff0ff 	.word	0xfffff0ff
 800429c:	ffff8fff 	.word	0xffff8fff
 80042a0:	080067b0 	.word	0x080067b0
 80042a4:	20000068 	.word	0x20000068
 80042a8:	2000006c 	.word	0x2000006c

080042ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042b2:	4b3c      	ldr	r3, [pc, #240]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2238      	movs	r2, #56	@ 0x38
 80042b8:	4013      	ands	r3, r2
 80042ba:	d10f      	bne.n	80042dc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80042bc:	4b39      	ldr	r3, [pc, #228]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	0adb      	lsrs	r3, r3, #11
 80042c2:	2207      	movs	r2, #7
 80042c4:	4013      	ands	r3, r2
 80042c6:	2201      	movs	r2, #1
 80042c8:	409a      	lsls	r2, r3
 80042ca:	0013      	movs	r3, r2
 80042cc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80042ce:	6839      	ldr	r1, [r7, #0]
 80042d0:	4835      	ldr	r0, [pc, #212]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80042d2:	f7fb ff17 	bl	8000104 <__udivsi3>
 80042d6:	0003      	movs	r3, r0
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	e05d      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042dc:	4b31      	ldr	r3, [pc, #196]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2238      	movs	r2, #56	@ 0x38
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d102      	bne.n	80042ee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042e8:	4b30      	ldr	r3, [pc, #192]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x100>)
 80042ea:	613b      	str	r3, [r7, #16]
 80042ec:	e054      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042ee:	4b2d      	ldr	r3, [pc, #180]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2238      	movs	r2, #56	@ 0x38
 80042f4:	4013      	ands	r3, r2
 80042f6:	2b10      	cmp	r3, #16
 80042f8:	d138      	bne.n	800436c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80042fa:	4b2a      	ldr	r3, [pc, #168]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	2203      	movs	r2, #3
 8004300:	4013      	ands	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004304:	4b27      	ldr	r3, [pc, #156]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	2207      	movs	r2, #7
 800430c:	4013      	ands	r3, r2
 800430e:	3301      	adds	r3, #1
 8004310:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b03      	cmp	r3, #3
 8004316:	d10d      	bne.n	8004334 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	4824      	ldr	r0, [pc, #144]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x100>)
 800431c:	f7fb fef2 	bl	8000104 <__udivsi3>
 8004320:	0003      	movs	r3, r0
 8004322:	0019      	movs	r1, r3
 8004324:	4b1f      	ldr	r3, [pc, #124]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	0a1b      	lsrs	r3, r3, #8
 800432a:	227f      	movs	r2, #127	@ 0x7f
 800432c:	4013      	ands	r3, r2
 800432e:	434b      	muls	r3, r1
 8004330:	617b      	str	r3, [r7, #20]
        break;
 8004332:	e00d      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004334:	68b9      	ldr	r1, [r7, #8]
 8004336:	481c      	ldr	r0, [pc, #112]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004338:	f7fb fee4 	bl	8000104 <__udivsi3>
 800433c:	0003      	movs	r3, r0
 800433e:	0019      	movs	r1, r3
 8004340:	4b18      	ldr	r3, [pc, #96]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	0a1b      	lsrs	r3, r3, #8
 8004346:	227f      	movs	r2, #127	@ 0x7f
 8004348:	4013      	ands	r3, r2
 800434a:	434b      	muls	r3, r1
 800434c:	617b      	str	r3, [r7, #20]
        break;
 800434e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004350:	4b14      	ldr	r3, [pc, #80]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	0f5b      	lsrs	r3, r3, #29
 8004356:	2207      	movs	r2, #7
 8004358:	4013      	ands	r3, r2
 800435a:	3301      	adds	r3, #1
 800435c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	6978      	ldr	r0, [r7, #20]
 8004362:	f7fb fecf 	bl	8000104 <__udivsi3>
 8004366:	0003      	movs	r3, r0
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	e015      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800436c:	4b0d      	ldr	r3, [pc, #52]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2238      	movs	r2, #56	@ 0x38
 8004372:	4013      	ands	r3, r2
 8004374:	2b20      	cmp	r3, #32
 8004376:	d103      	bne.n	8004380 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004378:	2380      	movs	r3, #128	@ 0x80
 800437a:	021b      	lsls	r3, r3, #8
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	e00b      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004380:	4b08      	ldr	r3, [pc, #32]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2238      	movs	r2, #56	@ 0x38
 8004386:	4013      	ands	r3, r2
 8004388:	2b18      	cmp	r3, #24
 800438a:	d103      	bne.n	8004394 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800438c:	23fa      	movs	r3, #250	@ 0xfa
 800438e:	01db      	lsls	r3, r3, #7
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	e001      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004398:	693b      	ldr	r3, [r7, #16]
}
 800439a:	0018      	movs	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	b006      	add	sp, #24
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	46c0      	nop			@ (mov r8, r8)
 80043a4:	40021000 	.word	0x40021000
 80043a8:	00f42400 	.word	0x00f42400
 80043ac:	007a1200 	.word	0x007a1200

080043b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80043b8:	2313      	movs	r3, #19
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	2200      	movs	r2, #0
 80043be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043c0:	2312      	movs	r3, #18
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	2200      	movs	r2, #0
 80043c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	2380      	movs	r3, #128	@ 0x80
 80043ce:	029b      	lsls	r3, r3, #10
 80043d0:	4013      	ands	r3, r2
 80043d2:	d100      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80043d4:	e0a3      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d6:	2011      	movs	r0, #17
 80043d8:	183b      	adds	r3, r7, r0
 80043da:	2200      	movs	r2, #0
 80043dc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043de:	4ba5      	ldr	r3, [pc, #660]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043e2:	2380      	movs	r3, #128	@ 0x80
 80043e4:	055b      	lsls	r3, r3, #21
 80043e6:	4013      	ands	r3, r2
 80043e8:	d110      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ea:	4ba2      	ldr	r3, [pc, #648]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043ee:	4ba1      	ldr	r3, [pc, #644]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043f0:	2180      	movs	r1, #128	@ 0x80
 80043f2:	0549      	lsls	r1, r1, #21
 80043f4:	430a      	orrs	r2, r1
 80043f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80043f8:	4b9e      	ldr	r3, [pc, #632]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043fc:	2380      	movs	r3, #128	@ 0x80
 80043fe:	055b      	lsls	r3, r3, #21
 8004400:	4013      	ands	r3, r2
 8004402:	60bb      	str	r3, [r7, #8]
 8004404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004406:	183b      	adds	r3, r7, r0
 8004408:	2201      	movs	r2, #1
 800440a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800440c:	4b9a      	ldr	r3, [pc, #616]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	4b99      	ldr	r3, [pc, #612]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004412:	2180      	movs	r1, #128	@ 0x80
 8004414:	0049      	lsls	r1, r1, #1
 8004416:	430a      	orrs	r2, r1
 8004418:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800441a:	f7fe f989 	bl	8002730 <HAL_GetTick>
 800441e:	0003      	movs	r3, r0
 8004420:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004422:	e00b      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004424:	f7fe f984 	bl	8002730 <HAL_GetTick>
 8004428:	0002      	movs	r2, r0
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d904      	bls.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004432:	2313      	movs	r3, #19
 8004434:	18fb      	adds	r3, r7, r3
 8004436:	2203      	movs	r2, #3
 8004438:	701a      	strb	r2, [r3, #0]
        break;
 800443a:	e005      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800443c:	4b8e      	ldr	r3, [pc, #568]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	2380      	movs	r3, #128	@ 0x80
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	4013      	ands	r3, r2
 8004446:	d0ed      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004448:	2313      	movs	r3, #19
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d154      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004452:	4b88      	ldr	r3, [pc, #544]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004454:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004456:	23c0      	movs	r3, #192	@ 0xc0
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4013      	ands	r3, r2
 800445c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d019      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	429a      	cmp	r2, r3
 800446c:	d014      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800446e:	4b81      	ldr	r3, [pc, #516]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004472:	4a82      	ldr	r2, [pc, #520]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004474:	4013      	ands	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004478:	4b7e      	ldr	r3, [pc, #504]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800447a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800447c:	4b7d      	ldr	r3, [pc, #500]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800447e:	2180      	movs	r1, #128	@ 0x80
 8004480:	0249      	lsls	r1, r1, #9
 8004482:	430a      	orrs	r2, r1
 8004484:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004486:	4b7b      	ldr	r3, [pc, #492]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004488:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800448a:	4b7a      	ldr	r3, [pc, #488]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800448c:	497c      	ldr	r1, [pc, #496]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800448e:	400a      	ands	r2, r1
 8004490:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004492:	4b78      	ldr	r3, [pc, #480]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2201      	movs	r2, #1
 800449c:	4013      	ands	r3, r2
 800449e:	d016      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a0:	f7fe f946 	bl	8002730 <HAL_GetTick>
 80044a4:	0003      	movs	r3, r0
 80044a6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044a8:	e00c      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044aa:	f7fe f941 	bl	8002730 <HAL_GetTick>
 80044ae:	0002      	movs	r2, r0
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	4a73      	ldr	r2, [pc, #460]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d904      	bls.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80044ba:	2313      	movs	r3, #19
 80044bc:	18fb      	adds	r3, r7, r3
 80044be:	2203      	movs	r2, #3
 80044c0:	701a      	strb	r2, [r3, #0]
            break;
 80044c2:	e004      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c8:	2202      	movs	r2, #2
 80044ca:	4013      	ands	r3, r2
 80044cc:	d0ed      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80044ce:	2313      	movs	r3, #19
 80044d0:	18fb      	adds	r3, r7, r3
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10a      	bne.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044d8:	4b66      	ldr	r3, [pc, #408]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044dc:	4a67      	ldr	r2, [pc, #412]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80044de:	4013      	ands	r3, r2
 80044e0:	0019      	movs	r1, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044e6:	4b63      	ldr	r3, [pc, #396]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044e8:	430a      	orrs	r2, r1
 80044ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044ec:	e00c      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044ee:	2312      	movs	r3, #18
 80044f0:	18fb      	adds	r3, r7, r3
 80044f2:	2213      	movs	r2, #19
 80044f4:	18ba      	adds	r2, r7, r2
 80044f6:	7812      	ldrb	r2, [r2, #0]
 80044f8:	701a      	strb	r2, [r3, #0]
 80044fa:	e005      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fc:	2312      	movs	r3, #18
 80044fe:	18fb      	adds	r3, r7, r3
 8004500:	2213      	movs	r2, #19
 8004502:	18ba      	adds	r2, r7, r2
 8004504:	7812      	ldrb	r2, [r2, #0]
 8004506:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004508:	2311      	movs	r3, #17
 800450a:	18fb      	adds	r3, r7, r3
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d105      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004512:	4b58      	ldr	r3, [pc, #352]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004514:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004516:	4b57      	ldr	r3, [pc, #348]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004518:	495b      	ldr	r1, [pc, #364]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800451a:	400a      	ands	r2, r1
 800451c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2201      	movs	r2, #1
 8004524:	4013      	ands	r3, r2
 8004526:	d009      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004528:	4b52      	ldr	r3, [pc, #328]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800452a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452c:	2203      	movs	r2, #3
 800452e:	4393      	bics	r3, r2
 8004530:	0019      	movs	r1, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	4b4f      	ldr	r3, [pc, #316]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004538:	430a      	orrs	r2, r1
 800453a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2210      	movs	r2, #16
 8004542:	4013      	ands	r3, r2
 8004544:	d009      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004546:	4b4b      	ldr	r3, [pc, #300]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454a:	4a50      	ldr	r2, [pc, #320]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800454c:	4013      	ands	r3, r2
 800454e:	0019      	movs	r1, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	4b47      	ldr	r3, [pc, #284]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004556:	430a      	orrs	r2, r1
 8004558:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	2380      	movs	r3, #128	@ 0x80
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4013      	ands	r3, r2
 8004564:	d009      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004566:	4b43      	ldr	r3, [pc, #268]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456a:	4a49      	ldr	r2, [pc, #292]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800456c:	4013      	ands	r3, r2
 800456e:	0019      	movs	r1, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	695a      	ldr	r2, [r3, #20]
 8004574:	4b3f      	ldr	r3, [pc, #252]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004576:	430a      	orrs	r2, r1
 8004578:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	2380      	movs	r3, #128	@ 0x80
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	4013      	ands	r3, r2
 8004584:	d009      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004586:	4b3b      	ldr	r3, [pc, #236]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458a:	4a42      	ldr	r2, [pc, #264]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800458c:	4013      	ands	r3, r2
 800458e:	0019      	movs	r1, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699a      	ldr	r2, [r3, #24]
 8004594:	4b37      	ldr	r3, [pc, #220]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004596:	430a      	orrs	r2, r1
 8004598:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2220      	movs	r2, #32
 80045a0:	4013      	ands	r3, r2
 80045a2:	d009      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045a4:	4b33      	ldr	r3, [pc, #204]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a8:	4a3b      	ldr	r2, [pc, #236]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	0019      	movs	r1, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	4b30      	ldr	r3, [pc, #192]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045b4:	430a      	orrs	r2, r1
 80045b6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	2380      	movs	r3, #128	@ 0x80
 80045be:	01db      	lsls	r3, r3, #7
 80045c0:	4013      	ands	r3, r2
 80045c2:	d015      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	0899      	lsrs	r1, r3, #2
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69da      	ldr	r2, [r3, #28]
 80045d0:	4b28      	ldr	r3, [pc, #160]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045d2:	430a      	orrs	r2, r1
 80045d4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69da      	ldr	r2, [r3, #28]
 80045da:	2380      	movs	r3, #128	@ 0x80
 80045dc:	05db      	lsls	r3, r3, #23
 80045de:	429a      	cmp	r2, r3
 80045e0:	d106      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80045e2:	4b24      	ldr	r3, [pc, #144]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	4b23      	ldr	r3, [pc, #140]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045e8:	2180      	movs	r1, #128	@ 0x80
 80045ea:	0249      	lsls	r1, r1, #9
 80045ec:	430a      	orrs	r2, r1
 80045ee:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	2380      	movs	r3, #128	@ 0x80
 80045f6:	039b      	lsls	r3, r3, #14
 80045f8:	4013      	ands	r3, r2
 80045fa:	d016      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80045fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004600:	4a26      	ldr	r2, [pc, #152]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004602:	4013      	ands	r3, r2
 8004604:	0019      	movs	r1, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1a      	ldr	r2, [r3, #32]
 800460a:	4b1a      	ldr	r3, [pc, #104]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800460c:	430a      	orrs	r2, r1
 800460e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1a      	ldr	r2, [r3, #32]
 8004614:	2380      	movs	r3, #128	@ 0x80
 8004616:	03db      	lsls	r3, r3, #15
 8004618:	429a      	cmp	r2, r3
 800461a:	d106      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800461c:	4b15      	ldr	r3, [pc, #84]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	4b14      	ldr	r3, [pc, #80]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004622:	2180      	movs	r1, #128	@ 0x80
 8004624:	0449      	lsls	r1, r1, #17
 8004626:	430a      	orrs	r2, r1
 8004628:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	2380      	movs	r3, #128	@ 0x80
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	4013      	ands	r3, r2
 8004634:	d016      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004636:	4b0f      	ldr	r3, [pc, #60]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463a:	4a19      	ldr	r2, [pc, #100]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800463c:	4013      	ands	r3, r2
 800463e:	0019      	movs	r1, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	4b0b      	ldr	r3, [pc, #44]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004646:	430a      	orrs	r2, r1
 8004648:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	2380      	movs	r3, #128	@ 0x80
 8004650:	01db      	lsls	r3, r3, #7
 8004652:	429a      	cmp	r2, r3
 8004654:	d106      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004656:	4b07      	ldr	r3, [pc, #28]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	4b06      	ldr	r3, [pc, #24]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800465c:	2180      	movs	r1, #128	@ 0x80
 800465e:	0249      	lsls	r1, r1, #9
 8004660:	430a      	orrs	r2, r1
 8004662:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004664:	2312      	movs	r3, #18
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	781b      	ldrb	r3, [r3, #0]
}
 800466a:	0018      	movs	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	b006      	add	sp, #24
 8004670:	bd80      	pop	{r7, pc}
 8004672:	46c0      	nop			@ (mov r8, r8)
 8004674:	40021000 	.word	0x40021000
 8004678:	40007000 	.word	0x40007000
 800467c:	fffffcff 	.word	0xfffffcff
 8004680:	fffeffff 	.word	0xfffeffff
 8004684:	00001388 	.word	0x00001388
 8004688:	efffffff 	.word	0xefffffff
 800468c:	fffff3ff 	.word	0xfffff3ff
 8004690:	fff3ffff 	.word	0xfff3ffff
 8004694:	ffcfffff 	.word	0xffcfffff
 8004698:	ffffcfff 	.word	0xffffcfff
 800469c:	ffbfffff 	.word	0xffbfffff
 80046a0:	ffff3fff 	.word	0xffff3fff

080046a4 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 80046a4:	b590      	push	{r4, r7, lr}
 80046a6:	b08b      	sub	sp, #44	@ 0x2c
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 80046ac:	2427      	movs	r4, #39	@ 0x27
 80046ae:	193b      	adds	r3, r7, r4
 80046b0:	2200      	movs	r2, #0
 80046b2:	701a      	strb	r2, [r3, #0]
  FlagStatus       backupchanged = RESET;
 80046b4:	2326      	movs	r3, #38	@ 0x26
 80046b6:	18fb      	adds	r3, r7, r3
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 80046bc:	4b31      	ldr	r3, [pc, #196]	@ (8004784 <HAL_RCCEx_EnableLSCO+0xe0>)
 80046be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046c0:	4b30      	ldr	r3, [pc, #192]	@ (8004784 <HAL_RCCEx_EnableLSCO+0xe0>)
 80046c2:	2101      	movs	r1, #1
 80046c4:	430a      	orrs	r2, r1
 80046c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80046c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004784 <HAL_RCCEx_EnableLSCO+0xe0>)
 80046ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046cc:	2201      	movs	r2, #1
 80046ce:	4013      	ands	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 80046d4:	2110      	movs	r1, #16
 80046d6:	187b      	adds	r3, r7, r1
 80046d8:	2204      	movs	r2, #4
 80046da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046dc:	187b      	adds	r3, r7, r1
 80046de:	2203      	movs	r2, #3
 80046e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046e2:	187b      	adds	r3, r7, r1
 80046e4:	2203      	movs	r2, #3
 80046e6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e8:	187b      	adds	r3, r7, r1
 80046ea:	2200      	movs	r2, #0
 80046ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 80046ee:	187a      	adds	r2, r7, r1
 80046f0:	23a0      	movs	r3, #160	@ 0xa0
 80046f2:	05db      	lsls	r3, r3, #23
 80046f4:	0011      	movs	r1, r2
 80046f6:	0018      	movs	r0, r3
 80046f8:	f7fe f926 	bl	8002948 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046fc:	4b21      	ldr	r3, [pc, #132]	@ (8004784 <HAL_RCCEx_EnableLSCO+0xe0>)
 80046fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004700:	2380      	movs	r3, #128	@ 0x80
 8004702:	055b      	lsls	r3, r3, #21
 8004704:	4013      	ands	r3, r2
 8004706:	d110      	bne.n	800472a <HAL_RCCEx_EnableLSCO+0x86>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004708:	4b1e      	ldr	r3, [pc, #120]	@ (8004784 <HAL_RCCEx_EnableLSCO+0xe0>)
 800470a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800470c:	4b1d      	ldr	r3, [pc, #116]	@ (8004784 <HAL_RCCEx_EnableLSCO+0xe0>)
 800470e:	2180      	movs	r1, #128	@ 0x80
 8004710:	0549      	lsls	r1, r1, #21
 8004712:	430a      	orrs	r2, r1
 8004714:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004716:	4b1b      	ldr	r3, [pc, #108]	@ (8004784 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004718:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800471a:	2380      	movs	r3, #128	@ 0x80
 800471c:	055b      	lsls	r3, r3, #21
 800471e:	4013      	ands	r3, r2
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 8004724:	193b      	adds	r3, r7, r4
 8004726:	2201      	movs	r2, #1
 8004728:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800472a:	4b17      	ldr	r3, [pc, #92]	@ (8004788 <HAL_RCCEx_EnableLSCO+0xe4>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	2380      	movs	r3, #128	@ 0x80
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	4013      	ands	r3, r2
 8004734:	d105      	bne.n	8004742 <HAL_RCCEx_EnableLSCO+0x9e>
  {
    HAL_PWR_EnableBkUpAccess();
 8004736:	f7ff f939 	bl	80039ac <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 800473a:	2326      	movs	r3, #38	@ 0x26
 800473c:	18fb      	adds	r3, r7, r3
 800473e:	2201      	movs	r2, #1
 8004740:	701a      	strb	r2, [r3, #0]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8004742:	4b10      	ldr	r3, [pc, #64]	@ (8004784 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004746:	4a11      	ldr	r2, [pc, #68]	@ (800478c <HAL_RCCEx_EnableLSCO+0xe8>)
 8004748:	401a      	ands	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	431a      	orrs	r2, r3
 800474e:	4b0d      	ldr	r3, [pc, #52]	@ (8004784 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004750:	2180      	movs	r1, #128	@ 0x80
 8004752:	0449      	lsls	r1, r1, #17
 8004754:	430a      	orrs	r2, r1
 8004756:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (backupchanged == SET)
 8004758:	2326      	movs	r3, #38	@ 0x26
 800475a:	18fb      	adds	r3, r7, r3
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <HAL_RCCEx_EnableLSCO+0xc2>
  {
    HAL_PWR_DisableBkUpAccess();
 8004762:	f7ff f931 	bl	80039c8 <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 8004766:	2327      	movs	r3, #39	@ 0x27
 8004768:	18fb      	adds	r3, r7, r3
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d105      	bne.n	800477c <HAL_RCCEx_EnableLSCO+0xd8>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8004770:	4b04      	ldr	r3, [pc, #16]	@ (8004784 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004772:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004774:	4b03      	ldr	r3, [pc, #12]	@ (8004784 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004776:	4906      	ldr	r1, [pc, #24]	@ (8004790 <HAL_RCCEx_EnableLSCO+0xec>)
 8004778:	400a      	ands	r2, r1
 800477a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800477c:	46c0      	nop			@ (mov r8, r8)
 800477e:	46bd      	mov	sp, r7
 8004780:	b00b      	add	sp, #44	@ 0x2c
 8004782:	bd90      	pop	{r4, r7, pc}
 8004784:	40021000 	.word	0x40021000
 8004788:	40007000 	.word	0x40007000
 800478c:	fcffffff 	.word	0xfcffffff
 8004790:	efffffff 	.word	0xefffffff

08004794 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004794:	b5b0      	push	{r4, r5, r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800479c:	230f      	movs	r3, #15
 800479e:	18fb      	adds	r3, r7, r3
 80047a0:	2201      	movs	r2, #1
 80047a2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d100      	bne.n	80047ac <HAL_RTC_Init+0x18>
 80047aa:	e08c      	b.n	80048c6 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2229      	movs	r2, #41	@ 0x29
 80047b0:	5c9b      	ldrb	r3, [r3, r2]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10b      	bne.n	80047d0 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2228      	movs	r2, #40	@ 0x28
 80047bc:	2100      	movs	r1, #0
 80047be:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2288      	movs	r2, #136	@ 0x88
 80047c4:	0212      	lsls	r2, r2, #8
 80047c6:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	0018      	movs	r0, r3
 80047cc:	f7fd fd76 	bl	80022bc <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2229      	movs	r2, #41	@ 0x29
 80047d4:	2102      	movs	r1, #2
 80047d6:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	2210      	movs	r2, #16
 80047e0:	4013      	ands	r3, r2
 80047e2:	2b10      	cmp	r3, #16
 80047e4:	d062      	beq.n	80048ac <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	22ca      	movs	r2, #202	@ 0xca
 80047ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2253      	movs	r2, #83	@ 0x53
 80047f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80047f6:	250f      	movs	r5, #15
 80047f8:	197c      	adds	r4, r7, r5
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	0018      	movs	r0, r3
 80047fe:	f000 fcb9 	bl	8005174 <RTC_EnterInitMode>
 8004802:	0003      	movs	r3, r0
 8004804:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004806:	0028      	movs	r0, r5
 8004808:	183b      	adds	r3, r7, r0
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d12c      	bne.n	800486a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	492e      	ldr	r1, [pc, #184]	@ (80048d4 <HAL_RTC_Init+0x140>)
 800481c:	400a      	ands	r2, r1
 800481e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6999      	ldr	r1, [r3, #24]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689a      	ldr	r2, [r3, #8]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6912      	ldr	r2, [r2, #16]
 8004846:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6919      	ldr	r1, [r3, #16]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	041a      	lsls	r2, r3, #16
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800485c:	183c      	adds	r4, r7, r0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	0018      	movs	r0, r3
 8004862:	f000 fcc9 	bl	80051f8 <RTC_ExitInitMode>
 8004866:	0003      	movs	r3, r0
 8004868:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800486a:	230f      	movs	r3, #15
 800486c:	18fb      	adds	r3, r7, r3
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d116      	bne.n	80048a2 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	00d2      	lsls	r2, r2, #3
 8004880:	08d2      	lsrs	r2, r2, #3
 8004882:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6999      	ldr	r1, [r3, #24]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	22ff      	movs	r2, #255	@ 0xff
 80048a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80048aa:	e003      	b.n	80048b4 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80048ac:	230f      	movs	r3, #15
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	2200      	movs	r2, #0
 80048b2:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80048b4:	230f      	movs	r3, #15
 80048b6:	18fb      	adds	r3, r7, r3
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d103      	bne.n	80048c6 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2229      	movs	r2, #41	@ 0x29
 80048c2:	2101      	movs	r1, #1
 80048c4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80048c6:	230f      	movs	r3, #15
 80048c8:	18fb      	adds	r3, r7, r3
 80048ca:	781b      	ldrb	r3, [r3, #0]
}
 80048cc:	0018      	movs	r0, r3
 80048ce:	46bd      	mov	sp, r7
 80048d0:	b004      	add	sp, #16
 80048d2:	bdb0      	pop	{r4, r5, r7, pc}
 80048d4:	fb8fffbf 	.word	0xfb8fffbf

080048d8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048d8:	b5b0      	push	{r4, r5, r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2228      	movs	r2, #40	@ 0x28
 80048e8:	5c9b      	ldrb	r3, [r3, r2]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_RTC_SetTime+0x1a>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e092      	b.n	8004a18 <HAL_RTC_SetTime+0x140>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2228      	movs	r2, #40	@ 0x28
 80048f6:	2101      	movs	r1, #1
 80048f8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2229      	movs	r2, #41	@ 0x29
 80048fe:	2102      	movs	r1, #2
 8004900:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	22ca      	movs	r2, #202	@ 0xca
 8004908:	625a      	str	r2, [r3, #36]	@ 0x24
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2253      	movs	r2, #83	@ 0x53
 8004910:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004912:	2513      	movs	r5, #19
 8004914:	197c      	adds	r4, r7, r5
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	0018      	movs	r0, r3
 800491a:	f000 fc2b 	bl	8005174 <RTC_EnterInitMode>
 800491e:	0003      	movs	r3, r0
 8004920:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004922:	197b      	adds	r3, r7, r5
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d162      	bne.n	80049f0 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d125      	bne.n	800497c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	2240      	movs	r2, #64	@ 0x40
 8004938:	4013      	ands	r3, r2
 800493a:	d102      	bne.n	8004942 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2200      	movs	r2, #0
 8004940:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	0018      	movs	r0, r3
 8004948:	f000 fc9a 	bl	8005280 <RTC_ByteToBcd2>
 800494c:	0003      	movs	r3, r0
 800494e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	785b      	ldrb	r3, [r3, #1]
 8004954:	0018      	movs	r0, r3
 8004956:	f000 fc93 	bl	8005280 <RTC_ByteToBcd2>
 800495a:	0003      	movs	r3, r0
 800495c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800495e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	789b      	ldrb	r3, [r3, #2]
 8004964:	0018      	movs	r0, r3
 8004966:	f000 fc8b 	bl	8005280 <RTC_ByteToBcd2>
 800496a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800496c:	0022      	movs	r2, r4
 800496e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	78db      	ldrb	r3, [r3, #3]
 8004974:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	e017      	b.n	80049ac <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	2240      	movs	r2, #64	@ 0x40
 8004984:	4013      	ands	r3, r2
 8004986:	d102      	bne.n	800498e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2200      	movs	r2, #0
 800498c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	785b      	ldrb	r3, [r3, #1]
 8004998:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800499a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049a0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	78db      	ldrb	r3, [r3, #3]
 80049a6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	491b      	ldr	r1, [pc, #108]	@ (8004a20 <HAL_RTC_SetTime+0x148>)
 80049b4:	400a      	ands	r2, r1
 80049b6:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699a      	ldr	r2, [r3, #24]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4918      	ldr	r1, [pc, #96]	@ (8004a24 <HAL_RTC_SetTime+0x14c>)
 80049c4:	400a      	ands	r2, r1
 80049c6:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6999      	ldr	r1, [r3, #24]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80049e0:	2313      	movs	r3, #19
 80049e2:	18fc      	adds	r4, r7, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	0018      	movs	r0, r3
 80049e8:	f000 fc06 	bl	80051f8 <RTC_ExitInitMode>
 80049ec:	0003      	movs	r3, r0
 80049ee:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	22ff      	movs	r2, #255	@ 0xff
 80049f6:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 80049f8:	2313      	movs	r3, #19
 80049fa:	18fb      	adds	r3, r7, r3
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d103      	bne.n	8004a0a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2229      	movs	r2, #41	@ 0x29
 8004a06:	2101      	movs	r1, #1
 8004a08:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2228      	movs	r2, #40	@ 0x28
 8004a0e:	2100      	movs	r1, #0
 8004a10:	5499      	strb	r1, [r3, r2]

  return status;
 8004a12:	2313      	movs	r3, #19
 8004a14:	18fb      	adds	r3, r7, r3
 8004a16:	781b      	ldrb	r3, [r3, #0]
}
 8004a18:	0018      	movs	r0, r3
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	b006      	add	sp, #24
 8004a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8004a20:	007f7f7f 	.word	0x007f7f7f
 8004a24:	fffbffff 	.word	0xfffbffff

08004a28 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	045b      	lsls	r3, r3, #17
 8004a46:	0c5a      	lsrs	r2, r3, #17
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a22      	ldr	r2, [pc, #136]	@ (8004adc <HAL_RTC_GetTime+0xb4>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	0c1b      	lsrs	r3, r3, #16
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	223f      	movs	r2, #63	@ 0x3f
 8004a60:	4013      	ands	r3, r2
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	0a1b      	lsrs	r3, r3, #8
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	227f      	movs	r2, #127	@ 0x7f
 8004a70:	4013      	ands	r3, r2
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	227f      	movs	r2, #127	@ 0x7f
 8004a7e:	4013      	ands	r3, r2
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	0d9b      	lsrs	r3, r3, #22
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	4013      	ands	r3, r2
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d11a      	bne.n	8004ad2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f000 fc15 	bl	80052d0 <RTC_Bcd2ToByte>
 8004aa6:	0003      	movs	r3, r0
 8004aa8:	001a      	movs	r2, r3
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	785b      	ldrb	r3, [r3, #1]
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f000 fc0c 	bl	80052d0 <RTC_Bcd2ToByte>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	001a      	movs	r2, r3
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	789b      	ldrb	r3, [r3, #2]
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f000 fc03 	bl	80052d0 <RTC_Bcd2ToByte>
 8004aca:	0003      	movs	r3, r0
 8004acc:	001a      	movs	r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	b006      	add	sp, #24
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	007f7f7f 	.word	0x007f7f7f

08004ae0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ae0:	b5b0      	push	{r4, r5, r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2228      	movs	r2, #40	@ 0x28
 8004af0:	5c9b      	ldrb	r3, [r3, r2]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d101      	bne.n	8004afa <HAL_RTC_SetDate+0x1a>
 8004af6:	2302      	movs	r3, #2
 8004af8:	e07e      	b.n	8004bf8 <HAL_RTC_SetDate+0x118>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2228      	movs	r2, #40	@ 0x28
 8004afe:	2101      	movs	r1, #1
 8004b00:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2229      	movs	r2, #41	@ 0x29
 8004b06:	2102      	movs	r1, #2
 8004b08:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10e      	bne.n	8004b2e <HAL_RTC_SetDate+0x4e>
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	785b      	ldrb	r3, [r3, #1]
 8004b14:	001a      	movs	r2, r3
 8004b16:	2310      	movs	r3, #16
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d008      	beq.n	8004b2e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	785b      	ldrb	r3, [r3, #1]
 8004b20:	2210      	movs	r2, #16
 8004b22:	4393      	bics	r3, r2
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	330a      	adds	r3, #10
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d11c      	bne.n	8004b6e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	78db      	ldrb	r3, [r3, #3]
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f000 fba1 	bl	8005280 <RTC_ByteToBcd2>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	785b      	ldrb	r3, [r3, #1]
 8004b46:	0018      	movs	r0, r3
 8004b48:	f000 fb9a 	bl	8005280 <RTC_ByteToBcd2>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b50:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	789b      	ldrb	r3, [r3, #2]
 8004b56:	0018      	movs	r0, r3
 8004b58:	f000 fb92 	bl	8005280 <RTC_ByteToBcd2>
 8004b5c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b5e:	0022      	movs	r2, r4
 8004b60:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	e00e      	b.n	8004b8c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	78db      	ldrb	r3, [r3, #3]
 8004b72:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	785b      	ldrb	r3, [r3, #1]
 8004b78:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004b7a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004b80:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	22ca      	movs	r2, #202	@ 0xca
 8004b92:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2253      	movs	r2, #83	@ 0x53
 8004b9a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004b9c:	2513      	movs	r5, #19
 8004b9e:	197c      	adds	r4, r7, r5
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f000 fae6 	bl	8005174 <RTC_EnterInitMode>
 8004ba8:	0003      	movs	r3, r0
 8004baa:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004bac:	0028      	movs	r0, r5
 8004bae:	183b      	adds	r3, r7, r0
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10c      	bne.n	8004bd0 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4910      	ldr	r1, [pc, #64]	@ (8004c00 <HAL_RTC_SetDate+0x120>)
 8004bbe:	400a      	ands	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004bc2:	183c      	adds	r4, r7, r0
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f000 fb16 	bl	80051f8 <RTC_ExitInitMode>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	22ff      	movs	r2, #255	@ 0xff
 8004bd6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004bd8:	2313      	movs	r3, #19
 8004bda:	18fb      	adds	r3, r7, r3
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d103      	bne.n	8004bea <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2229      	movs	r2, #41	@ 0x29
 8004be6:	2101      	movs	r1, #1
 8004be8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2228      	movs	r2, #40	@ 0x28
 8004bee:	2100      	movs	r1, #0
 8004bf0:	5499      	strb	r1, [r3, r2]

  return status;
 8004bf2:	2313      	movs	r3, #19
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	781b      	ldrb	r3, [r3, #0]
}
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	b006      	add	sp, #24
 8004bfe:	bdb0      	pop	{r4, r5, r7, pc}
 8004c00:	00ffff3f 	.word	0x00ffff3f

08004c04 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	4a21      	ldr	r2, [pc, #132]	@ (8004c9c <HAL_RTC_GetDate+0x98>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	0c1b      	lsrs	r3, r3, #16
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	0a1b      	lsrs	r3, r3, #8
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	221f      	movs	r2, #31
 8004c2e:	4013      	ands	r3, r2
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	223f      	movs	r2, #63	@ 0x3f
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	0b5b      	lsrs	r3, r3, #13
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2207      	movs	r2, #7
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d11a      	bne.n	8004c90 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	78db      	ldrb	r3, [r3, #3]
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f000 fb36 	bl	80052d0 <RTC_Bcd2ToByte>
 8004c64:	0003      	movs	r3, r0
 8004c66:	001a      	movs	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	785b      	ldrb	r3, [r3, #1]
 8004c70:	0018      	movs	r0, r3
 8004c72:	f000 fb2d 	bl	80052d0 <RTC_Bcd2ToByte>
 8004c76:	0003      	movs	r3, r0
 8004c78:	001a      	movs	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	789b      	ldrb	r3, [r3, #2]
 8004c82:	0018      	movs	r0, r3
 8004c84:	f000 fb24 	bl	80052d0 <RTC_Bcd2ToByte>
 8004c88:	0003      	movs	r3, r0
 8004c8a:	001a      	movs	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	0018      	movs	r0, r3
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b006      	add	sp, #24
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	46c0      	nop			@ (mov r8, r8)
 8004c9c:	00ffff3f 	.word	0x00ffff3f

08004ca0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004ca0:	b590      	push	{r4, r7, lr}
 8004ca2:	b089      	sub	sp, #36	@ 0x24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2228      	movs	r2, #40	@ 0x28
 8004cb0:	5c9b      	ldrb	r3, [r3, r2]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d101      	bne.n	8004cba <HAL_RTC_SetAlarm_IT+0x1a>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e127      	b.n	8004f0a <HAL_RTC_SetAlarm_IT+0x26a>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2228      	movs	r2, #40	@ 0x28
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2229      	movs	r2, #41	@ 0x29
 8004cc6:	2102      	movs	r1, #2
 8004cc8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d136      	bne.n	8004d3e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	2240      	movs	r2, #64	@ 0x40
 8004cd8:	4013      	ands	r3, r2
 8004cda:	d102      	bne.n	8004ce2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f000 faca 	bl	8005280 <RTC_ByteToBcd2>
 8004cec:	0003      	movs	r3, r0
 8004cee:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	785b      	ldrb	r3, [r3, #1]
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f000 fac3 	bl	8005280 <RTC_ByteToBcd2>
 8004cfa:	0003      	movs	r3, r0
 8004cfc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004cfe:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	789b      	ldrb	r3, [r3, #2]
 8004d04:	0018      	movs	r0, r3
 8004d06:	f000 fabb 	bl	8005280 <RTC_ByteToBcd2>
 8004d0a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004d0c:	0022      	movs	r2, r4
 8004d0e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	78db      	ldrb	r3, [r3, #3]
 8004d14:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004d16:	431a      	orrs	r2, r3
 8004d18:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	5c9b      	ldrb	r3, [r3, r2]
 8004d20:	0018      	movs	r0, r3
 8004d22:	f000 faad 	bl	8005280 <RTC_ByteToBcd2>
 8004d26:	0003      	movs	r3, r0
 8004d28:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004d2a:	0022      	movs	r2, r4
 8004d2c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004d32:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	61fb      	str	r3, [r7, #28]
 8004d3c:	e022      	b.n	8004d84 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2240      	movs	r2, #64	@ 0x40
 8004d46:	4013      	ands	r3, r2
 8004d48:	d102      	bne.n	8004d50 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	785b      	ldrb	r3, [r3, #1]
 8004d5a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d5c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004d62:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	78db      	ldrb	r3, [r3, #3]
 8004d68:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004d6a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2120      	movs	r1, #32
 8004d70:	5c5b      	ldrb	r3, [r3, r1]
 8004d72:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004d74:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004d7a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	22ca      	movs	r2, #202	@ 0xca
 8004d96:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2253      	movs	r2, #83	@ 0x53
 8004d9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004da4:	2380      	movs	r3, #128	@ 0x80
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d14c      	bne.n	8004e46 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4957      	ldr	r1, [pc, #348]	@ (8004f14 <HAL_RTC_SetAlarm_IT+0x274>)
 8004db8:	400a      	ands	r2, r1
 8004dba:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004dcc:	f7fd fcb0 	bl	8002730 <HAL_GetTick>
 8004dd0:	0003      	movs	r3, r0
 8004dd2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004dd4:	e016      	b.n	8004e04 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004dd6:	f7fd fcab 	bl	8002730 <HAL_GetTick>
 8004dda:	0002      	movs	r2, r0
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	1ad2      	subs	r2, r2, r3
 8004de0:	23fa      	movs	r3, #250	@ 0xfa
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d90d      	bls.n	8004e04 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	22ff      	movs	r2, #255	@ 0xff
 8004dee:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2229      	movs	r2, #41	@ 0x29
 8004df4:	2103      	movs	r1, #3
 8004df6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2228      	movs	r2, #40	@ 0x28
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e082      	b.n	8004f0a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d0e2      	beq.n	8004dd6 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699a      	ldr	r2, [r3, #24]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2180      	movs	r1, #128	@ 0x80
 8004e2c:	0049      	lsls	r1, r1, #1
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	699a      	ldr	r2, [r3, #24]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2180      	movs	r1, #128	@ 0x80
 8004e3e:	0149      	lsls	r1, r1, #5
 8004e40:	430a      	orrs	r2, r1
 8004e42:	619a      	str	r2, [r3, #24]
 8004e44:	e04b      	b.n	8004ede <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4931      	ldr	r1, [pc, #196]	@ (8004f18 <HAL_RTC_SetAlarm_IT+0x278>)
 8004e52:	400a      	ands	r2, r1
 8004e54:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2102      	movs	r1, #2
 8004e62:	430a      	orrs	r2, r1
 8004e64:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004e66:	f7fd fc63 	bl	8002730 <HAL_GetTick>
 8004e6a:	0003      	movs	r3, r0
 8004e6c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004e6e:	e016      	b.n	8004e9e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e70:	f7fd fc5e 	bl	8002730 <HAL_GetTick>
 8004e74:	0002      	movs	r2, r0
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	1ad2      	subs	r2, r2, r3
 8004e7a:	23fa      	movs	r3, #250	@ 0xfa
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d90d      	bls.n	8004e9e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	22ff      	movs	r2, #255	@ 0xff
 8004e88:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2229      	movs	r2, #41	@ 0x29
 8004e8e:	2103      	movs	r1, #3
 8004e90:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2228      	movs	r2, #40	@ 0x28
 8004e96:	2100      	movs	r1, #0
 8004e98:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e035      	b.n	8004f0a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d0e2      	beq.n	8004e70 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	699a      	ldr	r2, [r3, #24]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2180      	movs	r1, #128	@ 0x80
 8004ec6:	0089      	lsls	r1, r1, #2
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699a      	ldr	r2, [r3, #24]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2180      	movs	r1, #128	@ 0x80
 8004ed8:	0189      	lsls	r1, r1, #6
 8004eda:	430a      	orrs	r2, r1
 8004edc:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004ede:	4a0f      	ldr	r2, [pc, #60]	@ (8004f1c <HAL_RTC_SetAlarm_IT+0x27c>)
 8004ee0:	2380      	movs	r3, #128	@ 0x80
 8004ee2:	58d3      	ldr	r3, [r2, r3]
 8004ee4:	490d      	ldr	r1, [pc, #52]	@ (8004f1c <HAL_RTC_SetAlarm_IT+0x27c>)
 8004ee6:	2280      	movs	r2, #128	@ 0x80
 8004ee8:	0312      	lsls	r2, r2, #12
 8004eea:	4313      	orrs	r3, r2
 8004eec:	2280      	movs	r2, #128	@ 0x80
 8004eee:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	22ff      	movs	r2, #255	@ 0xff
 8004ef6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2229      	movs	r2, #41	@ 0x29
 8004efc:	2101      	movs	r1, #1
 8004efe:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2228      	movs	r2, #40	@ 0x28
 8004f04:	2100      	movs	r1, #0
 8004f06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b009      	add	sp, #36	@ 0x24
 8004f10:	bd90      	pop	{r4, r7, pc}
 8004f12:	46c0      	nop			@ (mov r8, r8)
 8004f14:	fffffeff 	.word	0xfffffeff
 8004f18:	fffffdff 	.word	0xfffffdff
 8004f1c:	40021800 	.word	0x40021800

08004f20 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	2380      	movs	r3, #128	@ 0x80
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d144      	bne.n	8004fc2 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2280      	movs	r2, #128	@ 0x80
 8004f3c:	0052      	lsls	r2, r2, #1
 8004f3e:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f46:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f4e:	045b      	lsls	r3, r3, #17
 8004f50:	0c5b      	lsrs	r3, r3, #17
 8004f52:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	0c1b      	lsrs	r3, r3, #16
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	223f      	movs	r2, #63	@ 0x3f
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	0a1b      	lsrs	r3, r3, #8
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	227f      	movs	r2, #127	@ 0x7f
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	227f      	movs	r2, #127	@ 0x7f
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	0d9b      	lsrs	r3, r3, #22
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2201      	movs	r2, #1
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	0e1b      	lsrs	r3, r3, #24
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	223f      	movs	r2, #63	@ 0x3f
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	b2d9      	uxtb	r1, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	2380      	movs	r3, #128	@ 0x80
 8004fae:	05db      	lsls	r3, r3, #23
 8004fb0:	401a      	ands	r2, r3
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	4a3b      	ldr	r2, [pc, #236]	@ (80050a8 <HAL_RTC_GetAlarm+0x188>)
 8004fba:	401a      	ands	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	615a      	str	r2, [r3, #20]
 8004fc0:	e043      	b.n	800504a <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2280      	movs	r2, #128	@ 0x80
 8004fc6:	0092      	lsls	r2, r2, #2
 8004fc8:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd0:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fd8:	045b      	lsls	r3, r3, #17
 8004fda:	0c5b      	lsrs	r3, r3, #17
 8004fdc:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	0c1b      	lsrs	r3, r3, #16
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	223f      	movs	r2, #63	@ 0x3f
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	0a1b      	lsrs	r3, r3, #8
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	227f      	movs	r2, #127	@ 0x7f
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	227f      	movs	r2, #127	@ 0x7f
 8005004:	4013      	ands	r3, r2
 8005006:	b2da      	uxtb	r2, r3
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	0d9b      	lsrs	r3, r3, #22
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2201      	movs	r2, #1
 8005014:	4013      	ands	r3, r2
 8005016:	b2da      	uxtb	r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	0e1b      	lsrs	r3, r3, #24
 8005026:	b2db      	uxtb	r3, r3
 8005028:	223f      	movs	r2, #63	@ 0x3f
 800502a:	4013      	ands	r3, r2
 800502c:	b2d9      	uxtb	r1, r3
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	2220      	movs	r2, #32
 8005032:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	2380      	movs	r3, #128	@ 0x80
 8005038:	05db      	lsls	r3, r3, #23
 800503a:	401a      	ands	r2, r3
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	4a19      	ldr	r2, [pc, #100]	@ (80050a8 <HAL_RTC_GetAlarm+0x188>)
 8005044:	401a      	ands	r2, r3
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d125      	bne.n	800509c <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	0018      	movs	r0, r3
 8005056:	f000 f93b 	bl	80052d0 <RTC_Bcd2ToByte>
 800505a:	0003      	movs	r3, r0
 800505c:	001a      	movs	r2, r3
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	785b      	ldrb	r3, [r3, #1]
 8005066:	0018      	movs	r0, r3
 8005068:	f000 f932 	bl	80052d0 <RTC_Bcd2ToByte>
 800506c:	0003      	movs	r3, r0
 800506e:	001a      	movs	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	789b      	ldrb	r3, [r3, #2]
 8005078:	0018      	movs	r0, r3
 800507a:	f000 f929 	bl	80052d0 <RTC_Bcd2ToByte>
 800507e:	0003      	movs	r3, r0
 8005080:	001a      	movs	r2, r3
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2220      	movs	r2, #32
 800508a:	5c9b      	ldrb	r3, [r3, r2]
 800508c:	0018      	movs	r0, r3
 800508e:	f000 f91f 	bl	80052d0 <RTC_Bcd2ToByte>
 8005092:	0003      	movs	r3, r0
 8005094:	0019      	movs	r1, r3
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2220      	movs	r2, #32
 800509a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	0018      	movs	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b006      	add	sp, #24
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	46c0      	nop			@ (mov r8, r8)
 80050a8:	80808080 	.word	0x80808080

080050ac <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699a      	ldr	r2, [r3, #24]
 80050ba:	2380      	movs	r3, #128	@ 0x80
 80050bc:	015b      	lsls	r3, r3, #5
 80050be:	4013      	ands	r3, r2
 80050c0:	d011      	beq.n	80050e6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050c8:	2201      	movs	r2, #1
 80050ca:	4013      	ands	r3, r2
 80050cc:	d00b      	beq.n	80050e6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2101      	movs	r1, #1
 80050da:	430a      	orrs	r2, r1
 80050dc:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	0018      	movs	r0, r3
 80050e2:	f7fc fa19 	bl	8001518 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	699a      	ldr	r2, [r3, #24]
 80050ec:	2380      	movs	r3, #128	@ 0x80
 80050ee:	019b      	lsls	r3, r3, #6
 80050f0:	4013      	ands	r3, r2
 80050f2:	d011      	beq.n	8005118 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050fa:	2202      	movs	r2, #2
 80050fc:	4013      	ands	r3, r2
 80050fe:	d00b      	beq.n	8005118 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2102      	movs	r1, #2
 800510c:	430a      	orrs	r2, r1
 800510e:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	0018      	movs	r0, r3
 8005114:	f000 f9a4 	bl	8005460 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2229      	movs	r2, #41	@ 0x29
 800511c:	2101      	movs	r1, #1
 800511e:	5499      	strb	r1, [r3, r2]
}
 8005120:	46c0      	nop			@ (mov r8, r8)
 8005122:	46bd      	mov	sp, r7
 8005124:	b002      	add	sp, #8
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a0e      	ldr	r2, [pc, #56]	@ (8005170 <HAL_RTC_WaitForSynchro+0x48>)
 8005136:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005138:	f7fd fafa 	bl	8002730 <HAL_GetTick>
 800513c:	0003      	movs	r3, r0
 800513e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005140:	e00a      	b.n	8005158 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005142:	f7fd faf5 	bl	8002730 <HAL_GetTick>
 8005146:	0002      	movs	r2, r0
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	1ad2      	subs	r2, r2, r3
 800514c:	23fa      	movs	r3, #250	@ 0xfa
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	429a      	cmp	r2, r3
 8005152:	d901      	bls.n	8005158 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e006      	b.n	8005166 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	4013      	ands	r3, r2
 8005162:	d0ee      	beq.n	8005142 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	0018      	movs	r0, r3
 8005168:	46bd      	mov	sp, r7
 800516a:	b004      	add	sp, #16
 800516c:	bd80      	pop	{r7, pc}
 800516e:	46c0      	nop			@ (mov r8, r8)
 8005170:	0001005f 	.word	0x0001005f

08005174 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800517c:	230f      	movs	r3, #15
 800517e:	18fb      	adds	r3, r7, r3
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	2240      	movs	r2, #64	@ 0x40
 800518c:	4013      	ands	r3, r2
 800518e:	d12c      	bne.n	80051ea <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2180      	movs	r1, #128	@ 0x80
 800519c:	430a      	orrs	r2, r1
 800519e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80051a0:	f7fd fac6 	bl	8002730 <HAL_GetTick>
 80051a4:	0003      	movs	r3, r0
 80051a6:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80051a8:	e014      	b.n	80051d4 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80051aa:	f7fd fac1 	bl	8002730 <HAL_GetTick>
 80051ae:	0002      	movs	r2, r0
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	1ad2      	subs	r2, r2, r3
 80051b4:	200f      	movs	r0, #15
 80051b6:	183b      	adds	r3, r7, r0
 80051b8:	1839      	adds	r1, r7, r0
 80051ba:	7809      	ldrb	r1, [r1, #0]
 80051bc:	7019      	strb	r1, [r3, #0]
 80051be:	23fa      	movs	r3, #250	@ 0xfa
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d906      	bls.n	80051d4 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80051c6:	183b      	adds	r3, r7, r0
 80051c8:	2203      	movs	r2, #3
 80051ca:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2229      	movs	r2, #41	@ 0x29
 80051d0:	2103      	movs	r1, #3
 80051d2:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	2240      	movs	r2, #64	@ 0x40
 80051dc:	4013      	ands	r3, r2
 80051de:	d104      	bne.n	80051ea <RTC_EnterInitMode+0x76>
 80051e0:	230f      	movs	r3, #15
 80051e2:	18fb      	adds	r3, r7, r3
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d1df      	bne.n	80051aa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80051ea:	230f      	movs	r3, #15
 80051ec:	18fb      	adds	r3, r7, r3
 80051ee:	781b      	ldrb	r3, [r3, #0]
}
 80051f0:	0018      	movs	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	b004      	add	sp, #16
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80051f8:	b590      	push	{r4, r7, lr}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005200:	240f      	movs	r4, #15
 8005202:	193b      	adds	r3, r7, r4
 8005204:	2200      	movs	r2, #0
 8005206:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005208:	4b1c      	ldr	r3, [pc, #112]	@ (800527c <RTC_ExitInitMode+0x84>)
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	4b1b      	ldr	r3, [pc, #108]	@ (800527c <RTC_ExitInitMode+0x84>)
 800520e:	2180      	movs	r1, #128	@ 0x80
 8005210:	438a      	bics	r2, r1
 8005212:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005214:	4b19      	ldr	r3, [pc, #100]	@ (800527c <RTC_ExitInitMode+0x84>)
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	2220      	movs	r2, #32
 800521a:	4013      	ands	r3, r2
 800521c:	d10d      	bne.n	800523a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	0018      	movs	r0, r3
 8005222:	f7ff ff81 	bl	8005128 <HAL_RTC_WaitForSynchro>
 8005226:	1e03      	subs	r3, r0, #0
 8005228:	d021      	beq.n	800526e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2229      	movs	r2, #41	@ 0x29
 800522e:	2103      	movs	r1, #3
 8005230:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005232:	193b      	adds	r3, r7, r4
 8005234:	2203      	movs	r2, #3
 8005236:	701a      	strb	r2, [r3, #0]
 8005238:	e019      	b.n	800526e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800523a:	4b10      	ldr	r3, [pc, #64]	@ (800527c <RTC_ExitInitMode+0x84>)
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	4b0f      	ldr	r3, [pc, #60]	@ (800527c <RTC_ExitInitMode+0x84>)
 8005240:	2120      	movs	r1, #32
 8005242:	438a      	bics	r2, r1
 8005244:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	0018      	movs	r0, r3
 800524a:	f7ff ff6d 	bl	8005128 <HAL_RTC_WaitForSynchro>
 800524e:	1e03      	subs	r3, r0, #0
 8005250:	d007      	beq.n	8005262 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2229      	movs	r2, #41	@ 0x29
 8005256:	2103      	movs	r1, #3
 8005258:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800525a:	230f      	movs	r3, #15
 800525c:	18fb      	adds	r3, r7, r3
 800525e:	2203      	movs	r2, #3
 8005260:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005262:	4b06      	ldr	r3, [pc, #24]	@ (800527c <RTC_ExitInitMode+0x84>)
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	4b05      	ldr	r3, [pc, #20]	@ (800527c <RTC_ExitInitMode+0x84>)
 8005268:	2120      	movs	r1, #32
 800526a:	430a      	orrs	r2, r1
 800526c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800526e:	230f      	movs	r3, #15
 8005270:	18fb      	adds	r3, r7, r3
 8005272:	781b      	ldrb	r3, [r3, #0]
}
 8005274:	0018      	movs	r0, r3
 8005276:	46bd      	mov	sp, r7
 8005278:	b005      	add	sp, #20
 800527a:	bd90      	pop	{r4, r7, pc}
 800527c:	40002800 	.word	0x40002800

08005280 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	0002      	movs	r2, r0
 8005288:	1dfb      	adds	r3, r7, #7
 800528a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005290:	230b      	movs	r3, #11
 8005292:	18fb      	adds	r3, r7, r3
 8005294:	1dfa      	adds	r2, r7, #7
 8005296:	7812      	ldrb	r2, [r2, #0]
 8005298:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800529a:	e008      	b.n	80052ae <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3301      	adds	r3, #1
 80052a0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80052a2:	220b      	movs	r2, #11
 80052a4:	18bb      	adds	r3, r7, r2
 80052a6:	18ba      	adds	r2, r7, r2
 80052a8:	7812      	ldrb	r2, [r2, #0]
 80052aa:	3a0a      	subs	r2, #10
 80052ac:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80052ae:	210b      	movs	r1, #11
 80052b0:	187b      	adds	r3, r7, r1
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b09      	cmp	r3, #9
 80052b6:	d8f1      	bhi.n	800529c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	187b      	adds	r3, r7, r1
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	b2db      	uxtb	r3, r3
}
 80052c8:	0018      	movs	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b004      	add	sp, #16
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	0002      	movs	r2, r0
 80052d8:	1dfb      	adds	r3, r7, #7
 80052da:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80052dc:	1dfb      	adds	r3, r7, #7
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	091b      	lsrs	r3, r3, #4
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	001a      	movs	r2, r3
 80052e6:	0013      	movs	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	189b      	adds	r3, r3, r2
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	1dfb      	adds	r3, r7, #7
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	210f      	movs	r1, #15
 80052fa:	400b      	ands	r3, r1
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	18d3      	adds	r3, r2, r3
 8005300:	b2db      	uxtb	r3, r3
}
 8005302:	0018      	movs	r0, r3
 8005304:	46bd      	mov	sp, r7
 8005306:	b004      	add	sp, #16
 8005308:	bd80      	pop	{r7, pc}

0800530a <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b086      	sub	sp, #24
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2228      	movs	r2, #40	@ 0x28
 800531c:	5c9b      	ldrb	r3, [r3, r2]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_RTCEx_SetSmoothCalib+0x1c>
 8005322:	2302      	movs	r3, #2
 8005324:	e04f      	b.n	80053c6 <HAL_RTCEx_SetSmoothCalib+0xbc>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2228      	movs	r2, #40	@ 0x28
 800532a:	2101      	movs	r1, #1
 800532c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2229      	movs	r2, #41	@ 0x29
 8005332:	2102      	movs	r1, #2
 8005334:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	22ca      	movs	r2, #202	@ 0xca
 800533c:	625a      	str	r2, [r3, #36]	@ 0x24
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2253      	movs	r2, #83	@ 0x53
 8005344:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	2380      	movs	r3, #128	@ 0x80
 800534e:	025b      	lsls	r3, r3, #9
 8005350:	4013      	ands	r3, r2
 8005352:	d022      	beq.n	800539a <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8005354:	f7fd f9ec 	bl	8002730 <HAL_GetTick>
 8005358:	0003      	movs	r3, r0
 800535a:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 800535c:	e016      	b.n	800538c <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800535e:	f7fd f9e7 	bl	8002730 <HAL_GetTick>
 8005362:	0002      	movs	r2, r0
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	1ad2      	subs	r2, r2, r3
 8005368:	23fa      	movs	r3, #250	@ 0xfa
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	429a      	cmp	r2, r3
 800536e:	d90d      	bls.n	800538c <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	22ff      	movs	r2, #255	@ 0xff
 8005376:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2229      	movs	r2, #41	@ 0x29
 800537c:	2103      	movs	r1, #3
 800537e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2228      	movs	r2, #40	@ 0x28
 8005384:	2100      	movs	r1, #0
 8005386:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e01c      	b.n	80053c6 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	2380      	movs	r3, #128	@ 0x80
 8005394:	025b      	lsls	r3, r3, #9
 8005396:	4013      	ands	r3, r2
 8005398:	d1e1      	bne.n	800535e <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	431a      	orrs	r2, r3
 80053a0:	0011      	movs	r1, r2
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	22ff      	movs	r2, #255	@ 0xff
 80053b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2229      	movs	r2, #41	@ 0x29
 80053b8:	2101      	movs	r1, #1
 80053ba:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2228      	movs	r2, #40	@ 0x28
 80053c0:	2100      	movs	r1, #0
 80053c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	0018      	movs	r0, r3
 80053c8:	46bd      	mov	sp, r7
 80053ca:	b006      	add	sp, #24
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2228      	movs	r2, #40	@ 0x28
 80053de:	5c9b      	ldrb	r3, [r3, r2]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e035      	b.n	8005454 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2228      	movs	r2, #40	@ 0x28
 80053ec:	2101      	movs	r1, #1
 80053ee:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2229      	movs	r2, #41	@ 0x29
 80053f4:	2102      	movs	r1, #2
 80053f6:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	22ca      	movs	r2, #202	@ 0xca
 80053fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2253      	movs	r2, #83	@ 0x53
 8005406:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4912      	ldr	r1, [pc, #72]	@ (800545c <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8005414:	400a      	ands	r2, r1
 8005416:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6999      	ldr	r1, [r3, #24]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2180      	movs	r1, #128	@ 0x80
 8005434:	0409      	lsls	r1, r1, #16
 8005436:	430a      	orrs	r2, r1
 8005438:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	22ff      	movs	r2, #255	@ 0xff
 8005440:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2229      	movs	r2, #41	@ 0x29
 8005446:	2101      	movs	r1, #1
 8005448:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2228      	movs	r2, #40	@ 0x28
 800544e:	2100      	movs	r1, #0
 8005450:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	0018      	movs	r0, r3
 8005456:	46bd      	mov	sp, r7
 8005458:	b002      	add	sp, #8
 800545a:	bd80      	pop	{r7, pc}
 800545c:	fff7ffff 	.word	0xfff7ffff

08005460 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005468:	46c0      	nop			@ (mov r8, r8)
 800546a:	46bd      	mov	sp, r7
 800546c:	b002      	add	sp, #8
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	001a      	movs	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	18d3      	adds	r3, r2, r3
 8005488:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	3301      	adds	r3, #1
 800548e:	33ff      	adds	r3, #255	@ 0xff
 8005490:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	18d3      	adds	r3, r2, r3
 800549a:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	601a      	str	r2, [r3, #0]
}
 80054a2:	46c0      	nop			@ (mov r8, r8)
 80054a4:	46bd      	mov	sp, r7
 80054a6:	b006      	add	sp, #24
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b084      	sub	sp, #16
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	001a      	movs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	18d3      	adds	r3, r2, r3
 80054c0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	3301      	adds	r3, #1
 80054c6:	33ff      	adds	r3, #255	@ 0xff
 80054c8:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	18d3      	adds	r3, r2, r3
 80054d2:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	681b      	ldr	r3, [r3, #0]
}
 80054d8:	0018      	movs	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	b004      	add	sp, #16
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e04a      	b.n	8005588 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	223d      	movs	r2, #61	@ 0x3d
 80054f6:	5c9b      	ldrb	r3, [r3, r2]
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d107      	bne.n	800550e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	223c      	movs	r2, #60	@ 0x3c
 8005502:	2100      	movs	r1, #0
 8005504:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	0018      	movs	r0, r3
 800550a:	f7fc ff67 	bl	80023dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	223d      	movs	r2, #61	@ 0x3d
 8005512:	2102      	movs	r1, #2
 8005514:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3304      	adds	r3, #4
 800551e:	0019      	movs	r1, r3
 8005520:	0010      	movs	r0, r2
 8005522:	f000 fc87 	bl	8005e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2248      	movs	r2, #72	@ 0x48
 800552a:	2101      	movs	r1, #1
 800552c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	223e      	movs	r2, #62	@ 0x3e
 8005532:	2101      	movs	r1, #1
 8005534:	5499      	strb	r1, [r3, r2]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	223f      	movs	r2, #63	@ 0x3f
 800553a:	2101      	movs	r1, #1
 800553c:	5499      	strb	r1, [r3, r2]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2240      	movs	r2, #64	@ 0x40
 8005542:	2101      	movs	r1, #1
 8005544:	5499      	strb	r1, [r3, r2]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2241      	movs	r2, #65	@ 0x41
 800554a:	2101      	movs	r1, #1
 800554c:	5499      	strb	r1, [r3, r2]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2242      	movs	r2, #66	@ 0x42
 8005552:	2101      	movs	r1, #1
 8005554:	5499      	strb	r1, [r3, r2]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2243      	movs	r2, #67	@ 0x43
 800555a:	2101      	movs	r1, #1
 800555c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2244      	movs	r2, #68	@ 0x44
 8005562:	2101      	movs	r1, #1
 8005564:	5499      	strb	r1, [r3, r2]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2245      	movs	r2, #69	@ 0x45
 800556a:	2101      	movs	r1, #1
 800556c:	5499      	strb	r1, [r3, r2]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2246      	movs	r2, #70	@ 0x46
 8005572:	2101      	movs	r1, #1
 8005574:	5499      	strb	r1, [r3, r2]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2247      	movs	r2, #71	@ 0x47
 800557a:	2101      	movs	r1, #1
 800557c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	223d      	movs	r2, #61	@ 0x3d
 8005582:	2101      	movs	r1, #1
 8005584:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	0018      	movs	r0, r3
 800558a:	46bd      	mov	sp, r7
 800558c:	b002      	add	sp, #8
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	223d      	movs	r2, #61	@ 0x3d
 800559c:	5c9b      	ldrb	r3, [r3, r2]
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d001      	beq.n	80055a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e035      	b.n	8005614 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	223d      	movs	r2, #61	@ 0x3d
 80055ac:	2102      	movs	r1, #2
 80055ae:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a19      	ldr	r2, [pc, #100]	@ (800561c <HAL_TIM_Base_Start+0x8c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00a      	beq.n	80055d0 <HAL_TIM_Base_Start+0x40>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	2380      	movs	r3, #128	@ 0x80
 80055c0:	05db      	lsls	r3, r3, #23
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d004      	beq.n	80055d0 <HAL_TIM_Base_Start+0x40>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a15      	ldr	r2, [pc, #84]	@ (8005620 <HAL_TIM_Base_Start+0x90>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d116      	bne.n	80055fe <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	4a13      	ldr	r2, [pc, #76]	@ (8005624 <HAL_TIM_Base_Start+0x94>)
 80055d8:	4013      	ands	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b06      	cmp	r3, #6
 80055e0:	d016      	beq.n	8005610 <HAL_TIM_Base_Start+0x80>
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	2380      	movs	r3, #128	@ 0x80
 80055e6:	025b      	lsls	r3, r3, #9
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d011      	beq.n	8005610 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2101      	movs	r1, #1
 80055f8:	430a      	orrs	r2, r1
 80055fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fc:	e008      	b.n	8005610 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2101      	movs	r1, #1
 800560a:	430a      	orrs	r2, r1
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	e000      	b.n	8005612 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005610:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	0018      	movs	r0, r3
 8005616:	46bd      	mov	sp, r7
 8005618:	b004      	add	sp, #16
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40012c00 	.word	0x40012c00
 8005620:	40000400 	.word	0x40000400
 8005624:	00010007 	.word	0x00010007

08005628 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	4a0d      	ldr	r2, [pc, #52]	@ (800566c <HAL_TIM_Base_Stop+0x44>)
 8005638:	4013      	ands	r3, r2
 800563a:	d10d      	bne.n	8005658 <HAL_TIM_Base_Stop+0x30>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	4a0b      	ldr	r2, [pc, #44]	@ (8005670 <HAL_TIM_Base_Stop+0x48>)
 8005644:	4013      	ands	r3, r2
 8005646:	d107      	bne.n	8005658 <HAL_TIM_Base_Stop+0x30>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2101      	movs	r1, #1
 8005654:	438a      	bics	r2, r1
 8005656:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	223d      	movs	r2, #61	@ 0x3d
 800565c:	2101      	movs	r1, #1
 800565e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	0018      	movs	r0, r3
 8005664:	46bd      	mov	sp, r7
 8005666:	b002      	add	sp, #8
 8005668:	bd80      	pop	{r7, pc}
 800566a:	46c0      	nop			@ (mov r8, r8)
 800566c:	00001111 	.word	0x00001111
 8005670:	00000444 	.word	0x00000444

08005674 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	223d      	movs	r2, #61	@ 0x3d
 8005680:	5c9b      	ldrb	r3, [r3, r2]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b01      	cmp	r3, #1
 8005686:	d001      	beq.n	800568c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e03d      	b.n	8005708 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	223d      	movs	r2, #61	@ 0x3d
 8005690:	2102      	movs	r1, #2
 8005692:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2101      	movs	r1, #1
 80056a0:	430a      	orrs	r2, r1
 80056a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a19      	ldr	r2, [pc, #100]	@ (8005710 <HAL_TIM_Base_Start_IT+0x9c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00a      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x50>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	2380      	movs	r3, #128	@ 0x80
 80056b4:	05db      	lsls	r3, r3, #23
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d004      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x50>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a15      	ldr	r2, [pc, #84]	@ (8005714 <HAL_TIM_Base_Start_IT+0xa0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d116      	bne.n	80056f2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	4a13      	ldr	r2, [pc, #76]	@ (8005718 <HAL_TIM_Base_Start_IT+0xa4>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b06      	cmp	r3, #6
 80056d4:	d016      	beq.n	8005704 <HAL_TIM_Base_Start_IT+0x90>
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	2380      	movs	r3, #128	@ 0x80
 80056da:	025b      	lsls	r3, r3, #9
 80056dc:	429a      	cmp	r2, r3
 80056de:	d011      	beq.n	8005704 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2101      	movs	r1, #1
 80056ec:	430a      	orrs	r2, r1
 80056ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f0:	e008      	b.n	8005704 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2101      	movs	r1, #1
 80056fe:	430a      	orrs	r2, r1
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	e000      	b.n	8005706 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005704:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	0018      	movs	r0, r3
 800570a:	46bd      	mov	sp, r7
 800570c:	b004      	add	sp, #16
 800570e:	bd80      	pop	{r7, pc}
 8005710:	40012c00 	.word	0x40012c00
 8005714:	40000400 	.word	0x40000400
 8005718:	00010007 	.word	0x00010007

0800571c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2101      	movs	r1, #1
 8005730:	438a      	bics	r2, r1
 8005732:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	4a0d      	ldr	r2, [pc, #52]	@ (8005770 <HAL_TIM_Base_Stop_IT+0x54>)
 800573c:	4013      	ands	r3, r2
 800573e:	d10d      	bne.n	800575c <HAL_TIM_Base_Stop_IT+0x40>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	4a0b      	ldr	r2, [pc, #44]	@ (8005774 <HAL_TIM_Base_Stop_IT+0x58>)
 8005748:	4013      	ands	r3, r2
 800574a:	d107      	bne.n	800575c <HAL_TIM_Base_Stop_IT+0x40>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2101      	movs	r1, #1
 8005758:	438a      	bics	r2, r1
 800575a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	223d      	movs	r2, #61	@ 0x3d
 8005760:	2101      	movs	r1, #1
 8005762:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	0018      	movs	r0, r3
 8005768:	46bd      	mov	sp, r7
 800576a:	b002      	add	sp, #8
 800576c:	bd80      	pop	{r7, pc}
 800576e:	46c0      	nop			@ (mov r8, r8)
 8005770:	00001111 	.word	0x00001111
 8005774:	00000444 	.word	0x00000444

08005778 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e04a      	b.n	8005820 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	223d      	movs	r2, #61	@ 0x3d
 800578e:	5c9b      	ldrb	r3, [r3, r2]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d107      	bne.n	80057a6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	223c      	movs	r2, #60	@ 0x3c
 800579a:	2100      	movs	r1, #0
 800579c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	0018      	movs	r0, r3
 80057a2:	f7fc fdd1 	bl	8002348 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	223d      	movs	r2, #61	@ 0x3d
 80057aa:	2102      	movs	r1, #2
 80057ac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3304      	adds	r3, #4
 80057b6:	0019      	movs	r1, r3
 80057b8:	0010      	movs	r0, r2
 80057ba:	f000 fb3b 	bl	8005e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2248      	movs	r2, #72	@ 0x48
 80057c2:	2101      	movs	r1, #1
 80057c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	223e      	movs	r2, #62	@ 0x3e
 80057ca:	2101      	movs	r1, #1
 80057cc:	5499      	strb	r1, [r3, r2]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	223f      	movs	r2, #63	@ 0x3f
 80057d2:	2101      	movs	r1, #1
 80057d4:	5499      	strb	r1, [r3, r2]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2240      	movs	r2, #64	@ 0x40
 80057da:	2101      	movs	r1, #1
 80057dc:	5499      	strb	r1, [r3, r2]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2241      	movs	r2, #65	@ 0x41
 80057e2:	2101      	movs	r1, #1
 80057e4:	5499      	strb	r1, [r3, r2]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2242      	movs	r2, #66	@ 0x42
 80057ea:	2101      	movs	r1, #1
 80057ec:	5499      	strb	r1, [r3, r2]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2243      	movs	r2, #67	@ 0x43
 80057f2:	2101      	movs	r1, #1
 80057f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2244      	movs	r2, #68	@ 0x44
 80057fa:	2101      	movs	r1, #1
 80057fc:	5499      	strb	r1, [r3, r2]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2245      	movs	r2, #69	@ 0x45
 8005802:	2101      	movs	r1, #1
 8005804:	5499      	strb	r1, [r3, r2]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2246      	movs	r2, #70	@ 0x46
 800580a:	2101      	movs	r1, #1
 800580c:	5499      	strb	r1, [r3, r2]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2247      	movs	r2, #71	@ 0x47
 8005812:	2101      	movs	r1, #1
 8005814:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	223d      	movs	r2, #61	@ 0x3d
 800581a:	2101      	movs	r1, #1
 800581c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	0018      	movs	r0, r3
 8005822:	46bd      	mov	sp, r7
 8005824:	b002      	add	sp, #8
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d108      	bne.n	800584a <HAL_TIM_PWM_Start+0x22>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	223e      	movs	r2, #62	@ 0x3e
 800583c:	5c9b      	ldrb	r3, [r3, r2]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	3b01      	subs	r3, #1
 8005842:	1e5a      	subs	r2, r3, #1
 8005844:	4193      	sbcs	r3, r2
 8005846:	b2db      	uxtb	r3, r3
 8005848:	e037      	b.n	80058ba <HAL_TIM_PWM_Start+0x92>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b04      	cmp	r3, #4
 800584e:	d108      	bne.n	8005862 <HAL_TIM_PWM_Start+0x3a>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	223f      	movs	r2, #63	@ 0x3f
 8005854:	5c9b      	ldrb	r3, [r3, r2]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	3b01      	subs	r3, #1
 800585a:	1e5a      	subs	r2, r3, #1
 800585c:	4193      	sbcs	r3, r2
 800585e:	b2db      	uxtb	r3, r3
 8005860:	e02b      	b.n	80058ba <HAL_TIM_PWM_Start+0x92>
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b08      	cmp	r3, #8
 8005866:	d108      	bne.n	800587a <HAL_TIM_PWM_Start+0x52>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2240      	movs	r2, #64	@ 0x40
 800586c:	5c9b      	ldrb	r3, [r3, r2]
 800586e:	b2db      	uxtb	r3, r3
 8005870:	3b01      	subs	r3, #1
 8005872:	1e5a      	subs	r2, r3, #1
 8005874:	4193      	sbcs	r3, r2
 8005876:	b2db      	uxtb	r3, r3
 8005878:	e01f      	b.n	80058ba <HAL_TIM_PWM_Start+0x92>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b0c      	cmp	r3, #12
 800587e:	d108      	bne.n	8005892 <HAL_TIM_PWM_Start+0x6a>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2241      	movs	r2, #65	@ 0x41
 8005884:	5c9b      	ldrb	r3, [r3, r2]
 8005886:	b2db      	uxtb	r3, r3
 8005888:	3b01      	subs	r3, #1
 800588a:	1e5a      	subs	r2, r3, #1
 800588c:	4193      	sbcs	r3, r2
 800588e:	b2db      	uxtb	r3, r3
 8005890:	e013      	b.n	80058ba <HAL_TIM_PWM_Start+0x92>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b10      	cmp	r3, #16
 8005896:	d108      	bne.n	80058aa <HAL_TIM_PWM_Start+0x82>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2242      	movs	r2, #66	@ 0x42
 800589c:	5c9b      	ldrb	r3, [r3, r2]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	1e5a      	subs	r2, r3, #1
 80058a4:	4193      	sbcs	r3, r2
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	e007      	b.n	80058ba <HAL_TIM_PWM_Start+0x92>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2243      	movs	r2, #67	@ 0x43
 80058ae:	5c9b      	ldrb	r3, [r3, r2]
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	3b01      	subs	r3, #1
 80058b4:	1e5a      	subs	r2, r3, #1
 80058b6:	4193      	sbcs	r3, r2
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e081      	b.n	80059c6 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d104      	bne.n	80058d2 <HAL_TIM_PWM_Start+0xaa>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	223e      	movs	r2, #62	@ 0x3e
 80058cc:	2102      	movs	r1, #2
 80058ce:	5499      	strb	r1, [r3, r2]
 80058d0:	e023      	b.n	800591a <HAL_TIM_PWM_Start+0xf2>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d104      	bne.n	80058e2 <HAL_TIM_PWM_Start+0xba>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	223f      	movs	r2, #63	@ 0x3f
 80058dc:	2102      	movs	r1, #2
 80058de:	5499      	strb	r1, [r3, r2]
 80058e0:	e01b      	b.n	800591a <HAL_TIM_PWM_Start+0xf2>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d104      	bne.n	80058f2 <HAL_TIM_PWM_Start+0xca>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2240      	movs	r2, #64	@ 0x40
 80058ec:	2102      	movs	r1, #2
 80058ee:	5499      	strb	r1, [r3, r2]
 80058f0:	e013      	b.n	800591a <HAL_TIM_PWM_Start+0xf2>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b0c      	cmp	r3, #12
 80058f6:	d104      	bne.n	8005902 <HAL_TIM_PWM_Start+0xda>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2241      	movs	r2, #65	@ 0x41
 80058fc:	2102      	movs	r1, #2
 80058fe:	5499      	strb	r1, [r3, r2]
 8005900:	e00b      	b.n	800591a <HAL_TIM_PWM_Start+0xf2>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b10      	cmp	r3, #16
 8005906:	d104      	bne.n	8005912 <HAL_TIM_PWM_Start+0xea>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2242      	movs	r2, #66	@ 0x42
 800590c:	2102      	movs	r1, #2
 800590e:	5499      	strb	r1, [r3, r2]
 8005910:	e003      	b.n	800591a <HAL_TIM_PWM_Start+0xf2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2243      	movs	r2, #67	@ 0x43
 8005916:	2102      	movs	r1, #2
 8005918:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6839      	ldr	r1, [r7, #0]
 8005920:	2201      	movs	r2, #1
 8005922:	0018      	movs	r0, r3
 8005924:	f000 fda6 	bl	8006474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a28      	ldr	r2, [pc, #160]	@ (80059d0 <HAL_TIM_PWM_Start+0x1a8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d009      	beq.n	8005946 <HAL_TIM_PWM_Start+0x11e>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a27      	ldr	r2, [pc, #156]	@ (80059d4 <HAL_TIM_PWM_Start+0x1ac>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d004      	beq.n	8005946 <HAL_TIM_PWM_Start+0x11e>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a25      	ldr	r2, [pc, #148]	@ (80059d8 <HAL_TIM_PWM_Start+0x1b0>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d101      	bne.n	800594a <HAL_TIM_PWM_Start+0x122>
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <HAL_TIM_PWM_Start+0x124>
 800594a:	2300      	movs	r3, #0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d008      	beq.n	8005962 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2180      	movs	r1, #128	@ 0x80
 800595c:	0209      	lsls	r1, r1, #8
 800595e:	430a      	orrs	r2, r1
 8005960:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a1a      	ldr	r2, [pc, #104]	@ (80059d0 <HAL_TIM_PWM_Start+0x1a8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00a      	beq.n	8005982 <HAL_TIM_PWM_Start+0x15a>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	2380      	movs	r3, #128	@ 0x80
 8005972:	05db      	lsls	r3, r3, #23
 8005974:	429a      	cmp	r2, r3
 8005976:	d004      	beq.n	8005982 <HAL_TIM_PWM_Start+0x15a>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a17      	ldr	r2, [pc, #92]	@ (80059dc <HAL_TIM_PWM_Start+0x1b4>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d116      	bne.n	80059b0 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	4a15      	ldr	r2, [pc, #84]	@ (80059e0 <HAL_TIM_PWM_Start+0x1b8>)
 800598a:	4013      	ands	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b06      	cmp	r3, #6
 8005992:	d016      	beq.n	80059c2 <HAL_TIM_PWM_Start+0x19a>
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	2380      	movs	r3, #128	@ 0x80
 8005998:	025b      	lsls	r3, r3, #9
 800599a:	429a      	cmp	r2, r3
 800599c:	d011      	beq.n	80059c2 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2101      	movs	r1, #1
 80059aa:	430a      	orrs	r2, r1
 80059ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ae:	e008      	b.n	80059c2 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2101      	movs	r1, #1
 80059bc:	430a      	orrs	r2, r1
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	e000      	b.n	80059c4 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	0018      	movs	r0, r3
 80059c8:	46bd      	mov	sp, r7
 80059ca:	b004      	add	sp, #16
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	46c0      	nop			@ (mov r8, r8)
 80059d0:	40012c00 	.word	0x40012c00
 80059d4:	40014400 	.word	0x40014400
 80059d8:	40014800 	.word	0x40014800
 80059dc:	40000400 	.word	0x40000400
 80059e0:	00010007 	.word	0x00010007

080059e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2202      	movs	r2, #2
 8005a00:	4013      	ands	r3, r2
 8005a02:	d021      	beq.n	8005a48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2202      	movs	r2, #2
 8005a08:	4013      	ands	r3, r2
 8005a0a:	d01d      	beq.n	8005a48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2203      	movs	r2, #3
 8005a12:	4252      	negs	r2, r2
 8005a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	2203      	movs	r2, #3
 8005a24:	4013      	ands	r3, r2
 8005a26:	d004      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f000 f9ea 	bl	8005e04 <HAL_TIM_IC_CaptureCallback>
 8005a30:	e007      	b.n	8005a42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	0018      	movs	r0, r3
 8005a36:	f000 f9dd 	bl	8005df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	f000 f9e9 	bl	8005e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2204      	movs	r2, #4
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	d022      	beq.n	8005a96 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2204      	movs	r2, #4
 8005a54:	4013      	ands	r3, r2
 8005a56:	d01e      	beq.n	8005a96 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2205      	movs	r2, #5
 8005a5e:	4252      	negs	r2, r2
 8005a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2202      	movs	r2, #2
 8005a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	23c0      	movs	r3, #192	@ 0xc0
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4013      	ands	r3, r2
 8005a74:	d004      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	0018      	movs	r0, r3
 8005a7a:	f000 f9c3 	bl	8005e04 <HAL_TIM_IC_CaptureCallback>
 8005a7e:	e007      	b.n	8005a90 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	0018      	movs	r0, r3
 8005a84:	f000 f9b6 	bl	8005df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f000 f9c2 	bl	8005e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2208      	movs	r2, #8
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d021      	beq.n	8005ae2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2208      	movs	r2, #8
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	d01d      	beq.n	8005ae2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2209      	movs	r2, #9
 8005aac:	4252      	negs	r2, r2
 8005aae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2204      	movs	r2, #4
 8005ab4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	2203      	movs	r2, #3
 8005abe:	4013      	ands	r3, r2
 8005ac0:	d004      	beq.n	8005acc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f000 f99d 	bl	8005e04 <HAL_TIM_IC_CaptureCallback>
 8005aca:	e007      	b.n	8005adc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	0018      	movs	r0, r3
 8005ad0:	f000 f990 	bl	8005df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	f000 f99c 	bl	8005e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2210      	movs	r2, #16
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d022      	beq.n	8005b30 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2210      	movs	r2, #16
 8005aee:	4013      	ands	r3, r2
 8005af0:	d01e      	beq.n	8005b30 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2211      	movs	r2, #17
 8005af8:	4252      	negs	r2, r2
 8005afa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2208      	movs	r2, #8
 8005b00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69da      	ldr	r2, [r3, #28]
 8005b08:	23c0      	movs	r3, #192	@ 0xc0
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d004      	beq.n	8005b1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	0018      	movs	r0, r3
 8005b14:	f000 f976 	bl	8005e04 <HAL_TIM_IC_CaptureCallback>
 8005b18:	e007      	b.n	8005b2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	f000 f969 	bl	8005df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	0018      	movs	r0, r3
 8005b26:	f000 f975 	bl	8005e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2201      	movs	r2, #1
 8005b34:	4013      	ands	r3, r2
 8005b36:	d00c      	beq.n	8005b52 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	d008      	beq.n	8005b52 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2202      	movs	r2, #2
 8005b46:	4252      	negs	r2, r2
 8005b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	f7fb fe5b 	bl	8001808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2280      	movs	r2, #128	@ 0x80
 8005b56:	4013      	ands	r3, r2
 8005b58:	d104      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	2380      	movs	r3, #128	@ 0x80
 8005b5e:	019b      	lsls	r3, r3, #6
 8005b60:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b62:	d00b      	beq.n	8005b7c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2280      	movs	r2, #128	@ 0x80
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d007      	beq.n	8005b7c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a1e      	ldr	r2, [pc, #120]	@ (8005bec <HAL_TIM_IRQHandler+0x208>)
 8005b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	0018      	movs	r0, r3
 8005b78:	f000 fdac 	bl	80066d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	2380      	movs	r3, #128	@ 0x80
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	4013      	ands	r3, r2
 8005b84:	d00b      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2280      	movs	r2, #128	@ 0x80
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d007      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a17      	ldr	r2, [pc, #92]	@ (8005bf0 <HAL_TIM_IRQHandler+0x20c>)
 8005b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f000 fda3 	bl	80066e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2240      	movs	r2, #64	@ 0x40
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	d00c      	beq.n	8005bc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2240      	movs	r2, #64	@ 0x40
 8005baa:	4013      	ands	r3, r2
 8005bac:	d008      	beq.n	8005bc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2241      	movs	r2, #65	@ 0x41
 8005bb4:	4252      	negs	r2, r2
 8005bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f000 f932 	bl	8005e24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	d00c      	beq.n	8005be2 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	4013      	ands	r3, r2
 8005bce:	d008      	beq.n	8005be2 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2221      	movs	r2, #33	@ 0x21
 8005bd6:	4252      	negs	r2, r2
 8005bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f000 fd71 	bl	80066c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005be2:	46c0      	nop			@ (mov r8, r8)
 8005be4:	46bd      	mov	sp, r7
 8005be6:	b004      	add	sp, #16
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	46c0      	nop			@ (mov r8, r8)
 8005bec:	ffffdf7f 	.word	0xffffdf7f
 8005bf0:	fffffeff 	.word	0xfffffeff

08005bf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c00:	2317      	movs	r3, #23
 8005c02:	18fb      	adds	r3, r7, r3
 8005c04:	2200      	movs	r2, #0
 8005c06:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	223c      	movs	r2, #60	@ 0x3c
 8005c0c:	5c9b      	ldrb	r3, [r3, r2]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d101      	bne.n	8005c16 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005c12:	2302      	movs	r3, #2
 8005c14:	e0e5      	b.n	8005de2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	223c      	movs	r2, #60	@ 0x3c
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b14      	cmp	r3, #20
 8005c22:	d900      	bls.n	8005c26 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005c24:	e0d1      	b.n	8005dca <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	009a      	lsls	r2, r3, #2
 8005c2a:	4b70      	ldr	r3, [pc, #448]	@ (8005dec <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005c2c:	18d3      	adds	r3, r2, r3
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	0011      	movs	r1, r2
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	f000 f97e 	bl	8005f3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2108      	movs	r1, #8
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2104      	movs	r1, #4
 8005c5c:	438a      	bics	r2, r1
 8005c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6999      	ldr	r1, [r3, #24]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	691a      	ldr	r2, [r3, #16]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	619a      	str	r2, [r3, #24]
      break;
 8005c72:	e0af      	b.n	8005dd4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	0011      	movs	r1, r2
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f000 f9dd 	bl	800603c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	699a      	ldr	r2, [r3, #24]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2180      	movs	r1, #128	@ 0x80
 8005c8e:	0109      	lsls	r1, r1, #4
 8005c90:	430a      	orrs	r2, r1
 8005c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4954      	ldr	r1, [pc, #336]	@ (8005df0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005ca0:	400a      	ands	r2, r1
 8005ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6999      	ldr	r1, [r3, #24]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	021a      	lsls	r2, r3, #8
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	619a      	str	r2, [r3, #24]
      break;
 8005cb8:	e08c      	b.n	8005dd4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	0011      	movs	r1, r2
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	f000 fa38 	bl	8006138 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69da      	ldr	r2, [r3, #28]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2108      	movs	r1, #8
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	69da      	ldr	r2, [r3, #28]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2104      	movs	r1, #4
 8005ce4:	438a      	bics	r2, r1
 8005ce6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69d9      	ldr	r1, [r3, #28]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	691a      	ldr	r2, [r3, #16]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	61da      	str	r2, [r3, #28]
      break;
 8005cfa:	e06b      	b.n	8005dd4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	0011      	movs	r1, r2
 8005d04:	0018      	movs	r0, r3
 8005d06:	f000 fa99 	bl	800623c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69da      	ldr	r2, [r3, #28]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2180      	movs	r1, #128	@ 0x80
 8005d16:	0109      	lsls	r1, r1, #4
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69da      	ldr	r2, [r3, #28]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4932      	ldr	r1, [pc, #200]	@ (8005df0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005d28:	400a      	ands	r2, r1
 8005d2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	69d9      	ldr	r1, [r3, #28]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	021a      	lsls	r2, r3, #8
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	61da      	str	r2, [r3, #28]
      break;
 8005d40:	e048      	b.n	8005dd4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	0011      	movs	r1, r2
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	f000 fada 	bl	8006304 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2108      	movs	r1, #8
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2104      	movs	r1, #4
 8005d6c:	438a      	bics	r2, r1
 8005d6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d82:	e027      	b.n	8005dd4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	0011      	movs	r1, r2
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	f000 fb13 	bl	80063b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2180      	movs	r1, #128	@ 0x80
 8005d9e:	0109      	lsls	r1, r1, #4
 8005da0:	430a      	orrs	r2, r1
 8005da2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4910      	ldr	r1, [pc, #64]	@ (8005df0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005db0:	400a      	ands	r2, r1
 8005db2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	021a      	lsls	r2, r3, #8
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005dc8:	e004      	b.n	8005dd4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005dca:	2317      	movs	r3, #23
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	2201      	movs	r2, #1
 8005dd0:	701a      	strb	r2, [r3, #0]
      break;
 8005dd2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	223c      	movs	r2, #60	@ 0x3c
 8005dd8:	2100      	movs	r1, #0
 8005dda:	5499      	strb	r1, [r3, r2]

  return status;
 8005ddc:	2317      	movs	r3, #23
 8005dde:	18fb      	adds	r3, r7, r3
 8005de0:	781b      	ldrb	r3, [r3, #0]
}
 8005de2:	0018      	movs	r0, r3
 8005de4:	46bd      	mov	sp, r7
 8005de6:	b006      	add	sp, #24
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	46c0      	nop			@ (mov r8, r8)
 8005dec:	080067f0 	.word	0x080067f0
 8005df0:	fffffbff 	.word	0xfffffbff

08005df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dfc:	46c0      	nop			@ (mov r8, r8)
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	b002      	add	sp, #8
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e0c:	46c0      	nop			@ (mov r8, r8)
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	b002      	add	sp, #8
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e1c:	46c0      	nop			@ (mov r8, r8)
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	b002      	add	sp, #8
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e2c:	46c0      	nop			@ (mov r8, r8)
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	b002      	add	sp, #8
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a37      	ldr	r2, [pc, #220]	@ (8005f24 <TIM_Base_SetConfig+0xf0>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d008      	beq.n	8005e5e <TIM_Base_SetConfig+0x2a>
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	2380      	movs	r3, #128	@ 0x80
 8005e50:	05db      	lsls	r3, r3, #23
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d003      	beq.n	8005e5e <TIM_Base_SetConfig+0x2a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a33      	ldr	r2, [pc, #204]	@ (8005f28 <TIM_Base_SetConfig+0xf4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d108      	bne.n	8005e70 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2270      	movs	r2, #112	@ 0x70
 8005e62:	4393      	bics	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a2c      	ldr	r2, [pc, #176]	@ (8005f24 <TIM_Base_SetConfig+0xf0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d014      	beq.n	8005ea2 <TIM_Base_SetConfig+0x6e>
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	2380      	movs	r3, #128	@ 0x80
 8005e7c:	05db      	lsls	r3, r3, #23
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d00f      	beq.n	8005ea2 <TIM_Base_SetConfig+0x6e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a28      	ldr	r2, [pc, #160]	@ (8005f28 <TIM_Base_SetConfig+0xf4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00b      	beq.n	8005ea2 <TIM_Base_SetConfig+0x6e>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a27      	ldr	r2, [pc, #156]	@ (8005f2c <TIM_Base_SetConfig+0xf8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d007      	beq.n	8005ea2 <TIM_Base_SetConfig+0x6e>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a26      	ldr	r2, [pc, #152]	@ (8005f30 <TIM_Base_SetConfig+0xfc>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d003      	beq.n	8005ea2 <TIM_Base_SetConfig+0x6e>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a25      	ldr	r2, [pc, #148]	@ (8005f34 <TIM_Base_SetConfig+0x100>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d108      	bne.n	8005eb4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4a24      	ldr	r2, [pc, #144]	@ (8005f38 <TIM_Base_SetConfig+0x104>)
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2280      	movs	r2, #128	@ 0x80
 8005eb8:	4393      	bics	r3, r2
 8005eba:	001a      	movs	r2, r3
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a11      	ldr	r2, [pc, #68]	@ (8005f24 <TIM_Base_SetConfig+0xf0>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d007      	beq.n	8005ef2 <TIM_Base_SetConfig+0xbe>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a12      	ldr	r2, [pc, #72]	@ (8005f30 <TIM_Base_SetConfig+0xfc>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d003      	beq.n	8005ef2 <TIM_Base_SetConfig+0xbe>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a11      	ldr	r2, [pc, #68]	@ (8005f34 <TIM_Base_SetConfig+0x100>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d103      	bne.n	8005efa <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	691a      	ldr	r2, [r3, #16]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	2201      	movs	r2, #1
 8005f06:	4013      	ands	r3, r2
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d106      	bne.n	8005f1a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	2201      	movs	r2, #1
 8005f12:	4393      	bics	r3, r2
 8005f14:	001a      	movs	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	611a      	str	r2, [r3, #16]
  }
}
 8005f1a:	46c0      	nop			@ (mov r8, r8)
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	b004      	add	sp, #16
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	46c0      	nop			@ (mov r8, r8)
 8005f24:	40012c00 	.word	0x40012c00
 8005f28:	40000400 	.word	0x40000400
 8005f2c:	40002000 	.word	0x40002000
 8005f30:	40014400 	.word	0x40014400
 8005f34:	40014800 	.word	0x40014800
 8005f38:	fffffcff 	.word	0xfffffcff

08005f3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	2201      	movs	r2, #1
 8005f52:	4393      	bics	r3, r2
 8005f54:	001a      	movs	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4a2e      	ldr	r2, [pc, #184]	@ (8006024 <TIM_OC1_SetConfig+0xe8>)
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2203      	movs	r2, #3
 8005f72:	4393      	bics	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	2202      	movs	r2, #2
 8005f84:	4393      	bics	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a24      	ldr	r2, [pc, #144]	@ (8006028 <TIM_OC1_SetConfig+0xec>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d007      	beq.n	8005faa <TIM_OC1_SetConfig+0x6e>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a23      	ldr	r2, [pc, #140]	@ (800602c <TIM_OC1_SetConfig+0xf0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d003      	beq.n	8005faa <TIM_OC1_SetConfig+0x6e>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a22      	ldr	r2, [pc, #136]	@ (8006030 <TIM_OC1_SetConfig+0xf4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d10c      	bne.n	8005fc4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	2208      	movs	r2, #8
 8005fae:	4393      	bics	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2204      	movs	r2, #4
 8005fc0:	4393      	bics	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a18      	ldr	r2, [pc, #96]	@ (8006028 <TIM_OC1_SetConfig+0xec>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d007      	beq.n	8005fdc <TIM_OC1_SetConfig+0xa0>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a17      	ldr	r2, [pc, #92]	@ (800602c <TIM_OC1_SetConfig+0xf0>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d003      	beq.n	8005fdc <TIM_OC1_SetConfig+0xa0>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a16      	ldr	r2, [pc, #88]	@ (8006030 <TIM_OC1_SetConfig+0xf4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d111      	bne.n	8006000 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	4a15      	ldr	r2, [pc, #84]	@ (8006034 <TIM_OC1_SetConfig+0xf8>)
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	4a14      	ldr	r2, [pc, #80]	@ (8006038 <TIM_OC1_SetConfig+0xfc>)
 8005fe8:	4013      	ands	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	621a      	str	r2, [r3, #32]
}
 800601a:	46c0      	nop			@ (mov r8, r8)
 800601c:	46bd      	mov	sp, r7
 800601e:	b006      	add	sp, #24
 8006020:	bd80      	pop	{r7, pc}
 8006022:	46c0      	nop			@ (mov r8, r8)
 8006024:	fffeff8f 	.word	0xfffeff8f
 8006028:	40012c00 	.word	0x40012c00
 800602c:	40014400 	.word	0x40014400
 8006030:	40014800 	.word	0x40014800
 8006034:	fffffeff 	.word	0xfffffeff
 8006038:	fffffdff 	.word	0xfffffdff

0800603c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	2210      	movs	r2, #16
 8006052:	4393      	bics	r3, r2
 8006054:	001a      	movs	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	4a2c      	ldr	r2, [pc, #176]	@ (800611c <TIM_OC2_SetConfig+0xe0>)
 800606a:	4013      	ands	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4a2b      	ldr	r2, [pc, #172]	@ (8006120 <TIM_OC2_SetConfig+0xe4>)
 8006072:	4013      	ands	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2220      	movs	r2, #32
 8006086:	4393      	bics	r3, r2
 8006088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	011b      	lsls	r3, r3, #4
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a22      	ldr	r2, [pc, #136]	@ (8006124 <TIM_OC2_SetConfig+0xe8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d10d      	bne.n	80060ba <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2280      	movs	r2, #128	@ 0x80
 80060a2:	4393      	bics	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2240      	movs	r2, #64	@ 0x40
 80060b6:	4393      	bics	r3, r2
 80060b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a19      	ldr	r2, [pc, #100]	@ (8006124 <TIM_OC2_SetConfig+0xe8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d007      	beq.n	80060d2 <TIM_OC2_SetConfig+0x96>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a18      	ldr	r2, [pc, #96]	@ (8006128 <TIM_OC2_SetConfig+0xec>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d003      	beq.n	80060d2 <TIM_OC2_SetConfig+0x96>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a17      	ldr	r2, [pc, #92]	@ (800612c <TIM_OC2_SetConfig+0xf0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d113      	bne.n	80060fa <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	4a16      	ldr	r2, [pc, #88]	@ (8006130 <TIM_OC2_SetConfig+0xf4>)
 80060d6:	4013      	ands	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	4a15      	ldr	r2, [pc, #84]	@ (8006134 <TIM_OC2_SetConfig+0xf8>)
 80060de:	4013      	ands	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	621a      	str	r2, [r3, #32]
}
 8006114:	46c0      	nop			@ (mov r8, r8)
 8006116:	46bd      	mov	sp, r7
 8006118:	b006      	add	sp, #24
 800611a:	bd80      	pop	{r7, pc}
 800611c:	feff8fff 	.word	0xfeff8fff
 8006120:	fffffcff 	.word	0xfffffcff
 8006124:	40012c00 	.word	0x40012c00
 8006128:	40014400 	.word	0x40014400
 800612c:	40014800 	.word	0x40014800
 8006130:	fffffbff 	.word	0xfffffbff
 8006134:	fffff7ff 	.word	0xfffff7ff

08006138 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	4a31      	ldr	r2, [pc, #196]	@ (8006214 <TIM_OC3_SetConfig+0xdc>)
 800614e:	401a      	ands	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4a2d      	ldr	r2, [pc, #180]	@ (8006218 <TIM_OC3_SetConfig+0xe0>)
 8006164:	4013      	ands	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2203      	movs	r2, #3
 800616c:	4393      	bics	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	4a27      	ldr	r2, [pc, #156]	@ (800621c <TIM_OC3_SetConfig+0xe4>)
 800617e:	4013      	ands	r3, r2
 8006180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	021b      	lsls	r3, r3, #8
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a23      	ldr	r2, [pc, #140]	@ (8006220 <TIM_OC3_SetConfig+0xe8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d10d      	bne.n	80061b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	4a22      	ldr	r2, [pc, #136]	@ (8006224 <TIM_OC3_SetConfig+0xec>)
 800619a:	4013      	ands	r3, r2
 800619c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006228 <TIM_OC3_SetConfig+0xf0>)
 80061ae:	4013      	ands	r3, r2
 80061b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a1a      	ldr	r2, [pc, #104]	@ (8006220 <TIM_OC3_SetConfig+0xe8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d007      	beq.n	80061ca <TIM_OC3_SetConfig+0x92>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a1b      	ldr	r2, [pc, #108]	@ (800622c <TIM_OC3_SetConfig+0xf4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d003      	beq.n	80061ca <TIM_OC3_SetConfig+0x92>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006230 <TIM_OC3_SetConfig+0xf8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d113      	bne.n	80061f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	4a19      	ldr	r2, [pc, #100]	@ (8006234 <TIM_OC3_SetConfig+0xfc>)
 80061ce:	4013      	ands	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	4a18      	ldr	r2, [pc, #96]	@ (8006238 <TIM_OC3_SetConfig+0x100>)
 80061d6:	4013      	ands	r3, r2
 80061d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	011b      	lsls	r3, r3, #4
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	621a      	str	r2, [r3, #32]
}
 800620c:	46c0      	nop			@ (mov r8, r8)
 800620e:	46bd      	mov	sp, r7
 8006210:	b006      	add	sp, #24
 8006212:	bd80      	pop	{r7, pc}
 8006214:	fffffeff 	.word	0xfffffeff
 8006218:	fffeff8f 	.word	0xfffeff8f
 800621c:	fffffdff 	.word	0xfffffdff
 8006220:	40012c00 	.word	0x40012c00
 8006224:	fffff7ff 	.word	0xfffff7ff
 8006228:	fffffbff 	.word	0xfffffbff
 800622c:	40014400 	.word	0x40014400
 8006230:	40014800 	.word	0x40014800
 8006234:	ffffefff 	.word	0xffffefff
 8006238:	ffffdfff 	.word	0xffffdfff

0800623c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	4a24      	ldr	r2, [pc, #144]	@ (80062e4 <TIM_OC4_SetConfig+0xa8>)
 8006252:	401a      	ands	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4a20      	ldr	r2, [pc, #128]	@ (80062e8 <TIM_OC4_SetConfig+0xac>)
 8006268:	4013      	ands	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4a1f      	ldr	r2, [pc, #124]	@ (80062ec <TIM_OC4_SetConfig+0xb0>)
 8006270:	4013      	ands	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	021b      	lsls	r3, r3, #8
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	4313      	orrs	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	4a1b      	ldr	r2, [pc, #108]	@ (80062f0 <TIM_OC4_SetConfig+0xb4>)
 8006284:	4013      	ands	r3, r2
 8006286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	031b      	lsls	r3, r3, #12
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	4313      	orrs	r3, r2
 8006292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a17      	ldr	r2, [pc, #92]	@ (80062f4 <TIM_OC4_SetConfig+0xb8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d007      	beq.n	80062ac <TIM_OC4_SetConfig+0x70>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a16      	ldr	r2, [pc, #88]	@ (80062f8 <TIM_OC4_SetConfig+0xbc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d003      	beq.n	80062ac <TIM_OC4_SetConfig+0x70>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a15      	ldr	r2, [pc, #84]	@ (80062fc <TIM_OC4_SetConfig+0xc0>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d109      	bne.n	80062c0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	4a14      	ldr	r2, [pc, #80]	@ (8006300 <TIM_OC4_SetConfig+0xc4>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	019b      	lsls	r3, r3, #6
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	4313      	orrs	r3, r2
 80062be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	621a      	str	r2, [r3, #32]
}
 80062da:	46c0      	nop			@ (mov r8, r8)
 80062dc:	46bd      	mov	sp, r7
 80062de:	b006      	add	sp, #24
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	46c0      	nop			@ (mov r8, r8)
 80062e4:	ffffefff 	.word	0xffffefff
 80062e8:	feff8fff 	.word	0xfeff8fff
 80062ec:	fffffcff 	.word	0xfffffcff
 80062f0:	ffffdfff 	.word	0xffffdfff
 80062f4:	40012c00 	.word	0x40012c00
 80062f8:	40014400 	.word	0x40014400
 80062fc:	40014800 	.word	0x40014800
 8006300:	ffffbfff 	.word	0xffffbfff

08006304 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	4a21      	ldr	r2, [pc, #132]	@ (80063a0 <TIM_OC5_SetConfig+0x9c>)
 800631a:	401a      	ands	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800632a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4a1d      	ldr	r2, [pc, #116]	@ (80063a4 <TIM_OC5_SetConfig+0xa0>)
 8006330:	4013      	ands	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	4a19      	ldr	r2, [pc, #100]	@ (80063a8 <TIM_OC5_SetConfig+0xa4>)
 8006342:	4013      	ands	r3, r2
 8006344:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	041b      	lsls	r3, r3, #16
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a15      	ldr	r2, [pc, #84]	@ (80063ac <TIM_OC5_SetConfig+0xa8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d007      	beq.n	800636a <TIM_OC5_SetConfig+0x66>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a14      	ldr	r2, [pc, #80]	@ (80063b0 <TIM_OC5_SetConfig+0xac>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d003      	beq.n	800636a <TIM_OC5_SetConfig+0x66>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a13      	ldr	r2, [pc, #76]	@ (80063b4 <TIM_OC5_SetConfig+0xb0>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d109      	bne.n	800637e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	4a0c      	ldr	r2, [pc, #48]	@ (80063a0 <TIM_OC5_SetConfig+0x9c>)
 800636e:	4013      	ands	r3, r2
 8006370:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	021b      	lsls	r3, r3, #8
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	4313      	orrs	r3, r2
 800637c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	621a      	str	r2, [r3, #32]
}
 8006398:	46c0      	nop			@ (mov r8, r8)
 800639a:	46bd      	mov	sp, r7
 800639c:	b006      	add	sp, #24
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	fffeffff 	.word	0xfffeffff
 80063a4:	fffeff8f 	.word	0xfffeff8f
 80063a8:	fffdffff 	.word	0xfffdffff
 80063ac:	40012c00 	.word	0x40012c00
 80063b0:	40014400 	.word	0x40014400
 80063b4:	40014800 	.word	0x40014800

080063b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	4a22      	ldr	r2, [pc, #136]	@ (8006458 <TIM_OC6_SetConfig+0xa0>)
 80063ce:	401a      	ands	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4a1e      	ldr	r2, [pc, #120]	@ (800645c <TIM_OC6_SetConfig+0xa4>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	021b      	lsls	r3, r3, #8
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	4a1a      	ldr	r2, [pc, #104]	@ (8006460 <TIM_OC6_SetConfig+0xa8>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	051b      	lsls	r3, r3, #20
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	4313      	orrs	r3, r2
 8006406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a16      	ldr	r2, [pc, #88]	@ (8006464 <TIM_OC6_SetConfig+0xac>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d007      	beq.n	8006420 <TIM_OC6_SetConfig+0x68>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a15      	ldr	r2, [pc, #84]	@ (8006468 <TIM_OC6_SetConfig+0xb0>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d003      	beq.n	8006420 <TIM_OC6_SetConfig+0x68>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a14      	ldr	r2, [pc, #80]	@ (800646c <TIM_OC6_SetConfig+0xb4>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d109      	bne.n	8006434 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	4a13      	ldr	r2, [pc, #76]	@ (8006470 <TIM_OC6_SetConfig+0xb8>)
 8006424:	4013      	ands	r3, r2
 8006426:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	029b      	lsls	r3, r3, #10
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	621a      	str	r2, [r3, #32]
}
 800644e:	46c0      	nop			@ (mov r8, r8)
 8006450:	46bd      	mov	sp, r7
 8006452:	b006      	add	sp, #24
 8006454:	bd80      	pop	{r7, pc}
 8006456:	46c0      	nop			@ (mov r8, r8)
 8006458:	ffefffff 	.word	0xffefffff
 800645c:	feff8fff 	.word	0xfeff8fff
 8006460:	ffdfffff 	.word	0xffdfffff
 8006464:	40012c00 	.word	0x40012c00
 8006468:	40014400 	.word	0x40014400
 800646c:	40014800 	.word	0x40014800
 8006470:	fffbffff 	.word	0xfffbffff

08006474 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	221f      	movs	r2, #31
 8006484:	4013      	ands	r3, r2
 8006486:	2201      	movs	r2, #1
 8006488:	409a      	lsls	r2, r3
 800648a:	0013      	movs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	43d2      	mvns	r2, r2
 8006496:	401a      	ands	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a1a      	ldr	r2, [r3, #32]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	211f      	movs	r1, #31
 80064a4:	400b      	ands	r3, r1
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	4099      	lsls	r1, r3
 80064aa:	000b      	movs	r3, r1
 80064ac:	431a      	orrs	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	621a      	str	r2, [r3, #32]
}
 80064b2:	46c0      	nop			@ (mov r8, r8)
 80064b4:	46bd      	mov	sp, r7
 80064b6:	b006      	add	sp, #24
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	223c      	movs	r2, #60	@ 0x3c
 80064ca:	5c9b      	ldrb	r3, [r3, r2]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d101      	bne.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064d0:	2302      	movs	r3, #2
 80064d2:	e050      	b.n	8006576 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	223c      	movs	r2, #60	@ 0x3c
 80064d8:	2101      	movs	r1, #1
 80064da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	223d      	movs	r2, #61	@ 0x3d
 80064e0:	2102      	movs	r1, #2
 80064e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a21      	ldr	r2, [pc, #132]	@ (8006580 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d108      	bne.n	8006510 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4a20      	ldr	r2, [pc, #128]	@ (8006584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006502:	4013      	ands	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4313      	orrs	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2270      	movs	r2, #112	@ 0x70
 8006514:	4393      	bics	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	4313      	orrs	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a14      	ldr	r2, [pc, #80]	@ (8006580 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00a      	beq.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	2380      	movs	r3, #128	@ 0x80
 800653a:	05db      	lsls	r3, r3, #23
 800653c:	429a      	cmp	r2, r3
 800653e:	d004      	beq.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a10      	ldr	r2, [pc, #64]	@ (8006588 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d10c      	bne.n	8006564 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2280      	movs	r2, #128	@ 0x80
 800654e:	4393      	bics	r3, r2
 8006550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	4313      	orrs	r3, r2
 800655a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	223d      	movs	r2, #61	@ 0x3d
 8006568:	2101      	movs	r1, #1
 800656a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	223c      	movs	r2, #60	@ 0x3c
 8006570:	2100      	movs	r1, #0
 8006572:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	0018      	movs	r0, r3
 8006578:	46bd      	mov	sp, r7
 800657a:	b004      	add	sp, #16
 800657c:	bd80      	pop	{r7, pc}
 800657e:	46c0      	nop			@ (mov r8, r8)
 8006580:	40012c00 	.word	0x40012c00
 8006584:	ff0fffff 	.word	0xff0fffff
 8006588:	40000400 	.word	0x40000400

0800658c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	223c      	movs	r2, #60	@ 0x3c
 800659e:	5c9b      	ldrb	r3, [r3, r2]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d101      	bne.n	80065a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065a4:	2302      	movs	r3, #2
 80065a6:	e06f      	b.n	8006688 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	223c      	movs	r2, #60	@ 0x3c
 80065ac:	2101      	movs	r1, #1
 80065ae:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	22ff      	movs	r2, #255	@ 0xff
 80065b4:	4393      	bics	r3, r2
 80065b6:	001a      	movs	r2, r3
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	4313      	orrs	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4a33      	ldr	r2, [pc, #204]	@ (8006690 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80065c4:	401a      	ands	r2, r3
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4a30      	ldr	r2, [pc, #192]	@ (8006694 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80065d2:	401a      	ands	r2, r3
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	4313      	orrs	r3, r2
 80065da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4a2e      	ldr	r2, [pc, #184]	@ (8006698 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80065e0:	401a      	ands	r2, r3
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4a2b      	ldr	r2, [pc, #172]	@ (800669c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80065ee:	401a      	ands	r2, r3
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4a29      	ldr	r2, [pc, #164]	@ (80066a0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80065fc:	401a      	ands	r2, r3
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4a26      	ldr	r2, [pc, #152]	@ (80066a4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800660a:	401a      	ands	r2, r3
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006610:	4313      	orrs	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4a24      	ldr	r2, [pc, #144]	@ (80066a8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006618:	401a      	ands	r2, r3
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	041b      	lsls	r3, r3, #16
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4a21      	ldr	r2, [pc, #132]	@ (80066ac <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006628:	401a      	ands	r2, r3
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	4313      	orrs	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a1e      	ldr	r2, [pc, #120]	@ (80066b0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d11c      	bne.n	8006676 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4a1d      	ldr	r2, [pc, #116]	@ (80066b4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006640:	401a      	ands	r2, r3
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006646:	051b      	lsls	r3, r3, #20
 8006648:	4313      	orrs	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4a1a      	ldr	r2, [pc, #104]	@ (80066b8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006650:	401a      	ands	r2, r3
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4a17      	ldr	r2, [pc, #92]	@ (80066bc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800665e:	401a      	ands	r2, r3
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4a15      	ldr	r2, [pc, #84]	@ (80066c0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800666c:	401a      	ands	r2, r3
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	223c      	movs	r2, #60	@ 0x3c
 8006682:	2100      	movs	r1, #0
 8006684:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	0018      	movs	r0, r3
 800668a:	46bd      	mov	sp, r7
 800668c:	b004      	add	sp, #16
 800668e:	bd80      	pop	{r7, pc}
 8006690:	fffffcff 	.word	0xfffffcff
 8006694:	fffffbff 	.word	0xfffffbff
 8006698:	fffff7ff 	.word	0xfffff7ff
 800669c:	ffffefff 	.word	0xffffefff
 80066a0:	ffffdfff 	.word	0xffffdfff
 80066a4:	ffffbfff 	.word	0xffffbfff
 80066a8:	fff0ffff 	.word	0xfff0ffff
 80066ac:	efffffff 	.word	0xefffffff
 80066b0:	40012c00 	.word	0x40012c00
 80066b4:	ff0fffff 	.word	0xff0fffff
 80066b8:	feffffff 	.word	0xfeffffff
 80066bc:	fdffffff 	.word	0xfdffffff
 80066c0:	dfffffff 	.word	0xdfffffff

080066c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066cc:	46c0      	nop			@ (mov r8, r8)
 80066ce:	46bd      	mov	sp, r7
 80066d0:	b002      	add	sp, #8
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066dc:	46c0      	nop			@ (mov r8, r8)
 80066de:	46bd      	mov	sp, r7
 80066e0:	b002      	add	sp, #8
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066ec:	46c0      	nop			@ (mov r8, r8)
 80066ee:	46bd      	mov	sp, r7
 80066f0:	b002      	add	sp, #8
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <memset>:
 80066f4:	0003      	movs	r3, r0
 80066f6:	1882      	adds	r2, r0, r2
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d100      	bne.n	80066fe <memset+0xa>
 80066fc:	4770      	bx	lr
 80066fe:	7019      	strb	r1, [r3, #0]
 8006700:	3301      	adds	r3, #1
 8006702:	e7f9      	b.n	80066f8 <memset+0x4>

08006704 <__libc_init_array>:
 8006704:	b570      	push	{r4, r5, r6, lr}
 8006706:	2600      	movs	r6, #0
 8006708:	4c0c      	ldr	r4, [pc, #48]	@ (800673c <__libc_init_array+0x38>)
 800670a:	4d0d      	ldr	r5, [pc, #52]	@ (8006740 <__libc_init_array+0x3c>)
 800670c:	1b64      	subs	r4, r4, r5
 800670e:	10a4      	asrs	r4, r4, #2
 8006710:	42a6      	cmp	r6, r4
 8006712:	d109      	bne.n	8006728 <__libc_init_array+0x24>
 8006714:	2600      	movs	r6, #0
 8006716:	f000 f823 	bl	8006760 <_init>
 800671a:	4c0a      	ldr	r4, [pc, #40]	@ (8006744 <__libc_init_array+0x40>)
 800671c:	4d0a      	ldr	r5, [pc, #40]	@ (8006748 <__libc_init_array+0x44>)
 800671e:	1b64      	subs	r4, r4, r5
 8006720:	10a4      	asrs	r4, r4, #2
 8006722:	42a6      	cmp	r6, r4
 8006724:	d105      	bne.n	8006732 <__libc_init_array+0x2e>
 8006726:	bd70      	pop	{r4, r5, r6, pc}
 8006728:	00b3      	lsls	r3, r6, #2
 800672a:	58eb      	ldr	r3, [r5, r3]
 800672c:	4798      	blx	r3
 800672e:	3601      	adds	r6, #1
 8006730:	e7ee      	b.n	8006710 <__libc_init_array+0xc>
 8006732:	00b3      	lsls	r3, r6, #2
 8006734:	58eb      	ldr	r3, [r5, r3]
 8006736:	4798      	blx	r3
 8006738:	3601      	adds	r6, #1
 800673a:	e7f2      	b.n	8006722 <__libc_init_array+0x1e>
 800673c:	08006844 	.word	0x08006844
 8006740:	08006844 	.word	0x08006844
 8006744:	08006848 	.word	0x08006848
 8006748:	08006844 	.word	0x08006844

0800674c <memcpy>:
 800674c:	2300      	movs	r3, #0
 800674e:	b510      	push	{r4, lr}
 8006750:	429a      	cmp	r2, r3
 8006752:	d100      	bne.n	8006756 <memcpy+0xa>
 8006754:	bd10      	pop	{r4, pc}
 8006756:	5ccc      	ldrb	r4, [r1, r3]
 8006758:	54c4      	strb	r4, [r0, r3]
 800675a:	3301      	adds	r3, #1
 800675c:	e7f8      	b.n	8006750 <memcpy+0x4>
	...

08006760 <_init>:
 8006760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006762:	46c0      	nop			@ (mov r8, r8)
 8006764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006766:	bc08      	pop	{r3}
 8006768:	469e      	mov	lr, r3
 800676a:	4770      	bx	lr

0800676c <_fini>:
 800676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676e:	46c0      	nop			@ (mov r8, r8)
 8006770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006772:	bc08      	pop	{r3}
 8006774:	469e      	mov	lr, r3
 8006776:	4770      	bx	lr
