
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006378  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006434  08006434  00007434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006524  08006524  00008054  2**0
                  CONTENTS
  4 .ARM          00000000  08006524  08006524  00008054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006524  08006524  00008054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006524  08006524  00007524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006528  08006528  00007528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800652c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000054  08006580  00008054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08006580  00008238  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c86  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d80  00000000  00000000  0001bd02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0001ea88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa1  00000000  00000000  0001fea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001950f  00000000  00000000  00020e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184ad  00000000  00000000  0003a350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a209b  00000000  00000000  000527fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4898  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004928  00000000  00000000  000f48dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000f9204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000054 	.word	0x20000054
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800641c 	.word	0x0800641c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000058 	.word	0x20000058
 8000100:	0800641c 	.word	0x0800641c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:
 */

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, uint8_t keyEnFlags) {
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	b087      	sub	sp, #28
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	2517      	movs	r5, #23
 800022c:	197b      	adds	r3, r7, r5
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	// Verify device ID
	uint8_t deviceIDRet = 0x00;
 8000238:	2615      	movs	r6, #21
 800023a:	19bb      	adds	r3, r7, r6
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]
	halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 8000240:	197c      	adds	r4, r7, r5
 8000242:	19ba      	adds	r2, r7, r6
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	0011      	movs	r1, r2
 8000248:	0018      	movs	r0, r3
 800024a:	f000 f84f 	bl	80002ec <capTouch_ReadDeviceID>
 800024e:	0003      	movs	r3, r0
 8000250:	7023      	strb	r3, [r4, #0]

	if(deviceIDRet != DEVICE_ID || halRet != HAL_OK) {
 8000252:	19bb      	adds	r3, r7, r6
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b2e      	cmp	r3, #46	@ 0x2e
 8000258:	d103      	bne.n	8000262 <capTouch_Init+0x46>
 800025a:	197b      	adds	r3, r7, r5
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <capTouch_Init+0x4a>
		return 1;
 8000262:	2301      	movs	r3, #1
 8000264:	e03e      	b.n	80002e4 <capTouch_Init+0xc8>
	}

	capTouch->deviceID = deviceIDRet;
 8000266:	2315      	movs	r3, #21
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	781a      	ldrb	r2, [r3, #0]
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	711a      	strb	r2, [r3, #4]

	// Force Device Recalibration
	halRet = capTouch_Recalibrate(capTouch);
 8000270:	2517      	movs	r5, #23
 8000272:	197c      	adds	r4, r7, r5
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	0018      	movs	r0, r3
 8000278:	f000 f87a 	bl	8000370 <capTouch_Recalibrate>
 800027c:	0003      	movs	r3, r0
 800027e:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000280:	197b      	adds	r3, r7, r5
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <capTouch_Init+0x70>
		return 2;
 8000288:	2302      	movs	r3, #2
 800028a:	e02b      	b.n	80002e4 <capTouch_Init+0xc8>
	}

	// Wait until calibration sequence completes
	while(capTouch_checkCal(capTouch)) {}
 800028c:	46c0      	nop			@ (mov r8, r8)
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	0018      	movs	r0, r3
 8000292:	f000 f88f 	bl	80003b4 <capTouch_checkCal>
 8000296:	1e03      	subs	r3, r0, #0
 8000298:	d1f9      	bne.n	800028e <capTouch_Init+0x72>

	// Get initial reading of channels
	uint8_t keyStatus = capTouch_readChannels(capTouch);
 800029a:	2316      	movs	r3, #22
 800029c:	18fc      	adds	r4, r7, r3
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	0018      	movs	r0, r3
 80002a2:	f000 f8c3 	bl	800042c <capTouch_readChannels>
 80002a6:	0003      	movs	r3, r0
 80002a8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 80002aa:	2317      	movs	r3, #23
 80002ac:	18fb      	adds	r3, r7, r3
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <capTouch_Init+0x9c>
		return 3;
 80002b4:	2303      	movs	r3, #3
 80002b6:	e015      	b.n	80002e4 <capTouch_Init+0xc8>
	}

	halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80002b8:	2517      	movs	r5, #23
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	1dfb      	adds	r3, r7, #7
 80002be:	781a      	ldrb	r2, [r3, #0]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ed 	bl	80004a4 <capTouch_enableKeys>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <capTouch_Init+0xbe>
		return 4;
 80002d6:	2304      	movs	r3, #4
 80002d8:	e004      	b.n	80002e4 <capTouch_Init+0xc8>
	}
	capTouch->keys = keyEnFlags;
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	1dfa      	adds	r2, r7, #7
 80002de:	7812      	ldrb	r2, [r2, #0]
 80002e0:	715a      	strb	r2, [r3, #5]

	return 0;
 80002e2:	2300      	movs	r3, #0

}
 80002e4:	0018      	movs	r0, r3
 80002e6:	46bd      	mov	sp, r7
 80002e8:	b007      	add	sp, #28
 80002ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002ec <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ee:	b087      	sub	sp, #28
 80002f0:	af02      	add	r7, sp, #8
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 80002f6:	260e      	movs	r6, #14
 80002f8:	19bb      	adds	r3, r7, r6
 80002fa:	2200      	movs	r2, #0
 80002fc:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80002fe:	250f      	movs	r5, #15
 8000300:	197b      	adds	r3, r7, r5
 8000302:	2200      	movs	r2, #0
 8000304:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 8000306:	210c      	movs	r1, #12
 8000308:	187b      	adds	r3, r7, r1
 800030a:	4a18      	ldr	r2, [pc, #96]	@ (800036c <capTouch_ReadDeviceID+0x80>)
 800030c:	7812      	ldrb	r2, [r2, #0]
 800030e:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	6818      	ldr	r0, [r3, #0]
 8000314:	197c      	adds	r4, r7, r5
 8000316:	187a      	adds	r2, r7, r1
 8000318:	2301      	movs	r3, #1
 800031a:	425b      	negs	r3, r3
 800031c:	9300      	str	r3, [sp, #0]
 800031e:	2301      	movs	r3, #1
 8000320:	2136      	movs	r1, #54	@ 0x36
 8000322:	f002 ff8d 	bl	8003240 <HAL_I2C_Master_Transmit>
 8000326:	0003      	movs	r3, r0
 8000328:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	6818      	ldr	r0, [r3, #0]
 800032e:	197c      	adds	r4, r7, r5
 8000330:	19ba      	adds	r2, r7, r6
 8000332:	2301      	movs	r3, #1
 8000334:	425b      	negs	r3, r3
 8000336:	9300      	str	r3, [sp, #0]
 8000338:	2301      	movs	r3, #1
 800033a:	2136      	movs	r1, #54	@ 0x36
 800033c:	f003 f8aa 	bl	8003494 <HAL_I2C_Master_Receive>
 8000340:	0003      	movs	r3, r0
 8000342:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000344:	197b      	adds	r3, r7, r5
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d002      	beq.n	8000352 <capTouch_ReadDeviceID+0x66>
		return halRet;
 800034c:	197b      	adds	r3, r7, r5
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	e007      	b.n	8000362 <capTouch_ReadDeviceID+0x76>

	*dataBuff = deviceIDRet_I2C;
 8000352:	230e      	movs	r3, #14
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	781a      	ldrb	r2, [r3, #0]
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	701a      	strb	r2, [r3, #0]

	return halRet;
 800035c:	230f      	movs	r3, #15
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	781b      	ldrb	r3, [r3, #0]

}
 8000362:	0018      	movs	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	b005      	add	sp, #20
 8000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036a:	46c0      	nop			@ (mov r8, r8)
 800036c:	08006434 	.word	0x08006434

08000370 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 8000370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000372:	b087      	sub	sp, #28
 8000374:	af02      	add	r7, sp, #8
 8000376:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000378:	210f      	movs	r1, #15
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 8000380:	260c      	movs	r6, #12
 8000382:	19bb      	adds	r3, r7, r6
 8000384:	22c8      	movs	r2, #200	@ 0xc8
 8000386:	4252      	negs	r2, r2
 8000388:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	6818      	ldr	r0, [r3, #0]
 800038e:	000d      	movs	r5, r1
 8000390:	187c      	adds	r4, r7, r1
 8000392:	19ba      	adds	r2, r7, r6
 8000394:	2301      	movs	r3, #1
 8000396:	425b      	negs	r3, r3
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	2302      	movs	r3, #2
 800039c:	2136      	movs	r1, #54	@ 0x36
 800039e:	f002 ff4f 	bl	8003240 <HAL_I2C_Master_Transmit>
 80003a2:	0003      	movs	r3, r0
 80003a4:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80003a6:	197b      	adds	r3, r7, r5
 80003a8:	781b      	ldrb	r3, [r3, #0]

}
 80003aa:	0018      	movs	r0, r3
 80003ac:	46bd      	mov	sp, r7
 80003ae:	b005      	add	sp, #20
 80003b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080003b4 <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80003b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003b6:	b087      	sub	sp, #28
 80003b8:	af02      	add	r7, sp, #8
 80003ba:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80003bc:	210f      	movs	r1, #15
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80003c4:	260d      	movs	r6, #13
 80003c6:	19bb      	adds	r3, r7, r6
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 80003cc:	230c      	movs	r3, #12
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	4a15      	ldr	r2, [pc, #84]	@ (8000428 <capTouch_checkCal+0x74>)
 80003d2:	7812      	ldrb	r2, [r2, #0]
 80003d4:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	6818      	ldr	r0, [r3, #0]
 80003da:	000d      	movs	r5, r1
 80003dc:	187c      	adds	r4, r7, r1
 80003de:	230c      	movs	r3, #12
 80003e0:	18fa      	adds	r2, r7, r3
 80003e2:	2301      	movs	r3, #1
 80003e4:	425b      	negs	r3, r3
 80003e6:	9300      	str	r3, [sp, #0]
 80003e8:	2301      	movs	r3, #1
 80003ea:	2136      	movs	r1, #54	@ 0x36
 80003ec:	f002 ff28 	bl	8003240 <HAL_I2C_Master_Transmit>
 80003f0:	0003      	movs	r3, r0
 80003f2:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	6818      	ldr	r0, [r3, #0]
 80003f8:	197c      	adds	r4, r7, r5
 80003fa:	19ba      	adds	r2, r7, r6
 80003fc:	2301      	movs	r3, #1
 80003fe:	425b      	negs	r3, r3
 8000400:	9300      	str	r3, [sp, #0]
 8000402:	2301      	movs	r3, #1
 8000404:	2136      	movs	r1, #54	@ 0x36
 8000406:	f003 f845 	bl	8003494 <HAL_I2C_Master_Receive>
 800040a:	0003      	movs	r3, r0
 800040c:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 800040e:	19bb      	adds	r3, r7, r6
 8000410:	781a      	ldrb	r2, [r3, #0]
 8000412:	210e      	movs	r1, #14
 8000414:	187b      	adds	r3, r7, r1
 8000416:	09d2      	lsrs	r2, r2, #7
 8000418:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 800041a:	187b      	adds	r3, r7, r1
 800041c:	781b      	ldrb	r3, [r3, #0]

}
 800041e:	0018      	movs	r0, r3
 8000420:	46bd      	mov	sp, r7
 8000422:	b005      	add	sp, #20
 8000424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	08006438 	.word	0x08006438

0800042c <capTouch_readChannels>:

uint8_t capTouch_readChannels(QT1070 *capTouch) {
 800042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042e:	b087      	sub	sp, #28
 8000430:	af02      	add	r7, sp, #8
 8000432:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000434:	210f      	movs	r1, #15
 8000436:	187b      	adds	r3, r7, r1
 8000438:	2200      	movs	r2, #0
 800043a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 800043c:	250e      	movs	r5, #14
 800043e:	197b      	adds	r3, r7, r5
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 8000444:	230c      	movs	r3, #12
 8000446:	18fb      	adds	r3, r7, r3
 8000448:	4a15      	ldr	r2, [pc, #84]	@ (80004a0 <capTouch_readChannels+0x74>)
 800044a:	7812      	ldrb	r2, [r2, #0]
 800044c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	6818      	ldr	r0, [r3, #0]
 8000452:	000e      	movs	r6, r1
 8000454:	187c      	adds	r4, r7, r1
 8000456:	230c      	movs	r3, #12
 8000458:	18fa      	adds	r2, r7, r3
 800045a:	2301      	movs	r3, #1
 800045c:	425b      	negs	r3, r3
 800045e:	9300      	str	r3, [sp, #0]
 8000460:	2301      	movs	r3, #1
 8000462:	2136      	movs	r1, #54	@ 0x36
 8000464:	f002 feec 	bl	8003240 <HAL_I2C_Master_Transmit>
 8000468:	0003      	movs	r3, r0
 800046a:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	6818      	ldr	r0, [r3, #0]
 8000470:	19bc      	adds	r4, r7, r6
 8000472:	197a      	adds	r2, r7, r5
 8000474:	2301      	movs	r3, #1
 8000476:	425b      	negs	r3, r3
 8000478:	9300      	str	r3, [sp, #0]
 800047a:	2301      	movs	r3, #1
 800047c:	2136      	movs	r1, #54	@ 0x36
 800047e:	f003 f809 	bl	8003494 <HAL_I2C_Master_Receive>
 8000482:	0003      	movs	r3, r0
 8000484:	7023      	strb	r3, [r4, #0]

	keyStatusRet = keyStatusRet & 0b01111111;
 8000486:	197b      	adds	r3, r7, r5
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	227f      	movs	r2, #127	@ 0x7f
 800048c:	4013      	ands	r3, r2
 800048e:	b2da      	uxtb	r2, r3
 8000490:	197b      	adds	r3, r7, r5
 8000492:	701a      	strb	r2, [r3, #0]

	return keyStatusRet;
 8000494:	197b      	adds	r3, r7, r5
 8000496:	781b      	ldrb	r3, [r3, #0]

}
 8000498:	0018      	movs	r0, r3
 800049a:	46bd      	mov	sp, r7
 800049c:	b005      	add	sp, #20
 800049e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a0:	0800643c 	.word	0x0800643c

080004a4 <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	b08b      	sub	sp, #44	@ 0x2c
 80004a8:	af02      	add	r7, sp, #8
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	000a      	movs	r2, r1
 80004ae:	1cfb      	adds	r3, r7, #3
 80004b0:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b2:	241b      	movs	r4, #27
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	2200      	movs	r2, #0
 80004b8:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80004ba:	2614      	movs	r6, #20
 80004bc:	19bb      	adds	r3, r7, r6
 80004be:	4a32      	ldr	r2, [pc, #200]	@ (8000588 <capTouch_enableKeys+0xe4>)
 80004c0:	6811      	ldr	r1, [r2, #0]
 80004c2:	6019      	str	r1, [r3, #0]
 80004c4:	8891      	ldrh	r1, [r2, #4]
 80004c6:	8099      	strh	r1, [r3, #4]
 80004c8:	7992      	ldrb	r2, [r2, #6]
 80004ca:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 80004cc:	230c      	movs	r3, #12
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	4a2e      	ldr	r2, [pc, #184]	@ (800058c <capTouch_enableKeys+0xe8>)
 80004d2:	6811      	ldr	r1, [r2, #0]
 80004d4:	6019      	str	r1, [r3, #0]
 80004d6:	8891      	ldrh	r1, [r2, #4]
 80004d8:	8099      	strh	r1, [r3, #4]
 80004da:	7992      	ldrb	r2, [r2, #6]
 80004dc:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6818      	ldr	r0, [r3, #0]
 80004e2:	0025      	movs	r5, r4
 80004e4:	193c      	adds	r4, r7, r4
 80004e6:	230c      	movs	r3, #12
 80004e8:	18fa      	adds	r2, r7, r3
 80004ea:	2301      	movs	r3, #1
 80004ec:	425b      	negs	r3, r3
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2301      	movs	r3, #1
 80004f2:	2136      	movs	r1, #54	@ 0x36
 80004f4:	f002 fea4 	bl	8003240 <HAL_I2C_Master_Transmit>
 80004f8:	0003      	movs	r3, r0
 80004fa:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	6818      	ldr	r0, [r3, #0]
 8000500:	197c      	adds	r4, r7, r5
 8000502:	19ba      	adds	r2, r7, r6
 8000504:	2301      	movs	r3, #1
 8000506:	425b      	negs	r3, r3
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	2307      	movs	r3, #7
 800050c:	2136      	movs	r1, #54	@ 0x36
 800050e:	f002 ffc1 	bl	8003494 <HAL_I2C_Master_Receive>
 8000512:	0003      	movs	r3, r0
 8000514:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000516:	197b      	adds	r3, r7, r5
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d002      	beq.n	8000524 <capTouch_enableKeys+0x80>
		return halRet;
 800051e:	197b      	adds	r3, r7, r5
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	e02c      	b.n	800057e <capTouch_enableKeys+0xda>

	int i; //temp;

	for(i = 0; i <= 6; i++) {
 8000524:	2300      	movs	r3, #0
 8000526:	61fb      	str	r3, [r7, #28]
 8000528:	e019      	b.n	800055e <capTouch_enableKeys+0xba>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 800052a:	2014      	movs	r0, #20
 800052c:	183a      	adds	r2, r7, r0
 800052e:	69fb      	ldr	r3, [r7, #28]
 8000530:	18d3      	adds	r3, r2, r3
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	089b      	lsrs	r3, r3, #2
 8000536:	b2db      	uxtb	r3, r3
 8000538:	1cfa      	adds	r2, r7, #3
 800053a:	7811      	ldrb	r1, [r2, #0]
 800053c:	69fa      	ldr	r2, [r7, #28]
 800053e:	4111      	asrs	r1, r2
 8000540:	000a      	movs	r2, r1
 8000542:	b2d2      	uxtb	r2, r2
 8000544:	2101      	movs	r1, #1
 8000546:	400a      	ands	r2, r1
 8000548:	b2d2      	uxtb	r2, r2
 800054a:	4353      	muls	r3, r2
 800054c:	b2d9      	uxtb	r1, r3
 800054e:	183a      	adds	r2, r7, r0
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	18d3      	adds	r3, r2, r3
 8000554:	1c0a      	adds	r2, r1, #0
 8000556:	701a      	strb	r2, [r3, #0]
	for(i = 0; i <= 6; i++) {
 8000558:	69fb      	ldr	r3, [r7, #28]
 800055a:	3301      	adds	r3, #1
 800055c:	61fb      	str	r3, [r7, #28]
 800055e:	69fb      	ldr	r3, [r7, #28]
 8000560:	2b06      	cmp	r3, #6
 8000562:	dde2      	ble.n	800052a <capTouch_enableKeys+0x86>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 8000564:	251b      	movs	r5, #27
 8000566:	197c      	adds	r4, r7, r5
 8000568:	2314      	movs	r3, #20
 800056a:	18fa      	adds	r2, r7, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	0011      	movs	r1, r2
 8000570:	0018      	movs	r0, r3
 8000572:	f000 f80d 	bl	8000590 <capTouch_SetAveragingFactor>
 8000576:	0003      	movs	r3, r0
 8000578:	7023      	strb	r3, [r4, #0]

	return halRet;
 800057a:	197b      	adds	r3, r7, r5
 800057c:	781b      	ldrb	r3, [r3, #0]

}
 800057e:	0018      	movs	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	b009      	add	sp, #36	@ 0x24
 8000584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	08006440 	.word	0x08006440
 800058c:	08006448 	.word	0x08006448

08000590 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	b08b      	sub	sp, #44	@ 0x2c
 8000594:	af02      	add	r7, sp, #8
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800059a:	241e      	movs	r4, #30
 800059c:	193b      	adds	r3, r7, r4
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80005a2:	2614      	movs	r6, #20
 80005a4:	19bb      	adds	r3, r7, r6
 80005a6:	4a51      	ldr	r2, [pc, #324]	@ (80006ec <capTouch_SetAveragingFactor+0x15c>)
 80005a8:	6811      	ldr	r1, [r2, #0]
 80005aa:	6019      	str	r1, [r3, #0]
 80005ac:	8891      	ldrh	r1, [r2, #4]
 80005ae:	8099      	strh	r1, [r3, #4]
 80005b0:	7992      	ldrb	r2, [r2, #6]
 80005b2:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 80005b4:	230c      	movs	r3, #12
 80005b6:	18fb      	adds	r3, r7, r3
 80005b8:	4a4d      	ldr	r2, [pc, #308]	@ (80006f0 <capTouch_SetAveragingFactor+0x160>)
 80005ba:	6811      	ldr	r1, [r2, #0]
 80005bc:	6019      	str	r1, [r3, #0]
 80005be:	8891      	ldrh	r1, [r2, #4]
 80005c0:	8099      	strh	r1, [r3, #4]
 80005c2:	7992      	ldrb	r2, [r2, #6]
 80005c4:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6818      	ldr	r0, [r3, #0]
 80005ca:	0025      	movs	r5, r4
 80005cc:	193c      	adds	r4, r7, r4
 80005ce:	230c      	movs	r3, #12
 80005d0:	18fa      	adds	r2, r7, r3
 80005d2:	2301      	movs	r3, #1
 80005d4:	425b      	negs	r3, r3
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2301      	movs	r3, #1
 80005da:	2136      	movs	r1, #54	@ 0x36
 80005dc:	f002 fe30 	bl	8003240 <HAL_I2C_Master_Transmit>
 80005e0:	0003      	movs	r3, r0
 80005e2:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6818      	ldr	r0, [r3, #0]
 80005e8:	197c      	adds	r4, r7, r5
 80005ea:	19ba      	adds	r2, r7, r6
 80005ec:	2301      	movs	r3, #1
 80005ee:	425b      	negs	r3, r3
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2307      	movs	r3, #7
 80005f4:	2136      	movs	r1, #54	@ 0x36
 80005f6:	f002 ff4d 	bl	8003494 <HAL_I2C_Master_Receive>
 80005fa:	0003      	movs	r3, r0
 80005fc:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80005fe:	197b      	adds	r3, r7, r5
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d002      	beq.n	800060c <capTouch_SetAveragingFactor+0x7c>
		return halRet;
 8000606:	197b      	adds	r3, r7, r5
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	e06a      	b.n	80006e2 <capTouch_SetAveragingFactor+0x152>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 800060c:	2308      	movs	r3, #8
 800060e:	18fb      	adds	r3, r7, r3
 8000610:	2200      	movs	r2, #0
 8000612:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000614:	231d      	movs	r3, #29
 8000616:	18fb      	adds	r3, r7, r3
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800061c:	231f      	movs	r3, #31
 800061e:	18fb      	adds	r3, r7, r3
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	e039      	b.n	800069a <capTouch_SetAveragingFactor+0x10a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 8000626:	251f      	movs	r5, #31
 8000628:	197b      	adds	r3, r7, r5
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2214      	movs	r2, #20
 800062e:	18ba      	adds	r2, r7, r2
 8000630:	5cd2      	ldrb	r2, [r2, r3]
 8000632:	201d      	movs	r0, #29
 8000634:	183b      	adds	r3, r7, r0
 8000636:	2103      	movs	r1, #3
 8000638:	400a      	ands	r2, r1
 800063a:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 800063c:	197b      	adds	r3, r7, r5
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	18d3      	adds	r3, r2, r3
 8000644:	781a      	ldrb	r2, [r3, #0]
 8000646:	241c      	movs	r4, #28
 8000648:	193b      	adds	r3, r7, r4
 800064a:	0092      	lsls	r2, r2, #2
 800064c:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 800064e:	183b      	adds	r3, r7, r0
 8000650:	1839      	adds	r1, r7, r0
 8000652:	193a      	adds	r2, r7, r4
 8000654:	7809      	ldrb	r1, [r1, #0]
 8000656:	7812      	ldrb	r2, [r2, #0]
 8000658:	430a      	orrs	r2, r1
 800065a:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 800065c:	197b      	adds	r3, r7, r5
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	220c      	movs	r2, #12
 8000662:	18ba      	adds	r2, r7, r2
 8000664:	5cd2      	ldrb	r2, [r2, r3]
 8000666:	2108      	movs	r1, #8
 8000668:	187b      	adds	r3, r7, r1
 800066a:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	183a      	adds	r2, r7, r0
 8000670:	7812      	ldrb	r2, [r2, #0]
 8000672:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6818      	ldr	r0, [r3, #0]
 8000678:	231e      	movs	r3, #30
 800067a:	18fc      	adds	r4, r7, r3
 800067c:	187a      	adds	r2, r7, r1
 800067e:	2301      	movs	r3, #1
 8000680:	425b      	negs	r3, r3
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2302      	movs	r3, #2
 8000686:	2136      	movs	r1, #54	@ 0x36
 8000688:	f002 fdda 	bl	8003240 <HAL_I2C_Master_Transmit>
 800068c:	0003      	movs	r3, r0
 800068e:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 8000690:	197b      	adds	r3, r7, r5
 8000692:	781a      	ldrb	r2, [r3, #0]
 8000694:	197b      	adds	r3, r7, r5
 8000696:	3201      	adds	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	231f      	movs	r3, #31
 800069c:	18fb      	adds	r3, r7, r3
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d9c0      	bls.n	8000626 <capTouch_SetAveragingFactor+0x96>
									avgRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6818      	ldr	r0, [r3, #0]
 80006a8:	251e      	movs	r5, #30
 80006aa:	197c      	adds	r4, r7, r5
 80006ac:	230c      	movs	r3, #12
 80006ae:	18fa      	adds	r2, r7, r3
 80006b0:	2301      	movs	r3, #1
 80006b2:	425b      	negs	r3, r3
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	2136      	movs	r1, #54	@ 0x36
 80006ba:	f002 fdc1 	bl	8003240 <HAL_I2C_Master_Transmit>
 80006be:	0003      	movs	r3, r0
 80006c0:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6818      	ldr	r0, [r3, #0]
 80006c6:	197c      	adds	r4, r7, r5
 80006c8:	2314      	movs	r3, #20
 80006ca:	18fa      	adds	r2, r7, r3
 80006cc:	2301      	movs	r3, #1
 80006ce:	425b      	negs	r3, r3
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2307      	movs	r3, #7
 80006d4:	2136      	movs	r1, #54	@ 0x36
 80006d6:	f002 fedd 	bl	8003494 <HAL_I2C_Master_Receive>
 80006da:	0003      	movs	r3, r0
 80006dc:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006de:	197b      	adds	r3, r7, r5
 80006e0:	781b      	ldrb	r3, [r3, #0]

}
 80006e2:	0018      	movs	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b009      	add	sp, #36	@ 0x24
 80006e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	08006440 	.word	0x08006440
 80006f0:	08006448 	.word	0x08006448

080006f4 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 80006f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f6:	b08b      	sub	sp, #44	@ 0x2c
 80006f8:	af02      	add	r7, sp, #8
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80006fe:	231e      	movs	r3, #30
 8000700:	18fb      	adds	r3, r7, r3
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 8000706:	2314      	movs	r3, #20
 8000708:	18fb      	adds	r3, r7, r3
 800070a:	4a31      	ldr	r2, [pc, #196]	@ (80007d0 <capTouch_SetDetectionIntegrator+0xdc>)
 800070c:	6811      	ldr	r1, [r2, #0]
 800070e:	6019      	str	r1, [r3, #0]
 8000710:	8891      	ldrh	r1, [r2, #4]
 8000712:	8099      	strh	r1, [r3, #4]
 8000714:	7992      	ldrb	r2, [r2, #6]
 8000716:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 8000718:	2310      	movs	r3, #16
 800071a:	18fb      	adds	r3, r7, r3
 800071c:	2200      	movs	r2, #0
 800071e:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 8000720:	231f      	movs	r3, #31
 8000722:	18fb      	adds	r3, r7, r3
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
 8000728:	e022      	b.n	8000770 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 800072a:	251f      	movs	r5, #31
 800072c:	197b      	adds	r3, r7, r5
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2214      	movs	r2, #20
 8000732:	18ba      	adds	r2, r7, r2
 8000734:	5cd2      	ldrb	r2, [r2, r3]
 8000736:	2110      	movs	r1, #16
 8000738:	187b      	adds	r3, r7, r1
 800073a:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 800073c:	197b      	adds	r3, r7, r5
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	18d3      	adds	r3, r2, r3
 8000744:	781a      	ldrb	r2, [r3, #0]
 8000746:	187b      	adds	r3, r7, r1
 8000748:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6818      	ldr	r0, [r3, #0]
 800074e:	231e      	movs	r3, #30
 8000750:	18fc      	adds	r4, r7, r3
 8000752:	187a      	adds	r2, r7, r1
 8000754:	2301      	movs	r3, #1
 8000756:	425b      	negs	r3, r3
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2302      	movs	r3, #2
 800075c:	2136      	movs	r1, #54	@ 0x36
 800075e:	f002 fd6f 	bl	8003240 <HAL_I2C_Master_Transmit>
 8000762:	0003      	movs	r3, r0
 8000764:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 8000766:	197b      	adds	r3, r7, r5
 8000768:	781a      	ldrb	r2, [r3, #0]
 800076a:	197b      	adds	r3, r7, r5
 800076c:	3201      	adds	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
 8000770:	231f      	movs	r3, #31
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b06      	cmp	r3, #6
 8000778:	d9d7      	bls.n	800072a <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800077a:	2608      	movs	r6, #8
 800077c:	19bb      	adds	r3, r7, r6
 800077e:	4a15      	ldr	r2, [pc, #84]	@ (80007d4 <capTouch_SetDetectionIntegrator+0xe0>)
 8000780:	6811      	ldr	r1, [r2, #0]
 8000782:	6019      	str	r1, [r3, #0]
 8000784:	8891      	ldrh	r1, [r2, #4]
 8000786:	8099      	strh	r1, [r3, #4]
 8000788:	7992      	ldrb	r2, [r2, #6]
 800078a:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6818      	ldr	r0, [r3, #0]
 8000790:	251e      	movs	r5, #30
 8000792:	197c      	adds	r4, r7, r5
 8000794:	2314      	movs	r3, #20
 8000796:	18fa      	adds	r2, r7, r3
 8000798:	2301      	movs	r3, #1
 800079a:	425b      	negs	r3, r3
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	2301      	movs	r3, #1
 80007a0:	2136      	movs	r1, #54	@ 0x36
 80007a2:	f002 fd4d 	bl	8003240 <HAL_I2C_Master_Transmit>
 80007a6:	0003      	movs	r3, r0
 80007a8:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6818      	ldr	r0, [r3, #0]
 80007ae:	197c      	adds	r4, r7, r5
 80007b0:	19ba      	adds	r2, r7, r6
 80007b2:	2301      	movs	r3, #1
 80007b4:	425b      	negs	r3, r3
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	2307      	movs	r3, #7
 80007ba:	2136      	movs	r1, #54	@ 0x36
 80007bc:	f002 fe6a 	bl	8003494 <HAL_I2C_Master_Receive>
 80007c0:	0003      	movs	r3, r0
 80007c2:	7023      	strb	r3, [r4, #0]

	return halRet;
 80007c4:	197b      	adds	r3, r7, r5
 80007c6:	781b      	ldrb	r3, [r3, #0]

}
 80007c8:	0018      	movs	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b009      	add	sp, #36	@ 0x24
 80007ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d0:	08006450 	.word	0x08006450
 80007d4:	08006440 	.word	0x08006440

080007d8 <initRTCTime>:
 */

#include "../Inc/alarm.h"


void initRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80007d8:	b5b0      	push	{r4, r5, r7, lr}
 80007da:	b09a      	sub	sp, #104	@ 0x68
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]

	currTime->Hours = 1;				// Initialize current RTC time to default values
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]
	currTime->Minutes = 00;
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	2200      	movs	r2, #0
 80007ee:	705a      	strb	r2, [r3, #1]
	currTime->Seconds = 00;
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	2200      	movs	r2, #0
 80007f4:	709a      	strb	r2, [r3, #2]
	currTime->TimeFormat = RTC_HOURFORMAT12_AM;			//This is initially in the A.M., so P.M. LED is off.
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	2200      	movs	r2, #0
 80007fa:	70da      	strb	r2, [r3, #3]

	currDate->Year = 0;					// Initialize current RTC date to default values
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2200      	movs	r2, #0
 8000800:	70da      	strb	r2, [r3, #3]
	currDate->Month = RTC_MONTH_JANUARY;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2201      	movs	r2, #1
 8000806:	705a      	strb	r2, [r3, #1]
	currDate->Date = 0;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2200      	movs	r2, #0
 800080c:	709a      	strb	r2, [r3, #2]

	HAL_StatusTypeDef halRet = HAL_OK;
 800080e:	2567      	movs	r5, #103	@ 0x67
 8000810:	197b      	adds	r3, r7, r5
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
	halRet = HAL_RTC_SetTime(hrtc, currTime, RTCTimeFormat);
 8000816:	197c      	adds	r4, r7, r5
 8000818:	68b9      	ldr	r1, [r7, #8]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	2200      	movs	r2, #0
 800081e:	0018      	movs	r0, r3
 8000820:	f004 f9ba 	bl	8004b98 <HAL_RTC_SetTime>
 8000824:	0003      	movs	r3, r0
 8000826:	7023      	strb	r3, [r4, #0]
	halRet = HAL_RTC_SetDate(hrtc, currDate, RTCTimeFormat);
 8000828:	197c      	adds	r4, r7, r5
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2200      	movs	r2, #0
 8000830:	0018      	movs	r0, r3
 8000832:	f004 fab5 	bl	8004da0 <HAL_RTC_SetDate>
 8000836:	0003      	movs	r3, r0
 8000838:	7023      	strb	r3, [r4, #0]
//	}
//	else {
//		printf("Error defaulting RTC time.\n\r");
//	}

	RTC_AlarmTypeDef internalAlarm_init = {0};
 800083a:	243c      	movs	r4, #60	@ 0x3c
 800083c:	193b      	adds	r3, r7, r4
 800083e:	0018      	movs	r0, r3
 8000840:	2328      	movs	r3, #40	@ 0x28
 8000842:	001a      	movs	r2, r3
 8000844:	2100      	movs	r1, #0
 8000846:	f005 fdbd 	bl	80063c4 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	781a      	ldrb	r2, [r3, #0]
 800084e:	0021      	movs	r1, r4
 8000850:	187b      	adds	r3, r7, r1
 8000852:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	785b      	ldrb	r3, [r3, #1]
 8000858:	3301      	adds	r3, #1
 800085a:	b2da      	uxtb	r2, r3
 800085c:	187b      	adds	r3, r7, r1
 800085e:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	789a      	ldrb	r2, [r3, #2]
 8000864:	187b      	adds	r3, r7, r1
 8000866:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	685a      	ldr	r2, [r3, #4]
 800086c:	187b      	adds	r3, r7, r1
 800086e:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	78da      	ldrb	r2, [r3, #3]
 8000874:	187b      	adds	r3, r7, r1
 8000876:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	78da      	ldrb	r2, [r3, #3]
 800087c:	187b      	adds	r3, r7, r1
 800087e:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000880:	0008      	movs	r0, r1
 8000882:	183b      	adds	r3, r7, r0
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000888:	183b      	adds	r3, r7, r0
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 800088e:	183b      	adds	r3, r7, r0
 8000890:	4a14      	ldr	r2, [pc, #80]	@ (80008e4 <initRTCTime+0x10c>)
 8000892:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000894:	183b      	adds	r3, r7, r0
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800089a:	183b      	adds	r3, r7, r0
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 80008a0:	183b      	adds	r3, r7, r0
 80008a2:	2220      	movs	r2, #32
 80008a4:	2101      	movs	r1, #1
 80008a6:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 80008a8:	0001      	movs	r1, r0
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2280      	movs	r2, #128	@ 0x80
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 80008b2:	197c      	adds	r4, r7, r5
 80008b4:	1879      	adds	r1, r7, r1
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2200      	movs	r2, #0
 80008ba:	0018      	movs	r0, r3
 80008bc:	f004 fb50 	bl	8004f60 <HAL_RTC_SetAlarm_IT>
 80008c0:	0003      	movs	r3, r0
 80008c2:	7023      	strb	r3, [r4, #0]

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 80008c4:	197c      	adds	r4, r7, r5
 80008c6:	2380      	movs	r3, #128	@ 0x80
 80008c8:	005a      	lsls	r2, r3, #1
 80008ca:	2314      	movs	r3, #20
 80008cc:	18f9      	adds	r1, r7, r3
 80008ce:	68f8      	ldr	r0, [r7, #12]
 80008d0:	2300      	movs	r3, #0
 80008d2:	f004 fc85 	bl	80051e0 <HAL_RTC_GetAlarm>
 80008d6:	0003      	movs	r3, r0
 80008d8:	7023      	strb	r3, [r4, #0]
//	if(halRet == HAL_OK) {
//		printf("Internal alarm A defaulted to %u:%u:%u.\n\r", internalAlarm_initTest.AlarmTime.Hours,
//				internalAlarm_initTest.AlarmTime.Minutes, internalAlarm_initTest.AlarmTime.Seconds);
//	}

}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	b01a      	add	sp, #104	@ 0x68
 80008e0:	bdb0      	pop	{r4, r5, r7, pc}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	80800080 	.word	0x80800080

080008e8 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 80008f4:	68b9      	ldr	r1, [r7, #8]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	2200      	movs	r2, #0
 80008fa:	0018      	movs	r0, r3
 80008fc:	f004 f9f4 	bl	8004ce8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000900:	6879      	ldr	r1, [r7, #4]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	2200      	movs	r2, #0
 8000906:	0018      	movs	r0, r3
 8000908:	f004 fadc 	bl	8004ec4 <HAL_RTC_GetDate>

}
 800090c:	46c0      	nop			@ (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	b004      	add	sp, #16
 8000912:	bd80      	pop	{r7, pc}

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000916:	b08d      	sub	sp, #52	@ 0x34
 8000918:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091a:	f001 fc1b 	bl	8002154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091e:	f000 f891 	bl	8000a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000922:	f000 fae1 	bl	8000ee8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000926:	f000 f8f9 	bl	8000b1c <MX_ADC1_Init>
  MX_RTC_Init();
 800092a:	f000 f9a3 	bl	8000c74 <MX_RTC_Init>
  MX_I2C1_Init();
 800092e:	f000 f961 	bl	8000bf4 <MX_I2C1_Init>
  MX_TIM14_Init();
 8000932:	f000 fab3 	bl	8000e9c <MX_TIM14_Init>
  MX_TIM2_Init();
 8000936:	f000 fa51 	bl	8000ddc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  initRTCTime(&hrtc, &currTime, &currDate);
 800093a:	4a35      	ldr	r2, [pc, #212]	@ (8000a10 <main+0xfc>)
 800093c:	4935      	ldr	r1, [pc, #212]	@ (8000a14 <main+0x100>)
 800093e:	4b36      	ldr	r3, [pc, #216]	@ (8000a18 <main+0x104>)
 8000940:	0018      	movs	r0, r3
 8000942:	f7ff ff49 	bl	80007d8 <initRTCTime>

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000946:	2380      	movs	r3, #128	@ 0x80
 8000948:	009c      	lsls	r4, r3, #2
 800094a:	2380      	movs	r3, #128	@ 0x80
 800094c:	00dd      	lsls	r5, r3, #3
 800094e:	2680      	movs	r6, #128	@ 0x80
 8000950:	2340      	movs	r3, #64	@ 0x40
 8000952:	469c      	mov	ip, r3
 8000954:	2380      	movs	r3, #128	@ 0x80
 8000956:	011a      	lsls	r2, r3, #4
 8000958:	4b30      	ldr	r3, [pc, #192]	@ (8000a1c <main+0x108>)
 800095a:	6819      	ldr	r1, [r3, #0]
 800095c:	4b30      	ldr	r3, [pc, #192]	@ (8000a20 <main+0x10c>)
 800095e:	6818      	ldr	r0, [r3, #0]
 8000960:	4b30      	ldr	r3, [pc, #192]	@ (8000a24 <main+0x110>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	9304      	str	r3, [sp, #16]
 8000966:	9003      	str	r0, [sp, #12]
 8000968:	9102      	str	r1, [sp, #8]
 800096a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a28 <main+0x114>)
 800096c:	9301      	str	r3, [sp, #4]
 800096e:	9200      	str	r2, [sp, #0]
 8000970:	4663      	mov	r3, ip
 8000972:	0032      	movs	r2, r6
 8000974:	0029      	movs	r1, r5
 8000976:	0020      	movs	r0, r4
 8000978:	f000 ffd8 	bl	800192c <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);

	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 800097c:	2317      	movs	r3, #23
 800097e:	18fc      	adds	r4, r7, r3
 8000980:	f000 fb84 	bl	800108c <updateAndDisplayTime>
 8000984:	0003      	movs	r3, r0
 8000986:	7023      	strb	r3, [r4, #0]

    /*
     * Initialize capacitive touch sensor
     */

    uint8_t initRet = capTouch_Init(&capTouch, &hi2c1, 0b00001111);
 8000988:	2516      	movs	r5, #22
 800098a:	197c      	adds	r4, r7, r5
 800098c:	4927      	ldr	r1, [pc, #156]	@ (8000a2c <main+0x118>)
 800098e:	4b28      	ldr	r3, [pc, #160]	@ (8000a30 <main+0x11c>)
 8000990:	220f      	movs	r2, #15
 8000992:	0018      	movs	r0, r3
 8000994:	f7ff fc42 	bl	800021c <capTouch_Init>
 8000998:	0003      	movs	r3, r0
 800099a:	7023      	strb	r3, [r4, #0]
    if(initRet) {
 800099c:	197b      	adds	r3, r7, r5
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <main+0x94>
    	dispError();
 80009a4:	f000 ff0a 	bl	80017bc <dispError>
    }

    // Max. out averaging factor
    uint8_t avgFactors_New[7] = {32, 32, 32, 32, 0, 0, 0};
 80009a8:	200c      	movs	r0, #12
 80009aa:	183b      	adds	r3, r7, r0
 80009ac:	4a21      	ldr	r2, [pc, #132]	@ (8000a34 <main+0x120>)
 80009ae:	6811      	ldr	r1, [r2, #0]
 80009b0:	6019      	str	r1, [r3, #0]
 80009b2:	8891      	ldrh	r1, [r2, #4]
 80009b4:	8099      	strh	r1, [r3, #4]
 80009b6:	7992      	ldrb	r2, [r2, #6]
 80009b8:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 80009ba:	2517      	movs	r5, #23
 80009bc:	197c      	adds	r4, r7, r5
 80009be:	183a      	adds	r2, r7, r0
 80009c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a30 <main+0x11c>)
 80009c2:	0011      	movs	r1, r2
 80009c4:	0018      	movs	r0, r3
 80009c6:	f7ff fde3 	bl	8000590 <capTouch_SetAveragingFactor>
 80009ca:	0003      	movs	r3, r0
 80009cc:	7023      	strb	r3, [r4, #0]

    // Set detection integration factors
    uint8_t detIntFactors_New[7] = {0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4a19      	ldr	r2, [pc, #100]	@ (8000a38 <main+0x124>)
 80009d2:	6811      	ldr	r1, [r2, #0]
 80009d4:	6019      	str	r1, [r3, #0]
 80009d6:	8891      	ldrh	r1, [r2, #4]
 80009d8:	8099      	strh	r1, [r3, #4]
 80009da:	7992      	ldrb	r2, [r2, #6]
 80009dc:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 80009de:	197c      	adds	r4, r7, r5
 80009e0:	1d3a      	adds	r2, r7, #4
 80009e2:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <main+0x11c>)
 80009e4:	0011      	movs	r1, r2
 80009e6:	0018      	movs	r0, r3
 80009e8:	f7ff fe84 	bl	80006f4 <capTouch_SetDetectionIntegrator>
 80009ec:	0003      	movs	r3, r0
 80009ee:	7023      	strb	r3, [r4, #0]

	userAlarmToggle = false;			//Default to off
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <main+0x128>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]

    // User alarm default value
    userAlarmTime.Hours = 1;
 80009f6:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <main+0x12c>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
    userAlarmTime.Minutes = 1;
 80009fc:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <main+0x12c>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	705a      	strb	r2, [r3, #1]
    userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000a02:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <main+0x12c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	70da      	strb	r2, [r3, #3]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  dispError();
 8000a08:	f000 fed8 	bl	80017bc <dispError>
 8000a0c:	e7fc      	b.n	8000a08 <main+0xf4>
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	20000204 	.word	0x20000204
 8000a14:	200001f0 	.word	0x200001f0
 8000a18:	2000012c 	.word	0x2000012c
 8000a1c:	20000024 	.word	0x20000024
 8000a20:	20000028 	.word	0x20000028
 8000a24:	2000002c 	.word	0x2000002c
 8000a28:	2000000c 	.word	0x2000000c
 8000a2c:	200000d8 	.word	0x200000d8
 8000a30:	20000220 	.word	0x20000220
 8000a34:	08006458 	.word	0x08006458
 8000a38:	08006460 	.word	0x08006460
 8000a3c:	20000071 	.word	0x20000071
 8000a40:	20000208 	.word	0x20000208

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b093      	sub	sp, #76	@ 0x4c
 8000a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4a:	2410      	movs	r4, #16
 8000a4c:	193b      	adds	r3, r7, r4
 8000a4e:	0018      	movs	r0, r3
 8000a50:	2338      	movs	r3, #56	@ 0x38
 8000a52:	001a      	movs	r2, r3
 8000a54:	2100      	movs	r1, #0
 8000a56:	f005 fcb5 	bl	80063c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5a:	003b      	movs	r3, r7
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	2310      	movs	r3, #16
 8000a60:	001a      	movs	r2, r3
 8000a62:	2100      	movs	r1, #0
 8000a64:	f005 fcae 	bl	80063c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a68:	2380      	movs	r3, #128	@ 0x80
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f003 f993 	bl	8003d98 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a72:	f003 f983 	bl	8003d7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a76:	4b28      	ldr	r3, [pc, #160]	@ (8000b18 <SystemClock_Config+0xd4>)
 8000a78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000a7a:	4b27      	ldr	r3, [pc, #156]	@ (8000b18 <SystemClock_Config+0xd4>)
 8000a7c:	2118      	movs	r1, #24
 8000a7e:	438a      	bics	r2, r1
 8000a80:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	2206      	movs	r2, #6
 8000a86:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	2280      	movs	r2, #128	@ 0x80
 8000a92:	0052      	lsls	r2, r2, #1
 8000a94:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000a96:	0021      	movs	r1, r4
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2240      	movs	r2, #64	@ 0x40
 8000aa2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2202      	movs	r2, #2
 8000aae:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2208      	movs	r2, #8
 8000aba:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2280      	movs	r2, #128	@ 0x80
 8000ac0:	0292      	lsls	r2, r2, #10
 8000ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2280      	movs	r2, #128	@ 0x80
 8000ac8:	0492      	lsls	r2, r2, #18
 8000aca:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2280      	movs	r2, #128	@ 0x80
 8000ad0:	0592      	lsls	r2, r2, #22
 8000ad2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f003 f99e 	bl	8003e18 <HAL_RCC_OscConfig>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000ae0:	f000 ff1e 	bl	8001920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae4:	003b      	movs	r3, r7
 8000ae6:	2207      	movs	r2, #7
 8000ae8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aea:	003b      	movs	r3, r7
 8000aec:	2202      	movs	r2, #2
 8000aee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af0:	003b      	movs	r3, r7
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af6:	003b      	movs	r3, r7
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000afc:	003b      	movs	r3, r7
 8000afe:	2102      	movs	r1, #2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f003 fca3 	bl	800444c <HAL_RCC_ClockConfig>
 8000b06:	1e03      	subs	r3, r0, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b0a:	f000 ff09 	bl	8001920 <Error_Handler>
  }
}
 8000b0e:	46c0      	nop			@ (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b013      	add	sp, #76	@ 0x4c
 8000b14:	bd90      	pop	{r4, r7, pc}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	40021000 	.word	0x40021000

08000b1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	0018      	movs	r0, r3
 8000b26:	230c      	movs	r3, #12
 8000b28:	001a      	movs	r2, r3
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	f005 fc4a 	bl	80063c4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b30:	4b2d      	ldr	r3, [pc, #180]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000b32:	4a2e      	ldr	r2, [pc, #184]	@ (8000bec <MX_ADC1_Init+0xd0>)
 8000b34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b36:	4b2c      	ldr	r3, [pc, #176]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000b38:	2280      	movs	r2, #128	@ 0x80
 8000b3a:	05d2      	lsls	r2, r2, #23
 8000b3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b44:	4b28      	ldr	r3, [pc, #160]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b4a:	4b27      	ldr	r3, [pc, #156]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b50:	4b25      	ldr	r3, [pc, #148]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000b52:	2204      	movs	r2, #4
 8000b54:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b56:	4b24      	ldr	r3, [pc, #144]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b62:	4b21      	ldr	r3, [pc, #132]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000b68:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000b70:	2220      	movs	r2, #32
 8000b72:	2100      	movs	r1, #0
 8000b74:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b82:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000b84:	222c      	movs	r2, #44	@ 0x2c
 8000b86:	2100      	movs	r1, #0
 8000b88:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000b90:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000b96:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000b9e:	223c      	movs	r2, #60	@ 0x3c
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000ba4:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000baa:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000bac:	0018      	movs	r0, r3
 8000bae:	f001 fc55 	bl	800245c <HAL_ADC_Init>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d001      	beq.n	8000bba <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000bb6:	f000 feb3 	bl	8001920 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf0 <MX_ADC1_Init+0xd4>)
 8000bbe:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bcc:	1d3a      	adds	r2, r7, #4
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <MX_ADC1_Init+0xcc>)
 8000bd0:	0011      	movs	r1, r2
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f001 fdea 	bl	80027ac <HAL_ADC_ConfigChannel>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d001      	beq.n	8000be0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000bdc:	f000 fea0 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000be0:	46c0      	nop			@ (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b004      	add	sp, #16
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000074 	.word	0x20000074
 8000bec:	40012400 	.word	0x40012400
 8000bf0:	08000004 	.word	0x08000004

08000bf4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8000c6c <MX_I2C1_Init+0x78>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c00:	4a1b      	ldr	r2, [pc, #108]	@ (8000c70 <MX_I2C1_Init+0x7c>)
 8000c02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c04:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c0a:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c10:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c16:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c30:	0018      	movs	r0, r3
 8000c32:	f002 fa5f 	bl	80030f4 <HAL_I2C_Init>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d001      	beq.n	8000c3e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c3a:	f000 fe71 	bl	8001920 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c40:	2100      	movs	r1, #0
 8000c42:	0018      	movs	r0, r3
 8000c44:	f003 f802 	bl	8003c4c <HAL_I2CEx_ConfigAnalogFilter>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c4c:	f000 fe68 	bl	8001920 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c50:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c52:	2100      	movs	r1, #0
 8000c54:	0018      	movs	r0, r3
 8000c56:	f003 f845 	bl	8003ce4 <HAL_I2CEx_ConfigDigitalFilter>
 8000c5a:	1e03      	subs	r3, r0, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c5e:	f000 fe5f 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200000d8 	.word	0x200000d8
 8000c6c:	40005400 	.word	0x40005400
 8000c70:	00602173 	.word	0x00602173

08000c74 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b090      	sub	sp, #64	@ 0x40
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c7a:	232c      	movs	r3, #44	@ 0x2c
 8000c7c:	18fb      	adds	r3, r7, r3
 8000c7e:	0018      	movs	r0, r3
 8000c80:	2314      	movs	r3, #20
 8000c82:	001a      	movs	r2, r3
 8000c84:	2100      	movs	r1, #0
 8000c86:	f005 fb9d 	bl	80063c4 <memset>
  RTC_DateTypeDef sDate = {0};
 8000c8a:	2328      	movs	r3, #40	@ 0x28
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000c92:	003b      	movs	r3, r7
 8000c94:	0018      	movs	r0, r3
 8000c96:	2328      	movs	r3, #40	@ 0x28
 8000c98:	001a      	movs	r2, r3
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	f005 fb92 	bl	80063c4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ca0:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd0 <MX_RTC_Init+0x15c>)
 8000ca2:	4a4c      	ldr	r2, [pc, #304]	@ (8000dd4 <MX_RTC_Init+0x160>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000ca6:	4b4a      	ldr	r3, [pc, #296]	@ (8000dd0 <MX_RTC_Init+0x15c>)
 8000ca8:	2240      	movs	r2, #64	@ 0x40
 8000caa:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000cac:	4b48      	ldr	r3, [pc, #288]	@ (8000dd0 <MX_RTC_Init+0x15c>)
 8000cae:	227f      	movs	r2, #127	@ 0x7f
 8000cb0:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000cb2:	4b47      	ldr	r3, [pc, #284]	@ (8000dd0 <MX_RTC_Init+0x15c>)
 8000cb4:	22ff      	movs	r2, #255	@ 0xff
 8000cb6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cb8:	4b45      	ldr	r3, [pc, #276]	@ (8000dd0 <MX_RTC_Init+0x15c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000cbe:	4b44      	ldr	r3, [pc, #272]	@ (8000dd0 <MX_RTC_Init+0x15c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cc4:	4b42      	ldr	r3, [pc, #264]	@ (8000dd0 <MX_RTC_Init+0x15c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cca:	4b41      	ldr	r3, [pc, #260]	@ (8000dd0 <MX_RTC_Init+0x15c>)
 8000ccc:	2280      	movs	r2, #128	@ 0x80
 8000cce:	05d2      	lsls	r2, r2, #23
 8000cd0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd0 <MX_RTC_Init+0x15c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cd8:	4b3d      	ldr	r3, [pc, #244]	@ (8000dd0 <MX_RTC_Init+0x15c>)
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f003 feba 	bl	8004a54 <HAL_RTC_Init>
 8000ce0:	1e03      	subs	r3, r0, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000ce4:	f000 fe1c 	bl	8001920 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000ce8:	212c      	movs	r1, #44	@ 0x2c
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2200      	movs	r2, #0
 8000d00:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2200      	movs	r2, #0
 8000d06:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d14:	1879      	adds	r1, r7, r1
 8000d16:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd0 <MX_RTC_Init+0x15c>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f003 ff3c 	bl	8004b98 <HAL_RTC_SetTime>
 8000d20:	1e03      	subs	r3, r0, #0
 8000d22:	d001      	beq.n	8000d28 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000d24:	f000 fdfc 	bl	8001920 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d28:	2128      	movs	r1, #40	@ 0x28
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2201      	movs	r2, #1
 8000d34:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2201      	movs	r2, #1
 8000d3a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2200      	movs	r2, #0
 8000d40:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d42:	1879      	adds	r1, r7, r1
 8000d44:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <MX_RTC_Init+0x15c>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f004 f829 	bl	8004da0 <HAL_RTC_SetDate>
 8000d4e:	1e03      	subs	r3, r0, #0
 8000d50:	d001      	beq.n	8000d56 <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 8000d52:	f000 fde5 	bl	8001920 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000d56:	003b      	movs	r3, r7
 8000d58:	2201      	movs	r2, #1
 8000d5a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000d5c:	003b      	movs	r3, r7
 8000d5e:	2201      	movs	r2, #1
 8000d60:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000d62:	003b      	movs	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000d68:	003b      	movs	r3, r7
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000d6e:	003b      	movs	r3, r7
 8000d70:	2200      	movs	r2, #0
 8000d72:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d74:	003b      	movs	r3, r7
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d7a:	003b      	movs	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000d80:	003b      	movs	r3, r7
 8000d82:	4a15      	ldr	r2, [pc, #84]	@ (8000dd8 <MX_RTC_Init+0x164>)
 8000d84:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d86:	003b      	movs	r3, r7
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d8c:	003b      	movs	r3, r7
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d92:	003b      	movs	r3, r7
 8000d94:	2220      	movs	r2, #32
 8000d96:	2101      	movs	r1, #1
 8000d98:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000d9a:	003b      	movs	r3, r7
 8000d9c:	2280      	movs	r2, #128	@ 0x80
 8000d9e:	0052      	lsls	r2, r2, #1
 8000da0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000da2:	0039      	movs	r1, r7
 8000da4:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <MX_RTC_Init+0x15c>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	0018      	movs	r0, r3
 8000daa:	f004 f8d9 	bl	8004f60 <HAL_RTC_SetAlarm_IT>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d001      	beq.n	8000db6 <MX_RTC_Init+0x142>
  {
    Error_Handler();
 8000db2:	f000 fdb5 	bl	8001920 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <MX_RTC_Init+0x15c>)
 8000db8:	2100      	movs	r1, #0
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f004 fc06 	bl	80055cc <HAL_RTCEx_SetCalibrationOutPut>
 8000dc0:	1e03      	subs	r3, r0, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_RTC_Init+0x154>
  {
    Error_Handler();
 8000dc4:	f000 fdac 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000dc8:	46c0      	nop			@ (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b010      	add	sp, #64	@ 0x40
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2000012c 	.word	0x2000012c
 8000dd4:	40002800 	.word	0x40002800
 8000dd8:	80800080 	.word	0x80800080

08000ddc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	@ 0x28
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de2:	231c      	movs	r3, #28
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	0018      	movs	r0, r3
 8000de8:	230c      	movs	r3, #12
 8000dea:	001a      	movs	r2, r3
 8000dec:	2100      	movs	r1, #0
 8000dee:	f005 fae9 	bl	80063c4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df2:	003b      	movs	r3, r7
 8000df4:	0018      	movs	r0, r3
 8000df6:	231c      	movs	r3, #28
 8000df8:	001a      	movs	r2, r3
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	f005 fae2 	bl	80063c4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e00:	4b24      	ldr	r3, [pc, #144]	@ (8000e94 <MX_TIM2_Init+0xb8>)
 8000e02:	2280      	movs	r2, #128	@ 0x80
 8000e04:	05d2      	lsls	r2, r2, #23
 8000e06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8000e08:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <MX_TIM2_Init+0xb8>)
 8000e0a:	4a23      	ldr	r2, [pc, #140]	@ (8000e98 <MX_TIM2_Init+0xbc>)
 8000e0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0e:	4b21      	ldr	r3, [pc, #132]	@ (8000e94 <MX_TIM2_Init+0xb8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <MX_TIM2_Init+0xb8>)
 8000e16:	2263      	movs	r2, #99	@ 0x63
 8000e18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e94 <MX_TIM2_Init+0xb8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e20:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <MX_TIM2_Init+0xb8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e26:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <MX_TIM2_Init+0xb8>)
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f004 fce9 	bl	8005800 <HAL_TIM_PWM_Init>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000e32:	f000 fd75 	bl	8001920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e36:	211c      	movs	r1, #28
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e44:	187a      	adds	r2, r7, r1
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <MX_TIM2_Init+0xb8>)
 8000e48:	0011      	movs	r1, r2
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f005 fa52 	bl	80062f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e50:	1e03      	subs	r3, r0, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000e54:	f000 fd64 	bl	8001920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e58:	003b      	movs	r3, r7
 8000e5a:	2260      	movs	r2, #96	@ 0x60
 8000e5c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e5e:	003b      	movs	r3, r7
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e64:	003b      	movs	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e6a:	003b      	movs	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e70:	0039      	movs	r1, r7
 8000e72:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <MX_TIM2_Init+0xb8>)
 8000e74:	2208      	movs	r2, #8
 8000e76:	0018      	movs	r0, r3
 8000e78:	f004 fdf8 	bl	8005a6c <HAL_TIM_PWM_ConfigChannel>
 8000e7c:	1e03      	subs	r3, r0, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000e80:	f000 fd4e 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e84:	4b03      	ldr	r3, [pc, #12]	@ (8000e94 <MX_TIM2_Init+0xb8>)
 8000e86:	0018      	movs	r0, r3
 8000e88:	f001 f8ae 	bl	8001fe8 <HAL_TIM_MspPostInit>

}
 8000e8c:	46c0      	nop			@ (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b00a      	add	sp, #40	@ 0x28
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000158 	.word	0x20000158
 8000e98:	0000031f 	.word	0x0000031f

08000e9c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <MX_TIM14_Init+0x40>)
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee0 <MX_TIM14_Init+0x44>)
 8000ea4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8000edc <MX_TIM14_Init+0x40>)
 8000ea8:	22f4      	movs	r2, #244	@ 0xf4
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <MX_TIM14_Init+0x40>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <MX_TIM14_Init+0x40>)
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee4 <MX_TIM14_Init+0x48>)
 8000eb8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eba:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <MX_TIM14_Init+0x40>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <MX_TIM14_Init+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ec6:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <MX_TIM14_Init+0x40>)
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f004 fbcf 	bl	800566c <HAL_TIM_Base_Init>
 8000ece:	1e03      	subs	r3, r0, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000ed2:	f000 fd25 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000ed6:	46c0      	nop			@ (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200001a4 	.word	0x200001a4
 8000ee0:	40002000 	.word	0x40002000
 8000ee4:	0000ffff 	.word	0x0000ffff

08000ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b08b      	sub	sp, #44	@ 0x2c
 8000eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	2414      	movs	r4, #20
 8000ef0:	193b      	adds	r3, r7, r4
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	2314      	movs	r3, #20
 8000ef6:	001a      	movs	r2, r3
 8000ef8:	2100      	movs	r1, #0
 8000efa:	f005 fa63 	bl	80063c4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	4b5e      	ldr	r3, [pc, #376]	@ (8001078 <MX_GPIO_Init+0x190>)
 8000f00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f02:	4b5d      	ldr	r3, [pc, #372]	@ (8001078 <MX_GPIO_Init+0x190>)
 8000f04:	2104      	movs	r1, #4
 8000f06:	430a      	orrs	r2, r1
 8000f08:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f0a:	4b5b      	ldr	r3, [pc, #364]	@ (8001078 <MX_GPIO_Init+0x190>)
 8000f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f0e:	2204      	movs	r2, #4
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b58      	ldr	r3, [pc, #352]	@ (8001078 <MX_GPIO_Init+0x190>)
 8000f18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f1a:	4b57      	ldr	r3, [pc, #348]	@ (8001078 <MX_GPIO_Init+0x190>)
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f22:	4b55      	ldr	r3, [pc, #340]	@ (8001078 <MX_GPIO_Init+0x190>)
 8000f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f26:	2201      	movs	r2, #1
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2e:	4b52      	ldr	r3, [pc, #328]	@ (8001078 <MX_GPIO_Init+0x190>)
 8000f30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f32:	4b51      	ldr	r3, [pc, #324]	@ (8001078 <MX_GPIO_Init+0x190>)
 8000f34:	2108      	movs	r1, #8
 8000f36:	430a      	orrs	r2, r1
 8000f38:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8001078 <MX_GPIO_Init+0x190>)
 8000f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f3e:	2208      	movs	r2, #8
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	4b4c      	ldr	r3, [pc, #304]	@ (8001078 <MX_GPIO_Init+0x190>)
 8000f48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f4a:	4b4b      	ldr	r3, [pc, #300]	@ (8001078 <MX_GPIO_Init+0x190>)
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f52:	4b49      	ldr	r3, [pc, #292]	@ (8001078 <MX_GPIO_Init+0x190>)
 8000f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f56:	2202      	movs	r2, #2
 8000f58:	4013      	ands	r3, r2
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8000f5e:	4947      	ldr	r1, [pc, #284]	@ (800107c <MX_GPIO_Init+0x194>)
 8000f60:	23a0      	movs	r3, #160	@ 0xa0
 8000f62:	05db      	lsls	r3, r3, #23
 8000f64:	2200      	movs	r2, #0
 8000f66:	0018      	movs	r0, r3
 8000f68:	f002 f857 	bl	800301a <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8000f6c:	4b44      	ldr	r3, [pc, #272]	@ (8001080 <MX_GPIO_Init+0x198>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2180      	movs	r1, #128	@ 0x80
 8000f72:	0018      	movs	r0, r3
 8000f74:	f002 f851 	bl	800301a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_EN_GPIO_Port, CTOUCH_EN_Pin, GPIO_PIN_RESET);
 8000f78:	2380      	movs	r3, #128	@ 0x80
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4841      	ldr	r0, [pc, #260]	@ (8001084 <MX_GPIO_Init+0x19c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	0019      	movs	r1, r3
 8000f82:	f002 f84a 	bl	800301a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin BUZZER_OUT_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin
                           SHIFT_MCLR_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	4a3c      	ldr	r2, [pc, #240]	@ (800107c <MX_GPIO_Init+0x194>)
 8000f8a:	601a      	str	r2, [r3, #0]
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	193b      	adds	r3, r7, r4
 8000f8e:	2201      	movs	r2, #1
 8000f90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	193b      	adds	r3, r7, r4
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	193b      	adds	r3, r7, r4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	193a      	adds	r2, r7, r4
 8000fa0:	23a0      	movs	r3, #160	@ 0xa0
 8000fa2:	05db      	lsls	r3, r3, #23
 8000fa4:	0011      	movs	r1, r2
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f001 feb6 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8000fac:	193b      	adds	r3, r7, r4
 8000fae:	2280      	movs	r2, #128	@ 0x80
 8000fb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	193b      	adds	r3, r7, r4
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	193b      	adds	r3, r7, r4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	193b      	adds	r3, r7, r4
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	193b      	adds	r3, r7, r4
 8000fc6:	4a2e      	ldr	r2, [pc, #184]	@ (8001080 <MX_GPIO_Init+0x198>)
 8000fc8:	0019      	movs	r1, r3
 8000fca:	0010      	movs	r0, r2
 8000fcc:	f001 fea4 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 8000fd0:	193b      	adds	r3, r7, r4
 8000fd2:	2280      	movs	r2, #128	@ 0x80
 8000fd4:	0212      	lsls	r2, r2, #8
 8000fd6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd8:	193b      	adds	r3, r7, r4
 8000fda:	2284      	movs	r2, #132	@ 0x84
 8000fdc:	0392      	lsls	r2, r2, #14
 8000fde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe0:	193b      	adds	r3, r7, r4
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	193a      	adds	r2, r7, r4
 8000fe8:	23a0      	movs	r3, #160	@ 0xa0
 8000fea:	05db      	lsls	r3, r3, #23
 8000fec:	0011      	movs	r1, r2
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f001 fe92 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 8000ff4:	0021      	movs	r1, r4
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	2284      	movs	r2, #132	@ 0x84
 8001000:	0392      	lsls	r2, r2, #14
 8001002:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001004:	187b      	adds	r3, r7, r1
 8001006:	2201      	movs	r2, #1
 8001008:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800100a:	000c      	movs	r4, r1
 800100c:	187b      	adds	r3, r7, r1
 800100e:	4a1e      	ldr	r2, [pc, #120]	@ (8001088 <MX_GPIO_Init+0x1a0>)
 8001010:	0019      	movs	r1, r3
 8001012:	0010      	movs	r0, r2
 8001014:	f001 fe80 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_EN_Pin */
  GPIO_InitStruct.Pin = CTOUCH_EN_Pin;
 8001018:	0021      	movs	r1, r4
 800101a:	187b      	adds	r3, r7, r1
 800101c:	2280      	movs	r2, #128	@ 0x80
 800101e:	0092      	lsls	r2, r2, #2
 8001020:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	187b      	adds	r3, r7, r1
 8001024:	2201      	movs	r2, #1
 8001026:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	187b      	adds	r3, r7, r1
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	187b      	adds	r3, r7, r1
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_EN_GPIO_Port, &GPIO_InitStruct);
 8001034:	187b      	adds	r3, r7, r1
 8001036:	4a13      	ldr	r2, [pc, #76]	@ (8001084 <MX_GPIO_Init+0x19c>)
 8001038:	0019      	movs	r1, r3
 800103a:	0010      	movs	r0, r2
 800103c:	f001 fe6c 	bl	8002d18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	2005      	movs	r0, #5
 8001046:	f001 fe35 	bl	8002cb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800104a:	2005      	movs	r0, #5
 800104c:	f001 fe47 	bl	8002cde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2100      	movs	r1, #0
 8001054:	2006      	movs	r0, #6
 8001056:	f001 fe2d 	bl	8002cb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800105a:	2006      	movs	r0, #6
 800105c:	f001 fe3f 	bl	8002cde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2101      	movs	r1, #1
 8001064:	2007      	movs	r0, #7
 8001066:	f001 fe25 	bl	8002cb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800106a:	2007      	movs	r0, #7
 800106c:	f001 fe37 	bl	8002cde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001070:	46c0      	nop			@ (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b00b      	add	sp, #44	@ 0x2c
 8001076:	bd90      	pop	{r4, r7, pc}
 8001078:	40021000 	.word	0x40021000
 800107c:	00001f01 	.word	0x00001f01
 8001080:	50000800 	.word	0x50000800
 8001084:	50000400 	.word	0x50000400
 8001088:	50000c00 	.word	0x50000c00

0800108c <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8001098:	4a07      	ldr	r2, [pc, #28]	@ (80010b8 <updateAndDisplayTime+0x2c>)
 800109a:	4908      	ldr	r1, [pc, #32]	@ (80010bc <updateAndDisplayTime+0x30>)
 800109c:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <updateAndDisplayTime+0x34>)
 800109e:	0018      	movs	r0, r3
 80010a0:	f7ff fc22 	bl	80008e8 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 80010a4:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <updateAndDisplayTime+0x30>)
 80010a6:	0018      	movs	r0, r3
 80010a8:	f000 fd54 	bl	8001b54 <sevSeg_updateDigits>

	return halRet;
 80010ac:	1dfb      	adds	r3, r7, #7
 80010ae:	781b      	ldrb	r3, [r3, #0]

}
 80010b0:	0018      	movs	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b002      	add	sp, #8
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000204 	.word	0x20000204
 80010bc:	200001f0 	.word	0x200001f0
 80010c0:	2000012c 	.word	0x2000012c

080010c4 <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 80010d0:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <updateAndDisplayAlarm+0x20>)
 80010d2:	0018      	movs	r0, r3
 80010d4:	f000 fd3e 	bl	8001b54 <sevSeg_updateDigits>

	return halRet;
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	781b      	ldrb	r3, [r3, #0]

}
 80010dc:	0018      	movs	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	b002      	add	sp, #8
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000208 	.word	0x20000208

080010e8 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b08d      	sub	sp, #52	@ 0x34
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

	  //printf("Enter current time minute increment interrupt\n\r");

	  RTC_AlarmTypeDef sAlarm;
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 80010f0:	2380      	movs	r3, #128	@ 0x80
 80010f2:	005a      	lsls	r2, r3, #1
 80010f4:	2408      	movs	r4, #8
 80010f6:	1939      	adds	r1, r7, r4
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	2300      	movs	r3, #0
 80010fc:	f004 f870 	bl	80051e0 <HAL_RTC_GetAlarm>
	  getRTCTime(hrtc, &currTime, &currDate);
 8001100:	4a22      	ldr	r2, [pc, #136]	@ (800118c <HAL_RTC_AlarmAEventCallback+0xa4>)
 8001102:	4923      	ldr	r1, [pc, #140]	@ (8001190 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	0018      	movs	r0, r3
 8001108:	f7ff fbee 	bl	80008e8 <getRTCTime>

	  if(sAlarm.AlarmTime.Minutes>58) {
 800110c:	0022      	movs	r2, r4
 800110e:	18bb      	adds	r3, r7, r2
 8001110:	785b      	ldrb	r3, [r3, #1]
 8001112:	2b3a      	cmp	r3, #58	@ 0x3a
 8001114:	d903      	bls.n	800111e <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 8001116:	18bb      	adds	r3, r7, r2
 8001118:	2200      	movs	r2, #0
 800111a:	705a      	strb	r2, [r3, #1]
 800111c:	e00e      	b.n	800113c <HAL_RTC_AlarmAEventCallback+0x54>
		//printf("Reset alarm time\n\r");
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 800111e:	2108      	movs	r1, #8
 8001120:	187b      	adds	r3, r7, r1
 8001122:	785b      	ldrb	r3, [r3, #1]
 8001124:	3301      	adds	r3, #1
 8001126:	b2da      	uxtb	r2, r3
 8001128:	187b      	adds	r3, r7, r1
 800112a:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 800112c:	e006      	b.n	800113c <HAL_RTC_AlarmAEventCallback+0x54>
			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 800112e:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <HAL_RTC_AlarmAEventCallback+0xac>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2201      	movs	r2, #1
 8001134:	0011      	movs	r1, r2
 8001136:	0018      	movs	r0, r3
 8001138:	f001 ff8c 	bl	8003054 <HAL_GPIO_TogglePin>
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 800113c:	2308      	movs	r3, #8
 800113e:	18f9      	adds	r1, r7, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	0018      	movs	r0, r3
 8001146:	f003 ff0b 	bl	8004f60 <HAL_RTC_SetAlarm_IT>
 800114a:	1e03      	subs	r3, r0, #0
 800114c:	d1ef      	bne.n	800112e <HAL_RTC_AlarmAEventCallback+0x46>
		}

	  updateAndDisplayTime();
 800114e:	f7ff ff9d 	bl	800108c <updateAndDisplayTime>

	  //printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 8001152:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d013      	beq.n	8001182 <HAL_RTC_AlarmAEventCallback+0x9a>
 800115a:	4b10      	ldr	r3, [pc, #64]	@ (800119c <HAL_RTC_AlarmAEventCallback+0xb4>)
 800115c:	781a      	ldrb	r2, [r3, #0]
 800115e:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d10d      	bne.n	8001182 <HAL_RTC_AlarmAEventCallback+0x9a>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 8001166:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <HAL_RTC_AlarmAEventCallback+0xb4>)
 8001168:	785a      	ldrb	r2, [r3, #1]
 800116a:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <HAL_RTC_AlarmAEventCallback+0xa8>)
 800116c:	785b      	ldrb	r3, [r3, #1]
 800116e:	429a      	cmp	r2, r3
 8001170:	d107      	bne.n	8001182 <HAL_RTC_AlarmAEventCallback+0x9a>
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <HAL_RTC_AlarmAEventCallback+0xb4>)
 8001174:	78da      	ldrb	r2, [r3, #3]
 8001176:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001178:	78db      	ldrb	r3, [r3, #3]
 800117a:	429a      	cmp	r2, r3
 800117c:	d101      	bne.n	8001182 <HAL_RTC_AlarmAEventCallback+0x9a>
		  userAlarmBeep();
 800117e:	f000 f80f 	bl	80011a0 <userAlarmBeep>
	  }

}
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	46bd      	mov	sp, r7
 8001186:	b00d      	add	sp, #52	@ 0x34
 8001188:	bd90      	pop	{r4, r7, pc}
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	20000204 	.word	0x20000204
 8001190:	200001f0 	.word	0x200001f0
 8001194:	20000020 	.word	0x20000020
 8001198:	20000071 	.word	0x20000071
 800119c:	20000208 	.word	0x20000208

080011a0 <userAlarmBeep>:

void userAlarmBeep() {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 80011a6:	4b36      	ldr	r3, [pc, #216]	@ (8001280 <userAlarmBeep+0xe0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	0018      	movs	r0, r3
 80011ac:	f004 fb02 	bl	80057b4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 80011b0:	4b33      	ldr	r3, [pc, #204]	@ (8001280 <userAlarmBeep+0xe0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	0018      	movs	r0, r3
 80011b6:	f004 fab1 	bl	800571c <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80011ba:	4b31      	ldr	r3, [pc, #196]	@ (8001280 <userAlarmBeep+0xe0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c2:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 80011c4:	1cfb      	adds	r3, r7, #3
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 80011ca:	f7ff ff5f 	bl	800108c <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 80011ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001280 <userAlarmBeep+0xe0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	4a2a      	ldr	r2, [pc, #168]	@ (8001284 <userAlarmBeep+0xe4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d926      	bls.n	800122e <userAlarmBeep+0x8e>

			sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 80011e0:	4b29      	ldr	r3, [pc, #164]	@ (8001288 <userAlarmBeep+0xe8>)
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	4b29      	ldr	r3, [pc, #164]	@ (800128c <userAlarmBeep+0xec>)
 80011e6:	6819      	ldr	r1, [r3, #0]
 80011e8:	1cfb      	adds	r3, r7, #3
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4a28      	ldr	r2, [pc, #160]	@ (8001290 <userAlarmBeep+0xf0>)
 80011ee:	5cd3      	ldrb	r3, [r2, r3]
 80011f0:	001a      	movs	r2, r3
 80011f2:	f000 fd61 	bl	8001cb8 <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(buzzerPort, buzzerPin);					// Toggle Buzzer
 80011f6:	4b27      	ldr	r3, [pc, #156]	@ (8001294 <userAlarmBeep+0xf4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2280      	movs	r2, #128	@ 0x80
 80011fc:	0052      	lsls	r2, r2, #1
 80011fe:	0011      	movs	r1, r2
 8001200:	0018      	movs	r0, r3
 8001202:	f001 ff27 	bl	8003054 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001206:	4b1e      	ldr	r3, [pc, #120]	@ (8001280 <userAlarmBeep+0xe0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120e:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001210:	1cfb      	adds	r3, r7, #3
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	1e5a      	subs	r2, r3, #1
 8001216:	4193      	sbcs	r3, r2
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2201      	movs	r2, #1
 800121c:	4053      	eors	r3, r2
 800121e:	b2db      	uxtb	r3, r3
 8001220:	001a      	movs	r2, r3
 8001222:	1cfb      	adds	r3, r7, #3
 8001224:	701a      	strb	r2, [r3, #0]
 8001226:	781a      	ldrb	r2, [r3, #0]
 8001228:	2101      	movs	r1, #1
 800122a:	400a      	ands	r2, r1
 800122c:	701a      	strb	r2, [r3, #0]

		}


	} while(capTouch_readChannels(&capTouch) == 0x00);
 800122e:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <userAlarmBeep+0xf8>)
 8001230:	0018      	movs	r0, r3
 8001232:	f7ff f8fb 	bl	800042c <capTouch_readChannels>
 8001236:	1e03      	subs	r3, r0, #0
 8001238:	d0c7      	beq.n	80011ca <userAlarmBeep+0x2a>

	HAL_TIM_Base_Stop(timerDelay);
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <userAlarmBeep+0xe0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	0018      	movs	r0, r3
 8001240:	f004 fab8 	bl	80057b4 <HAL_TIM_Base_Stop>
	HAL_GPIO_WritePin(buzzerPort, buzzerPin, GPIO_PIN_RESET);
 8001244:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <userAlarmBeep+0xf4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2280      	movs	r2, #128	@ 0x80
 800124a:	0051      	lsls	r1, r2, #1
 800124c:	2200      	movs	r2, #0
 800124e:	0018      	movs	r0, r3
 8001250:	f001 fee3 	bl	800301a <HAL_GPIO_WritePin>
	updateAndDisplayTime();				// Update to current time and display
 8001254:	f7ff ff1a 	bl	800108c <updateAndDisplayTime>
	sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[1]);	// Toggle 0% to 50% duty cycle
 8001258:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <userAlarmBeep+0xe8>)
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <userAlarmBeep+0xec>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	225a      	movs	r2, #90	@ 0x5a
 8001262:	0019      	movs	r1, r3
 8001264:	f000 fd28 	bl	8001cb8 <sevSeg_setIntensity>


	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 8001268:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <userAlarmBeep+0xfc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2201      	movs	r2, #1
 800126e:	0011      	movs	r1, r2
 8001270:	0018      	movs	r0, r3
 8001272:	f001 feef 	bl	8003054 <HAL_GPIO_TogglePin>

}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	46bd      	mov	sp, r7
 800127a:	b002      	add	sp, #8
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	20000024 	.word	0x20000024
 8001284:	00007ffe 	.word	0x00007ffe
 8001288:	20000028 	.word	0x20000028
 800128c:	2000002c 	.word	0x2000002c
 8001290:	0800647c 	.word	0x0800647c
 8001294:	20000008 	.word	0x20000008
 8001298:	20000220 	.word	0x20000220
 800129c:	20000020 	.word	0x20000020

080012a0 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	0002      	movs	r2, r0
 80012a8:	1dbb      	adds	r3, r7, #6
 80012aa:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 80012ac:	2208      	movs	r2, #8
 80012ae:	1dbb      	adds	r3, r7, #6
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d106      	bne.n	80012c4 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 80012b6:	230f      	movs	r3, #15
 80012b8:	18fc      	adds	r4, r7, r3
 80012ba:	f000 f839 	bl	8001330 <displayButtonISR>
 80012be:	0003      	movs	r3, r0
 80012c0:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 80012c2:	e031      	b.n	8001328 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 80012c4:	2204      	movs	r2, #4
 80012c6:	1dbb      	adds	r3, r7, #6
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d106      	bne.n	80012dc <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 80012ce:	230f      	movs	r3, #15
 80012d0:	18fc      	adds	r4, r7, r3
 80012d2:	f000 f85d 	bl	8001390 <alarmEnableISR>
 80012d6:	0003      	movs	r3, r0
 80012d8:	7023      	strb	r3, [r4, #0]
}
 80012da:	e025      	b.n	8001328 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 80012dc:	2380      	movs	r3, #128	@ 0x80
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	1dba      	adds	r2, r7, #6
 80012e2:	8812      	ldrh	r2, [r2, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d106      	bne.n	80012f6 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 80012e8:	230f      	movs	r3, #15
 80012ea:	18fc      	adds	r4, r7, r3
 80012ec:	f000 f884 	bl	80013f8 <alarmSetISR>
 80012f0:	0003      	movs	r3, r0
 80012f2:	7023      	strb	r3, [r4, #0]
}
 80012f4:	e018      	b.n	8001328 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 80012f6:	2201      	movs	r2, #1
 80012f8:	1dbb      	adds	r3, r7, #6
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d106      	bne.n	800130e <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 8001300:	230f      	movs	r3, #15
 8001302:	18fc      	adds	r4, r7, r3
 8001304:	f000 f954 	bl	80015b0 <hourSetISR>
 8001308:	0003      	movs	r3, r0
 800130a:	7023      	strb	r3, [r4, #0]
}
 800130c:	e00c      	b.n	8001328 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 800130e:	2202      	movs	r2, #2
 8001310:	1dbb      	adds	r3, r7, #6
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	4293      	cmp	r3, r2
 8001316:	d106      	bne.n	8001326 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 8001318:	230f      	movs	r3, #15
 800131a:	18fc      	adds	r4, r7, r3
 800131c:	f000 f974 	bl	8001608 <minuteSetISR>
 8001320:	0003      	movs	r3, r0
 8001322:	7023      	strb	r3, [r4, #0]
}
 8001324:	e000      	b.n	8001328 <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 8001326:	46c0      	nop			@ (mov r8, r8)
}
 8001328:	46c0      	nop			@ (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	b005      	add	sp, #20
 800132e:	bd90      	pop	{r4, r7, pc}

08001330 <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 800133c:	f7ff fea6 	bl	800108c <updateAndDisplayTime>

	sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8001340:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <displayButtonISR+0x50>)
 8001342:	6818      	ldr	r0, [r3, #0]
 8001344:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <displayButtonISR+0x54>)
 8001346:	6819      	ldr	r1, [r3, #0]
 8001348:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <displayButtonISR+0x58>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	001a      	movs	r2, r3
 800134e:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <displayButtonISR+0x5c>)
 8001350:	5c9b      	ldrb	r3, [r3, r2]
 8001352:	001a      	movs	r2, r3
 8001354:	f000 fcb0 	bl	8001cb8 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8001358:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <displayButtonISR+0x58>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d903      	bls.n	8001368 <displayButtonISR+0x38>
		displayToggle = 0;
 8001360:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <displayButtonISR+0x58>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	e005      	b.n	8001374 <displayButtonISR+0x44>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 8001368:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <displayButtonISR+0x58>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <displayButtonISR+0x58>)
 8001372:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8001374:	1dfb      	adds	r3, r7, #7
 8001376:	781b      	ldrb	r3, [r3, #0]

}
 8001378:	0018      	movs	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	b002      	add	sp, #8
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000028 	.word	0x20000028
 8001384:	2000002c 	.word	0x2000002c
 8001388:	20000070 	.word	0x20000070
 800138c:	0800647c 	.word	0x0800647c

08001390 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 800139c:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <alarmEnableISR+0x60>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2201      	movs	r2, #1
 80013a2:	4053      	eors	r3, r2
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00b      	beq.n	80013c2 <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 80013aa:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <alarmEnableISR+0x64>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2280      	movs	r2, #128	@ 0x80
 80013b0:	0151      	lsls	r1, r2, #5
 80013b2:	2201      	movs	r2, #1
 80013b4:	0018      	movs	r0, r3
 80013b6:	f001 fe30 	bl	800301a <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 80013ba:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <alarmEnableISR+0x60>)
 80013bc:	2201      	movs	r2, #1
 80013be:	701a      	strb	r2, [r3, #0]
 80013c0:	e010      	b.n	80013e4 <alarmEnableISR+0x54>

		//printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
								//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 80013c2:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <alarmEnableISR+0x60>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00b      	beq.n	80013e2 <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 80013ca:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <alarmEnableISR+0x64>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2280      	movs	r2, #128	@ 0x80
 80013d0:	0151      	lsls	r1, r2, #5
 80013d2:	2200      	movs	r2, #0
 80013d4:	0018      	movs	r0, r3
 80013d6:	f001 fe20 	bl	800301a <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 80013da:	4b05      	ldr	r3, [pc, #20]	@ (80013f0 <alarmEnableISR+0x60>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
 80013e0:	e000      	b.n	80013e4 <alarmEnableISR+0x54>

		//printf("User alarm disabled.\n\r");
	}
	else {
		__NOP();							//Code should never reach here.
 80013e2:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 80013e4:	1dfb      	adds	r3, r7, #7
 80013e6:	781b      	ldrb	r3, [r3, #0]

}
 80013e8:	0018      	movs	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b002      	add	sp, #8
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000071 	.word	0x20000071
 80013f4:	20000004 	.word	0x20000004

080013f8 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	//printf("Enter user alarm set ISR.\n\r");

	//printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
			//userAlarmTime.Minutes, userAlarmTime.Seconds);

	HAL_StatusTypeDef halRet = HAL_OK;
 80013fe:	1cbb      	adds	r3, r7, #2
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for switch debounce
	 */

	// First wait for button to deactivate again
	while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_SET);
 8001404:	46c0      	nop			@ (mov r8, r8)
 8001406:	4b64      	ldr	r3, [pc, #400]	@ (8001598 <alarmSetISR+0x1a0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2280      	movs	r2, #128	@ 0x80
 800140c:	0212      	lsls	r2, r2, #8
 800140e:	0011      	movs	r1, r2
 8001410:	0018      	movs	r0, r3
 8001412:	f001 fde5 	bl	8002fe0 <HAL_GPIO_ReadPin>
 8001416:	0003      	movs	r3, r0
 8001418:	2b01      	cmp	r3, #1
 800141a:	d1f4      	bne.n	8001406 <alarmSetISR+0xe>

	// Go through debounce
	HAL_TIM_Base_Stop(timerDelay);
 800141c:	4b5f      	ldr	r3, [pc, #380]	@ (800159c <alarmSetISR+0x1a4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	0018      	movs	r0, r3
 8001422:	f004 f9c7 	bl	80057b4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001426:	4b5d      	ldr	r3, [pc, #372]	@ (800159c <alarmSetISR+0x1a4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	0018      	movs	r0, r3
 800142c:	f004 f976 	bl	800571c <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001430:	4b5a      	ldr	r3, [pc, #360]	@ (800159c <alarmSetISR+0x1a4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001438:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 8));
 800143a:	4b58      	ldr	r3, [pc, #352]	@ (800159c <alarmSetISR+0x1a4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	1ad2      	subs	r2, r2, r3
 8001446:	2380      	movs	r3, #128	@ 0x80
 8001448:	019b      	lsls	r3, r3, #6
 800144a:	429a      	cmp	r2, r3
 800144c:	d9f5      	bls.n	800143a <alarmSetISR+0x42>


	/*
	 *  Poll for 1 second to see if the alarm set button is pressed again
	 */
	HAL_TIM_Base_Stop(timerDelay);
 800144e:	4b53      	ldr	r3, [pc, #332]	@ (800159c <alarmSetISR+0x1a4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	0018      	movs	r0, r3
 8001454:	f004 f9ae 	bl	80057b4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001458:	4b50      	ldr	r3, [pc, #320]	@ (800159c <alarmSetISR+0x1a4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	0018      	movs	r0, r3
 800145e:	f004 f95d 	bl	800571c <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001462:	4b4e      	ldr	r3, [pc, #312]	@ (800159c <alarmSetISR+0x1a4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146a:	607b      	str	r3, [r7, #4]

	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 800146c:	e00d      	b.n	800148a <alarmSetISR+0x92>

		if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 800146e:	4b4a      	ldr	r3, [pc, #296]	@ (8001598 <alarmSetISR+0x1a0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2280      	movs	r2, #128	@ 0x80
 8001474:	0212      	lsls	r2, r2, #8
 8001476:	0011      	movs	r1, r2
 8001478:	0018      	movs	r0, r3
 800147a:	f001 fdb1 	bl	8002fe0 <HAL_GPIO_ReadPin>
 800147e:	1e03      	subs	r3, r0, #0
 8001480:	d103      	bne.n	800148a <alarmSetISR+0x92>
			alarmSetMode = true;
 8001482:	4b47      	ldr	r3, [pc, #284]	@ (80015a0 <alarmSetISR+0x1a8>)
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
//			HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
			break;
 8001488:	e009      	b.n	800149e <alarmSetISR+0xa6>
	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 800148a:	4b44      	ldr	r3, [pc, #272]	@ (800159c <alarmSetISR+0x1a4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	1ad2      	subs	r2, r2, r3
 8001496:	2380      	movs	r3, #128	@ 0x80
 8001498:	025b      	lsls	r3, r3, #9
 800149a:	429a      	cmp	r2, r3
 800149c:	d9e7      	bls.n	800146e <alarmSetISR+0x76>
		}

	}

	// Go through debounce once again
	HAL_TIM_Base_Stop(timerDelay);
 800149e:	4b3f      	ldr	r3, [pc, #252]	@ (800159c <alarmSetISR+0x1a4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	0018      	movs	r0, r3
 80014a4:	f004 f986 	bl	80057b4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80014a8:	4b3c      	ldr	r3, [pc, #240]	@ (800159c <alarmSetISR+0x1a4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	0018      	movs	r0, r3
 80014ae:	f004 f935 	bl	800571c <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80014b2:	4b3a      	ldr	r3, [pc, #232]	@ (800159c <alarmSetISR+0x1a4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ba:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 4));
 80014bc:	4b37      	ldr	r3, [pc, #220]	@ (800159c <alarmSetISR+0x1a4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	1ad2      	subs	r2, r2, r3
 80014c8:	2380      	movs	r3, #128	@ 0x80
 80014ca:	01db      	lsls	r3, r3, #7
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d9f5      	bls.n	80014bc <alarmSetISR+0xc4>
	/*
	 * Then, if we are in alarm set mode, go through the
	 * alarm set process until the button is pressed again
	 */

	HAL_TIM_Base_Stop(timerDelay);
 80014d0:	4b32      	ldr	r3, [pc, #200]	@ (800159c <alarmSetISR+0x1a4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	0018      	movs	r0, r3
 80014d6:	f004 f96d 	bl	80057b4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80014da:	4b30      	ldr	r3, [pc, #192]	@ (800159c <alarmSetISR+0x1a4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	0018      	movs	r0, r3
 80014e0:	f004 f91c 	bl	800571c <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80014e4:	4b2d      	ldr	r3, [pc, #180]	@ (800159c <alarmSetISR+0x1a4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ec:	607b      	str	r3, [r7, #4]

	if(alarmSetMode) {
 80014ee:	4b2c      	ldr	r3, [pc, #176]	@ (80015a0 <alarmSetISR+0x1a8>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d046      	beq.n	8001584 <alarmSetISR+0x18c>

		bool displayBlink = false;
 80014f6:	1cfb      	adds	r3, r7, #3
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			updateAndDisplayAlarm();
 80014fc:	f7ff fde2 	bl	80010c4 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 8001500:	4b26      	ldr	r3, [pc, #152]	@ (800159c <alarmSetISR+0x1a4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	1ad2      	subs	r2, r2, r3
 800150c:	2380      	movs	r3, #128	@ 0x80
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	429a      	cmp	r2, r3
 8001512:	d31e      	bcc.n	8001552 <alarmSetISR+0x15a>

//				HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

				sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 8001514:	4b23      	ldr	r3, [pc, #140]	@ (80015a4 <alarmSetISR+0x1ac>)
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	4b23      	ldr	r3, [pc, #140]	@ (80015a8 <alarmSetISR+0x1b0>)
 800151a:	6819      	ldr	r1, [r3, #0]
 800151c:	1cfb      	adds	r3, r7, #3
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4a22      	ldr	r2, [pc, #136]	@ (80015ac <alarmSetISR+0x1b4>)
 8001522:	5cd3      	ldrb	r3, [r2, r3]
 8001524:	001a      	movs	r2, r3
 8001526:	f000 fbc7 	bl	8001cb8 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 800152a:	4b1c      	ldr	r3, [pc, #112]	@ (800159c <alarmSetISR+0x1a4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001532:	607b      	str	r3, [r7, #4]
				displayBlink = !displayBlink;
 8001534:	1cfb      	adds	r3, r7, #3
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	1e5a      	subs	r2, r3, #1
 800153a:	4193      	sbcs	r3, r2
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2201      	movs	r2, #1
 8001540:	4053      	eors	r3, r2
 8001542:	b2db      	uxtb	r3, r3
 8001544:	001a      	movs	r2, r3
 8001546:	1cfb      	adds	r3, r7, #3
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	781a      	ldrb	r2, [r3, #0]
 800154c:	2101      	movs	r1, #1
 800154e:	400a      	ands	r2, r1
 8001550:	701a      	strb	r2, [r3, #0]

			}

		}while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET);
 8001552:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <alarmSetISR+0x1a0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2280      	movs	r2, #128	@ 0x80
 8001558:	0212      	lsls	r2, r2, #8
 800155a:	0011      	movs	r1, r2
 800155c:	0018      	movs	r0, r3
 800155e:	f001 fd3f 	bl	8002fe0 <HAL_GPIO_ReadPin>
 8001562:	1e03      	subs	r3, r0, #0
 8001564:	d1ca      	bne.n	80014fc <alarmSetISR+0x104>

//		HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_RESET);

		sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 8001566:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <alarmSetISR+0x1ac>)
 8001568:	6818      	ldr	r0, [r3, #0]
 800156a:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <alarmSetISR+0x1b0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	225a      	movs	r2, #90	@ 0x5a
 8001570:	0019      	movs	r1, r3
 8001572:	f000 fba1 	bl	8001cb8 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <alarmSetISR+0x1a4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	0018      	movs	r0, r3
 800157c:	f004 f91a 	bl	80057b4 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8001580:	f7ff fd84 	bl	800108c <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <alarmSetISR+0x1a8>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 800158a:	1cbb      	adds	r3, r7, #2
 800158c:	781b      	ldrb	r3, [r3, #0]

}
 800158e:	0018      	movs	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	b002      	add	sp, #8
 8001594:	bd80      	pop	{r7, pc}
 8001596:	46c0      	nop			@ (mov r8, r8)
 8001598:	20000000 	.word	0x20000000
 800159c:	20000024 	.word	0x20000024
 80015a0:	2000021c 	.word	0x2000021c
 80015a4:	20000028 	.word	0x20000028
 80015a8:	2000002c 	.word	0x2000002c
 80015ac:	0800647c 	.word	0x0800647c

080015b0 <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0

//	printf("Entered hour set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);


	HAL_StatusTypeDef halRet = HAL_OK;
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80015bc:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <hourSetISR+0x48>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <hourSetISR+0x1a>

		alarmHourInc();
 80015c4:	f000 f84c 	bl	8001660 <alarmHourInc>
 80015c8:	e00f      	b.n	80015ea <hourSetISR+0x3a>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 80015ca:	f000 f877 	bl	80016bc <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80015ce:	490b      	ldr	r1, [pc, #44]	@ (80015fc <hourSetISR+0x4c>)
 80015d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001600 <hourSetISR+0x50>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	0018      	movs	r0, r3
 80015d6:	f003 fadf 	bl	8004b98 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80015da:	f7ff fd57 	bl	800108c <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80015de:	4a09      	ldr	r2, [pc, #36]	@ (8001604 <hourSetISR+0x54>)
 80015e0:	4906      	ldr	r1, [pc, #24]	@ (80015fc <hourSetISR+0x4c>)
 80015e2:	4b07      	ldr	r3, [pc, #28]	@ (8001600 <hourSetISR+0x50>)
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff f97f 	bl	80008e8 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 80015ea:	1dfb      	adds	r3, r7, #7
 80015ec:	781b      	ldrb	r3, [r3, #0]

}
 80015ee:	0018      	movs	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b002      	add	sp, #8
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	46c0      	nop			@ (mov r8, r8)
 80015f8:	2000021c 	.word	0x2000021c
 80015fc:	200001f0 	.word	0x200001f0
 8001600:	2000012c 	.word	0x2000012c
 8001604:	20000204 	.word	0x20000204

08001608 <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0

//	printf("Entered minute set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

	HAL_StatusTypeDef halRet = HAL_OK;
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001614:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <minuteSetISR+0x48>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <minuteSetISR+0x1a>

		alarmMinuteInc();
 800161c:	f000 f888 	bl	8001730 <alarmMinuteInc>
 8001620:	e00f      	b.n	8001642 <minuteSetISR+0x3a>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 8001622:	f000 f8a3 	bl	800176c <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001626:	490b      	ldr	r1, [pc, #44]	@ (8001654 <minuteSetISR+0x4c>)
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <minuteSetISR+0x50>)
 800162a:	2200      	movs	r2, #0
 800162c:	0018      	movs	r0, r3
 800162e:	f003 fab3 	bl	8004b98 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8001632:	f7ff fd2b 	bl	800108c <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001636:	4a09      	ldr	r2, [pc, #36]	@ (800165c <minuteSetISR+0x54>)
 8001638:	4906      	ldr	r1, [pc, #24]	@ (8001654 <minuteSetISR+0x4c>)
 800163a:	4b07      	ldr	r3, [pc, #28]	@ (8001658 <minuteSetISR+0x50>)
 800163c:	0018      	movs	r0, r3
 800163e:	f7ff f953 	bl	80008e8 <getRTCTime>

		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 8001642:	1dfb      	adds	r3, r7, #7
 8001644:	781b      	ldrb	r3, [r3, #0]
}
 8001646:	0018      	movs	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	b002      	add	sp, #8
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	2000021c 	.word	0x2000021c
 8001654:	200001f0 	.word	0x200001f0
 8001658:	2000012c 	.word	0x2000012c
 800165c:	20000204 	.word	0x20000204

08001660 <alarmHourInc>:

void alarmHourInc(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8001664:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <alarmHourInc+0x58>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b0b      	cmp	r3, #11
 800166a:	d903      	bls.n	8001674 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 800166c:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <alarmHourInc+0x58>)
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 8001672:	e01e      	b.n	80016b2 <alarmHourInc+0x52>
	else if(userAlarmTime.Hours == 11) {
 8001674:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <alarmHourInc+0x58>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b0b      	cmp	r3, #11
 800167a:	d10e      	bne.n	800169a <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800167c:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <alarmHourInc+0x58>)
 800167e:	78db      	ldrb	r3, [r3, #3]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d103      	bne.n	800168c <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001684:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <alarmHourInc+0x58>)
 8001686:	2201      	movs	r2, #1
 8001688:	70da      	strb	r2, [r3, #3]
 800168a:	e002      	b.n	8001692 <alarmHourInc+0x32>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800168c:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <alarmHourInc+0x58>)
 800168e:	2200      	movs	r2, #0
 8001690:	70da      	strb	r2, [r3, #3]
		userAlarmTime.Hours = 12;
 8001692:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <alarmHourInc+0x58>)
 8001694:	220c      	movs	r2, #12
 8001696:	701a      	strb	r2, [r3, #0]
}
 8001698:	e00b      	b.n	80016b2 <alarmHourInc+0x52>
	else if(userAlarmTime.Hours < 11) {
 800169a:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <alarmHourInc+0x58>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b0a      	cmp	r3, #10
 80016a0:	d806      	bhi.n	80016b0 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 80016a2:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <alarmHourInc+0x58>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b03      	ldr	r3, [pc, #12]	@ (80016b8 <alarmHourInc+0x58>)
 80016ac:	701a      	strb	r2, [r3, #0]
}
 80016ae:	e000      	b.n	80016b2 <alarmHourInc+0x52>
		__NOP();
 80016b0:	46c0      	nop			@ (mov r8, r8)
}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000208 	.word	0x20000208

080016bc <currHourInc>:

void currHourInc(void) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 80016c0:	4a17      	ldr	r2, [pc, #92]	@ (8001720 <currHourInc+0x64>)
 80016c2:	4918      	ldr	r1, [pc, #96]	@ (8001724 <currHourInc+0x68>)
 80016c4:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <currHourInc+0x6c>)
 80016c6:	0018      	movs	r0, r3
 80016c8:	f7ff f90e 	bl	80008e8 <getRTCTime>

	if(currTime.Hours >= 12) {
 80016cc:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <currHourInc+0x68>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b0b      	cmp	r3, #11
 80016d2:	d903      	bls.n	80016dc <currHourInc+0x20>
		currTime.Hours = 1;
 80016d4:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <currHourInc+0x68>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 80016da:	e01e      	b.n	800171a <currHourInc+0x5e>
	else if(currTime.Hours == 11) {
 80016dc:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <currHourInc+0x68>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b0b      	cmp	r3, #11
 80016e2:	d10e      	bne.n	8001702 <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80016e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <currHourInc+0x68>)
 80016e6:	78db      	ldrb	r3, [r3, #3]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d103      	bne.n	80016f4 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80016ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001724 <currHourInc+0x68>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	70da      	strb	r2, [r3, #3]
 80016f2:	e002      	b.n	80016fa <currHourInc+0x3e>
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80016f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001724 <currHourInc+0x68>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	70da      	strb	r2, [r3, #3]
		currTime.Hours = 12;
 80016fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <currHourInc+0x68>)
 80016fc:	220c      	movs	r2, #12
 80016fe:	701a      	strb	r2, [r3, #0]
}
 8001700:	e00b      	b.n	800171a <currHourInc+0x5e>
	else if(userAlarmTime.Hours < 11) {
 8001702:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <currHourInc+0x70>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b0a      	cmp	r3, #10
 8001708:	d806      	bhi.n	8001718 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <currHourInc+0x68>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <currHourInc+0x68>)
 8001714:	701a      	strb	r2, [r3, #0]
}
 8001716:	e000      	b.n	800171a <currHourInc+0x5e>
		__NOP();
 8001718:	46c0      	nop			@ (mov r8, r8)
}
 800171a:	46c0      	nop			@ (mov r8, r8)
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000204 	.word	0x20000204
 8001724:	200001f0 	.word	0x200001f0
 8001728:	2000012c 	.word	0x2000012c
 800172c:	20000208 	.word	0x20000208

08001730 <alarmMinuteInc>:

void alarmMinuteInc(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 8001734:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <alarmMinuteInc+0x38>)
 8001736:	785b      	ldrb	r3, [r3, #1]
 8001738:	2b3a      	cmp	r3, #58	@ 0x3a
 800173a:	d905      	bls.n	8001748 <alarmMinuteInc+0x18>
		alarmHourInc();
 800173c:	f7ff ff90 	bl	8001660 <alarmHourInc>
		userAlarmTime.Minutes = 0;
 8001740:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <alarmMinuteInc+0x38>)
 8001742:	2200      	movs	r2, #0
 8001744:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 8001746:	e00b      	b.n	8001760 <alarmMinuteInc+0x30>
	else if(userAlarmTime.Minutes < 59) {
 8001748:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <alarmMinuteInc+0x38>)
 800174a:	785b      	ldrb	r3, [r3, #1]
 800174c:	2b3a      	cmp	r3, #58	@ 0x3a
 800174e:	d806      	bhi.n	800175e <alarmMinuteInc+0x2e>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8001750:	4b05      	ldr	r3, [pc, #20]	@ (8001768 <alarmMinuteInc+0x38>)
 8001752:	785b      	ldrb	r3, [r3, #1]
 8001754:	3301      	adds	r3, #1
 8001756:	b2da      	uxtb	r2, r3
 8001758:	4b03      	ldr	r3, [pc, #12]	@ (8001768 <alarmMinuteInc+0x38>)
 800175a:	705a      	strb	r2, [r3, #1]
}
 800175c:	e000      	b.n	8001760 <alarmMinuteInc+0x30>
		__NOP();
 800175e:	46c0      	nop			@ (mov r8, r8)
}
 8001760:	46c0      	nop			@ (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	46c0      	nop			@ (mov r8, r8)
 8001768:	20000208 	.word	0x20000208

0800176c <currMinuteInc>:

void currMinuteInc(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001770:	4a0f      	ldr	r2, [pc, #60]	@ (80017b0 <currMinuteInc+0x44>)
 8001772:	4910      	ldr	r1, [pc, #64]	@ (80017b4 <currMinuteInc+0x48>)
 8001774:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <currMinuteInc+0x4c>)
 8001776:	0018      	movs	r0, r3
 8001778:	f7ff f8b6 	bl	80008e8 <getRTCTime>

	if(currTime.Minutes >= 59) {
 800177c:	4b0d      	ldr	r3, [pc, #52]	@ (80017b4 <currMinuteInc+0x48>)
 800177e:	785b      	ldrb	r3, [r3, #1]
 8001780:	2b3a      	cmp	r3, #58	@ 0x3a
 8001782:	d905      	bls.n	8001790 <currMinuteInc+0x24>
		currHourInc();
 8001784:	f7ff ff9a 	bl	80016bc <currHourInc>
		currTime.Minutes = 0;
 8001788:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <currMinuteInc+0x48>)
 800178a:	2200      	movs	r2, #0
 800178c:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 800178e:	e00b      	b.n	80017a8 <currMinuteInc+0x3c>
	else if(currTime.Minutes < 59) {
 8001790:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <currMinuteInc+0x48>)
 8001792:	785b      	ldrb	r3, [r3, #1]
 8001794:	2b3a      	cmp	r3, #58	@ 0x3a
 8001796:	d806      	bhi.n	80017a6 <currMinuteInc+0x3a>
		currTime.Minutes = currTime.Minutes + 1;
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <currMinuteInc+0x48>)
 800179a:	785b      	ldrb	r3, [r3, #1]
 800179c:	3301      	adds	r3, #1
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <currMinuteInc+0x48>)
 80017a2:	705a      	strb	r2, [r3, #1]
}
 80017a4:	e000      	b.n	80017a8 <currMinuteInc+0x3c>
		__NOP();
 80017a6:	46c0      	nop			@ (mov r8, r8)
}
 80017a8:	46c0      	nop			@ (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			@ (mov r8, r8)
 80017b0:	20000204 	.word	0x20000204
 80017b4:	200001f0 	.word	0x200001f0
 80017b8:	2000012c 	.word	0x2000012c

080017bc <dispError>:

void dispError(void) {
 80017bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017be:	b08d      	sub	sp, #52	@ 0x34
 80017c0:	af00      	add	r7, sp, #0
	 * [1] = shift data clock pin port
	 * [2] = shift store clock pin port
	 * [3] = shift output enable pin port
	 * [4] = shift master clear pin port
	 */
	GPIO_TypeDef *portArray[5] = {GPIOA, GPIOA, GPIOA, GPIOA, GPIOA};
 80017c2:	230c      	movs	r3, #12
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	4a4f      	ldr	r2, [pc, #316]	@ (8001904 <dispError+0x148>)
 80017c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017ca:	c313      	stmia	r3!, {r0, r1, r4}
 80017cc:	ca03      	ldmia	r2!, {r0, r1}
 80017ce:	c303      	stmia	r3!, {r0, r1}

	// Used to avoid conditionals
	GPIO_PinState GPIOPinSet[2] = {GPIO_PIN_RESET, GPIO_PIN_SET};
 80017d0:	2108      	movs	r1, #8
 80017d2:	187b      	adds	r3, r7, r1
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
 80017d8:	187b      	adds	r3, r7, r1
 80017da:	2201      	movs	r2, #1
 80017dc:	705a      	strb	r2, [r3, #1]

	HAL_TIM_Base_Stop(timerDelay);
 80017de:	4b4a      	ldr	r3, [pc, #296]	@ (8001908 <dispError+0x14c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	0018      	movs	r0, r3
 80017e4:	f003 ffe6 	bl	80057b4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 80017e8:	4b47      	ldr	r3, [pc, #284]	@ (8001908 <dispError+0x14c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	0018      	movs	r0, r3
 80017ee:	f003 ff95 	bl	800571c <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80017f2:	4b45      	ldr	r3, [pc, #276]	@ (8001908 <dispError+0x14c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	bool displayBlink = false;
 80017fc:	232b      	movs	r3, #43	@ 0x2b
 80017fe:	18fb      	adds	r3, r7, r3
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]

	//Flash an Error Message
	uint8_t errorSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	4a41      	ldr	r2, [pc, #260]	@ (800190c <dispError+0x150>)
 8001808:	601a      	str	r2, [r3, #0]
	uint8_t sendByte;					// To be used to shift bits


	do {						// Beep buzzer and blink display until snooze button is pressed

		for(int i = 0; i <= 3; i++) {
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24
 800180e:	e039      	b.n	8001884 <dispError+0xc8>

			sendByte = errorSymb[i];
 8001810:	232a      	movs	r3, #42	@ 0x2a
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	1d39      	adds	r1, r7, #4
 8001816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001818:	188a      	adds	r2, r1, r2
 800181a:	7812      	ldrb	r2, [r2, #0]
 800181c:	701a      	strb	r2, [r3, #0]

			for(int j = 0; j < 8; j++) {
 800181e:	2300      	movs	r3, #0
 8001820:	623b      	str	r3, [r7, #32]
 8001822:	e029      	b.n	8001878 <dispError+0xbc>

				// Write data pin with LSB of data
				HAL_GPIO_WritePin(portArray[0], shiftDataPin, GPIOPinSet[sendByte & 1]);
 8001824:	240c      	movs	r4, #12
 8001826:	193b      	adds	r3, r7, r4
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	2380      	movs	r3, #128	@ 0x80
 800182c:	0099      	lsls	r1, r3, #2
 800182e:	252a      	movs	r5, #42	@ 0x2a
 8001830:	197b      	adds	r3, r7, r5
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2201      	movs	r2, #1
 8001836:	4013      	ands	r3, r2
 8001838:	2608      	movs	r6, #8
 800183a:	19ba      	adds	r2, r7, r6
 800183c:	5cd3      	ldrb	r3, [r2, r3]
 800183e:	001a      	movs	r2, r3
 8001840:	f001 fbeb 	bl	800301a <HAL_GPIO_WritePin>

				// Toggle clock GPIO to shift bit into register
				HAL_GPIO_WritePin(portArray[1], shiftDataClockPin, GPIOPinSet[1]);
 8001844:	193b      	adds	r3, r7, r4
 8001846:	6858      	ldr	r0, [r3, #4]
 8001848:	2380      	movs	r3, #128	@ 0x80
 800184a:	00d9      	lsls	r1, r3, #3
 800184c:	19bb      	adds	r3, r7, r6
 800184e:	785b      	ldrb	r3, [r3, #1]
 8001850:	001a      	movs	r2, r3
 8001852:	f001 fbe2 	bl	800301a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(portArray[1], shiftDataClockPin, GPIOPinSet[0]);
 8001856:	193b      	adds	r3, r7, r4
 8001858:	6858      	ldr	r0, [r3, #4]
 800185a:	2380      	movs	r3, #128	@ 0x80
 800185c:	00d9      	lsls	r1, r3, #3
 800185e:	19bb      	adds	r3, r7, r6
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	001a      	movs	r2, r3
 8001864:	f001 fbd9 	bl	800301a <HAL_GPIO_WritePin>

				// Once data pin has been written and shifted out, shift data right by one bit.
				sendByte >>= 1;
 8001868:	197b      	adds	r3, r7, r5
 800186a:	197a      	adds	r2, r7, r5
 800186c:	7812      	ldrb	r2, [r2, #0]
 800186e:	0852      	lsrs	r2, r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 8; j++) {
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	3301      	adds	r3, #1
 8001876:	623b      	str	r3, [r7, #32]
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	2b07      	cmp	r3, #7
 800187c:	ddd2      	ble.n	8001824 <dispError+0x68>
		for(int i = 0; i <= 3; i++) {
 800187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001880:	3301      	adds	r3, #1
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
 8001884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001886:	2b03      	cmp	r3, #3
 8001888:	ddc2      	ble.n	8001810 <dispError+0x54>

			}
		}

			// Once all data has been shifted out, toggle store clock register to display data.
			HAL_GPIO_WritePin(portArray[2], shiftStoreClockPin, GPIOPinSet[1]);
 800188a:	240c      	movs	r4, #12
 800188c:	193b      	adds	r3, r7, r4
 800188e:	6898      	ldr	r0, [r3, #8]
 8001890:	2180      	movs	r1, #128	@ 0x80
 8001892:	2508      	movs	r5, #8
 8001894:	197b      	adds	r3, r7, r5
 8001896:	785b      	ldrb	r3, [r3, #1]
 8001898:	001a      	movs	r2, r3
 800189a:	f001 fbbe 	bl	800301a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[2], shiftStoreClockPin, GPIOPinSet[0]);
 800189e:	193b      	adds	r3, r7, r4
 80018a0:	6898      	ldr	r0, [r3, #8]
 80018a2:	2180      	movs	r1, #128	@ 0x80
 80018a4:	197b      	adds	r3, r7, r5
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	001a      	movs	r2, r3
 80018aa:	f001 fbb6 	bl	800301a <HAL_GPIO_WritePin>


		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 80018ae:	4b16      	ldr	r3, [pc, #88]	@ (8001908 <dispError+0x14c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	4a15      	ldr	r2, [pc, #84]	@ (8001910 <dispError+0x154>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d9a4      	bls.n	800180a <dispError+0x4e>

			sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 80018c0:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <dispError+0x158>)
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	4b14      	ldr	r3, [pc, #80]	@ (8001918 <dispError+0x15c>)
 80018c6:	6819      	ldr	r1, [r3, #0]
 80018c8:	242b      	movs	r4, #43	@ 0x2b
 80018ca:	193b      	adds	r3, r7, r4
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	4a13      	ldr	r2, [pc, #76]	@ (800191c <dispError+0x160>)
 80018d0:	5cd3      	ldrb	r3, [r2, r3]
 80018d2:	001a      	movs	r2, r3
 80018d4:	f000 f9f0 	bl	8001cb8 <sevSeg_setIntensity>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80018d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <dispError+0x14c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

			displayBlink = !displayBlink;							// Toggle display blink counter
 80018e2:	0021      	movs	r1, r4
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	1e5a      	subs	r2, r3, #1
 80018ea:	4193      	sbcs	r3, r2
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2201      	movs	r2, #1
 80018f0:	4053      	eors	r3, r2
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	001a      	movs	r2, r3
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	781a      	ldrb	r2, [r3, #0]
 80018fc:	2101      	movs	r1, #1
 80018fe:	400a      	ands	r2, r1
 8001900:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i <= 3; i++) {
 8001902:	e782      	b.n	800180a <dispError+0x4e>
 8001904:	08006468 	.word	0x08006468
 8001908:	20000024 	.word	0x20000024
 800190c:	471d3700 	.word	0x471d3700
 8001910:	00007ffe 	.word	0x00007ffe
 8001914:	20000028 	.word	0x20000028
 8001918:	2000002c 	.word	0x2000002c
 800191c:	0800647c 	.word	0x0800647c

08001920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001924:	b672      	cpsid	i
}
 8001926:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001928:	46c0      	nop			@ (mov r8, r8)
 800192a:	e7fd      	b.n	8001928 <Error_Handler+0x8>

0800192c <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM,
					uint32_t tim_PWM_CHANNEL) {
 800192c:	b5b0      	push	{r4, r5, r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	0005      	movs	r5, r0
 8001934:	000c      	movs	r4, r1
 8001936:	0010      	movs	r0, r2
 8001938:	0019      	movs	r1, r3
 800193a:	1dbb      	adds	r3, r7, #6
 800193c:	1c2a      	adds	r2, r5, #0
 800193e:	801a      	strh	r2, [r3, #0]
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	1c22      	adds	r2, r4, #0
 8001944:	801a      	strh	r2, [r3, #0]
 8001946:	1cbb      	adds	r3, r7, #2
 8001948:	1c02      	adds	r2, r0, #0
 800194a:	801a      	strh	r2, [r3, #0]
 800194c:	003b      	movs	r3, r7
 800194e:	1c0a      	adds	r2, r1, #0
 8001950:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001952:	4b78      	ldr	r3, [pc, #480]	@ (8001b34 <sevSeg_Init+0x208>)
 8001954:	1dba      	adds	r2, r7, #6
 8001956:	8812      	ldrh	r2, [r2, #0]
 8001958:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 800195a:	4b77      	ldr	r3, [pc, #476]	@ (8001b38 <sevSeg_Init+0x20c>)
 800195c:	1d3a      	adds	r2, r7, #4
 800195e:	8812      	ldrh	r2, [r2, #0]
 8001960:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001962:	4b76      	ldr	r3, [pc, #472]	@ (8001b3c <sevSeg_Init+0x210>)
 8001964:	1cba      	adds	r2, r7, #2
 8001966:	8812      	ldrh	r2, [r2, #0]
 8001968:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 800196a:	4b75      	ldr	r3, [pc, #468]	@ (8001b40 <sevSeg_Init+0x214>)
 800196c:	003a      	movs	r2, r7
 800196e:	8812      	ldrh	r2, [r2, #0]
 8001970:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001972:	4a74      	ldr	r2, [pc, #464]	@ (8001b44 <sevSeg_Init+0x218>)
 8001974:	2330      	movs	r3, #48	@ 0x30
 8001976:	18fb      	adds	r3, r7, r3
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	8013      	strh	r3, [r2, #0]

	for(int i = 0; i < 5; i++) {
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
 8001980:	e00b      	b.n	800199a <sevSeg_Init+0x6e>
		portArray[i] = GPIOPortArray[i];
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001988:	18d3      	adds	r3, r2, r3
 800198a:	6819      	ldr	r1, [r3, #0]
 800198c:	4b6e      	ldr	r3, [pc, #440]	@ (8001b48 <sevSeg_Init+0x21c>)
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	0092      	lsls	r2, r2, #2
 8001992:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	3301      	adds	r3, #1
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	2b04      	cmp	r3, #4
 800199e:	ddf0      	ble.n	8001982 <sevSeg_Init+0x56>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 80019a0:	4b69      	ldr	r3, [pc, #420]	@ (8001b48 <sevSeg_Init+0x21c>)
 80019a2:	6918      	ldr	r0, [r3, #16]
 80019a4:	4b67      	ldr	r3, [pc, #412]	@ (8001b44 <sevSeg_Init+0x218>)
 80019a6:	8819      	ldrh	r1, [r3, #0]
 80019a8:	4b68      	ldr	r3, [pc, #416]	@ (8001b4c <sevSeg_Init+0x220>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	001a      	movs	r2, r3
 80019ae:	f001 fb34 	bl	800301a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 80019b2:	4b65      	ldr	r3, [pc, #404]	@ (8001b48 <sevSeg_Init+0x21c>)
 80019b4:	6918      	ldr	r0, [r3, #16]
 80019b6:	4b63      	ldr	r3, [pc, #396]	@ (8001b44 <sevSeg_Init+0x218>)
 80019b8:	8819      	ldrh	r1, [r3, #0]
 80019ba:	4b64      	ldr	r3, [pc, #400]	@ (8001b4c <sevSeg_Init+0x220>)
 80019bc:	785b      	ldrb	r3, [r3, #1]
 80019be:	001a      	movs	r2, r3
 80019c0:	f001 fb2b 	bl	800301a <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80019c4:	4b60      	ldr	r3, [pc, #384]	@ (8001b48 <sevSeg_Init+0x21c>)
 80019c6:	6898      	ldr	r0, [r3, #8]
 80019c8:	4b5c      	ldr	r3, [pc, #368]	@ (8001b3c <sevSeg_Init+0x210>)
 80019ca:	8819      	ldrh	r1, [r3, #0]
 80019cc:	4b5f      	ldr	r3, [pc, #380]	@ (8001b4c <sevSeg_Init+0x220>)
 80019ce:	785b      	ldrb	r3, [r3, #1]
 80019d0:	001a      	movs	r2, r3
 80019d2:	f001 fb22 	bl	800301a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80019d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001b48 <sevSeg_Init+0x21c>)
 80019d8:	6898      	ldr	r0, [r3, #8]
 80019da:	4b58      	ldr	r3, [pc, #352]	@ (8001b3c <sevSeg_Init+0x210>)
 80019dc:	8819      	ldrh	r1, [r3, #0]
 80019de:	4b5b      	ldr	r3, [pc, #364]	@ (8001b4c <sevSeg_Init+0x220>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	001a      	movs	r2, r3
 80019e4:	f001 fb19 	bl	800301a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 80019e8:	4b57      	ldr	r3, [pc, #348]	@ (8001b48 <sevSeg_Init+0x21c>)
 80019ea:	68d8      	ldr	r0, [r3, #12]
 80019ec:	4b54      	ldr	r3, [pc, #336]	@ (8001b40 <sevSeg_Init+0x214>)
 80019ee:	8819      	ldrh	r1, [r3, #0]
 80019f0:	4b56      	ldr	r3, [pc, #344]	@ (8001b4c <sevSeg_Init+0x220>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	001a      	movs	r2, r3
 80019f6:	f001 fb10 	bl	800301a <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(htim_PWM, tim_PWM_CHANNEL, 50);
 80019fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80019fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019fe:	2232      	movs	r2, #50	@ 0x32
 8001a00:	0018      	movs	r0, r3
 8001a02:	f000 f959 	bl	8001cb8 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8001a06:	2308      	movs	r3, #8
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	4a51      	ldr	r2, [pc, #324]	@ (8001b50 <sevSeg_Init+0x224>)
 8001a0c:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	e038      	b.n	8001a86 <sevSeg_Init+0x15a>

		sendByte = hofSymb[i];
 8001a14:	231b      	movs	r3, #27
 8001a16:	18fb      	adds	r3, r7, r3
 8001a18:	2208      	movs	r2, #8
 8001a1a:	18b9      	adds	r1, r7, r2
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	188a      	adds	r2, r1, r2
 8001a20:	7812      	ldrb	r2, [r2, #0]
 8001a22:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	e027      	b.n	8001a7a <sevSeg_Init+0x14e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001a2a:	4b47      	ldr	r3, [pc, #284]	@ (8001b48 <sevSeg_Init+0x21c>)
 8001a2c:	6818      	ldr	r0, [r3, #0]
 8001a2e:	4b41      	ldr	r3, [pc, #260]	@ (8001b34 <sevSeg_Init+0x208>)
 8001a30:	8819      	ldrh	r1, [r3, #0]
 8001a32:	241b      	movs	r4, #27
 8001a34:	193b      	adds	r3, r7, r4
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	4a43      	ldr	r2, [pc, #268]	@ (8001b4c <sevSeg_Init+0x220>)
 8001a3e:	5cd3      	ldrb	r3, [r2, r3]
 8001a40:	001a      	movs	r2, r3
 8001a42:	f001 faea 	bl	800301a <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001a46:	4b40      	ldr	r3, [pc, #256]	@ (8001b48 <sevSeg_Init+0x21c>)
 8001a48:	6858      	ldr	r0, [r3, #4]
 8001a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b38 <sevSeg_Init+0x20c>)
 8001a4c:	8819      	ldrh	r1, [r3, #0]
 8001a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b4c <sevSeg_Init+0x220>)
 8001a50:	785b      	ldrb	r3, [r3, #1]
 8001a52:	001a      	movs	r2, r3
 8001a54:	f001 fae1 	bl	800301a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001a58:	4b3b      	ldr	r3, [pc, #236]	@ (8001b48 <sevSeg_Init+0x21c>)
 8001a5a:	6858      	ldr	r0, [r3, #4]
 8001a5c:	4b36      	ldr	r3, [pc, #216]	@ (8001b38 <sevSeg_Init+0x20c>)
 8001a5e:	8819      	ldrh	r1, [r3, #0]
 8001a60:	4b3a      	ldr	r3, [pc, #232]	@ (8001b4c <sevSeg_Init+0x220>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	001a      	movs	r2, r3
 8001a66:	f001 fad8 	bl	800301a <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001a6a:	193b      	adds	r3, r7, r4
 8001a6c:	193a      	adds	r2, r7, r4
 8001a6e:	7812      	ldrb	r2, [r2, #0]
 8001a70:	0852      	lsrs	r2, r2, #1
 8001a72:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	3301      	adds	r3, #1
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	2b07      	cmp	r3, #7
 8001a7e:	ddd4      	ble.n	8001a2a <sevSeg_Init+0xfe>
	for(int i = 0; i <= 3; i++) {
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	3301      	adds	r3, #1
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	ddc3      	ble.n	8001a14 <sevSeg_Init+0xe8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b48 <sevSeg_Init+0x21c>)
 8001a8e:	6898      	ldr	r0, [r3, #8]
 8001a90:	4b2a      	ldr	r3, [pc, #168]	@ (8001b3c <sevSeg_Init+0x210>)
 8001a92:	8819      	ldrh	r1, [r3, #0]
 8001a94:	4b2d      	ldr	r3, [pc, #180]	@ (8001b4c <sevSeg_Init+0x220>)
 8001a96:	785b      	ldrb	r3, [r3, #1]
 8001a98:	001a      	movs	r2, r3
 8001a9a:	f001 fabe 	bl	800301a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b48 <sevSeg_Init+0x21c>)
 8001aa0:	6898      	ldr	r0, [r3, #8]
 8001aa2:	4b26      	ldr	r3, [pc, #152]	@ (8001b3c <sevSeg_Init+0x210>)
 8001aa4:	8819      	ldrh	r1, [r3, #0]
 8001aa6:	4b29      	ldr	r3, [pc, #164]	@ (8001b4c <sevSeg_Init+0x220>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	001a      	movs	r2, r3
 8001aac:	f001 fab5 	bl	800301a <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8001ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f003 fe7e 	bl	80057b4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8001ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001aba:	0018      	movs	r0, r3
 8001abc:	f003 fe2e 	bl	800571c <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8001ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac6:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8001ac8:	46c0      	nop			@ (mov r8, r8)
 8001aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1ad2      	subs	r2, r2, r3
 8001ad4:	2380      	movs	r3, #128	@ 0x80
 8001ad6:	01db      	lsls	r3, r3, #7
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d3f6      	bcc.n	8001aca <sevSeg_Init+0x19e>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8001adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f003 fe68 	bl	80057b4 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001ae4:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <sevSeg_Init+0x21c>)
 8001ae6:	6918      	ldr	r0, [r3, #16]
 8001ae8:	4b16      	ldr	r3, [pc, #88]	@ (8001b44 <sevSeg_Init+0x218>)
 8001aea:	8819      	ldrh	r1, [r3, #0]
 8001aec:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <sevSeg_Init+0x220>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	001a      	movs	r2, r3
 8001af2:	f001 fa92 	bl	800301a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001af6:	4b14      	ldr	r3, [pc, #80]	@ (8001b48 <sevSeg_Init+0x21c>)
 8001af8:	6918      	ldr	r0, [r3, #16]
 8001afa:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <sevSeg_Init+0x218>)
 8001afc:	8819      	ldrh	r1, [r3, #0]
 8001afe:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <sevSeg_Init+0x220>)
 8001b00:	785b      	ldrb	r3, [r3, #1]
 8001b02:	001a      	movs	r2, r3
 8001b04:	f001 fa89 	bl	800301a <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001b08:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <sevSeg_Init+0x21c>)
 8001b0a:	6898      	ldr	r0, [r3, #8]
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <sevSeg_Init+0x210>)
 8001b0e:	8819      	ldrh	r1, [r3, #0]
 8001b10:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <sevSeg_Init+0x220>)
 8001b12:	785b      	ldrb	r3, [r3, #1]
 8001b14:	001a      	movs	r2, r3
 8001b16:	f001 fa80 	bl	800301a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b48 <sevSeg_Init+0x21c>)
 8001b1c:	6898      	ldr	r0, [r3, #8]
 8001b1e:	4b07      	ldr	r3, [pc, #28]	@ (8001b3c <sevSeg_Init+0x210>)
 8001b20:	8819      	ldrh	r1, [r3, #0]
 8001b22:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <sevSeg_Init+0x220>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	001a      	movs	r2, r3
 8001b28:	f001 fa77 	bl	800301a <HAL_GPIO_WritePin>

}
 8001b2c:	46c0      	nop			@ (mov r8, r8)
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b008      	add	sp, #32
 8001b32:	bdb0      	pop	{r4, r5, r7, pc}
 8001b34:	20000228 	.word	0x20000228
 8001b38:	2000022a 	.word	0x2000022a
 8001b3c:	2000022c 	.word	0x2000022c
 8001b40:	2000022e 	.word	0x2000022e
 8001b44:	20000230 	.word	0x20000230
 8001b48:	20000030 	.word	0x20000030
 8001b4c:	20000044 	.word	0x20000044
 8001b50:	471d3700 	.word	0x471d3700

08001b54 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	210a      	movs	r1, #10
 8001b62:	0018      	movs	r0, r3
 8001b64:	f7fe face 	bl	8000104 <__udivsi3>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	2408      	movs	r4, #8
 8001b6e:	193b      	adds	r3, r7, r4
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	210a      	movs	r1, #10
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f7fe fb49 	bl	8000210 <__aeabi_uidivmod>
 8001b7e:	000b      	movs	r3, r1
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	193b      	adds	r3, r7, r4
 8001b84:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001b8a:	210a      	movs	r1, #10
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f7fe fab9 	bl	8000104 <__udivsi3>
 8001b92:	0003      	movs	r3, r0
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	193b      	adds	r3, r7, r4
 8001b98:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001b9e:	210a      	movs	r1, #10
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f7fe fb35 	bl	8000210 <__aeabi_uidivmod>
 8001ba6:	000b      	movs	r3, r1
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	193b      	adds	r3, r7, r4
 8001bac:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 8001bae:	2116      	movs	r1, #22
 8001bb0:	187b      	adds	r3, r7, r1
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	78db      	ldrb	r3, [r3, #3]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d102      	bne.n	8001bc4 <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 8001bbe:	187b      	adds	r3, r7, r1
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	e04f      	b.n	8001c6a <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 8001bca:	2308      	movs	r3, #8
 8001bcc:	18fa      	adds	r2, r7, r3
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	18d3      	adds	r3, r2, r3
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	0019      	movs	r1, r3
 8001bd6:	2417      	movs	r4, #23
 8001bd8:	193b      	adds	r3, r7, r4
 8001bda:	4a30      	ldr	r2, [pc, #192]	@ (8001c9c <sevSeg_updateDigits+0x148>)
 8001bdc:	5c52      	ldrb	r2, [r2, r1]
 8001bde:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d110      	bne.n	8001c08 <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	210a      	movs	r1, #10
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7fe fa89 	bl	8000104 <__udivsi3>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	001a      	movs	r2, r3
 8001bf8:	2316      	movs	r3, #22
 8001bfa:	18fb      	adds	r3, r7, r3
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	18d2      	adds	r2, r2, r3
 8001c00:	193b      	adds	r3, r7, r4
 8001c02:	4927      	ldr	r1, [pc, #156]	@ (8001ca0 <sevSeg_updateDigits+0x14c>)
 8001c04:	5c8a      	ldrb	r2, [r1, r2]
 8001c06:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	e027      	b.n	8001c5e <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001c0e:	4b25      	ldr	r3, [pc, #148]	@ (8001ca4 <sevSeg_updateDigits+0x150>)
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	4b25      	ldr	r3, [pc, #148]	@ (8001ca8 <sevSeg_updateDigits+0x154>)
 8001c14:	8819      	ldrh	r1, [r3, #0]
 8001c16:	2417      	movs	r4, #23
 8001c18:	193b      	adds	r3, r7, r4
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	4013      	ands	r3, r2
 8001c20:	4a22      	ldr	r2, [pc, #136]	@ (8001cac <sevSeg_updateDigits+0x158>)
 8001c22:	5cd3      	ldrb	r3, [r2, r3]
 8001c24:	001a      	movs	r2, r3
 8001c26:	f001 f9f8 	bl	800301a <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <sevSeg_updateDigits+0x150>)
 8001c2c:	6858      	ldr	r0, [r3, #4]
 8001c2e:	4b20      	ldr	r3, [pc, #128]	@ (8001cb0 <sevSeg_updateDigits+0x15c>)
 8001c30:	8819      	ldrh	r1, [r3, #0]
 8001c32:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <sevSeg_updateDigits+0x158>)
 8001c34:	785b      	ldrb	r3, [r3, #1]
 8001c36:	001a      	movs	r2, r3
 8001c38:	f001 f9ef 	bl	800301a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001c3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <sevSeg_updateDigits+0x150>)
 8001c3e:	6858      	ldr	r0, [r3, #4]
 8001c40:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <sevSeg_updateDigits+0x15c>)
 8001c42:	8819      	ldrh	r1, [r3, #0]
 8001c44:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <sevSeg_updateDigits+0x158>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	001a      	movs	r2, r3
 8001c4a:	f001 f9e6 	bl	800301a <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001c4e:	193b      	adds	r3, r7, r4
 8001c50:	193a      	adds	r2, r7, r4
 8001c52:	7812      	ldrb	r2, [r2, #0]
 8001c54:	0852      	lsrs	r2, r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b07      	cmp	r3, #7
 8001c62:	ddd4      	ble.n	8001c0e <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	3301      	adds	r3, #1
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	ddac      	ble.n	8001bca <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <sevSeg_updateDigits+0x150>)
 8001c72:	6898      	ldr	r0, [r3, #8]
 8001c74:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb4 <sevSeg_updateDigits+0x160>)
 8001c76:	8819      	ldrh	r1, [r3, #0]
 8001c78:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <sevSeg_updateDigits+0x158>)
 8001c7a:	785b      	ldrb	r3, [r3, #1]
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	f001 f9cc 	bl	800301a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001c82:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <sevSeg_updateDigits+0x150>)
 8001c84:	6898      	ldr	r0, [r3, #8]
 8001c86:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <sevSeg_updateDigits+0x160>)
 8001c88:	8819      	ldrh	r1, [r3, #0]
 8001c8a:	4b08      	ldr	r3, [pc, #32]	@ (8001cac <sevSeg_updateDigits+0x158>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	001a      	movs	r2, r3
 8001c90:	f001 f9c3 	bl	800301a <HAL_GPIO_WritePin>

	return;
 8001c94:	46c0      	nop			@ (mov r8, r8)

}
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b007      	add	sp, #28
 8001c9a:	bd90      	pop	{r4, r7, pc}
 8001c9c:	08006480 	.word	0x08006480
 8001ca0:	0800648c 	.word	0x0800648c
 8001ca4:	20000030 	.word	0x20000030
 8001ca8:	20000228 	.word	0x20000228
 8001cac:	20000044 	.word	0x20000044
 8001cb0:	2000022a 	.word	0x2000022a
 8001cb4:	2000022c 	.word	0x2000022c

08001cb8 <sevSeg_setIntensity>:

void sevSeg_setIntensity(TIM_HandleTypeDef *htim_PWM, uint32_t tim_PWM_CHANNEL, uint16_t dutyCycle) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	1dbb      	adds	r3, r7, #6
 8001cc4:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(htim_PWM, tim_PWM_CHANNEL, dutyCycle);
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d105      	bne.n	8001cd8 <sevSeg_setIntensity+0x20>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	1dba      	adds	r2, r7, #6
 8001cd2:	8812      	ldrh	r2, [r2, #0]
 8001cd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cd6:	e028      	b.n	8001d2a <sevSeg_setIntensity+0x72>
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d105      	bne.n	8001cea <sevSeg_setIntensity+0x32>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	1dbb      	adds	r3, r7, #6
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	6393      	str	r3, [r2, #56]	@ 0x38
 8001ce8:	e01f      	b.n	8001d2a <sevSeg_setIntensity+0x72>
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d105      	bne.n	8001cfc <sevSeg_setIntensity+0x44>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	1dbb      	adds	r3, r7, #6
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001cfa:	e016      	b.n	8001d2a <sevSeg_setIntensity+0x72>
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	d105      	bne.n	8001d0e <sevSeg_setIntensity+0x56>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	1dbb      	adds	r3, r7, #6
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d0c:	e00d      	b.n	8001d2a <sevSeg_setIntensity+0x72>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2b10      	cmp	r3, #16
 8001d12:	d105      	bne.n	8001d20 <sevSeg_setIntensity+0x68>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	1dbb      	adds	r3, r7, #6
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d1e:	e004      	b.n	8001d2a <sevSeg_setIntensity+0x72>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	1dbb      	adds	r3, r7, #6
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(htim_PWM, tim_PWM_CHANNEL);
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	0011      	movs	r1, r2
 8001d30:	0018      	movs	r0, r3
 8001d32:	f003 fdbd 	bl	80058b0 <HAL_TIM_PWM_Start>

}
 8001d36:	46c0      	nop			@ (mov r8, r8)
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b004      	add	sp, #16
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d46:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <HAL_MspInit+0x54>)
 8001d48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d4a:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <HAL_MspInit+0x54>)
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d52:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <HAL_MspInit+0x54>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	2201      	movs	r2, #1
 8001d58:	4013      	ands	r3, r2
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <HAL_MspInit+0x54>)
 8001d60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d62:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <HAL_MspInit+0x54>)
 8001d64:	2180      	movs	r1, #128	@ 0x80
 8001d66:	0549      	lsls	r1, r1, #21
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d6c:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <HAL_MspInit+0x54>)
 8001d6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d70:	2380      	movs	r3, #128	@ 0x80
 8001d72:	055b      	lsls	r3, r3, #21
 8001d74:	4013      	ands	r3, r2
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	2004      	movs	r0, #4
 8001d80:	f000 ff98 	bl	8002cb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001d84:	2004      	movs	r0, #4
 8001d86:	f000 ffaa 	bl	8002cde <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8a:	46c0      	nop			@ (mov r8, r8)
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	b002      	add	sp, #8
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	46c0      	nop			@ (mov r8, r8)
 8001d94:	40021000 	.word	0x40021000

08001d98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b08b      	sub	sp, #44	@ 0x2c
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	2414      	movs	r4, #20
 8001da2:	193b      	adds	r3, r7, r4
 8001da4:	0018      	movs	r0, r3
 8001da6:	2314      	movs	r3, #20
 8001da8:	001a      	movs	r2, r3
 8001daa:	2100      	movs	r1, #0
 8001dac:	f004 fb0a 	bl	80063c4 <memset>
  if(hadc->Instance==ADC1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a18      	ldr	r2, [pc, #96]	@ (8001e18 <HAL_ADC_MspInit+0x80>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d129      	bne.n	8001e0e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001dba:	4b18      	ldr	r3, [pc, #96]	@ (8001e1c <HAL_ADC_MspInit+0x84>)
 8001dbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dbe:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <HAL_ADC_MspInit+0x84>)
 8001dc0:	2180      	movs	r1, #128	@ 0x80
 8001dc2:	0349      	lsls	r1, r1, #13
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001dc8:	4b14      	ldr	r3, [pc, #80]	@ (8001e1c <HAL_ADC_MspInit+0x84>)
 8001dca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dcc:	2380      	movs	r3, #128	@ 0x80
 8001dce:	035b      	lsls	r3, r3, #13
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <HAL_ADC_MspInit+0x84>)
 8001dd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <HAL_ADC_MspInit+0x84>)
 8001ddc:	2101      	movs	r1, #1
 8001dde:	430a      	orrs	r2, r1
 8001de0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001de2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <HAL_ADC_MspInit+0x84>)
 8001de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001de6:	2201      	movs	r2, #1
 8001de8:	4013      	ands	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dee:	193b      	adds	r3, r7, r4
 8001df0:	2204      	movs	r2, #4
 8001df2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df4:	193b      	adds	r3, r7, r4
 8001df6:	2203      	movs	r2, #3
 8001df8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	193b      	adds	r3, r7, r4
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e00:	193a      	adds	r2, r7, r4
 8001e02:	23a0      	movs	r3, #160	@ 0xa0
 8001e04:	05db      	lsls	r3, r3, #23
 8001e06:	0011      	movs	r1, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f000 ff85 	bl	8002d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b00b      	add	sp, #44	@ 0x2c
 8001e14:	bd90      	pop	{r4, r7, pc}
 8001e16:	46c0      	nop			@ (mov r8, r8)
 8001e18:	40012400 	.word	0x40012400
 8001e1c:	40021000 	.word	0x40021000

08001e20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b095      	sub	sp, #84	@ 0x54
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	233c      	movs	r3, #60	@ 0x3c
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	2314      	movs	r3, #20
 8001e30:	001a      	movs	r2, r3
 8001e32:	2100      	movs	r1, #0
 8001e34:	f004 fac6 	bl	80063c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e38:	2414      	movs	r4, #20
 8001e3a:	193b      	adds	r3, r7, r4
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	2328      	movs	r3, #40	@ 0x28
 8001e40:	001a      	movs	r2, r3
 8001e42:	2100      	movs	r1, #0
 8001e44:	f004 fabe 	bl	80063c4 <memset>
  if(hi2c->Instance==I2C1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a22      	ldr	r2, [pc, #136]	@ (8001ed8 <HAL_I2C_MspInit+0xb8>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d13d      	bne.n	8001ece <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e52:	193b      	adds	r3, r7, r4
 8001e54:	2220      	movs	r2, #32
 8001e56:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e58:	193b      	adds	r3, r7, r4
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e5e:	193b      	adds	r3, r7, r4
 8001e60:	0018      	movs	r0, r3
 8001e62:	f002 fc7d 	bl	8004760 <HAL_RCCEx_PeriphCLKConfig>
 8001e66:	1e03      	subs	r3, r0, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e6a:	f7ff fd59 	bl	8001920 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <HAL_I2C_MspInit+0xbc>)
 8001e70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e72:	4b1a      	ldr	r3, [pc, #104]	@ (8001edc <HAL_I2C_MspInit+0xbc>)
 8001e74:	2102      	movs	r1, #2
 8001e76:	430a      	orrs	r2, r1
 8001e78:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e7a:	4b18      	ldr	r3, [pc, #96]	@ (8001edc <HAL_I2C_MspInit+0xbc>)
 8001e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e7e:	2202      	movs	r2, #2
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e86:	213c      	movs	r1, #60	@ 0x3c
 8001e88:	187b      	adds	r3, r7, r1
 8001e8a:	22c0      	movs	r2, #192	@ 0xc0
 8001e8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e8e:	187b      	adds	r3, r7, r1
 8001e90:	2212      	movs	r2, #18
 8001e92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	187b      	adds	r3, r7, r1
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	187b      	adds	r3, r7, r1
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001ea0:	187b      	adds	r3, r7, r1
 8001ea2:	2206      	movs	r2, #6
 8001ea4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	187b      	adds	r3, r7, r1
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee0 <HAL_I2C_MspInit+0xc0>)
 8001eaa:	0019      	movs	r1, r3
 8001eac:	0010      	movs	r0, r2
 8001eae:	f000 ff33 	bl	8002d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001edc <HAL_I2C_MspInit+0xbc>)
 8001eb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eb6:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <HAL_I2C_MspInit+0xbc>)
 8001eb8:	2180      	movs	r1, #128	@ 0x80
 8001eba:	0389      	lsls	r1, r1, #14
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <HAL_I2C_MspInit+0xbc>)
 8001ec2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ec4:	2380      	movs	r3, #128	@ 0x80
 8001ec6:	039b      	lsls	r3, r3, #14
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b015      	add	sp, #84	@ 0x54
 8001ed4:	bd90      	pop	{r4, r7, pc}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	40005400 	.word	0x40005400
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	50000400 	.word	0x50000400

08001ee4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b08f      	sub	sp, #60	@ 0x3c
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eec:	2410      	movs	r4, #16
 8001eee:	193b      	adds	r3, r7, r4
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	2328      	movs	r3, #40	@ 0x28
 8001ef4:	001a      	movs	r2, r3
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	f004 fa64 	bl	80063c4 <memset>
  if(hrtc->Instance==RTC)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a19      	ldr	r2, [pc, #100]	@ (8001f68 <HAL_RTC_MspInit+0x84>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d12c      	bne.n	8001f60 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f06:	193b      	adds	r3, r7, r4
 8001f08:	2280      	movs	r2, #128	@ 0x80
 8001f0a:	0292      	lsls	r2, r2, #10
 8001f0c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f0e:	193b      	adds	r3, r7, r4
 8001f10:	2280      	movs	r2, #128	@ 0x80
 8001f12:	0052      	lsls	r2, r2, #1
 8001f14:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f16:	193b      	adds	r3, r7, r4
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f002 fc21 	bl	8004760 <HAL_RCCEx_PeriphCLKConfig>
 8001f1e:	1e03      	subs	r3, r0, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001f22:	f7ff fcfd 	bl	8001920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f26:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <HAL_RTC_MspInit+0x88>)
 8001f28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f2a:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <HAL_RTC_MspInit+0x88>)
 8001f2c:	2180      	movs	r1, #128	@ 0x80
 8001f2e:	0209      	lsls	r1, r1, #8
 8001f30:	430a      	orrs	r2, r1
 8001f32:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001f34:	4b0d      	ldr	r3, [pc, #52]	@ (8001f6c <HAL_RTC_MspInit+0x88>)
 8001f36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <HAL_RTC_MspInit+0x88>)
 8001f3a:	2180      	movs	r1, #128	@ 0x80
 8001f3c:	00c9      	lsls	r1, r1, #3
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f42:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <HAL_RTC_MspInit+0x88>)
 8001f44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f46:	2380      	movs	r3, #128	@ 0x80
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2100      	movs	r1, #0
 8001f54:	2002      	movs	r0, #2
 8001f56:	f000 fead 	bl	8002cb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001f5a:	2002      	movs	r0, #2
 8001f5c:	f000 febf 	bl	8002cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f60:	46c0      	nop			@ (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b00f      	add	sp, #60	@ 0x3c
 8001f66:	bd90      	pop	{r4, r7, pc}
 8001f68:	40002800 	.word	0x40002800
 8001f6c:	40021000 	.word	0x40021000

08001f70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	@ 0x80
 8001f7e:	05db      	lsls	r3, r3, #23
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d10b      	bne.n	8001f9c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f84:	4b07      	ldr	r3, [pc, #28]	@ (8001fa4 <HAL_TIM_PWM_MspInit+0x34>)
 8001f86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f88:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <HAL_TIM_PWM_MspInit+0x34>)
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f90:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <HAL_TIM_PWM_MspInit+0x34>)
 8001f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f94:	2201      	movs	r2, #1
 8001f96:	4013      	ands	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f9c:	46c0      	nop			@ (mov r8, r8)
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b004      	add	sp, #16
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe0 <HAL_TIM_Base_MspInit+0x38>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d10d      	bne.n	8001fd6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <HAL_TIM_Base_MspInit+0x3c>)
 8001fbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fbe:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <HAL_TIM_Base_MspInit+0x3c>)
 8001fc0:	2180      	movs	r1, #128	@ 0x80
 8001fc2:	0209      	lsls	r1, r1, #8
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fc8:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_TIM_Base_MspInit+0x3c>)
 8001fca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fcc:	2380      	movs	r3, #128	@ 0x80
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001fd6:	46c0      	nop			@ (mov r8, r8)
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b004      	add	sp, #16
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			@ (mov r8, r8)
 8001fe0:	40002000 	.word	0x40002000
 8001fe4:	40021000 	.word	0x40021000

08001fe8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b089      	sub	sp, #36	@ 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	240c      	movs	r4, #12
 8001ff2:	193b      	adds	r3, r7, r4
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	2314      	movs	r3, #20
 8001ff8:	001a      	movs	r2, r3
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	f004 f9e2 	bl	80063c4 <memset>
  if(htim->Instance==TIM2)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2380      	movs	r3, #128	@ 0x80
 8002006:	05db      	lsls	r3, r3, #23
 8002008:	429a      	cmp	r2, r3
 800200a:	d121      	bne.n	8002050 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800200c:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <HAL_TIM_MspPostInit+0x70>)
 800200e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002010:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <HAL_TIM_MspPostInit+0x70>)
 8002012:	2104      	movs	r1, #4
 8002014:	430a      	orrs	r2, r1
 8002016:	635a      	str	r2, [r3, #52]	@ 0x34
 8002018:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <HAL_TIM_MspPostInit+0x70>)
 800201a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800201c:	2204      	movs	r2, #4
 800201e:	4013      	ands	r3, r2
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 8002024:	0021      	movs	r1, r4
 8002026:	187b      	adds	r3, r7, r1
 8002028:	2240      	movs	r2, #64	@ 0x40
 800202a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202c:	187b      	adds	r3, r7, r1
 800202e:	2202      	movs	r2, #2
 8002030:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	187b      	adds	r3, r7, r1
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	187b      	adds	r3, r7, r1
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800203e:	187b      	adds	r3, r7, r1
 8002040:	2202      	movs	r2, #2
 8002042:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 8002044:	187b      	adds	r3, r7, r1
 8002046:	4a05      	ldr	r2, [pc, #20]	@ (800205c <HAL_TIM_MspPostInit+0x74>)
 8002048:	0019      	movs	r1, r3
 800204a:	0010      	movs	r0, r2
 800204c:	f000 fe64 	bl	8002d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002050:	46c0      	nop			@ (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	b009      	add	sp, #36	@ 0x24
 8002056:	bd90      	pop	{r4, r7, pc}
 8002058:	40021000 	.word	0x40021000
 800205c:	50000800 	.word	0x50000800

08002060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002064:	46c0      	nop			@ (mov r8, r8)
 8002066:	e7fd      	b.n	8002064 <NMI_Handler+0x4>

08002068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206c:	46c0      	nop			@ (mov r8, r8)
 800206e:	e7fd      	b.n	800206c <HardFault_Handler+0x4>

08002070 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002074:	46c0      	nop			@ (mov r8, r8)
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002088:	f000 f8ce 	bl	8002228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208c:	46c0      	nop			@ (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002098:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <RTC_TAMP_IRQHandler+0x14>)
 800209a:	0018      	movs	r0, r3
 800209c:	f003 f966 	bl	800536c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80020a0:	46c0      	nop			@ (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			@ (mov r8, r8)
 80020a8:	2000012c 	.word	0x2000012c

080020ac <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80020b0:	46c0      	nop			@ (mov r8, r8)
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f000 ffe6 	bl	800308c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 80020c0:	2002      	movs	r0, #2
 80020c2:	f000 ffe3 	bl	800308c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 80020d0:	2004      	movs	r0, #4
 80020d2:	f000 ffdb 	bl	800308c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 80020d6:	2008      	movs	r0, #8
 80020d8:	f000 ffd8 	bl	800308c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80020dc:	46c0      	nop			@ (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 80020e6:	2380      	movs	r3, #128	@ 0x80
 80020e8:	021b      	lsls	r3, r3, #8
 80020ea:	0018      	movs	r0, r3
 80020ec:	f000 ffce 	bl	800308c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80020f0:	46c0      	nop			@ (mov r8, r8)
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002100:	480d      	ldr	r0, [pc, #52]	@ (8002138 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002102:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002104:	f7ff fff7 	bl	80020f6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002108:	480c      	ldr	r0, [pc, #48]	@ (800213c <LoopForever+0x6>)
  ldr r1, =_edata
 800210a:	490d      	ldr	r1, [pc, #52]	@ (8002140 <LoopForever+0xa>)
  ldr r2, =_sidata
 800210c:	4a0d      	ldr	r2, [pc, #52]	@ (8002144 <LoopForever+0xe>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002110:	e002      	b.n	8002118 <LoopCopyDataInit>

08002112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002116:	3304      	adds	r3, #4

08002118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800211c:	d3f9      	bcc.n	8002112 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211e:	4a0a      	ldr	r2, [pc, #40]	@ (8002148 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002120:	4c0a      	ldr	r4, [pc, #40]	@ (800214c <LoopForever+0x16>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002124:	e001      	b.n	800212a <LoopFillZerobss>

08002126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002128:	3204      	adds	r2, #4

0800212a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800212c:	d3fb      	bcc.n	8002126 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800212e:	f004 f951 	bl	80063d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002132:	f7fe fbef 	bl	8000914 <main>

08002136 <LoopForever>:

LoopForever:
  b LoopForever
 8002136:	e7fe      	b.n	8002136 <LoopForever>
  ldr   r0, =_estack
 8002138:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800213c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002140:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8002144:	0800652c 	.word	0x0800652c
  ldr r2, =_sbss
 8002148:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 800214c:	20000238 	.word	0x20000238

08002150 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002150:	e7fe      	b.n	8002150 <ADC1_IRQHandler>
	...

08002154 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800215a:	1dfb      	adds	r3, r7, #7
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002160:	4b0b      	ldr	r3, [pc, #44]	@ (8002190 <HAL_Init+0x3c>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <HAL_Init+0x3c>)
 8002166:	2180      	movs	r1, #128	@ 0x80
 8002168:	0049      	lsls	r1, r1, #1
 800216a:	430a      	orrs	r2, r1
 800216c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800216e:	2003      	movs	r0, #3
 8002170:	f000 f810 	bl	8002194 <HAL_InitTick>
 8002174:	1e03      	subs	r3, r0, #0
 8002176:	d003      	beq.n	8002180 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002178:	1dfb      	adds	r3, r7, #7
 800217a:	2201      	movs	r2, #1
 800217c:	701a      	strb	r2, [r3, #0]
 800217e:	e001      	b.n	8002184 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002180:	f7ff fdde 	bl	8001d40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002184:	1dfb      	adds	r3, r7, #7
 8002186:	781b      	ldrb	r3, [r3, #0]
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	b002      	add	sp, #8
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40022000 	.word	0x40022000

08002194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800219c:	230f      	movs	r3, #15
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80021a4:	4b1d      	ldr	r3, [pc, #116]	@ (800221c <HAL_InitTick+0x88>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d02b      	beq.n	8002204 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80021ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002220 <HAL_InitTick+0x8c>)
 80021ae:	681c      	ldr	r4, [r3, #0]
 80021b0:	4b1a      	ldr	r3, [pc, #104]	@ (800221c <HAL_InitTick+0x88>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	0019      	movs	r1, r3
 80021b6:	23fa      	movs	r3, #250	@ 0xfa
 80021b8:	0098      	lsls	r0, r3, #2
 80021ba:	f7fd ffa3 	bl	8000104 <__udivsi3>
 80021be:	0003      	movs	r3, r0
 80021c0:	0019      	movs	r1, r3
 80021c2:	0020      	movs	r0, r4
 80021c4:	f7fd ff9e 	bl	8000104 <__udivsi3>
 80021c8:	0003      	movs	r3, r0
 80021ca:	0018      	movs	r0, r3
 80021cc:	f000 fd97 	bl	8002cfe <HAL_SYSTICK_Config>
 80021d0:	1e03      	subs	r3, r0, #0
 80021d2:	d112      	bne.n	80021fa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d80a      	bhi.n	80021f0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	2301      	movs	r3, #1
 80021de:	425b      	negs	r3, r3
 80021e0:	2200      	movs	r2, #0
 80021e2:	0018      	movs	r0, r3
 80021e4:	f000 fd66 	bl	8002cb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <HAL_InitTick+0x90>)
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	e00d      	b.n	800220c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80021f0:	230f      	movs	r3, #15
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
 80021f8:	e008      	b.n	800220c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021fa:	230f      	movs	r3, #15
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
 8002202:	e003      	b.n	800220c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002204:	230f      	movs	r3, #15
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800220c:	230f      	movs	r3, #15
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	781b      	ldrb	r3, [r3, #0]
}
 8002212:	0018      	movs	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	b005      	add	sp, #20
 8002218:	bd90      	pop	{r4, r7, pc}
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	20000050 	.word	0x20000050
 8002220:	20000048 	.word	0x20000048
 8002224:	2000004c 	.word	0x2000004c

08002228 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800222c:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <HAL_IncTick+0x1c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	001a      	movs	r2, r3
 8002232:	4b05      	ldr	r3, [pc, #20]	@ (8002248 <HAL_IncTick+0x20>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	18d2      	adds	r2, r2, r3
 8002238:	4b03      	ldr	r3, [pc, #12]	@ (8002248 <HAL_IncTick+0x20>)
 800223a:	601a      	str	r2, [r3, #0]
}
 800223c:	46c0      	nop			@ (mov r8, r8)
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	46c0      	nop			@ (mov r8, r8)
 8002244:	20000050 	.word	0x20000050
 8002248:	20000234 	.word	0x20000234

0800224c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  return uwTick;
 8002250:	4b02      	ldr	r3, [pc, #8]	@ (800225c <HAL_GetTick+0x10>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			@ (mov r8, r8)
 800225c:	20000234 	.word	0x20000234

08002260 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a05      	ldr	r2, [pc, #20]	@ (8002284 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002270:	401a      	ands	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	601a      	str	r2, [r3, #0]
}
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	46bd      	mov	sp, r7
 800227e:	b002      	add	sp, #8
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			@ (mov r8, r8)
 8002284:	fe3fffff 	.word	0xfe3fffff

08002288 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	23e0      	movs	r3, #224	@ 0xe0
 8002296:	045b      	lsls	r3, r3, #17
 8002298:	4013      	ands	r3, r2
}
 800229a:	0018      	movs	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	b002      	add	sp, #8
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	2104      	movs	r1, #4
 80022b6:	400a      	ands	r2, r1
 80022b8:	2107      	movs	r1, #7
 80022ba:	4091      	lsls	r1, r2
 80022bc:	000a      	movs	r2, r1
 80022be:	43d2      	mvns	r2, r2
 80022c0:	401a      	ands	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2104      	movs	r1, #4
 80022c6:	400b      	ands	r3, r1
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4099      	lsls	r1, r3
 80022cc:	000b      	movs	r3, r1
 80022ce:	431a      	orrs	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80022d4:	46c0      	nop			@ (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b004      	add	sp, #16
 80022da:	bd80      	pop	{r7, pc}

080022dc <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	2104      	movs	r1, #4
 80022ee:	400a      	ands	r2, r1
 80022f0:	2107      	movs	r1, #7
 80022f2:	4091      	lsls	r1, r2
 80022f4:	000a      	movs	r2, r1
 80022f6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2104      	movs	r1, #4
 80022fc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80022fe:	40da      	lsrs	r2, r3
 8002300:	0013      	movs	r3, r2
}
 8002302:	0018      	movs	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	b002      	add	sp, #8
 8002308:	bd80      	pop	{r7, pc}

0800230a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b084      	sub	sp, #16
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	211f      	movs	r1, #31
 800231e:	400a      	ands	r2, r1
 8002320:	210f      	movs	r1, #15
 8002322:	4091      	lsls	r1, r2
 8002324:	000a      	movs	r2, r1
 8002326:	43d2      	mvns	r2, r2
 8002328:	401a      	ands	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	0e9b      	lsrs	r3, r3, #26
 800232e:	210f      	movs	r1, #15
 8002330:	4019      	ands	r1, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	201f      	movs	r0, #31
 8002336:	4003      	ands	r3, r0
 8002338:	4099      	lsls	r1, r3
 800233a:	000b      	movs	r3, r1
 800233c:	431a      	orrs	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002342:	46c0      	nop			@ (mov r8, r8)
 8002344:	46bd      	mov	sp, r7
 8002346:	b004      	add	sp, #16
 8002348:	bd80      	pop	{r7, pc}

0800234a <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	035b      	lsls	r3, r3, #13
 800235c:	0b5b      	lsrs	r3, r3, #13
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002364:	46c0      	nop			@ (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	b002      	add	sp, #8
 800236a:	bd80      	pop	{r7, pc}

0800236c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	0352      	lsls	r2, r2, #13
 800237e:	0b52      	lsrs	r2, r2, #13
 8002380:	43d2      	mvns	r2, r2
 8002382:	401a      	ands	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002388:	46c0      	nop			@ (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b002      	add	sp, #8
 800238e:	bd80      	pop	{r7, pc}

08002390 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	0212      	lsls	r2, r2, #8
 80023a4:	43d2      	mvns	r2, r2
 80023a6:	401a      	ands	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	021b      	lsls	r3, r3, #8
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	400b      	ands	r3, r1
 80023b0:	4904      	ldr	r1, [pc, #16]	@ (80023c4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80023b2:	400b      	ands	r3, r1
 80023b4:	431a      	orrs	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80023ba:	46c0      	nop			@ (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	b004      	add	sp, #16
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	07ffff00 	.word	0x07ffff00

080023c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4a05      	ldr	r2, [pc, #20]	@ (80023ec <LL_ADC_EnableInternalRegulator+0x24>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	2280      	movs	r2, #128	@ 0x80
 80023da:	0552      	lsls	r2, r2, #21
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b002      	add	sp, #8
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			@ (mov r8, r8)
 80023ec:	6fffffe8 	.word	0x6fffffe8

080023f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	2380      	movs	r3, #128	@ 0x80
 80023fe:	055b      	lsls	r3, r3, #21
 8002400:	401a      	ands	r2, r3
 8002402:	2380      	movs	r3, #128	@ 0x80
 8002404:	055b      	lsls	r3, r3, #21
 8002406:	429a      	cmp	r2, r3
 8002408:	d101      	bne.n	800240e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800240e:	2300      	movs	r3, #0
}
 8002410:	0018      	movs	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	b002      	add	sp, #8
 8002416:	bd80      	pop	{r7, pc}

08002418 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2201      	movs	r2, #1
 8002426:	4013      	ands	r3, r2
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <LL_ADC_IsEnabled+0x18>
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <LL_ADC_IsEnabled+0x1a>
 8002430:	2300      	movs	r3, #0
}
 8002432:	0018      	movs	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	b002      	add	sp, #8
 8002438:	bd80      	pop	{r7, pc}

0800243a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2204      	movs	r2, #4
 8002448:	4013      	ands	r3, r2
 800244a:	2b04      	cmp	r3, #4
 800244c:	d101      	bne.n	8002452 <LL_ADC_REG_IsConversionOngoing+0x18>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002452:	2300      	movs	r3, #0
}
 8002454:	0018      	movs	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	b002      	add	sp, #8
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002464:	231f      	movs	r3, #31
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800246c:	2300      	movs	r3, #0
 800246e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e17f      	b.n	8002782 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10a      	bne.n	80024a0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	0018      	movs	r0, r3
 800248e:	f7ff fc83 	bl	8001d98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2254      	movs	r2, #84	@ 0x54
 800249c:	2100      	movs	r1, #0
 800249e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7ff ffa3 	bl	80023f0 <LL_ADC_IsInternalRegulatorEnabled>
 80024aa:	1e03      	subs	r3, r0, #0
 80024ac:	d115      	bne.n	80024da <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	0018      	movs	r0, r3
 80024b4:	f7ff ff88 	bl	80023c8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024b8:	4bb4      	ldr	r3, [pc, #720]	@ (800278c <HAL_ADC_Init+0x330>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	49b4      	ldr	r1, [pc, #720]	@ (8002790 <HAL_ADC_Init+0x334>)
 80024be:	0018      	movs	r0, r3
 80024c0:	f7fd fe20 	bl	8000104 <__udivsi3>
 80024c4:	0003      	movs	r3, r0
 80024c6:	3301      	adds	r3, #1
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024cc:	e002      	b.n	80024d4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3b01      	subs	r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f9      	bne.n	80024ce <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	0018      	movs	r0, r3
 80024e0:	f7ff ff86 	bl	80023f0 <LL_ADC_IsInternalRegulatorEnabled>
 80024e4:	1e03      	subs	r3, r0, #0
 80024e6:	d10f      	bne.n	8002508 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ec:	2210      	movs	r2, #16
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f8:	2201      	movs	r2, #1
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002500:	231f      	movs	r3, #31
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	2201      	movs	r2, #1
 8002506:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	0018      	movs	r0, r3
 800250e:	f7ff ff94 	bl	800243a <LL_ADC_REG_IsConversionOngoing>
 8002512:	0003      	movs	r3, r0
 8002514:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251a:	2210      	movs	r2, #16
 800251c:	4013      	ands	r3, r2
 800251e:	d000      	beq.n	8002522 <HAL_ADC_Init+0xc6>
 8002520:	e122      	b.n	8002768 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d000      	beq.n	800252a <HAL_ADC_Init+0xce>
 8002528:	e11e      	b.n	8002768 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252e:	4a99      	ldr	r2, [pc, #612]	@ (8002794 <HAL_ADC_Init+0x338>)
 8002530:	4013      	ands	r3, r2
 8002532:	2202      	movs	r2, #2
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	0018      	movs	r0, r3
 8002540:	f7ff ff6a 	bl	8002418 <LL_ADC_IsEnabled>
 8002544:	1e03      	subs	r3, r0, #0
 8002546:	d000      	beq.n	800254a <HAL_ADC_Init+0xee>
 8002548:	e0ad      	b.n	80026a6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7e1b      	ldrb	r3, [r3, #24]
 8002552:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002554:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	7e5b      	ldrb	r3, [r3, #25]
 800255a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800255c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	7e9b      	ldrb	r3, [r3, #26]
 8002562:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002564:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <HAL_ADC_Init+0x118>
 800256e:	2380      	movs	r3, #128	@ 0x80
 8002570:	015b      	lsls	r3, r3, #5
 8002572:	e000      	b.n	8002576 <HAL_ADC_Init+0x11a>
 8002574:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002576:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800257c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	da04      	bge.n	8002590 <HAL_ADC_Init+0x134>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	085b      	lsrs	r3, r3, #1
 800258e:	e001      	b.n	8002594 <HAL_ADC_Init+0x138>
 8002590:	2380      	movs	r3, #128	@ 0x80
 8002592:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002594:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	212c      	movs	r1, #44	@ 0x2c
 800259a:	5c5b      	ldrb	r3, [r3, r1]
 800259c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800259e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2220      	movs	r2, #32
 80025aa:	5c9b      	ldrb	r3, [r3, r2]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d115      	bne.n	80025dc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	7e9b      	ldrb	r3, [r3, #26]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d105      	bne.n	80025c4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	2280      	movs	r2, #128	@ 0x80
 80025bc:	0252      	lsls	r2, r2, #9
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	e00b      	b.n	80025dc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c8:	2220      	movs	r2, #32
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d4:	2201      	movs	r2, #1
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00a      	beq.n	80025fa <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025e8:	23e0      	movs	r3, #224	@ 0xe0
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80025f2:	4313      	orrs	r3, r2
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4a65      	ldr	r2, [pc, #404]	@ (8002798 <HAL_ADC_Init+0x33c>)
 8002602:	4013      	ands	r3, r2
 8002604:	0019      	movs	r1, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	430a      	orrs	r2, r1
 800260e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	0f9b      	lsrs	r3, r3, #30
 8002616:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800261c:	4313      	orrs	r3, r2
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	223c      	movs	r2, #60	@ 0x3c
 8002628:	5c9b      	ldrb	r3, [r3, r2]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d111      	bne.n	8002652 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	0f9b      	lsrs	r3, r3, #30
 8002634:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800263a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002640:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8002646:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	4313      	orrs	r3, r2
 800264c:	2201      	movs	r2, #1
 800264e:	4313      	orrs	r3, r2
 8002650:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	4a50      	ldr	r2, [pc, #320]	@ (800279c <HAL_ADC_Init+0x340>)
 800265a:	4013      	ands	r3, r2
 800265c:	0019      	movs	r1, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	430a      	orrs	r2, r1
 8002666:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	23c0      	movs	r3, #192	@ 0xc0
 800266e:	061b      	lsls	r3, r3, #24
 8002670:	429a      	cmp	r2, r3
 8002672:	d018      	beq.n	80026a6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002678:	2380      	movs	r3, #128	@ 0x80
 800267a:	05db      	lsls	r3, r3, #23
 800267c:	429a      	cmp	r2, r3
 800267e:	d012      	beq.n	80026a6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002684:	2380      	movs	r3, #128	@ 0x80
 8002686:	061b      	lsls	r3, r3, #24
 8002688:	429a      	cmp	r2, r3
 800268a:	d00c      	beq.n	80026a6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800268c:	4b44      	ldr	r3, [pc, #272]	@ (80027a0 <HAL_ADC_Init+0x344>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a44      	ldr	r2, [pc, #272]	@ (80027a4 <HAL_ADC_Init+0x348>)
 8002692:	4013      	ands	r3, r2
 8002694:	0019      	movs	r1, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	23f0      	movs	r3, #240	@ 0xf0
 800269c:	039b      	lsls	r3, r3, #14
 800269e:	401a      	ands	r2, r3
 80026a0:	4b3f      	ldr	r3, [pc, #252]	@ (80027a0 <HAL_ADC_Init+0x344>)
 80026a2:	430a      	orrs	r2, r1
 80026a4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ae:	001a      	movs	r2, r3
 80026b0:	2100      	movs	r1, #0
 80026b2:	f7ff fdf6 	bl	80022a2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026be:	493a      	ldr	r1, [pc, #232]	@ (80027a8 <HAL_ADC_Init+0x34c>)
 80026c0:	001a      	movs	r2, r3
 80026c2:	f7ff fdee 	bl	80022a2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2110      	movs	r1, #16
 80026da:	4249      	negs	r1, r1
 80026dc:	430a      	orrs	r2, r1
 80026de:	629a      	str	r2, [r3, #40]	@ 0x28
 80026e0:	e018      	b.n	8002714 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	2380      	movs	r3, #128	@ 0x80
 80026e8:	039b      	lsls	r3, r3, #14
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d112      	bne.n	8002714 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	3b01      	subs	r3, #1
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	221c      	movs	r2, #28
 80026fe:	4013      	ands	r3, r2
 8002700:	2210      	movs	r2, #16
 8002702:	4252      	negs	r2, r2
 8002704:	409a      	lsls	r2, r3
 8002706:	0011      	movs	r1, r2
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2100      	movs	r1, #0
 800271a:	0018      	movs	r0, r3
 800271c:	f7ff fdde 	bl	80022dc <LL_ADC_GetSamplingTimeCommonChannels>
 8002720:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002726:	429a      	cmp	r2, r3
 8002728:	d10b      	bne.n	8002742 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002734:	2203      	movs	r2, #3
 8002736:	4393      	bics	r3, r2
 8002738:	2201      	movs	r2, #1
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002740:	e01c      	b.n	800277c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002746:	2212      	movs	r2, #18
 8002748:	4393      	bics	r3, r2
 800274a:	2210      	movs	r2, #16
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002756:	2201      	movs	r2, #1
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800275e:	231f      	movs	r3, #31
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002766:	e009      	b.n	800277c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276c:	2210      	movs	r2, #16
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002774:	231f      	movs	r3, #31
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800277c:	231f      	movs	r3, #31
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	781b      	ldrb	r3, [r3, #0]
}
 8002782:	0018      	movs	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	b008      	add	sp, #32
 8002788:	bd80      	pop	{r7, pc}
 800278a:	46c0      	nop			@ (mov r8, r8)
 800278c:	20000048 	.word	0x20000048
 8002790:	00030d40 	.word	0x00030d40
 8002794:	fffffefd 	.word	0xfffffefd
 8002798:	ffde0201 	.word	0xffde0201
 800279c:	1ffffc02 	.word	0x1ffffc02
 80027a0:	40012708 	.word	0x40012708
 80027a4:	ffc3ffff 	.word	0xffc3ffff
 80027a8:	07ffff04 	.word	0x07ffff04

080027ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b6:	2317      	movs	r3, #23
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2254      	movs	r2, #84	@ 0x54
 80027c6:	5c9b      	ldrb	r3, [r3, r2]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x24>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e1c0      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x3a6>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2254      	movs	r2, #84	@ 0x54
 80027d4:	2101      	movs	r1, #1
 80027d6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	0018      	movs	r0, r3
 80027de:	f7ff fe2c 	bl	800243a <LL_ADC_REG_IsConversionOngoing>
 80027e2:	1e03      	subs	r3, r0, #0
 80027e4:	d000      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x3c>
 80027e6:	e1a3      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d100      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x46>
 80027f0:	e143      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	2380      	movs	r3, #128	@ 0x80
 80027f8:	061b      	lsls	r3, r3, #24
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d004      	beq.n	8002808 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002802:	4ac1      	ldr	r2, [pc, #772]	@ (8002b08 <HAL_ADC_ConfigChannel+0x35c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d108      	bne.n	800281a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	0019      	movs	r1, r3
 8002812:	0010      	movs	r0, r2
 8002814:	f7ff fd99 	bl	800234a <LL_ADC_REG_SetSequencerChAdd>
 8002818:	e0c9      	b.n	80029ae <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	211f      	movs	r1, #31
 8002824:	400b      	ands	r3, r1
 8002826:	210f      	movs	r1, #15
 8002828:	4099      	lsls	r1, r3
 800282a:	000b      	movs	r3, r1
 800282c:	43db      	mvns	r3, r3
 800282e:	4013      	ands	r3, r2
 8002830:	0019      	movs	r1, r3
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	035b      	lsls	r3, r3, #13
 8002838:	0b5b      	lsrs	r3, r3, #13
 800283a:	d105      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x9c>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	0e9b      	lsrs	r3, r3, #26
 8002842:	221f      	movs	r2, #31
 8002844:	4013      	ands	r3, r2
 8002846:	e098      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2201      	movs	r2, #1
 800284e:	4013      	ands	r3, r2
 8002850:	d000      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xa8>
 8002852:	e091      	b.n	8002978 <HAL_ADC_ConfigChannel+0x1cc>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2202      	movs	r2, #2
 800285a:	4013      	ands	r3, r2
 800285c:	d000      	beq.n	8002860 <HAL_ADC_ConfigChannel+0xb4>
 800285e:	e089      	b.n	8002974 <HAL_ADC_ConfigChannel+0x1c8>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2204      	movs	r2, #4
 8002866:	4013      	ands	r3, r2
 8002868:	d000      	beq.n	800286c <HAL_ADC_ConfigChannel+0xc0>
 800286a:	e081      	b.n	8002970 <HAL_ADC_ConfigChannel+0x1c4>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2208      	movs	r2, #8
 8002872:	4013      	ands	r3, r2
 8002874:	d000      	beq.n	8002878 <HAL_ADC_ConfigChannel+0xcc>
 8002876:	e079      	b.n	800296c <HAL_ADC_ConfigChannel+0x1c0>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2210      	movs	r2, #16
 800287e:	4013      	ands	r3, r2
 8002880:	d000      	beq.n	8002884 <HAL_ADC_ConfigChannel+0xd8>
 8002882:	e071      	b.n	8002968 <HAL_ADC_ConfigChannel+0x1bc>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2220      	movs	r2, #32
 800288a:	4013      	ands	r3, r2
 800288c:	d000      	beq.n	8002890 <HAL_ADC_ConfigChannel+0xe4>
 800288e:	e069      	b.n	8002964 <HAL_ADC_ConfigChannel+0x1b8>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2240      	movs	r2, #64	@ 0x40
 8002896:	4013      	ands	r3, r2
 8002898:	d000      	beq.n	800289c <HAL_ADC_ConfigChannel+0xf0>
 800289a:	e061      	b.n	8002960 <HAL_ADC_ConfigChannel+0x1b4>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2280      	movs	r2, #128	@ 0x80
 80028a2:	4013      	ands	r3, r2
 80028a4:	d000      	beq.n	80028a8 <HAL_ADC_ConfigChannel+0xfc>
 80028a6:	e059      	b.n	800295c <HAL_ADC_ConfigChannel+0x1b0>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	2380      	movs	r3, #128	@ 0x80
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	4013      	ands	r3, r2
 80028b2:	d151      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1ac>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	2380      	movs	r3, #128	@ 0x80
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4013      	ands	r3, r2
 80028be:	d149      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x1a8>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	2380      	movs	r3, #128	@ 0x80
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4013      	ands	r3, r2
 80028ca:	d141      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x1a4>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	2380      	movs	r3, #128	@ 0x80
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	4013      	ands	r3, r2
 80028d6:	d139      	bne.n	800294c <HAL_ADC_ConfigChannel+0x1a0>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	2380      	movs	r3, #128	@ 0x80
 80028de:	015b      	lsls	r3, r3, #5
 80028e0:	4013      	ands	r3, r2
 80028e2:	d131      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x19c>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	2380      	movs	r3, #128	@ 0x80
 80028ea:	019b      	lsls	r3, r3, #6
 80028ec:	4013      	ands	r3, r2
 80028ee:	d129      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x198>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	2380      	movs	r3, #128	@ 0x80
 80028f6:	01db      	lsls	r3, r3, #7
 80028f8:	4013      	ands	r3, r2
 80028fa:	d121      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x194>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	@ 0x80
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	4013      	ands	r3, r2
 8002906:	d119      	bne.n	800293c <HAL_ADC_ConfigChannel+0x190>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	025b      	lsls	r3, r3, #9
 8002910:	4013      	ands	r3, r2
 8002912:	d111      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x18c>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	2380      	movs	r3, #128	@ 0x80
 800291a:	029b      	lsls	r3, r3, #10
 800291c:	4013      	ands	r3, r2
 800291e:	d109      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x188>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	2380      	movs	r3, #128	@ 0x80
 8002926:	02db      	lsls	r3, r3, #11
 8002928:	4013      	ands	r3, r2
 800292a:	d001      	beq.n	8002930 <HAL_ADC_ConfigChannel+0x184>
 800292c:	2312      	movs	r3, #18
 800292e:	e024      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002930:	2300      	movs	r3, #0
 8002932:	e022      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002934:	2311      	movs	r3, #17
 8002936:	e020      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002938:	2310      	movs	r3, #16
 800293a:	e01e      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 800293c:	230f      	movs	r3, #15
 800293e:	e01c      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002940:	230e      	movs	r3, #14
 8002942:	e01a      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002944:	230d      	movs	r3, #13
 8002946:	e018      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002948:	230c      	movs	r3, #12
 800294a:	e016      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 800294c:	230b      	movs	r3, #11
 800294e:	e014      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002950:	230a      	movs	r3, #10
 8002952:	e012      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002954:	2309      	movs	r3, #9
 8002956:	e010      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002958:	2308      	movs	r3, #8
 800295a:	e00e      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 800295c:	2307      	movs	r3, #7
 800295e:	e00c      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002960:	2306      	movs	r3, #6
 8002962:	e00a      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002964:	2305      	movs	r3, #5
 8002966:	e008      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002968:	2304      	movs	r3, #4
 800296a:	e006      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 800296c:	2303      	movs	r3, #3
 800296e:	e004      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002970:	2302      	movs	r3, #2
 8002972:	e002      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_ADC_ConfigChannel+0x1ce>
 8002978:	2300      	movs	r3, #0
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	6852      	ldr	r2, [r2, #4]
 800297e:	201f      	movs	r0, #31
 8002980:	4002      	ands	r2, r0
 8002982:	4093      	lsls	r3, r2
 8002984:	000a      	movs	r2, r1
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	429a      	cmp	r2, r3
 800299a:	d808      	bhi.n	80029ae <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	001a      	movs	r2, r3
 80029aa:	f7ff fcae 	bl	800230a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6819      	ldr	r1, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	001a      	movs	r2, r3
 80029bc:	f7ff fce8 	bl	8002390 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	db00      	blt.n	80029ca <HAL_ADC_ConfigChannel+0x21e>
 80029c8:	e0bc      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029ca:	4b50      	ldr	r3, [pc, #320]	@ (8002b0c <HAL_ADC_ConfigChannel+0x360>)
 80029cc:	0018      	movs	r0, r3
 80029ce:	f7ff fc5b 	bl	8002288 <LL_ADC_GetCommonPathInternalCh>
 80029d2:	0003      	movs	r3, r0
 80029d4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a4d      	ldr	r2, [pc, #308]	@ (8002b10 <HAL_ADC_ConfigChannel+0x364>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d122      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	2380      	movs	r3, #128	@ 0x80
 80029e4:	041b      	lsls	r3, r3, #16
 80029e6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029e8:	d11d      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	2280      	movs	r2, #128	@ 0x80
 80029ee:	0412      	lsls	r2, r2, #16
 80029f0:	4313      	orrs	r3, r2
 80029f2:	4a46      	ldr	r2, [pc, #280]	@ (8002b0c <HAL_ADC_ConfigChannel+0x360>)
 80029f4:	0019      	movs	r1, r3
 80029f6:	0010      	movs	r0, r2
 80029f8:	f7ff fc32 	bl	8002260 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029fc:	4b45      	ldr	r3, [pc, #276]	@ (8002b14 <HAL_ADC_ConfigChannel+0x368>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4945      	ldr	r1, [pc, #276]	@ (8002b18 <HAL_ADC_ConfigChannel+0x36c>)
 8002a02:	0018      	movs	r0, r3
 8002a04:	f7fd fb7e 	bl	8000104 <__udivsi3>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	0013      	movs	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	189b      	adds	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a16:	e002      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1f9      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a24:	e08e      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a3c      	ldr	r2, [pc, #240]	@ (8002b1c <HAL_ADC_ConfigChannel+0x370>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d10e      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	2380      	movs	r3, #128	@ 0x80
 8002a34:	045b      	lsls	r3, r3, #17
 8002a36:	4013      	ands	r3, r2
 8002a38:	d109      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	2280      	movs	r2, #128	@ 0x80
 8002a3e:	0452      	lsls	r2, r2, #17
 8002a40:	4313      	orrs	r3, r2
 8002a42:	4a32      	ldr	r2, [pc, #200]	@ (8002b0c <HAL_ADC_ConfigChannel+0x360>)
 8002a44:	0019      	movs	r1, r3
 8002a46:	0010      	movs	r0, r2
 8002a48:	f7ff fc0a 	bl	8002260 <LL_ADC_SetCommonPathInternalCh>
 8002a4c:	e07a      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a33      	ldr	r2, [pc, #204]	@ (8002b20 <HAL_ADC_ConfigChannel+0x374>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d000      	beq.n	8002a5a <HAL_ADC_ConfigChannel+0x2ae>
 8002a58:	e074      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	2380      	movs	r3, #128	@ 0x80
 8002a5e:	03db      	lsls	r3, r3, #15
 8002a60:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002a62:	d000      	beq.n	8002a66 <HAL_ADC_ConfigChannel+0x2ba>
 8002a64:	e06e      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	2280      	movs	r2, #128	@ 0x80
 8002a6a:	03d2      	lsls	r2, r2, #15
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4a27      	ldr	r2, [pc, #156]	@ (8002b0c <HAL_ADC_ConfigChannel+0x360>)
 8002a70:	0019      	movs	r1, r3
 8002a72:	0010      	movs	r0, r2
 8002a74:	f7ff fbf4 	bl	8002260 <LL_ADC_SetCommonPathInternalCh>
 8002a78:	e064      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	2380      	movs	r3, #128	@ 0x80
 8002a80:	061b      	lsls	r3, r3, #24
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d004      	beq.n	8002a90 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002b08 <HAL_ADC_ConfigChannel+0x35c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d107      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	0019      	movs	r1, r3
 8002a9a:	0010      	movs	r0, r2
 8002a9c:	f7ff fc66 	bl	800236c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	da4d      	bge.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aa8:	4b18      	ldr	r3, [pc, #96]	@ (8002b0c <HAL_ADC_ConfigChannel+0x360>)
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f7ff fbec 	bl	8002288 <LL_ADC_GetCommonPathInternalCh>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a15      	ldr	r2, [pc, #84]	@ (8002b10 <HAL_ADC_ConfigChannel+0x364>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d108      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4a18      	ldr	r2, [pc, #96]	@ (8002b24 <HAL_ADC_ConfigChannel+0x378>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	4a11      	ldr	r2, [pc, #68]	@ (8002b0c <HAL_ADC_ConfigChannel+0x360>)
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	0010      	movs	r0, r2
 8002aca:	f7ff fbc9 	bl	8002260 <LL_ADC_SetCommonPathInternalCh>
 8002ace:	e039      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a11      	ldr	r2, [pc, #68]	@ (8002b1c <HAL_ADC_ConfigChannel+0x370>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d108      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4a12      	ldr	r2, [pc, #72]	@ (8002b28 <HAL_ADC_ConfigChannel+0x37c>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8002b0c <HAL_ADC_ConfigChannel+0x360>)
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	0010      	movs	r0, r2
 8002ae6:	f7ff fbbb 	bl	8002260 <LL_ADC_SetCommonPathInternalCh>
 8002aea:	e02b      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0b      	ldr	r2, [pc, #44]	@ (8002b20 <HAL_ADC_ConfigChannel+0x374>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d126      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4a0c      	ldr	r2, [pc, #48]	@ (8002b2c <HAL_ADC_ConfigChannel+0x380>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	4a03      	ldr	r2, [pc, #12]	@ (8002b0c <HAL_ADC_ConfigChannel+0x360>)
 8002afe:	0019      	movs	r1, r3
 8002b00:	0010      	movs	r0, r2
 8002b02:	f7ff fbad 	bl	8002260 <LL_ADC_SetCommonPathInternalCh>
 8002b06:	e01d      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x398>
 8002b08:	80000004 	.word	0x80000004
 8002b0c:	40012708 	.word	0x40012708
 8002b10:	b0001000 	.word	0xb0001000
 8002b14:	20000048 	.word	0x20000048
 8002b18:	00030d40 	.word	0x00030d40
 8002b1c:	b8004000 	.word	0xb8004000
 8002b20:	b4002000 	.word	0xb4002000
 8002b24:	ff7fffff 	.word	0xff7fffff
 8002b28:	feffffff 	.word	0xfeffffff
 8002b2c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b34:	2220      	movs	r2, #32
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002b3c:	2317      	movs	r3, #23
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2254      	movs	r2, #84	@ 0x54
 8002b48:	2100      	movs	r1, #0
 8002b4a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002b4c:	2317      	movs	r3, #23
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	781b      	ldrb	r3, [r3, #0]
}
 8002b52:	0018      	movs	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b006      	add	sp, #24
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	46c0      	nop			@ (mov r8, r8)

08002b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	0002      	movs	r2, r0
 8002b64:	1dfb      	adds	r3, r7, #7
 8002b66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b68:	1dfb      	adds	r3, r7, #7
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b6e:	d809      	bhi.n	8002b84 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b70:	1dfb      	adds	r3, r7, #7
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	001a      	movs	r2, r3
 8002b76:	231f      	movs	r3, #31
 8002b78:	401a      	ands	r2, r3
 8002b7a:	4b04      	ldr	r3, [pc, #16]	@ (8002b8c <__NVIC_EnableIRQ+0x30>)
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	4091      	lsls	r1, r2
 8002b80:	000a      	movs	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002b84:	46c0      	nop			@ (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	e000e100 	.word	0xe000e100

08002b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	0002      	movs	r2, r0
 8002b98:	6039      	str	r1, [r7, #0]
 8002b9a:	1dfb      	adds	r3, r7, #7
 8002b9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b9e:	1dfb      	adds	r3, r7, #7
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ba4:	d828      	bhi.n	8002bf8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ba6:	4a2f      	ldr	r2, [pc, #188]	@ (8002c64 <__NVIC_SetPriority+0xd4>)
 8002ba8:	1dfb      	adds	r3, r7, #7
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	b25b      	sxtb	r3, r3
 8002bae:	089b      	lsrs	r3, r3, #2
 8002bb0:	33c0      	adds	r3, #192	@ 0xc0
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	589b      	ldr	r3, [r3, r2]
 8002bb6:	1dfa      	adds	r2, r7, #7
 8002bb8:	7812      	ldrb	r2, [r2, #0]
 8002bba:	0011      	movs	r1, r2
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	400a      	ands	r2, r1
 8002bc0:	00d2      	lsls	r2, r2, #3
 8002bc2:	21ff      	movs	r1, #255	@ 0xff
 8002bc4:	4091      	lsls	r1, r2
 8002bc6:	000a      	movs	r2, r1
 8002bc8:	43d2      	mvns	r2, r2
 8002bca:	401a      	ands	r2, r3
 8002bcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	019b      	lsls	r3, r3, #6
 8002bd2:	22ff      	movs	r2, #255	@ 0xff
 8002bd4:	401a      	ands	r2, r3
 8002bd6:	1dfb      	adds	r3, r7, #7
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	0018      	movs	r0, r3
 8002bdc:	2303      	movs	r3, #3
 8002bde:	4003      	ands	r3, r0
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002be4:	481f      	ldr	r0, [pc, #124]	@ (8002c64 <__NVIC_SetPriority+0xd4>)
 8002be6:	1dfb      	adds	r3, r7, #7
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	b25b      	sxtb	r3, r3
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	33c0      	adds	r3, #192	@ 0xc0
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002bf6:	e031      	b.n	8002c5c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c68 <__NVIC_SetPriority+0xd8>)
 8002bfa:	1dfb      	adds	r3, r7, #7
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	0019      	movs	r1, r3
 8002c00:	230f      	movs	r3, #15
 8002c02:	400b      	ands	r3, r1
 8002c04:	3b08      	subs	r3, #8
 8002c06:	089b      	lsrs	r3, r3, #2
 8002c08:	3306      	adds	r3, #6
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	18d3      	adds	r3, r2, r3
 8002c0e:	3304      	adds	r3, #4
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	1dfa      	adds	r2, r7, #7
 8002c14:	7812      	ldrb	r2, [r2, #0]
 8002c16:	0011      	movs	r1, r2
 8002c18:	2203      	movs	r2, #3
 8002c1a:	400a      	ands	r2, r1
 8002c1c:	00d2      	lsls	r2, r2, #3
 8002c1e:	21ff      	movs	r1, #255	@ 0xff
 8002c20:	4091      	lsls	r1, r2
 8002c22:	000a      	movs	r2, r1
 8002c24:	43d2      	mvns	r2, r2
 8002c26:	401a      	ands	r2, r3
 8002c28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	019b      	lsls	r3, r3, #6
 8002c2e:	22ff      	movs	r2, #255	@ 0xff
 8002c30:	401a      	ands	r2, r3
 8002c32:	1dfb      	adds	r3, r7, #7
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	0018      	movs	r0, r3
 8002c38:	2303      	movs	r3, #3
 8002c3a:	4003      	ands	r3, r0
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c40:	4809      	ldr	r0, [pc, #36]	@ (8002c68 <__NVIC_SetPriority+0xd8>)
 8002c42:	1dfb      	adds	r3, r7, #7
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	001c      	movs	r4, r3
 8002c48:	230f      	movs	r3, #15
 8002c4a:	4023      	ands	r3, r4
 8002c4c:	3b08      	subs	r3, #8
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	430a      	orrs	r2, r1
 8002c52:	3306      	adds	r3, #6
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	18c3      	adds	r3, r0, r3
 8002c58:	3304      	adds	r3, #4
 8002c5a:	601a      	str	r2, [r3, #0]
}
 8002c5c:	46c0      	nop			@ (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b003      	add	sp, #12
 8002c62:	bd90      	pop	{r4, r7, pc}
 8002c64:	e000e100 	.word	0xe000e100
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	1e5a      	subs	r2, r3, #1
 8002c78:	2380      	movs	r3, #128	@ 0x80
 8002c7a:	045b      	lsls	r3, r3, #17
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d301      	bcc.n	8002c84 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c80:	2301      	movs	r3, #1
 8002c82:	e010      	b.n	8002ca6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c84:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <SysTick_Config+0x44>)
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	3a01      	subs	r2, #1
 8002c8a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	425b      	negs	r3, r3
 8002c90:	2103      	movs	r1, #3
 8002c92:	0018      	movs	r0, r3
 8002c94:	f7ff ff7c 	bl	8002b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c98:	4b05      	ldr	r3, [pc, #20]	@ (8002cb0 <SysTick_Config+0x44>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c9e:	4b04      	ldr	r3, [pc, #16]	@ (8002cb0 <SysTick_Config+0x44>)
 8002ca0:	2207      	movs	r2, #7
 8002ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b002      	add	sp, #8
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	e000e010 	.word	0xe000e010

08002cb4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	210f      	movs	r1, #15
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	1c02      	adds	r2, r0, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	187b      	adds	r3, r7, r1
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	b25b      	sxtb	r3, r3
 8002cce:	0011      	movs	r1, r2
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f7ff ff5d 	bl	8002b90 <__NVIC_SetPriority>
}
 8002cd6:	46c0      	nop			@ (mov r8, r8)
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	b004      	add	sp, #16
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	0002      	movs	r2, r0
 8002ce6:	1dfb      	adds	r3, r7, #7
 8002ce8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cea:	1dfb      	adds	r3, r7, #7
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b25b      	sxtb	r3, r3
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f7ff ff33 	bl	8002b5c <__NVIC_EnableIRQ>
}
 8002cf6:	46c0      	nop			@ (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b002      	add	sp, #8
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f7ff ffaf 	bl	8002c6c <SysTick_Config>
 8002d0e:	0003      	movs	r3, r0
}
 8002d10:	0018      	movs	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b002      	add	sp, #8
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d26:	e147      	b.n	8002fb8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4091      	lsls	r1, r2
 8002d32:	000a      	movs	r2, r1
 8002d34:	4013      	ands	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d100      	bne.n	8002d40 <HAL_GPIO_Init+0x28>
 8002d3e:	e138      	b.n	8002fb2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2203      	movs	r2, #3
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d005      	beq.n	8002d58 <HAL_GPIO_Init+0x40>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2203      	movs	r2, #3
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d130      	bne.n	8002dba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	2203      	movs	r2, #3
 8002d64:	409a      	lsls	r2, r3
 8002d66:	0013      	movs	r3, r2
 8002d68:	43da      	mvns	r2, r3
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	0013      	movs	r3, r2
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d8e:	2201      	movs	r2, #1
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	409a      	lsls	r2, r3
 8002d94:	0013      	movs	r3, r2
 8002d96:	43da      	mvns	r2, r3
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	2201      	movs	r2, #1
 8002da6:	401a      	ands	r2, r3
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	409a      	lsls	r2, r3
 8002dac:	0013      	movs	r3, r2
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d017      	beq.n	8002df6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	0013      	movs	r3, r2
 8002dd6:	43da      	mvns	r2, r3
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	409a      	lsls	r2, r3
 8002de8:	0013      	movs	r3, r2
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d123      	bne.n	8002e4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	08da      	lsrs	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3208      	adds	r2, #8
 8002e0a:	0092      	lsls	r2, r2, #2
 8002e0c:	58d3      	ldr	r3, [r2, r3]
 8002e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2207      	movs	r2, #7
 8002e14:	4013      	ands	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	220f      	movs	r2, #15
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	0013      	movs	r3, r2
 8002e1e:	43da      	mvns	r2, r3
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4013      	ands	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2107      	movs	r1, #7
 8002e2e:	400b      	ands	r3, r1
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	409a      	lsls	r2, r3
 8002e34:	0013      	movs	r3, r2
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	08da      	lsrs	r2, r3, #3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3208      	adds	r2, #8
 8002e44:	0092      	lsls	r2, r2, #2
 8002e46:	6939      	ldr	r1, [r7, #16]
 8002e48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	2203      	movs	r2, #3
 8002e56:	409a      	lsls	r2, r3
 8002e58:	0013      	movs	r3, r2
 8002e5a:	43da      	mvns	r2, r3
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2203      	movs	r2, #3
 8002e68:	401a      	ands	r2, r3
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	0013      	movs	r3, r2
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	23c0      	movs	r3, #192	@ 0xc0
 8002e84:	029b      	lsls	r3, r3, #10
 8002e86:	4013      	ands	r3, r2
 8002e88:	d100      	bne.n	8002e8c <HAL_GPIO_Init+0x174>
 8002e8a:	e092      	b.n	8002fb2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002e8c:	4a50      	ldr	r2, [pc, #320]	@ (8002fd0 <HAL_GPIO_Init+0x2b8>)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	089b      	lsrs	r3, r3, #2
 8002e92:	3318      	adds	r3, #24
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	589b      	ldr	r3, [r3, r2]
 8002e98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	220f      	movs	r2, #15
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	0013      	movs	r3, r2
 8002ea8:	43da      	mvns	r2, r3
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4013      	ands	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	23a0      	movs	r3, #160	@ 0xa0
 8002eb4:	05db      	lsls	r3, r3, #23
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d013      	beq.n	8002ee2 <HAL_GPIO_Init+0x1ca>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a45      	ldr	r2, [pc, #276]	@ (8002fd4 <HAL_GPIO_Init+0x2bc>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00d      	beq.n	8002ede <HAL_GPIO_Init+0x1c6>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a44      	ldr	r2, [pc, #272]	@ (8002fd8 <HAL_GPIO_Init+0x2c0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d007      	beq.n	8002eda <HAL_GPIO_Init+0x1c2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a43      	ldr	r2, [pc, #268]	@ (8002fdc <HAL_GPIO_Init+0x2c4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <HAL_GPIO_Init+0x1be>
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e006      	b.n	8002ee4 <HAL_GPIO_Init+0x1cc>
 8002ed6:	2305      	movs	r3, #5
 8002ed8:	e004      	b.n	8002ee4 <HAL_GPIO_Init+0x1cc>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e002      	b.n	8002ee4 <HAL_GPIO_Init+0x1cc>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <HAL_GPIO_Init+0x1cc>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	2103      	movs	r1, #3
 8002ee8:	400a      	ands	r2, r1
 8002eea:	00d2      	lsls	r2, r2, #3
 8002eec:	4093      	lsls	r3, r2
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002ef4:	4936      	ldr	r1, [pc, #216]	@ (8002fd0 <HAL_GPIO_Init+0x2b8>)
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	089b      	lsrs	r3, r3, #2
 8002efa:	3318      	adds	r3, #24
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f02:	4b33      	ldr	r3, [pc, #204]	@ (8002fd0 <HAL_GPIO_Init+0x2b8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	43da      	mvns	r2, r3
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	2380      	movs	r3, #128	@ 0x80
 8002f18:	035b      	lsls	r3, r3, #13
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f26:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd0 <HAL_GPIO_Init+0x2b8>)
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002f2c:	4b28      	ldr	r3, [pc, #160]	@ (8002fd0 <HAL_GPIO_Init+0x2b8>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	43da      	mvns	r2, r3
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	2380      	movs	r3, #128	@ 0x80
 8002f42:	039b      	lsls	r3, r3, #14
 8002f44:	4013      	ands	r3, r2
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f50:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd0 <HAL_GPIO_Init+0x2b8>)
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f56:	4a1e      	ldr	r2, [pc, #120]	@ (8002fd0 <HAL_GPIO_Init+0x2b8>)
 8002f58:	2384      	movs	r3, #132	@ 0x84
 8002f5a:	58d3      	ldr	r3, [r2, r3]
 8002f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	43da      	mvns	r2, r3
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4013      	ands	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	2380      	movs	r3, #128	@ 0x80
 8002f6e:	029b      	lsls	r3, r3, #10
 8002f70:	4013      	ands	r3, r2
 8002f72:	d003      	beq.n	8002f7c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f7c:	4914      	ldr	r1, [pc, #80]	@ (8002fd0 <HAL_GPIO_Init+0x2b8>)
 8002f7e:	2284      	movs	r2, #132	@ 0x84
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002f84:	4a12      	ldr	r2, [pc, #72]	@ (8002fd0 <HAL_GPIO_Init+0x2b8>)
 8002f86:	2380      	movs	r3, #128	@ 0x80
 8002f88:	58d3      	ldr	r3, [r2, r3]
 8002f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	4013      	ands	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	2380      	movs	r3, #128	@ 0x80
 8002f9c:	025b      	lsls	r3, r3, #9
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002faa:	4909      	ldr	r1, [pc, #36]	@ (8002fd0 <HAL_GPIO_Init+0x2b8>)
 8002fac:	2280      	movs	r2, #128	@ 0x80
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	40da      	lsrs	r2, r3
 8002fc0:	1e13      	subs	r3, r2, #0
 8002fc2:	d000      	beq.n	8002fc6 <HAL_GPIO_Init+0x2ae>
 8002fc4:	e6b0      	b.n	8002d28 <HAL_GPIO_Init+0x10>
  }
}
 8002fc6:	46c0      	nop			@ (mov r8, r8)
 8002fc8:	46c0      	nop			@ (mov r8, r8)
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b006      	add	sp, #24
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40021800 	.word	0x40021800
 8002fd4:	50000400 	.word	0x50000400
 8002fd8:	50000800 	.word	0x50000800
 8002fdc:	50000c00 	.word	0x50000c00

08002fe0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	000a      	movs	r2, r1
 8002fea:	1cbb      	adds	r3, r7, #2
 8002fec:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	1cba      	adds	r2, r7, #2
 8002ff4:	8812      	ldrh	r2, [r2, #0]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d004      	beq.n	8003004 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002ffa:	230f      	movs	r3, #15
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	2201      	movs	r2, #1
 8003000:	701a      	strb	r2, [r3, #0]
 8003002:	e003      	b.n	800300c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003004:	230f      	movs	r3, #15
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800300c:	230f      	movs	r3, #15
 800300e:	18fb      	adds	r3, r7, r3
 8003010:	781b      	ldrb	r3, [r3, #0]
}
 8003012:	0018      	movs	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	b004      	add	sp, #16
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	0008      	movs	r0, r1
 8003024:	0011      	movs	r1, r2
 8003026:	1cbb      	adds	r3, r7, #2
 8003028:	1c02      	adds	r2, r0, #0
 800302a:	801a      	strh	r2, [r3, #0]
 800302c:	1c7b      	adds	r3, r7, #1
 800302e:	1c0a      	adds	r2, r1, #0
 8003030:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003032:	1c7b      	adds	r3, r7, #1
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d004      	beq.n	8003044 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800303a:	1cbb      	adds	r3, r7, #2
 800303c:	881a      	ldrh	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003042:	e003      	b.n	800304c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003044:	1cbb      	adds	r3, r7, #2
 8003046:	881a      	ldrh	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800304c:	46c0      	nop			@ (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	b002      	add	sp, #8
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	000a      	movs	r2, r1
 800305e:	1cbb      	adds	r3, r7, #2
 8003060:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003068:	1cbb      	adds	r3, r7, #2
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4013      	ands	r3, r2
 8003070:	041a      	lsls	r2, r3, #16
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	43db      	mvns	r3, r3
 8003076:	1cb9      	adds	r1, r7, #2
 8003078:	8809      	ldrh	r1, [r1, #0]
 800307a:	400b      	ands	r3, r1
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	619a      	str	r2, [r3, #24]
}
 8003082:	46c0      	nop			@ (mov r8, r8)
 8003084:	46bd      	mov	sp, r7
 8003086:	b004      	add	sp, #16
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	0002      	movs	r2, r0
 8003094:	1dbb      	adds	r3, r7, #6
 8003096:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003098:	4b10      	ldr	r3, [pc, #64]	@ (80030dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	1dba      	adds	r2, r7, #6
 800309e:	8812      	ldrh	r2, [r2, #0]
 80030a0:	4013      	ands	r3, r2
 80030a2:	d008      	beq.n	80030b6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80030a4:	4b0d      	ldr	r3, [pc, #52]	@ (80030dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80030a6:	1dba      	adds	r2, r7, #6
 80030a8:	8812      	ldrh	r2, [r2, #0]
 80030aa:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80030ac:	1dbb      	adds	r3, r7, #6
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f000 f815 	bl	80030e0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80030b6:	4b09      	ldr	r3, [pc, #36]	@ (80030dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	1dba      	adds	r2, r7, #6
 80030bc:	8812      	ldrh	r2, [r2, #0]
 80030be:	4013      	ands	r3, r2
 80030c0:	d008      	beq.n	80030d4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80030c2:	4b06      	ldr	r3, [pc, #24]	@ (80030dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80030c4:	1dba      	adds	r2, r7, #6
 80030c6:	8812      	ldrh	r2, [r2, #0]
 80030c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80030ca:	1dbb      	adds	r3, r7, #6
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f7fe f8e6 	bl	80012a0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80030d4:	46c0      	nop			@ (mov r8, r8)
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b002      	add	sp, #8
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021800 	.word	0x40021800

080030e0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	0002      	movs	r2, r0
 80030e8:	1dbb      	adds	r3, r7, #6
 80030ea:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80030ec:	46c0      	nop			@ (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e08f      	b.n	8003226 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2241      	movs	r2, #65	@ 0x41
 800310a:	5c9b      	ldrb	r3, [r3, r2]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d107      	bne.n	8003122 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2240      	movs	r2, #64	@ 0x40
 8003116:	2100      	movs	r1, #0
 8003118:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	0018      	movs	r0, r3
 800311e:	f7fe fe7f 	bl	8001e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2241      	movs	r2, #65	@ 0x41
 8003126:	2124      	movs	r1, #36	@ 0x24
 8003128:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2101      	movs	r1, #1
 8003136:	438a      	bics	r2, r1
 8003138:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	493b      	ldr	r1, [pc, #236]	@ (8003230 <HAL_I2C_Init+0x13c>)
 8003144:	400a      	ands	r2, r1
 8003146:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4938      	ldr	r1, [pc, #224]	@ (8003234 <HAL_I2C_Init+0x140>)
 8003154:	400a      	ands	r2, r1
 8003156:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d108      	bne.n	8003172 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2180      	movs	r1, #128	@ 0x80
 800316a:	0209      	lsls	r1, r1, #8
 800316c:	430a      	orrs	r2, r1
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	e007      	b.n	8003182 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2184      	movs	r1, #132	@ 0x84
 800317c:	0209      	lsls	r1, r1, #8
 800317e:	430a      	orrs	r2, r1
 8003180:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d109      	bne.n	800319e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2180      	movs	r1, #128	@ 0x80
 8003196:	0109      	lsls	r1, r1, #4
 8003198:	430a      	orrs	r2, r1
 800319a:	605a      	str	r2, [r3, #4]
 800319c:	e007      	b.n	80031ae <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4923      	ldr	r1, [pc, #140]	@ (8003238 <HAL_I2C_Init+0x144>)
 80031aa:	400a      	ands	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4920      	ldr	r1, [pc, #128]	@ (800323c <HAL_I2C_Init+0x148>)
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	491a      	ldr	r1, [pc, #104]	@ (8003234 <HAL_I2C_Init+0x140>)
 80031ca:	400a      	ands	r2, r1
 80031cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691a      	ldr	r2, [r3, #16]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69d9      	ldr	r1, [r3, #28]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1a      	ldr	r2, [r3, #32]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2101      	movs	r1, #1
 8003204:	430a      	orrs	r2, r1
 8003206:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2241      	movs	r2, #65	@ 0x41
 8003212:	2120      	movs	r1, #32
 8003214:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2242      	movs	r2, #66	@ 0x42
 8003220:	2100      	movs	r1, #0
 8003222:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	0018      	movs	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	b002      	add	sp, #8
 800322c:	bd80      	pop	{r7, pc}
 800322e:	46c0      	nop			@ (mov r8, r8)
 8003230:	f0ffffff 	.word	0xf0ffffff
 8003234:	ffff7fff 	.word	0xffff7fff
 8003238:	fffff7ff 	.word	0xfffff7ff
 800323c:	02008000 	.word	0x02008000

08003240 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b089      	sub	sp, #36	@ 0x24
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	0008      	movs	r0, r1
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	0019      	movs	r1, r3
 800324e:	230a      	movs	r3, #10
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	1c02      	adds	r2, r0, #0
 8003254:	801a      	strh	r2, [r3, #0]
 8003256:	2308      	movs	r3, #8
 8003258:	18fb      	adds	r3, r7, r3
 800325a:	1c0a      	adds	r2, r1, #0
 800325c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2241      	movs	r2, #65	@ 0x41
 8003262:	5c9b      	ldrb	r3, [r3, r2]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b20      	cmp	r3, #32
 8003268:	d000      	beq.n	800326c <HAL_I2C_Master_Transmit+0x2c>
 800326a:	e10a      	b.n	8003482 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2240      	movs	r2, #64	@ 0x40
 8003270:	5c9b      	ldrb	r3, [r3, r2]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_I2C_Master_Transmit+0x3a>
 8003276:	2302      	movs	r3, #2
 8003278:	e104      	b.n	8003484 <HAL_I2C_Master_Transmit+0x244>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2240      	movs	r2, #64	@ 0x40
 800327e:	2101      	movs	r1, #1
 8003280:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003282:	f7fe ffe3 	bl	800224c <HAL_GetTick>
 8003286:	0003      	movs	r3, r0
 8003288:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800328a:	2380      	movs	r3, #128	@ 0x80
 800328c:	0219      	lsls	r1, r3, #8
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	2319      	movs	r3, #25
 8003296:	2201      	movs	r2, #1
 8003298:	f000 fa26 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 800329c:	1e03      	subs	r3, r0, #0
 800329e:	d001      	beq.n	80032a4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0ef      	b.n	8003484 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2241      	movs	r2, #65	@ 0x41
 80032a8:	2121      	movs	r1, #33	@ 0x21
 80032aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2242      	movs	r2, #66	@ 0x42
 80032b0:	2110      	movs	r1, #16
 80032b2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2208      	movs	r2, #8
 80032c4:	18ba      	adds	r2, r7, r2
 80032c6:	8812      	ldrh	r2, [r2, #0]
 80032c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2bff      	cmp	r3, #255	@ 0xff
 80032d8:	d906      	bls.n	80032e8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	22ff      	movs	r2, #255	@ 0xff
 80032de:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80032e0:	2380      	movs	r3, #128	@ 0x80
 80032e2:	045b      	lsls	r3, r3, #17
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	e007      	b.n	80032f8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80032f2:	2380      	movs	r3, #128	@ 0x80
 80032f4:	049b      	lsls	r3, r3, #18
 80032f6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d027      	beq.n	8003350 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	781a      	ldrb	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003334:	b2db      	uxtb	r3, r3
 8003336:	3301      	adds	r3, #1
 8003338:	b2da      	uxtb	r2, r3
 800333a:	697c      	ldr	r4, [r7, #20]
 800333c:	230a      	movs	r3, #10
 800333e:	18fb      	adds	r3, r7, r3
 8003340:	8819      	ldrh	r1, [r3, #0]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	4b51      	ldr	r3, [pc, #324]	@ (800348c <HAL_I2C_Master_Transmit+0x24c>)
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	0023      	movs	r3, r4
 800334a:	f000 fc45 	bl	8003bd8 <I2C_TransferConfig>
 800334e:	e06f      	b.n	8003430 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003354:	b2da      	uxtb	r2, r3
 8003356:	697c      	ldr	r4, [r7, #20]
 8003358:	230a      	movs	r3, #10
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	8819      	ldrh	r1, [r3, #0]
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	4b4a      	ldr	r3, [pc, #296]	@ (800348c <HAL_I2C_Master_Transmit+0x24c>)
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	0023      	movs	r3, r4
 8003366:	f000 fc37 	bl	8003bd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800336a:	e061      	b.n	8003430 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	0018      	movs	r0, r3
 8003374:	f000 fa10 	bl	8003798 <I2C_WaitOnTXISFlagUntilTimeout>
 8003378:	1e03      	subs	r3, r0, #0
 800337a:	d001      	beq.n	8003380 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e081      	b.n	8003484 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	781a      	ldrb	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d03a      	beq.n	8003430 <HAL_I2C_Master_Transmit+0x1f0>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d136      	bne.n	8003430 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	0013      	movs	r3, r2
 80033cc:	2200      	movs	r2, #0
 80033ce:	2180      	movs	r1, #128	@ 0x80
 80033d0:	f000 f98a 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 80033d4:	1e03      	subs	r3, r0, #0
 80033d6:	d001      	beq.n	80033dc <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e053      	b.n	8003484 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2bff      	cmp	r3, #255	@ 0xff
 80033e4:	d911      	bls.n	800340a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	22ff      	movs	r2, #255	@ 0xff
 80033ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	2380      	movs	r3, #128	@ 0x80
 80033f4:	045c      	lsls	r4, r3, #17
 80033f6:	230a      	movs	r3, #10
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	8819      	ldrh	r1, [r3, #0]
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	2300      	movs	r3, #0
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	0023      	movs	r3, r4
 8003404:	f000 fbe8 	bl	8003bd8 <I2C_TransferConfig>
 8003408:	e012      	b.n	8003430 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003418:	b2da      	uxtb	r2, r3
 800341a:	2380      	movs	r3, #128	@ 0x80
 800341c:	049c      	lsls	r4, r3, #18
 800341e:	230a      	movs	r3, #10
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	8819      	ldrh	r1, [r3, #0]
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	2300      	movs	r3, #0
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	0023      	movs	r3, r4
 800342c:	f000 fbd4 	bl	8003bd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003434:	b29b      	uxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d198      	bne.n	800336c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	0018      	movs	r0, r3
 8003442:	f000 f9ef 	bl	8003824 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003446:	1e03      	subs	r3, r0, #0
 8003448:	d001      	beq.n	800344e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e01a      	b.n	8003484 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2220      	movs	r2, #32
 8003454:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	490b      	ldr	r1, [pc, #44]	@ (8003490 <HAL_I2C_Master_Transmit+0x250>)
 8003462:	400a      	ands	r2, r1
 8003464:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2241      	movs	r2, #65	@ 0x41
 800346a:	2120      	movs	r1, #32
 800346c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2242      	movs	r2, #66	@ 0x42
 8003472:	2100      	movs	r1, #0
 8003474:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2240      	movs	r2, #64	@ 0x40
 800347a:	2100      	movs	r1, #0
 800347c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	e000      	b.n	8003484 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003482:	2302      	movs	r3, #2
  }
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b007      	add	sp, #28
 800348a:	bd90      	pop	{r4, r7, pc}
 800348c:	80002000 	.word	0x80002000
 8003490:	fe00e800 	.word	0xfe00e800

08003494 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b089      	sub	sp, #36	@ 0x24
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	0008      	movs	r0, r1
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	0019      	movs	r1, r3
 80034a2:	230a      	movs	r3, #10
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	1c02      	adds	r2, r0, #0
 80034a8:	801a      	strh	r2, [r3, #0]
 80034aa:	2308      	movs	r3, #8
 80034ac:	18fb      	adds	r3, r7, r3
 80034ae:	1c0a      	adds	r2, r1, #0
 80034b0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2241      	movs	r2, #65	@ 0x41
 80034b6:	5c9b      	ldrb	r3, [r3, r2]
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	d000      	beq.n	80034c0 <HAL_I2C_Master_Receive+0x2c>
 80034be:	e0e8      	b.n	8003692 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2240      	movs	r2, #64	@ 0x40
 80034c4:	5c9b      	ldrb	r3, [r3, r2]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_I2C_Master_Receive+0x3a>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e0e2      	b.n	8003694 <HAL_I2C_Master_Receive+0x200>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2240      	movs	r2, #64	@ 0x40
 80034d2:	2101      	movs	r1, #1
 80034d4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034d6:	f7fe feb9 	bl	800224c <HAL_GetTick>
 80034da:	0003      	movs	r3, r0
 80034dc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034de:	2380      	movs	r3, #128	@ 0x80
 80034e0:	0219      	lsls	r1, r3, #8
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	2319      	movs	r3, #25
 80034ea:	2201      	movs	r2, #1
 80034ec:	f000 f8fc 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 80034f0:	1e03      	subs	r3, r0, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0cd      	b.n	8003694 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2241      	movs	r2, #65	@ 0x41
 80034fc:	2122      	movs	r1, #34	@ 0x22
 80034fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2242      	movs	r2, #66	@ 0x42
 8003504:	2110      	movs	r1, #16
 8003506:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2208      	movs	r2, #8
 8003518:	18ba      	adds	r2, r7, r2
 800351a:	8812      	ldrh	r2, [r2, #0]
 800351c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	2bff      	cmp	r3, #255	@ 0xff
 800352c:	d911      	bls.n	8003552 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	22ff      	movs	r2, #255	@ 0xff
 8003532:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003538:	b2da      	uxtb	r2, r3
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	045c      	lsls	r4, r3, #17
 800353e:	230a      	movs	r3, #10
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	8819      	ldrh	r1, [r3, #0]
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	4b55      	ldr	r3, [pc, #340]	@ (800369c <HAL_I2C_Master_Receive+0x208>)
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	0023      	movs	r3, r4
 800354c:	f000 fb44 	bl	8003bd8 <I2C_TransferConfig>
 8003550:	e076      	b.n	8003640 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003560:	b2da      	uxtb	r2, r3
 8003562:	2380      	movs	r3, #128	@ 0x80
 8003564:	049c      	lsls	r4, r3, #18
 8003566:	230a      	movs	r3, #10
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	8819      	ldrh	r1, [r3, #0]
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	4b4b      	ldr	r3, [pc, #300]	@ (800369c <HAL_I2C_Master_Receive+0x208>)
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	0023      	movs	r3, r4
 8003574:	f000 fb30 	bl	8003bd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003578:	e062      	b.n	8003640 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	0018      	movs	r0, r3
 8003582:	f000 f993 	bl	80038ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003586:	1e03      	subs	r3, r0, #0
 8003588:	d001      	beq.n	800358e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e082      	b.n	8003694 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d03a      	beq.n	8003640 <HAL_I2C_Master_Receive+0x1ac>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d136      	bne.n	8003640 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	0013      	movs	r3, r2
 80035dc:	2200      	movs	r2, #0
 80035de:	2180      	movs	r1, #128	@ 0x80
 80035e0:	f000 f882 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 80035e4:	1e03      	subs	r3, r0, #0
 80035e6:	d001      	beq.n	80035ec <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e053      	b.n	8003694 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2bff      	cmp	r3, #255	@ 0xff
 80035f4:	d911      	bls.n	800361a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	22ff      	movs	r2, #255	@ 0xff
 80035fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003600:	b2da      	uxtb	r2, r3
 8003602:	2380      	movs	r3, #128	@ 0x80
 8003604:	045c      	lsls	r4, r3, #17
 8003606:	230a      	movs	r3, #10
 8003608:	18fb      	adds	r3, r7, r3
 800360a:	8819      	ldrh	r1, [r3, #0]
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	2300      	movs	r3, #0
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	0023      	movs	r3, r4
 8003614:	f000 fae0 	bl	8003bd8 <I2C_TransferConfig>
 8003618:	e012      	b.n	8003640 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003628:	b2da      	uxtb	r2, r3
 800362a:	2380      	movs	r3, #128	@ 0x80
 800362c:	049c      	lsls	r4, r3, #18
 800362e:	230a      	movs	r3, #10
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	8819      	ldrh	r1, [r3, #0]
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	2300      	movs	r3, #0
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	0023      	movs	r3, r4
 800363c:	f000 facc 	bl	8003bd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d197      	bne.n	800357a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	0018      	movs	r0, r3
 8003652:	f000 f8e7 	bl	8003824 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003656:	1e03      	subs	r3, r0, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e01a      	b.n	8003694 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2220      	movs	r2, #32
 8003664:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	490b      	ldr	r1, [pc, #44]	@ (80036a0 <HAL_I2C_Master_Receive+0x20c>)
 8003672:	400a      	ands	r2, r1
 8003674:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2241      	movs	r2, #65	@ 0x41
 800367a:	2120      	movs	r1, #32
 800367c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2242      	movs	r2, #66	@ 0x42
 8003682:	2100      	movs	r1, #0
 8003684:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2240      	movs	r2, #64	@ 0x40
 800368a:	2100      	movs	r1, #0
 800368c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	e000      	b.n	8003694 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003692:	2302      	movs	r3, #2
  }
}
 8003694:	0018      	movs	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	b007      	add	sp, #28
 800369a:	bd90      	pop	{r4, r7, pc}
 800369c:	80002400 	.word	0x80002400
 80036a0:	fe00e800 	.word	0xfe00e800

080036a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	2202      	movs	r2, #2
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d103      	bne.n	80036c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2200      	movs	r2, #0
 80036c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	2201      	movs	r2, #1
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d007      	beq.n	80036e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2101      	movs	r1, #1
 80036dc:	430a      	orrs	r2, r1
 80036de:	619a      	str	r2, [r3, #24]
  }
}
 80036e0:	46c0      	nop			@ (mov r8, r8)
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b002      	add	sp, #8
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	1dfb      	adds	r3, r7, #7
 80036f6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f8:	e03a      	b.n	8003770 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	6839      	ldr	r1, [r7, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	0018      	movs	r0, r3
 8003702:	f000 f971 	bl	80039e8 <I2C_IsErrorOccurred>
 8003706:	1e03      	subs	r3, r0, #0
 8003708:	d001      	beq.n	800370e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e040      	b.n	8003790 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	d02d      	beq.n	8003770 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003714:	f7fe fd9a 	bl	800224c <HAL_GetTick>
 8003718:	0002      	movs	r2, r0
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d302      	bcc.n	800372a <I2C_WaitOnFlagUntilTimeout+0x42>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d122      	bne.n	8003770 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	4013      	ands	r3, r2
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	425a      	negs	r2, r3
 800373a:	4153      	adcs	r3, r2
 800373c:	b2db      	uxtb	r3, r3
 800373e:	001a      	movs	r2, r3
 8003740:	1dfb      	adds	r3, r7, #7
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d113      	bne.n	8003770 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374c:	2220      	movs	r2, #32
 800374e:	431a      	orrs	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2241      	movs	r2, #65	@ 0x41
 8003758:	2120      	movs	r1, #32
 800375a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2242      	movs	r2, #66	@ 0x42
 8003760:	2100      	movs	r1, #0
 8003762:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2240      	movs	r2, #64	@ 0x40
 8003768:	2100      	movs	r1, #0
 800376a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e00f      	b.n	8003790 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	4013      	ands	r3, r2
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	425a      	negs	r2, r3
 8003780:	4153      	adcs	r3, r2
 8003782:	b2db      	uxtb	r3, r3
 8003784:	001a      	movs	r2, r3
 8003786:	1dfb      	adds	r3, r7, #7
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d0b5      	beq.n	80036fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	0018      	movs	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	b004      	add	sp, #16
 8003796:	bd80      	pop	{r7, pc}

08003798 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037a4:	e032      	b.n	800380c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	0018      	movs	r0, r3
 80037ae:	f000 f91b 	bl	80039e8 <I2C_IsErrorOccurred>
 80037b2:	1e03      	subs	r3, r0, #0
 80037b4:	d001      	beq.n	80037ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e030      	b.n	800381c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	3301      	adds	r3, #1
 80037be:	d025      	beq.n	800380c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c0:	f7fe fd44 	bl	800224c <HAL_GetTick>
 80037c4:	0002      	movs	r2, r0
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d302      	bcc.n	80037d6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d11a      	bne.n	800380c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	2202      	movs	r2, #2
 80037de:	4013      	ands	r3, r2
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d013      	beq.n	800380c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e8:	2220      	movs	r2, #32
 80037ea:	431a      	orrs	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2241      	movs	r2, #65	@ 0x41
 80037f4:	2120      	movs	r1, #32
 80037f6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2242      	movs	r2, #66	@ 0x42
 80037fc:	2100      	movs	r1, #0
 80037fe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2240      	movs	r2, #64	@ 0x40
 8003804:	2100      	movs	r1, #0
 8003806:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e007      	b.n	800381c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2202      	movs	r2, #2
 8003814:	4013      	ands	r3, r2
 8003816:	2b02      	cmp	r3, #2
 8003818:	d1c5      	bne.n	80037a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	0018      	movs	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	b004      	add	sp, #16
 8003822:	bd80      	pop	{r7, pc}

08003824 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003830:	e02f      	b.n	8003892 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	0018      	movs	r0, r3
 800383a:	f000 f8d5 	bl	80039e8 <I2C_IsErrorOccurred>
 800383e:	1e03      	subs	r3, r0, #0
 8003840:	d001      	beq.n	8003846 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e02d      	b.n	80038a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003846:	f7fe fd01 	bl	800224c <HAL_GetTick>
 800384a:	0002      	movs	r2, r0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	429a      	cmp	r2, r3
 8003854:	d302      	bcc.n	800385c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d11a      	bne.n	8003892 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	2220      	movs	r2, #32
 8003864:	4013      	ands	r3, r2
 8003866:	2b20      	cmp	r3, #32
 8003868:	d013      	beq.n	8003892 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386e:	2220      	movs	r2, #32
 8003870:	431a      	orrs	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2241      	movs	r2, #65	@ 0x41
 800387a:	2120      	movs	r1, #32
 800387c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2242      	movs	r2, #66	@ 0x42
 8003882:	2100      	movs	r1, #0
 8003884:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2240      	movs	r2, #64	@ 0x40
 800388a:	2100      	movs	r1, #0
 800388c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e007      	b.n	80038a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2220      	movs	r2, #32
 800389a:	4013      	ands	r3, r2
 800389c:	2b20      	cmp	r3, #32
 800389e:	d1c8      	bne.n	8003832 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	0018      	movs	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	b004      	add	sp, #16
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b8:	2317      	movs	r3, #23
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	2200      	movs	r2, #0
 80038be:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80038c0:	e07b      	b.n	80039ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	0018      	movs	r0, r3
 80038ca:	f000 f88d 	bl	80039e8 <I2C_IsErrorOccurred>
 80038ce:	1e03      	subs	r3, r0, #0
 80038d0:	d003      	beq.n	80038da <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80038d2:	2317      	movs	r3, #23
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	2201      	movs	r2, #1
 80038d8:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	2220      	movs	r2, #32
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d140      	bne.n	800396a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80038e8:	2117      	movs	r1, #23
 80038ea:	187b      	adds	r3, r7, r1
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d13b      	bne.n	800396a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	2204      	movs	r2, #4
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d106      	bne.n	800390e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003908:	187b      	adds	r3, r7, r1
 800390a:	2200      	movs	r2, #0
 800390c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	2210      	movs	r2, #16
 8003916:	4013      	ands	r3, r2
 8003918:	2b10      	cmp	r3, #16
 800391a:	d123      	bne.n	8003964 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2210      	movs	r2, #16
 8003922:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2204      	movs	r2, #4
 8003928:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2220      	movs	r2, #32
 8003930:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4929      	ldr	r1, [pc, #164]	@ (80039e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800393e:	400a      	ands	r2, r1
 8003940:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2241      	movs	r2, #65	@ 0x41
 8003946:	2120      	movs	r1, #32
 8003948:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2242      	movs	r2, #66	@ 0x42
 800394e:	2100      	movs	r1, #0
 8003950:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2240      	movs	r2, #64	@ 0x40
 8003956:	2100      	movs	r1, #0
 8003958:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800395a:	2317      	movs	r3, #23
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	2201      	movs	r2, #1
 8003960:	701a      	strb	r2, [r3, #0]
 8003962:	e002      	b.n	800396a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800396a:	f7fe fc6f 	bl	800224c <HAL_GetTick>
 800396e:	0002      	movs	r2, r0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	429a      	cmp	r2, r3
 8003978:	d302      	bcc.n	8003980 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d11c      	bne.n	80039ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003980:	2017      	movs	r0, #23
 8003982:	183b      	adds	r3, r7, r0
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d117      	bne.n	80039ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	2204      	movs	r2, #4
 8003992:	4013      	ands	r3, r2
 8003994:	2b04      	cmp	r3, #4
 8003996:	d010      	beq.n	80039ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399c:	2220      	movs	r2, #32
 800399e:	431a      	orrs	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2241      	movs	r2, #65	@ 0x41
 80039a8:	2120      	movs	r1, #32
 80039aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2240      	movs	r2, #64	@ 0x40
 80039b0:	2100      	movs	r1, #0
 80039b2:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80039b4:	183b      	adds	r3, r7, r0
 80039b6:	2201      	movs	r2, #1
 80039b8:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	2204      	movs	r2, #4
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d005      	beq.n	80039d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80039c8:	2317      	movs	r3, #23
 80039ca:	18fb      	adds	r3, r7, r3
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d100      	bne.n	80039d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80039d2:	e776      	b.n	80038c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80039d4:	2317      	movs	r3, #23
 80039d6:	18fb      	adds	r3, r7, r3
 80039d8:	781b      	ldrb	r3, [r3, #0]
}
 80039da:	0018      	movs	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	b006      	add	sp, #24
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	46c0      	nop			@ (mov r8, r8)
 80039e4:	fe00e800 	.word	0xfe00e800

080039e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	@ 0x28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f4:	2327      	movs	r3, #39	@ 0x27
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2210      	movs	r2, #16
 8003a10:	4013      	ands	r3, r2
 8003a12:	d100      	bne.n	8003a16 <I2C_IsErrorOccurred+0x2e>
 8003a14:	e079      	b.n	8003b0a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2210      	movs	r2, #16
 8003a1c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a1e:	e057      	b.n	8003ad0 <I2C_IsErrorOccurred+0xe8>
 8003a20:	2227      	movs	r2, #39	@ 0x27
 8003a22:	18bb      	adds	r3, r7, r2
 8003a24:	18ba      	adds	r2, r7, r2
 8003a26:	7812      	ldrb	r2, [r2, #0]
 8003a28:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	d04f      	beq.n	8003ad0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a30:	f7fe fc0c 	bl	800224c <HAL_GetTick>
 8003a34:	0002      	movs	r2, r0
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d302      	bcc.n	8003a46 <I2C_IsErrorOccurred+0x5e>
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d144      	bne.n	8003ad0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	2380      	movs	r3, #128	@ 0x80
 8003a4e:	01db      	lsls	r3, r3, #7
 8003a50:	4013      	ands	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a54:	2013      	movs	r0, #19
 8003a56:	183b      	adds	r3, r7, r0
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	2142      	movs	r1, #66	@ 0x42
 8003a5c:	5c52      	ldrb	r2, [r2, r1]
 8003a5e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	2380      	movs	r3, #128	@ 0x80
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	2380      	movs	r3, #128	@ 0x80
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d126      	bne.n	8003ac2 <I2C_IsErrorOccurred+0xda>
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	2380      	movs	r3, #128	@ 0x80
 8003a78:	01db      	lsls	r3, r3, #7
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d021      	beq.n	8003ac2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003a7e:	183b      	adds	r3, r7, r0
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	d01d      	beq.n	8003ac2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2180      	movs	r1, #128	@ 0x80
 8003a92:	01c9      	lsls	r1, r1, #7
 8003a94:	430a      	orrs	r2, r1
 8003a96:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a98:	f7fe fbd8 	bl	800224c <HAL_GetTick>
 8003a9c:	0003      	movs	r3, r0
 8003a9e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aa0:	e00f      	b.n	8003ac2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003aa2:	f7fe fbd3 	bl	800224c <HAL_GetTick>
 8003aa6:	0002      	movs	r2, r0
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b19      	cmp	r3, #25
 8003aae:	d908      	bls.n	8003ac2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ab8:	2327      	movs	r3, #39	@ 0x27
 8003aba:	18fb      	adds	r3, r7, r3
 8003abc:	2201      	movs	r2, #1
 8003abe:	701a      	strb	r2, [r3, #0]

              break;
 8003ac0:	e006      	b.n	8003ad0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d1e8      	bne.n	8003aa2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d004      	beq.n	8003ae8 <I2C_IsErrorOccurred+0x100>
 8003ade:	2327      	movs	r3, #39	@ 0x27
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d09b      	beq.n	8003a20 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ae8:	2327      	movs	r3, #39	@ 0x27
 8003aea:	18fb      	adds	r3, r7, r3
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d103      	bne.n	8003afa <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2220      	movs	r2, #32
 8003af8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	2204      	movs	r2, #4
 8003afe:	4313      	orrs	r3, r2
 8003b00:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b02:	2327      	movs	r3, #39	@ 0x27
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	2201      	movs	r2, #1
 8003b08:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	2380      	movs	r3, #128	@ 0x80
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d00c      	beq.n	8003b36 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	4313      	orrs	r3, r2
 8003b22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2280      	movs	r2, #128	@ 0x80
 8003b2a:	0052      	lsls	r2, r2, #1
 8003b2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b2e:	2327      	movs	r3, #39	@ 0x27
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	2201      	movs	r2, #1
 8003b34:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	2380      	movs	r3, #128	@ 0x80
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d00c      	beq.n	8003b5a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	2208      	movs	r2, #8
 8003b44:	4313      	orrs	r3, r2
 8003b46:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2280      	movs	r2, #128	@ 0x80
 8003b4e:	00d2      	lsls	r2, r2, #3
 8003b50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b52:	2327      	movs	r3, #39	@ 0x27
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	2201      	movs	r2, #1
 8003b58:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	2380      	movs	r3, #128	@ 0x80
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4013      	ands	r3, r2
 8003b62:	d00c      	beq.n	8003b7e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	2202      	movs	r2, #2
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2280      	movs	r2, #128	@ 0x80
 8003b72:	0092      	lsls	r2, r2, #2
 8003b74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b76:	2327      	movs	r3, #39	@ 0x27
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003b7e:	2327      	movs	r3, #39	@ 0x27
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01d      	beq.n	8003bc4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f7ff fd8a 	bl	80036a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	490e      	ldr	r1, [pc, #56]	@ (8003bd4 <I2C_IsErrorOccurred+0x1ec>)
 8003b9c:	400a      	ands	r2, r1
 8003b9e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2241      	movs	r2, #65	@ 0x41
 8003bb0:	2120      	movs	r1, #32
 8003bb2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2242      	movs	r2, #66	@ 0x42
 8003bb8:	2100      	movs	r1, #0
 8003bba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2240      	movs	r2, #64	@ 0x40
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003bc4:	2327      	movs	r3, #39	@ 0x27
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	781b      	ldrb	r3, [r3, #0]
}
 8003bca:	0018      	movs	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b00a      	add	sp, #40	@ 0x28
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	fe00e800 	.word	0xfe00e800

08003bd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bd8:	b590      	push	{r4, r7, lr}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	0008      	movs	r0, r1
 8003be2:	0011      	movs	r1, r2
 8003be4:	607b      	str	r3, [r7, #4]
 8003be6:	240a      	movs	r4, #10
 8003be8:	193b      	adds	r3, r7, r4
 8003bea:	1c02      	adds	r2, r0, #0
 8003bec:	801a      	strh	r2, [r3, #0]
 8003bee:	2009      	movs	r0, #9
 8003bf0:	183b      	adds	r3, r7, r0
 8003bf2:	1c0a      	adds	r2, r1, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bf6:	193b      	adds	r3, r7, r4
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	059b      	lsls	r3, r3, #22
 8003bfc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bfe:	183b      	adds	r3, r7, r0
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	0419      	lsls	r1, r3, #16
 8003c04:	23ff      	movs	r3, #255	@ 0xff
 8003c06:	041b      	lsls	r3, r3, #16
 8003c08:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c0a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c12:	4313      	orrs	r3, r2
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	085b      	lsrs	r3, r3, #1
 8003c18:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c22:	0d51      	lsrs	r1, r2, #21
 8003c24:	2280      	movs	r2, #128	@ 0x80
 8003c26:	00d2      	lsls	r2, r2, #3
 8003c28:	400a      	ands	r2, r1
 8003c2a:	4907      	ldr	r1, [pc, #28]	@ (8003c48 <I2C_TransferConfig+0x70>)
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	43d2      	mvns	r2, r2
 8003c30:	401a      	ands	r2, r3
 8003c32:	0011      	movs	r1, r2
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b007      	add	sp, #28
 8003c44:	bd90      	pop	{r4, r7, pc}
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	03ff63ff 	.word	0x03ff63ff

08003c4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2241      	movs	r2, #65	@ 0x41
 8003c5a:	5c9b      	ldrb	r3, [r3, r2]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d138      	bne.n	8003cd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2240      	movs	r2, #64	@ 0x40
 8003c66:	5c9b      	ldrb	r3, [r3, r2]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e032      	b.n	8003cd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2240      	movs	r2, #64	@ 0x40
 8003c74:	2101      	movs	r1, #1
 8003c76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2241      	movs	r2, #65	@ 0x41
 8003c7c:	2124      	movs	r1, #36	@ 0x24
 8003c7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	438a      	bics	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4911      	ldr	r1, [pc, #68]	@ (8003ce0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003c9c:	400a      	ands	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6819      	ldr	r1, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2101      	movs	r1, #1
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2241      	movs	r2, #65	@ 0x41
 8003cc4:	2120      	movs	r1, #32
 8003cc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2240      	movs	r2, #64	@ 0x40
 8003ccc:	2100      	movs	r1, #0
 8003cce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e000      	b.n	8003cd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cd4:	2302      	movs	r3, #2
  }
}
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b002      	add	sp, #8
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	46c0      	nop			@ (mov r8, r8)
 8003ce0:	ffffefff 	.word	0xffffefff

08003ce4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2241      	movs	r2, #65	@ 0x41
 8003cf2:	5c9b      	ldrb	r3, [r3, r2]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d139      	bne.n	8003d6e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2240      	movs	r2, #64	@ 0x40
 8003cfe:	5c9b      	ldrb	r3, [r3, r2]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e033      	b.n	8003d70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2240      	movs	r2, #64	@ 0x40
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2241      	movs	r2, #65	@ 0x41
 8003d14:	2124      	movs	r1, #36	@ 0x24
 8003d16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2101      	movs	r1, #1
 8003d24:	438a      	bics	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4a11      	ldr	r2, [pc, #68]	@ (8003d78 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2101      	movs	r1, #1
 8003d56:	430a      	orrs	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2241      	movs	r2, #65	@ 0x41
 8003d5e:	2120      	movs	r1, #32
 8003d60:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2240      	movs	r2, #64	@ 0x40
 8003d66:	2100      	movs	r1, #0
 8003d68:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e000      	b.n	8003d70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d6e:	2302      	movs	r3, #2
  }
}
 8003d70:	0018      	movs	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b004      	add	sp, #16
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	fffff0ff 	.word	0xfffff0ff

08003d7c <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d80:	4b04      	ldr	r3, [pc, #16]	@ (8003d94 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	4b03      	ldr	r3, [pc, #12]	@ (8003d94 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003d86:	2180      	movs	r1, #128	@ 0x80
 8003d88:	0049      	lsls	r1, r1, #1
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	601a      	str	r2, [r3, #0]
}
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40007000 	.word	0x40007000

08003d98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003da0:	4b19      	ldr	r3, [pc, #100]	@ (8003e08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a19      	ldr	r2, [pc, #100]	@ (8003e0c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	0019      	movs	r1, r3
 8003daa:	4b17      	ldr	r3, [pc, #92]	@ (8003e08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	2380      	movs	r3, #128	@ 0x80
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d11f      	bne.n	8003dfc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003dbc:	4b14      	ldr	r3, [pc, #80]	@ (8003e10 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	0013      	movs	r3, r2
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	189b      	adds	r3, r3, r2
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	4912      	ldr	r1, [pc, #72]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f7fc f99a 	bl	8000104 <__udivsi3>
 8003dd0:	0003      	movs	r3, r0
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dd6:	e008      	b.n	8003dea <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	e001      	b.n	8003dea <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e009      	b.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dea:	4b07      	ldr	r3, [pc, #28]	@ (8003e08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003dec:	695a      	ldr	r2, [r3, #20]
 8003dee:	2380      	movs	r3, #128	@ 0x80
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	401a      	ands	r2, r3
 8003df4:	2380      	movs	r3, #128	@ 0x80
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d0ed      	beq.n	8003dd8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	0018      	movs	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b004      	add	sp, #16
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	46c0      	nop			@ (mov r8, r8)
 8003e08:	40007000 	.word	0x40007000
 8003e0c:	fffff9ff 	.word	0xfffff9ff
 8003e10:	20000048 	.word	0x20000048
 8003e14:	000f4240 	.word	0x000f4240

08003e18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e2fe      	b.n	8004428 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	4013      	ands	r3, r2
 8003e32:	d100      	bne.n	8003e36 <HAL_RCC_OscConfig+0x1e>
 8003e34:	e07c      	b.n	8003f30 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e36:	4bc3      	ldr	r3, [pc, #780]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2238      	movs	r2, #56	@ 0x38
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e40:	4bc0      	ldr	r3, [pc, #768]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	2203      	movs	r2, #3
 8003e46:	4013      	ands	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	2b10      	cmp	r3, #16
 8003e4e:	d102      	bne.n	8003e56 <HAL_RCC_OscConfig+0x3e>
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d002      	beq.n	8003e5c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d10b      	bne.n	8003e74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e5c:	4bb9      	ldr	r3, [pc, #740]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	2380      	movs	r3, #128	@ 0x80
 8003e62:	029b      	lsls	r3, r3, #10
 8003e64:	4013      	ands	r3, r2
 8003e66:	d062      	beq.n	8003f2e <HAL_RCC_OscConfig+0x116>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d15e      	bne.n	8003f2e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e2d9      	b.n	8004428 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	2380      	movs	r3, #128	@ 0x80
 8003e7a:	025b      	lsls	r3, r3, #9
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d107      	bne.n	8003e90 <HAL_RCC_OscConfig+0x78>
 8003e80:	4bb0      	ldr	r3, [pc, #704]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	4baf      	ldr	r3, [pc, #700]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003e86:	2180      	movs	r1, #128	@ 0x80
 8003e88:	0249      	lsls	r1, r1, #9
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	e020      	b.n	8003ed2 <HAL_RCC_OscConfig+0xba>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	23a0      	movs	r3, #160	@ 0xa0
 8003e96:	02db      	lsls	r3, r3, #11
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d10e      	bne.n	8003eba <HAL_RCC_OscConfig+0xa2>
 8003e9c:	4ba9      	ldr	r3, [pc, #676]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	4ba8      	ldr	r3, [pc, #672]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003ea2:	2180      	movs	r1, #128	@ 0x80
 8003ea4:	02c9      	lsls	r1, r1, #11
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	4ba6      	ldr	r3, [pc, #664]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	4ba5      	ldr	r3, [pc, #660]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003eb0:	2180      	movs	r1, #128	@ 0x80
 8003eb2:	0249      	lsls	r1, r1, #9
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	e00b      	b.n	8003ed2 <HAL_RCC_OscConfig+0xba>
 8003eba:	4ba2      	ldr	r3, [pc, #648]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4ba1      	ldr	r3, [pc, #644]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003ec0:	49a1      	ldr	r1, [pc, #644]	@ (8004148 <HAL_RCC_OscConfig+0x330>)
 8003ec2:	400a      	ands	r2, r1
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	4b9f      	ldr	r3, [pc, #636]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	4b9e      	ldr	r3, [pc, #632]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003ecc:	499f      	ldr	r1, [pc, #636]	@ (800414c <HAL_RCC_OscConfig+0x334>)
 8003ece:	400a      	ands	r2, r1
 8003ed0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d014      	beq.n	8003f04 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eda:	f7fe f9b7 	bl	800224c <HAL_GetTick>
 8003ede:	0003      	movs	r3, r0
 8003ee0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee4:	f7fe f9b2 	bl	800224c <HAL_GetTick>
 8003ee8:	0002      	movs	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b64      	cmp	r3, #100	@ 0x64
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e298      	b.n	8004428 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ef6:	4b93      	ldr	r3, [pc, #588]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	2380      	movs	r3, #128	@ 0x80
 8003efc:	029b      	lsls	r3, r3, #10
 8003efe:	4013      	ands	r3, r2
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0xcc>
 8003f02:	e015      	b.n	8003f30 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f04:	f7fe f9a2 	bl	800224c <HAL_GetTick>
 8003f08:	0003      	movs	r3, r0
 8003f0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f0e:	f7fe f99d 	bl	800224c <HAL_GetTick>
 8003f12:	0002      	movs	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b64      	cmp	r3, #100	@ 0x64
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e283      	b.n	8004428 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f20:	4b88      	ldr	r3, [pc, #544]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	2380      	movs	r3, #128	@ 0x80
 8003f26:	029b      	lsls	r3, r3, #10
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d1f0      	bne.n	8003f0e <HAL_RCC_OscConfig+0xf6>
 8003f2c:	e000      	b.n	8003f30 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f2e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2202      	movs	r2, #2
 8003f36:	4013      	ands	r3, r2
 8003f38:	d100      	bne.n	8003f3c <HAL_RCC_OscConfig+0x124>
 8003f3a:	e099      	b.n	8004070 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f3c:	4b81      	ldr	r3, [pc, #516]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2238      	movs	r2, #56	@ 0x38
 8003f42:	4013      	ands	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f46:	4b7f      	ldr	r3, [pc, #508]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	2b10      	cmp	r3, #16
 8003f54:	d102      	bne.n	8003f5c <HAL_RCC_OscConfig+0x144>
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d002      	beq.n	8003f62 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d135      	bne.n	8003fce <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f62:	4b78      	ldr	r3, [pc, #480]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	2380      	movs	r3, #128	@ 0x80
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d005      	beq.n	8003f7a <HAL_RCC_OscConfig+0x162>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e256      	b.n	8004428 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7a:	4b72      	ldr	r3, [pc, #456]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4a74      	ldr	r2, [pc, #464]	@ (8004150 <HAL_RCC_OscConfig+0x338>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	0019      	movs	r1, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	021a      	lsls	r2, r3, #8
 8003f8a:	4b6e      	ldr	r3, [pc, #440]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d112      	bne.n	8003fbc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f96:	4b6b      	ldr	r3, [pc, #428]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a6e      	ldr	r2, [pc, #440]	@ (8004154 <HAL_RCC_OscConfig+0x33c>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	0019      	movs	r1, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	4b67      	ldr	r3, [pc, #412]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003faa:	4b66      	ldr	r3, [pc, #408]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	0adb      	lsrs	r3, r3, #11
 8003fb0:	2207      	movs	r2, #7
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	4a68      	ldr	r2, [pc, #416]	@ (8004158 <HAL_RCC_OscConfig+0x340>)
 8003fb6:	40da      	lsrs	r2, r3
 8003fb8:	4b68      	ldr	r3, [pc, #416]	@ (800415c <HAL_RCC_OscConfig+0x344>)
 8003fba:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fbc:	4b68      	ldr	r3, [pc, #416]	@ (8004160 <HAL_RCC_OscConfig+0x348>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f7fe f8e7 	bl	8002194 <HAL_InitTick>
 8003fc6:	1e03      	subs	r3, r0, #0
 8003fc8:	d051      	beq.n	800406e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e22c      	b.n	8004428 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d030      	beq.n	8004038 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003fd6:	4b5b      	ldr	r3, [pc, #364]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a5e      	ldr	r2, [pc, #376]	@ (8004154 <HAL_RCC_OscConfig+0x33c>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	0019      	movs	r1, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	4b57      	ldr	r3, [pc, #348]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003fea:	4b56      	ldr	r3, [pc, #344]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b55      	ldr	r3, [pc, #340]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8003ff0:	2180      	movs	r1, #128	@ 0x80
 8003ff2:	0049      	lsls	r1, r1, #1
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fe f928 	bl	800224c <HAL_GetTick>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004002:	f7fe f923 	bl	800224c <HAL_GetTick>
 8004006:	0002      	movs	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e209      	b.n	8004428 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004014:	4b4b      	ldr	r3, [pc, #300]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	2380      	movs	r3, #128	@ 0x80
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4013      	ands	r3, r2
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004020:	4b48      	ldr	r3, [pc, #288]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	4a4a      	ldr	r2, [pc, #296]	@ (8004150 <HAL_RCC_OscConfig+0x338>)
 8004026:	4013      	ands	r3, r2
 8004028:	0019      	movs	r1, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	021a      	lsls	r2, r3, #8
 8004030:	4b44      	ldr	r3, [pc, #272]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	e01b      	b.n	8004070 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004038:	4b42      	ldr	r3, [pc, #264]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4b41      	ldr	r3, [pc, #260]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 800403e:	4949      	ldr	r1, [pc, #292]	@ (8004164 <HAL_RCC_OscConfig+0x34c>)
 8004040:	400a      	ands	r2, r1
 8004042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fe f902 	bl	800224c <HAL_GetTick>
 8004048:	0003      	movs	r3, r0
 800404a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404e:	f7fe f8fd 	bl	800224c <HAL_GetTick>
 8004052:	0002      	movs	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e1e3      	b.n	8004428 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004060:	4b38      	ldr	r3, [pc, #224]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	2380      	movs	r3, #128	@ 0x80
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4013      	ands	r3, r2
 800406a:	d1f0      	bne.n	800404e <HAL_RCC_OscConfig+0x236>
 800406c:	e000      	b.n	8004070 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800406e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2208      	movs	r2, #8
 8004076:	4013      	ands	r3, r2
 8004078:	d047      	beq.n	800410a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800407a:	4b32      	ldr	r3, [pc, #200]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2238      	movs	r2, #56	@ 0x38
 8004080:	4013      	ands	r3, r2
 8004082:	2b18      	cmp	r3, #24
 8004084:	d10a      	bne.n	800409c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004086:	4b2f      	ldr	r3, [pc, #188]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8004088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800408a:	2202      	movs	r2, #2
 800408c:	4013      	ands	r3, r2
 800408e:	d03c      	beq.n	800410a <HAL_RCC_OscConfig+0x2f2>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d138      	bne.n	800410a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e1c5      	b.n	8004428 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d019      	beq.n	80040d8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80040a4:	4b27      	ldr	r3, [pc, #156]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 80040a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80040a8:	4b26      	ldr	r3, [pc, #152]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 80040aa:	2101      	movs	r1, #1
 80040ac:	430a      	orrs	r2, r1
 80040ae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b0:	f7fe f8cc 	bl	800224c <HAL_GetTick>
 80040b4:	0003      	movs	r3, r0
 80040b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ba:	f7fe f8c7 	bl	800224c <HAL_GetTick>
 80040be:	0002      	movs	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e1ad      	b.n	8004428 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 80040ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d0:	2202      	movs	r2, #2
 80040d2:	4013      	ands	r3, r2
 80040d4:	d0f1      	beq.n	80040ba <HAL_RCC_OscConfig+0x2a2>
 80040d6:	e018      	b.n	800410a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80040d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 80040da:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80040dc:	4b19      	ldr	r3, [pc, #100]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 80040de:	2101      	movs	r1, #1
 80040e0:	438a      	bics	r2, r1
 80040e2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fe f8b2 	bl	800224c <HAL_GetTick>
 80040e8:	0003      	movs	r3, r0
 80040ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ee:	f7fe f8ad 	bl	800224c <HAL_GetTick>
 80040f2:	0002      	movs	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e193      	b.n	8004428 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004100:	4b10      	ldr	r3, [pc, #64]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8004102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004104:	2202      	movs	r2, #2
 8004106:	4013      	ands	r3, r2
 8004108:	d1f1      	bne.n	80040ee <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2204      	movs	r2, #4
 8004110:	4013      	ands	r3, r2
 8004112:	d100      	bne.n	8004116 <HAL_RCC_OscConfig+0x2fe>
 8004114:	e0c6      	b.n	80042a4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004116:	231f      	movs	r3, #31
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	2200      	movs	r2, #0
 800411c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800411e:	4b09      	ldr	r3, [pc, #36]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2238      	movs	r2, #56	@ 0x38
 8004124:	4013      	ands	r3, r2
 8004126:	2b20      	cmp	r3, #32
 8004128:	d11e      	bne.n	8004168 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800412a:	4b06      	ldr	r3, [pc, #24]	@ (8004144 <HAL_RCC_OscConfig+0x32c>)
 800412c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800412e:	2202      	movs	r2, #2
 8004130:	4013      	ands	r3, r2
 8004132:	d100      	bne.n	8004136 <HAL_RCC_OscConfig+0x31e>
 8004134:	e0b6      	b.n	80042a4 <HAL_RCC_OscConfig+0x48c>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d000      	beq.n	8004140 <HAL_RCC_OscConfig+0x328>
 800413e:	e0b1      	b.n	80042a4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e171      	b.n	8004428 <HAL_RCC_OscConfig+0x610>
 8004144:	40021000 	.word	0x40021000
 8004148:	fffeffff 	.word	0xfffeffff
 800414c:	fffbffff 	.word	0xfffbffff
 8004150:	ffff80ff 	.word	0xffff80ff
 8004154:	ffffc7ff 	.word	0xffffc7ff
 8004158:	00f42400 	.word	0x00f42400
 800415c:	20000048 	.word	0x20000048
 8004160:	2000004c 	.word	0x2000004c
 8004164:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004168:	4bb1      	ldr	r3, [pc, #708]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 800416a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800416c:	2380      	movs	r3, #128	@ 0x80
 800416e:	055b      	lsls	r3, r3, #21
 8004170:	4013      	ands	r3, r2
 8004172:	d101      	bne.n	8004178 <HAL_RCC_OscConfig+0x360>
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <HAL_RCC_OscConfig+0x362>
 8004178:	2300      	movs	r3, #0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d011      	beq.n	80041a2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800417e:	4bac      	ldr	r3, [pc, #688]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 8004180:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004182:	4bab      	ldr	r3, [pc, #684]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 8004184:	2180      	movs	r1, #128	@ 0x80
 8004186:	0549      	lsls	r1, r1, #21
 8004188:	430a      	orrs	r2, r1
 800418a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800418c:	4ba8      	ldr	r3, [pc, #672]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 800418e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004190:	2380      	movs	r3, #128	@ 0x80
 8004192:	055b      	lsls	r3, r3, #21
 8004194:	4013      	ands	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800419a:	231f      	movs	r3, #31
 800419c:	18fb      	adds	r3, r7, r3
 800419e:	2201      	movs	r2, #1
 80041a0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a2:	4ba4      	ldr	r3, [pc, #656]	@ (8004434 <HAL_RCC_OscConfig+0x61c>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	2380      	movs	r3, #128	@ 0x80
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	4013      	ands	r3, r2
 80041ac:	d11a      	bne.n	80041e4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ae:	4ba1      	ldr	r3, [pc, #644]	@ (8004434 <HAL_RCC_OscConfig+0x61c>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	4ba0      	ldr	r3, [pc, #640]	@ (8004434 <HAL_RCC_OscConfig+0x61c>)
 80041b4:	2180      	movs	r1, #128	@ 0x80
 80041b6:	0049      	lsls	r1, r1, #1
 80041b8:	430a      	orrs	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80041bc:	f7fe f846 	bl	800224c <HAL_GetTick>
 80041c0:	0003      	movs	r3, r0
 80041c2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c6:	f7fe f841 	bl	800224c <HAL_GetTick>
 80041ca:	0002      	movs	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e127      	b.n	8004428 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d8:	4b96      	ldr	r3, [pc, #600]	@ (8004434 <HAL_RCC_OscConfig+0x61c>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	2380      	movs	r3, #128	@ 0x80
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	4013      	ands	r3, r2
 80041e2:	d0f0      	beq.n	80041c6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d106      	bne.n	80041fa <HAL_RCC_OscConfig+0x3e2>
 80041ec:	4b90      	ldr	r3, [pc, #576]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 80041ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80041f0:	4b8f      	ldr	r3, [pc, #572]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 80041f2:	2101      	movs	r1, #1
 80041f4:	430a      	orrs	r2, r1
 80041f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80041f8:	e01c      	b.n	8004234 <HAL_RCC_OscConfig+0x41c>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b05      	cmp	r3, #5
 8004200:	d10c      	bne.n	800421c <HAL_RCC_OscConfig+0x404>
 8004202:	4b8b      	ldr	r3, [pc, #556]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 8004204:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004206:	4b8a      	ldr	r3, [pc, #552]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 8004208:	2104      	movs	r1, #4
 800420a:	430a      	orrs	r2, r1
 800420c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800420e:	4b88      	ldr	r3, [pc, #544]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 8004210:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004212:	4b87      	ldr	r3, [pc, #540]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 8004214:	2101      	movs	r1, #1
 8004216:	430a      	orrs	r2, r1
 8004218:	65da      	str	r2, [r3, #92]	@ 0x5c
 800421a:	e00b      	b.n	8004234 <HAL_RCC_OscConfig+0x41c>
 800421c:	4b84      	ldr	r3, [pc, #528]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 800421e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004220:	4b83      	ldr	r3, [pc, #524]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 8004222:	2101      	movs	r1, #1
 8004224:	438a      	bics	r2, r1
 8004226:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004228:	4b81      	ldr	r3, [pc, #516]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 800422a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800422c:	4b80      	ldr	r3, [pc, #512]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 800422e:	2104      	movs	r1, #4
 8004230:	438a      	bics	r2, r1
 8004232:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d014      	beq.n	8004266 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423c:	f7fe f806 	bl	800224c <HAL_GetTick>
 8004240:	0003      	movs	r3, r0
 8004242:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004244:	e009      	b.n	800425a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004246:	f7fe f801 	bl	800224c <HAL_GetTick>
 800424a:	0002      	movs	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	4a79      	ldr	r2, [pc, #484]	@ (8004438 <HAL_RCC_OscConfig+0x620>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e0e6      	b.n	8004428 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800425a:	4b75      	ldr	r3, [pc, #468]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 800425c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425e:	2202      	movs	r2, #2
 8004260:	4013      	ands	r3, r2
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0x42e>
 8004264:	e013      	b.n	800428e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004266:	f7fd fff1 	bl	800224c <HAL_GetTick>
 800426a:	0003      	movs	r3, r0
 800426c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800426e:	e009      	b.n	8004284 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004270:	f7fd ffec 	bl	800224c <HAL_GetTick>
 8004274:	0002      	movs	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	4a6f      	ldr	r2, [pc, #444]	@ (8004438 <HAL_RCC_OscConfig+0x620>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e0d1      	b.n	8004428 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004284:	4b6a      	ldr	r3, [pc, #424]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 8004286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004288:	2202      	movs	r2, #2
 800428a:	4013      	ands	r3, r2
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800428e:	231f      	movs	r3, #31
 8004290:	18fb      	adds	r3, r7, r3
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d105      	bne.n	80042a4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004298:	4b65      	ldr	r3, [pc, #404]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 800429a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800429c:	4b64      	ldr	r3, [pc, #400]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 800429e:	4967      	ldr	r1, [pc, #412]	@ (800443c <HAL_RCC_OscConfig+0x624>)
 80042a0:	400a      	ands	r2, r1
 80042a2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d100      	bne.n	80042ae <HAL_RCC_OscConfig+0x496>
 80042ac:	e0bb      	b.n	8004426 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042ae:	4b60      	ldr	r3, [pc, #384]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2238      	movs	r2, #56	@ 0x38
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b10      	cmp	r3, #16
 80042b8:	d100      	bne.n	80042bc <HAL_RCC_OscConfig+0x4a4>
 80042ba:	e07b      	b.n	80043b4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d156      	bne.n	8004372 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c4:	4b5a      	ldr	r3, [pc, #360]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	4b59      	ldr	r3, [pc, #356]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 80042ca:	495d      	ldr	r1, [pc, #372]	@ (8004440 <HAL_RCC_OscConfig+0x628>)
 80042cc:	400a      	ands	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d0:	f7fd ffbc 	bl	800224c <HAL_GetTick>
 80042d4:	0003      	movs	r3, r0
 80042d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042da:	f7fd ffb7 	bl	800224c <HAL_GetTick>
 80042de:	0002      	movs	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e09d      	b.n	8004428 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ec:	4b50      	ldr	r3, [pc, #320]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	2380      	movs	r3, #128	@ 0x80
 80042f2:	049b      	lsls	r3, r3, #18
 80042f4:	4013      	ands	r3, r2
 80042f6:	d1f0      	bne.n	80042da <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042f8:	4b4d      	ldr	r3, [pc, #308]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4a51      	ldr	r2, [pc, #324]	@ (8004444 <HAL_RCC_OscConfig+0x62c>)
 80042fe:	4013      	ands	r3, r2
 8004300:	0019      	movs	r1, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1a      	ldr	r2, [r3, #32]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004324:	431a      	orrs	r2, r3
 8004326:	4b42      	ldr	r3, [pc, #264]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 8004328:	430a      	orrs	r2, r1
 800432a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800432c:	4b40      	ldr	r3, [pc, #256]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b3f      	ldr	r3, [pc, #252]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 8004332:	2180      	movs	r1, #128	@ 0x80
 8004334:	0449      	lsls	r1, r1, #17
 8004336:	430a      	orrs	r2, r1
 8004338:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800433a:	4b3d      	ldr	r3, [pc, #244]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	4b3c      	ldr	r3, [pc, #240]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 8004340:	2180      	movs	r1, #128	@ 0x80
 8004342:	0549      	lsls	r1, r1, #21
 8004344:	430a      	orrs	r2, r1
 8004346:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fd ff80 	bl	800224c <HAL_GetTick>
 800434c:	0003      	movs	r3, r0
 800434e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004352:	f7fd ff7b 	bl	800224c <HAL_GetTick>
 8004356:	0002      	movs	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e061      	b.n	8004428 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004364:	4b32      	ldr	r3, [pc, #200]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	2380      	movs	r3, #128	@ 0x80
 800436a:	049b      	lsls	r3, r3, #18
 800436c:	4013      	ands	r3, r2
 800436e:	d0f0      	beq.n	8004352 <HAL_RCC_OscConfig+0x53a>
 8004370:	e059      	b.n	8004426 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004372:	4b2f      	ldr	r3, [pc, #188]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	4b2e      	ldr	r3, [pc, #184]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 8004378:	4931      	ldr	r1, [pc, #196]	@ (8004440 <HAL_RCC_OscConfig+0x628>)
 800437a:	400a      	ands	r2, r1
 800437c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437e:	f7fd ff65 	bl	800224c <HAL_GetTick>
 8004382:	0003      	movs	r3, r0
 8004384:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004388:	f7fd ff60 	bl	800224c <HAL_GetTick>
 800438c:	0002      	movs	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e046      	b.n	8004428 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800439a:	4b25      	ldr	r3, [pc, #148]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	2380      	movs	r3, #128	@ 0x80
 80043a0:	049b      	lsls	r3, r3, #18
 80043a2:	4013      	ands	r3, r2
 80043a4:	d1f0      	bne.n	8004388 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80043a6:	4b22      	ldr	r3, [pc, #136]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	4b21      	ldr	r3, [pc, #132]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 80043ac:	4926      	ldr	r1, [pc, #152]	@ (8004448 <HAL_RCC_OscConfig+0x630>)
 80043ae:	400a      	ands	r2, r1
 80043b0:	60da      	str	r2, [r3, #12]
 80043b2:	e038      	b.n	8004426 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e033      	b.n	8004428 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80043c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004430 <HAL_RCC_OscConfig+0x618>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2203      	movs	r2, #3
 80043ca:	401a      	ands	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d126      	bne.n	8004422 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2270      	movs	r2, #112	@ 0x70
 80043d8:	401a      	ands	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043de:	429a      	cmp	r2, r3
 80043e0:	d11f      	bne.n	8004422 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	23fe      	movs	r3, #254	@ 0xfe
 80043e6:	01db      	lsls	r3, r3, #7
 80043e8:	401a      	ands	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ee:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d116      	bne.n	8004422 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	23f8      	movs	r3, #248	@ 0xf8
 80043f8:	039b      	lsls	r3, r3, #14
 80043fa:	401a      	ands	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004400:	429a      	cmp	r2, r3
 8004402:	d10e      	bne.n	8004422 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	23e0      	movs	r3, #224	@ 0xe0
 8004408:	051b      	lsls	r3, r3, #20
 800440a:	401a      	ands	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004410:	429a      	cmp	r2, r3
 8004412:	d106      	bne.n	8004422 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	0f5b      	lsrs	r3, r3, #29
 8004418:	075a      	lsls	r2, r3, #29
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800441e:	429a      	cmp	r2, r3
 8004420:	d001      	beq.n	8004426 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	0018      	movs	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	b008      	add	sp, #32
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40021000 	.word	0x40021000
 8004434:	40007000 	.word	0x40007000
 8004438:	00001388 	.word	0x00001388
 800443c:	efffffff 	.word	0xefffffff
 8004440:	feffffff 	.word	0xfeffffff
 8004444:	11c1808c 	.word	0x11c1808c
 8004448:	eefefffc 	.word	0xeefefffc

0800444c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0e9      	b.n	8004634 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004460:	4b76      	ldr	r3, [pc, #472]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2207      	movs	r2, #7
 8004466:	4013      	ands	r3, r2
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d91e      	bls.n	80044ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b73      	ldr	r3, [pc, #460]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2207      	movs	r2, #7
 8004474:	4393      	bics	r3, r2
 8004476:	0019      	movs	r1, r3
 8004478:	4b70      	ldr	r3, [pc, #448]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004480:	f7fd fee4 	bl	800224c <HAL_GetTick>
 8004484:	0003      	movs	r3, r0
 8004486:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004488:	e009      	b.n	800449e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800448a:	f7fd fedf 	bl	800224c <HAL_GetTick>
 800448e:	0002      	movs	r2, r0
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	4a6a      	ldr	r2, [pc, #424]	@ (8004640 <HAL_RCC_ClockConfig+0x1f4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d901      	bls.n	800449e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e0ca      	b.n	8004634 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800449e:	4b67      	ldr	r3, [pc, #412]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2207      	movs	r2, #7
 80044a4:	4013      	ands	r3, r2
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d1ee      	bne.n	800448a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2202      	movs	r2, #2
 80044b2:	4013      	ands	r3, r2
 80044b4:	d015      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2204      	movs	r2, #4
 80044bc:	4013      	ands	r3, r2
 80044be:	d006      	beq.n	80044ce <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80044c0:	4b60      	ldr	r3, [pc, #384]	@ (8004644 <HAL_RCC_ClockConfig+0x1f8>)
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	4b5f      	ldr	r3, [pc, #380]	@ (8004644 <HAL_RCC_ClockConfig+0x1f8>)
 80044c6:	21e0      	movs	r1, #224	@ 0xe0
 80044c8:	01c9      	lsls	r1, r1, #7
 80044ca:	430a      	orrs	r2, r1
 80044cc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ce:	4b5d      	ldr	r3, [pc, #372]	@ (8004644 <HAL_RCC_ClockConfig+0x1f8>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	4a5d      	ldr	r2, [pc, #372]	@ (8004648 <HAL_RCC_ClockConfig+0x1fc>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	0019      	movs	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	4b59      	ldr	r3, [pc, #356]	@ (8004644 <HAL_RCC_ClockConfig+0x1f8>)
 80044de:	430a      	orrs	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2201      	movs	r2, #1
 80044e8:	4013      	ands	r3, r2
 80044ea:	d057      	beq.n	800459c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d107      	bne.n	8004504 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044f4:	4b53      	ldr	r3, [pc, #332]	@ (8004644 <HAL_RCC_ClockConfig+0x1f8>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	2380      	movs	r3, #128	@ 0x80
 80044fa:	029b      	lsls	r3, r3, #10
 80044fc:	4013      	ands	r3, r2
 80044fe:	d12b      	bne.n	8004558 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e097      	b.n	8004634 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b02      	cmp	r3, #2
 800450a:	d107      	bne.n	800451c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800450c:	4b4d      	ldr	r3, [pc, #308]	@ (8004644 <HAL_RCC_ClockConfig+0x1f8>)
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	2380      	movs	r3, #128	@ 0x80
 8004512:	049b      	lsls	r3, r3, #18
 8004514:	4013      	ands	r3, r2
 8004516:	d11f      	bne.n	8004558 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e08b      	b.n	8004634 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d107      	bne.n	8004534 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004524:	4b47      	ldr	r3, [pc, #284]	@ (8004644 <HAL_RCC_ClockConfig+0x1f8>)
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	2380      	movs	r3, #128	@ 0x80
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	4013      	ands	r3, r2
 800452e:	d113      	bne.n	8004558 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e07f      	b.n	8004634 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b03      	cmp	r3, #3
 800453a:	d106      	bne.n	800454a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800453c:	4b41      	ldr	r3, [pc, #260]	@ (8004644 <HAL_RCC_ClockConfig+0x1f8>)
 800453e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004540:	2202      	movs	r2, #2
 8004542:	4013      	ands	r3, r2
 8004544:	d108      	bne.n	8004558 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e074      	b.n	8004634 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800454a:	4b3e      	ldr	r3, [pc, #248]	@ (8004644 <HAL_RCC_ClockConfig+0x1f8>)
 800454c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800454e:	2202      	movs	r2, #2
 8004550:	4013      	ands	r3, r2
 8004552:	d101      	bne.n	8004558 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e06d      	b.n	8004634 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004558:	4b3a      	ldr	r3, [pc, #232]	@ (8004644 <HAL_RCC_ClockConfig+0x1f8>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2207      	movs	r2, #7
 800455e:	4393      	bics	r3, r2
 8004560:	0019      	movs	r1, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	4b37      	ldr	r3, [pc, #220]	@ (8004644 <HAL_RCC_ClockConfig+0x1f8>)
 8004568:	430a      	orrs	r2, r1
 800456a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800456c:	f7fd fe6e 	bl	800224c <HAL_GetTick>
 8004570:	0003      	movs	r3, r0
 8004572:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004574:	e009      	b.n	800458a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004576:	f7fd fe69 	bl	800224c <HAL_GetTick>
 800457a:	0002      	movs	r2, r0
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	4a2f      	ldr	r2, [pc, #188]	@ (8004640 <HAL_RCC_ClockConfig+0x1f4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d901      	bls.n	800458a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e054      	b.n	8004634 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458a:	4b2e      	ldr	r3, [pc, #184]	@ (8004644 <HAL_RCC_ClockConfig+0x1f8>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2238      	movs	r2, #56	@ 0x38
 8004590:	401a      	ands	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	429a      	cmp	r2, r3
 800459a:	d1ec      	bne.n	8004576 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800459c:	4b27      	ldr	r3, [pc, #156]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2207      	movs	r2, #7
 80045a2:	4013      	ands	r3, r2
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d21e      	bcs.n	80045e8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045aa:	4b24      	ldr	r3, [pc, #144]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2207      	movs	r2, #7
 80045b0:	4393      	bics	r3, r2
 80045b2:	0019      	movs	r1, r3
 80045b4:	4b21      	ldr	r3, [pc, #132]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045bc:	f7fd fe46 	bl	800224c <HAL_GetTick>
 80045c0:	0003      	movs	r3, r0
 80045c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045c4:	e009      	b.n	80045da <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c6:	f7fd fe41 	bl	800224c <HAL_GetTick>
 80045ca:	0002      	movs	r2, r0
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004640 <HAL_RCC_ClockConfig+0x1f4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e02c      	b.n	8004634 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045da:	4b18      	ldr	r3, [pc, #96]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2207      	movs	r2, #7
 80045e0:	4013      	ands	r3, r2
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d1ee      	bne.n	80045c6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2204      	movs	r2, #4
 80045ee:	4013      	ands	r3, r2
 80045f0:	d009      	beq.n	8004606 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80045f2:	4b14      	ldr	r3, [pc, #80]	@ (8004644 <HAL_RCC_ClockConfig+0x1f8>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	4a15      	ldr	r2, [pc, #84]	@ (800464c <HAL_RCC_ClockConfig+0x200>)
 80045f8:	4013      	ands	r3, r2
 80045fa:	0019      	movs	r1, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	4b10      	ldr	r3, [pc, #64]	@ (8004644 <HAL_RCC_ClockConfig+0x1f8>)
 8004602:	430a      	orrs	r2, r1
 8004604:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004606:	f000 f829 	bl	800465c <HAL_RCC_GetSysClockFreq>
 800460a:	0001      	movs	r1, r0
 800460c:	4b0d      	ldr	r3, [pc, #52]	@ (8004644 <HAL_RCC_ClockConfig+0x1f8>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	0a1b      	lsrs	r3, r3, #8
 8004612:	220f      	movs	r2, #15
 8004614:	401a      	ands	r2, r3
 8004616:	4b0e      	ldr	r3, [pc, #56]	@ (8004650 <HAL_RCC_ClockConfig+0x204>)
 8004618:	0092      	lsls	r2, r2, #2
 800461a:	58d3      	ldr	r3, [r2, r3]
 800461c:	221f      	movs	r2, #31
 800461e:	4013      	ands	r3, r2
 8004620:	000a      	movs	r2, r1
 8004622:	40da      	lsrs	r2, r3
 8004624:	4b0b      	ldr	r3, [pc, #44]	@ (8004654 <HAL_RCC_ClockConfig+0x208>)
 8004626:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004628:	4b0b      	ldr	r3, [pc, #44]	@ (8004658 <HAL_RCC_ClockConfig+0x20c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	0018      	movs	r0, r3
 800462e:	f7fd fdb1 	bl	8002194 <HAL_InitTick>
 8004632:	0003      	movs	r3, r0
}
 8004634:	0018      	movs	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	b004      	add	sp, #16
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40022000 	.word	0x40022000
 8004640:	00001388 	.word	0x00001388
 8004644:	40021000 	.word	0x40021000
 8004648:	fffff0ff 	.word	0xfffff0ff
 800464c:	ffff8fff 	.word	0xffff8fff
 8004650:	08006490 	.word	0x08006490
 8004654:	20000048 	.word	0x20000048
 8004658:	2000004c 	.word	0x2000004c

0800465c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004662:	4b3c      	ldr	r3, [pc, #240]	@ (8004754 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	2238      	movs	r2, #56	@ 0x38
 8004668:	4013      	ands	r3, r2
 800466a:	d10f      	bne.n	800468c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800466c:	4b39      	ldr	r3, [pc, #228]	@ (8004754 <HAL_RCC_GetSysClockFreq+0xf8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	0adb      	lsrs	r3, r3, #11
 8004672:	2207      	movs	r2, #7
 8004674:	4013      	ands	r3, r2
 8004676:	2201      	movs	r2, #1
 8004678:	409a      	lsls	r2, r3
 800467a:	0013      	movs	r3, r2
 800467c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800467e:	6839      	ldr	r1, [r7, #0]
 8004680:	4835      	ldr	r0, [pc, #212]	@ (8004758 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004682:	f7fb fd3f 	bl	8000104 <__udivsi3>
 8004686:	0003      	movs	r3, r0
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	e05d      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800468c:	4b31      	ldr	r3, [pc, #196]	@ (8004754 <HAL_RCC_GetSysClockFreq+0xf8>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2238      	movs	r2, #56	@ 0x38
 8004692:	4013      	ands	r3, r2
 8004694:	2b08      	cmp	r3, #8
 8004696:	d102      	bne.n	800469e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004698:	4b30      	ldr	r3, [pc, #192]	@ (800475c <HAL_RCC_GetSysClockFreq+0x100>)
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	e054      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800469e:	4b2d      	ldr	r3, [pc, #180]	@ (8004754 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2238      	movs	r2, #56	@ 0x38
 80046a4:	4013      	ands	r3, r2
 80046a6:	2b10      	cmp	r3, #16
 80046a8:	d138      	bne.n	800471c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80046aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004754 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2203      	movs	r2, #3
 80046b0:	4013      	ands	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046b4:	4b27      	ldr	r3, [pc, #156]	@ (8004754 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	091b      	lsrs	r3, r3, #4
 80046ba:	2207      	movs	r2, #7
 80046bc:	4013      	ands	r3, r2
 80046be:	3301      	adds	r3, #1
 80046c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d10d      	bne.n	80046e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	4824      	ldr	r0, [pc, #144]	@ (800475c <HAL_RCC_GetSysClockFreq+0x100>)
 80046cc:	f7fb fd1a 	bl	8000104 <__udivsi3>
 80046d0:	0003      	movs	r3, r0
 80046d2:	0019      	movs	r1, r3
 80046d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004754 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	0a1b      	lsrs	r3, r3, #8
 80046da:	227f      	movs	r2, #127	@ 0x7f
 80046dc:	4013      	ands	r3, r2
 80046de:	434b      	muls	r3, r1
 80046e0:	617b      	str	r3, [r7, #20]
        break;
 80046e2:	e00d      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	481c      	ldr	r0, [pc, #112]	@ (8004758 <HAL_RCC_GetSysClockFreq+0xfc>)
 80046e8:	f7fb fd0c 	bl	8000104 <__udivsi3>
 80046ec:	0003      	movs	r3, r0
 80046ee:	0019      	movs	r1, r3
 80046f0:	4b18      	ldr	r3, [pc, #96]	@ (8004754 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	0a1b      	lsrs	r3, r3, #8
 80046f6:	227f      	movs	r2, #127	@ 0x7f
 80046f8:	4013      	ands	r3, r2
 80046fa:	434b      	muls	r3, r1
 80046fc:	617b      	str	r3, [r7, #20]
        break;
 80046fe:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004700:	4b14      	ldr	r3, [pc, #80]	@ (8004754 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	0f5b      	lsrs	r3, r3, #29
 8004706:	2207      	movs	r2, #7
 8004708:	4013      	ands	r3, r2
 800470a:	3301      	adds	r3, #1
 800470c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	6978      	ldr	r0, [r7, #20]
 8004712:	f7fb fcf7 	bl	8000104 <__udivsi3>
 8004716:	0003      	movs	r3, r0
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	e015      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800471c:	4b0d      	ldr	r3, [pc, #52]	@ (8004754 <HAL_RCC_GetSysClockFreq+0xf8>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	2238      	movs	r2, #56	@ 0x38
 8004722:	4013      	ands	r3, r2
 8004724:	2b20      	cmp	r3, #32
 8004726:	d103      	bne.n	8004730 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004728:	2380      	movs	r3, #128	@ 0x80
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	e00b      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004730:	4b08      	ldr	r3, [pc, #32]	@ (8004754 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2238      	movs	r2, #56	@ 0x38
 8004736:	4013      	ands	r3, r2
 8004738:	2b18      	cmp	r3, #24
 800473a:	d103      	bne.n	8004744 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800473c:	23fa      	movs	r3, #250	@ 0xfa
 800473e:	01db      	lsls	r3, r3, #7
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	e001      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004748:	693b      	ldr	r3, [r7, #16]
}
 800474a:	0018      	movs	r0, r3
 800474c:	46bd      	mov	sp, r7
 800474e:	b006      	add	sp, #24
 8004750:	bd80      	pop	{r7, pc}
 8004752:	46c0      	nop			@ (mov r8, r8)
 8004754:	40021000 	.word	0x40021000
 8004758:	00f42400 	.word	0x00f42400
 800475c:	007a1200 	.word	0x007a1200

08004760 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004768:	2313      	movs	r3, #19
 800476a:	18fb      	adds	r3, r7, r3
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004770:	2312      	movs	r3, #18
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	2200      	movs	r2, #0
 8004776:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	2380      	movs	r3, #128	@ 0x80
 800477e:	029b      	lsls	r3, r3, #10
 8004780:	4013      	ands	r3, r2
 8004782:	d100      	bne.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004784:	e0a3      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004786:	2011      	movs	r0, #17
 8004788:	183b      	adds	r3, r7, r0
 800478a:	2200      	movs	r2, #0
 800478c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800478e:	4ba5      	ldr	r3, [pc, #660]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004790:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004792:	2380      	movs	r3, #128	@ 0x80
 8004794:	055b      	lsls	r3, r3, #21
 8004796:	4013      	ands	r3, r2
 8004798:	d110      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800479a:	4ba2      	ldr	r3, [pc, #648]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800479c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800479e:	4ba1      	ldr	r3, [pc, #644]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047a0:	2180      	movs	r1, #128	@ 0x80
 80047a2:	0549      	lsls	r1, r1, #21
 80047a4:	430a      	orrs	r2, r1
 80047a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80047a8:	4b9e      	ldr	r3, [pc, #632]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047ac:	2380      	movs	r3, #128	@ 0x80
 80047ae:	055b      	lsls	r3, r3, #21
 80047b0:	4013      	ands	r3, r2
 80047b2:	60bb      	str	r3, [r7, #8]
 80047b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047b6:	183b      	adds	r3, r7, r0
 80047b8:	2201      	movs	r2, #1
 80047ba:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047bc:	4b9a      	ldr	r3, [pc, #616]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	4b99      	ldr	r3, [pc, #612]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80047c2:	2180      	movs	r1, #128	@ 0x80
 80047c4:	0049      	lsls	r1, r1, #1
 80047c6:	430a      	orrs	r2, r1
 80047c8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047ca:	f7fd fd3f 	bl	800224c <HAL_GetTick>
 80047ce:	0003      	movs	r3, r0
 80047d0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047d2:	e00b      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d4:	f7fd fd3a 	bl	800224c <HAL_GetTick>
 80047d8:	0002      	movs	r2, r0
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d904      	bls.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80047e2:	2313      	movs	r3, #19
 80047e4:	18fb      	adds	r3, r7, r3
 80047e6:	2203      	movs	r2, #3
 80047e8:	701a      	strb	r2, [r3, #0]
        break;
 80047ea:	e005      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047ec:	4b8e      	ldr	r3, [pc, #568]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	2380      	movs	r3, #128	@ 0x80
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	4013      	ands	r3, r2
 80047f6:	d0ed      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80047f8:	2313      	movs	r3, #19
 80047fa:	18fb      	adds	r3, r7, r3
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d154      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004802:	4b88      	ldr	r3, [pc, #544]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004804:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004806:	23c0      	movs	r3, #192	@ 0xc0
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4013      	ands	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d019      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	429a      	cmp	r2, r3
 800481c:	d014      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800481e:	4b81      	ldr	r3, [pc, #516]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004822:	4a82      	ldr	r2, [pc, #520]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004824:	4013      	ands	r3, r2
 8004826:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004828:	4b7e      	ldr	r3, [pc, #504]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800482a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800482c:	4b7d      	ldr	r3, [pc, #500]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800482e:	2180      	movs	r1, #128	@ 0x80
 8004830:	0249      	lsls	r1, r1, #9
 8004832:	430a      	orrs	r2, r1
 8004834:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004836:	4b7b      	ldr	r3, [pc, #492]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004838:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800483a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800483c:	497c      	ldr	r1, [pc, #496]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800483e:	400a      	ands	r2, r1
 8004840:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004842:	4b78      	ldr	r3, [pc, #480]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2201      	movs	r2, #1
 800484c:	4013      	ands	r3, r2
 800484e:	d016      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fd fcfc 	bl	800224c <HAL_GetTick>
 8004854:	0003      	movs	r3, r0
 8004856:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004858:	e00c      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800485a:	f7fd fcf7 	bl	800224c <HAL_GetTick>
 800485e:	0002      	movs	r2, r0
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	4a73      	ldr	r2, [pc, #460]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d904      	bls.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800486a:	2313      	movs	r3, #19
 800486c:	18fb      	adds	r3, r7, r3
 800486e:	2203      	movs	r2, #3
 8004870:	701a      	strb	r2, [r3, #0]
            break;
 8004872:	e004      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004874:	4b6b      	ldr	r3, [pc, #428]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004878:	2202      	movs	r2, #2
 800487a:	4013      	ands	r3, r2
 800487c:	d0ed      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800487e:	2313      	movs	r3, #19
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10a      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004888:	4b66      	ldr	r3, [pc, #408]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800488a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800488c:	4a67      	ldr	r2, [pc, #412]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800488e:	4013      	ands	r3, r2
 8004890:	0019      	movs	r1, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004896:	4b63      	ldr	r3, [pc, #396]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004898:	430a      	orrs	r2, r1
 800489a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800489c:	e00c      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800489e:	2312      	movs	r3, #18
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	2213      	movs	r2, #19
 80048a4:	18ba      	adds	r2, r7, r2
 80048a6:	7812      	ldrb	r2, [r2, #0]
 80048a8:	701a      	strb	r2, [r3, #0]
 80048aa:	e005      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ac:	2312      	movs	r3, #18
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	2213      	movs	r2, #19
 80048b2:	18ba      	adds	r2, r7, r2
 80048b4:	7812      	ldrb	r2, [r2, #0]
 80048b6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048b8:	2311      	movs	r3, #17
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d105      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c2:	4b58      	ldr	r3, [pc, #352]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048c6:	4b57      	ldr	r3, [pc, #348]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048c8:	495b      	ldr	r1, [pc, #364]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80048ca:	400a      	ands	r2, r1
 80048cc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2201      	movs	r2, #1
 80048d4:	4013      	ands	r3, r2
 80048d6:	d009      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048d8:	4b52      	ldr	r3, [pc, #328]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048dc:	2203      	movs	r2, #3
 80048de:	4393      	bics	r3, r2
 80048e0:	0019      	movs	r1, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048e8:	430a      	orrs	r2, r1
 80048ea:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2210      	movs	r2, #16
 80048f2:	4013      	ands	r3, r2
 80048f4:	d009      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048f6:	4b4b      	ldr	r3, [pc, #300]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048fa:	4a50      	ldr	r2, [pc, #320]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	0019      	movs	r1, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	4b47      	ldr	r3, [pc, #284]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004906:	430a      	orrs	r2, r1
 8004908:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	2380      	movs	r3, #128	@ 0x80
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4013      	ands	r3, r2
 8004914:	d009      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004916:	4b43      	ldr	r3, [pc, #268]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800491a:	4a49      	ldr	r2, [pc, #292]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800491c:	4013      	ands	r3, r2
 800491e:	0019      	movs	r1, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	695a      	ldr	r2, [r3, #20]
 8004924:	4b3f      	ldr	r3, [pc, #252]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004926:	430a      	orrs	r2, r1
 8004928:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	2380      	movs	r3, #128	@ 0x80
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4013      	ands	r3, r2
 8004934:	d009      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004936:	4b3b      	ldr	r3, [pc, #236]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493a:	4a42      	ldr	r2, [pc, #264]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800493c:	4013      	ands	r3, r2
 800493e:	0019      	movs	r1, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699a      	ldr	r2, [r3, #24]
 8004944:	4b37      	ldr	r3, [pc, #220]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004946:	430a      	orrs	r2, r1
 8004948:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2220      	movs	r2, #32
 8004950:	4013      	ands	r3, r2
 8004952:	d009      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004954:	4b33      	ldr	r3, [pc, #204]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004958:	4a3b      	ldr	r2, [pc, #236]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800495a:	4013      	ands	r3, r2
 800495c:	0019      	movs	r1, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	4b30      	ldr	r3, [pc, #192]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004964:	430a      	orrs	r2, r1
 8004966:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	2380      	movs	r3, #128	@ 0x80
 800496e:	01db      	lsls	r3, r3, #7
 8004970:	4013      	ands	r3, r2
 8004972:	d015      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004974:	4b2b      	ldr	r3, [pc, #172]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	0899      	lsrs	r1, r3, #2
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69da      	ldr	r2, [r3, #28]
 8004980:	4b28      	ldr	r3, [pc, #160]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004982:	430a      	orrs	r2, r1
 8004984:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69da      	ldr	r2, [r3, #28]
 800498a:	2380      	movs	r3, #128	@ 0x80
 800498c:	05db      	lsls	r3, r3, #23
 800498e:	429a      	cmp	r2, r3
 8004990:	d106      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004992:	4b24      	ldr	r3, [pc, #144]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	4b23      	ldr	r3, [pc, #140]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004998:	2180      	movs	r1, #128	@ 0x80
 800499a:	0249      	lsls	r1, r1, #9
 800499c:	430a      	orrs	r2, r1
 800499e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	2380      	movs	r3, #128	@ 0x80
 80049a6:	039b      	lsls	r3, r3, #14
 80049a8:	4013      	ands	r3, r2
 80049aa:	d016      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b0:	4a26      	ldr	r2, [pc, #152]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	0019      	movs	r1, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1a      	ldr	r2, [r3, #32]
 80049ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049bc:	430a      	orrs	r2, r1
 80049be:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a1a      	ldr	r2, [r3, #32]
 80049c4:	2380      	movs	r3, #128	@ 0x80
 80049c6:	03db      	lsls	r3, r3, #15
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d106      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80049cc:	4b15      	ldr	r3, [pc, #84]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	4b14      	ldr	r3, [pc, #80]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049d2:	2180      	movs	r1, #128	@ 0x80
 80049d4:	0449      	lsls	r1, r1, #17
 80049d6:	430a      	orrs	r2, r1
 80049d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	2380      	movs	r3, #128	@ 0x80
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	4013      	ands	r3, r2
 80049e4:	d016      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80049e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ea:	4a19      	ldr	r2, [pc, #100]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	0019      	movs	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049f6:	430a      	orrs	r2, r1
 80049f8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	2380      	movs	r3, #128	@ 0x80
 8004a00:	01db      	lsls	r3, r3, #7
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d106      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a06:	4b07      	ldr	r3, [pc, #28]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	4b06      	ldr	r3, [pc, #24]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a0c:	2180      	movs	r1, #128	@ 0x80
 8004a0e:	0249      	lsls	r1, r1, #9
 8004a10:	430a      	orrs	r2, r1
 8004a12:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004a14:	2312      	movs	r3, #18
 8004a16:	18fb      	adds	r3, r7, r3
 8004a18:	781b      	ldrb	r3, [r3, #0]
}
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	b006      	add	sp, #24
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	46c0      	nop			@ (mov r8, r8)
 8004a24:	40021000 	.word	0x40021000
 8004a28:	40007000 	.word	0x40007000
 8004a2c:	fffffcff 	.word	0xfffffcff
 8004a30:	fffeffff 	.word	0xfffeffff
 8004a34:	00001388 	.word	0x00001388
 8004a38:	efffffff 	.word	0xefffffff
 8004a3c:	fffff3ff 	.word	0xfffff3ff
 8004a40:	fff3ffff 	.word	0xfff3ffff
 8004a44:	ffcfffff 	.word	0xffcfffff
 8004a48:	ffffcfff 	.word	0xffffcfff
 8004a4c:	ffbfffff 	.word	0xffbfffff
 8004a50:	ffff3fff 	.word	0xffff3fff

08004a54 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004a54:	b5b0      	push	{r4, r5, r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a5c:	230f      	movs	r3, #15
 8004a5e:	18fb      	adds	r3, r7, r3
 8004a60:	2201      	movs	r2, #1
 8004a62:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d100      	bne.n	8004a6c <HAL_RTC_Init+0x18>
 8004a6a:	e08c      	b.n	8004b86 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2229      	movs	r2, #41	@ 0x29
 8004a70:	5c9b      	ldrb	r3, [r3, r2]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10b      	bne.n	8004a90 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2228      	movs	r2, #40	@ 0x28
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2288      	movs	r2, #136	@ 0x88
 8004a84:	0212      	lsls	r2, r2, #8
 8004a86:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f7fd fa2a 	bl	8001ee4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2229      	movs	r2, #41	@ 0x29
 8004a94:	2102      	movs	r1, #2
 8004a96:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	2210      	movs	r2, #16
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	2b10      	cmp	r3, #16
 8004aa4:	d062      	beq.n	8004b6c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	22ca      	movs	r2, #202	@ 0xca
 8004aac:	625a      	str	r2, [r3, #36]	@ 0x24
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2253      	movs	r2, #83	@ 0x53
 8004ab4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004ab6:	250f      	movs	r5, #15
 8004ab8:	197c      	adds	r4, r7, r5
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	0018      	movs	r0, r3
 8004abe:	f000 fcb9 	bl	8005434 <RTC_EnterInitMode>
 8004ac2:	0003      	movs	r3, r0
 8004ac4:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004ac6:	0028      	movs	r0, r5
 8004ac8:	183b      	adds	r3, r7, r0
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d12c      	bne.n	8004b2a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	492e      	ldr	r1, [pc, #184]	@ (8004b94 <HAL_RTC_Init+0x140>)
 8004adc:	400a      	ands	r2, r1
 8004ade:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6999      	ldr	r1, [r3, #24]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6912      	ldr	r2, [r2, #16]
 8004b06:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6919      	ldr	r1, [r3, #16]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	041a      	lsls	r2, r3, #16
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004b1c:	183c      	adds	r4, r7, r0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	0018      	movs	r0, r3
 8004b22:	f000 fcc9 	bl	80054b8 <RTC_ExitInitMode>
 8004b26:	0003      	movs	r3, r0
 8004b28:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004b2a:	230f      	movs	r3, #15
 8004b2c:	18fb      	adds	r3, r7, r3
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d116      	bne.n	8004b62 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	00d2      	lsls	r2, r2, #3
 8004b40:	08d2      	lsrs	r2, r2, #3
 8004b42:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6999      	ldr	r1, [r3, #24]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	22ff      	movs	r2, #255	@ 0xff
 8004b68:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b6a:	e003      	b.n	8004b74 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004b6c:	230f      	movs	r3, #15
 8004b6e:	18fb      	adds	r3, r7, r3
 8004b70:	2200      	movs	r2, #0
 8004b72:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004b74:	230f      	movs	r3, #15
 8004b76:	18fb      	adds	r3, r7, r3
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d103      	bne.n	8004b86 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2229      	movs	r2, #41	@ 0x29
 8004b82:	2101      	movs	r1, #1
 8004b84:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004b86:	230f      	movs	r3, #15
 8004b88:	18fb      	adds	r3, r7, r3
 8004b8a:	781b      	ldrb	r3, [r3, #0]
}
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b004      	add	sp, #16
 8004b92:	bdb0      	pop	{r4, r5, r7, pc}
 8004b94:	fb8fffbf 	.word	0xfb8fffbf

08004b98 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b98:	b5b0      	push	{r4, r5, r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2228      	movs	r2, #40	@ 0x28
 8004ba8:	5c9b      	ldrb	r3, [r3, r2]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_RTC_SetTime+0x1a>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e092      	b.n	8004cd8 <HAL_RTC_SetTime+0x140>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2228      	movs	r2, #40	@ 0x28
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2229      	movs	r2, #41	@ 0x29
 8004bbe:	2102      	movs	r1, #2
 8004bc0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	22ca      	movs	r2, #202	@ 0xca
 8004bc8:	625a      	str	r2, [r3, #36]	@ 0x24
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2253      	movs	r2, #83	@ 0x53
 8004bd0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004bd2:	2513      	movs	r5, #19
 8004bd4:	197c      	adds	r4, r7, r5
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f000 fc2b 	bl	8005434 <RTC_EnterInitMode>
 8004bde:	0003      	movs	r3, r0
 8004be0:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004be2:	197b      	adds	r3, r7, r5
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d162      	bne.n	8004cb0 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d125      	bne.n	8004c3c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	2240      	movs	r2, #64	@ 0x40
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	d102      	bne.n	8004c02 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	0018      	movs	r0, r3
 8004c08:	f000 fc9a 	bl	8005540 <RTC_ByteToBcd2>
 8004c0c:	0003      	movs	r3, r0
 8004c0e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	785b      	ldrb	r3, [r3, #1]
 8004c14:	0018      	movs	r0, r3
 8004c16:	f000 fc93 	bl	8005540 <RTC_ByteToBcd2>
 8004c1a:	0003      	movs	r3, r0
 8004c1c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c1e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	789b      	ldrb	r3, [r3, #2]
 8004c24:	0018      	movs	r0, r3
 8004c26:	f000 fc8b 	bl	8005540 <RTC_ByteToBcd2>
 8004c2a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c2c:	0022      	movs	r2, r4
 8004c2e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	78db      	ldrb	r3, [r3, #3]
 8004c34:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	e017      	b.n	8004c6c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	2240      	movs	r2, #64	@ 0x40
 8004c44:	4013      	ands	r3, r2
 8004c46:	d102      	bne.n	8004c4e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	785b      	ldrb	r3, [r3, #1]
 8004c58:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c5a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c60:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	78db      	ldrb	r3, [r3, #3]
 8004c66:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	491b      	ldr	r1, [pc, #108]	@ (8004ce0 <HAL_RTC_SetTime+0x148>)
 8004c74:	400a      	ands	r2, r1
 8004c76:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4918      	ldr	r1, [pc, #96]	@ (8004ce4 <HAL_RTC_SetTime+0x14c>)
 8004c84:	400a      	ands	r2, r1
 8004c86:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6999      	ldr	r1, [r3, #24]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	431a      	orrs	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004ca0:	2313      	movs	r3, #19
 8004ca2:	18fc      	adds	r4, r7, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f000 fc06 	bl	80054b8 <RTC_ExitInitMode>
 8004cac:	0003      	movs	r3, r0
 8004cae:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	22ff      	movs	r2, #255	@ 0xff
 8004cb6:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8004cb8:	2313      	movs	r3, #19
 8004cba:	18fb      	adds	r3, r7, r3
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d103      	bne.n	8004cca <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2229      	movs	r2, #41	@ 0x29
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2228      	movs	r2, #40	@ 0x28
 8004cce:	2100      	movs	r1, #0
 8004cd0:	5499      	strb	r1, [r3, r2]

  return status;
 8004cd2:	2313      	movs	r3, #19
 8004cd4:	18fb      	adds	r3, r7, r3
 8004cd6:	781b      	ldrb	r3, [r3, #0]
}
 8004cd8:	0018      	movs	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	b006      	add	sp, #24
 8004cde:	bdb0      	pop	{r4, r5, r7, pc}
 8004ce0:	007f7f7f 	.word	0x007f7f7f
 8004ce4:	fffbffff 	.word	0xfffbffff

08004ce8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	045b      	lsls	r3, r3, #17
 8004d06:	0c5a      	lsrs	r2, r3, #17
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a22      	ldr	r2, [pc, #136]	@ (8004d9c <HAL_RTC_GetTime+0xb4>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	0c1b      	lsrs	r3, r3, #16
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	223f      	movs	r2, #63	@ 0x3f
 8004d20:	4013      	ands	r3, r2
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	0a1b      	lsrs	r3, r3, #8
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	227f      	movs	r2, #127	@ 0x7f
 8004d30:	4013      	ands	r3, r2
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	227f      	movs	r2, #127	@ 0x7f
 8004d3e:	4013      	ands	r3, r2
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	0d9b      	lsrs	r3, r3, #22
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	4013      	ands	r3, r2
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d11a      	bne.n	8004d92 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f000 fc15 	bl	8005590 <RTC_Bcd2ToByte>
 8004d66:	0003      	movs	r3, r0
 8004d68:	001a      	movs	r2, r3
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	785b      	ldrb	r3, [r3, #1]
 8004d72:	0018      	movs	r0, r3
 8004d74:	f000 fc0c 	bl	8005590 <RTC_Bcd2ToByte>
 8004d78:	0003      	movs	r3, r0
 8004d7a:	001a      	movs	r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	789b      	ldrb	r3, [r3, #2]
 8004d84:	0018      	movs	r0, r3
 8004d86:	f000 fc03 	bl	8005590 <RTC_Bcd2ToByte>
 8004d8a:	0003      	movs	r3, r0
 8004d8c:	001a      	movs	r2, r3
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	0018      	movs	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	b006      	add	sp, #24
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	007f7f7f 	.word	0x007f7f7f

08004da0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004da0:	b5b0      	push	{r4, r5, r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2228      	movs	r2, #40	@ 0x28
 8004db0:	5c9b      	ldrb	r3, [r3, r2]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d101      	bne.n	8004dba <HAL_RTC_SetDate+0x1a>
 8004db6:	2302      	movs	r3, #2
 8004db8:	e07e      	b.n	8004eb8 <HAL_RTC_SetDate+0x118>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2228      	movs	r2, #40	@ 0x28
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2229      	movs	r2, #41	@ 0x29
 8004dc6:	2102      	movs	r1, #2
 8004dc8:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10e      	bne.n	8004dee <HAL_RTC_SetDate+0x4e>
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	785b      	ldrb	r3, [r3, #1]
 8004dd4:	001a      	movs	r2, r3
 8004dd6:	2310      	movs	r3, #16
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d008      	beq.n	8004dee <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	785b      	ldrb	r3, [r3, #1]
 8004de0:	2210      	movs	r2, #16
 8004de2:	4393      	bics	r3, r2
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	330a      	adds	r3, #10
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d11c      	bne.n	8004e2e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	78db      	ldrb	r3, [r3, #3]
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f000 fba1 	bl	8005540 <RTC_ByteToBcd2>
 8004dfe:	0003      	movs	r3, r0
 8004e00:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	785b      	ldrb	r3, [r3, #1]
 8004e06:	0018      	movs	r0, r3
 8004e08:	f000 fb9a 	bl	8005540 <RTC_ByteToBcd2>
 8004e0c:	0003      	movs	r3, r0
 8004e0e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e10:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	789b      	ldrb	r3, [r3, #2]
 8004e16:	0018      	movs	r0, r3
 8004e18:	f000 fb92 	bl	8005540 <RTC_ByteToBcd2>
 8004e1c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004e1e:	0022      	movs	r2, r4
 8004e20:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	e00e      	b.n	8004e4c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	78db      	ldrb	r3, [r3, #3]
 8004e32:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	785b      	ldrb	r3, [r3, #1]
 8004e38:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004e3a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004e40:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	22ca      	movs	r2, #202	@ 0xca
 8004e52:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2253      	movs	r2, #83	@ 0x53
 8004e5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004e5c:	2513      	movs	r5, #19
 8004e5e:	197c      	adds	r4, r7, r5
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	0018      	movs	r0, r3
 8004e64:	f000 fae6 	bl	8005434 <RTC_EnterInitMode>
 8004e68:	0003      	movs	r3, r0
 8004e6a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004e6c:	0028      	movs	r0, r5
 8004e6e:	183b      	adds	r3, r7, r0
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10c      	bne.n	8004e90 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4910      	ldr	r1, [pc, #64]	@ (8004ec0 <HAL_RTC_SetDate+0x120>)
 8004e7e:	400a      	ands	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004e82:	183c      	adds	r4, r7, r0
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	0018      	movs	r0, r3
 8004e88:	f000 fb16 	bl	80054b8 <RTC_ExitInitMode>
 8004e8c:	0003      	movs	r3, r0
 8004e8e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	22ff      	movs	r2, #255	@ 0xff
 8004e96:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004e98:	2313      	movs	r3, #19
 8004e9a:	18fb      	adds	r3, r7, r3
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d103      	bne.n	8004eaa <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2229      	movs	r2, #41	@ 0x29
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2228      	movs	r2, #40	@ 0x28
 8004eae:	2100      	movs	r1, #0
 8004eb0:	5499      	strb	r1, [r3, r2]

  return status;
 8004eb2:	2313      	movs	r3, #19
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	781b      	ldrb	r3, [r3, #0]
}
 8004eb8:	0018      	movs	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	b006      	add	sp, #24
 8004ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8004ec0:	00ffff3f 	.word	0x00ffff3f

08004ec4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	4a21      	ldr	r2, [pc, #132]	@ (8004f5c <HAL_RTC_GetDate+0x98>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	0c1b      	lsrs	r3, r3, #16
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	0a1b      	lsrs	r3, r3, #8
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	221f      	movs	r2, #31
 8004eee:	4013      	ands	r3, r2
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	223f      	movs	r2, #63	@ 0x3f
 8004efc:	4013      	ands	r3, r2
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	0b5b      	lsrs	r3, r3, #13
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2207      	movs	r2, #7
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d11a      	bne.n	8004f50 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	78db      	ldrb	r3, [r3, #3]
 8004f1e:	0018      	movs	r0, r3
 8004f20:	f000 fb36 	bl	8005590 <RTC_Bcd2ToByte>
 8004f24:	0003      	movs	r3, r0
 8004f26:	001a      	movs	r2, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	785b      	ldrb	r3, [r3, #1]
 8004f30:	0018      	movs	r0, r3
 8004f32:	f000 fb2d 	bl	8005590 <RTC_Bcd2ToByte>
 8004f36:	0003      	movs	r3, r0
 8004f38:	001a      	movs	r2, r3
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	789b      	ldrb	r3, [r3, #2]
 8004f42:	0018      	movs	r0, r3
 8004f44:	f000 fb24 	bl	8005590 <RTC_Bcd2ToByte>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	001a      	movs	r2, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	0018      	movs	r0, r3
 8004f54:	46bd      	mov	sp, r7
 8004f56:	b006      	add	sp, #24
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	46c0      	nop			@ (mov r8, r8)
 8004f5c:	00ffff3f 	.word	0x00ffff3f

08004f60 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004f60:	b590      	push	{r4, r7, lr}
 8004f62:	b089      	sub	sp, #36	@ 0x24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2228      	movs	r2, #40	@ 0x28
 8004f70:	5c9b      	ldrb	r3, [r3, r2]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_RTC_SetAlarm_IT+0x1a>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e127      	b.n	80051ca <HAL_RTC_SetAlarm_IT+0x26a>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2228      	movs	r2, #40	@ 0x28
 8004f7e:	2101      	movs	r1, #1
 8004f80:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2229      	movs	r2, #41	@ 0x29
 8004f86:	2102      	movs	r1, #2
 8004f88:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d136      	bne.n	8004ffe <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	2240      	movs	r2, #64	@ 0x40
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d102      	bne.n	8004fa2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f000 faca 	bl	8005540 <RTC_ByteToBcd2>
 8004fac:	0003      	movs	r3, r0
 8004fae:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	785b      	ldrb	r3, [r3, #1]
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f000 fac3 	bl	8005540 <RTC_ByteToBcd2>
 8004fba:	0003      	movs	r3, r0
 8004fbc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004fbe:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	789b      	ldrb	r3, [r3, #2]
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f000 fabb 	bl	8005540 <RTC_ByteToBcd2>
 8004fca:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004fcc:	0022      	movs	r2, r4
 8004fce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	78db      	ldrb	r3, [r3, #3]
 8004fd4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	5c9b      	ldrb	r3, [r3, r2]
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f000 faad 	bl	8005540 <RTC_ByteToBcd2>
 8004fe6:	0003      	movs	r3, r0
 8004fe8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004fea:	0022      	movs	r2, r4
 8004fec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004ff2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	61fb      	str	r3, [r7, #28]
 8004ffc:	e022      	b.n	8005044 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	2240      	movs	r2, #64	@ 0x40
 8005006:	4013      	ands	r3, r2
 8005008:	d102      	bne.n	8005010 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2200      	movs	r2, #0
 800500e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	785b      	ldrb	r3, [r3, #1]
 800501a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800501c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005022:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	78db      	ldrb	r3, [r3, #3]
 8005028:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800502a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2120      	movs	r1, #32
 8005030:	5c5b      	ldrb	r3, [r3, r1]
 8005032:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005034:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800503a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005040:	4313      	orrs	r3, r2
 8005042:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	4313      	orrs	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	22ca      	movs	r2, #202	@ 0xca
 8005056:	625a      	str	r2, [r3, #36]	@ 0x24
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2253      	movs	r2, #83	@ 0x53
 800505e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005064:	2380      	movs	r3, #128	@ 0x80
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	429a      	cmp	r2, r3
 800506a:	d14c      	bne.n	8005106 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699a      	ldr	r2, [r3, #24]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4957      	ldr	r1, [pc, #348]	@ (80051d4 <HAL_RTC_SetAlarm_IT+0x274>)
 8005078:	400a      	ands	r2, r1
 800507a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2101      	movs	r1, #1
 8005088:	430a      	orrs	r2, r1
 800508a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800508c:	f7fd f8de 	bl	800224c <HAL_GetTick>
 8005090:	0003      	movs	r3, r0
 8005092:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005094:	e016      	b.n	80050c4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005096:	f7fd f8d9 	bl	800224c <HAL_GetTick>
 800509a:	0002      	movs	r2, r0
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	1ad2      	subs	r2, r2, r3
 80050a0:	23fa      	movs	r3, #250	@ 0xfa
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d90d      	bls.n	80050c4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	22ff      	movs	r2, #255	@ 0xff
 80050ae:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2229      	movs	r2, #41	@ 0x29
 80050b4:	2103      	movs	r1, #3
 80050b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2228      	movs	r2, #40	@ 0x28
 80050bc:	2100      	movs	r1, #0
 80050be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e082      	b.n	80051ca <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	2201      	movs	r2, #1
 80050cc:	4013      	ands	r3, r2
 80050ce:	d0e2      	beq.n	8005096 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	69fa      	ldr	r2, [r7, #28]
 80050d6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2180      	movs	r1, #128	@ 0x80
 80050ec:	0049      	lsls	r1, r1, #1
 80050ee:	430a      	orrs	r2, r1
 80050f0:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699a      	ldr	r2, [r3, #24]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2180      	movs	r1, #128	@ 0x80
 80050fe:	0149      	lsls	r1, r1, #5
 8005100:	430a      	orrs	r2, r1
 8005102:	619a      	str	r2, [r3, #24]
 8005104:	e04b      	b.n	800519e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	699a      	ldr	r2, [r3, #24]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4931      	ldr	r1, [pc, #196]	@ (80051d8 <HAL_RTC_SetAlarm_IT+0x278>)
 8005112:	400a      	ands	r2, r1
 8005114:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2102      	movs	r1, #2
 8005122:	430a      	orrs	r2, r1
 8005124:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8005126:	f7fd f891 	bl	800224c <HAL_GetTick>
 800512a:	0003      	movs	r3, r0
 800512c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800512e:	e016      	b.n	800515e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005130:	f7fd f88c 	bl	800224c <HAL_GetTick>
 8005134:	0002      	movs	r2, r0
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	1ad2      	subs	r2, r2, r3
 800513a:	23fa      	movs	r3, #250	@ 0xfa
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	429a      	cmp	r2, r3
 8005140:	d90d      	bls.n	800515e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	22ff      	movs	r2, #255	@ 0xff
 8005148:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2229      	movs	r2, #41	@ 0x29
 800514e:	2103      	movs	r1, #3
 8005150:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2228      	movs	r2, #40	@ 0x28
 8005156:	2100      	movs	r1, #0
 8005158:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e035      	b.n	80051ca <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	2202      	movs	r2, #2
 8005166:	4013      	ands	r3, r2
 8005168:	d0e2      	beq.n	8005130 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	699a      	ldr	r2, [r3, #24]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2180      	movs	r1, #128	@ 0x80
 8005186:	0089      	lsls	r1, r1, #2
 8005188:	430a      	orrs	r2, r1
 800518a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699a      	ldr	r2, [r3, #24]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2180      	movs	r1, #128	@ 0x80
 8005198:	0189      	lsls	r1, r1, #6
 800519a:	430a      	orrs	r2, r1
 800519c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800519e:	4a0f      	ldr	r2, [pc, #60]	@ (80051dc <HAL_RTC_SetAlarm_IT+0x27c>)
 80051a0:	2380      	movs	r3, #128	@ 0x80
 80051a2:	58d3      	ldr	r3, [r2, r3]
 80051a4:	490d      	ldr	r1, [pc, #52]	@ (80051dc <HAL_RTC_SetAlarm_IT+0x27c>)
 80051a6:	2280      	movs	r2, #128	@ 0x80
 80051a8:	0312      	lsls	r2, r2, #12
 80051aa:	4313      	orrs	r3, r2
 80051ac:	2280      	movs	r2, #128	@ 0x80
 80051ae:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	22ff      	movs	r2, #255	@ 0xff
 80051b6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2229      	movs	r2, #41	@ 0x29
 80051bc:	2101      	movs	r1, #1
 80051be:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2228      	movs	r2, #40	@ 0x28
 80051c4:	2100      	movs	r1, #0
 80051c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	0018      	movs	r0, r3
 80051cc:	46bd      	mov	sp, r7
 80051ce:	b009      	add	sp, #36	@ 0x24
 80051d0:	bd90      	pop	{r4, r7, pc}
 80051d2:	46c0      	nop			@ (mov r8, r8)
 80051d4:	fffffeff 	.word	0xfffffeff
 80051d8:	fffffdff 	.word	0xfffffdff
 80051dc:	40021800 	.word	0x40021800

080051e0 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	2380      	movs	r3, #128	@ 0x80
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d144      	bne.n	8005282 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2280      	movs	r2, #128	@ 0x80
 80051fc:	0052      	lsls	r2, r2, #1
 80051fe:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005206:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520e:	045b      	lsls	r3, r3, #17
 8005210:	0c5b      	lsrs	r3, r3, #17
 8005212:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	0c1b      	lsrs	r3, r3, #16
 8005218:	b2db      	uxtb	r3, r3
 800521a:	223f      	movs	r2, #63	@ 0x3f
 800521c:	4013      	ands	r3, r2
 800521e:	b2da      	uxtb	r2, r3
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	0a1b      	lsrs	r3, r3, #8
 8005228:	b2db      	uxtb	r3, r3
 800522a:	227f      	movs	r2, #127	@ 0x7f
 800522c:	4013      	ands	r3, r2
 800522e:	b2da      	uxtb	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	227f      	movs	r2, #127	@ 0x7f
 800523a:	4013      	ands	r3, r2
 800523c:	b2da      	uxtb	r2, r3
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	0d9b      	lsrs	r3, r3, #22
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2201      	movs	r2, #1
 800524a:	4013      	ands	r3, r2
 800524c:	b2da      	uxtb	r2, r3
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	0e1b      	lsrs	r3, r3, #24
 800525c:	b2db      	uxtb	r3, r3
 800525e:	223f      	movs	r2, #63	@ 0x3f
 8005260:	4013      	ands	r3, r2
 8005262:	b2d9      	uxtb	r1, r3
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2220      	movs	r2, #32
 8005268:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	2380      	movs	r3, #128	@ 0x80
 800526e:	05db      	lsls	r3, r3, #23
 8005270:	401a      	ands	r2, r3
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	4a3b      	ldr	r2, [pc, #236]	@ (8005368 <HAL_RTC_GetAlarm+0x188>)
 800527a:	401a      	ands	r2, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	615a      	str	r2, [r3, #20]
 8005280:	e043      	b.n	800530a <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2280      	movs	r2, #128	@ 0x80
 8005286:	0092      	lsls	r2, r2, #2
 8005288:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005290:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005298:	045b      	lsls	r3, r3, #17
 800529a:	0c5b      	lsrs	r3, r3, #17
 800529c:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	0c1b      	lsrs	r3, r3, #16
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	223f      	movs	r2, #63	@ 0x3f
 80052a6:	4013      	ands	r3, r2
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	0a1b      	lsrs	r3, r3, #8
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	227f      	movs	r2, #127	@ 0x7f
 80052b6:	4013      	ands	r3, r2
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	227f      	movs	r2, #127	@ 0x7f
 80052c4:	4013      	ands	r3, r2
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	0d9b      	lsrs	r3, r3, #22
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2201      	movs	r2, #1
 80052d4:	4013      	ands	r3, r2
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	0e1b      	lsrs	r3, r3, #24
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	223f      	movs	r2, #63	@ 0x3f
 80052ea:	4013      	ands	r3, r2
 80052ec:	b2d9      	uxtb	r1, r3
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2220      	movs	r2, #32
 80052f2:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	2380      	movs	r3, #128	@ 0x80
 80052f8:	05db      	lsls	r3, r3, #23
 80052fa:	401a      	ands	r2, r3
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	4a19      	ldr	r2, [pc, #100]	@ (8005368 <HAL_RTC_GetAlarm+0x188>)
 8005304:	401a      	ands	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d125      	bne.n	800535c <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	0018      	movs	r0, r3
 8005316:	f000 f93b 	bl	8005590 <RTC_Bcd2ToByte>
 800531a:	0003      	movs	r3, r0
 800531c:	001a      	movs	r2, r3
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	785b      	ldrb	r3, [r3, #1]
 8005326:	0018      	movs	r0, r3
 8005328:	f000 f932 	bl	8005590 <RTC_Bcd2ToByte>
 800532c:	0003      	movs	r3, r0
 800532e:	001a      	movs	r2, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	789b      	ldrb	r3, [r3, #2]
 8005338:	0018      	movs	r0, r3
 800533a:	f000 f929 	bl	8005590 <RTC_Bcd2ToByte>
 800533e:	0003      	movs	r3, r0
 8005340:	001a      	movs	r2, r3
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2220      	movs	r2, #32
 800534a:	5c9b      	ldrb	r3, [r3, r2]
 800534c:	0018      	movs	r0, r3
 800534e:	f000 f91f 	bl	8005590 <RTC_Bcd2ToByte>
 8005352:	0003      	movs	r3, r0
 8005354:	0019      	movs	r1, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2220      	movs	r2, #32
 800535a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	0018      	movs	r0, r3
 8005360:	46bd      	mov	sp, r7
 8005362:	b006      	add	sp, #24
 8005364:	bd80      	pop	{r7, pc}
 8005366:	46c0      	nop			@ (mov r8, r8)
 8005368:	80808080 	.word	0x80808080

0800536c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699a      	ldr	r2, [r3, #24]
 800537a:	2380      	movs	r3, #128	@ 0x80
 800537c:	015b      	lsls	r3, r3, #5
 800537e:	4013      	ands	r3, r2
 8005380:	d011      	beq.n	80053a6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005388:	2201      	movs	r2, #1
 800538a:	4013      	ands	r3, r2
 800538c:	d00b      	beq.n	80053a6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2101      	movs	r1, #1
 800539a:	430a      	orrs	r2, r1
 800539c:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	0018      	movs	r0, r3
 80053a2:	f7fb fea1 	bl	80010e8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	699a      	ldr	r2, [r3, #24]
 80053ac:	2380      	movs	r3, #128	@ 0x80
 80053ae:	019b      	lsls	r3, r3, #6
 80053b0:	4013      	ands	r3, r2
 80053b2:	d011      	beq.n	80053d8 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ba:	2202      	movs	r2, #2
 80053bc:	4013      	ands	r3, r2
 80053be:	d00b      	beq.n	80053d8 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2102      	movs	r1, #2
 80053cc:	430a      	orrs	r2, r1
 80053ce:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	0018      	movs	r0, r3
 80053d4:	f000 f942 	bl	800565c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2229      	movs	r2, #41	@ 0x29
 80053dc:	2101      	movs	r1, #1
 80053de:	5499      	strb	r1, [r3, r2]
}
 80053e0:	46c0      	nop			@ (mov r8, r8)
 80053e2:	46bd      	mov	sp, r7
 80053e4:	b002      	add	sp, #8
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a0e      	ldr	r2, [pc, #56]	@ (8005430 <HAL_RTC_WaitForSynchro+0x48>)
 80053f6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80053f8:	f7fc ff28 	bl	800224c <HAL_GetTick>
 80053fc:	0003      	movs	r3, r0
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005400:	e00a      	b.n	8005418 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005402:	f7fc ff23 	bl	800224c <HAL_GetTick>
 8005406:	0002      	movs	r2, r0
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	1ad2      	subs	r2, r2, r3
 800540c:	23fa      	movs	r3, #250	@ 0xfa
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	429a      	cmp	r2, r3
 8005412:	d901      	bls.n	8005418 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e006      	b.n	8005426 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	4013      	ands	r3, r2
 8005422:	d0ee      	beq.n	8005402 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	0018      	movs	r0, r3
 8005428:	46bd      	mov	sp, r7
 800542a:	b004      	add	sp, #16
 800542c:	bd80      	pop	{r7, pc}
 800542e:	46c0      	nop			@ (mov r8, r8)
 8005430:	0001005f 	.word	0x0001005f

08005434 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800543c:	230f      	movs	r3, #15
 800543e:	18fb      	adds	r3, r7, r3
 8005440:	2200      	movs	r2, #0
 8005442:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	2240      	movs	r2, #64	@ 0x40
 800544c:	4013      	ands	r3, r2
 800544e:	d12c      	bne.n	80054aa <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2180      	movs	r1, #128	@ 0x80
 800545c:	430a      	orrs	r2, r1
 800545e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005460:	f7fc fef4 	bl	800224c <HAL_GetTick>
 8005464:	0003      	movs	r3, r0
 8005466:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005468:	e014      	b.n	8005494 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800546a:	f7fc feef 	bl	800224c <HAL_GetTick>
 800546e:	0002      	movs	r2, r0
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	1ad2      	subs	r2, r2, r3
 8005474:	200f      	movs	r0, #15
 8005476:	183b      	adds	r3, r7, r0
 8005478:	1839      	adds	r1, r7, r0
 800547a:	7809      	ldrb	r1, [r1, #0]
 800547c:	7019      	strb	r1, [r3, #0]
 800547e:	23fa      	movs	r3, #250	@ 0xfa
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	429a      	cmp	r2, r3
 8005484:	d906      	bls.n	8005494 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005486:	183b      	adds	r3, r7, r0
 8005488:	2203      	movs	r2, #3
 800548a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2229      	movs	r2, #41	@ 0x29
 8005490:	2103      	movs	r1, #3
 8005492:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	2240      	movs	r2, #64	@ 0x40
 800549c:	4013      	ands	r3, r2
 800549e:	d104      	bne.n	80054aa <RTC_EnterInitMode+0x76>
 80054a0:	230f      	movs	r3, #15
 80054a2:	18fb      	adds	r3, r7, r3
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d1df      	bne.n	800546a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80054aa:	230f      	movs	r3, #15
 80054ac:	18fb      	adds	r3, r7, r3
 80054ae:	781b      	ldrb	r3, [r3, #0]
}
 80054b0:	0018      	movs	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	b004      	add	sp, #16
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80054b8:	b590      	push	{r4, r7, lr}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054c0:	240f      	movs	r4, #15
 80054c2:	193b      	adds	r3, r7, r4
 80054c4:	2200      	movs	r2, #0
 80054c6:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80054c8:	4b1c      	ldr	r3, [pc, #112]	@ (800553c <RTC_ExitInitMode+0x84>)
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	4b1b      	ldr	r3, [pc, #108]	@ (800553c <RTC_ExitInitMode+0x84>)
 80054ce:	2180      	movs	r1, #128	@ 0x80
 80054d0:	438a      	bics	r2, r1
 80054d2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80054d4:	4b19      	ldr	r3, [pc, #100]	@ (800553c <RTC_ExitInitMode+0x84>)
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	2220      	movs	r2, #32
 80054da:	4013      	ands	r3, r2
 80054dc:	d10d      	bne.n	80054fa <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	0018      	movs	r0, r3
 80054e2:	f7ff ff81 	bl	80053e8 <HAL_RTC_WaitForSynchro>
 80054e6:	1e03      	subs	r3, r0, #0
 80054e8:	d021      	beq.n	800552e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2229      	movs	r2, #41	@ 0x29
 80054ee:	2103      	movs	r1, #3
 80054f0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80054f2:	193b      	adds	r3, r7, r4
 80054f4:	2203      	movs	r2, #3
 80054f6:	701a      	strb	r2, [r3, #0]
 80054f8:	e019      	b.n	800552e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80054fa:	4b10      	ldr	r3, [pc, #64]	@ (800553c <RTC_ExitInitMode+0x84>)
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	4b0f      	ldr	r3, [pc, #60]	@ (800553c <RTC_ExitInitMode+0x84>)
 8005500:	2120      	movs	r1, #32
 8005502:	438a      	bics	r2, r1
 8005504:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	0018      	movs	r0, r3
 800550a:	f7ff ff6d 	bl	80053e8 <HAL_RTC_WaitForSynchro>
 800550e:	1e03      	subs	r3, r0, #0
 8005510:	d007      	beq.n	8005522 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2229      	movs	r2, #41	@ 0x29
 8005516:	2103      	movs	r1, #3
 8005518:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800551a:	230f      	movs	r3, #15
 800551c:	18fb      	adds	r3, r7, r3
 800551e:	2203      	movs	r2, #3
 8005520:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005522:	4b06      	ldr	r3, [pc, #24]	@ (800553c <RTC_ExitInitMode+0x84>)
 8005524:	699a      	ldr	r2, [r3, #24]
 8005526:	4b05      	ldr	r3, [pc, #20]	@ (800553c <RTC_ExitInitMode+0x84>)
 8005528:	2120      	movs	r1, #32
 800552a:	430a      	orrs	r2, r1
 800552c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800552e:	230f      	movs	r3, #15
 8005530:	18fb      	adds	r3, r7, r3
 8005532:	781b      	ldrb	r3, [r3, #0]
}
 8005534:	0018      	movs	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	b005      	add	sp, #20
 800553a:	bd90      	pop	{r4, r7, pc}
 800553c:	40002800 	.word	0x40002800

08005540 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	0002      	movs	r2, r0
 8005548:	1dfb      	adds	r3, r7, #7
 800554a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005550:	230b      	movs	r3, #11
 8005552:	18fb      	adds	r3, r7, r3
 8005554:	1dfa      	adds	r2, r7, #7
 8005556:	7812      	ldrb	r2, [r2, #0]
 8005558:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800555a:	e008      	b.n	800556e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3301      	adds	r3, #1
 8005560:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005562:	220b      	movs	r2, #11
 8005564:	18bb      	adds	r3, r7, r2
 8005566:	18ba      	adds	r2, r7, r2
 8005568:	7812      	ldrb	r2, [r2, #0]
 800556a:	3a0a      	subs	r2, #10
 800556c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800556e:	210b      	movs	r1, #11
 8005570:	187b      	adds	r3, r7, r1
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b09      	cmp	r3, #9
 8005576:	d8f1      	bhi.n	800555c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	b2db      	uxtb	r3, r3
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	b2da      	uxtb	r2, r3
 8005580:	187b      	adds	r3, r7, r1
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	4313      	orrs	r3, r2
 8005586:	b2db      	uxtb	r3, r3
}
 8005588:	0018      	movs	r0, r3
 800558a:	46bd      	mov	sp, r7
 800558c:	b004      	add	sp, #16
 800558e:	bd80      	pop	{r7, pc}

08005590 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	0002      	movs	r2, r0
 8005598:	1dfb      	adds	r3, r7, #7
 800559a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800559c:	1dfb      	adds	r3, r7, #7
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	091b      	lsrs	r3, r3, #4
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	001a      	movs	r2, r3
 80055a6:	0013      	movs	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	189b      	adds	r3, r3, r2
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	1dfb      	adds	r3, r7, #7
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	210f      	movs	r1, #15
 80055ba:	400b      	ands	r3, r1
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	18d3      	adds	r3, r2, r3
 80055c0:	b2db      	uxtb	r3, r3
}
 80055c2:	0018      	movs	r0, r3
 80055c4:	46bd      	mov	sp, r7
 80055c6:	b004      	add	sp, #16
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2228      	movs	r2, #40	@ 0x28
 80055da:	5c9b      	ldrb	r3, [r3, r2]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e035      	b.n	8005650 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2228      	movs	r2, #40	@ 0x28
 80055e8:	2101      	movs	r1, #1
 80055ea:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2229      	movs	r2, #41	@ 0x29
 80055f0:	2102      	movs	r1, #2
 80055f2:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	22ca      	movs	r2, #202	@ 0xca
 80055fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2253      	movs	r2, #83	@ 0x53
 8005602:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699a      	ldr	r2, [r3, #24]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4912      	ldr	r1, [pc, #72]	@ (8005658 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8005610:	400a      	ands	r2, r1
 8005612:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6999      	ldr	r1, [r3, #24]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2180      	movs	r1, #128	@ 0x80
 8005630:	0409      	lsls	r1, r1, #16
 8005632:	430a      	orrs	r2, r1
 8005634:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	22ff      	movs	r2, #255	@ 0xff
 800563c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2229      	movs	r2, #41	@ 0x29
 8005642:	2101      	movs	r1, #1
 8005644:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2228      	movs	r2, #40	@ 0x28
 800564a:	2100      	movs	r1, #0
 800564c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	0018      	movs	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	b002      	add	sp, #8
 8005656:	bd80      	pop	{r7, pc}
 8005658:	fff7ffff 	.word	0xfff7ffff

0800565c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005664:	46c0      	nop			@ (mov r8, r8)
 8005666:	46bd      	mov	sp, r7
 8005668:	b002      	add	sp, #8
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e04a      	b.n	8005714 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	223d      	movs	r2, #61	@ 0x3d
 8005682:	5c9b      	ldrb	r3, [r3, r2]
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d107      	bne.n	800569a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	223c      	movs	r2, #60	@ 0x3c
 800568e:	2100      	movs	r1, #0
 8005690:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	0018      	movs	r0, r3
 8005696:	f7fc fc87 	bl	8001fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	223d      	movs	r2, #61	@ 0x3d
 800569e:	2102      	movs	r1, #2
 80056a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3304      	adds	r3, #4
 80056aa:	0019      	movs	r1, r3
 80056ac:	0010      	movs	r0, r2
 80056ae:	f000 fadd 	bl	8005c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2248      	movs	r2, #72	@ 0x48
 80056b6:	2101      	movs	r1, #1
 80056b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	223e      	movs	r2, #62	@ 0x3e
 80056be:	2101      	movs	r1, #1
 80056c0:	5499      	strb	r1, [r3, r2]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	223f      	movs	r2, #63	@ 0x3f
 80056c6:	2101      	movs	r1, #1
 80056c8:	5499      	strb	r1, [r3, r2]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2240      	movs	r2, #64	@ 0x40
 80056ce:	2101      	movs	r1, #1
 80056d0:	5499      	strb	r1, [r3, r2]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2241      	movs	r2, #65	@ 0x41
 80056d6:	2101      	movs	r1, #1
 80056d8:	5499      	strb	r1, [r3, r2]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2242      	movs	r2, #66	@ 0x42
 80056de:	2101      	movs	r1, #1
 80056e0:	5499      	strb	r1, [r3, r2]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2243      	movs	r2, #67	@ 0x43
 80056e6:	2101      	movs	r1, #1
 80056e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2244      	movs	r2, #68	@ 0x44
 80056ee:	2101      	movs	r1, #1
 80056f0:	5499      	strb	r1, [r3, r2]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2245      	movs	r2, #69	@ 0x45
 80056f6:	2101      	movs	r1, #1
 80056f8:	5499      	strb	r1, [r3, r2]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2246      	movs	r2, #70	@ 0x46
 80056fe:	2101      	movs	r1, #1
 8005700:	5499      	strb	r1, [r3, r2]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2247      	movs	r2, #71	@ 0x47
 8005706:	2101      	movs	r1, #1
 8005708:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	223d      	movs	r2, #61	@ 0x3d
 800570e:	2101      	movs	r1, #1
 8005710:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	0018      	movs	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	b002      	add	sp, #8
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	223d      	movs	r2, #61	@ 0x3d
 8005728:	5c9b      	ldrb	r3, [r3, r2]
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b01      	cmp	r3, #1
 800572e:	d001      	beq.n	8005734 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e035      	b.n	80057a0 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	223d      	movs	r2, #61	@ 0x3d
 8005738:	2102      	movs	r1, #2
 800573a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a19      	ldr	r2, [pc, #100]	@ (80057a8 <HAL_TIM_Base_Start+0x8c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00a      	beq.n	800575c <HAL_TIM_Base_Start+0x40>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	2380      	movs	r3, #128	@ 0x80
 800574c:	05db      	lsls	r3, r3, #23
 800574e:	429a      	cmp	r2, r3
 8005750:	d004      	beq.n	800575c <HAL_TIM_Base_Start+0x40>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a15      	ldr	r2, [pc, #84]	@ (80057ac <HAL_TIM_Base_Start+0x90>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d116      	bne.n	800578a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	4a13      	ldr	r2, [pc, #76]	@ (80057b0 <HAL_TIM_Base_Start+0x94>)
 8005764:	4013      	ands	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b06      	cmp	r3, #6
 800576c:	d016      	beq.n	800579c <HAL_TIM_Base_Start+0x80>
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	2380      	movs	r3, #128	@ 0x80
 8005772:	025b      	lsls	r3, r3, #9
 8005774:	429a      	cmp	r2, r3
 8005776:	d011      	beq.n	800579c <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2101      	movs	r1, #1
 8005784:	430a      	orrs	r2, r1
 8005786:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005788:	e008      	b.n	800579c <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2101      	movs	r1, #1
 8005796:	430a      	orrs	r2, r1
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	e000      	b.n	800579e <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	0018      	movs	r0, r3
 80057a2:	46bd      	mov	sp, r7
 80057a4:	b004      	add	sp, #16
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	40012c00 	.word	0x40012c00
 80057ac:	40000400 	.word	0x40000400
 80057b0:	00010007 	.word	0x00010007

080057b4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	4a0d      	ldr	r2, [pc, #52]	@ (80057f8 <HAL_TIM_Base_Stop+0x44>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	d10d      	bne.n	80057e4 <HAL_TIM_Base_Stop+0x30>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	4a0b      	ldr	r2, [pc, #44]	@ (80057fc <HAL_TIM_Base_Stop+0x48>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	d107      	bne.n	80057e4 <HAL_TIM_Base_Stop+0x30>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2101      	movs	r1, #1
 80057e0:	438a      	bics	r2, r1
 80057e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	223d      	movs	r2, #61	@ 0x3d
 80057e8:	2101      	movs	r1, #1
 80057ea:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	0018      	movs	r0, r3
 80057f0:	46bd      	mov	sp, r7
 80057f2:	b002      	add	sp, #8
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	46c0      	nop			@ (mov r8, r8)
 80057f8:	00001111 	.word	0x00001111
 80057fc:	00000444 	.word	0x00000444

08005800 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e04a      	b.n	80058a8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	223d      	movs	r2, #61	@ 0x3d
 8005816:	5c9b      	ldrb	r3, [r3, r2]
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d107      	bne.n	800582e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	223c      	movs	r2, #60	@ 0x3c
 8005822:	2100      	movs	r1, #0
 8005824:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	0018      	movs	r0, r3
 800582a:	f7fc fba1 	bl	8001f70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	223d      	movs	r2, #61	@ 0x3d
 8005832:	2102      	movs	r1, #2
 8005834:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3304      	adds	r3, #4
 800583e:	0019      	movs	r1, r3
 8005840:	0010      	movs	r0, r2
 8005842:	f000 fa13 	bl	8005c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2248      	movs	r2, #72	@ 0x48
 800584a:	2101      	movs	r1, #1
 800584c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	223e      	movs	r2, #62	@ 0x3e
 8005852:	2101      	movs	r1, #1
 8005854:	5499      	strb	r1, [r3, r2]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	223f      	movs	r2, #63	@ 0x3f
 800585a:	2101      	movs	r1, #1
 800585c:	5499      	strb	r1, [r3, r2]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2240      	movs	r2, #64	@ 0x40
 8005862:	2101      	movs	r1, #1
 8005864:	5499      	strb	r1, [r3, r2]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2241      	movs	r2, #65	@ 0x41
 800586a:	2101      	movs	r1, #1
 800586c:	5499      	strb	r1, [r3, r2]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2242      	movs	r2, #66	@ 0x42
 8005872:	2101      	movs	r1, #1
 8005874:	5499      	strb	r1, [r3, r2]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2243      	movs	r2, #67	@ 0x43
 800587a:	2101      	movs	r1, #1
 800587c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2244      	movs	r2, #68	@ 0x44
 8005882:	2101      	movs	r1, #1
 8005884:	5499      	strb	r1, [r3, r2]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2245      	movs	r2, #69	@ 0x45
 800588a:	2101      	movs	r1, #1
 800588c:	5499      	strb	r1, [r3, r2]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2246      	movs	r2, #70	@ 0x46
 8005892:	2101      	movs	r1, #1
 8005894:	5499      	strb	r1, [r3, r2]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2247      	movs	r2, #71	@ 0x47
 800589a:	2101      	movs	r1, #1
 800589c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	223d      	movs	r2, #61	@ 0x3d
 80058a2:	2101      	movs	r1, #1
 80058a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	0018      	movs	r0, r3
 80058aa:	46bd      	mov	sp, r7
 80058ac:	b002      	add	sp, #8
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d108      	bne.n	80058d2 <HAL_TIM_PWM_Start+0x22>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	223e      	movs	r2, #62	@ 0x3e
 80058c4:	5c9b      	ldrb	r3, [r3, r2]
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	1e5a      	subs	r2, r3, #1
 80058cc:	4193      	sbcs	r3, r2
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	e037      	b.n	8005942 <HAL_TIM_PWM_Start+0x92>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d108      	bne.n	80058ea <HAL_TIM_PWM_Start+0x3a>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	223f      	movs	r2, #63	@ 0x3f
 80058dc:	5c9b      	ldrb	r3, [r3, r2]
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	1e5a      	subs	r2, r3, #1
 80058e4:	4193      	sbcs	r3, r2
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	e02b      	b.n	8005942 <HAL_TIM_PWM_Start+0x92>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d108      	bne.n	8005902 <HAL_TIM_PWM_Start+0x52>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2240      	movs	r2, #64	@ 0x40
 80058f4:	5c9b      	ldrb	r3, [r3, r2]
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	1e5a      	subs	r2, r3, #1
 80058fc:	4193      	sbcs	r3, r2
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	e01f      	b.n	8005942 <HAL_TIM_PWM_Start+0x92>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b0c      	cmp	r3, #12
 8005906:	d108      	bne.n	800591a <HAL_TIM_PWM_Start+0x6a>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2241      	movs	r2, #65	@ 0x41
 800590c:	5c9b      	ldrb	r3, [r3, r2]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	3b01      	subs	r3, #1
 8005912:	1e5a      	subs	r2, r3, #1
 8005914:	4193      	sbcs	r3, r2
 8005916:	b2db      	uxtb	r3, r3
 8005918:	e013      	b.n	8005942 <HAL_TIM_PWM_Start+0x92>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b10      	cmp	r3, #16
 800591e:	d108      	bne.n	8005932 <HAL_TIM_PWM_Start+0x82>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2242      	movs	r2, #66	@ 0x42
 8005924:	5c9b      	ldrb	r3, [r3, r2]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	1e5a      	subs	r2, r3, #1
 800592c:	4193      	sbcs	r3, r2
 800592e:	b2db      	uxtb	r3, r3
 8005930:	e007      	b.n	8005942 <HAL_TIM_PWM_Start+0x92>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2243      	movs	r2, #67	@ 0x43
 8005936:	5c9b      	ldrb	r3, [r3, r2]
 8005938:	b2db      	uxtb	r3, r3
 800593a:	3b01      	subs	r3, #1
 800593c:	1e5a      	subs	r2, r3, #1
 800593e:	4193      	sbcs	r3, r2
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e081      	b.n	8005a4e <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d104      	bne.n	800595a <HAL_TIM_PWM_Start+0xaa>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	223e      	movs	r2, #62	@ 0x3e
 8005954:	2102      	movs	r1, #2
 8005956:	5499      	strb	r1, [r3, r2]
 8005958:	e023      	b.n	80059a2 <HAL_TIM_PWM_Start+0xf2>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b04      	cmp	r3, #4
 800595e:	d104      	bne.n	800596a <HAL_TIM_PWM_Start+0xba>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	223f      	movs	r2, #63	@ 0x3f
 8005964:	2102      	movs	r1, #2
 8005966:	5499      	strb	r1, [r3, r2]
 8005968:	e01b      	b.n	80059a2 <HAL_TIM_PWM_Start+0xf2>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b08      	cmp	r3, #8
 800596e:	d104      	bne.n	800597a <HAL_TIM_PWM_Start+0xca>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2240      	movs	r2, #64	@ 0x40
 8005974:	2102      	movs	r1, #2
 8005976:	5499      	strb	r1, [r3, r2]
 8005978:	e013      	b.n	80059a2 <HAL_TIM_PWM_Start+0xf2>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b0c      	cmp	r3, #12
 800597e:	d104      	bne.n	800598a <HAL_TIM_PWM_Start+0xda>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2241      	movs	r2, #65	@ 0x41
 8005984:	2102      	movs	r1, #2
 8005986:	5499      	strb	r1, [r3, r2]
 8005988:	e00b      	b.n	80059a2 <HAL_TIM_PWM_Start+0xf2>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b10      	cmp	r3, #16
 800598e:	d104      	bne.n	800599a <HAL_TIM_PWM_Start+0xea>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2242      	movs	r2, #66	@ 0x42
 8005994:	2102      	movs	r1, #2
 8005996:	5499      	strb	r1, [r3, r2]
 8005998:	e003      	b.n	80059a2 <HAL_TIM_PWM_Start+0xf2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2243      	movs	r2, #67	@ 0x43
 800599e:	2102      	movs	r1, #2
 80059a0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6839      	ldr	r1, [r7, #0]
 80059a8:	2201      	movs	r2, #1
 80059aa:	0018      	movs	r0, r3
 80059ac:	f000 fc7e 	bl	80062ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a28      	ldr	r2, [pc, #160]	@ (8005a58 <HAL_TIM_PWM_Start+0x1a8>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d009      	beq.n	80059ce <HAL_TIM_PWM_Start+0x11e>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a27      	ldr	r2, [pc, #156]	@ (8005a5c <HAL_TIM_PWM_Start+0x1ac>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d004      	beq.n	80059ce <HAL_TIM_PWM_Start+0x11e>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a25      	ldr	r2, [pc, #148]	@ (8005a60 <HAL_TIM_PWM_Start+0x1b0>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d101      	bne.n	80059d2 <HAL_TIM_PWM_Start+0x122>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <HAL_TIM_PWM_Start+0x124>
 80059d2:	2300      	movs	r3, #0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d008      	beq.n	80059ea <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2180      	movs	r1, #128	@ 0x80
 80059e4:	0209      	lsls	r1, r1, #8
 80059e6:	430a      	orrs	r2, r1
 80059e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a1a      	ldr	r2, [pc, #104]	@ (8005a58 <HAL_TIM_PWM_Start+0x1a8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00a      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x15a>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	2380      	movs	r3, #128	@ 0x80
 80059fa:	05db      	lsls	r3, r3, #23
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d004      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x15a>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a17      	ldr	r2, [pc, #92]	@ (8005a64 <HAL_TIM_PWM_Start+0x1b4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d116      	bne.n	8005a38 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	4a15      	ldr	r2, [pc, #84]	@ (8005a68 <HAL_TIM_PWM_Start+0x1b8>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b06      	cmp	r3, #6
 8005a1a:	d016      	beq.n	8005a4a <HAL_TIM_PWM_Start+0x19a>
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	2380      	movs	r3, #128	@ 0x80
 8005a20:	025b      	lsls	r3, r3, #9
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d011      	beq.n	8005a4a <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2101      	movs	r1, #1
 8005a32:	430a      	orrs	r2, r1
 8005a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a36:	e008      	b.n	8005a4a <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2101      	movs	r1, #1
 8005a44:	430a      	orrs	r2, r1
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	e000      	b.n	8005a4c <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a4a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	0018      	movs	r0, r3
 8005a50:	46bd      	mov	sp, r7
 8005a52:	b004      	add	sp, #16
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	46c0      	nop			@ (mov r8, r8)
 8005a58:	40012c00 	.word	0x40012c00
 8005a5c:	40014400 	.word	0x40014400
 8005a60:	40014800 	.word	0x40014800
 8005a64:	40000400 	.word	0x40000400
 8005a68:	00010007 	.word	0x00010007

08005a6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a78:	2317      	movs	r3, #23
 8005a7a:	18fb      	adds	r3, r7, r3
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	223c      	movs	r2, #60	@ 0x3c
 8005a84:	5c9b      	ldrb	r3, [r3, r2]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <HAL_TIM_PWM_ConfigChannel+0x22>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e0e5      	b.n	8005c5a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	223c      	movs	r2, #60	@ 0x3c
 8005a92:	2101      	movs	r1, #1
 8005a94:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b14      	cmp	r3, #20
 8005a9a:	d900      	bls.n	8005a9e <HAL_TIM_PWM_ConfigChannel+0x32>
 8005a9c:	e0d1      	b.n	8005c42 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	009a      	lsls	r2, r3, #2
 8005aa2:	4b70      	ldr	r3, [pc, #448]	@ (8005c64 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005aa4:	18d3      	adds	r3, r2, r3
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	0011      	movs	r1, r2
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f000 f95e 	bl	8005d74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	699a      	ldr	r2, [r3, #24]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2108      	movs	r1, #8
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699a      	ldr	r2, [r3, #24]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2104      	movs	r1, #4
 8005ad4:	438a      	bics	r2, r1
 8005ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6999      	ldr	r1, [r3, #24]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	691a      	ldr	r2, [r3, #16]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	619a      	str	r2, [r3, #24]
      break;
 8005aea:	e0af      	b.n	8005c4c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	0011      	movs	r1, r2
 8005af4:	0018      	movs	r0, r3
 8005af6:	f000 f9bd 	bl	8005e74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699a      	ldr	r2, [r3, #24]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2180      	movs	r1, #128	@ 0x80
 8005b06:	0109      	lsls	r1, r1, #4
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4954      	ldr	r1, [pc, #336]	@ (8005c68 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005b18:	400a      	ands	r2, r1
 8005b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6999      	ldr	r1, [r3, #24]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	021a      	lsls	r2, r3, #8
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	619a      	str	r2, [r3, #24]
      break;
 8005b30:	e08c      	b.n	8005c4c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	0011      	movs	r1, r2
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f000 fa18 	bl	8005f70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69da      	ldr	r2, [r3, #28]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2108      	movs	r1, #8
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	69da      	ldr	r2, [r3, #28]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2104      	movs	r1, #4
 8005b5c:	438a      	bics	r2, r1
 8005b5e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	69d9      	ldr	r1, [r3, #28]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	691a      	ldr	r2, [r3, #16]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	61da      	str	r2, [r3, #28]
      break;
 8005b72:	e06b      	b.n	8005c4c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	0011      	movs	r1, r2
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	f000 fa79 	bl	8006074 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69da      	ldr	r2, [r3, #28]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2180      	movs	r1, #128	@ 0x80
 8005b8e:	0109      	lsls	r1, r1, #4
 8005b90:	430a      	orrs	r2, r1
 8005b92:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	69da      	ldr	r2, [r3, #28]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4932      	ldr	r1, [pc, #200]	@ (8005c68 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005ba0:	400a      	ands	r2, r1
 8005ba2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	69d9      	ldr	r1, [r3, #28]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	021a      	lsls	r2, r3, #8
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	61da      	str	r2, [r3, #28]
      break;
 8005bb8:	e048      	b.n	8005c4c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	0011      	movs	r1, r2
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	f000 faba 	bl	800613c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2108      	movs	r1, #8
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2104      	movs	r1, #4
 8005be4:	438a      	bics	r2, r1
 8005be6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	691a      	ldr	r2, [r3, #16]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005bfa:	e027      	b.n	8005c4c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	0011      	movs	r1, r2
 8005c04:	0018      	movs	r0, r3
 8005c06:	f000 faf3 	bl	80061f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2180      	movs	r1, #128	@ 0x80
 8005c16:	0109      	lsls	r1, r1, #4
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4910      	ldr	r1, [pc, #64]	@ (8005c68 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005c28:	400a      	ands	r2, r1
 8005c2a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	021a      	lsls	r2, r3, #8
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005c40:	e004      	b.n	8005c4c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005c42:	2317      	movs	r3, #23
 8005c44:	18fb      	adds	r3, r7, r3
 8005c46:	2201      	movs	r2, #1
 8005c48:	701a      	strb	r2, [r3, #0]
      break;
 8005c4a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	223c      	movs	r2, #60	@ 0x3c
 8005c50:	2100      	movs	r1, #0
 8005c52:	5499      	strb	r1, [r3, r2]

  return status;
 8005c54:	2317      	movs	r3, #23
 8005c56:	18fb      	adds	r3, r7, r3
 8005c58:	781b      	ldrb	r3, [r3, #0]
}
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	b006      	add	sp, #24
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	46c0      	nop			@ (mov r8, r8)
 8005c64:	080064d0 	.word	0x080064d0
 8005c68:	fffffbff 	.word	0xfffffbff

08005c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a37      	ldr	r2, [pc, #220]	@ (8005d5c <TIM_Base_SetConfig+0xf0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d008      	beq.n	8005c96 <TIM_Base_SetConfig+0x2a>
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	2380      	movs	r3, #128	@ 0x80
 8005c88:	05db      	lsls	r3, r3, #23
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d003      	beq.n	8005c96 <TIM_Base_SetConfig+0x2a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a33      	ldr	r2, [pc, #204]	@ (8005d60 <TIM_Base_SetConfig+0xf4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d108      	bne.n	8005ca8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2270      	movs	r2, #112	@ 0x70
 8005c9a:	4393      	bics	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a2c      	ldr	r2, [pc, #176]	@ (8005d5c <TIM_Base_SetConfig+0xf0>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d014      	beq.n	8005cda <TIM_Base_SetConfig+0x6e>
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	2380      	movs	r3, #128	@ 0x80
 8005cb4:	05db      	lsls	r3, r3, #23
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d00f      	beq.n	8005cda <TIM_Base_SetConfig+0x6e>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a28      	ldr	r2, [pc, #160]	@ (8005d60 <TIM_Base_SetConfig+0xf4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00b      	beq.n	8005cda <TIM_Base_SetConfig+0x6e>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a27      	ldr	r2, [pc, #156]	@ (8005d64 <TIM_Base_SetConfig+0xf8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d007      	beq.n	8005cda <TIM_Base_SetConfig+0x6e>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a26      	ldr	r2, [pc, #152]	@ (8005d68 <TIM_Base_SetConfig+0xfc>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d003      	beq.n	8005cda <TIM_Base_SetConfig+0x6e>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a25      	ldr	r2, [pc, #148]	@ (8005d6c <TIM_Base_SetConfig+0x100>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d108      	bne.n	8005cec <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4a24      	ldr	r2, [pc, #144]	@ (8005d70 <TIM_Base_SetConfig+0x104>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2280      	movs	r2, #128	@ 0x80
 8005cf0:	4393      	bics	r3, r2
 8005cf2:	001a      	movs	r2, r3
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a11      	ldr	r2, [pc, #68]	@ (8005d5c <TIM_Base_SetConfig+0xf0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d007      	beq.n	8005d2a <TIM_Base_SetConfig+0xbe>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a12      	ldr	r2, [pc, #72]	@ (8005d68 <TIM_Base_SetConfig+0xfc>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d003      	beq.n	8005d2a <TIM_Base_SetConfig+0xbe>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a11      	ldr	r2, [pc, #68]	@ (8005d6c <TIM_Base_SetConfig+0x100>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d103      	bne.n	8005d32 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	691a      	ldr	r2, [r3, #16]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	4013      	ands	r3, r2
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d106      	bne.n	8005d52 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	4393      	bics	r3, r2
 8005d4c:	001a      	movs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	611a      	str	r2, [r3, #16]
  }
}
 8005d52:	46c0      	nop			@ (mov r8, r8)
 8005d54:	46bd      	mov	sp, r7
 8005d56:	b004      	add	sp, #16
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	46c0      	nop			@ (mov r8, r8)
 8005d5c:	40012c00 	.word	0x40012c00
 8005d60:	40000400 	.word	0x40000400
 8005d64:	40002000 	.word	0x40002000
 8005d68:	40014400 	.word	0x40014400
 8005d6c:	40014800 	.word	0x40014800
 8005d70:	fffffcff 	.word	0xfffffcff

08005d74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	4393      	bics	r3, r2
 8005d8c:	001a      	movs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4a2e      	ldr	r2, [pc, #184]	@ (8005e5c <TIM_OC1_SetConfig+0xe8>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2203      	movs	r2, #3
 8005daa:	4393      	bics	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	4393      	bics	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a24      	ldr	r2, [pc, #144]	@ (8005e60 <TIM_OC1_SetConfig+0xec>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d007      	beq.n	8005de2 <TIM_OC1_SetConfig+0x6e>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a23      	ldr	r2, [pc, #140]	@ (8005e64 <TIM_OC1_SetConfig+0xf0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d003      	beq.n	8005de2 <TIM_OC1_SetConfig+0x6e>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a22      	ldr	r2, [pc, #136]	@ (8005e68 <TIM_OC1_SetConfig+0xf4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d10c      	bne.n	8005dfc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2208      	movs	r2, #8
 8005de6:	4393      	bics	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	2204      	movs	r2, #4
 8005df8:	4393      	bics	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a18      	ldr	r2, [pc, #96]	@ (8005e60 <TIM_OC1_SetConfig+0xec>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d007      	beq.n	8005e14 <TIM_OC1_SetConfig+0xa0>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a17      	ldr	r2, [pc, #92]	@ (8005e64 <TIM_OC1_SetConfig+0xf0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d003      	beq.n	8005e14 <TIM_OC1_SetConfig+0xa0>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a16      	ldr	r2, [pc, #88]	@ (8005e68 <TIM_OC1_SetConfig+0xf4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d111      	bne.n	8005e38 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	4a15      	ldr	r2, [pc, #84]	@ (8005e6c <TIM_OC1_SetConfig+0xf8>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	4a14      	ldr	r2, [pc, #80]	@ (8005e70 <TIM_OC1_SetConfig+0xfc>)
 8005e20:	4013      	ands	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	621a      	str	r2, [r3, #32]
}
 8005e52:	46c0      	nop			@ (mov r8, r8)
 8005e54:	46bd      	mov	sp, r7
 8005e56:	b006      	add	sp, #24
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	46c0      	nop			@ (mov r8, r8)
 8005e5c:	fffeff8f 	.word	0xfffeff8f
 8005e60:	40012c00 	.word	0x40012c00
 8005e64:	40014400 	.word	0x40014400
 8005e68:	40014800 	.word	0x40014800
 8005e6c:	fffffeff 	.word	0xfffffeff
 8005e70:	fffffdff 	.word	0xfffffdff

08005e74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	2210      	movs	r2, #16
 8005e8a:	4393      	bics	r3, r2
 8005e8c:	001a      	movs	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4a2c      	ldr	r2, [pc, #176]	@ (8005f54 <TIM_OC2_SetConfig+0xe0>)
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4a2b      	ldr	r2, [pc, #172]	@ (8005f58 <TIM_OC2_SetConfig+0xe4>)
 8005eaa:	4013      	ands	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	021b      	lsls	r3, r3, #8
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	4393      	bics	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a22      	ldr	r2, [pc, #136]	@ (8005f5c <TIM_OC2_SetConfig+0xe8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d10d      	bne.n	8005ef2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2280      	movs	r2, #128	@ 0x80
 8005eda:	4393      	bics	r3, r2
 8005edc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2240      	movs	r2, #64	@ 0x40
 8005eee:	4393      	bics	r3, r2
 8005ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a19      	ldr	r2, [pc, #100]	@ (8005f5c <TIM_OC2_SetConfig+0xe8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d007      	beq.n	8005f0a <TIM_OC2_SetConfig+0x96>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a18      	ldr	r2, [pc, #96]	@ (8005f60 <TIM_OC2_SetConfig+0xec>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d003      	beq.n	8005f0a <TIM_OC2_SetConfig+0x96>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a17      	ldr	r2, [pc, #92]	@ (8005f64 <TIM_OC2_SetConfig+0xf0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d113      	bne.n	8005f32 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4a16      	ldr	r2, [pc, #88]	@ (8005f68 <TIM_OC2_SetConfig+0xf4>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	4a15      	ldr	r2, [pc, #84]	@ (8005f6c <TIM_OC2_SetConfig+0xf8>)
 8005f16:	4013      	ands	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	621a      	str	r2, [r3, #32]
}
 8005f4c:	46c0      	nop			@ (mov r8, r8)
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	b006      	add	sp, #24
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	feff8fff 	.word	0xfeff8fff
 8005f58:	fffffcff 	.word	0xfffffcff
 8005f5c:	40012c00 	.word	0x40012c00
 8005f60:	40014400 	.word	0x40014400
 8005f64:	40014800 	.word	0x40014800
 8005f68:	fffffbff 	.word	0xfffffbff
 8005f6c:	fffff7ff 	.word	0xfffff7ff

08005f70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	4a31      	ldr	r2, [pc, #196]	@ (800604c <TIM_OC3_SetConfig+0xdc>)
 8005f86:	401a      	ands	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4a2d      	ldr	r2, [pc, #180]	@ (8006050 <TIM_OC3_SetConfig+0xe0>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2203      	movs	r2, #3
 8005fa4:	4393      	bics	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	4a27      	ldr	r2, [pc, #156]	@ (8006054 <TIM_OC3_SetConfig+0xe4>)
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	021b      	lsls	r3, r3, #8
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a23      	ldr	r2, [pc, #140]	@ (8006058 <TIM_OC3_SetConfig+0xe8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d10d      	bne.n	8005fea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	4a22      	ldr	r2, [pc, #136]	@ (800605c <TIM_OC3_SetConfig+0xec>)
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	021b      	lsls	r3, r3, #8
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	4a1e      	ldr	r2, [pc, #120]	@ (8006060 <TIM_OC3_SetConfig+0xf0>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a1a      	ldr	r2, [pc, #104]	@ (8006058 <TIM_OC3_SetConfig+0xe8>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d007      	beq.n	8006002 <TIM_OC3_SetConfig+0x92>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8006064 <TIM_OC3_SetConfig+0xf4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d003      	beq.n	8006002 <TIM_OC3_SetConfig+0x92>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8006068 <TIM_OC3_SetConfig+0xf8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d113      	bne.n	800602a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	4a19      	ldr	r2, [pc, #100]	@ (800606c <TIM_OC3_SetConfig+0xfc>)
 8006006:	4013      	ands	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	4a18      	ldr	r2, [pc, #96]	@ (8006070 <TIM_OC3_SetConfig+0x100>)
 800600e:	4013      	ands	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	011b      	lsls	r3, r3, #4
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	4313      	orrs	r3, r2
 8006028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	621a      	str	r2, [r3, #32]
}
 8006044:	46c0      	nop			@ (mov r8, r8)
 8006046:	46bd      	mov	sp, r7
 8006048:	b006      	add	sp, #24
 800604a:	bd80      	pop	{r7, pc}
 800604c:	fffffeff 	.word	0xfffffeff
 8006050:	fffeff8f 	.word	0xfffeff8f
 8006054:	fffffdff 	.word	0xfffffdff
 8006058:	40012c00 	.word	0x40012c00
 800605c:	fffff7ff 	.word	0xfffff7ff
 8006060:	fffffbff 	.word	0xfffffbff
 8006064:	40014400 	.word	0x40014400
 8006068:	40014800 	.word	0x40014800
 800606c:	ffffefff 	.word	0xffffefff
 8006070:	ffffdfff 	.word	0xffffdfff

08006074 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	4a24      	ldr	r2, [pc, #144]	@ (800611c <TIM_OC4_SetConfig+0xa8>)
 800608a:	401a      	ands	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4a20      	ldr	r2, [pc, #128]	@ (8006120 <TIM_OC4_SetConfig+0xac>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4a1f      	ldr	r2, [pc, #124]	@ (8006124 <TIM_OC4_SetConfig+0xb0>)
 80060a8:	4013      	ands	r3, r2
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	021b      	lsls	r3, r3, #8
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006128 <TIM_OC4_SetConfig+0xb4>)
 80060bc:	4013      	ands	r3, r2
 80060be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	031b      	lsls	r3, r3, #12
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a17      	ldr	r2, [pc, #92]	@ (800612c <TIM_OC4_SetConfig+0xb8>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d007      	beq.n	80060e4 <TIM_OC4_SetConfig+0x70>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a16      	ldr	r2, [pc, #88]	@ (8006130 <TIM_OC4_SetConfig+0xbc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d003      	beq.n	80060e4 <TIM_OC4_SetConfig+0x70>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a15      	ldr	r2, [pc, #84]	@ (8006134 <TIM_OC4_SetConfig+0xc0>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d109      	bne.n	80060f8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	4a14      	ldr	r2, [pc, #80]	@ (8006138 <TIM_OC4_SetConfig+0xc4>)
 80060e8:	4013      	ands	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	019b      	lsls	r3, r3, #6
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	621a      	str	r2, [r3, #32]
}
 8006112:	46c0      	nop			@ (mov r8, r8)
 8006114:	46bd      	mov	sp, r7
 8006116:	b006      	add	sp, #24
 8006118:	bd80      	pop	{r7, pc}
 800611a:	46c0      	nop			@ (mov r8, r8)
 800611c:	ffffefff 	.word	0xffffefff
 8006120:	feff8fff 	.word	0xfeff8fff
 8006124:	fffffcff 	.word	0xfffffcff
 8006128:	ffffdfff 	.word	0xffffdfff
 800612c:	40012c00 	.word	0x40012c00
 8006130:	40014400 	.word	0x40014400
 8006134:	40014800 	.word	0x40014800
 8006138:	ffffbfff 	.word	0xffffbfff

0800613c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a1b      	ldr	r3, [r3, #32]
 8006150:	4a21      	ldr	r2, [pc, #132]	@ (80061d8 <TIM_OC5_SetConfig+0x9c>)
 8006152:	401a      	ands	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4a1d      	ldr	r2, [pc, #116]	@ (80061dc <TIM_OC5_SetConfig+0xa0>)
 8006168:	4013      	ands	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	4a19      	ldr	r2, [pc, #100]	@ (80061e0 <TIM_OC5_SetConfig+0xa4>)
 800617a:	4013      	ands	r3, r2
 800617c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	041b      	lsls	r3, r3, #16
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4313      	orrs	r3, r2
 8006188:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a15      	ldr	r2, [pc, #84]	@ (80061e4 <TIM_OC5_SetConfig+0xa8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d007      	beq.n	80061a2 <TIM_OC5_SetConfig+0x66>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a14      	ldr	r2, [pc, #80]	@ (80061e8 <TIM_OC5_SetConfig+0xac>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d003      	beq.n	80061a2 <TIM_OC5_SetConfig+0x66>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a13      	ldr	r2, [pc, #76]	@ (80061ec <TIM_OC5_SetConfig+0xb0>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d109      	bne.n	80061b6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	4a0c      	ldr	r2, [pc, #48]	@ (80061d8 <TIM_OC5_SetConfig+0x9c>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	021b      	lsls	r3, r3, #8
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	621a      	str	r2, [r3, #32]
}
 80061d0:	46c0      	nop			@ (mov r8, r8)
 80061d2:	46bd      	mov	sp, r7
 80061d4:	b006      	add	sp, #24
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	fffeffff 	.word	0xfffeffff
 80061dc:	fffeff8f 	.word	0xfffeff8f
 80061e0:	fffdffff 	.word	0xfffdffff
 80061e4:	40012c00 	.word	0x40012c00
 80061e8:	40014400 	.word	0x40014400
 80061ec:	40014800 	.word	0x40014800

080061f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	4a22      	ldr	r2, [pc, #136]	@ (8006290 <TIM_OC6_SetConfig+0xa0>)
 8006206:	401a      	ands	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4a1e      	ldr	r2, [pc, #120]	@ (8006294 <TIM_OC6_SetConfig+0xa4>)
 800621c:	4013      	ands	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	021b      	lsls	r3, r3, #8
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	4313      	orrs	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	4a1a      	ldr	r2, [pc, #104]	@ (8006298 <TIM_OC6_SetConfig+0xa8>)
 8006230:	4013      	ands	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	051b      	lsls	r3, r3, #20
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	4313      	orrs	r3, r2
 800623e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a16      	ldr	r2, [pc, #88]	@ (800629c <TIM_OC6_SetConfig+0xac>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d007      	beq.n	8006258 <TIM_OC6_SetConfig+0x68>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a15      	ldr	r2, [pc, #84]	@ (80062a0 <TIM_OC6_SetConfig+0xb0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_OC6_SetConfig+0x68>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a14      	ldr	r2, [pc, #80]	@ (80062a4 <TIM_OC6_SetConfig+0xb4>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d109      	bne.n	800626c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	4a13      	ldr	r2, [pc, #76]	@ (80062a8 <TIM_OC6_SetConfig+0xb8>)
 800625c:	4013      	ands	r3, r2
 800625e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	029b      	lsls	r3, r3, #10
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	621a      	str	r2, [r3, #32]
}
 8006286:	46c0      	nop			@ (mov r8, r8)
 8006288:	46bd      	mov	sp, r7
 800628a:	b006      	add	sp, #24
 800628c:	bd80      	pop	{r7, pc}
 800628e:	46c0      	nop			@ (mov r8, r8)
 8006290:	ffefffff 	.word	0xffefffff
 8006294:	feff8fff 	.word	0xfeff8fff
 8006298:	ffdfffff 	.word	0xffdfffff
 800629c:	40012c00 	.word	0x40012c00
 80062a0:	40014400 	.word	0x40014400
 80062a4:	40014800 	.word	0x40014800
 80062a8:	fffbffff 	.word	0xfffbffff

080062ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	221f      	movs	r2, #31
 80062bc:	4013      	ands	r3, r2
 80062be:	2201      	movs	r2, #1
 80062c0:	409a      	lsls	r2, r3
 80062c2:	0013      	movs	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	43d2      	mvns	r2, r2
 80062ce:	401a      	ands	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a1a      	ldr	r2, [r3, #32]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	211f      	movs	r1, #31
 80062dc:	400b      	ands	r3, r1
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	4099      	lsls	r1, r3
 80062e2:	000b      	movs	r3, r1
 80062e4:	431a      	orrs	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	621a      	str	r2, [r3, #32]
}
 80062ea:	46c0      	nop			@ (mov r8, r8)
 80062ec:	46bd      	mov	sp, r7
 80062ee:	b006      	add	sp, #24
 80062f0:	bd80      	pop	{r7, pc}
	...

080062f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	223c      	movs	r2, #60	@ 0x3c
 8006302:	5c9b      	ldrb	r3, [r3, r2]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d101      	bne.n	800630c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006308:	2302      	movs	r3, #2
 800630a:	e050      	b.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	223c      	movs	r2, #60	@ 0x3c
 8006310:	2101      	movs	r1, #1
 8006312:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	223d      	movs	r2, #61	@ 0x3d
 8006318:	2102      	movs	r1, #2
 800631a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a21      	ldr	r2, [pc, #132]	@ (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d108      	bne.n	8006348 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4a20      	ldr	r2, [pc, #128]	@ (80063bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800633a:	4013      	ands	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2270      	movs	r2, #112	@ 0x70
 800634c:	4393      	bics	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a14      	ldr	r2, [pc, #80]	@ (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d00a      	beq.n	8006382 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	2380      	movs	r3, #128	@ 0x80
 8006372:	05db      	lsls	r3, r3, #23
 8006374:	429a      	cmp	r2, r3
 8006376:	d004      	beq.n	8006382 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a10      	ldr	r2, [pc, #64]	@ (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d10c      	bne.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2280      	movs	r2, #128	@ 0x80
 8006386:	4393      	bics	r3, r2
 8006388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	4313      	orrs	r3, r2
 8006392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	223d      	movs	r2, #61	@ 0x3d
 80063a0:	2101      	movs	r1, #1
 80063a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	223c      	movs	r2, #60	@ 0x3c
 80063a8:	2100      	movs	r1, #0
 80063aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	0018      	movs	r0, r3
 80063b0:	46bd      	mov	sp, r7
 80063b2:	b004      	add	sp, #16
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	46c0      	nop			@ (mov r8, r8)
 80063b8:	40012c00 	.word	0x40012c00
 80063bc:	ff0fffff 	.word	0xff0fffff
 80063c0:	40000400 	.word	0x40000400

080063c4 <memset>:
 80063c4:	0003      	movs	r3, r0
 80063c6:	1882      	adds	r2, r0, r2
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d100      	bne.n	80063ce <memset+0xa>
 80063cc:	4770      	bx	lr
 80063ce:	7019      	strb	r1, [r3, #0]
 80063d0:	3301      	adds	r3, #1
 80063d2:	e7f9      	b.n	80063c8 <memset+0x4>

080063d4 <__libc_init_array>:
 80063d4:	b570      	push	{r4, r5, r6, lr}
 80063d6:	2600      	movs	r6, #0
 80063d8:	4c0c      	ldr	r4, [pc, #48]	@ (800640c <__libc_init_array+0x38>)
 80063da:	4d0d      	ldr	r5, [pc, #52]	@ (8006410 <__libc_init_array+0x3c>)
 80063dc:	1b64      	subs	r4, r4, r5
 80063de:	10a4      	asrs	r4, r4, #2
 80063e0:	42a6      	cmp	r6, r4
 80063e2:	d109      	bne.n	80063f8 <__libc_init_array+0x24>
 80063e4:	2600      	movs	r6, #0
 80063e6:	f000 f819 	bl	800641c <_init>
 80063ea:	4c0a      	ldr	r4, [pc, #40]	@ (8006414 <__libc_init_array+0x40>)
 80063ec:	4d0a      	ldr	r5, [pc, #40]	@ (8006418 <__libc_init_array+0x44>)
 80063ee:	1b64      	subs	r4, r4, r5
 80063f0:	10a4      	asrs	r4, r4, #2
 80063f2:	42a6      	cmp	r6, r4
 80063f4:	d105      	bne.n	8006402 <__libc_init_array+0x2e>
 80063f6:	bd70      	pop	{r4, r5, r6, pc}
 80063f8:	00b3      	lsls	r3, r6, #2
 80063fa:	58eb      	ldr	r3, [r5, r3]
 80063fc:	4798      	blx	r3
 80063fe:	3601      	adds	r6, #1
 8006400:	e7ee      	b.n	80063e0 <__libc_init_array+0xc>
 8006402:	00b3      	lsls	r3, r6, #2
 8006404:	58eb      	ldr	r3, [r5, r3]
 8006406:	4798      	blx	r3
 8006408:	3601      	adds	r6, #1
 800640a:	e7f2      	b.n	80063f2 <__libc_init_array+0x1e>
 800640c:	08006524 	.word	0x08006524
 8006410:	08006524 	.word	0x08006524
 8006414:	08006528 	.word	0x08006528
 8006418:	08006524 	.word	0x08006524

0800641c <_init>:
 800641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641e:	46c0      	nop			@ (mov r8, r8)
 8006420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006422:	bc08      	pop	{r3}
 8006424:	469e      	mov	lr, r3
 8006426:	4770      	bx	lr

08006428 <_fini>:
 8006428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642a:	46c0      	nop			@ (mov r8, r8)
 800642c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800642e:	bc08      	pop	{r3}
 8006430:	469e      	mov	lr, r3
 8006432:	4770      	bx	lr
