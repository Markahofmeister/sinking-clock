
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000684c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08006908  08006908  00007908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069d4  080069d4  00008074  2**0
                  CONTENTS
  4 .ARM          00000000  080069d4  080069d4  00008074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069d4  080069d4  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069d4  080069d4  000079d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069d8  080069d8  000079d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080069dc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000074  08006a50  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08006a50  000082f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012eb0  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002baa  00000000  00000000  0001af4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0001daf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e3a  00000000  00000000  0001ed38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001810a  00000000  00000000  0001fb72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016774  00000000  00000000  00037c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098476  00000000  00000000  0004e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6866  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004210  00000000  00000000  000e68ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000eaabc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080068f0 	.word	0x080068f0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	080068f0 	.word	0x080068f0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231e      	movs	r3, #30
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-high hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	899b      	ldrh	r3, [r3, #12]
 8000258:	2201      	movs	r2, #1
 800025a:	0019      	movs	r1, r3
 800025c:	f002 fd37 	bl	8002cce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	899b      	ldrh	r3, [r3, #12]
 800026a:	2200      	movs	r2, #0
 800026c:	0019      	movs	r1, r3
 800026e:	f002 fd2e 	bl	8002cce <HAL_GPIO_WritePin>

	/*
	 *  Delay for 500 ms using hardware timer
	 */
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f005 fa18 	bl	80056ac <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	0018      	movs	r0, r3
 8000282:	f005 f9c7 	bl	8005614 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028e:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	2380      	movs	r3, #128	@ 0x80
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f5      	bcc.n	8000292 <capTouch_Init+0x76>

    // Determines the number of times to try each initialization step
	uint8_t numTries = 3;
 80002a6:	231f      	movs	r3, #31
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2203      	movs	r2, #3
 80002ac:	701a      	strb	r2, [r3, #0]

	// Verify device ID
		uint8_t deviceIDRet = 0x00;
 80002ae:	2317      	movs	r3, #23
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]

		while(numTries != 0) {
 80002b6:	e014      	b.n	80002e2 <capTouch_Init+0xc6>
			halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b8:	251e      	movs	r5, #30
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	2317      	movs	r3, #23
 80002be:	18fa      	adds	r2, r7, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ad 	bl	8000424 <capTouch_ReadDeviceID>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d00b      	beq.n	80002ee <capTouch_Init+0xd2>
				break;

			numTries--;
 80002d6:	211f      	movs	r1, #31
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	3a01      	subs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80002e2:	231f      	movs	r3, #31
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1e5      	bne.n	80002b8 <capTouch_Init+0x9c>
 80002ec:	e000      	b.n	80002f0 <capTouch_Init+0xd4>
				break;
 80002ee:	46c0      	nop			@ (mov r8, r8)
		}
		if(deviceIDRet != DEVICE_ID || numTries == 0) {
 80002f0:	2317      	movs	r3, #23
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80002f8:	d104      	bne.n	8000304 <capTouch_Init+0xe8>
 80002fa:	231f      	movs	r3, #31
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <capTouch_Init+0xec>
			return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e089      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->deviceID = deviceIDRet;
 8000308:	2317      	movs	r3, #23
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	739a      	strb	r2, [r3, #14]

		numTries = 3;
 8000312:	231f      	movs	r3, #31
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	2203      	movs	r2, #3
 8000318:	701a      	strb	r2, [r3, #0]

	// Force Device Recalibration
		while(numTries != 0) {
 800031a:	e019      	b.n	8000350 <capTouch_Init+0x134>
			halRet = capTouch_Recalibrate(capTouch);
 800031c:	231e      	movs	r3, #30
 800031e:	18fc      	adds	r4, r7, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	0018      	movs	r0, r3
 8000324:	f000 f8c0 	bl	80004a8 <capTouch_Recalibrate>
 8000328:	0003      	movs	r3, r0
 800032a:	7023      	strb	r3, [r4, #0]

			// Wait until calibration sequence completes
			while(capTouch_checkCal(capTouch)) {}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f8db 	bl	80004ec <capTouch_checkCal>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d1f9      	bne.n	800032e <capTouch_Init+0x112>

			if (halRet == HAL_OK)
 800033a:	231e      	movs	r3, #30
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00b      	beq.n	800035c <capTouch_Init+0x140>
				break;

			numTries--;
 8000344:	211f      	movs	r1, #31
 8000346:	187b      	adds	r3, r7, r1
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	187b      	adds	r3, r7, r1
 800034c:	3a01      	subs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 8000350:	231f      	movs	r3, #31
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1e0      	bne.n	800031c <capTouch_Init+0x100>
 800035a:	e000      	b.n	800035e <capTouch_Init+0x142>
				break;
 800035c:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 800035e:	231f      	movs	r3, #31
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d101      	bne.n	800036c <capTouch_Init+0x150>
			return 2;
 8000368:	2302      	movs	r3, #2
 800036a:	e057      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 800036c:	231f      	movs	r3, #31
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2203      	movs	r2, #3
 8000372:	701a      	strb	r2, [r3, #0]

	// Get initial reading of channels
		while(numTries != 0) {
 8000374:	e011      	b.n	800039a <capTouch_Init+0x17e>

			halRet = capTouch_readChannels(capTouch);
 8000376:	251e      	movs	r5, #30
 8000378:	197c      	adds	r4, r7, r5
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	0018      	movs	r0, r3
 800037e:	f000 f8f9 	bl	8000574 <capTouch_readChannels>
 8000382:	0003      	movs	r3, r0
 8000384:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 8000386:	197b      	adds	r3, r7, r5
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <capTouch_Init+0x18a>
				break;

			numTries--;
 800038e:	211f      	movs	r1, #31
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	3a01      	subs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 800039a:	231f      	movs	r3, #31
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e8      	bne.n	8000376 <capTouch_Init+0x15a>
 80003a4:	e000      	b.n	80003a8 <capTouch_Init+0x18c>
				break;
 80003a6:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003a8:	231f      	movs	r3, #31
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <capTouch_Init+0x19a>
			return 3;
 80003b2:	2303      	movs	r3, #3
 80003b4:	e032      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 80003b6:	231f      	movs	r3, #31
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2203      	movs	r2, #3
 80003bc:	701a      	strb	r2, [r3, #0]

	// Enable keys based on passed initialization byte
		while(numTries != 0) {
 80003be:	e015      	b.n	80003ec <capTouch_Init+0x1d0>

			halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80003c0:	251e      	movs	r5, #30
 80003c2:	197c      	adds	r4, r7, r5
 80003c4:	2334      	movs	r3, #52	@ 0x34
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f914 	bl	80005fc <capTouch_enableKeys>
 80003d4:	0003      	movs	r3, r0
 80003d6:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00b      	beq.n	80003f8 <capTouch_Init+0x1dc>
				break;

			numTries--;
 80003e0:	211f      	movs	r1, #31
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	3a01      	subs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80003ec:	231f      	movs	r3, #31
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1e4      	bne.n	80003c0 <capTouch_Init+0x1a4>
 80003f6:	e000      	b.n	80003fa <capTouch_Init+0x1de>
				break;
 80003f8:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003fa:	231f      	movs	r3, #31
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <capTouch_Init+0x1ec>
			return 4;
 8000404:	2304      	movs	r3, #4
 8000406:	e009      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->keys = keyEnFlags;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2234      	movs	r2, #52	@ 0x34
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	73da      	strb	r2, [r3, #15]

		numTries = 3;
 8000412:	231f      	movs	r3, #31
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]

	return 0;
 800041a:	2300      	movs	r3, #0

}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	b008      	add	sp, #32
 8000422:	bdb0      	pop	{r4, r5, r7, pc}

08000424 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 800042e:	230e      	movs	r3, #14
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000436:	250f      	movs	r5, #15
 8000438:	197b      	adds	r3, r7, r5
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <capTouch_ReadDeviceID+0x80>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f002 fd4b 	bl	8002ef4 <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000462:	197b      	adds	r3, r7, r5
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 800046a:	197b      	adds	r3, r7, r5
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	e014      	b.n	800049a <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	250f      	movs	r5, #15
 8000476:	197c      	adds	r4, r7, r5
 8000478:	260e      	movs	r6, #14
 800047a:	19ba      	adds	r2, r7, r6
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2136      	movs	r1, #54	@ 0x36
 8000486:	f002 fe5f 	bl	8003148 <HAL_I2C_Master_Receive>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000496:	197b      	adds	r3, r7, r5
 8000498:	781b      	ldrb	r3, [r3, #0]

}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b005      	add	sp, #20
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	08006908 	.word	0x08006908

080004a8 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b0:	210f      	movs	r1, #15
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 80004b8:	260c      	movs	r6, #12
 80004ba:	19bb      	adds	r3, r7, r6
 80004bc:	22c8      	movs	r2, #200	@ 0xc8
 80004be:	4252      	negs	r2, r2
 80004c0:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	000d      	movs	r5, r1
 80004c8:	187c      	adds	r4, r7, r1
 80004ca:	19ba      	adds	r2, r7, r6
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2302      	movs	r3, #2
 80004d4:	2136      	movs	r1, #54	@ 0x36
 80004d6:	f002 fd0d 	bl	8002ef4 <HAL_I2C_Master_Transmit>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]

}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b005      	add	sp, #20
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080004ec <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004f4:	210f      	movs	r1, #15
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80004fc:	230d      	movs	r3, #13
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 8000504:	260c      	movs	r6, #12
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <capTouch_checkCal+0x84>)
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	000d      	movs	r5, r1
 8000514:	187c      	adds	r4, r7, r1
 8000516:	19ba      	adds	r2, r7, r6
 8000518:	2301      	movs	r3, #1
 800051a:	425b      	negs	r3, r3
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2136      	movs	r1, #54	@ 0x36
 8000522:	f002 fce7 	bl	8002ef4 <HAL_I2C_Master_Transmit>
 8000526:	0003      	movs	r3, r0
 8000528:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <capTouch_checkCal+0x4c>
		return halRet;
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	e016      	b.n	8000566 <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230f      	movs	r3, #15
 800053e:	18fc      	adds	r4, r7, r3
 8000540:	250d      	movs	r5, #13
 8000542:	197a      	adds	r2, r7, r5
 8000544:	2301      	movs	r3, #1
 8000546:	425b      	negs	r3, r3
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	2136      	movs	r1, #54	@ 0x36
 800054e:	f002 fdfb 	bl	8003148 <HAL_I2C_Master_Receive>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000556:	197b      	adds	r3, r7, r5
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	210e      	movs	r1, #14
 800055c:	187b      	adds	r3, r7, r1
 800055e:	09d2      	lsrs	r2, r2, #7
 8000560:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	781b      	ldrb	r3, [r3, #0]

}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b005      	add	sp, #20
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	0800690c 	.word	0x0800690c

08000574 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800057c:	210f      	movs	r1, #15
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000584:	230e      	movs	r3, #14
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800058c:	260c      	movs	r6, #12
 800058e:	19bb      	adds	r3, r7, r6
 8000590:	4a19      	ldr	r2, [pc, #100]	@ (80005f8 <capTouch_readChannels+0x84>)
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	000d      	movs	r5, r1
 800059c:	187c      	adds	r4, r7, r1
 800059e:	19ba      	adds	r2, r7, r6
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	2136      	movs	r1, #54	@ 0x36
 80005aa:	f002 fca3 	bl	8002ef4 <HAL_I2C_Master_Transmit>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80005b2:	197b      	adds	r3, r7, r5
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <capTouch_readChannels+0x4c>
		return halRet;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e017      	b.n	80005f0 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	250f      	movs	r5, #15
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	260e      	movs	r6, #14
 80005ca:	19ba      	adds	r2, r7, r6
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2136      	movs	r1, #54	@ 0x36
 80005d6:	f002 fdb7 	bl	8003148 <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 80005de:	19bb      	adds	r3, r7, r6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	227f      	movs	r2, #127	@ 0x7f
 80005e4:	4013      	ands	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	741a      	strb	r2, [r3, #16]

	return halRet;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]

}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b005      	add	sp, #20
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	08006910 	.word	0x08006910

080005fc <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	b08b      	sub	sp, #44	@ 0x2c
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	000a      	movs	r2, r1
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800060a:	241e      	movs	r4, #30
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000612:	2314      	movs	r3, #20
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	4a39      	ldr	r2, [pc, #228]	@ (80006fc <capTouch_enableKeys+0x100>)
 8000618:	6811      	ldr	r1, [r2, #0]
 800061a:	6019      	str	r1, [r3, #0]
 800061c:	8891      	ldrh	r1, [r2, #4]
 800061e:	8099      	strh	r1, [r3, #4]
 8000620:	7992      	ldrb	r2, [r2, #6]
 8000622:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000624:	260c      	movs	r6, #12
 8000626:	19bb      	adds	r3, r7, r6
 8000628:	4a35      	ldr	r2, [pc, #212]	@ (8000700 <capTouch_enableKeys+0x104>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	6019      	str	r1, [r3, #0]
 800062e:	8891      	ldrh	r1, [r2, #4]
 8000630:	8099      	strh	r1, [r3, #4]
 8000632:	7992      	ldrb	r2, [r2, #6]
 8000634:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	0025      	movs	r5, r4
 800063c:	193c      	adds	r4, r7, r4
 800063e:	19ba      	adds	r2, r7, r6
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	2136      	movs	r1, #54	@ 0x36
 800064a:	f002 fc53 	bl	8002ef4 <HAL_I2C_Master_Transmit>
 800064e:	0003      	movs	r3, r0
 8000650:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000652:	197b      	adds	r3, r7, r5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <capTouch_enableKeys+0x64>
		return halRet;
 800065a:	197b      	adds	r3, r7, r5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e049      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	251e      	movs	r5, #30
 8000666:	197c      	adds	r4, r7, r5
 8000668:	2314      	movs	r3, #20
 800066a:	18fa      	adds	r2, r7, r3
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2307      	movs	r3, #7
 8000674:	2136      	movs	r1, #54	@ 0x36
 8000676:	f002 fd67 	bl	8003148 <HAL_I2C_Master_Receive>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800067e:	197b      	adds	r3, r7, r5
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <capTouch_enableKeys+0x90>
		return halRet;
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	e033      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800068c:	231f      	movs	r3, #31
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e01c      	b.n	80006d0 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 8000696:	201f      	movs	r0, #31
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2414      	movs	r4, #20
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	5cd3      	ldrb	r3, [r2, r3]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	7819      	ldrb	r1, [r3, #0]
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4119      	asrs	r1, r3
 80006b0:	000b      	movs	r3, r1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	400b      	ands	r3, r1
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	434a      	muls	r2, r1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 80006c6:	183b      	adds	r3, r7, r0
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	3201      	adds	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	231f      	movs	r3, #31
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d9dd      	bls.n	8000696 <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 80006da:	251e      	movs	r5, #30
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	2314      	movs	r3, #20
 80006e0:	18fa      	adds	r2, r7, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f80c 	bl	8000704 <capTouch_SetAveragingFactor>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]

}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	@ 0x24
 80006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fc:	08006914 	.word	0x08006914
 8000700:	0800691c 	.word	0x0800691c

08000704 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800070e:	241e      	movs	r4, #30
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000716:	2314      	movs	r3, #20
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	4a5d      	ldr	r2, [pc, #372]	@ (8000890 <capTouch_SetAveragingFactor+0x18c>)
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	6019      	str	r1, [r3, #0]
 8000720:	8891      	ldrh	r1, [r2, #4]
 8000722:	8099      	strh	r1, [r3, #4]
 8000724:	7992      	ldrb	r2, [r2, #6]
 8000726:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000728:	260c      	movs	r6, #12
 800072a:	19bb      	adds	r3, r7, r6
 800072c:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <capTouch_SetAveragingFactor+0x190>)
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	6019      	str	r1, [r3, #0]
 8000732:	8891      	ldrh	r1, [r2, #4]
 8000734:	8099      	strh	r1, [r3, #4]
 8000736:	7992      	ldrb	r2, [r2, #6]
 8000738:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	0025      	movs	r5, r4
 8000740:	193c      	adds	r4, r7, r4
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2136      	movs	r1, #54	@ 0x36
 800074e:	f002 fbd1 	bl	8002ef4 <HAL_I2C_Master_Transmit>
 8000752:	0003      	movs	r3, r0
 8000754:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000756:	197b      	adds	r3, r7, r5
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 800075e:	197b      	adds	r3, r7, r5
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	e090      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	251e      	movs	r5, #30
 800076a:	197c      	adds	r4, r7, r5
 800076c:	2314      	movs	r3, #20
 800076e:	18fa      	adds	r2, r7, r3
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2307      	movs	r3, #7
 8000778:	2136      	movs	r1, #54	@ 0x36
 800077a:	f002 fce5 	bl	8003148 <HAL_I2C_Master_Receive>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000782:	197b      	adds	r3, r7, r5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e07a      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000790:	2308      	movs	r3, #8
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000798:	231d      	movs	r3, #29
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80007a0:	231f      	movs	r3, #31
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e041      	b.n	800082e <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80007aa:	241f      	movs	r4, #31
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2214      	movs	r2, #20
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	201d      	movs	r0, #29
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	2103      	movs	r1, #3
 80007bc:	400a      	ands	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	251c      	movs	r5, #28
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	1839      	adds	r1, r7, r0
 80007d6:	197a      	adds	r2, r7, r5
 80007d8:	7809      	ldrb	r1, [r1, #0]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	220c      	movs	r2, #12
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	5cd2      	ldrb	r2, [r2, r3]
 80007ea:	2108      	movs	r1, #8
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	251e      	movs	r5, #30
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	187a      	adds	r2, r7, r1
 8000802:	2301      	movs	r3, #1
 8000804:	425b      	negs	r3, r3
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2136      	movs	r1, #54	@ 0x36
 800080c:	f002 fb72 	bl	8002ef4 <HAL_I2C_Master_Transmit>
 8000810:	0003      	movs	r3, r0
 8000812:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 800081c:	197b      	adds	r3, r7, r5
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e031      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 8000822:	211f      	movs	r1, #31
 8000824:	187b      	adds	r3, r7, r1
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	3201      	adds	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	231f      	movs	r3, #31
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d9b8      	bls.n	80007aa <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	251e      	movs	r5, #30
 800083e:	197c      	adds	r4, r7, r5
 8000840:	230c      	movs	r3, #12
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2136      	movs	r1, #54	@ 0x36
 800084e:	f002 fb51 	bl	8002ef4 <HAL_I2C_Master_Transmit>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 800085e:	197b      	adds	r3, r7, r5
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e010      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	251e      	movs	r5, #30
 800086a:	197c      	adds	r4, r7, r5
 800086c:	2314      	movs	r3, #20
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2307      	movs	r3, #7
 8000878:	2136      	movs	r1, #54	@ 0x36
 800087a:	f002 fc65 	bl	8003148 <HAL_I2C_Master_Receive>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781b      	ldrb	r3, [r3, #0]

}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	@ 0x24
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	08006914 	.word	0x08006914
 8000894:	0800691c 	.word	0x0800691c

08000898 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008a2:	231e      	movs	r3, #30
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80008aa:	2314      	movs	r3, #20
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <capTouch_SetDetectionIntegrator+0xdc>)
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	6019      	str	r1, [r3, #0]
 80008b4:	8891      	ldrh	r1, [r2, #4]
 80008b6:	8099      	strh	r1, [r3, #4]
 80008b8:	7992      	ldrb	r2, [r2, #6]
 80008ba:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 80008bc:	2310      	movs	r3, #16
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80008c4:	231f      	movs	r3, #31
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e022      	b.n	8000914 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 80008ce:	251f      	movs	r5, #31
 80008d0:	197b      	adds	r3, r7, r5
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2214      	movs	r2, #20
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	5cd2      	ldrb	r2, [r2, r3]
 80008da:	2110      	movs	r1, #16
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	231e      	movs	r3, #30
 80008f4:	18fc      	adds	r4, r7, r3
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2136      	movs	r1, #54	@ 0x36
 8000902:	f002 faf7 	bl	8002ef4 <HAL_I2C_Master_Transmit>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 800090a:	197b      	adds	r3, r7, r5
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	197b      	adds	r3, r7, r5
 8000910:	3201      	adds	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	231f      	movs	r3, #31
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d9d7      	bls.n	80008ce <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800091e:	2608      	movs	r6, #8
 8000920:	19bb      	adds	r3, r7, r6
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <capTouch_SetDetectionIntegrator+0xe0>)
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	6019      	str	r1, [r3, #0]
 8000928:	8891      	ldrh	r1, [r2, #4]
 800092a:	8099      	strh	r1, [r3, #4]
 800092c:	7992      	ldrb	r2, [r2, #6]
 800092e:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	251e      	movs	r5, #30
 8000936:	197c      	adds	r4, r7, r5
 8000938:	2314      	movs	r3, #20
 800093a:	18fa      	adds	r2, r7, r3
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2136      	movs	r1, #54	@ 0x36
 8000946:	f002 fad5 	bl	8002ef4 <HAL_I2C_Master_Transmit>
 800094a:	0003      	movs	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	197c      	adds	r4, r7, r5
 8000954:	19ba      	adds	r2, r7, r6
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2307      	movs	r3, #7
 800095e:	2136      	movs	r1, #54	@ 0x36
 8000960:	f002 fbf2 	bl	8003148 <HAL_I2C_Master_Receive>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000968:	197b      	adds	r3, r7, r5
 800096a:	781b      	ldrb	r3, [r3, #0]

}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	@ 0x24
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	08006924 	.word	0x08006924
 8000978:	08006914 	.word	0x08006914

0800097c <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


HAL_StatusTypeDef initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b09a      	sub	sp, #104	@ 0x68
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000988:	2567      	movs	r5, #103	@ 0x67
 800098a:	197b      	adds	r3, r7, r5
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 8000990:	243c      	movs	r4, #60	@ 0x3c
 8000992:	193b      	adds	r3, r7, r4
 8000994:	0018      	movs	r0, r3
 8000996:	2328      	movs	r3, #40	@ 0x28
 8000998:	001a      	movs	r2, r3
 800099a:	2100      	movs	r1, #0
 800099c:	f005 ff72 	bl	8006884 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	781a      	ldrb	r2, [r3, #0]
 80009a4:	0021      	movs	r1, r4
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	789a      	ldrb	r2, [r3, #2]
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	78da      	ldrb	r2, [r3, #3]
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	78da      	ldrb	r2, [r3, #3]
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009d6:	0008      	movs	r0, r1
 80009d8:	183b      	adds	r3, r7, r0
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009de:	183b      	adds	r3, r7, r0
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80009e4:	183b      	adds	r3, r7, r0
 80009e6:	4a19      	ldr	r2, [pc, #100]	@ (8000a4c <initRTCInternalAlarm+0xd0>)
 80009e8:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009ea:	183b      	adds	r3, r7, r0
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009f0:	183b      	adds	r3, r7, r0
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 80009f6:	183b      	adds	r3, r7, r0
 80009f8:	2220      	movs	r2, #32
 80009fa:	2101      	movs	r1, #1
 80009fc:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 80009fe:	0001      	movs	r1, r0
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2280      	movs	r2, #128	@ 0x80
 8000a04:	0052      	lsls	r2, r2, #1
 8000a06:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8000a08:	197c      	adds	r4, r7, r5
 8000a0a:	1879      	adds	r1, r7, r1
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f004 f987 	bl	8004d24 <HAL_RTC_SetAlarm_IT>
 8000a16:	0003      	movs	r3, r0
 8000a18:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000a1a:	197b      	adds	r3, r7, r5
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <initRTCInternalAlarm+0xac>
		return halRet;
 8000a22:	197b      	adds	r3, r7, r5
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	e00d      	b.n	8000a44 <initRTCInternalAlarm+0xc8>

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8000a28:	2567      	movs	r5, #103	@ 0x67
 8000a2a:	197c      	adds	r4, r7, r5
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	005a      	lsls	r2, r3, #1
 8000a30:	2314      	movs	r3, #20
 8000a32:	18f9      	adds	r1, r7, r3
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	2300      	movs	r3, #0
 8000a38:	f004 fab4 	bl	8004fa4 <HAL_RTC_GetAlarm>
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	7023      	strb	r3, [r4, #0]
	return halRet;
 8000a40:	197b      	adds	r3, r7, r5
 8000a42:	781b      	ldrb	r3, [r3, #0]

}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b01a      	add	sp, #104	@ 0x68
 8000a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a4c:	80800080 	.word	0x80800080

08000a50 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2200      	movs	r2, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f004 f822 	bl	8004aac <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f004 f90a 	bl	8004c88 <HAL_RTC_GetDate>

}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b004      	add	sp, #16
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	b08d      	sub	sp, #52	@ 0x34
 8000a80:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a82:	f001 fe3f 	bl	8002704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f000 f95f 	bl	8000d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f000 fc11 	bl	80012b0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000a8e:	f000 fa0f 	bl	8000eb0 <MX_RTC_Init>
  MX_I2C1_Init();
 8000a92:	f000 f9cd 	bl	8000e30 <MX_I2C1_Init>
  MX_TIM14_Init();
 8000a96:	f000 fbab 	bl	80011f0 <MX_TIM14_Init>
  MX_TIM2_Init();
 8000a9a:	f000 fb49 	bl	8001130 <MX_TIM2_Init>
  MX_TIM16_Init();
 8000a9e:	f000 fbcd 	bl	800123c <MX_TIM16_Init>
  MX_TIM1_Init();
 8000aa2:	f000 fa99 	bl	8000fd8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // HAL Status handle for error-checking
  HAL_StatusTypeDef halRet = HAL_OK;
 8000aa6:	2517      	movs	r5, #23
 8000aa8:	197b      	adds	r3, r7, r5
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]

  // Set Smooth Calibration Value
  halRet = HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 8000aae:	4b92      	ldr	r3, [pc, #584]	@ (8000cf8 <main+0x27c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	197c      	adds	r4, r7, r5
 8000ab4:	2280      	movs	r2, #128	@ 0x80
 8000ab6:	01d1      	lsls	r1, r2, #7
 8000ab8:	4890      	ldr	r0, [pc, #576]	@ (8000cfc <main+0x280>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	f004 fc67 	bl	800538e <HAL_RTCEx_SetSmoothCalib>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	7023      	strb	r3, [r4, #0]
    							RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);
  if(halRet != HAL_OK) {
 8000ac4:	197b      	adds	r3, r7, r5
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <main+0x54>
	  // Failure to talk to RTC is a hard failure
	  dispFailure();
 8000acc:	f001 f9dc 	bl	8001e88 <dispFailure>
  }

  // Init the internal RTC alarm time to track the current time
  halRet = initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 8000ad0:	2517      	movs	r5, #23
 8000ad2:	197c      	adds	r4, r7, r5
 8000ad4:	4a8a      	ldr	r2, [pc, #552]	@ (8000d00 <main+0x284>)
 8000ad6:	498b      	ldr	r1, [pc, #556]	@ (8000d04 <main+0x288>)
 8000ad8:	4b88      	ldr	r3, [pc, #544]	@ (8000cfc <main+0x280>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f7ff ff4e 	bl	800097c <initRTCInternalAlarm>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	7023      	strb	r3, [r4, #0]
  if(halRet != HAL_OK) {
 8000ae4:	197b      	adds	r3, r7, r5
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <main+0x74>
  	  // Failure to initialize RTC alarm is a hard failure
  	  dispFailure();
 8000aec:	f001 f9cc 	bl	8001e88 <dispFailure>
    }

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000af0:	2380      	movs	r3, #128	@ 0x80
 8000af2:	009c      	lsls	r4, r3, #2
 8000af4:	2380      	movs	r3, #128	@ 0x80
 8000af6:	00dd      	lsls	r5, r3, #3
 8000af8:	2680      	movs	r6, #128	@ 0x80
 8000afa:	2340      	movs	r3, #64	@ 0x40
 8000afc:	469c      	mov	ip, r3
 8000afe:	2380      	movs	r3, #128	@ 0x80
 8000b00:	011a      	lsls	r2, r3, #4
 8000b02:	4b81      	ldr	r3, [pc, #516]	@ (8000d08 <main+0x28c>)
 8000b04:	6819      	ldr	r1, [r3, #0]
 8000b06:	4b81      	ldr	r3, [pc, #516]	@ (8000d0c <main+0x290>)
 8000b08:	6818      	ldr	r0, [r3, #0]
 8000b0a:	4b81      	ldr	r3, [pc, #516]	@ (8000d10 <main+0x294>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	9304      	str	r3, [sp, #16]
 8000b10:	9003      	str	r0, [sp, #12]
 8000b12:	9102      	str	r1, [sp, #8]
 8000b14:	4b7f      	ldr	r3, [pc, #508]	@ (8000d14 <main+0x298>)
 8000b16:	9301      	str	r3, [sp, #4]
 8000b18:	9200      	str	r2, [sp, #0]
 8000b1a:	4663      	mov	r3, ip
 8000b1c:	0032      	movs	r2, r6
 8000b1e:	0029      	movs	r1, r5
 8000b20:	0020      	movs	r0, r4
 8000b22:	f001 fa23 	bl	8001f6c <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);

    // Set to max brightness
    sevSeg_setIntensity(sevSeg_intensityDuty[2]);
 8000b26:	234b      	movs	r3, #75	@ 0x4b
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f001 fb53 	bl	80021d4 <sevSeg_setIntensity>

	halRet = updateAndDisplayTime();
 8000b2e:	2517      	movs	r5, #23
 8000b30:	197c      	adds	r4, r7, r5
 8000b32:	f000 fc9f 	bl	8001474 <updateAndDisplayTime>
 8000b36:	0003      	movs	r3, r0
 8000b38:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000b3a:	197b      	adds	r3, r7, r5
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <main+0xca>
	  // Failure to display current time is a hard failure
	  dispFailure();
 8000b42:	f001 f9a1 	bl	8001e88 <dispFailure>
    /*
     * Initialize capacitive touch sensor
     */

	// Used to separate return initializations into critical and non-critical errors.
	uint8_t initRet = 0;
 8000b46:	2116      	movs	r1, #22
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]

    initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 8000b4e:	4b6e      	ldr	r3, [pc, #440]	@ (8000d08 <main+0x28c>)
 8000b50:	681d      	ldr	r5, [r3, #0]
 8000b52:	2380      	movs	r3, #128	@ 0x80
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4a70      	ldr	r2, [pc, #448]	@ (8000d18 <main+0x29c>)
 8000b58:	7812      	ldrb	r2, [r2, #0]
 8000b5a:	187c      	adds	r4, r7, r1
 8000b5c:	4e6f      	ldr	r6, [pc, #444]	@ (8000d1c <main+0x2a0>)
 8000b5e:	4970      	ldr	r1, [pc, #448]	@ (8000d20 <main+0x2a4>)
 8000b60:	4870      	ldr	r0, [pc, #448]	@ (8000d24 <main+0x2a8>)
 8000b62:	9201      	str	r2, [sp, #4]
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	0033      	movs	r3, r6
 8000b68:	002a      	movs	r2, r5
 8000b6a:	f7ff fb57 	bl	800021c <capTouch_Init>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	7023      	strb	r3, [r4, #0]
    						&capTouchResetPort, capTouchResetPin, capTouchChannels);
    if( (initRet == 1) || (initRet == 3) || (initRet == 4)) {
 8000b72:	2116      	movs	r1, #22
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d007      	beq.n	8000b8c <main+0x110>
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d003      	beq.n	8000b8c <main+0x110>
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d102      	bne.n	8000b92 <main+0x116>
    	/* Critical Errors:
    	 * 1 = Failure to read correct device ID
    	 * 2 = Failure to read Keys
    	 * 3 = Failure to enable keys
    	 */
    	dispFailure();
 8000b8c:	f001 f97c 	bl	8001e88 <dispFailure>
 8000b90:	e00d      	b.n	8000bae <main+0x132>
    }
    else if (initRet == 2) {
 8000b92:	2316      	movs	r3, #22
 8000b94:	18fb      	adds	r3, r7, r3
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d102      	bne.n	8000ba2 <main+0x126>
    	/*
    	 * Non-critical Errors:
    	 * 2 = Failure to Recalibrate
    	 */
    	dispFault();
 8000b9c:	f001 f966 	bl	8001e6c <dispFault>
 8000ba0:	e005      	b.n	8000bae <main+0x132>
    }
    else if(initRet == 0) {
 8000ba2:	2316      	movs	r3, #22
 8000ba4:	18fb      	adds	r3, r7, r3
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d100      	bne.n	8000bae <main+0x132>
    	// initRet = 0 = all is well
    	__NOP();
 8000bac:	46c0      	nop			@ (mov r8, r8)
    }

    // Set averaging factor
    uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 8000bae:	4b5e      	ldr	r3, [pc, #376]	@ (8000d28 <main+0x2ac>)
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	210c      	movs	r1, #12
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	4b5b      	ldr	r3, [pc, #364]	@ (8000d28 <main+0x2ac>)
 8000bba:	781a      	ldrb	r2, [r3, #0]
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	705a      	strb	r2, [r3, #1]
 8000bc0:	4b59      	ldr	r3, [pc, #356]	@ (8000d28 <main+0x2ac>)
 8000bc2:	781a      	ldrb	r2, [r3, #0]
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	709a      	strb	r2, [r3, #2]
 8000bc8:	4b57      	ldr	r3, [pc, #348]	@ (8000d28 <main+0x2ac>)
 8000bca:	781a      	ldrb	r2, [r3, #0]
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	70da      	strb	r2, [r3, #3]
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	711a      	strb	r2, [r3, #4]
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	715a      	strb	r2, [r3, #5]
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2200      	movs	r2, #0
 8000be0:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000be2:	2517      	movs	r5, #23
 8000be4:	197c      	adds	r4, r7, r5
 8000be6:	187a      	adds	r2, r7, r1
 8000be8:	4b4e      	ldr	r3, [pc, #312]	@ (8000d24 <main+0x2a8>)
 8000bea:	0011      	movs	r1, r2
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff fd89 	bl	8000704 <capTouch_SetAveragingFactor>
 8000bf2:	0003      	movs	r3, r0
 8000bf4:	7023      	strb	r3, [r4, #0]

    if(halRet != HAL_OK) {
 8000bf6:	197b      	adds	r3, r7, r5
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <main+0x186>
    	// This is sensitivity-setting and a non-critical error
    	dispFault();
 8000bfe:	f001 f935 	bl	8001e6c <dispFault>
    }

    // Set detection integration factors
    uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 8000c02:	4b4a      	ldr	r3, [pc, #296]	@ (8000d2c <main+0x2b0>)
 8000c04:	781a      	ldrb	r2, [r3, #0]
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	4b48      	ldr	r3, [pc, #288]	@ (8000d2c <main+0x2b0>)
 8000c0c:	781a      	ldrb	r2, [r3, #0]
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	705a      	strb	r2, [r3, #1]
 8000c12:	4b46      	ldr	r3, [pc, #280]	@ (8000d2c <main+0x2b0>)
 8000c14:	781a      	ldrb	r2, [r3, #0]
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	709a      	strb	r2, [r3, #2]
 8000c1a:	4b44      	ldr	r3, [pc, #272]	@ (8000d2c <main+0x2b0>)
 8000c1c:	781a      	ldrb	r2, [r3, #0]
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	70da      	strb	r2, [r3, #3]
 8000c22:	4b42      	ldr	r3, [pc, #264]	@ (8000d2c <main+0x2b0>)
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	711a      	strb	r2, [r3, #4]
 8000c2a:	4b40      	ldr	r3, [pc, #256]	@ (8000d2c <main+0x2b0>)
 8000c2c:	781a      	ldrb	r2, [r3, #0]
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	715a      	strb	r2, [r3, #5]
 8000c32:	4b3e      	ldr	r3, [pc, #248]	@ (8000d2c <main+0x2b0>)
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 8000c3a:	2517      	movs	r5, #23
 8000c3c:	197c      	adds	r4, r7, r5
 8000c3e:	1d3a      	adds	r2, r7, #4
 8000c40:	4b38      	ldr	r3, [pc, #224]	@ (8000d24 <main+0x2a8>)
 8000c42:	0011      	movs	r1, r2
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff fe27 	bl	8000898 <capTouch_SetDetectionIntegrator>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	7023      	strb	r3, [r4, #0]
    if(halRet != HAL_OK) {
 8000c4e:	197b      	adds	r3, r7, r5
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <main+0x1de>
    	// This is sensitivity-setting and a non-critical error
		dispFault();
 8000c56:	f001 f909 	bl	8001e6c <dispFault>
    }

    userAlarmToggle = false;			//Default to off
 8000c5a:	4b35      	ldr	r3, [pc, #212]	@ (8000d30 <main+0x2b4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
     * initialize the alarm time to a default value.
     *
     * Else, initialize to whatever is stored in backup registers.
     */

    if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 8000c60:	4b34      	ldr	r3, [pc, #208]	@ (8000d34 <main+0x2b8>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b25      	ldr	r3, [pc, #148]	@ (8000cfc <main+0x280>)
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f004 fc60 	bl	800552e <HAL_RTCEx_BKUPRead>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d11c      	bne.n	8000cb0 <main+0x234>

    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 8000c76:	4b30      	ldr	r3, [pc, #192]	@ (8000d38 <main+0x2bc>)
 8000c78:	6819      	ldr	r1, [r3, #0]
 8000c7a:	4b20      	ldr	r3, [pc, #128]	@ (8000cfc <main+0x280>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f004 fc38 	bl	80054f4 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 8000c84:	4b2d      	ldr	r3, [pc, #180]	@ (8000d3c <main+0x2c0>)
 8000c86:	6819      	ldr	r1, [r3, #0]
 8000c88:	4b1c      	ldr	r3, [pc, #112]	@ (8000cfc <main+0x280>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f004 fc31 	bl	80054f4 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 8000c92:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <main+0x2c4>)
 8000c94:	6819      	ldr	r1, [r3, #0]
 8000c96:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <main+0x280>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f004 fc2a 	bl	80054f4 <HAL_RTCEx_BKUPWrite>

    	// Write backup register with a non-zero value to signify that it has been initialized before
    	HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8000ca0:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <main+0x2b8>)
 8000ca2:	6819      	ldr	r1, [r3, #0]
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	425a      	negs	r2, r3
 8000ca8:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <main+0x280>)
 8000caa:	0018      	movs	r0, r3
 8000cac:	f004 fc22 	bl	80054f4 <HAL_RTCEx_BKUPWrite>

    }

	userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8000cb0:	4b21      	ldr	r3, [pc, #132]	@ (8000d38 <main+0x2bc>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <main+0x280>)
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f004 fc38 	bl	800552e <HAL_RTCEx_BKUPRead>
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b20      	ldr	r3, [pc, #128]	@ (8000d44 <main+0x2c8>)
 8000cc4:	701a      	strb	r2, [r3, #0]
	userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <main+0x2c0>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <main+0x280>)
 8000ccc:	0011      	movs	r1, r2
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f004 fc2d 	bl	800552e <HAL_RTCEx_BKUPRead>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <main+0x2c8>)
 8000cda:	705a      	strb	r2, [r3, #1]
	userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 8000cdc:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <main+0x2c4>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <main+0x280>)
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f004 fc22 	bl	800552e <HAL_RTCEx_BKUPRead>
 8000cea:	0003      	movs	r3, r0
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <main+0x2c8>)
 8000cf0:	70da      	strb	r2, [r3, #3]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	e7fd      	b.n	8000cf2 <main+0x276>
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	2000002c 	.word	0x2000002c
 8000cfc:	2000011c 	.word	0x2000011c
 8000d00:	200000ac 	.word	0x200000ac
 8000d04:	20000098 	.word	0x20000098
 8000d08:	20000044 	.word	0x20000044
 8000d0c:	20000040 	.word	0x20000040
 8000d10:	20000030 	.word	0x20000030
 8000d14:	20000014 	.word	0x20000014
 8000d18:	2000000c 	.word	0x2000000c
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	200000c8 	.word	0x200000c8
 8000d24:	2000027c 	.word	0x2000027c
 8000d28:	2000000d 	.word	0x2000000d
 8000d2c:	2000000e 	.word	0x2000000e
 8000d30:	20000091 	.word	0x20000091
 8000d34:	2000003c 	.word	0x2000003c
 8000d38:	200000c4 	.word	0x200000c4
 8000d3c:	20000034 	.word	0x20000034
 8000d40:	20000038 	.word	0x20000038
 8000d44:	200000b0 	.word	0x200000b0

08000d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b093      	sub	sp, #76	@ 0x4c
 8000d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4e:	2410      	movs	r4, #16
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	0018      	movs	r0, r3
 8000d54:	2338      	movs	r3, #56	@ 0x38
 8000d56:	001a      	movs	r2, r3
 8000d58:	2100      	movs	r1, #0
 8000d5a:	f005 fd93 	bl	8006884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5e:	003b      	movs	r3, r7
 8000d60:	0018      	movs	r0, r3
 8000d62:	2310      	movs	r3, #16
 8000d64:	001a      	movs	r2, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	f005 fd8c 	bl	8006884 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6c:	2380      	movs	r3, #128	@ 0x80
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	0018      	movs	r0, r3
 8000d72:	f002 fe7b 	bl	8003a6c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d76:	f002 fe5b 	bl	8003a30 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 8000d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e2c <SystemClock_Config+0xe4>)
 8000d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d7e:	2218      	movs	r2, #24
 8000d80:	4393      	bics	r3, r2
 8000d82:	001a      	movs	r2, r3
 8000d84:	4b29      	ldr	r3, [pc, #164]	@ (8000e2c <SystemClock_Config+0xe4>)
 8000d86:	2108      	movs	r1, #8
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000d8c:	193b      	adds	r3, r7, r4
 8000d8e:	220e      	movs	r2, #14
 8000d90:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d92:	193b      	adds	r3, r7, r4
 8000d94:	2201      	movs	r2, #1
 8000d96:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d98:	193b      	adds	r3, r7, r4
 8000d9a:	2280      	movs	r2, #128	@ 0x80
 8000d9c:	0052      	lsls	r2, r2, #1
 8000d9e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000da0:	0021      	movs	r1, r4
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2240      	movs	r2, #64	@ 0x40
 8000dac:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2201      	movs	r2, #1
 8000db2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2202      	movs	r2, #2
 8000db8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2208      	movs	r2, #8
 8000dca:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2280      	movs	r2, #128	@ 0x80
 8000dd0:	0292      	lsls	r2, r2, #10
 8000dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2280      	movs	r2, #128	@ 0x80
 8000dd8:	0492      	lsls	r2, r2, #18
 8000dda:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2280      	movs	r2, #128	@ 0x80
 8000de0:	0592      	lsls	r2, r2, #22
 8000de2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	0018      	movs	r0, r3
 8000de8:	f002 fe80 	bl	8003aec <HAL_RCC_OscConfig>
 8000dec:	1e03      	subs	r3, r0, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000df0:	f001 f8b6 	bl	8001f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df4:	003b      	movs	r3, r7
 8000df6:	2207      	movs	r2, #7
 8000df8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e00:	003b      	movs	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e06:	003b      	movs	r3, r7
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e0c:	003b      	movs	r3, r7
 8000e0e:	2102      	movs	r1, #2
 8000e10:	0018      	movs	r0, r3
 8000e12:	f003 f985 	bl	8004120 <HAL_RCC_ClockConfig>
 8000e16:	1e03      	subs	r3, r0, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000e1a:	f001 f8a1 	bl	8001f60 <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f003 fc82 	bl	8004728 <HAL_RCCEx_EnableLSCO>
}
 8000e24:	46c0      	nop			@ (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b013      	add	sp, #76	@ 0x4c
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	40021000 	.word	0x40021000

08000e30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e36:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea8 <MX_I2C1_Init+0x78>)
 8000e38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000eac <MX_I2C1_Init+0x7c>)
 8000e3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e40:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e46:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e52:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e58:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f001 ff9b 	bl	8002da8 <HAL_I2C_Init>
 8000e72:	1e03      	subs	r3, r0, #0
 8000e74:	d001      	beq.n	8000e7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e76:	f001 f873 	bl	8001f60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f002 fd3e 	bl	8003900 <HAL_I2CEx_ConfigAnalogFilter>
 8000e84:	1e03      	subs	r3, r0, #0
 8000e86:	d001      	beq.n	8000e8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e88:	f001 f86a 	bl	8001f60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e8e:	2100      	movs	r1, #0
 8000e90:	0018      	movs	r0, r3
 8000e92:	f002 fd81 	bl	8003998 <HAL_I2CEx_ConfigDigitalFilter>
 8000e96:	1e03      	subs	r3, r0, #0
 8000e98:	d001      	beq.n	8000e9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e9a:	f001 f861 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200000c8 	.word	0x200000c8
 8000ea8:	40005400 	.word	0x40005400
 8000eac:	00602173 	.word	0x00602173

08000eb0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	@ 0x30
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

//  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 8000eb6:	232c      	movs	r3, #44	@ 0x2c
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	2328      	movs	r3, #40	@ 0x28
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	f005 fcdc 	bl	8006884 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ecc:	4b3e      	ldr	r3, [pc, #248]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000ece:	4a3f      	ldr	r2, [pc, #252]	@ (8000fcc <MX_RTC_Init+0x11c>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000ed4:	2240      	movs	r2, #64	@ 0x40
 8000ed6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000ed8:	4b3b      	ldr	r3, [pc, #236]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000eda:	227f      	movs	r2, #127	@ 0x7f
 8000edc:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000ede:	4b3a      	ldr	r3, [pc, #232]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000ee0:	22ff      	movs	r2, #255	@ 0xff
 8000ee2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ee4:	4b38      	ldr	r3, [pc, #224]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000eea:	4b37      	ldr	r3, [pc, #220]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ef0:	4b35      	ldr	r3, [pc, #212]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ef6:	4b34      	ldr	r3, [pc, #208]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000ef8:	2280      	movs	r2, #128	@ 0x80
 8000efa:	05d2      	lsls	r2, r2, #23
 8000efc:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000efe:	4b32      	ldr	r3, [pc, #200]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f04:	4b30      	ldr	r3, [pc, #192]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000f06:	0018      	movs	r0, r3
 8000f08:	f003 fc86 	bl	8004818 <HAL_RTC_Init>
 8000f0c:	1e03      	subs	r3, r0, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 8000f10:	f001 f826 	bl	8001f60 <Error_Handler>
//  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
//  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
//  {
//    Error_Handler();
//  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f14:	212c      	movs	r1, #44	@ 0x2c
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	2201      	movs	r2, #1
 8000f20:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2201      	movs	r2, #1
 8000f26:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f2e:	1879      	adds	r1, r7, r1
 8000f30:	4b25      	ldr	r3, [pc, #148]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	0018      	movs	r0, r3
 8000f36:	f003 fe15 	bl	8004b64 <HAL_RTC_SetDate>
 8000f3a:	1e03      	subs	r3, r0, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000f3e:	f001 f80f 	bl	8001f60 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	4a18      	ldr	r2, [pc, #96]	@ (8000fd0 <MX_RTC_Init+0x120>)
 8000f70:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2220      	movs	r2, #32
 8000f82:	2101      	movs	r1, #1
 8000f84:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2280      	movs	r2, #128	@ 0x80
 8000f8a:	0052      	lsls	r2, r2, #1
 8000f8c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000f8e:	1d39      	adds	r1, r7, #4
 8000f90:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	0018      	movs	r0, r3
 8000f96:	f003 fec5 	bl	8004d24 <HAL_RTC_SetAlarm_IT>
 8000f9a:	1e03      	subs	r3, r0, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_RTC_Init+0xf2>
  {
    Error_Handler();
 8000f9e:	f000 ffdf 	bl	8001f60 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f004 fa54 	bl	8005454 <HAL_RTCEx_SetCalibrationOutPut>
 8000fac:	1e03      	subs	r3, r0, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_RTC_Init+0x104>
  {
    Error_Handler();
 8000fb0:	f000 ffd6 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8000fb4:	4907      	ldr	r1, [pc, #28]	@ (8000fd4 <MX_RTC_Init+0x124>)
 8000fb6:	4b04      	ldr	r3, [pc, #16]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f003 fd76 	bl	8004aac <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 8000fc0:	46c0      	nop			@ (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b00c      	add	sp, #48	@ 0x30
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2000011c 	.word	0x2000011c
 8000fcc:	40002800 	.word	0x40002800
 8000fd0:	80800080 	.word	0x80800080
 8000fd4:	20000098 	.word	0x20000098

08000fd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b098      	sub	sp, #96	@ 0x60
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fde:	2354      	movs	r3, #84	@ 0x54
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	230c      	movs	r3, #12
 8000fe6:	001a      	movs	r2, r3
 8000fe8:	2100      	movs	r1, #0
 8000fea:	f005 fc4b 	bl	8006884 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fee:	2338      	movs	r3, #56	@ 0x38
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	231c      	movs	r3, #28
 8000ff6:	001a      	movs	r2, r3
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	f005 fc43 	bl	8006884 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	0018      	movs	r0, r3
 8001002:	2334      	movs	r3, #52	@ 0x34
 8001004:	001a      	movs	r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	f005 fc3c 	bl	8006884 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800100c:	4b45      	ldr	r3, [pc, #276]	@ (8001124 <MX_TIM1_Init+0x14c>)
 800100e:	4a46      	ldr	r2, [pc, #280]	@ (8001128 <MX_TIM1_Init+0x150>)
 8001010:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 40000-1;
 8001012:	4b44      	ldr	r3, [pc, #272]	@ (8001124 <MX_TIM1_Init+0x14c>)
 8001014:	4a45      	ldr	r2, [pc, #276]	@ (800112c <MX_TIM1_Init+0x154>)
 8001016:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	4b42      	ldr	r3, [pc, #264]	@ (8001124 <MX_TIM1_Init+0x14c>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800101e:	4b41      	ldr	r3, [pc, #260]	@ (8001124 <MX_TIM1_Init+0x14c>)
 8001020:	2263      	movs	r2, #99	@ 0x63
 8001022:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001024:	4b3f      	ldr	r3, [pc, #252]	@ (8001124 <MX_TIM1_Init+0x14c>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800102a:	4b3e      	ldr	r3, [pc, #248]	@ (8001124 <MX_TIM1_Init+0x14c>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001030:	4b3c      	ldr	r3, [pc, #240]	@ (8001124 <MX_TIM1_Init+0x14c>)
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001036:	4b3b      	ldr	r3, [pc, #236]	@ (8001124 <MX_TIM1_Init+0x14c>)
 8001038:	0018      	movs	r0, r3
 800103a:	f004 fbdf 	bl	80057fc <HAL_TIM_PWM_Init>
 800103e:	1e03      	subs	r3, r0, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001042:	f000 ff8d 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001046:	2154      	movs	r1, #84	@ 0x54
 8001048:	187b      	adds	r3, r7, r1
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2200      	movs	r2, #0
 8001052:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800105a:	187a      	adds	r2, r7, r1
 800105c:	4b31      	ldr	r3, [pc, #196]	@ (8001124 <MX_TIM1_Init+0x14c>)
 800105e:	0011      	movs	r1, r2
 8001060:	0018      	movs	r0, r3
 8001062:	f005 faf3 	bl	800664c <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	1e03      	subs	r3, r0, #0
 8001068:	d001      	beq.n	800106e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800106a:	f000 ff79 	bl	8001f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800106e:	2138      	movs	r1, #56	@ 0x38
 8001070:	187b      	adds	r3, r7, r1
 8001072:	2260      	movs	r2, #96	@ 0x60
 8001074:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001076:	187b      	adds	r3, r7, r1
 8001078:	2200      	movs	r2, #0
 800107a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800107c:	187b      	adds	r3, r7, r1
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001082:	187b      	adds	r3, r7, r1
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001088:	187b      	adds	r3, r7, r1
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800108e:	187b      	adds	r3, r7, r1
 8001090:	2200      	movs	r2, #0
 8001092:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2200      	movs	r2, #0
 8001098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800109a:	1879      	adds	r1, r7, r1
 800109c:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <MX_TIM1_Init+0x14c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	0018      	movs	r0, r3
 80010a2:	f004 fe6f 	bl	8005d84 <HAL_TIM_PWM_ConfigChannel>
 80010a6:	1e03      	subs	r3, r0, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80010aa:	f000 ff59 	bl	8001f60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2280      	movs	r2, #128	@ 0x80
 80010d0:	0192      	lsls	r2, r2, #6
 80010d2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2280      	movs	r2, #128	@ 0x80
 80010ea:	0492      	lsls	r2, r2, #18
 80010ec:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	2200      	movs	r2, #0
 80010f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001100:	1d3a      	adds	r2, r7, #4
 8001102:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <MX_TIM1_Init+0x14c>)
 8001104:	0011      	movs	r1, r2
 8001106:	0018      	movs	r0, r3
 8001108:	f005 fb08 	bl	800671c <HAL_TIMEx_ConfigBreakDeadTime>
 800110c:	1e03      	subs	r3, r0, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001110:	f000 ff26 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001114:	4b03      	ldr	r3, [pc, #12]	@ (8001124 <MX_TIM1_Init+0x14c>)
 8001116:	0018      	movs	r0, r3
 8001118:	f001 fa04 	bl	8002524 <HAL_TIM_MspPostInit>

}
 800111c:	46c0      	nop			@ (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b018      	add	sp, #96	@ 0x60
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000148 	.word	0x20000148
 8001128:	40012c00 	.word	0x40012c00
 800112c:	00009c3f 	.word	0x00009c3f

08001130 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	@ 0x28
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001136:	231c      	movs	r3, #28
 8001138:	18fb      	adds	r3, r7, r3
 800113a:	0018      	movs	r0, r3
 800113c:	230c      	movs	r3, #12
 800113e:	001a      	movs	r2, r3
 8001140:	2100      	movs	r1, #0
 8001142:	f005 fb9f 	bl	8006884 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001146:	003b      	movs	r3, r7
 8001148:	0018      	movs	r0, r3
 800114a:	231c      	movs	r3, #28
 800114c:	001a      	movs	r2, r3
 800114e:	2100      	movs	r1, #0
 8001150:	f005 fb98 	bl	8006884 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001154:	4b24      	ldr	r3, [pc, #144]	@ (80011e8 <MX_TIM2_Init+0xb8>)
 8001156:	2280      	movs	r2, #128	@ 0x80
 8001158:	05d2      	lsls	r2, r2, #23
 800115a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 800115c:	4b22      	ldr	r3, [pc, #136]	@ (80011e8 <MX_TIM2_Init+0xb8>)
 800115e:	4a23      	ldr	r2, [pc, #140]	@ (80011ec <MX_TIM2_Init+0xbc>)
 8001160:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001162:	4b21      	ldr	r3, [pc, #132]	@ (80011e8 <MX_TIM2_Init+0xb8>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001168:	4b1f      	ldr	r3, [pc, #124]	@ (80011e8 <MX_TIM2_Init+0xb8>)
 800116a:	2263      	movs	r2, #99	@ 0x63
 800116c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116e:	4b1e      	ldr	r3, [pc, #120]	@ (80011e8 <MX_TIM2_Init+0xb8>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001174:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <MX_TIM2_Init+0xb8>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800117a:	4b1b      	ldr	r3, [pc, #108]	@ (80011e8 <MX_TIM2_Init+0xb8>)
 800117c:	0018      	movs	r0, r3
 800117e:	f004 fb3d 	bl	80057fc <HAL_TIM_PWM_Init>
 8001182:	1e03      	subs	r3, r0, #0
 8001184:	d001      	beq.n	800118a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001186:	f000 feeb 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118a:	211c      	movs	r1, #28
 800118c:	187b      	adds	r3, r7, r1
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001192:	187b      	adds	r3, r7, r1
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001198:	187a      	adds	r2, r7, r1
 800119a:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <MX_TIM2_Init+0xb8>)
 800119c:	0011      	movs	r1, r2
 800119e:	0018      	movs	r0, r3
 80011a0:	f005 fa54 	bl	800664c <HAL_TIMEx_MasterConfigSynchronization>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80011a8:	f000 feda 	bl	8001f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ac:	003b      	movs	r3, r7
 80011ae:	2260      	movs	r2, #96	@ 0x60
 80011b0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80011b2:	003b      	movs	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b8:	003b      	movs	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011be:	003b      	movs	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011c4:	0039      	movs	r1, r7
 80011c6:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <MX_TIM2_Init+0xb8>)
 80011c8:	2208      	movs	r2, #8
 80011ca:	0018      	movs	r0, r3
 80011cc:	f004 fdda 	bl	8005d84 <HAL_TIM_PWM_ConfigChannel>
 80011d0:	1e03      	subs	r3, r0, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80011d4:	f000 fec4 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011d8:	4b03      	ldr	r3, [pc, #12]	@ (80011e8 <MX_TIM2_Init+0xb8>)
 80011da:	0018      	movs	r0, r3
 80011dc:	f001 f9a2 	bl	8002524 <HAL_TIM_MspPostInit>

}
 80011e0:	46c0      	nop			@ (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b00a      	add	sp, #40	@ 0x28
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000194 	.word	0x20000194
 80011ec:	0000031f 	.word	0x0000031f

080011f0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80011f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_TIM14_Init+0x40>)
 80011f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001234 <MX_TIM14_Init+0x44>)
 80011f8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 80011fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001230 <MX_TIM14_Init+0x40>)
 80011fc:	22f4      	movs	r2, #244	@ 0xf4
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <MX_TIM14_Init+0x40>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001208:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <MX_TIM14_Init+0x40>)
 800120a:	4a0b      	ldr	r2, [pc, #44]	@ (8001238 <MX_TIM14_Init+0x48>)
 800120c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <MX_TIM14_Init+0x40>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <MX_TIM14_Init+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800121a:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <MX_TIM14_Init+0x40>)
 800121c:	0018      	movs	r0, r3
 800121e:	f004 f9a1 	bl	8005564 <HAL_TIM_Base_Init>
 8001222:	1e03      	subs	r3, r0, #0
 8001224:	d001      	beq.n	800122a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001226:	f000 fe9b 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200001e0 	.word	0x200001e0
 8001234:	40002000 	.word	0x40002000
 8001238:	0000ffff 	.word	0x0000ffff

0800123c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001240:	4b16      	ldr	r3, [pc, #88]	@ (800129c <MX_TIM16_Init+0x60>)
 8001242:	4a17      	ldr	r2, [pc, #92]	@ (80012a0 <MX_TIM16_Init+0x64>)
 8001244:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = (58595 / 10) - 1;
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <MX_TIM16_Init+0x60>)
 8001248:	4a16      	ldr	r2, [pc, #88]	@ (80012a4 <MX_TIM16_Init+0x68>)
 800124a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b13      	ldr	r3, [pc, #76]	@ (800129c <MX_TIM16_Init+0x60>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001252:	4b12      	ldr	r3, [pc, #72]	@ (800129c <MX_TIM16_Init+0x60>)
 8001254:	4a14      	ldr	r2, [pc, #80]	@ (80012a8 <MX_TIM16_Init+0x6c>)
 8001256:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001258:	4b10      	ldr	r3, [pc, #64]	@ (800129c <MX_TIM16_Init+0x60>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 10;
 800125e:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <MX_TIM16_Init+0x60>)
 8001260:	220a      	movs	r2, #10
 8001262:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001264:	4b0d      	ldr	r3, [pc, #52]	@ (800129c <MX_TIM16_Init+0x60>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800126a:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <MX_TIM16_Init+0x60>)
 800126c:	0018      	movs	r0, r3
 800126e:	f004 f979 	bl	8005564 <HAL_TIM_Base_Init>
 8001272:	1e03      	subs	r3, r0, #0
 8001274:	d001      	beq.n	800127a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001276:	f000 fe73 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  // Decrease interrupt priority
  HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2101      	movs	r1, #1
 800127e:	2015      	movs	r0, #21
 8001280:	f001 fb72 	bl	8002968 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001284:	2015      	movs	r0, #21
 8001286:	f001 fb84 	bl	8002992 <HAL_NVIC_EnableIRQ>

  // Clear SR interrupts
  __HAL_TIM_CLEAR_IT(timerSnooze, TIM_IT_UPDATE);
 800128a:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <MX_TIM16_Init+0x70>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2202      	movs	r2, #2
 8001292:	4252      	negs	r2, r2
 8001294:	611a      	str	r2, [r3, #16]
//	timerSnooze->Instance->RCR |= timerSnooze_RCR;


  /* USER CODE END TIM16_Init 2 */

}
 8001296:	46c0      	nop			@ (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2000022c 	.word	0x2000022c
 80012a0:	40014400 	.word	0x40014400
 80012a4:	000016e2 	.word	0x000016e2
 80012a8:	0000ffff 	.word	0x0000ffff
 80012ac:	20000048 	.word	0x20000048

080012b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b08b      	sub	sp, #44	@ 0x2c
 80012b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	2414      	movs	r4, #20
 80012b8:	193b      	adds	r3, r7, r4
 80012ba:	0018      	movs	r0, r3
 80012bc:	2314      	movs	r3, #20
 80012be:	001a      	movs	r2, r3
 80012c0:	2100      	movs	r1, #0
 80012c2:	f005 fadf 	bl	8006884 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	4b66      	ldr	r3, [pc, #408]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 80012c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012ca:	4b65      	ldr	r3, [pc, #404]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 80012cc:	2104      	movs	r1, #4
 80012ce:	430a      	orrs	r2, r1
 80012d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012d2:	4b63      	ldr	r3, [pc, #396]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 80012d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012d6:	2204      	movs	r2, #4
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	4b60      	ldr	r3, [pc, #384]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 80012e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 80012e4:	2101      	movs	r1, #1
 80012e6:	430a      	orrs	r2, r1
 80012e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80012ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 80012ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ee:	2201      	movs	r2, #1
 80012f0:	4013      	ands	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 80012f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012fa:	4b59      	ldr	r3, [pc, #356]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 80012fc:	2108      	movs	r1, #8
 80012fe:	430a      	orrs	r2, r1
 8001300:	635a      	str	r2, [r3, #52]	@ 0x34
 8001302:	4b57      	ldr	r3, [pc, #348]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 8001304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001306:	2208      	movs	r2, #8
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	4b54      	ldr	r3, [pc, #336]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 8001310:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001312:	4b53      	ldr	r3, [pc, #332]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 8001314:	2102      	movs	r1, #2
 8001316:	430a      	orrs	r2, r1
 8001318:	635a      	str	r2, [r3, #52]	@ 0x34
 800131a:	4b51      	ldr	r3, [pc, #324]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 800131c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800131e:	2202      	movs	r2, #2
 8001320:	4013      	ands	r3, r2
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin
 8001326:	494f      	ldr	r1, [pc, #316]	@ (8001464 <MX_GPIO_Init+0x1b4>)
 8001328:	23a0      	movs	r3, #160	@ 0xa0
 800132a:	05db      	lsls	r3, r3, #23
 800132c:	2200      	movs	r2, #0
 800132e:	0018      	movs	r0, r3
 8001330:	f001 fccd 	bl	8002cce <HAL_GPIO_WritePin>
                          |ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8001334:	4b4c      	ldr	r3, [pc, #304]	@ (8001468 <MX_GPIO_Init+0x1b8>)
 8001336:	2200      	movs	r2, #0
 8001338:	2180      	movs	r1, #128	@ 0x80
 800133a:	0018      	movs	r0, r3
 800133c:	f001 fcc7 	bl	8002cce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_RST_GPIO_Port, CTOUCH_RST_Pin, GPIO_PIN_RESET);
 8001340:	2380      	movs	r3, #128	@ 0x80
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4849      	ldr	r0, [pc, #292]	@ (800146c <MX_GPIO_Init+0x1bc>)
 8001346:	2200      	movs	r2, #0
 8001348:	0019      	movs	r1, r3
 800134a:	f001 fcc0 	bl	8002cce <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin SHIFT_MCLR_Pin
                           ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin
 800134e:	193b      	adds	r3, r7, r4
 8001350:	4a44      	ldr	r2, [pc, #272]	@ (8001464 <MX_GPIO_Init+0x1b4>)
 8001352:	601a      	str	r2, [r3, #0]
                          |ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	193b      	adds	r3, r7, r4
 8001356:	2201      	movs	r2, #1
 8001358:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	193b      	adds	r3, r7, r4
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	193b      	adds	r3, r7, r4
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	193a      	adds	r2, r7, r4
 8001368:	23a0      	movs	r3, #160	@ 0xa0
 800136a:	05db      	lsls	r3, r3, #23
 800136c:	0011      	movs	r1, r2
 800136e:	0018      	movs	r0, r3
 8001370:	f001 fb2c 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001374:	193b      	adds	r3, r7, r4
 8001376:	2204      	movs	r2, #4
 8001378:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137a:	193b      	adds	r3, r7, r4
 800137c:	2203      	movs	r2, #3
 800137e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	193b      	adds	r3, r7, r4
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	193a      	adds	r2, r7, r4
 8001388:	23a0      	movs	r3, #160	@ 0xa0
 800138a:	05db      	lsls	r3, r3, #23
 800138c:	0011      	movs	r1, r2
 800138e:	0018      	movs	r0, r3
 8001390:	f001 fb1c 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8001394:	193b      	adds	r3, r7, r4
 8001396:	2280      	movs	r2, #128	@ 0x80
 8001398:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	193b      	adds	r3, r7, r4
 800139c:	2201      	movs	r2, #1
 800139e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	193b      	adds	r3, r7, r4
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	193b      	adds	r3, r7, r4
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 80013ac:	193b      	adds	r3, r7, r4
 80013ae:	4a2e      	ldr	r2, [pc, #184]	@ (8001468 <MX_GPIO_Init+0x1b8>)
 80013b0:	0019      	movs	r1, r3
 80013b2:	0010      	movs	r0, r2
 80013b4:	f001 fb0a 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 80013b8:	193b      	adds	r3, r7, r4
 80013ba:	2280      	movs	r2, #128	@ 0x80
 80013bc:	0212      	lsls	r2, r2, #8
 80013be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013c0:	193b      	adds	r3, r7, r4
 80013c2:	2284      	movs	r2, #132	@ 0x84
 80013c4:	0392      	lsls	r2, r2, #14
 80013c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c8:	193b      	adds	r3, r7, r4
 80013ca:	2201      	movs	r2, #1
 80013cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80013ce:	193a      	adds	r2, r7, r4
 80013d0:	23a0      	movs	r3, #160	@ 0xa0
 80013d2:	05db      	lsls	r3, r3, #23
 80013d4:	0011      	movs	r1, r2
 80013d6:	0018      	movs	r0, r3
 80013d8:	f001 faf8 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 80013dc:	0021      	movs	r1, r4
 80013de:	187b      	adds	r3, r7, r1
 80013e0:	220f      	movs	r2, #15
 80013e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	2284      	movs	r2, #132	@ 0x84
 80013e8:	0392      	lsls	r2, r2, #14
 80013ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	2201      	movs	r2, #1
 80013f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f2:	000c      	movs	r4, r1
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001470 <MX_GPIO_Init+0x1c0>)
 80013f8:	0019      	movs	r1, r3
 80013fa:	0010      	movs	r0, r2
 80013fc:	f001 fae6 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_RST_Pin */
  GPIO_InitStruct.Pin = CTOUCH_RST_Pin;
 8001400:	0021      	movs	r1, r4
 8001402:	187b      	adds	r3, r7, r1
 8001404:	2280      	movs	r2, #128	@ 0x80
 8001406:	0052      	lsls	r2, r2, #1
 8001408:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140a:	187b      	adds	r3, r7, r1
 800140c:	2201      	movs	r2, #1
 800140e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	187b      	adds	r3, r7, r1
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	187b      	adds	r3, r7, r1
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 800141c:	187b      	adds	r3, r7, r1
 800141e:	4a13      	ldr	r2, [pc, #76]	@ (800146c <MX_GPIO_Init+0x1bc>)
 8001420:	0019      	movs	r1, r3
 8001422:	0010      	movs	r0, r2
 8001424:	f001 fad2 	bl	80029cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2100      	movs	r1, #0
 800142c:	2005      	movs	r0, #5
 800142e:	f001 fa9b 	bl	8002968 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001432:	2005      	movs	r0, #5
 8001434:	f001 faad 	bl	8002992 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2100      	movs	r1, #0
 800143c:	2006      	movs	r0, #6
 800143e:	f001 fa93 	bl	8002968 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001442:	2006      	movs	r0, #6
 8001444:	f001 faa5 	bl	8002992 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2101      	movs	r1, #1
 800144c:	2007      	movs	r0, #7
 800144e:	f001 fa8b 	bl	8002968 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001452:	2007      	movs	r0, #7
 8001454:	f001 fa9d 	bl	8002992 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001458:	46c0      	nop			@ (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	b00b      	add	sp, #44	@ 0x2c
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	40021000 	.word	0x40021000
 8001464:	00001e01 	.word	0x00001e01
 8001468:	50000800 	.word	0x50000800
 800146c:	50000400 	.word	0x50000400
 8001470:	50000c00 	.word	0x50000c00

08001474 <updateAndDisplayTime>:
/* USER CODE BEGIN 4 */

/*
 * Pulls updated time from RTC and send new time to user display
 */
HAL_StatusTypeDef updateAndDisplayTime(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8001480:	4a07      	ldr	r2, [pc, #28]	@ (80014a0 <updateAndDisplayTime+0x2c>)
 8001482:	4908      	ldr	r1, [pc, #32]	@ (80014a4 <updateAndDisplayTime+0x30>)
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <updateAndDisplayTime+0x34>)
 8001486:	0018      	movs	r0, r3
 8001488:	f7ff fae2 	bl	8000a50 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 800148c:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <updateAndDisplayTime+0x30>)
 800148e:	0018      	movs	r0, r3
 8001490:	f000 fdee 	bl	8002070 <sevSeg_updateDigits>

	return halRet;
 8001494:	1dfb      	adds	r3, r7, #7
 8001496:	781b      	ldrb	r3, [r3, #0]

}
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	b002      	add	sp, #8
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200000ac 	.word	0x200000ac
 80014a4:	20000098 	.word	0x20000098
 80014a8:	2000011c 	.word	0x2000011c

080014ac <updateAndDisplayAlarm>:
/*
 * Sends current user alarm time to user display
 * This doesn't pull from the RTC because the RTC alarm is not being used for that
 */

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80014b2:	1dfb      	adds	r3, r7, #7
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 80014b8:	4b04      	ldr	r3, [pc, #16]	@ (80014cc <updateAndDisplayAlarm+0x20>)
 80014ba:	0018      	movs	r0, r3
 80014bc:	f000 fdd8 	bl	8002070 <sevSeg_updateDigits>

	return halRet;
 80014c0:	1dfb      	adds	r3, r7, #7
 80014c2:	781b      	ldrb	r3, [r3, #0]

}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b002      	add	sp, #8
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200000b0 	.word	0x200000b0

080014d0 <HAL_RTC_AlarmAEventCallback>:
 * Occurs every minute increment
 *
 * Pulls alarm time from RTC, increments and sets new alarm time, and updates time.
 * Sets off user alarm if the alarm is enabled.
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b08d      	sub	sp, #52	@ 0x34
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

	  RTC_AlarmTypeDef sAlarm = {0};
 80014d8:	2408      	movs	r4, #8
 80014da:	193b      	adds	r3, r7, r4
 80014dc:	0018      	movs	r0, r3
 80014de:	2328      	movs	r3, #40	@ 0x28
 80014e0:	001a      	movs	r2, r3
 80014e2:	2100      	movs	r1, #0
 80014e4:	f005 f9ce 	bl	8006884 <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 80014e8:	2380      	movs	r3, #128	@ 0x80
 80014ea:	005a      	lsls	r2, r3, #1
 80014ec:	1939      	adds	r1, r7, r4
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	2300      	movs	r3, #0
 80014f2:	f003 fd57 	bl	8004fa4 <HAL_RTC_GetAlarm>

	  getRTCTime(hrtc, &currTime, &currDate);
 80014f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001574 <HAL_RTC_AlarmAEventCallback+0xa4>)
 80014f8:	491f      	ldr	r1, [pc, #124]	@ (8001578 <HAL_RTC_AlarmAEventCallback+0xa8>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7ff faa7 	bl	8000a50 <getRTCTime>

	  if(currTime.Minutes > 58) {
 8001502:	4b1d      	ldr	r3, [pc, #116]	@ (8001578 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001504:	785b      	ldrb	r3, [r3, #1]
 8001506:	2b3a      	cmp	r3, #58	@ 0x3a
 8001508:	d903      	bls.n	8001512 <HAL_RTC_AlarmAEventCallback+0x42>
		sAlarm.AlarmTime.Minutes = 0;
 800150a:	193b      	adds	r3, r7, r4
 800150c:	2200      	movs	r2, #0
 800150e:	705a      	strb	r2, [r3, #1]
 8001510:	e008      	b.n	8001524 <HAL_RTC_AlarmAEventCallback+0x54>
	  } else {
		sAlarm.AlarmTime.Minutes = currTime.Minutes + 1;
 8001512:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001514:	785b      	ldrb	r3, [r3, #1]
 8001516:	3301      	adds	r3, #1
 8001518:	b2da      	uxtb	r2, r3
 800151a:	2308      	movs	r3, #8
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001520:	e000      	b.n	8001524 <HAL_RTC_AlarmAEventCallback+0x54>

			__NOP();
 8001522:	46c0      	nop			@ (mov r8, r8)
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001524:	2308      	movs	r3, #8
 8001526:	18f9      	adds	r1, r7, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	0018      	movs	r0, r3
 800152e:	f003 fbf9 	bl	8004d24 <HAL_RTC_SetAlarm_IT>
 8001532:	1e03      	subs	r3, r0, #0
 8001534:	d1f5      	bne.n	8001522 <HAL_RTC_AlarmAEventCallback+0x52>

		}

	  updateAndDisplayTime();
 8001536:	f7ff ff9d 	bl	8001474 <updateAndDisplayTime>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <HAL_RTC_AlarmAEventCallback+0xac>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d013      	beq.n	800156a <HAL_RTC_AlarmAEventCallback+0x9a>
 8001542:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8001544:	781a      	ldrb	r2, [r3, #0]
 8001546:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d10d      	bne.n	800156a <HAL_RTC_AlarmAEventCallback+0x9a>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 800154e:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8001550:	785a      	ldrb	r2, [r3, #1]
 8001552:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001554:	785b      	ldrb	r3, [r3, #1]
 8001556:	429a      	cmp	r2, r3
 8001558:	d107      	bne.n	800156a <HAL_RTC_AlarmAEventCallback+0x9a>
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <HAL_RTC_AlarmAEventCallback+0xb0>)
 800155c:	78da      	ldrb	r2, [r3, #3]
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001560:	78db      	ldrb	r3, [r3, #3]
 8001562:	429a      	cmp	r2, r3
 8001564:	d101      	bne.n	800156a <HAL_RTC_AlarmAEventCallback+0x9a>
		  userAlarmBeep();
 8001566:	f000 f80d 	bl	8001584 <userAlarmBeep>
	  }


}
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	b00d      	add	sp, #52	@ 0x34
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	46c0      	nop			@ (mov r8, r8)
 8001574:	200000ac 	.word	0x200000ac
 8001578:	20000098 	.word	0x20000098
 800157c:	20000091 	.word	0x20000091
 8001580:	200000b0 	.word	0x200000b0

08001584 <userAlarmBeep>:
 * Functionality depends on whether or not this is the first or second snooze.
 * 		First Snooze: 10-minute timer is started and alarm
 * 		              is beeped again at the end of this 10 minutes.
 * 		Second Snooze: No timer is started and silencing the alarm silences it for good.
 */
void userAlarmBeep() {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 800158a:	4ba2      	ldr	r3, [pc, #648]	@ (8001814 <userAlarmBeep+0x290>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d018      	beq.n	80015c4 <userAlarmBeep+0x40>

			// Stop the timer and
			HAL_TIM_Base_Stop_IT(timerSnooze);
 8001592:	4ba1      	ldr	r3, [pc, #644]	@ (8001818 <userAlarmBeep+0x294>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	0018      	movs	r0, r3
 8001598:	f004 f902 	bl	80057a0 <HAL_TIM_Base_Stop_IT>

			// Reset count to 0
			// only bits 0 - 15 should be changed.
			timerSnooze->Instance->CNT &= 0xFFFF0000;
 800159c:	4b9e      	ldr	r3, [pc, #632]	@ (8001818 <userAlarmBeep+0x294>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015a4:	4b9c      	ldr	r3, [pc, #624]	@ (8001818 <userAlarmBeep+0x294>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	0c12      	lsrs	r2, r2, #16
 80015ac:	0412      	lsls	r2, r2, #16
 80015ae:	625a      	str	r2, [r3, #36]	@ 0x24

			// Reset interrupt status register
			timerSnooze->Instance->SR &= 0xFFFC;
 80015b0:	4b99      	ldr	r3, [pc, #612]	@ (8001818 <userAlarmBeep+0x294>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	4b97      	ldr	r3, [pc, #604]	@ (8001818 <userAlarmBeep+0x294>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4997      	ldr	r1, [pc, #604]	@ (800181c <userAlarmBeep+0x298>)
 80015c0:	400a      	ands	r2, r1
 80015c2:	611a      	str	r2, [r3, #16]
//			timerSnooze->Instance->RCR &= 0xFF00;
//			timerSnooze->Instance->RCR |= timerSnooze_RCR;

		}

	HAL_TIM_Base_Stop(timerDelay);
 80015c4:	4b96      	ldr	r3, [pc, #600]	@ (8001820 <userAlarmBeep+0x29c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	0018      	movs	r0, r3
 80015ca:	f004 f86f 	bl	80056ac <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 80015ce:	4b94      	ldr	r3, [pc, #592]	@ (8001820 <userAlarmBeep+0x29c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	0018      	movs	r0, r3
 80015d4:	f004 f81e 	bl	8005614 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80015d8:	4b91      	ldr	r3, [pc, #580]	@ (8001820 <userAlarmBeep+0x29c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e0:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 80015e2:	1cfb      	adds	r3, r7, #3
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine whether to toggle high or low brightness
	 */
	uint8_t intenSet;
	if(displayToggle == 0) { 				// If the user has full brightness enabled, toggle full btightness
 80015e8:	4b8e      	ldr	r3, [pc, #568]	@ (8001824 <userAlarmBeep+0x2a0>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d103      	bne.n	80015f8 <userAlarmBeep+0x74>
		intenSet = 2;
 80015f0:	1cbb      	adds	r3, r7, #2
 80015f2:	2202      	movs	r2, #2
 80015f4:	701a      	strb	r2, [r3, #0]
 80015f6:	e002      	b.n	80015fe <userAlarmBeep+0x7a>
	}
	else {									// Else, toggle low brightness
		intenSet = 1;
 80015f8:	1cbb      	adds	r3, r7, #2
 80015fa:	2201      	movs	r2, #1
 80015fc:	701a      	strb	r2, [r3, #0]
	}

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 80015fe:	f7ff ff39 	bl	8001474 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 8001602:	4b87      	ldr	r3, [pc, #540]	@ (8001820 <userAlarmBeep+0x29c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	4a86      	ldr	r2, [pc, #536]	@ (8001828 <userAlarmBeep+0x2a4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d96c      	bls.n	80016ee <userAlarmBeep+0x16a>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink * intenSet]);	// Toggle on/off
 8001614:	1cfb      	adds	r3, r7, #3
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	1cba      	adds	r2, r7, #2
 800161a:	7812      	ldrb	r2, [r2, #0]
 800161c:	4353      	muls	r3, r2
 800161e:	4a83      	ldr	r2, [pc, #524]	@ (800182c <userAlarmBeep+0x2a8>)
 8001620:	5cd3      	ldrb	r3, [r2, r3]
 8001622:	0018      	movs	r0, r3
 8001624:	f000 fdd6 	bl	80021d4 <sevSeg_setIntensity>

			if(!displayBlink) {
 8001628:	1cfb      	adds	r3, r7, #3
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2201      	movs	r2, #1
 800162e:	4053      	eors	r3, r2
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d03f      	beq.n	80016b6 <userAlarmBeep+0x132>
				__HAL_TIM_SET_COMPARE(timerBuzzer, tim_BUZZER_CHANNEL, 50);
 8001636:	4b7e      	ldr	r3, [pc, #504]	@ (8001830 <userAlarmBeep+0x2ac>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d105      	bne.n	800164a <userAlarmBeep+0xc6>
 800163e:	4b7d      	ldr	r3, [pc, #500]	@ (8001834 <userAlarmBeep+0x2b0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2232      	movs	r2, #50	@ 0x32
 8001646:	635a      	str	r2, [r3, #52]	@ 0x34
 8001648:	e02c      	b.n	80016a4 <userAlarmBeep+0x120>
 800164a:	4b79      	ldr	r3, [pc, #484]	@ (8001830 <userAlarmBeep+0x2ac>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b04      	cmp	r3, #4
 8001650:	d105      	bne.n	800165e <userAlarmBeep+0xda>
 8001652:	4b78      	ldr	r3, [pc, #480]	@ (8001834 <userAlarmBeep+0x2b0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2332      	movs	r3, #50	@ 0x32
 800165a:	6393      	str	r3, [r2, #56]	@ 0x38
 800165c:	e022      	b.n	80016a4 <userAlarmBeep+0x120>
 800165e:	4b74      	ldr	r3, [pc, #464]	@ (8001830 <userAlarmBeep+0x2ac>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b08      	cmp	r3, #8
 8001664:	d105      	bne.n	8001672 <userAlarmBeep+0xee>
 8001666:	4b73      	ldr	r3, [pc, #460]	@ (8001834 <userAlarmBeep+0x2b0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2332      	movs	r3, #50	@ 0x32
 800166e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001670:	e018      	b.n	80016a4 <userAlarmBeep+0x120>
 8001672:	4b6f      	ldr	r3, [pc, #444]	@ (8001830 <userAlarmBeep+0x2ac>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b0c      	cmp	r3, #12
 8001678:	d105      	bne.n	8001686 <userAlarmBeep+0x102>
 800167a:	4b6e      	ldr	r3, [pc, #440]	@ (8001834 <userAlarmBeep+0x2b0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2332      	movs	r3, #50	@ 0x32
 8001682:	6413      	str	r3, [r2, #64]	@ 0x40
 8001684:	e00e      	b.n	80016a4 <userAlarmBeep+0x120>
 8001686:	4b6a      	ldr	r3, [pc, #424]	@ (8001830 <userAlarmBeep+0x2ac>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b10      	cmp	r3, #16
 800168c:	d105      	bne.n	800169a <userAlarmBeep+0x116>
 800168e:	4b69      	ldr	r3, [pc, #420]	@ (8001834 <userAlarmBeep+0x2b0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2332      	movs	r3, #50	@ 0x32
 8001696:	6593      	str	r3, [r2, #88]	@ 0x58
 8001698:	e004      	b.n	80016a4 <userAlarmBeep+0x120>
 800169a:	4b66      	ldr	r3, [pc, #408]	@ (8001834 <userAlarmBeep+0x2b0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	2332      	movs	r3, #50	@ 0x32
 80016a2:	65d3      	str	r3, [r2, #92]	@ 0x5c
				HAL_TIM_PWM_Start(timerBuzzer, tim_BUZZER_CHANNEL);
 80016a4:	4b63      	ldr	r3, [pc, #396]	@ (8001834 <userAlarmBeep+0x2b0>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b61      	ldr	r3, [pc, #388]	@ (8001830 <userAlarmBeep+0x2ac>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	0019      	movs	r1, r3
 80016ae:	0010      	movs	r0, r2
 80016b0:	f004 f8fc 	bl	80058ac <HAL_TIM_PWM_Start>
 80016b4:	e007      	b.n	80016c6 <userAlarmBeep+0x142>
			}
			else {
				HAL_TIM_PWM_Stop(timerBuzzer, tim_BUZZER_CHANNEL);
 80016b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001834 <userAlarmBeep+0x2b0>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001830 <userAlarmBeep+0x2ac>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	0019      	movs	r1, r3
 80016c0:	0010      	movs	r0, r2
 80016c2:	f004 f9d1 	bl	8005a68 <HAL_TIM_PWM_Stop>
			}



			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80016c6:	4b56      	ldr	r3, [pc, #344]	@ (8001820 <userAlarmBeep+0x29c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ce:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80016d0:	1cfb      	adds	r3, r7, #3
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	1e5a      	subs	r2, r3, #1
 80016d6:	4193      	sbcs	r3, r2
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2201      	movs	r2, #1
 80016dc:	4053      	eors	r3, r2
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	001a      	movs	r2, r3
 80016e2:	1cfb      	adds	r3, r7, #3
 80016e4:	701a      	strb	r2, [r3, #0]
 80016e6:	781a      	ldrb	r2, [r3, #0]
 80016e8:	2101      	movs	r1, #1
 80016ea:	400a      	ands	r2, r1
 80016ec:	701a      	strb	r2, [r3, #0]

		}


		capTouch_readChannels(&capTouch);
 80016ee:	4b52      	ldr	r3, [pc, #328]	@ (8001838 <userAlarmBeep+0x2b4>)
 80016f0:	0018      	movs	r0, r3
 80016f2:	f7fe ff3f 	bl	8000574 <capTouch_readChannels>

	} while(capTouch.keyStat == 0x00 &&
 80016f6:	4b50      	ldr	r3, [pc, #320]	@ (8001838 <userAlarmBeep+0x2b4>)
 80016f8:	7c1b      	ldrb	r3, [r3, #16]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10f      	bne.n	800171e <userAlarmBeep+0x19a>
			(HAL_GPIO_ReadPin(alarmEnableButtonPort, alarmEnableButtonPin) != GPIO_PIN_RESET));
 80016fe:	4b4f      	ldr	r3, [pc, #316]	@ (800183c <userAlarmBeep+0x2b8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2204      	movs	r2, #4
 8001704:	0011      	movs	r1, r2
 8001706:	0018      	movs	r0, r3
 8001708:	f001 fac4 	bl	8002c94 <HAL_GPIO_ReadPin>
 800170c:	0003      	movs	r3, r0
 800170e:	0019      	movs	r1, r3
 8001710:	1cbb      	adds	r3, r7, #2
 8001712:	1cba      	adds	r2, r7, #2
 8001714:	7812      	ldrb	r2, [r2, #0]
 8001716:	701a      	strb	r2, [r3, #0]
	} while(capTouch.keyStat == 0x00 &&
 8001718:	2900      	cmp	r1, #0
 800171a:	d000      	beq.n	800171e <userAlarmBeep+0x19a>
 800171c:	e76f      	b.n	80015fe <userAlarmBeep+0x7a>

	/*
	 * Stop blinking, turn off buzzer, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 800171e:	4b40      	ldr	r3, [pc, #256]	@ (8001820 <userAlarmBeep+0x29c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	0018      	movs	r0, r3
 8001724:	f003 ffc2 	bl	80056ac <HAL_TIM_Base_Stop>

	HAL_TIM_PWM_Stop(timerBuzzer, tim_BUZZER_CHANNEL);
 8001728:	4b42      	ldr	r3, [pc, #264]	@ (8001834 <userAlarmBeep+0x2b0>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b40      	ldr	r3, [pc, #256]	@ (8001830 <userAlarmBeep+0x2ac>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	0019      	movs	r1, r3
 8001732:	0010      	movs	r0, r2
 8001734:	f004 f998 	bl	8005a68 <HAL_TIM_PWM_Stop>

	updateAndDisplayTime();				// Update to current time and display
 8001738:	f7ff fe9c 	bl	8001474 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[intenSet]);	// Turn display back on
 800173c:	1cbb      	adds	r3, r7, #2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4a3a      	ldr	r2, [pc, #232]	@ (800182c <userAlarmBeep+0x2a8>)
 8001742:	5cd3      	ldrb	r3, [r2, r3]
 8001744:	0018      	movs	r0, r3
 8001746:	f000 fd45 	bl	80021d4 <sevSeg_setIntensity>
	if(intenSet == 2) {
 800174a:	1cbb      	adds	r3, r7, #2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d103      	bne.n	800175a <userAlarmBeep+0x1d6>
		displayToggle = 0;
 8001752:	4b34      	ldr	r3, [pc, #208]	@ (8001824 <userAlarmBeep+0x2a0>)
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	e002      	b.n	8001760 <userAlarmBeep+0x1dc>
	}
	else {
		displayToggle = 2;
 800175a:	4b32      	ldr	r3, [pc, #200]	@ (8001824 <userAlarmBeep+0x2a0>)
 800175c:	2202      	movs	r2, #2
 800175e:	701a      	strb	r2, [r3, #0]
	}

	// If this is the first snooze,
	if(!secondSnooze) {
 8001760:	4b2c      	ldr	r3, [pc, #176]	@ (8001814 <userAlarmBeep+0x290>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2201      	movs	r2, #1
 8001766:	4053      	eors	r3, r2
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d047      	beq.n	80017fe <userAlarmBeep+0x27a>

		__HAL_TIM_SET_COMPARE(timerBuzzer, tim_BUZZER_CHANNEL, 0);
 800176e:	4b30      	ldr	r3, [pc, #192]	@ (8001830 <userAlarmBeep+0x2ac>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d105      	bne.n	8001782 <userAlarmBeep+0x1fe>
 8001776:	4b2f      	ldr	r3, [pc, #188]	@ (8001834 <userAlarmBeep+0x2b0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2200      	movs	r2, #0
 800177e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001780:	e02c      	b.n	80017dc <userAlarmBeep+0x258>
 8001782:	4b2b      	ldr	r3, [pc, #172]	@ (8001830 <userAlarmBeep+0x2ac>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b04      	cmp	r3, #4
 8001788:	d105      	bne.n	8001796 <userAlarmBeep+0x212>
 800178a:	4b2a      	ldr	r3, [pc, #168]	@ (8001834 <userAlarmBeep+0x2b0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2300      	movs	r3, #0
 8001792:	6393      	str	r3, [r2, #56]	@ 0x38
 8001794:	e022      	b.n	80017dc <userAlarmBeep+0x258>
 8001796:	4b26      	ldr	r3, [pc, #152]	@ (8001830 <userAlarmBeep+0x2ac>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b08      	cmp	r3, #8
 800179c:	d105      	bne.n	80017aa <userAlarmBeep+0x226>
 800179e:	4b25      	ldr	r3, [pc, #148]	@ (8001834 <userAlarmBeep+0x2b0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2300      	movs	r3, #0
 80017a6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80017a8:	e018      	b.n	80017dc <userAlarmBeep+0x258>
 80017aa:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <userAlarmBeep+0x2ac>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b0c      	cmp	r3, #12
 80017b0:	d105      	bne.n	80017be <userAlarmBeep+0x23a>
 80017b2:	4b20      	ldr	r3, [pc, #128]	@ (8001834 <userAlarmBeep+0x2b0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2300      	movs	r3, #0
 80017ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80017bc:	e00e      	b.n	80017dc <userAlarmBeep+0x258>
 80017be:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <userAlarmBeep+0x2ac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b10      	cmp	r3, #16
 80017c4:	d105      	bne.n	80017d2 <userAlarmBeep+0x24e>
 80017c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001834 <userAlarmBeep+0x2b0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	2300      	movs	r3, #0
 80017ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80017d0:	e004      	b.n	80017dc <userAlarmBeep+0x258>
 80017d2:	4b18      	ldr	r3, [pc, #96]	@ (8001834 <userAlarmBeep+0x2b0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2300      	movs	r3, #0
 80017da:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_TIM_PWM_Start(timerBuzzer, tim_BUZZER_CHANNEL);
 80017dc:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <userAlarmBeep+0x2b0>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <userAlarmBeep+0x2ac>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0019      	movs	r1, r3
 80017e6:	0010      	movs	r0, r2
 80017e8:	f004 f860 	bl	80058ac <HAL_TIM_PWM_Start>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 80017ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <userAlarmBeep+0x294>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	0018      	movs	r0, r3
 80017f2:	f003 ff81 	bl	80056f8 <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 80017f6:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <userAlarmBeep+0x290>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
		 */
		secondSnooze = false;

	}

}
 80017fc:	e005      	b.n	800180a <userAlarmBeep+0x286>
		snoozeCounter = 0;
 80017fe:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <userAlarmBeep+0x2bc>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
		secondSnooze = false;
 8001804:	4b03      	ldr	r3, [pc, #12]	@ (8001814 <userAlarmBeep+0x290>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
}
 800180a:	46c0      	nop			@ (mov r8, r8)
 800180c:	46bd      	mov	sp, r7
 800180e:	b002      	add	sp, #8
 8001810:	bd80      	pop	{r7, pc}
 8001812:	46c0      	nop			@ (mov r8, r8)
 8001814:	2000027a 	.word	0x2000027a
 8001818:	20000048 	.word	0x20000048
 800181c:	0000fffc 	.word	0x0000fffc
 8001820:	20000044 	.word	0x20000044
 8001824:	20000090 	.word	0x20000090
 8001828:	00007ffe 	.word	0x00007ffe
 800182c:	0800692c 	.word	0x0800692c
 8001830:	20000094 	.word	0x20000094
 8001834:	2000004c 	.word	0x2000004c
 8001838:	2000027c 	.word	0x2000027c
 800183c:	20000000 	.word	0x20000000
 8001840:	20000278 	.word	0x20000278

08001844 <HAL_GPIO_EXTI_Falling_Callback>:
 * General Falling-Edge EXTI Callback function
 *
 * Internal conditional determines which function to call
 * based on which button was pressed.
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	0002      	movs	r2, r0
 800184c:	1dbb      	adds	r3, r7, #6
 800184e:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8001850:	2208      	movs	r2, #8
 8001852:	1dbb      	adds	r3, r7, #6
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	4293      	cmp	r3, r2
 8001858:	d106      	bne.n	8001868 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 800185a:	230f      	movs	r3, #15
 800185c:	18fc      	adds	r4, r7, r3
 800185e:	f000 f85f 	bl	8001920 <displayButtonISR>
 8001862:	0003      	movs	r3, r0
 8001864:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8001866:	e031      	b.n	80018cc <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8001868:	2204      	movs	r2, #4
 800186a:	1dbb      	adds	r3, r7, #6
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	4293      	cmp	r3, r2
 8001870:	d106      	bne.n	8001880 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 8001872:	230f      	movs	r3, #15
 8001874:	18fc      	adds	r4, r7, r3
 8001876:	f000 f87b 	bl	8001970 <alarmEnableISR>
 800187a:	0003      	movs	r3, r0
 800187c:	7023      	strb	r3, [r4, #0]
}
 800187e:	e025      	b.n	80018cc <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8001880:	2380      	movs	r3, #128	@ 0x80
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	1dba      	adds	r2, r7, #6
 8001886:	8812      	ldrh	r2, [r2, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d106      	bne.n	800189a <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 800188c:	230f      	movs	r3, #15
 800188e:	18fc      	adds	r4, r7, r3
 8001890:	f000 f8ca 	bl	8001a28 <alarmSetISR>
 8001894:	0003      	movs	r3, r0
 8001896:	7023      	strb	r3, [r4, #0]
}
 8001898:	e018      	b.n	80018cc <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 800189a:	2201      	movs	r2, #1
 800189c:	1dbb      	adds	r3, r7, #6
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d106      	bne.n	80018b2 <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 80018a4:	230f      	movs	r3, #15
 80018a6:	18fc      	adds	r4, r7, r3
 80018a8:	f000 f9a2 	bl	8001bf0 <hourSetISR>
 80018ac:	0003      	movs	r3, r0
 80018ae:	7023      	strb	r3, [r4, #0]
}
 80018b0:	e00c      	b.n	80018cc <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 80018b2:	2202      	movs	r2, #2
 80018b4:	1dbb      	adds	r3, r7, #6
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d106      	bne.n	80018ca <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 80018bc:	230f      	movs	r3, #15
 80018be:	18fc      	adds	r4, r7, r3
 80018c0:	f000 f9c2 	bl	8001c48 <minuteSetISR>
 80018c4:	0003      	movs	r3, r0
 80018c6:	7023      	strb	r3, [r4, #0]
}
 80018c8:	e000      	b.n	80018cc <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 80018ca:	46c0      	nop			@ (mov r8, r8)
}
 80018cc:	46c0      	nop			@ (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b005      	add	sp, #20
 80018d2:	bd90      	pop	{r4, r7, pc}

080018d4 <HAL_TIM_PeriodElapsedCallback>:
 * Used for second snooze functionality
 *
 * This is entered at the end of a 10-minute snooze, at
 * which point the timer kicks back an interrupt.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

	snoozeCounter++;
 80018dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001914 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	3301      	adds	r3, #1
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80018e6:	701a      	strb	r2, [r3, #0]

	if((htim == timerSnooze) && (secondSnooze == true) && (snoozeCounter == timerSnooze_RCR)) {
 80018e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d10b      	bne.n	800190a <HAL_TIM_PeriodElapsedCallback+0x36>
 80018f2:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d007      	beq.n	800190a <HAL_TIM_PeriodElapsedCallback+0x36>
 80018fa:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	001a      	movs	r2, r3
 8001900:	2364      	movs	r3, #100	@ 0x64
 8001902:	429a      	cmp	r2, r3
 8001904:	d101      	bne.n	800190a <HAL_TIM_PeriodElapsedCallback+0x36>

		userAlarmBeep();
 8001906:	f7ff fe3d 	bl	8001584 <userAlarmBeep>

	}

}
 800190a:	46c0      	nop			@ (mov r8, r8)
 800190c:	46bd      	mov	sp, r7
 800190e:	b002      	add	sp, #8
 8001910:	bd80      	pop	{r7, pc}
 8001912:	46c0      	nop			@ (mov r8, r8)
 8001914:	20000278 	.word	0x20000278
 8001918:	20000048 	.word	0x20000048
 800191c:	2000027a 	.word	0x2000027a

08001920 <displayButtonISR>:

/*
 * Toggles through user time display brightness settings
 */
HAL_StatusTypeDef displayButtonISR(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001926:	1dfb      	adds	r3, r7, #7
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 800192c:	f7ff fda2 	bl	8001474 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8001930:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <displayButtonISR+0x48>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	001a      	movs	r2, r3
 8001936:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <displayButtonISR+0x4c>)
 8001938:	5c9b      	ldrb	r3, [r3, r2]
 800193a:	0018      	movs	r0, r3
 800193c:	f000 fc4a 	bl	80021d4 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8001940:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <displayButtonISR+0x48>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d903      	bls.n	8001950 <displayButtonISR+0x30>
		displayToggle = 0;
 8001948:	4b07      	ldr	r3, [pc, #28]	@ (8001968 <displayButtonISR+0x48>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
 800194e:	e005      	b.n	800195c <displayButtonISR+0x3c>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <displayButtonISR+0x48>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	3301      	adds	r3, #1
 8001956:	b2da      	uxtb	r2, r3
 8001958:	4b03      	ldr	r3, [pc, #12]	@ (8001968 <displayButtonISR+0x48>)
 800195a:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 800195c:	1dfb      	adds	r3, r7, #7
 800195e:	781b      	ldrb	r3, [r3, #0]

}
 8001960:	0018      	movs	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	b002      	add	sp, #8
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000090 	.word	0x20000090
 800196c:	0800692c 	.word	0x0800692c

08001970 <alarmEnableISR>:

/*
 * Toggles user alarm enable bool and alarm enable LED.
 */
HAL_StatusTypeDef alarmEnableISR(void) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001976:	1dfb      	adds	r3, r7, #7
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 800197c:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <alarmEnableISR+0xa0>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2201      	movs	r2, #1
 8001982:	4053      	eors	r3, r2
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00b      	beq.n	80019a2 <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 800198a:	4b22      	ldr	r3, [pc, #136]	@ (8001a14 <alarmEnableISR+0xa4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2280      	movs	r2, #128	@ 0x80
 8001990:	0151      	lsls	r1, r2, #5
 8001992:	2201      	movs	r2, #1
 8001994:	0018      	movs	r0, r3
 8001996:	f001 f99a 	bl	8002cce <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 800199a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <alarmEnableISR+0xa0>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
 80019a0:	e010      	b.n	80019c4 <alarmEnableISR+0x54>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 80019a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a10 <alarmEnableISR+0xa0>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00b      	beq.n	80019c2 <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 80019aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001a14 <alarmEnableISR+0xa4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2280      	movs	r2, #128	@ 0x80
 80019b0:	0151      	lsls	r1, r2, #5
 80019b2:	2200      	movs	r2, #0
 80019b4:	0018      	movs	r0, r3
 80019b6:	f001 f98a 	bl	8002cce <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 80019ba:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <alarmEnableISR+0xa0>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	e000      	b.n	80019c4 <alarmEnableISR+0x54>

	}
	else {
		__NOP();							//Code should never reach here.
 80019c2:	46c0      	nop			@ (mov r8, r8)
	}

	/*
	 * Reset snooze time
	 */
	secondSnooze = false;
 80019c4:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <alarmEnableISR+0xa8>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
	snoozeCounter = 0;
 80019ca:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <alarmEnableISR+0xac>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Stop_IT(timerSnooze);					// Stop snooze timer in case it is going
 80019d0:	4b13      	ldr	r3, [pc, #76]	@ (8001a20 <alarmEnableISR+0xb0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	0018      	movs	r0, r3
 80019d6:	f003 fee3 	bl	80057a0 <HAL_TIM_Base_Stop_IT>
	timerSnooze->Instance->CNT &= 0xFFFF0000;
 80019da:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <alarmEnableISR+0xb0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a20 <alarmEnableISR+0xb0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	0c12      	lsrs	r2, r2, #16
 80019ea:	0412      	lsls	r2, r2, #16
 80019ec:	625a      	str	r2, [r3, #36]	@ 0x24
	timerSnooze->Instance->SR &= 0xFFFC;
 80019ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <alarmEnableISR+0xb0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a20 <alarmEnableISR+0xb0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4909      	ldr	r1, [pc, #36]	@ (8001a24 <alarmEnableISR+0xb4>)
 80019fe:	400a      	ands	r2, r1
 8001a00:	611a      	str	r2, [r3, #16]

	return halRet;
 8001a02:	1dfb      	adds	r3, r7, #7
 8001a04:	781b      	ldrb	r3, [r3, #0]

}
 8001a06:	0018      	movs	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b002      	add	sp, #8
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	20000091 	.word	0x20000091
 8001a14:	20000010 	.word	0x20000010
 8001a18:	2000027a 	.word	0x2000027a
 8001a1c:	20000278 	.word	0x20000278
 8001a20:	20000048 	.word	0x20000048
 8001a24:	0000fffc 	.word	0x0000fffc

08001a28 <alarmSetISR>:
 * Delays for 3 seconds, checks if alarm set button is still pressed.
 * If it is, allow user to set the new alarm time
 * and blink display to indicate this
 *
 */
HAL_StatusTypeDef alarmSetISR(void) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001a2e:	003b      	movs	r3, r7
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for 3 seconds to see if alarm set button is still pressed
	 */

	// Delay for 3 * 1s intervals
	for(uint8_t i = 0; i < 3; i++) {
 8001a34:	1dfb      	adds	r3, r7, #7
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
 8001a3a:	e01a      	b.n	8001a72 <alarmSetISR+0x4a>

		HAL_TIM_Base_Stop(timerDelay);
 8001a3c:	4b64      	ldr	r3, [pc, #400]	@ (8001bd0 <alarmSetISR+0x1a8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	0018      	movs	r0, r3
 8001a42:	f003 fe33 	bl	80056ac <HAL_TIM_Base_Stop>
		timerDelay->Instance->CNT = 0;						// Reset timer base
 8001a46:	4b62      	ldr	r3, [pc, #392]	@ (8001bd0 <alarmSetISR+0x1a8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001a50:	4b5f      	ldr	r3, [pc, #380]	@ (8001bd0 <alarmSetISR+0x1a8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	0018      	movs	r0, r3
 8001a56:	f003 fddd 	bl	8005614 <HAL_TIM_Base_Start>
	//	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to

		do {

		} while(__HAL_TIM_GET_COUNTER(timerDelay) < (65535));
 8001a5a:	4b5d      	ldr	r3, [pc, #372]	@ (8001bd0 <alarmSetISR+0x1a8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a62:	4a5c      	ldr	r2, [pc, #368]	@ (8001bd4 <alarmSetISR+0x1ac>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d9f8      	bls.n	8001a5a <alarmSetISR+0x32>
	for(uint8_t i = 0; i < 3; i++) {
 8001a68:	1dfb      	adds	r3, r7, #7
 8001a6a:	781a      	ldrb	r2, [r3, #0]
 8001a6c:	1dfb      	adds	r3, r7, #7
 8001a6e:	3201      	adds	r2, #1
 8001a70:	701a      	strb	r2, [r3, #0]
 8001a72:	1dfb      	adds	r3, r7, #7
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d9e0      	bls.n	8001a3c <alarmSetISR+0x14>
	}

	// If button is still pressed, we are in alarm set mode.
	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 8001a7a:	4b57      	ldr	r3, [pc, #348]	@ (8001bd8 <alarmSetISR+0x1b0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2280      	movs	r2, #128	@ 0x80
 8001a80:	0212      	lsls	r2, r2, #8
 8001a82:	0011      	movs	r1, r2
 8001a84:	0018      	movs	r0, r3
 8001a86:	f001 f905 	bl	8002c94 <HAL_GPIO_ReadPin>
 8001a8a:	1e03      	subs	r3, r0, #0
 8001a8c:	d102      	bne.n	8001a94 <alarmSetISR+0x6c>
		alarmSetMode = true;
 8001a8e:	4b53      	ldr	r3, [pc, #332]	@ (8001bdc <alarmSetISR+0x1b4>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
	 * alarm set process until the button is pressed again
	 */


	// Reset Timer
	HAL_TIM_Base_Stop(timerDelay);
 8001a94:	4b4e      	ldr	r3, [pc, #312]	@ (8001bd0 <alarmSetISR+0x1a8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f003 fe07 	bl	80056ac <HAL_TIM_Base_Stop>
	timerDelay->Instance->CNT = 0;
 8001a9e:	4b4c      	ldr	r3, [pc, #304]	@ (8001bd0 <alarmSetISR+0x1a8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001aa8:	4b49      	ldr	r3, [pc, #292]	@ (8001bd0 <alarmSetISR+0x1a8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f003 fdb1 	bl	8005614 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001ab2:	4b47      	ldr	r3, [pc, #284]	@ (8001bd0 <alarmSetISR+0x1a8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	801a      	strh	r2, [r3, #0]

	bool alarmSetButtonReset = false;
 8001abe:	1cfb      	adds	r3, r7, #3
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {
 8001ac4:	4b45      	ldr	r3, [pc, #276]	@ (8001bdc <alarmSetISR+0x1b4>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d100      	bne.n	8001ace <alarmSetISR+0xa6>
 8001acc:	e077      	b.n	8001bbe <alarmSetISR+0x196>

		// If we were in second snooze mode, kill it.
		secondSnooze = false;
 8001ace:	4b44      	ldr	r3, [pc, #272]	@ (8001be0 <alarmSetISR+0x1b8>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
		snoozeCounter = 0;
 8001ad4:	4b43      	ldr	r3, [pc, #268]	@ (8001be4 <alarmSetISR+0x1bc>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]

		bool displayBlink = false;
 8001ada:	1cbb      	adds	r3, r7, #2
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]

		/*
		 * Determine whether to toggle high or low brightness
		 */
		uint8_t intenSet;
		if(displayToggle == 0) { 				// If the user has full brightness enabled, toggle full btightness
 8001ae0:	4b41      	ldr	r3, [pc, #260]	@ (8001be8 <alarmSetISR+0x1c0>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d103      	bne.n	8001af0 <alarmSetISR+0xc8>
			intenSet = 2;
 8001ae8:	1c7b      	adds	r3, r7, #1
 8001aea:	2202      	movs	r2, #2
 8001aec:	701a      	strb	r2, [r3, #0]
 8001aee:	e002      	b.n	8001af6 <alarmSetISR+0xce>
		}
		else {									// Else, toggle low brightness
			intenSet = 1;
 8001af0:	1c7b      	adds	r3, r7, #1
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
		}

		do {											// while the alarm set button is not held down, blink display.

			// Check to make sure the user has released the set button from the initial hold
			if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_SET) {
 8001af6:	4b38      	ldr	r3, [pc, #224]	@ (8001bd8 <alarmSetISR+0x1b0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2280      	movs	r2, #128	@ 0x80
 8001afc:	0212      	lsls	r2, r2, #8
 8001afe:	0011      	movs	r1, r2
 8001b00:	0018      	movs	r0, r3
 8001b02:	f001 f8c7 	bl	8002c94 <HAL_GPIO_ReadPin>
 8001b06:	0003      	movs	r3, r0
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d102      	bne.n	8001b12 <alarmSetISR+0xea>
				alarmSetButtonReset = true;
 8001b0c:	1cfb      	adds	r3, r7, #3
 8001b0e:	2201      	movs	r2, #1
 8001b10:	701a      	strb	r2, [r3, #0]
			}

			updateAndDisplayAlarm();
 8001b12:	f7ff fccb 	bl	80014ac <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 8001b16:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd0 <alarmSetISR+0x1a8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	1ad2      	subs	r2, r2, r3
 8001b24:	2380      	movs	r3, #128	@ 0x80
 8001b26:	021b      	lsls	r3, r3, #8
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d31e      	bcc.n	8001b6a <alarmSetISR+0x142>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink * intenSet]);		// Initialize to whatever duty cycle
 8001b2c:	1cbb      	adds	r3, r7, #2
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	1c7a      	adds	r2, r7, #1
 8001b32:	7812      	ldrb	r2, [r2, #0]
 8001b34:	4353      	muls	r3, r2
 8001b36:	4a2d      	ldr	r2, [pc, #180]	@ (8001bec <alarmSetISR+0x1c4>)
 8001b38:	5cd3      	ldrb	r3, [r2, r3]
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f000 fb4a 	bl	80021d4 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 8001b40:	4b23      	ldr	r3, [pc, #140]	@ (8001bd0 <alarmSetISR+0x1a8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	801a      	strh	r2, [r3, #0]
				displayBlink = !displayBlink;
 8001b4c:	1cbb      	adds	r3, r7, #2
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	1e5a      	subs	r2, r3, #1
 8001b52:	4193      	sbcs	r3, r2
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2201      	movs	r2, #1
 8001b58:	4053      	eors	r3, r2
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	001a      	movs	r2, r3
 8001b5e:	1cbb      	adds	r3, r7, #2
 8001b60:	701a      	strb	r2, [r3, #0]
 8001b62:	781a      	ldrb	r2, [r3, #0]
 8001b64:	2101      	movs	r1, #1
 8001b66:	400a      	ands	r2, r1
 8001b68:	701a      	strb	r2, [r3, #0]

			}

		}while((HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET)
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd8 <alarmSetISR+0x1b0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2280      	movs	r2, #128	@ 0x80
 8001b70:	0212      	lsls	r2, r2, #8
 8001b72:	0011      	movs	r1, r2
 8001b74:	0018      	movs	r0, r3
 8001b76:	f001 f88d 	bl	8002c94 <HAL_GPIO_ReadPin>
 8001b7a:	1e03      	subs	r3, r0, #0
				|| !alarmSetButtonReset);
 8001b7c:	d1bb      	bne.n	8001af6 <alarmSetISR+0xce>
 8001b7e:	1cfb      	adds	r3, r7, #3
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2201      	movs	r2, #1
 8001b84:	4053      	eors	r3, r2
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1b4      	bne.n	8001af6 <alarmSetISR+0xce>

		sevSeg_setIntensity(sevSeg_intensityDuty[intenSet]);			// Turn display back on
 8001b8c:	1c7b      	adds	r3, r7, #1
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4a16      	ldr	r2, [pc, #88]	@ (8001bec <alarmSetISR+0x1c4>)
 8001b92:	5cd3      	ldrb	r3, [r2, r3]
 8001b94:	0018      	movs	r0, r3
 8001b96:	f000 fb1d 	bl	80021d4 <sevSeg_setIntensity>
		if(intenSet == 2) {
 8001b9a:	1c7b      	adds	r3, r7, #1
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d103      	bne.n	8001baa <alarmSetISR+0x182>
			displayToggle = 0;
 8001ba2:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <alarmSetISR+0x1c0>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
 8001ba8:	e002      	b.n	8001bb0 <alarmSetISR+0x188>
		}
		else {
			displayToggle = 2;
 8001baa:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <alarmSetISR+0x1c0>)
 8001bac:	2202      	movs	r2, #2
 8001bae:	701a      	strb	r2, [r3, #0]
		}


		HAL_TIM_Base_Stop(timerDelay);
 8001bb0:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <alarmSetISR+0x1a8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f003 fd79 	bl	80056ac <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8001bba:	f7ff fc5b 	bl	8001474 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8001bbe:	4b07      	ldr	r3, [pc, #28]	@ (8001bdc <alarmSetISR+0x1b4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 8001bc4:	003b      	movs	r3, r7
 8001bc6:	781b      	ldrb	r3, [r3, #0]

}
 8001bc8:	0018      	movs	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b002      	add	sp, #8
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000044 	.word	0x20000044
 8001bd4:	0000fffe 	.word	0x0000fffe
 8001bd8:	20000004 	.word	0x20000004
 8001bdc:	20000279 	.word	0x20000279
 8001be0:	2000027a 	.word	0x2000027a
 8001be4:	20000278 	.word	0x20000278
 8001be8:	20000090 	.word	0x20000090
 8001bec:	0800692c 	.word	0x0800692c

08001bf0 <hourSetISR>:

/*
 * Increment either user alarm hour value or RTC hour value
 */
HAL_StatusTypeDef hourSetISR(void) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0


	HAL_StatusTypeDef halRet = HAL_OK;
 8001bf6:	1dfb      	adds	r3, r7, #7
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <hourSetISR+0x48>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <hourSetISR+0x1a>

		alarmHourInc();
 8001c04:	f000 f878 	bl	8001cf8 <alarmHourInc>
 8001c08:	e00f      	b.n	8001c2a <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 8001c0a:	f000 f8a5 	bl	8001d58 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001c0e:	490b      	ldr	r1, [pc, #44]	@ (8001c3c <hourSetISR+0x4c>)
 8001c10:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <hourSetISR+0x50>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	0018      	movs	r0, r3
 8001c16:	f002 fea1 	bl	800495c <HAL_RTC_SetTime>


		updateAndDisplayTime();
 8001c1a:	f7ff fc2b 	bl	8001474 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001c1e:	4a09      	ldr	r2, [pc, #36]	@ (8001c44 <hourSetISR+0x54>)
 8001c20:	4906      	ldr	r1, [pc, #24]	@ (8001c3c <hourSetISR+0x4c>)
 8001c22:	4b07      	ldr	r3, [pc, #28]	@ (8001c40 <hourSetISR+0x50>)
 8001c24:	0018      	movs	r0, r3
 8001c26:	f7fe ff13 	bl	8000a50 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 8001c2a:	1dfb      	adds	r3, r7, #7
 8001c2c:	781b      	ldrb	r3, [r3, #0]

}
 8001c2e:	0018      	movs	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b002      	add	sp, #8
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	20000279 	.word	0x20000279
 8001c3c:	20000098 	.word	0x20000098
 8001c40:	2000011c 	.word	0x2000011c
 8001c44:	200000ac 	.word	0x200000ac

08001c48 <minuteSetISR>:

/*
 * Increment either user alarm minute value or RTC minute value
 */
HAL_StatusTypeDef minuteSetISR(void) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08c      	sub	sp, #48	@ 0x30
 8001c4c:	af00      	add	r7, sp, #0


	HAL_StatusTypeDef halRet = HAL_OK;
 8001c4e:	232f      	movs	r3, #47	@ 0x2f
 8001c50:	18fb      	adds	r3, r7, r3
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001c56:	4b24      	ldr	r3, [pc, #144]	@ (8001ce8 <minuteSetISR+0xa0>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d002      	beq.n	8001c64 <minuteSetISR+0x1c>

		alarmMinuteInc();
 8001c5e:	f000 f8bb 	bl	8001dd8 <alarmMinuteInc>
 8001c62:	e03a      	b.n	8001cda <minuteSetISR+0x92>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 8001c64:	f000 f8d6 	bl	8001e14 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001c68:	4920      	ldr	r1, [pc, #128]	@ (8001cec <minuteSetISR+0xa4>)
 8001c6a:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <minuteSetISR+0xa8>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f002 fe74 	bl	800495c <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	0018      	movs	r0, r3
 8001c78:	2328      	movs	r3, #40	@ 0x28
 8001c7a:	001a      	movs	r2, r3
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	f004 fe01 	bl	8006884 <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8001c82:	2380      	movs	r3, #128	@ 0x80
 8001c84:	005a      	lsls	r2, r3, #1
 8001c86:	1d39      	adds	r1, r7, #4
 8001c88:	4819      	ldr	r0, [pc, #100]	@ (8001cf0 <minuteSetISR+0xa8>)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f003 f98a 	bl	8004fa4 <HAL_RTC_GetAlarm>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001c90:	4a18      	ldr	r2, [pc, #96]	@ (8001cf4 <minuteSetISR+0xac>)
 8001c92:	4916      	ldr	r1, [pc, #88]	@ (8001cec <minuteSetISR+0xa4>)
 8001c94:	4b16      	ldr	r3, [pc, #88]	@ (8001cf0 <minuteSetISR+0xa8>)
 8001c96:	0018      	movs	r0, r3
 8001c98:	f7fe feda 	bl	8000a50 <getRTCTime>

		if(currTime.Minutes > 58) {
 8001c9c:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <minuteSetISR+0xa4>)
 8001c9e:	785b      	ldrb	r3, [r3, #1]
 8001ca0:	2b3a      	cmp	r3, #58	@ 0x3a
 8001ca2:	d903      	bls.n	8001cac <minuteSetISR+0x64>
			sAlarm.AlarmTime.Minutes = 0;
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	705a      	strb	r2, [r3, #1]
 8001caa:	e005      	b.n	8001cb8 <minuteSetISR+0x70>
		} else {
			sAlarm.AlarmTime.Minutes = currTime.Minutes + 1;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <minuteSetISR+0xa4>)
 8001cae:	785b      	ldrb	r3, [r3, #1]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8001cb8:	46c0      	nop			@ (mov r8, r8)
 8001cba:	1d39      	adds	r1, r7, #4
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <minuteSetISR+0xa8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f003 f82f 	bl	8004d24 <HAL_RTC_SetAlarm_IT>
 8001cc6:	1e03      	subs	r3, r0, #0
 8001cc8:	d1f7      	bne.n	8001cba <minuteSetISR+0x72>


		updateAndDisplayTime();
 8001cca:	f7ff fbd3 	bl	8001474 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001cce:	4a09      	ldr	r2, [pc, #36]	@ (8001cf4 <minuteSetISR+0xac>)
 8001cd0:	4906      	ldr	r1, [pc, #24]	@ (8001cec <minuteSetISR+0xa4>)
 8001cd2:	4b07      	ldr	r3, [pc, #28]	@ (8001cf0 <minuteSetISR+0xa8>)
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f7fe febb 	bl	8000a50 <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 8001cda:	232f      	movs	r3, #47	@ 0x2f
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	781b      	ldrb	r3, [r3, #0]
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b00c      	add	sp, #48	@ 0x30
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000279 	.word	0x20000279
 8001cec:	20000098 	.word	0x20000098
 8001cf0:	2000011c 	.word	0x2000011c
 8001cf4:	200000ac 	.word	0x200000ac

08001cf8 <alarmHourInc>:

/*
 * Increment user alarm time hour
 */
void alarmHourInc(void) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8001cfc:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <alarmHourInc+0x5c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b0b      	cmp	r3, #11
 8001d02:	d903      	bls.n	8001d0c <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8001d04:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <alarmHourInc+0x5c>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	e01e      	b.n	8001d4a <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 8001d0c:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <alarmHourInc+0x5c>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b0b      	cmp	r3, #11
 8001d12:	d10e      	bne.n	8001d32 <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001d14:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <alarmHourInc+0x5c>)
 8001d16:	78db      	ldrb	r3, [r3, #3]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d103      	bne.n	8001d24 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d54 <alarmHourInc+0x5c>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	70da      	strb	r2, [r3, #3]
 8001d22:	e002      	b.n	8001d2a <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001d24:	4b0b      	ldr	r3, [pc, #44]	@ (8001d54 <alarmHourInc+0x5c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <alarmHourInc+0x5c>)
 8001d2c:	220c      	movs	r2, #12
 8001d2e:	701a      	strb	r2, [r3, #0]
 8001d30:	e00b      	b.n	8001d4a <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 8001d32:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <alarmHourInc+0x5c>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b0a      	cmp	r3, #10
 8001d38:	d806      	bhi.n	8001d48 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <alarmHourInc+0x5c>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4b04      	ldr	r3, [pc, #16]	@ (8001d54 <alarmHourInc+0x5c>)
 8001d44:	701a      	strb	r2, [r3, #0]
 8001d46:	e000      	b.n	8001d4a <alarmHourInc+0x52>
	}
	else {
		__NOP();
 8001d48:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001d4a:	f000 f8df 	bl	8001f0c <updateRTCBackupReg>

}
 8001d4e:	46c0      	nop			@ (mov r8, r8)
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200000b0 	.word	0x200000b0

08001d58 <currHourInc>:

/*
 * Increment current time hour
 */
void currHourInc(void) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8001dc8 <currHourInc+0x70>)
 8001d5e:	491b      	ldr	r1, [pc, #108]	@ (8001dcc <currHourInc+0x74>)
 8001d60:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd0 <currHourInc+0x78>)
 8001d62:	0018      	movs	r0, r3
 8001d64:	f7fe fe74 	bl	8000a50 <getRTCTime>

	if(currTime.Hours >= 12) {
 8001d68:	4b18      	ldr	r3, [pc, #96]	@ (8001dcc <currHourInc+0x74>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b0b      	cmp	r3, #11
 8001d6e:	d903      	bls.n	8001d78 <currHourInc+0x20>
		currTime.Hours = 1;
 8001d70:	4b16      	ldr	r3, [pc, #88]	@ (8001dcc <currHourInc+0x74>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
 8001d76:	e01e      	b.n	8001db6 <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 8001d78:	4b14      	ldr	r3, [pc, #80]	@ (8001dcc <currHourInc+0x74>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b0b      	cmp	r3, #11
 8001d7e:	d10e      	bne.n	8001d9e <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001d80:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <currHourInc+0x74>)
 8001d82:	78db      	ldrb	r3, [r3, #3]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d103      	bne.n	8001d90 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001d88:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <currHourInc+0x74>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	70da      	strb	r2, [r3, #3]
 8001d8e:	e002      	b.n	8001d96 <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001d90:	4b0e      	ldr	r3, [pc, #56]	@ (8001dcc <currHourInc+0x74>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 8001d96:	4b0d      	ldr	r3, [pc, #52]	@ (8001dcc <currHourInc+0x74>)
 8001d98:	220c      	movs	r2, #12
 8001d9a:	701a      	strb	r2, [r3, #0]
 8001d9c:	e00b      	b.n	8001db6 <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <currHourInc+0x7c>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b0a      	cmp	r3, #10
 8001da4:	d806      	bhi.n	8001db4 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 8001da6:	4b09      	ldr	r3, [pc, #36]	@ (8001dcc <currHourInc+0x74>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	3301      	adds	r3, #1
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4b07      	ldr	r3, [pc, #28]	@ (8001dcc <currHourInc+0x74>)
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	e000      	b.n	8001db6 <currHourInc+0x5e>
	}
	else {
		__NOP();
 8001db4:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001db6:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <currHourInc+0x74>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	@ (8001dcc <currHourInc+0x74>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]

}
 8001dc2:	46c0      	nop			@ (mov r8, r8)
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	200000ac 	.word	0x200000ac
 8001dcc:	20000098 	.word	0x20000098
 8001dd0:	2000011c 	.word	0x2000011c
 8001dd4:	200000b0 	.word	0x200000b0

08001dd8 <alarmMinuteInc>:

/*
 * Increment User alarm time minute
 */
void alarmMinuteInc(void) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <alarmMinuteInc+0x38>)
 8001dde:	785b      	ldrb	r3, [r3, #1]
 8001de0:	2b3a      	cmp	r3, #58	@ 0x3a
 8001de2:	d903      	bls.n	8001dec <alarmMinuteInc+0x14>
		/*
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		//alarmHourInc();
		userAlarmTime.Minutes = 0;
 8001de4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <alarmMinuteInc+0x38>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	705a      	strb	r2, [r3, #1]
 8001dea:	e00b      	b.n	8001e04 <alarmMinuteInc+0x2c>
	}
	else if(userAlarmTime.Minutes < 59) {
 8001dec:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <alarmMinuteInc+0x38>)
 8001dee:	785b      	ldrb	r3, [r3, #1]
 8001df0:	2b3a      	cmp	r3, #58	@ 0x3a
 8001df2:	d806      	bhi.n	8001e02 <alarmMinuteInc+0x2a>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <alarmMinuteInc+0x38>)
 8001df6:	785b      	ldrb	r3, [r3, #1]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	4b04      	ldr	r3, [pc, #16]	@ (8001e10 <alarmMinuteInc+0x38>)
 8001dfe:	705a      	strb	r2, [r3, #1]
 8001e00:	e000      	b.n	8001e04 <alarmMinuteInc+0x2c>
	}
	else {
		__NOP();
 8001e02:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001e04:	f000 f882 	bl	8001f0c <updateRTCBackupReg>

}
 8001e08:	46c0      	nop			@ (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	200000b0 	.word	0x200000b0

08001e14 <currMinuteInc>:

/*
 * Increment current time minute
 */
void currMinuteInc(void) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001e18:	4a11      	ldr	r2, [pc, #68]	@ (8001e60 <currMinuteInc+0x4c>)
 8001e1a:	4912      	ldr	r1, [pc, #72]	@ (8001e64 <currMinuteInc+0x50>)
 8001e1c:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <currMinuteInc+0x54>)
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7fe fe16 	bl	8000a50 <getRTCTime>

	if(currTime.Minutes >= 59) {
 8001e24:	4b0f      	ldr	r3, [pc, #60]	@ (8001e64 <currMinuteInc+0x50>)
 8001e26:	785b      	ldrb	r3, [r3, #1]
 8001e28:	2b3a      	cmp	r3, #58	@ 0x3a
 8001e2a:	d903      	bls.n	8001e34 <currMinuteInc+0x20>
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		// currHourInc();

		currTime.Minutes = 0;
 8001e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <currMinuteInc+0x50>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	705a      	strb	r2, [r3, #1]
 8001e32:	e00b      	b.n	8001e4c <currMinuteInc+0x38>
	}
	else if(currTime.Minutes < 59) {
 8001e34:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <currMinuteInc+0x50>)
 8001e36:	785b      	ldrb	r3, [r3, #1]
 8001e38:	2b3a      	cmp	r3, #58	@ 0x3a
 8001e3a:	d806      	bhi.n	8001e4a <currMinuteInc+0x36>
		currTime.Minutes = currTime.Minutes + 1;
 8001e3c:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <currMinuteInc+0x50>)
 8001e3e:	785b      	ldrb	r3, [r3, #1]
 8001e40:	3301      	adds	r3, #1
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	4b07      	ldr	r3, [pc, #28]	@ (8001e64 <currMinuteInc+0x50>)
 8001e46:	705a      	strb	r2, [r3, #1]
 8001e48:	e000      	b.n	8001e4c <currMinuteInc+0x38>
	}
	else {
		__NOP();
 8001e4a:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <currMinuteInc+0x50>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001e52:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <currMinuteInc+0x50>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]

}
 8001e58:	46c0      	nop			@ (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	46c0      	nop			@ (mov r8, r8)
 8001e60:	200000ac 	.word	0x200000ac
 8001e64:	20000098 	.word	0x20000098
 8001e68:	2000011c 	.word	0x2000011c

08001e6c <dispFault>:

/*
 * Displays a non-critical fault to indicate reduced functionality
 */
void dispFault(void) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
 8001e70:	4b04      	ldr	r3, [pc, #16]	@ (8001e84 <dispFault+0x18>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2101      	movs	r1, #1
 8001e76:	2201      	movs	r2, #1
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f000 ff28 	bl	8002cce <HAL_GPIO_WritePin>
}
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000028 	.word	0x20000028

08001e88 <dispFailure>:

/*
 * Displays a critical failure and ceases all operations
 */
void dispFailure(void) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f00 <dispFailure+0x78>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	0018      	movs	r0, r3
 8001e94:	f003 fc0a 	bl	80056ac <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001e98:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <dispFailure+0x78>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f003 fbb9 	bl	8005614 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001ea2:	4b17      	ldr	r3, [pc, #92]	@ (8001f00 <dispFailure+0x78>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001eac:	1cfb      	adds	r3, r7, #3
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001eb2:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <dispFailure+0x78>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	4a11      	ldr	r2, [pc, #68]	@ (8001f04 <dispFailure+0x7c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d9f6      	bls.n	8001eb2 <dispFailure+0x2a>

			HAL_GPIO_TogglePin(alarmLEDPort, alarmLEDPin);
 8001ec4:	4b10      	ldr	r3, [pc, #64]	@ (8001f08 <dispFailure+0x80>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2280      	movs	r2, #128	@ 0x80
 8001eca:	0152      	lsls	r2, r2, #5
 8001ecc:	0011      	movs	r1, r2
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f000 ff1a 	bl	8002d08 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f00 <dispFailure+0x78>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001edc:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001ede:	1cfb      	adds	r3, r7, #3
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	1e5a      	subs	r2, r3, #1
 8001ee4:	4193      	sbcs	r3, r2
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4053      	eors	r3, r2
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	001a      	movs	r2, r3
 8001ef0:	1cfb      	adds	r3, r7, #3
 8001ef2:	701a      	strb	r2, [r3, #0]
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	400a      	ands	r2, r1
 8001efa:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001efc:	e7d9      	b.n	8001eb2 <dispFailure+0x2a>
 8001efe:	46c0      	nop			@ (mov r8, r8)
 8001f00:	20000044 	.word	0x20000044
 8001f04:	00003ffe 	.word	0x00003ffe
 8001f08:	20000010 	.word	0x20000010

08001f0c <updateRTCBackupReg>:
}

/*
 * Updates RTC backup register with user alarm time to be later pulled from in the case of a power outage
 */
void updateRTCBackupReg(void) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8001f10:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <updateRTCBackupReg+0x40>)
 8001f12:	6819      	ldr	r1, [r3, #0]
 8001f14:	4b0e      	ldr	r3, [pc, #56]	@ (8001f50 <updateRTCBackupReg+0x44>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	001a      	movs	r2, r3
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <updateRTCBackupReg+0x48>)
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f003 fae9 	bl	80054f4 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 8001f22:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <updateRTCBackupReg+0x4c>)
 8001f24:	6819      	ldr	r1, [r3, #0]
 8001f26:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <updateRTCBackupReg+0x44>)
 8001f28:	785b      	ldrb	r3, [r3, #1]
 8001f2a:	001a      	movs	r2, r3
 8001f2c:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <updateRTCBackupReg+0x48>)
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f003 fae0 	bl	80054f4 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 8001f34:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <updateRTCBackupReg+0x50>)
 8001f36:	6819      	ldr	r1, [r3, #0]
 8001f38:	4b05      	ldr	r3, [pc, #20]	@ (8001f50 <updateRTCBackupReg+0x44>)
 8001f3a:	78db      	ldrb	r3, [r3, #3]
 8001f3c:	001a      	movs	r2, r3
 8001f3e:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <updateRTCBackupReg+0x48>)
 8001f40:	0018      	movs	r0, r3
 8001f42:	f003 fad7 	bl	80054f4 <HAL_RTCEx_BKUPWrite>

}
 8001f46:	46c0      	nop			@ (mov r8, r8)
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	200000c4 	.word	0x200000c4
 8001f50:	200000b0 	.word	0x200000b0
 8001f54:	2000011c 	.word	0x2000011c
 8001f58:	20000034 	.word	0x20000034
 8001f5c:	20000038 	.word	0x20000038

08001f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f64:	b672      	cpsid	i
}
 8001f66:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f68:	46c0      	nop			@ (mov r8, r8)
 8001f6a:	e7fd      	b.n	8001f68 <Error_Handler+0x8>

08001f6c <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8001f6c:	b5b0      	push	{r4, r5, r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	0005      	movs	r5, r0
 8001f74:	000c      	movs	r4, r1
 8001f76:	0010      	movs	r0, r2
 8001f78:	0019      	movs	r1, r3
 8001f7a:	1dbb      	adds	r3, r7, #6
 8001f7c:	1c2a      	adds	r2, r5, #0
 8001f7e:	801a      	strh	r2, [r3, #0]
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	1c22      	adds	r2, r4, #0
 8001f84:	801a      	strh	r2, [r3, #0]
 8001f86:	1cbb      	adds	r3, r7, #2
 8001f88:	1c02      	adds	r2, r0, #0
 8001f8a:	801a      	strh	r2, [r3, #0]
 8001f8c:	003b      	movs	r3, r7
 8001f8e:	1c0a      	adds	r2, r1, #0
 8001f90:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001f92:	4b2e      	ldr	r3, [pc, #184]	@ (800204c <sevSeg_Init+0xe0>)
 8001f94:	1dba      	adds	r2, r7, #6
 8001f96:	8812      	ldrh	r2, [r2, #0]
 8001f98:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002050 <sevSeg_Init+0xe4>)
 8001f9c:	1d3a      	adds	r2, r7, #4
 8001f9e:	8812      	ldrh	r2, [r2, #0]
 8001fa0:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	@ (8002054 <sevSeg_Init+0xe8>)
 8001fa4:	1cba      	adds	r2, r7, #2
 8001fa6:	8812      	ldrh	r2, [r2, #0]
 8001fa8:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8001faa:	4b2b      	ldr	r3, [pc, #172]	@ (8002058 <sevSeg_Init+0xec>)
 8001fac:	003a      	movs	r2, r7
 8001fae:	8812      	ldrh	r2, [r2, #0]
 8001fb0:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001fb2:	4a2a      	ldr	r2, [pc, #168]	@ (800205c <sevSeg_Init+0xf0>)
 8001fb4:	2320      	movs	r3, #32
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8001fbc:	4a28      	ldr	r2, [pc, #160]	@ (8002060 <sevSeg_Init+0xf4>)
 8001fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fc0:	0010      	movs	r0, r2
 8001fc2:	0019      	movs	r1, r3
 8001fc4:	234c      	movs	r3, #76	@ 0x4c
 8001fc6:	001a      	movs	r2, r3
 8001fc8:	f004 fc88 	bl	80068dc <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8001fcc:	4b25      	ldr	r3, [pc, #148]	@ (8002064 <sevSeg_Init+0xf8>)
 8001fce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fd0:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	e00b      	b.n	8001ff0 <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fde:	18d3      	adds	r3, r2, r3
 8001fe0:	6819      	ldr	r1, [r3, #0]
 8001fe2:	4b21      	ldr	r3, [pc, #132]	@ (8002068 <sevSeg_Init+0xfc>)
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	0092      	lsls	r2, r2, #2
 8001fe8:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	3301      	adds	r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	ddf0      	ble.n	8001fd8 <sevSeg_Init+0x6c>
	}

	sevSeg_setIntensity(50);
 8001ff6:	2032      	movs	r0, #50	@ 0x32
 8001ff8:	f000 f8ec 	bl	80021d4 <sevSeg_setIntensity>
//	}
//
//	HAL_TIM_Base_Stop(htim);

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <sevSeg_Init+0xfc>)
 8001ffe:	6918      	ldr	r0, [r3, #16]
 8002000:	4b16      	ldr	r3, [pc, #88]	@ (800205c <sevSeg_Init+0xf0>)
 8002002:	8819      	ldrh	r1, [r3, #0]
 8002004:	4b19      	ldr	r3, [pc, #100]	@ (800206c <sevSeg_Init+0x100>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	001a      	movs	r2, r3
 800200a:	f000 fe60 	bl	8002cce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 800200e:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <sevSeg_Init+0xfc>)
 8002010:	6918      	ldr	r0, [r3, #16]
 8002012:	4b12      	ldr	r3, [pc, #72]	@ (800205c <sevSeg_Init+0xf0>)
 8002014:	8819      	ldrh	r1, [r3, #0]
 8002016:	4b15      	ldr	r3, [pc, #84]	@ (800206c <sevSeg_Init+0x100>)
 8002018:	785b      	ldrb	r3, [r3, #1]
 800201a:	001a      	movs	r2, r3
 800201c:	f000 fe57 	bl	8002cce <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002020:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <sevSeg_Init+0xfc>)
 8002022:	6898      	ldr	r0, [r3, #8]
 8002024:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <sevSeg_Init+0xe8>)
 8002026:	8819      	ldrh	r1, [r3, #0]
 8002028:	4b10      	ldr	r3, [pc, #64]	@ (800206c <sevSeg_Init+0x100>)
 800202a:	785b      	ldrb	r3, [r3, #1]
 800202c:	001a      	movs	r2, r3
 800202e:	f000 fe4e 	bl	8002cce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002032:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <sevSeg_Init+0xfc>)
 8002034:	6898      	ldr	r0, [r3, #8]
 8002036:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <sevSeg_Init+0xe8>)
 8002038:	8819      	ldrh	r1, [r3, #0]
 800203a:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <sevSeg_Init+0x100>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	001a      	movs	r2, r3
 8002040:	f000 fe45 	bl	8002cce <HAL_GPIO_WritePin>

}
 8002044:	46c0      	nop			@ (mov r8, r8)
 8002046:	46bd      	mov	sp, r7
 8002048:	b004      	add	sp, #16
 800204a:	bdb0      	pop	{r4, r5, r7, pc}
 800204c:	20000290 	.word	0x20000290
 8002050:	20000292 	.word	0x20000292
 8002054:	20000294 	.word	0x20000294
 8002058:	20000296 	.word	0x20000296
 800205c:	20000298 	.word	0x20000298
 8002060:	2000029c 	.word	0x2000029c
 8002064:	200002e8 	.word	0x200002e8
 8002068:	20000050 	.word	0x20000050
 800206c:	20000064 	.word	0x20000064

08002070 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	210a      	movs	r1, #10
 800207e:	0018      	movs	r0, r3
 8002080:	f7fe f840 	bl	8000104 <__udivsi3>
 8002084:	0003      	movs	r3, r0
 8002086:	b2da      	uxtb	r2, r3
 8002088:	2408      	movs	r4, #8
 800208a:	193b      	adds	r3, r7, r4
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	210a      	movs	r1, #10
 8002094:	0018      	movs	r0, r3
 8002096:	f7fe f8bb 	bl	8000210 <__aeabi_uidivmod>
 800209a:	000b      	movs	r3, r1
 800209c:	b2da      	uxtb	r2, r3
 800209e:	193b      	adds	r3, r7, r4
 80020a0:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80020a6:	210a      	movs	r1, #10
 80020a8:	0018      	movs	r0, r3
 80020aa:	f7fe f82b 	bl	8000104 <__udivsi3>
 80020ae:	0003      	movs	r3, r0
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	193b      	adds	r3, r7, r4
 80020b4:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80020ba:	210a      	movs	r1, #10
 80020bc:	0018      	movs	r0, r3
 80020be:	f7fe f8a7 	bl	8000210 <__aeabi_uidivmod>
 80020c2:	000b      	movs	r3, r1
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	193b      	adds	r3, r7, r4
 80020c8:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 80020ca:	2116      	movs	r1, #22
 80020cc:	187b      	adds	r3, r7, r1
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	78db      	ldrb	r3, [r3, #3]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d102      	bne.n	80020e0 <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 80020da:	187b      	adds	r3, r7, r1
 80020dc:	2202      	movs	r2, #2
 80020de:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	e04f      	b.n	8002186 <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 80020e6:	2308      	movs	r3, #8
 80020e8:	18fa      	adds	r2, r7, r3
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	18d3      	adds	r3, r2, r3
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	0019      	movs	r1, r3
 80020f2:	2417      	movs	r4, #23
 80020f4:	193b      	adds	r3, r7, r4
 80020f6:	4a30      	ldr	r2, [pc, #192]	@ (80021b8 <sevSeg_updateDigits+0x148>)
 80020f8:	5c52      	ldrb	r2, [r2, r1]
 80020fa:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d110      	bne.n	8002124 <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	210a      	movs	r1, #10
 8002108:	0018      	movs	r0, r3
 800210a:	f7fd fffb 	bl	8000104 <__udivsi3>
 800210e:	0003      	movs	r3, r0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	001a      	movs	r2, r3
 8002114:	2316      	movs	r3, #22
 8002116:	18fb      	adds	r3, r7, r3
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	18d2      	adds	r2, r2, r3
 800211c:	193b      	adds	r3, r7, r4
 800211e:	4927      	ldr	r1, [pc, #156]	@ (80021bc <sevSeg_updateDigits+0x14c>)
 8002120:	5c8a      	ldrb	r2, [r1, r2]
 8002122:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	e027      	b.n	800217a <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 800212a:	4b25      	ldr	r3, [pc, #148]	@ (80021c0 <sevSeg_updateDigits+0x150>)
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	4b25      	ldr	r3, [pc, #148]	@ (80021c4 <sevSeg_updateDigits+0x154>)
 8002130:	8819      	ldrh	r1, [r3, #0]
 8002132:	2417      	movs	r4, #23
 8002134:	193b      	adds	r3, r7, r4
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2201      	movs	r2, #1
 800213a:	4013      	ands	r3, r2
 800213c:	4a22      	ldr	r2, [pc, #136]	@ (80021c8 <sevSeg_updateDigits+0x158>)
 800213e:	5cd3      	ldrb	r3, [r2, r3]
 8002140:	001a      	movs	r2, r3
 8002142:	f000 fdc4 	bl	8002cce <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8002146:	4b1e      	ldr	r3, [pc, #120]	@ (80021c0 <sevSeg_updateDigits+0x150>)
 8002148:	6858      	ldr	r0, [r3, #4]
 800214a:	4b20      	ldr	r3, [pc, #128]	@ (80021cc <sevSeg_updateDigits+0x15c>)
 800214c:	8819      	ldrh	r1, [r3, #0]
 800214e:	4b1e      	ldr	r3, [pc, #120]	@ (80021c8 <sevSeg_updateDigits+0x158>)
 8002150:	785b      	ldrb	r3, [r3, #1]
 8002152:	001a      	movs	r2, r3
 8002154:	f000 fdbb 	bl	8002cce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8002158:	4b19      	ldr	r3, [pc, #100]	@ (80021c0 <sevSeg_updateDigits+0x150>)
 800215a:	6858      	ldr	r0, [r3, #4]
 800215c:	4b1b      	ldr	r3, [pc, #108]	@ (80021cc <sevSeg_updateDigits+0x15c>)
 800215e:	8819      	ldrh	r1, [r3, #0]
 8002160:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <sevSeg_updateDigits+0x158>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	001a      	movs	r2, r3
 8002166:	f000 fdb2 	bl	8002cce <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 800216a:	193b      	adds	r3, r7, r4
 800216c:	193a      	adds	r2, r7, r4
 800216e:	7812      	ldrb	r2, [r2, #0]
 8002170:	0852      	lsrs	r2, r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3301      	adds	r3, #1
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b07      	cmp	r3, #7
 800217e:	ddd4      	ble.n	800212a <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	3301      	adds	r3, #1
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2b03      	cmp	r3, #3
 800218a:	ddac      	ble.n	80020e6 <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 800218c:	4b0c      	ldr	r3, [pc, #48]	@ (80021c0 <sevSeg_updateDigits+0x150>)
 800218e:	6898      	ldr	r0, [r3, #8]
 8002190:	4b0f      	ldr	r3, [pc, #60]	@ (80021d0 <sevSeg_updateDigits+0x160>)
 8002192:	8819      	ldrh	r1, [r3, #0]
 8002194:	4b0c      	ldr	r3, [pc, #48]	@ (80021c8 <sevSeg_updateDigits+0x158>)
 8002196:	785b      	ldrb	r3, [r3, #1]
 8002198:	001a      	movs	r2, r3
 800219a:	f000 fd98 	bl	8002cce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800219e:	4b08      	ldr	r3, [pc, #32]	@ (80021c0 <sevSeg_updateDigits+0x150>)
 80021a0:	6898      	ldr	r0, [r3, #8]
 80021a2:	4b0b      	ldr	r3, [pc, #44]	@ (80021d0 <sevSeg_updateDigits+0x160>)
 80021a4:	8819      	ldrh	r1, [r3, #0]
 80021a6:	4b08      	ldr	r3, [pc, #32]	@ (80021c8 <sevSeg_updateDigits+0x158>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	001a      	movs	r2, r3
 80021ac:	f000 fd8f 	bl	8002cce <HAL_GPIO_WritePin>

	return;
 80021b0:	46c0      	nop			@ (mov r8, r8)

}
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b007      	add	sp, #28
 80021b6:	bd90      	pop	{r4, r7, pc}
 80021b8:	08006930 	.word	0x08006930
 80021bc:	0800693c 	.word	0x0800693c
 80021c0:	20000050 	.word	0x20000050
 80021c4:	20000290 	.word	0x20000290
 80021c8:	20000064 	.word	0x20000064
 80021cc:	20000292 	.word	0x20000292
 80021d0:	20000294 	.word	0x20000294

080021d4 <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	0002      	movs	r2, r0
 80021dc:	1dbb      	adds	r3, r7, #6
 80021de:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 80021e0:	4b20      	ldr	r3, [pc, #128]	@ (8002264 <sevSeg_setIntensity+0x90>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d105      	bne.n	80021f4 <sevSeg_setIntensity+0x20>
 80021e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002268 <sevSeg_setIntensity+0x94>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	1dba      	adds	r2, r7, #6
 80021ee:	8812      	ldrh	r2, [r2, #0]
 80021f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80021f2:	e02c      	b.n	800224e <sevSeg_setIntensity+0x7a>
 80021f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <sevSeg_setIntensity+0x90>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d105      	bne.n	8002208 <sevSeg_setIntensity+0x34>
 80021fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002268 <sevSeg_setIntensity+0x94>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	1dbb      	adds	r3, r7, #6
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	6393      	str	r3, [r2, #56]	@ 0x38
 8002206:	e022      	b.n	800224e <sevSeg_setIntensity+0x7a>
 8002208:	4b16      	ldr	r3, [pc, #88]	@ (8002264 <sevSeg_setIntensity+0x90>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b08      	cmp	r3, #8
 800220e:	d105      	bne.n	800221c <sevSeg_setIntensity+0x48>
 8002210:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <sevSeg_setIntensity+0x94>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	1dbb      	adds	r3, r7, #6
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800221a:	e018      	b.n	800224e <sevSeg_setIntensity+0x7a>
 800221c:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <sevSeg_setIntensity+0x90>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b0c      	cmp	r3, #12
 8002222:	d105      	bne.n	8002230 <sevSeg_setIntensity+0x5c>
 8002224:	4b10      	ldr	r3, [pc, #64]	@ (8002268 <sevSeg_setIntensity+0x94>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	1dbb      	adds	r3, r7, #6
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	6413      	str	r3, [r2, #64]	@ 0x40
 800222e:	e00e      	b.n	800224e <sevSeg_setIntensity+0x7a>
 8002230:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <sevSeg_setIntensity+0x90>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b10      	cmp	r3, #16
 8002236:	d105      	bne.n	8002244 <sevSeg_setIntensity+0x70>
 8002238:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <sevSeg_setIntensity+0x94>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	1dbb      	adds	r3, r7, #6
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	6593      	str	r3, [r2, #88]	@ 0x58
 8002242:	e004      	b.n	800224e <sevSeg_setIntensity+0x7a>
 8002244:	4b08      	ldr	r3, [pc, #32]	@ (8002268 <sevSeg_setIntensity+0x94>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	1dbb      	adds	r3, r7, #6
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 800224e:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <sevSeg_setIntensity+0x90>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <sevSeg_setIntensity+0x94>)
 8002254:	0011      	movs	r1, r2
 8002256:	0018      	movs	r0, r3
 8002258:	f003 fb28 	bl	80058ac <HAL_TIM_PWM_Start>

}
 800225c:	46c0      	nop			@ (mov r8, r8)
 800225e:	46bd      	mov	sp, r7
 8002260:	b002      	add	sp, #8
 8002262:	bd80      	pop	{r7, pc}
 8002264:	200002e8 	.word	0x200002e8
 8002268:	2000029c 	.word	0x2000029c

0800226c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002272:	4b13      	ldr	r3, [pc, #76]	@ (80022c0 <HAL_MspInit+0x54>)
 8002274:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002276:	4b12      	ldr	r3, [pc, #72]	@ (80022c0 <HAL_MspInit+0x54>)
 8002278:	2101      	movs	r1, #1
 800227a:	430a      	orrs	r2, r1
 800227c:	641a      	str	r2, [r3, #64]	@ 0x40
 800227e:	4b10      	ldr	r3, [pc, #64]	@ (80022c0 <HAL_MspInit+0x54>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	2201      	movs	r2, #1
 8002284:	4013      	ands	r3, r2
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	4b0d      	ldr	r3, [pc, #52]	@ (80022c0 <HAL_MspInit+0x54>)
 800228c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800228e:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <HAL_MspInit+0x54>)
 8002290:	2180      	movs	r1, #128	@ 0x80
 8002292:	0549      	lsls	r1, r1, #21
 8002294:	430a      	orrs	r2, r1
 8002296:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002298:	4b09      	ldr	r3, [pc, #36]	@ (80022c0 <HAL_MspInit+0x54>)
 800229a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800229c:	2380      	movs	r3, #128	@ 0x80
 800229e:	055b      	lsls	r3, r3, #21
 80022a0:	4013      	ands	r3, r2
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	2004      	movs	r0, #4
 80022ac:	f000 fb5c 	bl	8002968 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80022b0:	2004      	movs	r0, #4
 80022b2:	f000 fb6e 	bl	8002992 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b6:	46c0      	nop			@ (mov r8, r8)
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b002      	add	sp, #8
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	40021000 	.word	0x40021000

080022c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b095      	sub	sp, #84	@ 0x54
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	233c      	movs	r3, #60	@ 0x3c
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	0018      	movs	r0, r3
 80022d2:	2314      	movs	r3, #20
 80022d4:	001a      	movs	r2, r3
 80022d6:	2100      	movs	r1, #0
 80022d8:	f004 fad4 	bl	8006884 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022dc:	2414      	movs	r4, #20
 80022de:	193b      	adds	r3, r7, r4
 80022e0:	0018      	movs	r0, r3
 80022e2:	2328      	movs	r3, #40	@ 0x28
 80022e4:	001a      	movs	r2, r3
 80022e6:	2100      	movs	r1, #0
 80022e8:	f004 facc 	bl	8006884 <memset>
  if(hi2c->Instance==I2C1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a22      	ldr	r2, [pc, #136]	@ (800237c <HAL_I2C_MspInit+0xb8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d13d      	bne.n	8002372 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80022f6:	193b      	adds	r3, r7, r4
 80022f8:	2220      	movs	r2, #32
 80022fa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80022fc:	193b      	adds	r3, r7, r4
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002302:	193b      	adds	r3, r7, r4
 8002304:	0018      	movs	r0, r3
 8002306:	f002 f895 	bl	8004434 <HAL_RCCEx_PeriphCLKConfig>
 800230a:	1e03      	subs	r3, r0, #0
 800230c:	d001      	beq.n	8002312 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800230e:	f7ff fe27 	bl	8001f60 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002312:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <HAL_I2C_MspInit+0xbc>)
 8002314:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002316:	4b1a      	ldr	r3, [pc, #104]	@ (8002380 <HAL_I2C_MspInit+0xbc>)
 8002318:	2102      	movs	r1, #2
 800231a:	430a      	orrs	r2, r1
 800231c:	635a      	str	r2, [r3, #52]	@ 0x34
 800231e:	4b18      	ldr	r3, [pc, #96]	@ (8002380 <HAL_I2C_MspInit+0xbc>)
 8002320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002322:	2202      	movs	r2, #2
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800232a:	213c      	movs	r1, #60	@ 0x3c
 800232c:	187b      	adds	r3, r7, r1
 800232e:	22c0      	movs	r2, #192	@ 0xc0
 8002330:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002332:	187b      	adds	r3, r7, r1
 8002334:	2212      	movs	r2, #18
 8002336:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	187b      	adds	r3, r7, r1
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	187b      	adds	r3, r7, r1
 8002340:	2200      	movs	r2, #0
 8002342:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002344:	187b      	adds	r3, r7, r1
 8002346:	2206      	movs	r2, #6
 8002348:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234a:	187b      	adds	r3, r7, r1
 800234c:	4a0d      	ldr	r2, [pc, #52]	@ (8002384 <HAL_I2C_MspInit+0xc0>)
 800234e:	0019      	movs	r1, r3
 8002350:	0010      	movs	r0, r2
 8002352:	f000 fb3b 	bl	80029cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002356:	4b0a      	ldr	r3, [pc, #40]	@ (8002380 <HAL_I2C_MspInit+0xbc>)
 8002358:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800235a:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <HAL_I2C_MspInit+0xbc>)
 800235c:	2180      	movs	r1, #128	@ 0x80
 800235e:	0389      	lsls	r1, r1, #14
 8002360:	430a      	orrs	r2, r1
 8002362:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002364:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <HAL_I2C_MspInit+0xbc>)
 8002366:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002368:	2380      	movs	r3, #128	@ 0x80
 800236a:	039b      	lsls	r3, r3, #14
 800236c:	4013      	ands	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002372:	46c0      	nop			@ (mov r8, r8)
 8002374:	46bd      	mov	sp, r7
 8002376:	b015      	add	sp, #84	@ 0x54
 8002378:	bd90      	pop	{r4, r7, pc}
 800237a:	46c0      	nop			@ (mov r8, r8)
 800237c:	40005400 	.word	0x40005400
 8002380:	40021000 	.word	0x40021000
 8002384:	50000400 	.word	0x50000400

08002388 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002388:	b590      	push	{r4, r7, lr}
 800238a:	b08f      	sub	sp, #60	@ 0x3c
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002390:	2410      	movs	r4, #16
 8002392:	193b      	adds	r3, r7, r4
 8002394:	0018      	movs	r0, r3
 8002396:	2328      	movs	r3, #40	@ 0x28
 8002398:	001a      	movs	r2, r3
 800239a:	2100      	movs	r1, #0
 800239c:	f004 fa72 	bl	8006884 <memset>
  if(hrtc->Instance==RTC)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a19      	ldr	r2, [pc, #100]	@ (800240c <HAL_RTC_MspInit+0x84>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d12c      	bne.n	8002404 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023aa:	193b      	adds	r3, r7, r4
 80023ac:	2280      	movs	r2, #128	@ 0x80
 80023ae:	0292      	lsls	r2, r2, #10
 80023b0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80023b2:	193b      	adds	r3, r7, r4
 80023b4:	2280      	movs	r2, #128	@ 0x80
 80023b6:	0052      	lsls	r2, r2, #1
 80023b8:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023ba:	193b      	adds	r3, r7, r4
 80023bc:	0018      	movs	r0, r3
 80023be:	f002 f839 	bl	8004434 <HAL_RCCEx_PeriphCLKConfig>
 80023c2:	1e03      	subs	r3, r0, #0
 80023c4:	d001      	beq.n	80023ca <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80023c6:	f7ff fdcb 	bl	8001f60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023ca:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <HAL_RTC_MspInit+0x88>)
 80023cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023ce:	4b10      	ldr	r3, [pc, #64]	@ (8002410 <HAL_RTC_MspInit+0x88>)
 80023d0:	2180      	movs	r1, #128	@ 0x80
 80023d2:	0209      	lsls	r1, r1, #8
 80023d4:	430a      	orrs	r2, r1
 80023d6:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80023d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <HAL_RTC_MspInit+0x88>)
 80023da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002410 <HAL_RTC_MspInit+0x88>)
 80023de:	2180      	movs	r1, #128	@ 0x80
 80023e0:	00c9      	lsls	r1, r1, #3
 80023e2:	430a      	orrs	r2, r1
 80023e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002410 <HAL_RTC_MspInit+0x88>)
 80023e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023ea:	2380      	movs	r3, #128	@ 0x80
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4013      	ands	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2100      	movs	r1, #0
 80023f8:	2002      	movs	r0, #2
 80023fa:	f000 fab5 	bl	8002968 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80023fe:	2002      	movs	r0, #2
 8002400:	f000 fac7 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002404:	46c0      	nop			@ (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	b00f      	add	sp, #60	@ 0x3c
 800240a:	bd90      	pop	{r4, r7, pc}
 800240c:	40002800 	.word	0x40002800
 8002410:	40021000 	.word	0x40021000

08002414 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b08f      	sub	sp, #60	@ 0x3c
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800241c:	2410      	movs	r4, #16
 800241e:	193b      	adds	r3, r7, r4
 8002420:	0018      	movs	r0, r3
 8002422:	2328      	movs	r3, #40	@ 0x28
 8002424:	001a      	movs	r2, r3
 8002426:	2100      	movs	r1, #0
 8002428:	f004 fa2c 	bl	8006884 <memset>
  if(htim_pwm->Instance==TIM1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a1b      	ldr	r2, [pc, #108]	@ (80024a0 <HAL_TIM_PWM_MspInit+0x8c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d11d      	bne.n	8002472 <HAL_TIM_PWM_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8002436:	193b      	adds	r3, r7, r4
 8002438:	2280      	movs	r2, #128	@ 0x80
 800243a:	0392      	lsls	r2, r2, #14
 800243c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800243e:	193b      	adds	r3, r7, r4
 8002440:	2200      	movs	r2, #0
 8002442:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002444:	193b      	adds	r3, r7, r4
 8002446:	0018      	movs	r0, r3
 8002448:	f001 fff4 	bl	8004434 <HAL_RCCEx_PeriphCLKConfig>
 800244c:	1e03      	subs	r3, r0, #0
 800244e:	d001      	beq.n	8002454 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8002450:	f7ff fd86 	bl	8001f60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002454:	4b13      	ldr	r3, [pc, #76]	@ (80024a4 <HAL_TIM_PWM_MspInit+0x90>)
 8002456:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002458:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <HAL_TIM_PWM_MspInit+0x90>)
 800245a:	2180      	movs	r1, #128	@ 0x80
 800245c:	0109      	lsls	r1, r1, #4
 800245e:	430a      	orrs	r2, r1
 8002460:	641a      	str	r2, [r3, #64]	@ 0x40
 8002462:	4b10      	ldr	r3, [pc, #64]	@ (80024a4 <HAL_TIM_PWM_MspInit+0x90>)
 8002464:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002466:	2380      	movs	r3, #128	@ 0x80
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	4013      	ands	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002470:	e011      	b.n	8002496 <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	2380      	movs	r3, #128	@ 0x80
 8002478:	05db      	lsls	r3, r3, #23
 800247a:	429a      	cmp	r2, r3
 800247c:	d10b      	bne.n	8002496 <HAL_TIM_PWM_MspInit+0x82>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800247e:	4b09      	ldr	r3, [pc, #36]	@ (80024a4 <HAL_TIM_PWM_MspInit+0x90>)
 8002480:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002482:	4b08      	ldr	r3, [pc, #32]	@ (80024a4 <HAL_TIM_PWM_MspInit+0x90>)
 8002484:	2101      	movs	r1, #1
 8002486:	430a      	orrs	r2, r1
 8002488:	63da      	str	r2, [r3, #60]	@ 0x3c
 800248a:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <HAL_TIM_PWM_MspInit+0x90>)
 800248c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248e:	2201      	movs	r2, #1
 8002490:	4013      	ands	r3, r2
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]
}
 8002496:	46c0      	nop			@ (mov r8, r8)
 8002498:	46bd      	mov	sp, r7
 800249a:	b00f      	add	sp, #60	@ 0x3c
 800249c:	bd90      	pop	{r4, r7, pc}
 800249e:	46c0      	nop			@ (mov r8, r8)
 80024a0:	40012c00 	.word	0x40012c00
 80024a4:	40021000 	.word	0x40021000

080024a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a18      	ldr	r2, [pc, #96]	@ (8002518 <HAL_TIM_Base_MspInit+0x70>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d10e      	bne.n	80024d8 <HAL_TIM_Base_MspInit+0x30>
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80024ba:	4b18      	ldr	r3, [pc, #96]	@ (800251c <HAL_TIM_Base_MspInit+0x74>)
 80024bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024be:	4b17      	ldr	r3, [pc, #92]	@ (800251c <HAL_TIM_Base_MspInit+0x74>)
 80024c0:	2180      	movs	r1, #128	@ 0x80
 80024c2:	0209      	lsls	r1, r1, #8
 80024c4:	430a      	orrs	r2, r1
 80024c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80024c8:	4b14      	ldr	r3, [pc, #80]	@ (800251c <HAL_TIM_Base_MspInit+0x74>)
 80024ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024cc:	2380      	movs	r3, #128	@ 0x80
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	4013      	ands	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80024d6:	e01a      	b.n	800250e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a10      	ldr	r2, [pc, #64]	@ (8002520 <HAL_TIM_Base_MspInit+0x78>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d115      	bne.n	800250e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80024e2:	4b0e      	ldr	r3, [pc, #56]	@ (800251c <HAL_TIM_Base_MspInit+0x74>)
 80024e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024e6:	4b0d      	ldr	r3, [pc, #52]	@ (800251c <HAL_TIM_Base_MspInit+0x74>)
 80024e8:	2180      	movs	r1, #128	@ 0x80
 80024ea:	0289      	lsls	r1, r1, #10
 80024ec:	430a      	orrs	r2, r1
 80024ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80024f0:	4b0a      	ldr	r3, [pc, #40]	@ (800251c <HAL_TIM_Base_MspInit+0x74>)
 80024f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024f4:	2380      	movs	r3, #128	@ 0x80
 80024f6:	029b      	lsls	r3, r3, #10
 80024f8:	4013      	ands	r3, r2
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80024fe:	2200      	movs	r2, #0
 8002500:	2100      	movs	r1, #0
 8002502:	2015      	movs	r0, #21
 8002504:	f000 fa30 	bl	8002968 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002508:	2015      	movs	r0, #21
 800250a:	f000 fa42 	bl	8002992 <HAL_NVIC_EnableIRQ>
}
 800250e:	46c0      	nop			@ (mov r8, r8)
 8002510:	46bd      	mov	sp, r7
 8002512:	b004      	add	sp, #16
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			@ (mov r8, r8)
 8002518:	40002000 	.word	0x40002000
 800251c:	40021000 	.word	0x40021000
 8002520:	40014400 	.word	0x40014400

08002524 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b08b      	sub	sp, #44	@ 0x2c
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	2414      	movs	r4, #20
 800252e:	193b      	adds	r3, r7, r4
 8002530:	0018      	movs	r0, r3
 8002532:	2314      	movs	r3, #20
 8002534:	001a      	movs	r2, r3
 8002536:	2100      	movs	r1, #0
 8002538:	f004 f9a4 	bl	8006884 <memset>
  if(htim->Instance==TIM1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a29      	ldr	r2, [pc, #164]	@ (80025e8 <HAL_TIM_MspPostInit+0xc4>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d124      	bne.n	8002590 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002546:	4b29      	ldr	r3, [pc, #164]	@ (80025ec <HAL_TIM_MspPostInit+0xc8>)
 8002548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800254a:	4b28      	ldr	r3, [pc, #160]	@ (80025ec <HAL_TIM_MspPostInit+0xc8>)
 800254c:	2101      	movs	r1, #1
 800254e:	430a      	orrs	r2, r1
 8002550:	635a      	str	r2, [r3, #52]	@ 0x34
 8002552:	4b26      	ldr	r3, [pc, #152]	@ (80025ec <HAL_TIM_MspPostInit+0xc8>)
 8002554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002556:	2201      	movs	r2, #1
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800255e:	193b      	adds	r3, r7, r4
 8002560:	2280      	movs	r2, #128	@ 0x80
 8002562:	0052      	lsls	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002566:	0021      	movs	r1, r4
 8002568:	187b      	adds	r3, r7, r1
 800256a:	2202      	movs	r2, #2
 800256c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	187b      	adds	r3, r7, r1
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002574:	187b      	adds	r3, r7, r1
 8002576:	2200      	movs	r2, #0
 8002578:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800257a:	187b      	adds	r3, r7, r1
 800257c:	2202      	movs	r2, #2
 800257e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002580:	187a      	adds	r2, r7, r1
 8002582:	23a0      	movs	r3, #160	@ 0xa0
 8002584:	05db      	lsls	r3, r3, #23
 8002586:	0011      	movs	r1, r2
 8002588:	0018      	movs	r0, r3
 800258a:	f000 fa1f 	bl	80029cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800258e:	e027      	b.n	80025e0 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	2380      	movs	r3, #128	@ 0x80
 8002596:	05db      	lsls	r3, r3, #23
 8002598:	429a      	cmp	r2, r3
 800259a:	d121      	bne.n	80025e0 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800259c:	4b13      	ldr	r3, [pc, #76]	@ (80025ec <HAL_TIM_MspPostInit+0xc8>)
 800259e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025a0:	4b12      	ldr	r3, [pc, #72]	@ (80025ec <HAL_TIM_MspPostInit+0xc8>)
 80025a2:	2104      	movs	r1, #4
 80025a4:	430a      	orrs	r2, r1
 80025a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80025a8:	4b10      	ldr	r3, [pc, #64]	@ (80025ec <HAL_TIM_MspPostInit+0xc8>)
 80025aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ac:	2204      	movs	r2, #4
 80025ae:	4013      	ands	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 80025b4:	2114      	movs	r1, #20
 80025b6:	187b      	adds	r3, r7, r1
 80025b8:	2240      	movs	r2, #64	@ 0x40
 80025ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025bc:	187b      	adds	r3, r7, r1
 80025be:	2202      	movs	r2, #2
 80025c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	187b      	adds	r3, r7, r1
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	2202      	movs	r2, #2
 80025d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 80025d4:	187b      	adds	r3, r7, r1
 80025d6:	4a06      	ldr	r2, [pc, #24]	@ (80025f0 <HAL_TIM_MspPostInit+0xcc>)
 80025d8:	0019      	movs	r1, r3
 80025da:	0010      	movs	r0, r2
 80025dc:	f000 f9f6 	bl	80029cc <HAL_GPIO_Init>
}
 80025e0:	46c0      	nop			@ (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b00b      	add	sp, #44	@ 0x2c
 80025e6:	bd90      	pop	{r4, r7, pc}
 80025e8:	40012c00 	.word	0x40012c00
 80025ec:	40021000 	.word	0x40021000
 80025f0:	50000800 	.word	0x50000800

080025f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025f8:	46c0      	nop			@ (mov r8, r8)
 80025fa:	e7fd      	b.n	80025f8 <NMI_Handler+0x4>

080025fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002600:	46c0      	nop			@ (mov r8, r8)
 8002602:	e7fd      	b.n	8002600 <HardFault_Handler+0x4>

08002604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002608:	46c0      	nop			@ (mov r8, r8)
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002612:	46c0      	nop			@ (mov r8, r8)
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800261c:	f000 f8dc 	bl	80027d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002620:	46c0      	nop			@ (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800262c:	4b03      	ldr	r3, [pc, #12]	@ (800263c <RTC_TAMP_IRQHandler+0x14>)
 800262e:	0018      	movs	r0, r3
 8002630:	f002 fd7e 	bl	8005130 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8002634:	46c0      	nop			@ (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	46c0      	nop			@ (mov r8, r8)
 800263c:	2000011c 	.word	0x2000011c

08002640 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002644:	46c0      	nop			@ (mov r8, r8)
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 800264e:	2001      	movs	r0, #1
 8002650:	f000 fb76 	bl	8002d40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 8002654:	2002      	movs	r0, #2
 8002656:	f000 fb73 	bl	8002d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800265a:	46c0      	nop			@ (mov r8, r8)
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 8002664:	2004      	movs	r0, #4
 8002666:	f000 fb6b 	bl	8002d40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 800266a:	2008      	movs	r0, #8
 800266c:	f000 fb68 	bl	8002d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002670:	46c0      	nop			@ (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 800267a:	2380      	movs	r3, #128	@ 0x80
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	0018      	movs	r0, r3
 8002680:	f000 fb5e 	bl	8002d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002684:	46c0      	nop			@ (mov r8, r8)
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002690:	4b03      	ldr	r3, [pc, #12]	@ (80026a0 <TIM16_IRQHandler+0x14>)
 8002692:	0018      	movs	r0, r3
 8002694:	f003 fa6e 	bl	8005b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002698:	46c0      	nop			@ (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			@ (mov r8, r8)
 80026a0:	2000022c 	.word	0x2000022c

080026a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a8:	46c0      	nop			@ (mov r8, r8)
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026b0:	480d      	ldr	r0, [pc, #52]	@ (80026e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026b4:	f7ff fff6 	bl	80026a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026b8:	480c      	ldr	r0, [pc, #48]	@ (80026ec <LoopForever+0x6>)
  ldr r1, =_edata
 80026ba:	490d      	ldr	r1, [pc, #52]	@ (80026f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026bc:	4a0d      	ldr	r2, [pc, #52]	@ (80026f4 <LoopForever+0xe>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c0:	e002      	b.n	80026c8 <LoopCopyDataInit>

080026c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c6:	3304      	adds	r3, #4

080026c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026cc:	d3f9      	bcc.n	80026c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ce:	4a0a      	ldr	r2, [pc, #40]	@ (80026f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026d0:	4c0a      	ldr	r4, [pc, #40]	@ (80026fc <LoopForever+0x16>)
  movs r3, #0
 80026d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d4:	e001      	b.n	80026da <LoopFillZerobss>

080026d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d8:	3204      	adds	r2, #4

080026da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026dc:	d3fb      	bcc.n	80026d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026de:	f004 f8d9 	bl	8006894 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80026e2:	f7fe f9cb 	bl	8000a7c <main>

080026e6 <LoopForever>:

LoopForever:
  b LoopForever
 80026e6:	e7fe      	b.n	80026e6 <LoopForever>
  ldr   r0, =_estack
 80026e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80026ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80026f4:	080069dc 	.word	0x080069dc
  ldr r2, =_sbss
 80026f8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80026fc:	200002f0 	.word	0x200002f0

08002700 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002700:	e7fe      	b.n	8002700 <ADC1_IRQHandler>
	...

08002704 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800270a:	1dfb      	adds	r3, r7, #7
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002710:	4b0b      	ldr	r3, [pc, #44]	@ (8002740 <HAL_Init+0x3c>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4b0a      	ldr	r3, [pc, #40]	@ (8002740 <HAL_Init+0x3c>)
 8002716:	2180      	movs	r1, #128	@ 0x80
 8002718:	0049      	lsls	r1, r1, #1
 800271a:	430a      	orrs	r2, r1
 800271c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800271e:	2003      	movs	r0, #3
 8002720:	f000 f810 	bl	8002744 <HAL_InitTick>
 8002724:	1e03      	subs	r3, r0, #0
 8002726:	d003      	beq.n	8002730 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002728:	1dfb      	adds	r3, r7, #7
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	e001      	b.n	8002734 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002730:	f7ff fd9c 	bl	800226c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002734:	1dfb      	adds	r3, r7, #7
 8002736:	781b      	ldrb	r3, [r3, #0]
}
 8002738:	0018      	movs	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	b002      	add	sp, #8
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40022000 	.word	0x40022000

08002744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800274c:	230f      	movs	r3, #15
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002754:	4b1d      	ldr	r3, [pc, #116]	@ (80027cc <HAL_InitTick+0x88>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d02b      	beq.n	80027b4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800275c:	4b1c      	ldr	r3, [pc, #112]	@ (80027d0 <HAL_InitTick+0x8c>)
 800275e:	681c      	ldr	r4, [r3, #0]
 8002760:	4b1a      	ldr	r3, [pc, #104]	@ (80027cc <HAL_InitTick+0x88>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	0019      	movs	r1, r3
 8002766:	23fa      	movs	r3, #250	@ 0xfa
 8002768:	0098      	lsls	r0, r3, #2
 800276a:	f7fd fccb 	bl	8000104 <__udivsi3>
 800276e:	0003      	movs	r3, r0
 8002770:	0019      	movs	r1, r3
 8002772:	0020      	movs	r0, r4
 8002774:	f7fd fcc6 	bl	8000104 <__udivsi3>
 8002778:	0003      	movs	r3, r0
 800277a:	0018      	movs	r0, r3
 800277c:	f000 f919 	bl	80029b2 <HAL_SYSTICK_Config>
 8002780:	1e03      	subs	r3, r0, #0
 8002782:	d112      	bne.n	80027aa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b03      	cmp	r3, #3
 8002788:	d80a      	bhi.n	80027a0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	2301      	movs	r3, #1
 800278e:	425b      	negs	r3, r3
 8002790:	2200      	movs	r2, #0
 8002792:	0018      	movs	r0, r3
 8002794:	f000 f8e8 	bl	8002968 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002798:	4b0e      	ldr	r3, [pc, #56]	@ (80027d4 <HAL_InitTick+0x90>)
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	e00d      	b.n	80027bc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80027a0:	230f      	movs	r3, #15
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	e008      	b.n	80027bc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027aa:	230f      	movs	r3, #15
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	2201      	movs	r2, #1
 80027b0:	701a      	strb	r2, [r3, #0]
 80027b2:	e003      	b.n	80027bc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027b4:	230f      	movs	r3, #15
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80027bc:	230f      	movs	r3, #15
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	781b      	ldrb	r3, [r3, #0]
}
 80027c2:	0018      	movs	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b005      	add	sp, #20
 80027c8:	bd90      	pop	{r4, r7, pc}
 80027ca:	46c0      	nop			@ (mov r8, r8)
 80027cc:	20000070 	.word	0x20000070
 80027d0:	20000068 	.word	0x20000068
 80027d4:	2000006c 	.word	0x2000006c

080027d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027dc:	4b05      	ldr	r3, [pc, #20]	@ (80027f4 <HAL_IncTick+0x1c>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	001a      	movs	r2, r3
 80027e2:	4b05      	ldr	r3, [pc, #20]	@ (80027f8 <HAL_IncTick+0x20>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	18d2      	adds	r2, r2, r3
 80027e8:	4b03      	ldr	r3, [pc, #12]	@ (80027f8 <HAL_IncTick+0x20>)
 80027ea:	601a      	str	r2, [r3, #0]
}
 80027ec:	46c0      	nop			@ (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	46c0      	nop			@ (mov r8, r8)
 80027f4:	20000070 	.word	0x20000070
 80027f8:	200002ec 	.word	0x200002ec

080027fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002800:	4b02      	ldr	r3, [pc, #8]	@ (800280c <HAL_GetTick+0x10>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	46c0      	nop			@ (mov r8, r8)
 800280c:	200002ec 	.word	0x200002ec

08002810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	0002      	movs	r2, r0
 8002818:	1dfb      	adds	r3, r7, #7
 800281a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800281c:	1dfb      	adds	r3, r7, #7
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b7f      	cmp	r3, #127	@ 0x7f
 8002822:	d809      	bhi.n	8002838 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002824:	1dfb      	adds	r3, r7, #7
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	001a      	movs	r2, r3
 800282a:	231f      	movs	r3, #31
 800282c:	401a      	ands	r2, r3
 800282e:	4b04      	ldr	r3, [pc, #16]	@ (8002840 <__NVIC_EnableIRQ+0x30>)
 8002830:	2101      	movs	r1, #1
 8002832:	4091      	lsls	r1, r2
 8002834:	000a      	movs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002838:	46c0      	nop			@ (mov r8, r8)
 800283a:	46bd      	mov	sp, r7
 800283c:	b002      	add	sp, #8
 800283e:	bd80      	pop	{r7, pc}
 8002840:	e000e100 	.word	0xe000e100

08002844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002844:	b590      	push	{r4, r7, lr}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	0002      	movs	r2, r0
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	1dfb      	adds	r3, r7, #7
 8002850:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002852:	1dfb      	adds	r3, r7, #7
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b7f      	cmp	r3, #127	@ 0x7f
 8002858:	d828      	bhi.n	80028ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800285a:	4a2f      	ldr	r2, [pc, #188]	@ (8002918 <__NVIC_SetPriority+0xd4>)
 800285c:	1dfb      	adds	r3, r7, #7
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	b25b      	sxtb	r3, r3
 8002862:	089b      	lsrs	r3, r3, #2
 8002864:	33c0      	adds	r3, #192	@ 0xc0
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	589b      	ldr	r3, [r3, r2]
 800286a:	1dfa      	adds	r2, r7, #7
 800286c:	7812      	ldrb	r2, [r2, #0]
 800286e:	0011      	movs	r1, r2
 8002870:	2203      	movs	r2, #3
 8002872:	400a      	ands	r2, r1
 8002874:	00d2      	lsls	r2, r2, #3
 8002876:	21ff      	movs	r1, #255	@ 0xff
 8002878:	4091      	lsls	r1, r2
 800287a:	000a      	movs	r2, r1
 800287c:	43d2      	mvns	r2, r2
 800287e:	401a      	ands	r2, r3
 8002880:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	019b      	lsls	r3, r3, #6
 8002886:	22ff      	movs	r2, #255	@ 0xff
 8002888:	401a      	ands	r2, r3
 800288a:	1dfb      	adds	r3, r7, #7
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	0018      	movs	r0, r3
 8002890:	2303      	movs	r3, #3
 8002892:	4003      	ands	r3, r0
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002898:	481f      	ldr	r0, [pc, #124]	@ (8002918 <__NVIC_SetPriority+0xd4>)
 800289a:	1dfb      	adds	r3, r7, #7
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	b25b      	sxtb	r3, r3
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	430a      	orrs	r2, r1
 80028a4:	33c0      	adds	r3, #192	@ 0xc0
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80028aa:	e031      	b.n	8002910 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028ac:	4a1b      	ldr	r2, [pc, #108]	@ (800291c <__NVIC_SetPriority+0xd8>)
 80028ae:	1dfb      	adds	r3, r7, #7
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	0019      	movs	r1, r3
 80028b4:	230f      	movs	r3, #15
 80028b6:	400b      	ands	r3, r1
 80028b8:	3b08      	subs	r3, #8
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	3306      	adds	r3, #6
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	18d3      	adds	r3, r2, r3
 80028c2:	3304      	adds	r3, #4
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	1dfa      	adds	r2, r7, #7
 80028c8:	7812      	ldrb	r2, [r2, #0]
 80028ca:	0011      	movs	r1, r2
 80028cc:	2203      	movs	r2, #3
 80028ce:	400a      	ands	r2, r1
 80028d0:	00d2      	lsls	r2, r2, #3
 80028d2:	21ff      	movs	r1, #255	@ 0xff
 80028d4:	4091      	lsls	r1, r2
 80028d6:	000a      	movs	r2, r1
 80028d8:	43d2      	mvns	r2, r2
 80028da:	401a      	ands	r2, r3
 80028dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	019b      	lsls	r3, r3, #6
 80028e2:	22ff      	movs	r2, #255	@ 0xff
 80028e4:	401a      	ands	r2, r3
 80028e6:	1dfb      	adds	r3, r7, #7
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	0018      	movs	r0, r3
 80028ec:	2303      	movs	r3, #3
 80028ee:	4003      	ands	r3, r0
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028f4:	4809      	ldr	r0, [pc, #36]	@ (800291c <__NVIC_SetPriority+0xd8>)
 80028f6:	1dfb      	adds	r3, r7, #7
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	001c      	movs	r4, r3
 80028fc:	230f      	movs	r3, #15
 80028fe:	4023      	ands	r3, r4
 8002900:	3b08      	subs	r3, #8
 8002902:	089b      	lsrs	r3, r3, #2
 8002904:	430a      	orrs	r2, r1
 8002906:	3306      	adds	r3, #6
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	18c3      	adds	r3, r0, r3
 800290c:	3304      	adds	r3, #4
 800290e:	601a      	str	r2, [r3, #0]
}
 8002910:	46c0      	nop			@ (mov r8, r8)
 8002912:	46bd      	mov	sp, r7
 8002914:	b003      	add	sp, #12
 8002916:	bd90      	pop	{r4, r7, pc}
 8002918:	e000e100 	.word	0xe000e100
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	1e5a      	subs	r2, r3, #1
 800292c:	2380      	movs	r3, #128	@ 0x80
 800292e:	045b      	lsls	r3, r3, #17
 8002930:	429a      	cmp	r2, r3
 8002932:	d301      	bcc.n	8002938 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002934:	2301      	movs	r3, #1
 8002936:	e010      	b.n	800295a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002938:	4b0a      	ldr	r3, [pc, #40]	@ (8002964 <SysTick_Config+0x44>)
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	3a01      	subs	r2, #1
 800293e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002940:	2301      	movs	r3, #1
 8002942:	425b      	negs	r3, r3
 8002944:	2103      	movs	r1, #3
 8002946:	0018      	movs	r0, r3
 8002948:	f7ff ff7c 	bl	8002844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800294c:	4b05      	ldr	r3, [pc, #20]	@ (8002964 <SysTick_Config+0x44>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002952:	4b04      	ldr	r3, [pc, #16]	@ (8002964 <SysTick_Config+0x44>)
 8002954:	2207      	movs	r2, #7
 8002956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002958:	2300      	movs	r3, #0
}
 800295a:	0018      	movs	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	b002      	add	sp, #8
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			@ (mov r8, r8)
 8002964:	e000e010 	.word	0xe000e010

08002968 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	210f      	movs	r1, #15
 8002974:	187b      	adds	r3, r7, r1
 8002976:	1c02      	adds	r2, r0, #0
 8002978:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	187b      	adds	r3, r7, r1
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	b25b      	sxtb	r3, r3
 8002982:	0011      	movs	r1, r2
 8002984:	0018      	movs	r0, r3
 8002986:	f7ff ff5d 	bl	8002844 <__NVIC_SetPriority>
}
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	46bd      	mov	sp, r7
 800298e:	b004      	add	sp, #16
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	0002      	movs	r2, r0
 800299a:	1dfb      	adds	r3, r7, #7
 800299c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800299e:	1dfb      	adds	r3, r7, #7
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	b25b      	sxtb	r3, r3
 80029a4:	0018      	movs	r0, r3
 80029a6:	f7ff ff33 	bl	8002810 <__NVIC_EnableIRQ>
}
 80029aa:	46c0      	nop			@ (mov r8, r8)
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b002      	add	sp, #8
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	0018      	movs	r0, r3
 80029be:	f7ff ffaf 	bl	8002920 <SysTick_Config>
 80029c2:	0003      	movs	r3, r0
}
 80029c4:	0018      	movs	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b002      	add	sp, #8
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029da:	e147      	b.n	8002c6c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2101      	movs	r1, #1
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4091      	lsls	r1, r2
 80029e6:	000a      	movs	r2, r1
 80029e8:	4013      	ands	r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d100      	bne.n	80029f4 <HAL_GPIO_Init+0x28>
 80029f2:	e138      	b.n	8002c66 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2203      	movs	r2, #3
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d005      	beq.n	8002a0c <HAL_GPIO_Init+0x40>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2203      	movs	r2, #3
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d130      	bne.n	8002a6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	2203      	movs	r2, #3
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	0013      	movs	r3, r2
 8002a1c:	43da      	mvns	r2, r3
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	0013      	movs	r3, r2
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a42:	2201      	movs	r2, #1
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	409a      	lsls	r2, r3
 8002a48:	0013      	movs	r3, r2
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	2201      	movs	r2, #1
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	0013      	movs	r3, r2
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2203      	movs	r2, #3
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d017      	beq.n	8002aaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	2203      	movs	r2, #3
 8002a86:	409a      	lsls	r2, r3
 8002a88:	0013      	movs	r3, r2
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	0013      	movs	r3, r2
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2203      	movs	r2, #3
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d123      	bne.n	8002afe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	08da      	lsrs	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3208      	adds	r2, #8
 8002abe:	0092      	lsls	r2, r2, #2
 8002ac0:	58d3      	ldr	r3, [r2, r3]
 8002ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2207      	movs	r2, #7
 8002ac8:	4013      	ands	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	220f      	movs	r2, #15
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	0013      	movs	r3, r2
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2107      	movs	r1, #7
 8002ae2:	400b      	ands	r3, r1
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	0013      	movs	r3, r2
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	08da      	lsrs	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3208      	adds	r2, #8
 8002af8:	0092      	lsls	r2, r2, #2
 8002afa:	6939      	ldr	r1, [r7, #16]
 8002afc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	2203      	movs	r2, #3
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	0013      	movs	r3, r2
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4013      	ands	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	401a      	ands	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	409a      	lsls	r2, r3
 8002b24:	0013      	movs	r3, r2
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	23c0      	movs	r3, #192	@ 0xc0
 8002b38:	029b      	lsls	r3, r3, #10
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d100      	bne.n	8002b40 <HAL_GPIO_Init+0x174>
 8002b3e:	e092      	b.n	8002c66 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002b40:	4a50      	ldr	r2, [pc, #320]	@ (8002c84 <HAL_GPIO_Init+0x2b8>)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	089b      	lsrs	r3, r3, #2
 8002b46:	3318      	adds	r3, #24
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	589b      	ldr	r3, [r3, r2]
 8002b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2203      	movs	r2, #3
 8002b52:	4013      	ands	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	220f      	movs	r2, #15
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	0013      	movs	r3, r2
 8002b5c:	43da      	mvns	r2, r3
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	23a0      	movs	r3, #160	@ 0xa0
 8002b68:	05db      	lsls	r3, r3, #23
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d013      	beq.n	8002b96 <HAL_GPIO_Init+0x1ca>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a45      	ldr	r2, [pc, #276]	@ (8002c88 <HAL_GPIO_Init+0x2bc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00d      	beq.n	8002b92 <HAL_GPIO_Init+0x1c6>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a44      	ldr	r2, [pc, #272]	@ (8002c8c <HAL_GPIO_Init+0x2c0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d007      	beq.n	8002b8e <HAL_GPIO_Init+0x1c2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a43      	ldr	r2, [pc, #268]	@ (8002c90 <HAL_GPIO_Init+0x2c4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <HAL_GPIO_Init+0x1be>
 8002b86:	2303      	movs	r3, #3
 8002b88:	e006      	b.n	8002b98 <HAL_GPIO_Init+0x1cc>
 8002b8a:	2305      	movs	r3, #5
 8002b8c:	e004      	b.n	8002b98 <HAL_GPIO_Init+0x1cc>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e002      	b.n	8002b98 <HAL_GPIO_Init+0x1cc>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_GPIO_Init+0x1cc>
 8002b96:	2300      	movs	r3, #0
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	2103      	movs	r1, #3
 8002b9c:	400a      	ands	r2, r1
 8002b9e:	00d2      	lsls	r2, r2, #3
 8002ba0:	4093      	lsls	r3, r2
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002ba8:	4936      	ldr	r1, [pc, #216]	@ (8002c84 <HAL_GPIO_Init+0x2b8>)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	3318      	adds	r3, #24
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bb6:	4b33      	ldr	r3, [pc, #204]	@ (8002c84 <HAL_GPIO_Init+0x2b8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	2380      	movs	r3, #128	@ 0x80
 8002bcc:	035b      	lsls	r3, r3, #13
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bda:	4b2a      	ldr	r3, [pc, #168]	@ (8002c84 <HAL_GPIO_Init+0x2b8>)
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002be0:	4b28      	ldr	r3, [pc, #160]	@ (8002c84 <HAL_GPIO_Init+0x2b8>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	43da      	mvns	r2, r3
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	2380      	movs	r3, #128	@ 0x80
 8002bf6:	039b      	lsls	r3, r3, #14
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c04:	4b1f      	ldr	r3, [pc, #124]	@ (8002c84 <HAL_GPIO_Init+0x2b8>)
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8002c84 <HAL_GPIO_Init+0x2b8>)
 8002c0c:	2384      	movs	r3, #132	@ 0x84
 8002c0e:	58d3      	ldr	r3, [r2, r3]
 8002c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	43da      	mvns	r2, r3
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	2380      	movs	r3, #128	@ 0x80
 8002c22:	029b      	lsls	r3, r3, #10
 8002c24:	4013      	ands	r3, r2
 8002c26:	d003      	beq.n	8002c30 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c30:	4914      	ldr	r1, [pc, #80]	@ (8002c84 <HAL_GPIO_Init+0x2b8>)
 8002c32:	2284      	movs	r2, #132	@ 0x84
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002c38:	4a12      	ldr	r2, [pc, #72]	@ (8002c84 <HAL_GPIO_Init+0x2b8>)
 8002c3a:	2380      	movs	r3, #128	@ 0x80
 8002c3c:	58d3      	ldr	r3, [r2, r3]
 8002c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	43da      	mvns	r2, r3
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4013      	ands	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	2380      	movs	r3, #128	@ 0x80
 8002c50:	025b      	lsls	r3, r3, #9
 8002c52:	4013      	ands	r3, r2
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c5e:	4909      	ldr	r1, [pc, #36]	@ (8002c84 <HAL_GPIO_Init+0x2b8>)
 8002c60:	2280      	movs	r2, #128	@ 0x80
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	40da      	lsrs	r2, r3
 8002c74:	1e13      	subs	r3, r2, #0
 8002c76:	d000      	beq.n	8002c7a <HAL_GPIO_Init+0x2ae>
 8002c78:	e6b0      	b.n	80029dc <HAL_GPIO_Init+0x10>
  }
}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	46c0      	nop			@ (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b006      	add	sp, #24
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021800 	.word	0x40021800
 8002c88:	50000400 	.word	0x50000400
 8002c8c:	50000800 	.word	0x50000800
 8002c90:	50000c00 	.word	0x50000c00

08002c94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	000a      	movs	r2, r1
 8002c9e:	1cbb      	adds	r3, r7, #2
 8002ca0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	1cba      	adds	r2, r7, #2
 8002ca8:	8812      	ldrh	r2, [r2, #0]
 8002caa:	4013      	ands	r3, r2
 8002cac:	d004      	beq.n	8002cb8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002cae:	230f      	movs	r3, #15
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	e003      	b.n	8002cc0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cb8:	230f      	movs	r3, #15
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002cc0:	230f      	movs	r3, #15
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	781b      	ldrb	r3, [r3, #0]
}
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b004      	add	sp, #16
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	0008      	movs	r0, r1
 8002cd8:	0011      	movs	r1, r2
 8002cda:	1cbb      	adds	r3, r7, #2
 8002cdc:	1c02      	adds	r2, r0, #0
 8002cde:	801a      	strh	r2, [r3, #0]
 8002ce0:	1c7b      	adds	r3, r7, #1
 8002ce2:	1c0a      	adds	r2, r1, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ce6:	1c7b      	adds	r3, r7, #1
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d004      	beq.n	8002cf8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cee:	1cbb      	adds	r3, r7, #2
 8002cf0:	881a      	ldrh	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cf6:	e003      	b.n	8002d00 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cf8:	1cbb      	adds	r3, r7, #2
 8002cfa:	881a      	ldrh	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d00:	46c0      	nop			@ (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	000a      	movs	r2, r1
 8002d12:	1cbb      	adds	r3, r7, #2
 8002d14:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d1c:	1cbb      	adds	r3, r7, #2
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4013      	ands	r3, r2
 8002d24:	041a      	lsls	r2, r3, #16
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	1cb9      	adds	r1, r7, #2
 8002d2c:	8809      	ldrh	r1, [r1, #0]
 8002d2e:	400b      	ands	r3, r1
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	619a      	str	r2, [r3, #24]
}
 8002d36:	46c0      	nop			@ (mov r8, r8)
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b004      	add	sp, #16
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	0002      	movs	r2, r0
 8002d48:	1dbb      	adds	r3, r7, #6
 8002d4a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002d4c:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	1dba      	adds	r2, r7, #6
 8002d52:	8812      	ldrh	r2, [r2, #0]
 8002d54:	4013      	ands	r3, r2
 8002d56:	d008      	beq.n	8002d6a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002d58:	4b0d      	ldr	r3, [pc, #52]	@ (8002d90 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002d5a:	1dba      	adds	r2, r7, #6
 8002d5c:	8812      	ldrh	r2, [r2, #0]
 8002d5e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002d60:	1dbb      	adds	r3, r7, #6
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	0018      	movs	r0, r3
 8002d66:	f000 f815 	bl	8002d94 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002d6a:	4b09      	ldr	r3, [pc, #36]	@ (8002d90 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	1dba      	adds	r2, r7, #6
 8002d70:	8812      	ldrh	r2, [r2, #0]
 8002d72:	4013      	ands	r3, r2
 8002d74:	d008      	beq.n	8002d88 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002d76:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002d78:	1dba      	adds	r2, r7, #6
 8002d7a:	8812      	ldrh	r2, [r2, #0]
 8002d7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002d7e:	1dbb      	adds	r3, r7, #6
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	0018      	movs	r0, r3
 8002d84:	f7fe fd5e 	bl	8001844 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002d88:	46c0      	nop			@ (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40021800 	.word	0x40021800

08002d94 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	0002      	movs	r2, r0
 8002d9c:	1dbb      	adds	r3, r7, #6
 8002d9e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002da0:	46c0      	nop			@ (mov r8, r8)
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b002      	add	sp, #8
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e08f      	b.n	8002eda <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2241      	movs	r2, #65	@ 0x41
 8002dbe:	5c9b      	ldrb	r3, [r3, r2]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d107      	bne.n	8002dd6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2240      	movs	r2, #64	@ 0x40
 8002dca:	2100      	movs	r1, #0
 8002dcc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f7ff fa77 	bl	80022c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2241      	movs	r2, #65	@ 0x41
 8002dda:	2124      	movs	r1, #36	@ 0x24
 8002ddc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2101      	movs	r1, #1
 8002dea:	438a      	bics	r2, r1
 8002dec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	493b      	ldr	r1, [pc, #236]	@ (8002ee4 <HAL_I2C_Init+0x13c>)
 8002df8:	400a      	ands	r2, r1
 8002dfa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4938      	ldr	r1, [pc, #224]	@ (8002ee8 <HAL_I2C_Init+0x140>)
 8002e08:	400a      	ands	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d108      	bne.n	8002e26 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2180      	movs	r1, #128	@ 0x80
 8002e1e:	0209      	lsls	r1, r1, #8
 8002e20:	430a      	orrs	r2, r1
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	e007      	b.n	8002e36 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2184      	movs	r1, #132	@ 0x84
 8002e30:	0209      	lsls	r1, r1, #8
 8002e32:	430a      	orrs	r2, r1
 8002e34:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d109      	bne.n	8002e52 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2180      	movs	r1, #128	@ 0x80
 8002e4a:	0109      	lsls	r1, r1, #4
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	e007      	b.n	8002e62 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4923      	ldr	r1, [pc, #140]	@ (8002eec <HAL_I2C_Init+0x144>)
 8002e5e:	400a      	ands	r2, r1
 8002e60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4920      	ldr	r1, [pc, #128]	@ (8002ef0 <HAL_I2C_Init+0x148>)
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	491a      	ldr	r1, [pc, #104]	@ (8002ee8 <HAL_I2C_Init+0x140>)
 8002e7e:	400a      	ands	r2, r1
 8002e80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69d9      	ldr	r1, [r3, #28]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1a      	ldr	r2, [r3, #32]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2241      	movs	r2, #65	@ 0x41
 8002ec6:	2120      	movs	r1, #32
 8002ec8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2242      	movs	r2, #66	@ 0x42
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	0018      	movs	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b002      	add	sp, #8
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	46c0      	nop			@ (mov r8, r8)
 8002ee4:	f0ffffff 	.word	0xf0ffffff
 8002ee8:	ffff7fff 	.word	0xffff7fff
 8002eec:	fffff7ff 	.word	0xfffff7ff
 8002ef0:	02008000 	.word	0x02008000

08002ef4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ef4:	b590      	push	{r4, r7, lr}
 8002ef6:	b089      	sub	sp, #36	@ 0x24
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	0008      	movs	r0, r1
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	0019      	movs	r1, r3
 8002f02:	230a      	movs	r3, #10
 8002f04:	18fb      	adds	r3, r7, r3
 8002f06:	1c02      	adds	r2, r0, #0
 8002f08:	801a      	strh	r2, [r3, #0]
 8002f0a:	2308      	movs	r3, #8
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	1c0a      	adds	r2, r1, #0
 8002f10:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2241      	movs	r2, #65	@ 0x41
 8002f16:	5c9b      	ldrb	r3, [r3, r2]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	d000      	beq.n	8002f20 <HAL_I2C_Master_Transmit+0x2c>
 8002f1e:	e10a      	b.n	8003136 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2240      	movs	r2, #64	@ 0x40
 8002f24:	5c9b      	ldrb	r3, [r3, r2]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_I2C_Master_Transmit+0x3a>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e104      	b.n	8003138 <HAL_I2C_Master_Transmit+0x244>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2240      	movs	r2, #64	@ 0x40
 8002f32:	2101      	movs	r1, #1
 8002f34:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f36:	f7ff fc61 	bl	80027fc <HAL_GetTick>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f3e:	2380      	movs	r3, #128	@ 0x80
 8002f40:	0219      	lsls	r1, r3, #8
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	2319      	movs	r3, #25
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f000 fa26 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 8002f50:	1e03      	subs	r3, r0, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0ef      	b.n	8003138 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2241      	movs	r2, #65	@ 0x41
 8002f5c:	2121      	movs	r1, #33	@ 0x21
 8002f5e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2242      	movs	r2, #66	@ 0x42
 8002f64:	2110      	movs	r1, #16
 8002f66:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2208      	movs	r2, #8
 8002f78:	18ba      	adds	r2, r7, r2
 8002f7a:	8812      	ldrh	r2, [r2, #0]
 8002f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2bff      	cmp	r3, #255	@ 0xff
 8002f8c:	d906      	bls.n	8002f9c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	22ff      	movs	r2, #255	@ 0xff
 8002f92:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002f94:	2380      	movs	r3, #128	@ 0x80
 8002f96:	045b      	lsls	r3, r3, #17
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	e007      	b.n	8002fac <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002fa6:	2380      	movs	r3, #128	@ 0x80
 8002fa8:	049b      	lsls	r3, r3, #18
 8002faa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d027      	beq.n	8003004 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	781a      	ldrb	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	697c      	ldr	r4, [r7, #20]
 8002ff0:	230a      	movs	r3, #10
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	8819      	ldrh	r1, [r3, #0]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	4b51      	ldr	r3, [pc, #324]	@ (8003140 <HAL_I2C_Master_Transmit+0x24c>)
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	0023      	movs	r3, r4
 8002ffe:	f000 fc45 	bl	800388c <I2C_TransferConfig>
 8003002:	e06f      	b.n	80030e4 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003008:	b2da      	uxtb	r2, r3
 800300a:	697c      	ldr	r4, [r7, #20]
 800300c:	230a      	movs	r3, #10
 800300e:	18fb      	adds	r3, r7, r3
 8003010:	8819      	ldrh	r1, [r3, #0]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	4b4a      	ldr	r3, [pc, #296]	@ (8003140 <HAL_I2C_Master_Transmit+0x24c>)
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	0023      	movs	r3, r4
 800301a:	f000 fc37 	bl	800388c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800301e:	e061      	b.n	80030e4 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	0018      	movs	r0, r3
 8003028:	f000 fa10 	bl	800344c <I2C_WaitOnTXISFlagUntilTimeout>
 800302c:	1e03      	subs	r3, r0, #0
 800302e:	d001      	beq.n	8003034 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e081      	b.n	8003138 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003038:	781a      	ldrb	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d03a      	beq.n	80030e4 <HAL_I2C_Master_Transmit+0x1f0>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003072:	2b00      	cmp	r3, #0
 8003074:	d136      	bne.n	80030e4 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003076:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	0013      	movs	r3, r2
 8003080:	2200      	movs	r2, #0
 8003082:	2180      	movs	r1, #128	@ 0x80
 8003084:	f000 f98a 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 8003088:	1e03      	subs	r3, r0, #0
 800308a:	d001      	beq.n	8003090 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e053      	b.n	8003138 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	2bff      	cmp	r3, #255	@ 0xff
 8003098:	d911      	bls.n	80030be <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	22ff      	movs	r2, #255	@ 0xff
 800309e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	2380      	movs	r3, #128	@ 0x80
 80030a8:	045c      	lsls	r4, r3, #17
 80030aa:	230a      	movs	r3, #10
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	8819      	ldrh	r1, [r3, #0]
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	2300      	movs	r3, #0
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	0023      	movs	r3, r4
 80030b8:	f000 fbe8 	bl	800388c <I2C_TransferConfig>
 80030bc:	e012      	b.n	80030e4 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	2380      	movs	r3, #128	@ 0x80
 80030d0:	049c      	lsls	r4, r3, #18
 80030d2:	230a      	movs	r3, #10
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	8819      	ldrh	r1, [r3, #0]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	2300      	movs	r3, #0
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	0023      	movs	r3, r4
 80030e0:	f000 fbd4 	bl	800388c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d198      	bne.n	8003020 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	0018      	movs	r0, r3
 80030f6:	f000 f9ef 	bl	80034d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030fa:	1e03      	subs	r3, r0, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e01a      	b.n	8003138 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2220      	movs	r2, #32
 8003108:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	490b      	ldr	r1, [pc, #44]	@ (8003144 <HAL_I2C_Master_Transmit+0x250>)
 8003116:	400a      	ands	r2, r1
 8003118:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2241      	movs	r2, #65	@ 0x41
 800311e:	2120      	movs	r1, #32
 8003120:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2242      	movs	r2, #66	@ 0x42
 8003126:	2100      	movs	r1, #0
 8003128:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2240      	movs	r2, #64	@ 0x40
 800312e:	2100      	movs	r1, #0
 8003130:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	e000      	b.n	8003138 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003136:	2302      	movs	r3, #2
  }
}
 8003138:	0018      	movs	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	b007      	add	sp, #28
 800313e:	bd90      	pop	{r4, r7, pc}
 8003140:	80002000 	.word	0x80002000
 8003144:	fe00e800 	.word	0xfe00e800

08003148 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b089      	sub	sp, #36	@ 0x24
 800314c:	af02      	add	r7, sp, #8
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	0008      	movs	r0, r1
 8003152:	607a      	str	r2, [r7, #4]
 8003154:	0019      	movs	r1, r3
 8003156:	230a      	movs	r3, #10
 8003158:	18fb      	adds	r3, r7, r3
 800315a:	1c02      	adds	r2, r0, #0
 800315c:	801a      	strh	r2, [r3, #0]
 800315e:	2308      	movs	r3, #8
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	1c0a      	adds	r2, r1, #0
 8003164:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2241      	movs	r2, #65	@ 0x41
 800316a:	5c9b      	ldrb	r3, [r3, r2]
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b20      	cmp	r3, #32
 8003170:	d000      	beq.n	8003174 <HAL_I2C_Master_Receive+0x2c>
 8003172:	e0e8      	b.n	8003346 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2240      	movs	r2, #64	@ 0x40
 8003178:	5c9b      	ldrb	r3, [r3, r2]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_I2C_Master_Receive+0x3a>
 800317e:	2302      	movs	r3, #2
 8003180:	e0e2      	b.n	8003348 <HAL_I2C_Master_Receive+0x200>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2240      	movs	r2, #64	@ 0x40
 8003186:	2101      	movs	r1, #1
 8003188:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800318a:	f7ff fb37 	bl	80027fc <HAL_GetTick>
 800318e:	0003      	movs	r3, r0
 8003190:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003192:	2380      	movs	r3, #128	@ 0x80
 8003194:	0219      	lsls	r1, r3, #8
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	2319      	movs	r3, #25
 800319e:	2201      	movs	r2, #1
 80031a0:	f000 f8fc 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 80031a4:	1e03      	subs	r3, r0, #0
 80031a6:	d001      	beq.n	80031ac <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0cd      	b.n	8003348 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2241      	movs	r2, #65	@ 0x41
 80031b0:	2122      	movs	r1, #34	@ 0x22
 80031b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2242      	movs	r2, #66	@ 0x42
 80031b8:	2110      	movs	r1, #16
 80031ba:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2208      	movs	r2, #8
 80031cc:	18ba      	adds	r2, r7, r2
 80031ce:	8812      	ldrh	r2, [r2, #0]
 80031d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2bff      	cmp	r3, #255	@ 0xff
 80031e0:	d911      	bls.n	8003206 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	22ff      	movs	r2, #255	@ 0xff
 80031e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	2380      	movs	r3, #128	@ 0x80
 80031f0:	045c      	lsls	r4, r3, #17
 80031f2:	230a      	movs	r3, #10
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	8819      	ldrh	r1, [r3, #0]
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	4b55      	ldr	r3, [pc, #340]	@ (8003350 <HAL_I2C_Master_Receive+0x208>)
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	0023      	movs	r3, r4
 8003200:	f000 fb44 	bl	800388c <I2C_TransferConfig>
 8003204:	e076      	b.n	80032f4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003214:	b2da      	uxtb	r2, r3
 8003216:	2380      	movs	r3, #128	@ 0x80
 8003218:	049c      	lsls	r4, r3, #18
 800321a:	230a      	movs	r3, #10
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	8819      	ldrh	r1, [r3, #0]
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	4b4b      	ldr	r3, [pc, #300]	@ (8003350 <HAL_I2C_Master_Receive+0x208>)
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	0023      	movs	r3, r4
 8003228:	f000 fb30 	bl	800388c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800322c:	e062      	b.n	80032f4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	0018      	movs	r0, r3
 8003236:	f000 f993 	bl	8003560 <I2C_WaitOnRXNEFlagUntilTimeout>
 800323a:	1e03      	subs	r3, r0, #0
 800323c:	d001      	beq.n	8003242 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e082      	b.n	8003348 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d03a      	beq.n	80032f4 <HAL_I2C_Master_Receive+0x1ac>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003282:	2b00      	cmp	r3, #0
 8003284:	d136      	bne.n	80032f4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003286:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	0013      	movs	r3, r2
 8003290:	2200      	movs	r2, #0
 8003292:	2180      	movs	r1, #128	@ 0x80
 8003294:	f000 f882 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 8003298:	1e03      	subs	r3, r0, #0
 800329a:	d001      	beq.n	80032a0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e053      	b.n	8003348 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2bff      	cmp	r3, #255	@ 0xff
 80032a8:	d911      	bls.n	80032ce <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	22ff      	movs	r2, #255	@ 0xff
 80032ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	2380      	movs	r3, #128	@ 0x80
 80032b8:	045c      	lsls	r4, r3, #17
 80032ba:	230a      	movs	r3, #10
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	8819      	ldrh	r1, [r3, #0]
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	2300      	movs	r3, #0
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	0023      	movs	r3, r4
 80032c8:	f000 fae0 	bl	800388c <I2C_TransferConfig>
 80032cc:	e012      	b.n	80032f4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	2380      	movs	r3, #128	@ 0x80
 80032e0:	049c      	lsls	r4, r3, #18
 80032e2:	230a      	movs	r3, #10
 80032e4:	18fb      	adds	r3, r7, r3
 80032e6:	8819      	ldrh	r1, [r3, #0]
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	2300      	movs	r3, #0
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	0023      	movs	r3, r4
 80032f0:	f000 facc 	bl	800388c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d197      	bne.n	800322e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	0018      	movs	r0, r3
 8003306:	f000 f8e7 	bl	80034d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800330a:	1e03      	subs	r3, r0, #0
 800330c:	d001      	beq.n	8003312 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e01a      	b.n	8003348 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2220      	movs	r2, #32
 8003318:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	490b      	ldr	r1, [pc, #44]	@ (8003354 <HAL_I2C_Master_Receive+0x20c>)
 8003326:	400a      	ands	r2, r1
 8003328:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2241      	movs	r2, #65	@ 0x41
 800332e:	2120      	movs	r1, #32
 8003330:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2242      	movs	r2, #66	@ 0x42
 8003336:	2100      	movs	r1, #0
 8003338:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2240      	movs	r2, #64	@ 0x40
 800333e:	2100      	movs	r1, #0
 8003340:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	e000      	b.n	8003348 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003346:	2302      	movs	r3, #2
  }
}
 8003348:	0018      	movs	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	b007      	add	sp, #28
 800334e:	bd90      	pop	{r4, r7, pc}
 8003350:	80002400 	.word	0x80002400
 8003354:	fe00e800 	.word	0xfe00e800

08003358 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	2202      	movs	r2, #2
 8003368:	4013      	ands	r3, r2
 800336a:	2b02      	cmp	r3, #2
 800336c:	d103      	bne.n	8003376 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2200      	movs	r2, #0
 8003374:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	2201      	movs	r2, #1
 800337e:	4013      	ands	r3, r2
 8003380:	2b01      	cmp	r3, #1
 8003382:	d007      	beq.n	8003394 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2101      	movs	r1, #1
 8003390:	430a      	orrs	r2, r1
 8003392:	619a      	str	r2, [r3, #24]
  }
}
 8003394:	46c0      	nop			@ (mov r8, r8)
 8003396:	46bd      	mov	sp, r7
 8003398:	b002      	add	sp, #8
 800339a:	bd80      	pop	{r7, pc}

0800339c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	1dfb      	adds	r3, r7, #7
 80033aa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ac:	e03a      	b.n	8003424 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	6839      	ldr	r1, [r7, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	0018      	movs	r0, r3
 80033b6:	f000 f971 	bl	800369c <I2C_IsErrorOccurred>
 80033ba:	1e03      	subs	r3, r0, #0
 80033bc:	d001      	beq.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e040      	b.n	8003444 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	d02d      	beq.n	8003424 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c8:	f7ff fa18 	bl	80027fc <HAL_GetTick>
 80033cc:	0002      	movs	r2, r0
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d302      	bcc.n	80033de <I2C_WaitOnFlagUntilTimeout+0x42>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d122      	bne.n	8003424 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	4013      	ands	r3, r2
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	425a      	negs	r2, r3
 80033ee:	4153      	adcs	r3, r2
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	001a      	movs	r2, r3
 80033f4:	1dfb      	adds	r3, r7, #7
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d113      	bne.n	8003424 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003400:	2220      	movs	r2, #32
 8003402:	431a      	orrs	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2241      	movs	r2, #65	@ 0x41
 800340c:	2120      	movs	r1, #32
 800340e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2242      	movs	r2, #66	@ 0x42
 8003414:	2100      	movs	r1, #0
 8003416:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2240      	movs	r2, #64	@ 0x40
 800341c:	2100      	movs	r1, #0
 800341e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e00f      	b.n	8003444 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	4013      	ands	r3, r2
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	425a      	negs	r2, r3
 8003434:	4153      	adcs	r3, r2
 8003436:	b2db      	uxtb	r3, r3
 8003438:	001a      	movs	r2, r3
 800343a:	1dfb      	adds	r3, r7, #7
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d0b5      	beq.n	80033ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	b004      	add	sp, #16
 800344a:	bd80      	pop	{r7, pc}

0800344c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003458:	e032      	b.n	80034c0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	0018      	movs	r0, r3
 8003462:	f000 f91b 	bl	800369c <I2C_IsErrorOccurred>
 8003466:	1e03      	subs	r3, r0, #0
 8003468:	d001      	beq.n	800346e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e030      	b.n	80034d0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	3301      	adds	r3, #1
 8003472:	d025      	beq.n	80034c0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003474:	f7ff f9c2 	bl	80027fc <HAL_GetTick>
 8003478:	0002      	movs	r2, r0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	429a      	cmp	r2, r3
 8003482:	d302      	bcc.n	800348a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d11a      	bne.n	80034c0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	2202      	movs	r2, #2
 8003492:	4013      	ands	r3, r2
 8003494:	2b02      	cmp	r3, #2
 8003496:	d013      	beq.n	80034c0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349c:	2220      	movs	r2, #32
 800349e:	431a      	orrs	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2241      	movs	r2, #65	@ 0x41
 80034a8:	2120      	movs	r1, #32
 80034aa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2242      	movs	r2, #66	@ 0x42
 80034b0:	2100      	movs	r1, #0
 80034b2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2240      	movs	r2, #64	@ 0x40
 80034b8:	2100      	movs	r1, #0
 80034ba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e007      	b.n	80034d0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2202      	movs	r2, #2
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d1c5      	bne.n	800345a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	0018      	movs	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b004      	add	sp, #16
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034e4:	e02f      	b.n	8003546 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	0018      	movs	r0, r3
 80034ee:	f000 f8d5 	bl	800369c <I2C_IsErrorOccurred>
 80034f2:	1e03      	subs	r3, r0, #0
 80034f4:	d001      	beq.n	80034fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e02d      	b.n	8003556 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fa:	f7ff f97f 	bl	80027fc <HAL_GetTick>
 80034fe:	0002      	movs	r2, r0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	429a      	cmp	r2, r3
 8003508:	d302      	bcc.n	8003510 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d11a      	bne.n	8003546 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	2220      	movs	r2, #32
 8003518:	4013      	ands	r3, r2
 800351a:	2b20      	cmp	r3, #32
 800351c:	d013      	beq.n	8003546 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003522:	2220      	movs	r2, #32
 8003524:	431a      	orrs	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2241      	movs	r2, #65	@ 0x41
 800352e:	2120      	movs	r1, #32
 8003530:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2242      	movs	r2, #66	@ 0x42
 8003536:	2100      	movs	r1, #0
 8003538:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2240      	movs	r2, #64	@ 0x40
 800353e:	2100      	movs	r1, #0
 8003540:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e007      	b.n	8003556 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2220      	movs	r2, #32
 800354e:	4013      	ands	r3, r2
 8003550:	2b20      	cmp	r3, #32
 8003552:	d1c8      	bne.n	80034e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	0018      	movs	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	b004      	add	sp, #16
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800356c:	2317      	movs	r3, #23
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003574:	e07b      	b.n	800366e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	0018      	movs	r0, r3
 800357e:	f000 f88d 	bl	800369c <I2C_IsErrorOccurred>
 8003582:	1e03      	subs	r3, r0, #0
 8003584:	d003      	beq.n	800358e <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8003586:	2317      	movs	r3, #23
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	2201      	movs	r2, #1
 800358c:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	2220      	movs	r2, #32
 8003596:	4013      	ands	r3, r2
 8003598:	2b20      	cmp	r3, #32
 800359a:	d140      	bne.n	800361e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 800359c:	2117      	movs	r1, #23
 800359e:	187b      	adds	r3, r7, r1
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d13b      	bne.n	800361e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2204      	movs	r2, #4
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d106      	bne.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80035bc:	187b      	adds	r3, r7, r1
 80035be:	2200      	movs	r2, #0
 80035c0:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	2210      	movs	r2, #16
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b10      	cmp	r3, #16
 80035ce:	d123      	bne.n	8003618 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2210      	movs	r2, #16
 80035d6:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2204      	movs	r2, #4
 80035dc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2220      	movs	r2, #32
 80035e4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4929      	ldr	r1, [pc, #164]	@ (8003698 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80035f2:	400a      	ands	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2241      	movs	r2, #65	@ 0x41
 80035fa:	2120      	movs	r1, #32
 80035fc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2242      	movs	r2, #66	@ 0x42
 8003602:	2100      	movs	r1, #0
 8003604:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2240      	movs	r2, #64	@ 0x40
 800360a:	2100      	movs	r1, #0
 800360c:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800360e:	2317      	movs	r3, #23
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	2201      	movs	r2, #1
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	e002      	b.n	800361e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800361e:	f7ff f8ed 	bl	80027fc <HAL_GetTick>
 8003622:	0002      	movs	r2, r0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	429a      	cmp	r2, r3
 800362c:	d302      	bcc.n	8003634 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d11c      	bne.n	800366e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003634:	2017      	movs	r0, #23
 8003636:	183b      	adds	r3, r7, r0
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d117      	bne.n	800366e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	2204      	movs	r2, #4
 8003646:	4013      	ands	r3, r2
 8003648:	2b04      	cmp	r3, #4
 800364a:	d010      	beq.n	800366e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003650:	2220      	movs	r2, #32
 8003652:	431a      	orrs	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2241      	movs	r2, #65	@ 0x41
 800365c:	2120      	movs	r1, #32
 800365e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2240      	movs	r2, #64	@ 0x40
 8003664:	2100      	movs	r1, #0
 8003666:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003668:	183b      	adds	r3, r7, r0
 800366a:	2201      	movs	r2, #1
 800366c:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	2204      	movs	r2, #4
 8003676:	4013      	ands	r3, r2
 8003678:	2b04      	cmp	r3, #4
 800367a:	d005      	beq.n	8003688 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800367c:	2317      	movs	r3, #23
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d100      	bne.n	8003688 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003686:	e776      	b.n	8003576 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8003688:	2317      	movs	r3, #23
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	781b      	ldrb	r3, [r3, #0]
}
 800368e:	0018      	movs	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	b006      	add	sp, #24
 8003694:	bd80      	pop	{r7, pc}
 8003696:	46c0      	nop			@ (mov r8, r8)
 8003698:	fe00e800 	.word	0xfe00e800

0800369c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08a      	sub	sp, #40	@ 0x28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a8:	2327      	movs	r3, #39	@ 0x27
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2210      	movs	r2, #16
 80036c4:	4013      	ands	r3, r2
 80036c6:	d100      	bne.n	80036ca <I2C_IsErrorOccurred+0x2e>
 80036c8:	e079      	b.n	80037be <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2210      	movs	r2, #16
 80036d0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036d2:	e057      	b.n	8003784 <I2C_IsErrorOccurred+0xe8>
 80036d4:	2227      	movs	r2, #39	@ 0x27
 80036d6:	18bb      	adds	r3, r7, r2
 80036d8:	18ba      	adds	r2, r7, r2
 80036da:	7812      	ldrb	r2, [r2, #0]
 80036dc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	3301      	adds	r3, #1
 80036e2:	d04f      	beq.n	8003784 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036e4:	f7ff f88a 	bl	80027fc <HAL_GetTick>
 80036e8:	0002      	movs	r2, r0
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d302      	bcc.n	80036fa <I2C_IsErrorOccurred+0x5e>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d144      	bne.n	8003784 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	2380      	movs	r3, #128	@ 0x80
 8003702:	01db      	lsls	r3, r3, #7
 8003704:	4013      	ands	r3, r2
 8003706:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003708:	2013      	movs	r0, #19
 800370a:	183b      	adds	r3, r7, r0
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	2142      	movs	r1, #66	@ 0x42
 8003710:	5c52      	ldrb	r2, [r2, r1]
 8003712:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	2380      	movs	r3, #128	@ 0x80
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	401a      	ands	r2, r3
 8003720:	2380      	movs	r3, #128	@ 0x80
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	429a      	cmp	r2, r3
 8003726:	d126      	bne.n	8003776 <I2C_IsErrorOccurred+0xda>
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	2380      	movs	r3, #128	@ 0x80
 800372c:	01db      	lsls	r3, r3, #7
 800372e:	429a      	cmp	r2, r3
 8003730:	d021      	beq.n	8003776 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003732:	183b      	adds	r3, r7, r0
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b20      	cmp	r3, #32
 8003738:	d01d      	beq.n	8003776 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2180      	movs	r1, #128	@ 0x80
 8003746:	01c9      	lsls	r1, r1, #7
 8003748:	430a      	orrs	r2, r1
 800374a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800374c:	f7ff f856 	bl	80027fc <HAL_GetTick>
 8003750:	0003      	movs	r3, r0
 8003752:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003754:	e00f      	b.n	8003776 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003756:	f7ff f851 	bl	80027fc <HAL_GetTick>
 800375a:	0002      	movs	r2, r0
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b19      	cmp	r3, #25
 8003762:	d908      	bls.n	8003776 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	2220      	movs	r2, #32
 8003768:	4313      	orrs	r3, r2
 800376a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800376c:	2327      	movs	r3, #39	@ 0x27
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	2201      	movs	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]

              break;
 8003774:	e006      	b.n	8003784 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2220      	movs	r2, #32
 800377e:	4013      	ands	r3, r2
 8003780:	2b20      	cmp	r3, #32
 8003782:	d1e8      	bne.n	8003756 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	2220      	movs	r2, #32
 800378c:	4013      	ands	r3, r2
 800378e:	2b20      	cmp	r3, #32
 8003790:	d004      	beq.n	800379c <I2C_IsErrorOccurred+0x100>
 8003792:	2327      	movs	r3, #39	@ 0x27
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d09b      	beq.n	80036d4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800379c:	2327      	movs	r3, #39	@ 0x27
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d103      	bne.n	80037ae <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2220      	movs	r2, #32
 80037ac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	2204      	movs	r2, #4
 80037b2:	4313      	orrs	r3, r2
 80037b4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037b6:	2327      	movs	r3, #39	@ 0x27
 80037b8:	18fb      	adds	r3, r7, r3
 80037ba:	2201      	movs	r2, #1
 80037bc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	2380      	movs	r3, #128	@ 0x80
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	4013      	ands	r3, r2
 80037ce:	d00c      	beq.n	80037ea <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	2201      	movs	r2, #1
 80037d4:	4313      	orrs	r3, r2
 80037d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2280      	movs	r2, #128	@ 0x80
 80037de:	0052      	lsls	r2, r2, #1
 80037e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037e2:	2327      	movs	r3, #39	@ 0x27
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	2201      	movs	r2, #1
 80037e8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	2380      	movs	r3, #128	@ 0x80
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4013      	ands	r3, r2
 80037f2:	d00c      	beq.n	800380e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	2208      	movs	r2, #8
 80037f8:	4313      	orrs	r3, r2
 80037fa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2280      	movs	r2, #128	@ 0x80
 8003802:	00d2      	lsls	r2, r2, #3
 8003804:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003806:	2327      	movs	r3, #39	@ 0x27
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	2201      	movs	r2, #1
 800380c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	2380      	movs	r3, #128	@ 0x80
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4013      	ands	r3, r2
 8003816:	d00c      	beq.n	8003832 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	2202      	movs	r2, #2
 800381c:	4313      	orrs	r3, r2
 800381e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2280      	movs	r2, #128	@ 0x80
 8003826:	0092      	lsls	r2, r2, #2
 8003828:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800382a:	2327      	movs	r3, #39	@ 0x27
 800382c:	18fb      	adds	r3, r7, r3
 800382e:	2201      	movs	r2, #1
 8003830:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003832:	2327      	movs	r3, #39	@ 0x27
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01d      	beq.n	8003878 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	0018      	movs	r0, r3
 8003840:	f7ff fd8a 	bl	8003358 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	490e      	ldr	r1, [pc, #56]	@ (8003888 <I2C_IsErrorOccurred+0x1ec>)
 8003850:	400a      	ands	r2, r1
 8003852:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	431a      	orrs	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2241      	movs	r2, #65	@ 0x41
 8003864:	2120      	movs	r1, #32
 8003866:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2242      	movs	r2, #66	@ 0x42
 800386c:	2100      	movs	r1, #0
 800386e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2240      	movs	r2, #64	@ 0x40
 8003874:	2100      	movs	r1, #0
 8003876:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003878:	2327      	movs	r3, #39	@ 0x27
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	781b      	ldrb	r3, [r3, #0]
}
 800387e:	0018      	movs	r0, r3
 8003880:	46bd      	mov	sp, r7
 8003882:	b00a      	add	sp, #40	@ 0x28
 8003884:	bd80      	pop	{r7, pc}
 8003886:	46c0      	nop			@ (mov r8, r8)
 8003888:	fe00e800 	.word	0xfe00e800

0800388c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800388c:	b590      	push	{r4, r7, lr}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	0008      	movs	r0, r1
 8003896:	0011      	movs	r1, r2
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	240a      	movs	r4, #10
 800389c:	193b      	adds	r3, r7, r4
 800389e:	1c02      	adds	r2, r0, #0
 80038a0:	801a      	strh	r2, [r3, #0]
 80038a2:	2009      	movs	r0, #9
 80038a4:	183b      	adds	r3, r7, r0
 80038a6:	1c0a      	adds	r2, r1, #0
 80038a8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038aa:	193b      	adds	r3, r7, r4
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	059b      	lsls	r3, r3, #22
 80038b0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038b2:	183b      	adds	r3, r7, r0
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	0419      	lsls	r1, r3, #16
 80038b8:	23ff      	movs	r3, #255	@ 0xff
 80038ba:	041b      	lsls	r3, r3, #16
 80038bc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038be:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c6:	4313      	orrs	r3, r2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	085b      	lsrs	r3, r3, #1
 80038cc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038d6:	0d51      	lsrs	r1, r2, #21
 80038d8:	2280      	movs	r2, #128	@ 0x80
 80038da:	00d2      	lsls	r2, r2, #3
 80038dc:	400a      	ands	r2, r1
 80038de:	4907      	ldr	r1, [pc, #28]	@ (80038fc <I2C_TransferConfig+0x70>)
 80038e0:	430a      	orrs	r2, r1
 80038e2:	43d2      	mvns	r2, r2
 80038e4:	401a      	ands	r2, r3
 80038e6:	0011      	movs	r1, r2
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b007      	add	sp, #28
 80038f8:	bd90      	pop	{r4, r7, pc}
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	03ff63ff 	.word	0x03ff63ff

08003900 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2241      	movs	r2, #65	@ 0x41
 800390e:	5c9b      	ldrb	r3, [r3, r2]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b20      	cmp	r3, #32
 8003914:	d138      	bne.n	8003988 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2240      	movs	r2, #64	@ 0x40
 800391a:	5c9b      	ldrb	r3, [r3, r2]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003920:	2302      	movs	r3, #2
 8003922:	e032      	b.n	800398a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2240      	movs	r2, #64	@ 0x40
 8003928:	2101      	movs	r1, #1
 800392a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2241      	movs	r2, #65	@ 0x41
 8003930:	2124      	movs	r1, #36	@ 0x24
 8003932:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2101      	movs	r1, #1
 8003940:	438a      	bics	r2, r1
 8003942:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4911      	ldr	r1, [pc, #68]	@ (8003994 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003950:	400a      	ands	r2, r1
 8003952:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6819      	ldr	r1, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2101      	movs	r1, #1
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2241      	movs	r2, #65	@ 0x41
 8003978:	2120      	movs	r1, #32
 800397a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2240      	movs	r2, #64	@ 0x40
 8003980:	2100      	movs	r1, #0
 8003982:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	e000      	b.n	800398a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003988:	2302      	movs	r3, #2
  }
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b002      	add	sp, #8
 8003990:	bd80      	pop	{r7, pc}
 8003992:	46c0      	nop			@ (mov r8, r8)
 8003994:	ffffefff 	.word	0xffffefff

08003998 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2241      	movs	r2, #65	@ 0x41
 80039a6:	5c9b      	ldrb	r3, [r3, r2]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d139      	bne.n	8003a22 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2240      	movs	r2, #64	@ 0x40
 80039b2:	5c9b      	ldrb	r3, [r3, r2]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e033      	b.n	8003a24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2240      	movs	r2, #64	@ 0x40
 80039c0:	2101      	movs	r1, #1
 80039c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2241      	movs	r2, #65	@ 0x41
 80039c8:	2124      	movs	r1, #36	@ 0x24
 80039ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2101      	movs	r1, #1
 80039d8:	438a      	bics	r2, r1
 80039da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a11      	ldr	r2, [pc, #68]	@ (8003a2c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	021b      	lsls	r3, r3, #8
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2101      	movs	r1, #1
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2241      	movs	r2, #65	@ 0x41
 8003a12:	2120      	movs	r1, #32
 8003a14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2240      	movs	r2, #64	@ 0x40
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e000      	b.n	8003a24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a22:	2302      	movs	r3, #2
  }
}
 8003a24:	0018      	movs	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b004      	add	sp, #16
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	fffff0ff 	.word	0xfffff0ff

08003a30 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a34:	4b04      	ldr	r3, [pc, #16]	@ (8003a48 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	4b03      	ldr	r3, [pc, #12]	@ (8003a48 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003a3a:	2180      	movs	r1, #128	@ 0x80
 8003a3c:	0049      	lsls	r1, r1, #1
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	601a      	str	r2, [r3, #0]
}
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40007000 	.word	0x40007000

08003a4c <HAL_PWR_DisableBkUpAccess>:
/**
  * @brief  Disable access to the backup domain
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a50:	4b04      	ldr	r3, [pc, #16]	@ (8003a64 <HAL_PWR_DisableBkUpAccess+0x18>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4b03      	ldr	r3, [pc, #12]	@ (8003a64 <HAL_PWR_DisableBkUpAccess+0x18>)
 8003a56:	4904      	ldr	r1, [pc, #16]	@ (8003a68 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8003a58:	400a      	ands	r2, r1
 8003a5a:	601a      	str	r2, [r3, #0]
}
 8003a5c:	46c0      	nop			@ (mov r8, r8)
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	46c0      	nop			@ (mov r8, r8)
 8003a64:	40007000 	.word	0x40007000
 8003a68:	fffffeff 	.word	0xfffffeff

08003a6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003a74:	4b19      	ldr	r3, [pc, #100]	@ (8003adc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a19      	ldr	r2, [pc, #100]	@ (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	4b17      	ldr	r3, [pc, #92]	@ (8003adc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	2380      	movs	r3, #128	@ 0x80
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d11f      	bne.n	8003ad0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003a90:	4b14      	ldr	r3, [pc, #80]	@ (8003ae4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	0013      	movs	r3, r2
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	189b      	adds	r3, r3, r2
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	4912      	ldr	r1, [pc, #72]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f7fc fb30 	bl	8000104 <__udivsi3>
 8003aa4:	0003      	movs	r3, r0
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003aaa:	e008      	b.n	8003abe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	e001      	b.n	8003abe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e009      	b.n	8003ad2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003abe:	4b07      	ldr	r3, [pc, #28]	@ (8003adc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	2380      	movs	r3, #128	@ 0x80
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	2380      	movs	r3, #128	@ 0x80
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d0ed      	beq.n	8003aac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b004      	add	sp, #16
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	40007000 	.word	0x40007000
 8003ae0:	fffff9ff 	.word	0xfffff9ff
 8003ae4:	20000068 	.word	0x20000068
 8003ae8:	000f4240 	.word	0x000f4240

08003aec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e2fe      	b.n	80040fc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2201      	movs	r2, #1
 8003b04:	4013      	ands	r3, r2
 8003b06:	d100      	bne.n	8003b0a <HAL_RCC_OscConfig+0x1e>
 8003b08:	e07c      	b.n	8003c04 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b0a:	4bc3      	ldr	r3, [pc, #780]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2238      	movs	r2, #56	@ 0x38
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b14:	4bc0      	ldr	r3, [pc, #768]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	2203      	movs	r2, #3
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d102      	bne.n	8003b2a <HAL_RCC_OscConfig+0x3e>
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d002      	beq.n	8003b30 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d10b      	bne.n	8003b48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b30:	4bb9      	ldr	r3, [pc, #740]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	2380      	movs	r3, #128	@ 0x80
 8003b36:	029b      	lsls	r3, r3, #10
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d062      	beq.n	8003c02 <HAL_RCC_OscConfig+0x116>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d15e      	bne.n	8003c02 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e2d9      	b.n	80040fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	2380      	movs	r3, #128	@ 0x80
 8003b4e:	025b      	lsls	r3, r3, #9
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d107      	bne.n	8003b64 <HAL_RCC_OscConfig+0x78>
 8003b54:	4bb0      	ldr	r3, [pc, #704]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4baf      	ldr	r3, [pc, #700]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003b5a:	2180      	movs	r1, #128	@ 0x80
 8003b5c:	0249      	lsls	r1, r1, #9
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	e020      	b.n	8003ba6 <HAL_RCC_OscConfig+0xba>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	23a0      	movs	r3, #160	@ 0xa0
 8003b6a:	02db      	lsls	r3, r3, #11
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d10e      	bne.n	8003b8e <HAL_RCC_OscConfig+0xa2>
 8003b70:	4ba9      	ldr	r3, [pc, #676]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4ba8      	ldr	r3, [pc, #672]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003b76:	2180      	movs	r1, #128	@ 0x80
 8003b78:	02c9      	lsls	r1, r1, #11
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	4ba6      	ldr	r3, [pc, #664]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	4ba5      	ldr	r3, [pc, #660]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003b84:	2180      	movs	r1, #128	@ 0x80
 8003b86:	0249      	lsls	r1, r1, #9
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	e00b      	b.n	8003ba6 <HAL_RCC_OscConfig+0xba>
 8003b8e:	4ba2      	ldr	r3, [pc, #648]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4ba1      	ldr	r3, [pc, #644]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003b94:	49a1      	ldr	r1, [pc, #644]	@ (8003e1c <HAL_RCC_OscConfig+0x330>)
 8003b96:	400a      	ands	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	4b9f      	ldr	r3, [pc, #636]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	4b9e      	ldr	r3, [pc, #632]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003ba0:	499f      	ldr	r1, [pc, #636]	@ (8003e20 <HAL_RCC_OscConfig+0x334>)
 8003ba2:	400a      	ands	r2, r1
 8003ba4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d014      	beq.n	8003bd8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bae:	f7fe fe25 	bl	80027fc <HAL_GetTick>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb8:	f7fe fe20 	bl	80027fc <HAL_GetTick>
 8003bbc:	0002      	movs	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	@ 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e298      	b.n	80040fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bca:	4b93      	ldr	r3, [pc, #588]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	2380      	movs	r3, #128	@ 0x80
 8003bd0:	029b      	lsls	r3, r3, #10
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0xcc>
 8003bd6:	e015      	b.n	8003c04 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd8:	f7fe fe10 	bl	80027fc <HAL_GetTick>
 8003bdc:	0003      	movs	r3, r0
 8003bde:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be2:	f7fe fe0b 	bl	80027fc <HAL_GetTick>
 8003be6:	0002      	movs	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b64      	cmp	r3, #100	@ 0x64
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e283      	b.n	80040fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bf4:	4b88      	ldr	r3, [pc, #544]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	2380      	movs	r3, #128	@ 0x80
 8003bfa:	029b      	lsls	r3, r3, #10
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d1f0      	bne.n	8003be2 <HAL_RCC_OscConfig+0xf6>
 8003c00:	e000      	b.n	8003c04 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c02:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d100      	bne.n	8003c10 <HAL_RCC_OscConfig+0x124>
 8003c0e:	e099      	b.n	8003d44 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c10:	4b81      	ldr	r3, [pc, #516]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2238      	movs	r2, #56	@ 0x38
 8003c16:	4013      	ands	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c1a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	2203      	movs	r2, #3
 8003c20:	4013      	ands	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	2b10      	cmp	r3, #16
 8003c28:	d102      	bne.n	8003c30 <HAL_RCC_OscConfig+0x144>
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d002      	beq.n	8003c36 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d135      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c36:	4b78      	ldr	r3, [pc, #480]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	2380      	movs	r3, #128	@ 0x80
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d005      	beq.n	8003c4e <HAL_RCC_OscConfig+0x162>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e256      	b.n	80040fc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4e:	4b72      	ldr	r3, [pc, #456]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4a74      	ldr	r2, [pc, #464]	@ (8003e24 <HAL_RCC_OscConfig+0x338>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	0019      	movs	r1, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	021a      	lsls	r2, r3, #8
 8003c5e:	4b6e      	ldr	r3, [pc, #440]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003c60:	430a      	orrs	r2, r1
 8003c62:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d112      	bne.n	8003c90 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003c6a:	4b6b      	ldr	r3, [pc, #428]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a6e      	ldr	r2, [pc, #440]	@ (8003e28 <HAL_RCC_OscConfig+0x33c>)
 8003c70:	4013      	ands	r3, r2
 8003c72:	0019      	movs	r1, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	4b67      	ldr	r3, [pc, #412]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003c7e:	4b66      	ldr	r3, [pc, #408]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	0adb      	lsrs	r3, r3, #11
 8003c84:	2207      	movs	r2, #7
 8003c86:	4013      	ands	r3, r2
 8003c88:	4a68      	ldr	r2, [pc, #416]	@ (8003e2c <HAL_RCC_OscConfig+0x340>)
 8003c8a:	40da      	lsrs	r2, r3
 8003c8c:	4b68      	ldr	r3, [pc, #416]	@ (8003e30 <HAL_RCC_OscConfig+0x344>)
 8003c8e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c90:	4b68      	ldr	r3, [pc, #416]	@ (8003e34 <HAL_RCC_OscConfig+0x348>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	0018      	movs	r0, r3
 8003c96:	f7fe fd55 	bl	8002744 <HAL_InitTick>
 8003c9a:	1e03      	subs	r3, r0, #0
 8003c9c:	d051      	beq.n	8003d42 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e22c      	b.n	80040fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d030      	beq.n	8003d0c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003caa:	4b5b      	ldr	r3, [pc, #364]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a5e      	ldr	r2, [pc, #376]	@ (8003e28 <HAL_RCC_OscConfig+0x33c>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	0019      	movs	r1, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	4b57      	ldr	r3, [pc, #348]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003cbe:	4b56      	ldr	r3, [pc, #344]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	4b55      	ldr	r3, [pc, #340]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003cc4:	2180      	movs	r1, #128	@ 0x80
 8003cc6:	0049      	lsls	r1, r1, #1
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fe fd96 	bl	80027fc <HAL_GetTick>
 8003cd0:	0003      	movs	r3, r0
 8003cd2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd6:	f7fe fd91 	bl	80027fc <HAL_GetTick>
 8003cda:	0002      	movs	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e209      	b.n	80040fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ce8:	4b4b      	ldr	r3, [pc, #300]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	2380      	movs	r3, #128	@ 0x80
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	d0f0      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf4:	4b48      	ldr	r3, [pc, #288]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4a4a      	ldr	r2, [pc, #296]	@ (8003e24 <HAL_RCC_OscConfig+0x338>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	021a      	lsls	r2, r3, #8
 8003d04:	4b44      	ldr	r3, [pc, #272]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003d06:	430a      	orrs	r2, r1
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	e01b      	b.n	8003d44 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003d0c:	4b42      	ldr	r3, [pc, #264]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	4b41      	ldr	r3, [pc, #260]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003d12:	4949      	ldr	r1, [pc, #292]	@ (8003e38 <HAL_RCC_OscConfig+0x34c>)
 8003d14:	400a      	ands	r2, r1
 8003d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fe fd70 	bl	80027fc <HAL_GetTick>
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d22:	f7fe fd6b 	bl	80027fc <HAL_GetTick>
 8003d26:	0002      	movs	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e1e3      	b.n	80040fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d34:	4b38      	ldr	r3, [pc, #224]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	2380      	movs	r3, #128	@ 0x80
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d1f0      	bne.n	8003d22 <HAL_RCC_OscConfig+0x236>
 8003d40:	e000      	b.n	8003d44 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d42:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2208      	movs	r2, #8
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d047      	beq.n	8003dde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003d4e:	4b32      	ldr	r3, [pc, #200]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2238      	movs	r2, #56	@ 0x38
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b18      	cmp	r3, #24
 8003d58:	d10a      	bne.n	8003d70 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d5e:	2202      	movs	r2, #2
 8003d60:	4013      	ands	r3, r2
 8003d62:	d03c      	beq.n	8003dde <HAL_RCC_OscConfig+0x2f2>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d138      	bne.n	8003dde <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e1c5      	b.n	80040fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d019      	beq.n	8003dac <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003d78:	4b27      	ldr	r3, [pc, #156]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003d7a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d7c:	4b26      	ldr	r3, [pc, #152]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003d7e:	2101      	movs	r1, #1
 8003d80:	430a      	orrs	r2, r1
 8003d82:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fe fd3a 	bl	80027fc <HAL_GetTick>
 8003d88:	0003      	movs	r3, r0
 8003d8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8e:	f7fe fd35 	bl	80027fc <HAL_GetTick>
 8003d92:	0002      	movs	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e1ad      	b.n	80040fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003da0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da4:	2202      	movs	r2, #2
 8003da6:	4013      	ands	r3, r2
 8003da8:	d0f1      	beq.n	8003d8e <HAL_RCC_OscConfig+0x2a2>
 8003daa:	e018      	b.n	8003dde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003dac:	4b1a      	ldr	r3, [pc, #104]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003dae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003db0:	4b19      	ldr	r3, [pc, #100]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003db2:	2101      	movs	r1, #1
 8003db4:	438a      	bics	r2, r1
 8003db6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fe fd20 	bl	80027fc <HAL_GetTick>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc2:	f7fe fd1b 	bl	80027fc <HAL_GetTick>
 8003dc6:	0002      	movs	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e193      	b.n	80040fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dd4:	4b10      	ldr	r3, [pc, #64]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dd8:	2202      	movs	r2, #2
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d1f1      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2204      	movs	r2, #4
 8003de4:	4013      	ands	r3, r2
 8003de6:	d100      	bne.n	8003dea <HAL_RCC_OscConfig+0x2fe>
 8003de8:	e0c6      	b.n	8003f78 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dea:	231f      	movs	r3, #31
 8003dec:	18fb      	adds	r3, r7, r3
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003df2:	4b09      	ldr	r3, [pc, #36]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2238      	movs	r2, #56	@ 0x38
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2b20      	cmp	r3, #32
 8003dfc:	d11e      	bne.n	8003e3c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003dfe:	4b06      	ldr	r3, [pc, #24]	@ (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e02:	2202      	movs	r2, #2
 8003e04:	4013      	ands	r3, r2
 8003e06:	d100      	bne.n	8003e0a <HAL_RCC_OscConfig+0x31e>
 8003e08:	e0b6      	b.n	8003f78 <HAL_RCC_OscConfig+0x48c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d000      	beq.n	8003e14 <HAL_RCC_OscConfig+0x328>
 8003e12:	e0b1      	b.n	8003f78 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e171      	b.n	80040fc <HAL_RCC_OscConfig+0x610>
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	fffeffff 	.word	0xfffeffff
 8003e20:	fffbffff 	.word	0xfffbffff
 8003e24:	ffff80ff 	.word	0xffff80ff
 8003e28:	ffffc7ff 	.word	0xffffc7ff
 8003e2c:	00f42400 	.word	0x00f42400
 8003e30:	20000068 	.word	0x20000068
 8003e34:	2000006c 	.word	0x2000006c
 8003e38:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e3c:	4bb1      	ldr	r3, [pc, #708]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003e3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e40:	2380      	movs	r3, #128	@ 0x80
 8003e42:	055b      	lsls	r3, r3, #21
 8003e44:	4013      	ands	r3, r2
 8003e46:	d101      	bne.n	8003e4c <HAL_RCC_OscConfig+0x360>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <HAL_RCC_OscConfig+0x362>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d011      	beq.n	8003e76 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003e52:	4bac      	ldr	r3, [pc, #688]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003e54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e56:	4bab      	ldr	r3, [pc, #684]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003e58:	2180      	movs	r1, #128	@ 0x80
 8003e5a:	0549      	lsls	r1, r1, #21
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e60:	4ba8      	ldr	r3, [pc, #672]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003e62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e64:	2380      	movs	r3, #128	@ 0x80
 8003e66:	055b      	lsls	r3, r3, #21
 8003e68:	4013      	ands	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003e6e:	231f      	movs	r3, #31
 8003e70:	18fb      	adds	r3, r7, r3
 8003e72:	2201      	movs	r2, #1
 8003e74:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e76:	4ba4      	ldr	r3, [pc, #656]	@ (8004108 <HAL_RCC_OscConfig+0x61c>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	2380      	movs	r3, #128	@ 0x80
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	4013      	ands	r3, r2
 8003e80:	d11a      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e82:	4ba1      	ldr	r3, [pc, #644]	@ (8004108 <HAL_RCC_OscConfig+0x61c>)
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4ba0      	ldr	r3, [pc, #640]	@ (8004108 <HAL_RCC_OscConfig+0x61c>)
 8003e88:	2180      	movs	r1, #128	@ 0x80
 8003e8a:	0049      	lsls	r1, r1, #1
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003e90:	f7fe fcb4 	bl	80027fc <HAL_GetTick>
 8003e94:	0003      	movs	r3, r0
 8003e96:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9a:	f7fe fcaf 	bl	80027fc <HAL_GetTick>
 8003e9e:	0002      	movs	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e127      	b.n	80040fc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eac:	4b96      	ldr	r3, [pc, #600]	@ (8004108 <HAL_RCC_OscConfig+0x61c>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	2380      	movs	r3, #128	@ 0x80
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d0f0      	beq.n	8003e9a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d106      	bne.n	8003ece <HAL_RCC_OscConfig+0x3e2>
 8003ec0:	4b90      	ldr	r3, [pc, #576]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003ec2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ec4:	4b8f      	ldr	r3, [pc, #572]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ecc:	e01c      	b.n	8003f08 <HAL_RCC_OscConfig+0x41c>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b05      	cmp	r3, #5
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x404>
 8003ed6:	4b8b      	ldr	r3, [pc, #556]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003ed8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003eda:	4b8a      	ldr	r3, [pc, #552]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003edc:	2104      	movs	r1, #4
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ee2:	4b88      	ldr	r3, [pc, #544]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003ee4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ee6:	4b87      	ldr	r3, [pc, #540]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003ee8:	2101      	movs	r1, #1
 8003eea:	430a      	orrs	r2, r1
 8003eec:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003eee:	e00b      	b.n	8003f08 <HAL_RCC_OscConfig+0x41c>
 8003ef0:	4b84      	ldr	r3, [pc, #528]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003ef2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ef4:	4b83      	ldr	r3, [pc, #524]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	438a      	bics	r2, r1
 8003efa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003efc:	4b81      	ldr	r3, [pc, #516]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003efe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f00:	4b80      	ldr	r3, [pc, #512]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003f02:	2104      	movs	r1, #4
 8003f04:	438a      	bics	r2, r1
 8003f06:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d014      	beq.n	8003f3a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7fe fc74 	bl	80027fc <HAL_GetTick>
 8003f14:	0003      	movs	r3, r0
 8003f16:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f18:	e009      	b.n	8003f2e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1a:	f7fe fc6f 	bl	80027fc <HAL_GetTick>
 8003f1e:	0002      	movs	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	4a79      	ldr	r2, [pc, #484]	@ (800410c <HAL_RCC_OscConfig+0x620>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e0e6      	b.n	80040fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f2e:	4b75      	ldr	r3, [pc, #468]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f32:	2202      	movs	r2, #2
 8003f34:	4013      	ands	r3, r2
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCC_OscConfig+0x42e>
 8003f38:	e013      	b.n	8003f62 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3a:	f7fe fc5f 	bl	80027fc <HAL_GetTick>
 8003f3e:	0003      	movs	r3, r0
 8003f40:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f42:	e009      	b.n	8003f58 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f44:	f7fe fc5a 	bl	80027fc <HAL_GetTick>
 8003f48:	0002      	movs	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	4a6f      	ldr	r2, [pc, #444]	@ (800410c <HAL_RCC_OscConfig+0x620>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e0d1      	b.n	80040fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f58:	4b6a      	ldr	r3, [pc, #424]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003f62:	231f      	movs	r3, #31
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d105      	bne.n	8003f78 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003f6c:	4b65      	ldr	r3, [pc, #404]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003f6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f70:	4b64      	ldr	r3, [pc, #400]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003f72:	4967      	ldr	r1, [pc, #412]	@ (8004110 <HAL_RCC_OscConfig+0x624>)
 8003f74:	400a      	ands	r2, r1
 8003f76:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d100      	bne.n	8003f82 <HAL_RCC_OscConfig+0x496>
 8003f80:	e0bb      	b.n	80040fa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f82:	4b60      	ldr	r3, [pc, #384]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2238      	movs	r2, #56	@ 0x38
 8003f88:	4013      	ands	r3, r2
 8003f8a:	2b10      	cmp	r3, #16
 8003f8c:	d100      	bne.n	8003f90 <HAL_RCC_OscConfig+0x4a4>
 8003f8e:	e07b      	b.n	8004088 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d156      	bne.n	8004046 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f98:	4b5a      	ldr	r3, [pc, #360]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	4b59      	ldr	r3, [pc, #356]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003f9e:	495d      	ldr	r1, [pc, #372]	@ (8004114 <HAL_RCC_OscConfig+0x628>)
 8003fa0:	400a      	ands	r2, r1
 8003fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7fe fc2a 	bl	80027fc <HAL_GetTick>
 8003fa8:	0003      	movs	r3, r0
 8003faa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fae:	f7fe fc25 	bl	80027fc <HAL_GetTick>
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e09d      	b.n	80040fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc0:	4b50      	ldr	r3, [pc, #320]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	2380      	movs	r3, #128	@ 0x80
 8003fc6:	049b      	lsls	r3, r3, #18
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d1f0      	bne.n	8003fae <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fcc:	4b4d      	ldr	r3, [pc, #308]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4a51      	ldr	r2, [pc, #324]	@ (8004118 <HAL_RCC_OscConfig+0x62c>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	0019      	movs	r1, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1a      	ldr	r2, [r3, #32]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe4:	021b      	lsls	r3, r3, #8
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	4b42      	ldr	r3, [pc, #264]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004000:	4b40      	ldr	r3, [pc, #256]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	4b3f      	ldr	r3, [pc, #252]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8004006:	2180      	movs	r1, #128	@ 0x80
 8004008:	0449      	lsls	r1, r1, #17
 800400a:	430a      	orrs	r2, r1
 800400c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800400e:	4b3d      	ldr	r3, [pc, #244]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	4b3c      	ldr	r3, [pc, #240]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8004014:	2180      	movs	r1, #128	@ 0x80
 8004016:	0549      	lsls	r1, r1, #21
 8004018:	430a      	orrs	r2, r1
 800401a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fe fbee 	bl	80027fc <HAL_GetTick>
 8004020:	0003      	movs	r3, r0
 8004022:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004026:	f7fe fbe9 	bl	80027fc <HAL_GetTick>
 800402a:	0002      	movs	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e061      	b.n	80040fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004038:	4b32      	ldr	r3, [pc, #200]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	2380      	movs	r3, #128	@ 0x80
 800403e:	049b      	lsls	r3, r3, #18
 8004040:	4013      	ands	r3, r2
 8004042:	d0f0      	beq.n	8004026 <HAL_RCC_OscConfig+0x53a>
 8004044:	e059      	b.n	80040fa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004046:	4b2f      	ldr	r3, [pc, #188]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4b2e      	ldr	r3, [pc, #184]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 800404c:	4931      	ldr	r1, [pc, #196]	@ (8004114 <HAL_RCC_OscConfig+0x628>)
 800404e:	400a      	ands	r2, r1
 8004050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004052:	f7fe fbd3 	bl	80027fc <HAL_GetTick>
 8004056:	0003      	movs	r3, r0
 8004058:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405c:	f7fe fbce 	bl	80027fc <HAL_GetTick>
 8004060:	0002      	movs	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e046      	b.n	80040fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800406e:	4b25      	ldr	r3, [pc, #148]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	2380      	movs	r3, #128	@ 0x80
 8004074:	049b      	lsls	r3, r3, #18
 8004076:	4013      	ands	r3, r2
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800407a:	4b22      	ldr	r3, [pc, #136]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	4b21      	ldr	r3, [pc, #132]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8004080:	4926      	ldr	r1, [pc, #152]	@ (800411c <HAL_RCC_OscConfig+0x630>)
 8004082:	400a      	ands	r2, r1
 8004084:	60da      	str	r2, [r3, #12]
 8004086:	e038      	b.n	80040fa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e033      	b.n	80040fc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004094:	4b1b      	ldr	r3, [pc, #108]	@ (8004104 <HAL_RCC_OscConfig+0x618>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2203      	movs	r2, #3
 800409e:	401a      	ands	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d126      	bne.n	80040f6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2270      	movs	r2, #112	@ 0x70
 80040ac:	401a      	ands	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d11f      	bne.n	80040f6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	23fe      	movs	r3, #254	@ 0xfe
 80040ba:	01db      	lsls	r3, r3, #7
 80040bc:	401a      	ands	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d116      	bne.n	80040f6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	23f8      	movs	r3, #248	@ 0xf8
 80040cc:	039b      	lsls	r3, r3, #14
 80040ce:	401a      	ands	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d10e      	bne.n	80040f6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	23e0      	movs	r3, #224	@ 0xe0
 80040dc:	051b      	lsls	r3, r3, #20
 80040de:	401a      	ands	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d106      	bne.n	80040f6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	0f5b      	lsrs	r3, r3, #29
 80040ec:	075a      	lsls	r2, r3, #29
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d001      	beq.n	80040fa <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	0018      	movs	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	b008      	add	sp, #32
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40021000 	.word	0x40021000
 8004108:	40007000 	.word	0x40007000
 800410c:	00001388 	.word	0x00001388
 8004110:	efffffff 	.word	0xefffffff
 8004114:	feffffff 	.word	0xfeffffff
 8004118:	11c1808c 	.word	0x11c1808c
 800411c:	eefefffc 	.word	0xeefefffc

08004120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0e9      	b.n	8004308 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004134:	4b76      	ldr	r3, [pc, #472]	@ (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2207      	movs	r2, #7
 800413a:	4013      	ands	r3, r2
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d91e      	bls.n	8004180 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004142:	4b73      	ldr	r3, [pc, #460]	@ (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2207      	movs	r2, #7
 8004148:	4393      	bics	r3, r2
 800414a:	0019      	movs	r1, r3
 800414c:	4b70      	ldr	r3, [pc, #448]	@ (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004154:	f7fe fb52 	bl	80027fc <HAL_GetTick>
 8004158:	0003      	movs	r3, r0
 800415a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800415c:	e009      	b.n	8004172 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415e:	f7fe fb4d 	bl	80027fc <HAL_GetTick>
 8004162:	0002      	movs	r2, r0
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	4a6a      	ldr	r2, [pc, #424]	@ (8004314 <HAL_RCC_ClockConfig+0x1f4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e0ca      	b.n	8004308 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004172:	4b67      	ldr	r3, [pc, #412]	@ (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2207      	movs	r2, #7
 8004178:	4013      	ands	r3, r2
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d1ee      	bne.n	800415e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2202      	movs	r2, #2
 8004186:	4013      	ands	r3, r2
 8004188:	d015      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2204      	movs	r2, #4
 8004190:	4013      	ands	r3, r2
 8004192:	d006      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004194:	4b60      	ldr	r3, [pc, #384]	@ (8004318 <HAL_RCC_ClockConfig+0x1f8>)
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	4b5f      	ldr	r3, [pc, #380]	@ (8004318 <HAL_RCC_ClockConfig+0x1f8>)
 800419a:	21e0      	movs	r1, #224	@ 0xe0
 800419c:	01c9      	lsls	r1, r1, #7
 800419e:	430a      	orrs	r2, r1
 80041a0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a2:	4b5d      	ldr	r3, [pc, #372]	@ (8004318 <HAL_RCC_ClockConfig+0x1f8>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	4a5d      	ldr	r2, [pc, #372]	@ (800431c <HAL_RCC_ClockConfig+0x1fc>)
 80041a8:	4013      	ands	r3, r2
 80041aa:	0019      	movs	r1, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	4b59      	ldr	r3, [pc, #356]	@ (8004318 <HAL_RCC_ClockConfig+0x1f8>)
 80041b2:	430a      	orrs	r2, r1
 80041b4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2201      	movs	r2, #1
 80041bc:	4013      	ands	r3, r2
 80041be:	d057      	beq.n	8004270 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d107      	bne.n	80041d8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041c8:	4b53      	ldr	r3, [pc, #332]	@ (8004318 <HAL_RCC_ClockConfig+0x1f8>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	2380      	movs	r3, #128	@ 0x80
 80041ce:	029b      	lsls	r3, r3, #10
 80041d0:	4013      	ands	r3, r2
 80041d2:	d12b      	bne.n	800422c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e097      	b.n	8004308 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d107      	bne.n	80041f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041e0:	4b4d      	ldr	r3, [pc, #308]	@ (8004318 <HAL_RCC_ClockConfig+0x1f8>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	2380      	movs	r3, #128	@ 0x80
 80041e6:	049b      	lsls	r3, r3, #18
 80041e8:	4013      	ands	r3, r2
 80041ea:	d11f      	bne.n	800422c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e08b      	b.n	8004308 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d107      	bne.n	8004208 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f8:	4b47      	ldr	r3, [pc, #284]	@ (8004318 <HAL_RCC_ClockConfig+0x1f8>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	2380      	movs	r3, #128	@ 0x80
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4013      	ands	r3, r2
 8004202:	d113      	bne.n	800422c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e07f      	b.n	8004308 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b03      	cmp	r3, #3
 800420e:	d106      	bne.n	800421e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004210:	4b41      	ldr	r3, [pc, #260]	@ (8004318 <HAL_RCC_ClockConfig+0x1f8>)
 8004212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004214:	2202      	movs	r2, #2
 8004216:	4013      	ands	r3, r2
 8004218:	d108      	bne.n	800422c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e074      	b.n	8004308 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800421e:	4b3e      	ldr	r3, [pc, #248]	@ (8004318 <HAL_RCC_ClockConfig+0x1f8>)
 8004220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004222:	2202      	movs	r2, #2
 8004224:	4013      	ands	r3, r2
 8004226:	d101      	bne.n	800422c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e06d      	b.n	8004308 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800422c:	4b3a      	ldr	r3, [pc, #232]	@ (8004318 <HAL_RCC_ClockConfig+0x1f8>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2207      	movs	r2, #7
 8004232:	4393      	bics	r3, r2
 8004234:	0019      	movs	r1, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	4b37      	ldr	r3, [pc, #220]	@ (8004318 <HAL_RCC_ClockConfig+0x1f8>)
 800423c:	430a      	orrs	r2, r1
 800423e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004240:	f7fe fadc 	bl	80027fc <HAL_GetTick>
 8004244:	0003      	movs	r3, r0
 8004246:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004248:	e009      	b.n	800425e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800424a:	f7fe fad7 	bl	80027fc <HAL_GetTick>
 800424e:	0002      	movs	r2, r0
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	4a2f      	ldr	r2, [pc, #188]	@ (8004314 <HAL_RCC_ClockConfig+0x1f4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d901      	bls.n	800425e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e054      	b.n	8004308 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425e:	4b2e      	ldr	r3, [pc, #184]	@ (8004318 <HAL_RCC_ClockConfig+0x1f8>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2238      	movs	r2, #56	@ 0x38
 8004264:	401a      	ands	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	429a      	cmp	r2, r3
 800426e:	d1ec      	bne.n	800424a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004270:	4b27      	ldr	r3, [pc, #156]	@ (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2207      	movs	r2, #7
 8004276:	4013      	ands	r3, r2
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d21e      	bcs.n	80042bc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427e:	4b24      	ldr	r3, [pc, #144]	@ (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2207      	movs	r2, #7
 8004284:	4393      	bics	r3, r2
 8004286:	0019      	movs	r1, r3
 8004288:	4b21      	ldr	r3, [pc, #132]	@ (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004290:	f7fe fab4 	bl	80027fc <HAL_GetTick>
 8004294:	0003      	movs	r3, r0
 8004296:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004298:	e009      	b.n	80042ae <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800429a:	f7fe faaf 	bl	80027fc <HAL_GetTick>
 800429e:	0002      	movs	r2, r0
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004314 <HAL_RCC_ClockConfig+0x1f4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e02c      	b.n	8004308 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042ae:	4b18      	ldr	r3, [pc, #96]	@ (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2207      	movs	r2, #7
 80042b4:	4013      	ands	r3, r2
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d1ee      	bne.n	800429a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2204      	movs	r2, #4
 80042c2:	4013      	ands	r3, r2
 80042c4:	d009      	beq.n	80042da <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80042c6:	4b14      	ldr	r3, [pc, #80]	@ (8004318 <HAL_RCC_ClockConfig+0x1f8>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	4a15      	ldr	r2, [pc, #84]	@ (8004320 <HAL_RCC_ClockConfig+0x200>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	0019      	movs	r1, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	4b10      	ldr	r3, [pc, #64]	@ (8004318 <HAL_RCC_ClockConfig+0x1f8>)
 80042d6:	430a      	orrs	r2, r1
 80042d8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80042da:	f000 f829 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 80042de:	0001      	movs	r1, r0
 80042e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004318 <HAL_RCC_ClockConfig+0x1f8>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	0a1b      	lsrs	r3, r3, #8
 80042e6:	220f      	movs	r2, #15
 80042e8:	401a      	ands	r2, r3
 80042ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004324 <HAL_RCC_ClockConfig+0x204>)
 80042ec:	0092      	lsls	r2, r2, #2
 80042ee:	58d3      	ldr	r3, [r2, r3]
 80042f0:	221f      	movs	r2, #31
 80042f2:	4013      	ands	r3, r2
 80042f4:	000a      	movs	r2, r1
 80042f6:	40da      	lsrs	r2, r3
 80042f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004328 <HAL_RCC_ClockConfig+0x208>)
 80042fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042fc:	4b0b      	ldr	r3, [pc, #44]	@ (800432c <HAL_RCC_ClockConfig+0x20c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	0018      	movs	r0, r3
 8004302:	f7fe fa1f 	bl	8002744 <HAL_InitTick>
 8004306:	0003      	movs	r3, r0
}
 8004308:	0018      	movs	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	b004      	add	sp, #16
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40022000 	.word	0x40022000
 8004314:	00001388 	.word	0x00001388
 8004318:	40021000 	.word	0x40021000
 800431c:	fffff0ff 	.word	0xfffff0ff
 8004320:	ffff8fff 	.word	0xffff8fff
 8004324:	08006940 	.word	0x08006940
 8004328:	20000068 	.word	0x20000068
 800432c:	2000006c 	.word	0x2000006c

08004330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004336:	4b3c      	ldr	r3, [pc, #240]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2238      	movs	r2, #56	@ 0x38
 800433c:	4013      	ands	r3, r2
 800433e:	d10f      	bne.n	8004360 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004340:	4b39      	ldr	r3, [pc, #228]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	0adb      	lsrs	r3, r3, #11
 8004346:	2207      	movs	r2, #7
 8004348:	4013      	ands	r3, r2
 800434a:	2201      	movs	r2, #1
 800434c:	409a      	lsls	r2, r3
 800434e:	0013      	movs	r3, r2
 8004350:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004352:	6839      	ldr	r1, [r7, #0]
 8004354:	4835      	ldr	r0, [pc, #212]	@ (800442c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004356:	f7fb fed5 	bl	8000104 <__udivsi3>
 800435a:	0003      	movs	r3, r0
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	e05d      	b.n	800441c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004360:	4b31      	ldr	r3, [pc, #196]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2238      	movs	r2, #56	@ 0x38
 8004366:	4013      	ands	r3, r2
 8004368:	2b08      	cmp	r3, #8
 800436a:	d102      	bne.n	8004372 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800436c:	4b30      	ldr	r3, [pc, #192]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x100>)
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	e054      	b.n	800441c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004372:	4b2d      	ldr	r3, [pc, #180]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2238      	movs	r2, #56	@ 0x38
 8004378:	4013      	ands	r3, r2
 800437a:	2b10      	cmp	r3, #16
 800437c:	d138      	bne.n	80043f0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800437e:	4b2a      	ldr	r3, [pc, #168]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	2203      	movs	r2, #3
 8004384:	4013      	ands	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004388:	4b27      	ldr	r3, [pc, #156]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xf8>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	2207      	movs	r2, #7
 8004390:	4013      	ands	r3, r2
 8004392:	3301      	adds	r3, #1
 8004394:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b03      	cmp	r3, #3
 800439a:	d10d      	bne.n	80043b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	4824      	ldr	r0, [pc, #144]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x100>)
 80043a0:	f7fb feb0 	bl	8000104 <__udivsi3>
 80043a4:	0003      	movs	r3, r0
 80043a6:	0019      	movs	r1, r3
 80043a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	0a1b      	lsrs	r3, r3, #8
 80043ae:	227f      	movs	r2, #127	@ 0x7f
 80043b0:	4013      	ands	r3, r2
 80043b2:	434b      	muls	r3, r1
 80043b4:	617b      	str	r3, [r7, #20]
        break;
 80043b6:	e00d      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	481c      	ldr	r0, [pc, #112]	@ (800442c <HAL_RCC_GetSysClockFreq+0xfc>)
 80043bc:	f7fb fea2 	bl	8000104 <__udivsi3>
 80043c0:	0003      	movs	r3, r0
 80043c2:	0019      	movs	r1, r3
 80043c4:	4b18      	ldr	r3, [pc, #96]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	0a1b      	lsrs	r3, r3, #8
 80043ca:	227f      	movs	r2, #127	@ 0x7f
 80043cc:	4013      	ands	r3, r2
 80043ce:	434b      	muls	r3, r1
 80043d0:	617b      	str	r3, [r7, #20]
        break;
 80043d2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80043d4:	4b14      	ldr	r3, [pc, #80]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	0f5b      	lsrs	r3, r3, #29
 80043da:	2207      	movs	r2, #7
 80043dc:	4013      	ands	r3, r2
 80043de:	3301      	adds	r3, #1
 80043e0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	6978      	ldr	r0, [r7, #20]
 80043e6:	f7fb fe8d 	bl	8000104 <__udivsi3>
 80043ea:	0003      	movs	r3, r0
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	e015      	b.n	800441c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80043f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	2238      	movs	r2, #56	@ 0x38
 80043f6:	4013      	ands	r3, r2
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d103      	bne.n	8004404 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80043fc:	2380      	movs	r3, #128	@ 0x80
 80043fe:	021b      	lsls	r3, r3, #8
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	e00b      	b.n	800441c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004404:	4b08      	ldr	r3, [pc, #32]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2238      	movs	r2, #56	@ 0x38
 800440a:	4013      	ands	r3, r2
 800440c:	2b18      	cmp	r3, #24
 800440e:	d103      	bne.n	8004418 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004410:	23fa      	movs	r3, #250	@ 0xfa
 8004412:	01db      	lsls	r3, r3, #7
 8004414:	613b      	str	r3, [r7, #16]
 8004416:	e001      	b.n	800441c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800441c:	693b      	ldr	r3, [r7, #16]
}
 800441e:	0018      	movs	r0, r3
 8004420:	46bd      	mov	sp, r7
 8004422:	b006      	add	sp, #24
 8004424:	bd80      	pop	{r7, pc}
 8004426:	46c0      	nop			@ (mov r8, r8)
 8004428:	40021000 	.word	0x40021000
 800442c:	00f42400 	.word	0x00f42400
 8004430:	007a1200 	.word	0x007a1200

08004434 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800443c:	2313      	movs	r3, #19
 800443e:	18fb      	adds	r3, r7, r3
 8004440:	2200      	movs	r2, #0
 8004442:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004444:	2312      	movs	r3, #18
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	2200      	movs	r2, #0
 800444a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	2380      	movs	r3, #128	@ 0x80
 8004452:	029b      	lsls	r3, r3, #10
 8004454:	4013      	ands	r3, r2
 8004456:	d100      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004458:	e0a3      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800445a:	2011      	movs	r0, #17
 800445c:	183b      	adds	r3, r7, r0
 800445e:	2200      	movs	r2, #0
 8004460:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004462:	4ba5      	ldr	r3, [pc, #660]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004464:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004466:	2380      	movs	r3, #128	@ 0x80
 8004468:	055b      	lsls	r3, r3, #21
 800446a:	4013      	ands	r3, r2
 800446c:	d110      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800446e:	4ba2      	ldr	r3, [pc, #648]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004470:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004472:	4ba1      	ldr	r3, [pc, #644]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004474:	2180      	movs	r1, #128	@ 0x80
 8004476:	0549      	lsls	r1, r1, #21
 8004478:	430a      	orrs	r2, r1
 800447a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800447c:	4b9e      	ldr	r3, [pc, #632]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800447e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004480:	2380      	movs	r3, #128	@ 0x80
 8004482:	055b      	lsls	r3, r3, #21
 8004484:	4013      	ands	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]
 8004488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800448a:	183b      	adds	r3, r7, r0
 800448c:	2201      	movs	r2, #1
 800448e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004490:	4b9a      	ldr	r3, [pc, #616]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	4b99      	ldr	r3, [pc, #612]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004496:	2180      	movs	r1, #128	@ 0x80
 8004498:	0049      	lsls	r1, r1, #1
 800449a:	430a      	orrs	r2, r1
 800449c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800449e:	f7fe f9ad 	bl	80027fc <HAL_GetTick>
 80044a2:	0003      	movs	r3, r0
 80044a4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044a6:	e00b      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a8:	f7fe f9a8 	bl	80027fc <HAL_GetTick>
 80044ac:	0002      	movs	r2, r0
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d904      	bls.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80044b6:	2313      	movs	r3, #19
 80044b8:	18fb      	adds	r3, r7, r3
 80044ba:	2203      	movs	r2, #3
 80044bc:	701a      	strb	r2, [r3, #0]
        break;
 80044be:	e005      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044c0:	4b8e      	ldr	r3, [pc, #568]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	2380      	movs	r3, #128	@ 0x80
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	4013      	ands	r3, r2
 80044ca:	d0ed      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80044cc:	2313      	movs	r3, #19
 80044ce:	18fb      	adds	r3, r7, r3
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d154      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044d6:	4b88      	ldr	r3, [pc, #544]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80044da:	23c0      	movs	r3, #192	@ 0xc0
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4013      	ands	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d019      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d014      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044f2:	4b81      	ldr	r3, [pc, #516]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f6:	4a82      	ldr	r2, [pc, #520]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044fc:	4b7e      	ldr	r3, [pc, #504]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004500:	4b7d      	ldr	r3, [pc, #500]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004502:	2180      	movs	r1, #128	@ 0x80
 8004504:	0249      	lsls	r1, r1, #9
 8004506:	430a      	orrs	r2, r1
 8004508:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800450a:	4b7b      	ldr	r3, [pc, #492]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800450c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800450e:	4b7a      	ldr	r3, [pc, #488]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004510:	497c      	ldr	r1, [pc, #496]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004512:	400a      	ands	r2, r1
 8004514:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004516:	4b78      	ldr	r3, [pc, #480]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2201      	movs	r2, #1
 8004520:	4013      	ands	r3, r2
 8004522:	d016      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7fe f96a 	bl	80027fc <HAL_GetTick>
 8004528:	0003      	movs	r3, r0
 800452a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800452c:	e00c      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452e:	f7fe f965 	bl	80027fc <HAL_GetTick>
 8004532:	0002      	movs	r2, r0
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	4a73      	ldr	r2, [pc, #460]	@ (8004708 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d904      	bls.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800453e:	2313      	movs	r3, #19
 8004540:	18fb      	adds	r3, r7, r3
 8004542:	2203      	movs	r2, #3
 8004544:	701a      	strb	r2, [r3, #0]
            break;
 8004546:	e004      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004548:	4b6b      	ldr	r3, [pc, #428]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800454a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800454c:	2202      	movs	r2, #2
 800454e:	4013      	ands	r3, r2
 8004550:	d0ed      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004552:	2313      	movs	r3, #19
 8004554:	18fb      	adds	r3, r7, r3
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10a      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800455c:	4b66      	ldr	r3, [pc, #408]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800455e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004560:	4a67      	ldr	r2, [pc, #412]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004562:	4013      	ands	r3, r2
 8004564:	0019      	movs	r1, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800456a:	4b63      	ldr	r3, [pc, #396]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800456c:	430a      	orrs	r2, r1
 800456e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004570:	e00c      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004572:	2312      	movs	r3, #18
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	2213      	movs	r2, #19
 8004578:	18ba      	adds	r2, r7, r2
 800457a:	7812      	ldrb	r2, [r2, #0]
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	e005      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004580:	2312      	movs	r3, #18
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	2213      	movs	r2, #19
 8004586:	18ba      	adds	r2, r7, r2
 8004588:	7812      	ldrb	r2, [r2, #0]
 800458a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800458c:	2311      	movs	r3, #17
 800458e:	18fb      	adds	r3, r7, r3
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d105      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004596:	4b58      	ldr	r3, [pc, #352]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004598:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800459a:	4b57      	ldr	r3, [pc, #348]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800459c:	495b      	ldr	r1, [pc, #364]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800459e:	400a      	ands	r2, r1
 80045a0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2201      	movs	r2, #1
 80045a8:	4013      	ands	r3, r2
 80045aa:	d009      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ac:	4b52      	ldr	r3, [pc, #328]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b0:	2203      	movs	r2, #3
 80045b2:	4393      	bics	r3, r2
 80045b4:	0019      	movs	r1, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	4b4f      	ldr	r3, [pc, #316]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045bc:	430a      	orrs	r2, r1
 80045be:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2210      	movs	r2, #16
 80045c6:	4013      	ands	r3, r2
 80045c8:	d009      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045ca:	4b4b      	ldr	r3, [pc, #300]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ce:	4a50      	ldr	r2, [pc, #320]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	0019      	movs	r1, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	4b47      	ldr	r3, [pc, #284]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045da:	430a      	orrs	r2, r1
 80045dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	2380      	movs	r3, #128	@ 0x80
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4013      	ands	r3, r2
 80045e8:	d009      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045ea:	4b43      	ldr	r3, [pc, #268]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ee:	4a49      	ldr	r2, [pc, #292]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	0019      	movs	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	695a      	ldr	r2, [r3, #20]
 80045f8:	4b3f      	ldr	r3, [pc, #252]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045fa:	430a      	orrs	r2, r1
 80045fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	2380      	movs	r3, #128	@ 0x80
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4013      	ands	r3, r2
 8004608:	d009      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800460a:	4b3b      	ldr	r3, [pc, #236]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800460c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460e:	4a42      	ldr	r2, [pc, #264]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004610:	4013      	ands	r3, r2
 8004612:	0019      	movs	r1, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699a      	ldr	r2, [r3, #24]
 8004618:	4b37      	ldr	r3, [pc, #220]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800461a:	430a      	orrs	r2, r1
 800461c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2220      	movs	r2, #32
 8004624:	4013      	ands	r3, r2
 8004626:	d009      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004628:	4b33      	ldr	r3, [pc, #204]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800462a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462c:	4a3b      	ldr	r2, [pc, #236]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800462e:	4013      	ands	r3, r2
 8004630:	0019      	movs	r1, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	4b30      	ldr	r3, [pc, #192]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004638:	430a      	orrs	r2, r1
 800463a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	2380      	movs	r3, #128	@ 0x80
 8004642:	01db      	lsls	r3, r3, #7
 8004644:	4013      	ands	r3, r2
 8004646:	d015      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004648:	4b2b      	ldr	r3, [pc, #172]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800464a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	0899      	lsrs	r1, r3, #2
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69da      	ldr	r2, [r3, #28]
 8004654:	4b28      	ldr	r3, [pc, #160]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004656:	430a      	orrs	r2, r1
 8004658:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69da      	ldr	r2, [r3, #28]
 800465e:	2380      	movs	r3, #128	@ 0x80
 8004660:	05db      	lsls	r3, r3, #23
 8004662:	429a      	cmp	r2, r3
 8004664:	d106      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004666:	4b24      	ldr	r3, [pc, #144]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	4b23      	ldr	r3, [pc, #140]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800466c:	2180      	movs	r1, #128	@ 0x80
 800466e:	0249      	lsls	r1, r1, #9
 8004670:	430a      	orrs	r2, r1
 8004672:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	2380      	movs	r3, #128	@ 0x80
 800467a:	039b      	lsls	r3, r3, #14
 800467c:	4013      	ands	r3, r2
 800467e:	d016      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004680:	4b1d      	ldr	r3, [pc, #116]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004684:	4a26      	ldr	r2, [pc, #152]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004686:	4013      	ands	r3, r2
 8004688:	0019      	movs	r1, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1a      	ldr	r2, [r3, #32]
 800468e:	4b1a      	ldr	r3, [pc, #104]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004690:	430a      	orrs	r2, r1
 8004692:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1a      	ldr	r2, [r3, #32]
 8004698:	2380      	movs	r3, #128	@ 0x80
 800469a:	03db      	lsls	r3, r3, #15
 800469c:	429a      	cmp	r2, r3
 800469e:	d106      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80046a0:	4b15      	ldr	r3, [pc, #84]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	4b14      	ldr	r3, [pc, #80]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046a6:	2180      	movs	r1, #128	@ 0x80
 80046a8:	0449      	lsls	r1, r1, #17
 80046aa:	430a      	orrs	r2, r1
 80046ac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	2380      	movs	r3, #128	@ 0x80
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	4013      	ands	r3, r2
 80046b8:	d016      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80046ba:	4b0f      	ldr	r3, [pc, #60]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046be:	4a19      	ldr	r2, [pc, #100]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	0019      	movs	r1, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	4b0b      	ldr	r3, [pc, #44]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046ca:	430a      	orrs	r2, r1
 80046cc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	2380      	movs	r3, #128	@ 0x80
 80046d4:	01db      	lsls	r3, r3, #7
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d106      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80046da:	4b07      	ldr	r3, [pc, #28]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046e0:	2180      	movs	r1, #128	@ 0x80
 80046e2:	0249      	lsls	r1, r1, #9
 80046e4:	430a      	orrs	r2, r1
 80046e6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80046e8:	2312      	movs	r3, #18
 80046ea:	18fb      	adds	r3, r7, r3
 80046ec:	781b      	ldrb	r3, [r3, #0]
}
 80046ee:	0018      	movs	r0, r3
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b006      	add	sp, #24
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	46c0      	nop			@ (mov r8, r8)
 80046f8:	40021000 	.word	0x40021000
 80046fc:	40007000 	.word	0x40007000
 8004700:	fffffcff 	.word	0xfffffcff
 8004704:	fffeffff 	.word	0xfffeffff
 8004708:	00001388 	.word	0x00001388
 800470c:	efffffff 	.word	0xefffffff
 8004710:	fffff3ff 	.word	0xfffff3ff
 8004714:	fff3ffff 	.word	0xfff3ffff
 8004718:	ffcfffff 	.word	0xffcfffff
 800471c:	ffffcfff 	.word	0xffffcfff
 8004720:	ffbfffff 	.word	0xffbfffff
 8004724:	ffff3fff 	.word	0xffff3fff

08004728 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8004728:	b590      	push	{r4, r7, lr}
 800472a:	b08b      	sub	sp, #44	@ 0x2c
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8004730:	2427      	movs	r4, #39	@ 0x27
 8004732:	193b      	adds	r3, r7, r4
 8004734:	2200      	movs	r2, #0
 8004736:	701a      	strb	r2, [r3, #0]
  FlagStatus       backupchanged = RESET;
 8004738:	2326      	movs	r3, #38	@ 0x26
 800473a:	18fb      	adds	r3, r7, r3
 800473c:	2200      	movs	r2, #0
 800473e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 8004740:	4b31      	ldr	r3, [pc, #196]	@ (8004808 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004744:	4b30      	ldr	r3, [pc, #192]	@ (8004808 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004746:	2101      	movs	r1, #1
 8004748:	430a      	orrs	r2, r1
 800474a:	635a      	str	r2, [r3, #52]	@ 0x34
 800474c:	4b2e      	ldr	r3, [pc, #184]	@ (8004808 <HAL_RCCEx_EnableLSCO+0xe0>)
 800474e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004750:	2201      	movs	r2, #1
 8004752:	4013      	ands	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 8004758:	2110      	movs	r1, #16
 800475a:	187b      	adds	r3, r7, r1
 800475c:	2204      	movs	r2, #4
 800475e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004760:	187b      	adds	r3, r7, r1
 8004762:	2203      	movs	r2, #3
 8004764:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004766:	187b      	adds	r3, r7, r1
 8004768:	2203      	movs	r2, #3
 800476a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476c:	187b      	adds	r3, r7, r1
 800476e:	2200      	movs	r2, #0
 8004770:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 8004772:	187a      	adds	r2, r7, r1
 8004774:	23a0      	movs	r3, #160	@ 0xa0
 8004776:	05db      	lsls	r3, r3, #23
 8004778:	0011      	movs	r1, r2
 800477a:	0018      	movs	r0, r3
 800477c:	f7fe f926 	bl	80029cc <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004780:	4b21      	ldr	r3, [pc, #132]	@ (8004808 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004782:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004784:	2380      	movs	r3, #128	@ 0x80
 8004786:	055b      	lsls	r3, r3, #21
 8004788:	4013      	ands	r3, r2
 800478a:	d110      	bne.n	80047ae <HAL_RCCEx_EnableLSCO+0x86>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800478c:	4b1e      	ldr	r3, [pc, #120]	@ (8004808 <HAL_RCCEx_EnableLSCO+0xe0>)
 800478e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004790:	4b1d      	ldr	r3, [pc, #116]	@ (8004808 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004792:	2180      	movs	r1, #128	@ 0x80
 8004794:	0549      	lsls	r1, r1, #21
 8004796:	430a      	orrs	r2, r1
 8004798:	63da      	str	r2, [r3, #60]	@ 0x3c
 800479a:	4b1b      	ldr	r3, [pc, #108]	@ (8004808 <HAL_RCCEx_EnableLSCO+0xe0>)
 800479c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800479e:	2380      	movs	r3, #128	@ 0x80
 80047a0:	055b      	lsls	r3, r3, #21
 80047a2:	4013      	ands	r3, r2
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 80047a8:	193b      	adds	r3, r7, r4
 80047aa:	2201      	movs	r2, #1
 80047ac:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ae:	4b17      	ldr	r3, [pc, #92]	@ (800480c <HAL_RCCEx_EnableLSCO+0xe4>)
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	2380      	movs	r3, #128	@ 0x80
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	4013      	ands	r3, r2
 80047b8:	d105      	bne.n	80047c6 <HAL_RCCEx_EnableLSCO+0x9e>
  {
    HAL_PWR_EnableBkUpAccess();
 80047ba:	f7ff f939 	bl	8003a30 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 80047be:	2326      	movs	r3, #38	@ 0x26
 80047c0:	18fb      	adds	r3, r7, r3
 80047c2:	2201      	movs	r2, #1
 80047c4:	701a      	strb	r2, [r3, #0]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 80047c6:	4b10      	ldr	r3, [pc, #64]	@ (8004808 <HAL_RCCEx_EnableLSCO+0xe0>)
 80047c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ca:	4a11      	ldr	r2, [pc, #68]	@ (8004810 <HAL_RCCEx_EnableLSCO+0xe8>)
 80047cc:	401a      	ands	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	431a      	orrs	r2, r3
 80047d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004808 <HAL_RCCEx_EnableLSCO+0xe0>)
 80047d4:	2180      	movs	r1, #128	@ 0x80
 80047d6:	0449      	lsls	r1, r1, #17
 80047d8:	430a      	orrs	r2, r1
 80047da:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (backupchanged == SET)
 80047dc:	2326      	movs	r3, #38	@ 0x26
 80047de:	18fb      	adds	r3, r7, r3
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_RCCEx_EnableLSCO+0xc2>
  {
    HAL_PWR_DisableBkUpAccess();
 80047e6:	f7ff f931 	bl	8003a4c <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 80047ea:	2327      	movs	r3, #39	@ 0x27
 80047ec:	18fb      	adds	r3, r7, r3
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d105      	bne.n	8004800 <HAL_RCCEx_EnableLSCO+0xd8>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 80047f4:	4b04      	ldr	r3, [pc, #16]	@ (8004808 <HAL_RCCEx_EnableLSCO+0xe0>)
 80047f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047f8:	4b03      	ldr	r3, [pc, #12]	@ (8004808 <HAL_RCCEx_EnableLSCO+0xe0>)
 80047fa:	4906      	ldr	r1, [pc, #24]	@ (8004814 <HAL_RCCEx_EnableLSCO+0xec>)
 80047fc:	400a      	ands	r2, r1
 80047fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8004800:	46c0      	nop			@ (mov r8, r8)
 8004802:	46bd      	mov	sp, r7
 8004804:	b00b      	add	sp, #44	@ 0x2c
 8004806:	bd90      	pop	{r4, r7, pc}
 8004808:	40021000 	.word	0x40021000
 800480c:	40007000 	.word	0x40007000
 8004810:	fcffffff 	.word	0xfcffffff
 8004814:	efffffff 	.word	0xefffffff

08004818 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004818:	b5b0      	push	{r4, r5, r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004820:	230f      	movs	r3, #15
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	2201      	movs	r2, #1
 8004826:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d100      	bne.n	8004830 <HAL_RTC_Init+0x18>
 800482e:	e08c      	b.n	800494a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2229      	movs	r2, #41	@ 0x29
 8004834:	5c9b      	ldrb	r3, [r3, r2]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10b      	bne.n	8004854 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2228      	movs	r2, #40	@ 0x28
 8004840:	2100      	movs	r1, #0
 8004842:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2288      	movs	r2, #136	@ 0x88
 8004848:	0212      	lsls	r2, r2, #8
 800484a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	0018      	movs	r0, r3
 8004850:	f7fd fd9a 	bl	8002388 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2229      	movs	r2, #41	@ 0x29
 8004858:	2102      	movs	r1, #2
 800485a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	2210      	movs	r2, #16
 8004864:	4013      	ands	r3, r2
 8004866:	2b10      	cmp	r3, #16
 8004868:	d062      	beq.n	8004930 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	22ca      	movs	r2, #202	@ 0xca
 8004870:	625a      	str	r2, [r3, #36]	@ 0x24
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2253      	movs	r2, #83	@ 0x53
 8004878:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800487a:	250f      	movs	r5, #15
 800487c:	197c      	adds	r4, r7, r5
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	0018      	movs	r0, r3
 8004882:	f000 fcb9 	bl	80051f8 <RTC_EnterInitMode>
 8004886:	0003      	movs	r3, r0
 8004888:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800488a:	0028      	movs	r0, r5
 800488c:	183b      	adds	r3, r7, r0
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d12c      	bne.n	80048ee <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	492e      	ldr	r1, [pc, #184]	@ (8004958 <HAL_RTC_Init+0x140>)
 80048a0:	400a      	ands	r2, r1
 80048a2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6999      	ldr	r1, [r3, #24]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6912      	ldr	r2, [r2, #16]
 80048ca:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6919      	ldr	r1, [r3, #16]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	041a      	lsls	r2, r3, #16
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80048e0:	183c      	adds	r4, r7, r0
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	0018      	movs	r0, r3
 80048e6:	f000 fcc9 	bl	800527c <RTC_ExitInitMode>
 80048ea:	0003      	movs	r3, r0
 80048ec:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80048ee:	230f      	movs	r3, #15
 80048f0:	18fb      	adds	r3, r7, r3
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d116      	bne.n	8004926 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699a      	ldr	r2, [r3, #24]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	00d2      	lsls	r2, r2, #3
 8004904:	08d2      	lsrs	r2, r2, #3
 8004906:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6999      	ldr	r1, [r3, #24]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	22ff      	movs	r2, #255	@ 0xff
 800492c:	625a      	str	r2, [r3, #36]	@ 0x24
 800492e:	e003      	b.n	8004938 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004930:	230f      	movs	r3, #15
 8004932:	18fb      	adds	r3, r7, r3
 8004934:	2200      	movs	r2, #0
 8004936:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004938:	230f      	movs	r3, #15
 800493a:	18fb      	adds	r3, r7, r3
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d103      	bne.n	800494a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2229      	movs	r2, #41	@ 0x29
 8004946:	2101      	movs	r1, #1
 8004948:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800494a:	230f      	movs	r3, #15
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	781b      	ldrb	r3, [r3, #0]
}
 8004950:	0018      	movs	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	b004      	add	sp, #16
 8004956:	bdb0      	pop	{r4, r5, r7, pc}
 8004958:	fb8fffbf 	.word	0xfb8fffbf

0800495c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800495c:	b5b0      	push	{r4, r5, r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2228      	movs	r2, #40	@ 0x28
 800496c:	5c9b      	ldrb	r3, [r3, r2]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <HAL_RTC_SetTime+0x1a>
 8004972:	2302      	movs	r3, #2
 8004974:	e092      	b.n	8004a9c <HAL_RTC_SetTime+0x140>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2228      	movs	r2, #40	@ 0x28
 800497a:	2101      	movs	r1, #1
 800497c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2229      	movs	r2, #41	@ 0x29
 8004982:	2102      	movs	r1, #2
 8004984:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	22ca      	movs	r2, #202	@ 0xca
 800498c:	625a      	str	r2, [r3, #36]	@ 0x24
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2253      	movs	r2, #83	@ 0x53
 8004994:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004996:	2513      	movs	r5, #19
 8004998:	197c      	adds	r4, r7, r5
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	0018      	movs	r0, r3
 800499e:	f000 fc2b 	bl	80051f8 <RTC_EnterInitMode>
 80049a2:	0003      	movs	r3, r0
 80049a4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80049a6:	197b      	adds	r3, r7, r5
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d162      	bne.n	8004a74 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d125      	bne.n	8004a00 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	2240      	movs	r2, #64	@ 0x40
 80049bc:	4013      	ands	r3, r2
 80049be:	d102      	bne.n	80049c6 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2200      	movs	r2, #0
 80049c4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	0018      	movs	r0, r3
 80049cc:	f000 fc9a 	bl	8005304 <RTC_ByteToBcd2>
 80049d0:	0003      	movs	r3, r0
 80049d2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	785b      	ldrb	r3, [r3, #1]
 80049d8:	0018      	movs	r0, r3
 80049da:	f000 fc93 	bl	8005304 <RTC_ByteToBcd2>
 80049de:	0003      	movs	r3, r0
 80049e0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049e2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	789b      	ldrb	r3, [r3, #2]
 80049e8:	0018      	movs	r0, r3
 80049ea:	f000 fc8b 	bl	8005304 <RTC_ByteToBcd2>
 80049ee:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049f0:	0022      	movs	r2, r4
 80049f2:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	78db      	ldrb	r3, [r3, #3]
 80049f8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]
 80049fe:	e017      	b.n	8004a30 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	2240      	movs	r2, #64	@ 0x40
 8004a08:	4013      	ands	r3, r2
 8004a0a:	d102      	bne.n	8004a12 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	785b      	ldrb	r3, [r3, #1]
 8004a1c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a1e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a24:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	78db      	ldrb	r3, [r3, #3]
 8004a2a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	491b      	ldr	r1, [pc, #108]	@ (8004aa4 <HAL_RTC_SetTime+0x148>)
 8004a38:	400a      	ands	r2, r1
 8004a3a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4918      	ldr	r1, [pc, #96]	@ (8004aa8 <HAL_RTC_SetTime+0x14c>)
 8004a48:	400a      	ands	r2, r1
 8004a4a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6999      	ldr	r1, [r3, #24]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004a64:	2313      	movs	r3, #19
 8004a66:	18fc      	adds	r4, r7, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f000 fc06 	bl	800527c <RTC_ExitInitMode>
 8004a70:	0003      	movs	r3, r0
 8004a72:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	22ff      	movs	r2, #255	@ 0xff
 8004a7a:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8004a7c:	2313      	movs	r3, #19
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d103      	bne.n	8004a8e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2229      	movs	r2, #41	@ 0x29
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2228      	movs	r2, #40	@ 0x28
 8004a92:	2100      	movs	r1, #0
 8004a94:	5499      	strb	r1, [r3, r2]

  return status;
 8004a96:	2313      	movs	r3, #19
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	781b      	ldrb	r3, [r3, #0]
}
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	b006      	add	sp, #24
 8004aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8004aa4:	007f7f7f 	.word	0x007f7f7f
 8004aa8:	fffbffff 	.word	0xfffbffff

08004aac <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	045b      	lsls	r3, r3, #17
 8004aca:	0c5a      	lsrs	r2, r3, #17
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a22      	ldr	r2, [pc, #136]	@ (8004b60 <HAL_RTC_GetTime+0xb4>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	0c1b      	lsrs	r3, r3, #16
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	223f      	movs	r2, #63	@ 0x3f
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	0a1b      	lsrs	r3, r3, #8
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	227f      	movs	r2, #127	@ 0x7f
 8004af4:	4013      	ands	r3, r2
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	227f      	movs	r2, #127	@ 0x7f
 8004b02:	4013      	ands	r3, r2
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	0d9b      	lsrs	r3, r3, #22
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2201      	movs	r2, #1
 8004b12:	4013      	ands	r3, r2
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d11a      	bne.n	8004b56 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	0018      	movs	r0, r3
 8004b26:	f000 fc15 	bl	8005354 <RTC_Bcd2ToByte>
 8004b2a:	0003      	movs	r3, r0
 8004b2c:	001a      	movs	r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	785b      	ldrb	r3, [r3, #1]
 8004b36:	0018      	movs	r0, r3
 8004b38:	f000 fc0c 	bl	8005354 <RTC_Bcd2ToByte>
 8004b3c:	0003      	movs	r3, r0
 8004b3e:	001a      	movs	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	789b      	ldrb	r3, [r3, #2]
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f000 fc03 	bl	8005354 <RTC_Bcd2ToByte>
 8004b4e:	0003      	movs	r3, r0
 8004b50:	001a      	movs	r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	0018      	movs	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	b006      	add	sp, #24
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	007f7f7f 	.word	0x007f7f7f

08004b64 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b64:	b5b0      	push	{r4, r5, r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2228      	movs	r2, #40	@ 0x28
 8004b74:	5c9b      	ldrb	r3, [r3, r2]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_RTC_SetDate+0x1a>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e07e      	b.n	8004c7c <HAL_RTC_SetDate+0x118>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2228      	movs	r2, #40	@ 0x28
 8004b82:	2101      	movs	r1, #1
 8004b84:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2229      	movs	r2, #41	@ 0x29
 8004b8a:	2102      	movs	r1, #2
 8004b8c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10e      	bne.n	8004bb2 <HAL_RTC_SetDate+0x4e>
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	785b      	ldrb	r3, [r3, #1]
 8004b98:	001a      	movs	r2, r3
 8004b9a:	2310      	movs	r3, #16
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d008      	beq.n	8004bb2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	785b      	ldrb	r3, [r3, #1]
 8004ba4:	2210      	movs	r2, #16
 8004ba6:	4393      	bics	r3, r2
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	330a      	adds	r3, #10
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d11c      	bne.n	8004bf2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	78db      	ldrb	r3, [r3, #3]
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f000 fba1 	bl	8005304 <RTC_ByteToBcd2>
 8004bc2:	0003      	movs	r3, r0
 8004bc4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	785b      	ldrb	r3, [r3, #1]
 8004bca:	0018      	movs	r0, r3
 8004bcc:	f000 fb9a 	bl	8005304 <RTC_ByteToBcd2>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004bd4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	789b      	ldrb	r3, [r3, #2]
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f000 fb92 	bl	8005304 <RTC_ByteToBcd2>
 8004be0:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004be2:	0022      	movs	r2, r4
 8004be4:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	e00e      	b.n	8004c10 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	78db      	ldrb	r3, [r3, #3]
 8004bf6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	785b      	ldrb	r3, [r3, #1]
 8004bfc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004bfe:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004c04:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	22ca      	movs	r2, #202	@ 0xca
 8004c16:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2253      	movs	r2, #83	@ 0x53
 8004c1e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c20:	2513      	movs	r5, #19
 8004c22:	197c      	adds	r4, r7, r5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	0018      	movs	r0, r3
 8004c28:	f000 fae6 	bl	80051f8 <RTC_EnterInitMode>
 8004c2c:	0003      	movs	r3, r0
 8004c2e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004c30:	0028      	movs	r0, r5
 8004c32:	183b      	adds	r3, r7, r0
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10c      	bne.n	8004c54 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4910      	ldr	r1, [pc, #64]	@ (8004c84 <HAL_RTC_SetDate+0x120>)
 8004c42:	400a      	ands	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c46:	183c      	adds	r4, r7, r0
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f000 fb16 	bl	800527c <RTC_ExitInitMode>
 8004c50:	0003      	movs	r3, r0
 8004c52:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	22ff      	movs	r2, #255	@ 0xff
 8004c5a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004c5c:	2313      	movs	r3, #19
 8004c5e:	18fb      	adds	r3, r7, r3
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d103      	bne.n	8004c6e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2229      	movs	r2, #41	@ 0x29
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2228      	movs	r2, #40	@ 0x28
 8004c72:	2100      	movs	r1, #0
 8004c74:	5499      	strb	r1, [r3, r2]

  return status;
 8004c76:	2313      	movs	r3, #19
 8004c78:	18fb      	adds	r3, r7, r3
 8004c7a:	781b      	ldrb	r3, [r3, #0]
}
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b006      	add	sp, #24
 8004c82:	bdb0      	pop	{r4, r5, r7, pc}
 8004c84:	00ffff3f 	.word	0x00ffff3f

08004c88 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	4a21      	ldr	r2, [pc, #132]	@ (8004d20 <HAL_RTC_GetDate+0x98>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	0c1b      	lsrs	r3, r3, #16
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	0a1b      	lsrs	r3, r3, #8
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	221f      	movs	r2, #31
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	223f      	movs	r2, #63	@ 0x3f
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	0b5b      	lsrs	r3, r3, #13
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2207      	movs	r2, #7
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d11a      	bne.n	8004d14 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	78db      	ldrb	r3, [r3, #3]
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f000 fb36 	bl	8005354 <RTC_Bcd2ToByte>
 8004ce8:	0003      	movs	r3, r0
 8004cea:	001a      	movs	r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	785b      	ldrb	r3, [r3, #1]
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f000 fb2d 	bl	8005354 <RTC_Bcd2ToByte>
 8004cfa:	0003      	movs	r3, r0
 8004cfc:	001a      	movs	r2, r3
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	789b      	ldrb	r3, [r3, #2]
 8004d06:	0018      	movs	r0, r3
 8004d08:	f000 fb24 	bl	8005354 <RTC_Bcd2ToByte>
 8004d0c:	0003      	movs	r3, r0
 8004d0e:	001a      	movs	r2, r3
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	0018      	movs	r0, r3
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	b006      	add	sp, #24
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	46c0      	nop			@ (mov r8, r8)
 8004d20:	00ffff3f 	.word	0x00ffff3f

08004d24 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004d24:	b590      	push	{r4, r7, lr}
 8004d26:	b089      	sub	sp, #36	@ 0x24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2228      	movs	r2, #40	@ 0x28
 8004d34:	5c9b      	ldrb	r3, [r3, r2]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_RTC_SetAlarm_IT+0x1a>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e127      	b.n	8004f8e <HAL_RTC_SetAlarm_IT+0x26a>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2228      	movs	r2, #40	@ 0x28
 8004d42:	2101      	movs	r1, #1
 8004d44:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2229      	movs	r2, #41	@ 0x29
 8004d4a:	2102      	movs	r1, #2
 8004d4c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d136      	bne.n	8004dc2 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	2240      	movs	r2, #64	@ 0x40
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	d102      	bne.n	8004d66 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2200      	movs	r2, #0
 8004d64:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f000 faca 	bl	8005304 <RTC_ByteToBcd2>
 8004d70:	0003      	movs	r3, r0
 8004d72:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	785b      	ldrb	r3, [r3, #1]
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f000 fac3 	bl	8005304 <RTC_ByteToBcd2>
 8004d7e:	0003      	movs	r3, r0
 8004d80:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d82:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	789b      	ldrb	r3, [r3, #2]
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f000 fabb 	bl	8005304 <RTC_ByteToBcd2>
 8004d8e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004d90:	0022      	movs	r2, r4
 8004d92:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	78db      	ldrb	r3, [r3, #3]
 8004d98:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2220      	movs	r2, #32
 8004da2:	5c9b      	ldrb	r3, [r3, r2]
 8004da4:	0018      	movs	r0, r3
 8004da6:	f000 faad 	bl	8005304 <RTC_ByteToBcd2>
 8004daa:	0003      	movs	r3, r0
 8004dac:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004dae:	0022      	movs	r2, r4
 8004db0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004db6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	61fb      	str	r3, [r7, #28]
 8004dc0:	e022      	b.n	8004e08 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	2240      	movs	r2, #64	@ 0x40
 8004dca:	4013      	ands	r3, r2
 8004dcc:	d102      	bne.n	8004dd4 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	785b      	ldrb	r3, [r3, #1]
 8004dde:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004de0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004de6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	78db      	ldrb	r3, [r3, #3]
 8004dec:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004dee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2120      	movs	r1, #32
 8004df4:	5c5b      	ldrb	r3, [r3, r1]
 8004df6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004df8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004dfe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e04:	4313      	orrs	r3, r2
 8004e06:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	22ca      	movs	r2, #202	@ 0xca
 8004e1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2253      	movs	r2, #83	@ 0x53
 8004e22:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e28:	2380      	movs	r3, #128	@ 0x80
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d14c      	bne.n	8004eca <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4957      	ldr	r1, [pc, #348]	@ (8004f98 <HAL_RTC_SetAlarm_IT+0x274>)
 8004e3c:	400a      	ands	r2, r1
 8004e3e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004e50:	f7fd fcd4 	bl	80027fc <HAL_GetTick>
 8004e54:	0003      	movs	r3, r0
 8004e56:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004e58:	e016      	b.n	8004e88 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e5a:	f7fd fccf 	bl	80027fc <HAL_GetTick>
 8004e5e:	0002      	movs	r2, r0
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	1ad2      	subs	r2, r2, r3
 8004e64:	23fa      	movs	r3, #250	@ 0xfa
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d90d      	bls.n	8004e88 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	22ff      	movs	r2, #255	@ 0xff
 8004e72:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2229      	movs	r2, #41	@ 0x29
 8004e78:	2103      	movs	r1, #3
 8004e7a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2228      	movs	r2, #40	@ 0x28
 8004e80:	2100      	movs	r1, #0
 8004e82:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e082      	b.n	8004f8e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	4013      	ands	r3, r2
 8004e92:	d0e2      	beq.n	8004e5a <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699a      	ldr	r2, [r3, #24]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2180      	movs	r1, #128	@ 0x80
 8004eb0:	0049      	lsls	r1, r1, #1
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	699a      	ldr	r2, [r3, #24]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2180      	movs	r1, #128	@ 0x80
 8004ec2:	0149      	lsls	r1, r1, #5
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	619a      	str	r2, [r3, #24]
 8004ec8:	e04b      	b.n	8004f62 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	699a      	ldr	r2, [r3, #24]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4931      	ldr	r1, [pc, #196]	@ (8004f9c <HAL_RTC_SetAlarm_IT+0x278>)
 8004ed6:	400a      	ands	r2, r1
 8004ed8:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2102      	movs	r1, #2
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004eea:	f7fd fc87 	bl	80027fc <HAL_GetTick>
 8004eee:	0003      	movs	r3, r0
 8004ef0:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004ef2:	e016      	b.n	8004f22 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004ef4:	f7fd fc82 	bl	80027fc <HAL_GetTick>
 8004ef8:	0002      	movs	r2, r0
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	1ad2      	subs	r2, r2, r3
 8004efe:	23fa      	movs	r3, #250	@ 0xfa
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d90d      	bls.n	8004f22 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	22ff      	movs	r2, #255	@ 0xff
 8004f0c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2229      	movs	r2, #41	@ 0x29
 8004f12:	2103      	movs	r1, #3
 8004f14:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2228      	movs	r2, #40	@ 0x28
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e035      	b.n	8004f8e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	d0e2      	beq.n	8004ef4 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699a      	ldr	r2, [r3, #24]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2180      	movs	r1, #128	@ 0x80
 8004f4a:	0089      	lsls	r1, r1, #2
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2180      	movs	r1, #128	@ 0x80
 8004f5c:	0189      	lsls	r1, r1, #6
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004f62:	4a0f      	ldr	r2, [pc, #60]	@ (8004fa0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004f64:	2380      	movs	r3, #128	@ 0x80
 8004f66:	58d3      	ldr	r3, [r2, r3]
 8004f68:	490d      	ldr	r1, [pc, #52]	@ (8004fa0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004f6a:	2280      	movs	r2, #128	@ 0x80
 8004f6c:	0312      	lsls	r2, r2, #12
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	2280      	movs	r2, #128	@ 0x80
 8004f72:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	22ff      	movs	r2, #255	@ 0xff
 8004f7a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2229      	movs	r2, #41	@ 0x29
 8004f80:	2101      	movs	r1, #1
 8004f82:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2228      	movs	r2, #40	@ 0x28
 8004f88:	2100      	movs	r1, #0
 8004f8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	0018      	movs	r0, r3
 8004f90:	46bd      	mov	sp, r7
 8004f92:	b009      	add	sp, #36	@ 0x24
 8004f94:	bd90      	pop	{r4, r7, pc}
 8004f96:	46c0      	nop			@ (mov r8, r8)
 8004f98:	fffffeff 	.word	0xfffffeff
 8004f9c:	fffffdff 	.word	0xfffffdff
 8004fa0:	40021800 	.word	0x40021800

08004fa4 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	2380      	movs	r3, #128	@ 0x80
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d144      	bne.n	8005046 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2280      	movs	r2, #128	@ 0x80
 8004fc0:	0052      	lsls	r2, r2, #1
 8004fc2:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd2:	045b      	lsls	r3, r3, #17
 8004fd4:	0c5b      	lsrs	r3, r3, #17
 8004fd6:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	0c1b      	lsrs	r3, r3, #16
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	223f      	movs	r2, #63	@ 0x3f
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	0a1b      	lsrs	r3, r3, #8
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	227f      	movs	r2, #127	@ 0x7f
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	227f      	movs	r2, #127	@ 0x7f
 8004ffe:	4013      	ands	r3, r2
 8005000:	b2da      	uxtb	r2, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	0d9b      	lsrs	r3, r3, #22
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2201      	movs	r2, #1
 800500e:	4013      	ands	r3, r2
 8005010:	b2da      	uxtb	r2, r3
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	0e1b      	lsrs	r3, r3, #24
 8005020:	b2db      	uxtb	r3, r3
 8005022:	223f      	movs	r2, #63	@ 0x3f
 8005024:	4013      	ands	r3, r2
 8005026:	b2d9      	uxtb	r1, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2220      	movs	r2, #32
 800502c:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	2380      	movs	r3, #128	@ 0x80
 8005032:	05db      	lsls	r3, r3, #23
 8005034:	401a      	ands	r2, r3
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	4a3b      	ldr	r2, [pc, #236]	@ (800512c <HAL_RTC_GetAlarm+0x188>)
 800503e:	401a      	ands	r2, r3
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	615a      	str	r2, [r3, #20]
 8005044:	e043      	b.n	80050ce <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2280      	movs	r2, #128	@ 0x80
 800504a:	0092      	lsls	r2, r2, #2
 800504c:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005054:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800505c:	045b      	lsls	r3, r3, #17
 800505e:	0c5b      	lsrs	r3, r3, #17
 8005060:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	0c1b      	lsrs	r3, r3, #16
 8005066:	b2db      	uxtb	r3, r3
 8005068:	223f      	movs	r2, #63	@ 0x3f
 800506a:	4013      	ands	r3, r2
 800506c:	b2da      	uxtb	r2, r3
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	0a1b      	lsrs	r3, r3, #8
 8005076:	b2db      	uxtb	r3, r3
 8005078:	227f      	movs	r2, #127	@ 0x7f
 800507a:	4013      	ands	r3, r2
 800507c:	b2da      	uxtb	r2, r3
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	227f      	movs	r2, #127	@ 0x7f
 8005088:	4013      	ands	r3, r2
 800508a:	b2da      	uxtb	r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	0d9b      	lsrs	r3, r3, #22
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2201      	movs	r2, #1
 8005098:	4013      	ands	r3, r2
 800509a:	b2da      	uxtb	r2, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	0e1b      	lsrs	r3, r3, #24
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	223f      	movs	r2, #63	@ 0x3f
 80050ae:	4013      	ands	r3, r2
 80050b0:	b2d9      	uxtb	r1, r3
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2220      	movs	r2, #32
 80050b6:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	2380      	movs	r3, #128	@ 0x80
 80050bc:	05db      	lsls	r3, r3, #23
 80050be:	401a      	ands	r2, r3
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	4a19      	ldr	r2, [pc, #100]	@ (800512c <HAL_RTC_GetAlarm+0x188>)
 80050c8:	401a      	ands	r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d125      	bne.n	8005120 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	0018      	movs	r0, r3
 80050da:	f000 f93b 	bl	8005354 <RTC_Bcd2ToByte>
 80050de:	0003      	movs	r3, r0
 80050e0:	001a      	movs	r2, r3
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	785b      	ldrb	r3, [r3, #1]
 80050ea:	0018      	movs	r0, r3
 80050ec:	f000 f932 	bl	8005354 <RTC_Bcd2ToByte>
 80050f0:	0003      	movs	r3, r0
 80050f2:	001a      	movs	r2, r3
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	789b      	ldrb	r3, [r3, #2]
 80050fc:	0018      	movs	r0, r3
 80050fe:	f000 f929 	bl	8005354 <RTC_Bcd2ToByte>
 8005102:	0003      	movs	r3, r0
 8005104:	001a      	movs	r2, r3
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2220      	movs	r2, #32
 800510e:	5c9b      	ldrb	r3, [r3, r2]
 8005110:	0018      	movs	r0, r3
 8005112:	f000 f91f 	bl	8005354 <RTC_Bcd2ToByte>
 8005116:	0003      	movs	r3, r0
 8005118:	0019      	movs	r1, r3
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2220      	movs	r2, #32
 800511e:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	0018      	movs	r0, r3
 8005124:	46bd      	mov	sp, r7
 8005126:	b006      	add	sp, #24
 8005128:	bd80      	pop	{r7, pc}
 800512a:	46c0      	nop			@ (mov r8, r8)
 800512c:	80808080 	.word	0x80808080

08005130 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699a      	ldr	r2, [r3, #24]
 800513e:	2380      	movs	r3, #128	@ 0x80
 8005140:	015b      	lsls	r3, r3, #5
 8005142:	4013      	ands	r3, r2
 8005144:	d011      	beq.n	800516a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800514c:	2201      	movs	r2, #1
 800514e:	4013      	ands	r3, r2
 8005150:	d00b      	beq.n	800516a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2101      	movs	r1, #1
 800515e:	430a      	orrs	r2, r1
 8005160:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	0018      	movs	r0, r3
 8005166:	f7fc f9b3 	bl	80014d0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699a      	ldr	r2, [r3, #24]
 8005170:	2380      	movs	r3, #128	@ 0x80
 8005172:	019b      	lsls	r3, r3, #6
 8005174:	4013      	ands	r3, r2
 8005176:	d011      	beq.n	800519c <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800517e:	2202      	movs	r2, #2
 8005180:	4013      	ands	r3, r2
 8005182:	d00b      	beq.n	800519c <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2102      	movs	r1, #2
 8005190:	430a      	orrs	r2, r1
 8005192:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	0018      	movs	r0, r3
 8005198:	f000 f9a4 	bl	80054e4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2229      	movs	r2, #41	@ 0x29
 80051a0:	2101      	movs	r1, #1
 80051a2:	5499      	strb	r1, [r3, r2]
}
 80051a4:	46c0      	nop			@ (mov r8, r8)
 80051a6:	46bd      	mov	sp, r7
 80051a8:	b002      	add	sp, #8
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a0e      	ldr	r2, [pc, #56]	@ (80051f4 <HAL_RTC_WaitForSynchro+0x48>)
 80051ba:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80051bc:	f7fd fb1e 	bl	80027fc <HAL_GetTick>
 80051c0:	0003      	movs	r3, r0
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80051c4:	e00a      	b.n	80051dc <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80051c6:	f7fd fb19 	bl	80027fc <HAL_GetTick>
 80051ca:	0002      	movs	r2, r0
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	1ad2      	subs	r2, r2, r3
 80051d0:	23fa      	movs	r3, #250	@ 0xfa
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d901      	bls.n	80051dc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e006      	b.n	80051ea <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	2220      	movs	r2, #32
 80051e4:	4013      	ands	r3, r2
 80051e6:	d0ee      	beq.n	80051c6 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	0018      	movs	r0, r3
 80051ec:	46bd      	mov	sp, r7
 80051ee:	b004      	add	sp, #16
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	46c0      	nop			@ (mov r8, r8)
 80051f4:	0001005f 	.word	0x0001005f

080051f8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005200:	230f      	movs	r3, #15
 8005202:	18fb      	adds	r3, r7, r3
 8005204:	2200      	movs	r2, #0
 8005206:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	2240      	movs	r2, #64	@ 0x40
 8005210:	4013      	ands	r3, r2
 8005212:	d12c      	bne.n	800526e <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2180      	movs	r1, #128	@ 0x80
 8005220:	430a      	orrs	r2, r1
 8005222:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005224:	f7fd faea 	bl	80027fc <HAL_GetTick>
 8005228:	0003      	movs	r3, r0
 800522a:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800522c:	e014      	b.n	8005258 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800522e:	f7fd fae5 	bl	80027fc <HAL_GetTick>
 8005232:	0002      	movs	r2, r0
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	1ad2      	subs	r2, r2, r3
 8005238:	200f      	movs	r0, #15
 800523a:	183b      	adds	r3, r7, r0
 800523c:	1839      	adds	r1, r7, r0
 800523e:	7809      	ldrb	r1, [r1, #0]
 8005240:	7019      	strb	r1, [r3, #0]
 8005242:	23fa      	movs	r3, #250	@ 0xfa
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	429a      	cmp	r2, r3
 8005248:	d906      	bls.n	8005258 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800524a:	183b      	adds	r3, r7, r0
 800524c:	2203      	movs	r2, #3
 800524e:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2229      	movs	r2, #41	@ 0x29
 8005254:	2103      	movs	r1, #3
 8005256:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	2240      	movs	r2, #64	@ 0x40
 8005260:	4013      	ands	r3, r2
 8005262:	d104      	bne.n	800526e <RTC_EnterInitMode+0x76>
 8005264:	230f      	movs	r3, #15
 8005266:	18fb      	adds	r3, r7, r3
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b03      	cmp	r3, #3
 800526c:	d1df      	bne.n	800522e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800526e:	230f      	movs	r3, #15
 8005270:	18fb      	adds	r3, r7, r3
 8005272:	781b      	ldrb	r3, [r3, #0]
}
 8005274:	0018      	movs	r0, r3
 8005276:	46bd      	mov	sp, r7
 8005278:	b004      	add	sp, #16
 800527a:	bd80      	pop	{r7, pc}

0800527c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800527c:	b590      	push	{r4, r7, lr}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005284:	240f      	movs	r4, #15
 8005286:	193b      	adds	r3, r7, r4
 8005288:	2200      	movs	r2, #0
 800528a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800528c:	4b1c      	ldr	r3, [pc, #112]	@ (8005300 <RTC_ExitInitMode+0x84>)
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	4b1b      	ldr	r3, [pc, #108]	@ (8005300 <RTC_ExitInitMode+0x84>)
 8005292:	2180      	movs	r1, #128	@ 0x80
 8005294:	438a      	bics	r2, r1
 8005296:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005298:	4b19      	ldr	r3, [pc, #100]	@ (8005300 <RTC_ExitInitMode+0x84>)
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	2220      	movs	r2, #32
 800529e:	4013      	ands	r3, r2
 80052a0:	d10d      	bne.n	80052be <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	0018      	movs	r0, r3
 80052a6:	f7ff ff81 	bl	80051ac <HAL_RTC_WaitForSynchro>
 80052aa:	1e03      	subs	r3, r0, #0
 80052ac:	d021      	beq.n	80052f2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2229      	movs	r2, #41	@ 0x29
 80052b2:	2103      	movs	r1, #3
 80052b4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80052b6:	193b      	adds	r3, r7, r4
 80052b8:	2203      	movs	r2, #3
 80052ba:	701a      	strb	r2, [r3, #0]
 80052bc:	e019      	b.n	80052f2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80052be:	4b10      	ldr	r3, [pc, #64]	@ (8005300 <RTC_ExitInitMode+0x84>)
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005300 <RTC_ExitInitMode+0x84>)
 80052c4:	2120      	movs	r1, #32
 80052c6:	438a      	bics	r2, r1
 80052c8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	0018      	movs	r0, r3
 80052ce:	f7ff ff6d 	bl	80051ac <HAL_RTC_WaitForSynchro>
 80052d2:	1e03      	subs	r3, r0, #0
 80052d4:	d007      	beq.n	80052e6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2229      	movs	r2, #41	@ 0x29
 80052da:	2103      	movs	r1, #3
 80052dc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80052de:	230f      	movs	r3, #15
 80052e0:	18fb      	adds	r3, r7, r3
 80052e2:	2203      	movs	r2, #3
 80052e4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80052e6:	4b06      	ldr	r3, [pc, #24]	@ (8005300 <RTC_ExitInitMode+0x84>)
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	4b05      	ldr	r3, [pc, #20]	@ (8005300 <RTC_ExitInitMode+0x84>)
 80052ec:	2120      	movs	r1, #32
 80052ee:	430a      	orrs	r2, r1
 80052f0:	619a      	str	r2, [r3, #24]
  }

  return status;
 80052f2:	230f      	movs	r3, #15
 80052f4:	18fb      	adds	r3, r7, r3
 80052f6:	781b      	ldrb	r3, [r3, #0]
}
 80052f8:	0018      	movs	r0, r3
 80052fa:	46bd      	mov	sp, r7
 80052fc:	b005      	add	sp, #20
 80052fe:	bd90      	pop	{r4, r7, pc}
 8005300:	40002800 	.word	0x40002800

08005304 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	0002      	movs	r2, r0
 800530c:	1dfb      	adds	r3, r7, #7
 800530e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005314:	230b      	movs	r3, #11
 8005316:	18fb      	adds	r3, r7, r3
 8005318:	1dfa      	adds	r2, r7, #7
 800531a:	7812      	ldrb	r2, [r2, #0]
 800531c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800531e:	e008      	b.n	8005332 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3301      	adds	r3, #1
 8005324:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005326:	220b      	movs	r2, #11
 8005328:	18bb      	adds	r3, r7, r2
 800532a:	18ba      	adds	r2, r7, r2
 800532c:	7812      	ldrb	r2, [r2, #0]
 800532e:	3a0a      	subs	r2, #10
 8005330:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005332:	210b      	movs	r1, #11
 8005334:	187b      	adds	r3, r7, r1
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b09      	cmp	r3, #9
 800533a:	d8f1      	bhi.n	8005320 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	b2da      	uxtb	r2, r3
 8005344:	187b      	adds	r3, r7, r1
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	4313      	orrs	r3, r2
 800534a:	b2db      	uxtb	r3, r3
}
 800534c:	0018      	movs	r0, r3
 800534e:	46bd      	mov	sp, r7
 8005350:	b004      	add	sp, #16
 8005352:	bd80      	pop	{r7, pc}

08005354 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	0002      	movs	r2, r0
 800535c:	1dfb      	adds	r3, r7, #7
 800535e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005360:	1dfb      	adds	r3, r7, #7
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	091b      	lsrs	r3, r3, #4
 8005366:	b2db      	uxtb	r3, r3
 8005368:	001a      	movs	r2, r3
 800536a:	0013      	movs	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	189b      	adds	r3, r3, r2
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	b2da      	uxtb	r2, r3
 8005378:	1dfb      	adds	r3, r7, #7
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	210f      	movs	r1, #15
 800537e:	400b      	ands	r3, r1
 8005380:	b2db      	uxtb	r3, r3
 8005382:	18d3      	adds	r3, r2, r3
 8005384:	b2db      	uxtb	r3, r3
}
 8005386:	0018      	movs	r0, r3
 8005388:	46bd      	mov	sp, r7
 800538a:	b004      	add	sp, #16
 800538c:	bd80      	pop	{r7, pc}

0800538e <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b086      	sub	sp, #24
 8005392:	af00      	add	r7, sp, #0
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	607a      	str	r2, [r7, #4]
 800539a:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2228      	movs	r2, #40	@ 0x28
 80053a0:	5c9b      	ldrb	r3, [r3, r2]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_RTCEx_SetSmoothCalib+0x1c>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e04f      	b.n	800544a <HAL_RTCEx_SetSmoothCalib+0xbc>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2228      	movs	r2, #40	@ 0x28
 80053ae:	2101      	movs	r1, #1
 80053b0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2229      	movs	r2, #41	@ 0x29
 80053b6:	2102      	movs	r1, #2
 80053b8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	22ca      	movs	r2, #202	@ 0xca
 80053c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2253      	movs	r2, #83	@ 0x53
 80053c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68da      	ldr	r2, [r3, #12]
 80053d0:	2380      	movs	r3, #128	@ 0x80
 80053d2:	025b      	lsls	r3, r3, #9
 80053d4:	4013      	ands	r3, r2
 80053d6:	d022      	beq.n	800541e <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 80053d8:	f7fd fa10 	bl	80027fc <HAL_GetTick>
 80053dc:	0003      	movs	r3, r0
 80053de:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 80053e0:	e016      	b.n	8005410 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80053e2:	f7fd fa0b 	bl	80027fc <HAL_GetTick>
 80053e6:	0002      	movs	r2, r0
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	1ad2      	subs	r2, r2, r3
 80053ec:	23fa      	movs	r3, #250	@ 0xfa
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d90d      	bls.n	8005410 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	22ff      	movs	r2, #255	@ 0xff
 80053fa:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2229      	movs	r2, #41	@ 0x29
 8005400:	2103      	movs	r1, #3
 8005402:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2228      	movs	r2, #40	@ 0x28
 8005408:	2100      	movs	r1, #0
 800540a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e01c      	b.n	800544a <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	2380      	movs	r3, #128	@ 0x80
 8005418:	025b      	lsls	r3, r3, #9
 800541a:	4013      	ands	r3, r2
 800541c:	d1e1      	bne.n	80053e2 <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	431a      	orrs	r2, r3
 8005424:	0011      	movs	r1, r2
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	22ff      	movs	r2, #255	@ 0xff
 8005436:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2229      	movs	r2, #41	@ 0x29
 800543c:	2101      	movs	r1, #1
 800543e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2228      	movs	r2, #40	@ 0x28
 8005444:	2100      	movs	r1, #0
 8005446:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	0018      	movs	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	b006      	add	sp, #24
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2228      	movs	r2, #40	@ 0x28
 8005462:	5c9b      	ldrb	r3, [r3, r2]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8005468:	2302      	movs	r3, #2
 800546a:	e035      	b.n	80054d8 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2228      	movs	r2, #40	@ 0x28
 8005470:	2101      	movs	r1, #1
 8005472:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2229      	movs	r2, #41	@ 0x29
 8005478:	2102      	movs	r1, #2
 800547a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	22ca      	movs	r2, #202	@ 0xca
 8005482:	625a      	str	r2, [r3, #36]	@ 0x24
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2253      	movs	r2, #83	@ 0x53
 800548a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4912      	ldr	r1, [pc, #72]	@ (80054e0 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8005498:	400a      	ands	r2, r1
 800549a:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6999      	ldr	r1, [r3, #24]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2180      	movs	r1, #128	@ 0x80
 80054b8:	0409      	lsls	r1, r1, #16
 80054ba:	430a      	orrs	r2, r1
 80054bc:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	22ff      	movs	r2, #255	@ 0xff
 80054c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2229      	movs	r2, #41	@ 0x29
 80054ca:	2101      	movs	r1, #1
 80054cc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2228      	movs	r2, #40	@ 0x28
 80054d2:	2100      	movs	r1, #0
 80054d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	0018      	movs	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	b002      	add	sp, #8
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	fff7ffff 	.word	0xfff7ffff

080054e4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80054ec:	46c0      	nop			@ (mov r8, r8)
 80054ee:	46bd      	mov	sp, r7
 80054f0:	b002      	add	sp, #8
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	001a      	movs	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	18d3      	adds	r3, r2, r3
 800550c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	3301      	adds	r3, #1
 8005512:	33ff      	adds	r3, #255	@ 0xff
 8005514:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	18d3      	adds	r3, r2, r3
 800551e:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	601a      	str	r2, [r3, #0]
}
 8005526:	46c0      	nop			@ (mov r8, r8)
 8005528:	46bd      	mov	sp, r7
 800552a:	b006      	add	sp, #24
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b084      	sub	sp, #16
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	001a      	movs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	18d3      	adds	r3, r2, r3
 8005544:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3301      	adds	r3, #1
 800554a:	33ff      	adds	r3, #255	@ 0xff
 800554c:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	18d3      	adds	r3, r2, r3
 8005556:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	681b      	ldr	r3, [r3, #0]
}
 800555c:	0018      	movs	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	b004      	add	sp, #16
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e04a      	b.n	800560c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	223d      	movs	r2, #61	@ 0x3d
 800557a:	5c9b      	ldrb	r3, [r3, r2]
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d107      	bne.n	8005592 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	223c      	movs	r2, #60	@ 0x3c
 8005586:	2100      	movs	r1, #0
 8005588:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	0018      	movs	r0, r3
 800558e:	f7fc ff8b 	bl	80024a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	223d      	movs	r2, #61	@ 0x3d
 8005596:	2102      	movs	r1, #2
 8005598:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3304      	adds	r3, #4
 80055a2:	0019      	movs	r1, r3
 80055a4:	0010      	movs	r0, r2
 80055a6:	f000 fd0d 	bl	8005fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2248      	movs	r2, #72	@ 0x48
 80055ae:	2101      	movs	r1, #1
 80055b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	223e      	movs	r2, #62	@ 0x3e
 80055b6:	2101      	movs	r1, #1
 80055b8:	5499      	strb	r1, [r3, r2]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	223f      	movs	r2, #63	@ 0x3f
 80055be:	2101      	movs	r1, #1
 80055c0:	5499      	strb	r1, [r3, r2]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2240      	movs	r2, #64	@ 0x40
 80055c6:	2101      	movs	r1, #1
 80055c8:	5499      	strb	r1, [r3, r2]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2241      	movs	r2, #65	@ 0x41
 80055ce:	2101      	movs	r1, #1
 80055d0:	5499      	strb	r1, [r3, r2]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2242      	movs	r2, #66	@ 0x42
 80055d6:	2101      	movs	r1, #1
 80055d8:	5499      	strb	r1, [r3, r2]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2243      	movs	r2, #67	@ 0x43
 80055de:	2101      	movs	r1, #1
 80055e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2244      	movs	r2, #68	@ 0x44
 80055e6:	2101      	movs	r1, #1
 80055e8:	5499      	strb	r1, [r3, r2]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2245      	movs	r2, #69	@ 0x45
 80055ee:	2101      	movs	r1, #1
 80055f0:	5499      	strb	r1, [r3, r2]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2246      	movs	r2, #70	@ 0x46
 80055f6:	2101      	movs	r1, #1
 80055f8:	5499      	strb	r1, [r3, r2]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2247      	movs	r2, #71	@ 0x47
 80055fe:	2101      	movs	r1, #1
 8005600:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	223d      	movs	r2, #61	@ 0x3d
 8005606:	2101      	movs	r1, #1
 8005608:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	0018      	movs	r0, r3
 800560e:	46bd      	mov	sp, r7
 8005610:	b002      	add	sp, #8
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	223d      	movs	r2, #61	@ 0x3d
 8005620:	5c9b      	ldrb	r3, [r3, r2]
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b01      	cmp	r3, #1
 8005626:	d001      	beq.n	800562c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e035      	b.n	8005698 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	223d      	movs	r2, #61	@ 0x3d
 8005630:	2102      	movs	r1, #2
 8005632:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a19      	ldr	r2, [pc, #100]	@ (80056a0 <HAL_TIM_Base_Start+0x8c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00a      	beq.n	8005654 <HAL_TIM_Base_Start+0x40>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	2380      	movs	r3, #128	@ 0x80
 8005644:	05db      	lsls	r3, r3, #23
 8005646:	429a      	cmp	r2, r3
 8005648:	d004      	beq.n	8005654 <HAL_TIM_Base_Start+0x40>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a15      	ldr	r2, [pc, #84]	@ (80056a4 <HAL_TIM_Base_Start+0x90>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d116      	bne.n	8005682 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	4a13      	ldr	r2, [pc, #76]	@ (80056a8 <HAL_TIM_Base_Start+0x94>)
 800565c:	4013      	ands	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b06      	cmp	r3, #6
 8005664:	d016      	beq.n	8005694 <HAL_TIM_Base_Start+0x80>
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	2380      	movs	r3, #128	@ 0x80
 800566a:	025b      	lsls	r3, r3, #9
 800566c:	429a      	cmp	r2, r3
 800566e:	d011      	beq.n	8005694 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2101      	movs	r1, #1
 800567c:	430a      	orrs	r2, r1
 800567e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005680:	e008      	b.n	8005694 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2101      	movs	r1, #1
 800568e:	430a      	orrs	r2, r1
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	e000      	b.n	8005696 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005694:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	0018      	movs	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	b004      	add	sp, #16
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40012c00 	.word	0x40012c00
 80056a4:	40000400 	.word	0x40000400
 80056a8:	00010007 	.word	0x00010007

080056ac <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	4a0d      	ldr	r2, [pc, #52]	@ (80056f0 <HAL_TIM_Base_Stop+0x44>)
 80056bc:	4013      	ands	r3, r2
 80056be:	d10d      	bne.n	80056dc <HAL_TIM_Base_Stop+0x30>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	4a0b      	ldr	r2, [pc, #44]	@ (80056f4 <HAL_TIM_Base_Stop+0x48>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	d107      	bne.n	80056dc <HAL_TIM_Base_Stop+0x30>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2101      	movs	r1, #1
 80056d8:	438a      	bics	r2, r1
 80056da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	223d      	movs	r2, #61	@ 0x3d
 80056e0:	2101      	movs	r1, #1
 80056e2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	0018      	movs	r0, r3
 80056e8:	46bd      	mov	sp, r7
 80056ea:	b002      	add	sp, #8
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	46c0      	nop			@ (mov r8, r8)
 80056f0:	00001111 	.word	0x00001111
 80056f4:	00000444 	.word	0x00000444

080056f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	223d      	movs	r2, #61	@ 0x3d
 8005704:	5c9b      	ldrb	r3, [r3, r2]
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b01      	cmp	r3, #1
 800570a:	d001      	beq.n	8005710 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e03d      	b.n	800578c <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	223d      	movs	r2, #61	@ 0x3d
 8005714:	2102      	movs	r1, #2
 8005716:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2101      	movs	r1, #1
 8005724:	430a      	orrs	r2, r1
 8005726:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a19      	ldr	r2, [pc, #100]	@ (8005794 <HAL_TIM_Base_Start_IT+0x9c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00a      	beq.n	8005748 <HAL_TIM_Base_Start_IT+0x50>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	2380      	movs	r3, #128	@ 0x80
 8005738:	05db      	lsls	r3, r3, #23
 800573a:	429a      	cmp	r2, r3
 800573c:	d004      	beq.n	8005748 <HAL_TIM_Base_Start_IT+0x50>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a15      	ldr	r2, [pc, #84]	@ (8005798 <HAL_TIM_Base_Start_IT+0xa0>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d116      	bne.n	8005776 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	4a13      	ldr	r2, [pc, #76]	@ (800579c <HAL_TIM_Base_Start_IT+0xa4>)
 8005750:	4013      	ands	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b06      	cmp	r3, #6
 8005758:	d016      	beq.n	8005788 <HAL_TIM_Base_Start_IT+0x90>
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	2380      	movs	r3, #128	@ 0x80
 800575e:	025b      	lsls	r3, r3, #9
 8005760:	429a      	cmp	r2, r3
 8005762:	d011      	beq.n	8005788 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2101      	movs	r1, #1
 8005770:	430a      	orrs	r2, r1
 8005772:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005774:	e008      	b.n	8005788 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2101      	movs	r1, #1
 8005782:	430a      	orrs	r2, r1
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	e000      	b.n	800578a <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005788:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	0018      	movs	r0, r3
 800578e:	46bd      	mov	sp, r7
 8005790:	b004      	add	sp, #16
 8005792:	bd80      	pop	{r7, pc}
 8005794:	40012c00 	.word	0x40012c00
 8005798:	40000400 	.word	0x40000400
 800579c:	00010007 	.word	0x00010007

080057a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2101      	movs	r1, #1
 80057b4:	438a      	bics	r2, r1
 80057b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	4a0d      	ldr	r2, [pc, #52]	@ (80057f4 <HAL_TIM_Base_Stop_IT+0x54>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	d10d      	bne.n	80057e0 <HAL_TIM_Base_Stop_IT+0x40>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	4a0b      	ldr	r2, [pc, #44]	@ (80057f8 <HAL_TIM_Base_Stop_IT+0x58>)
 80057cc:	4013      	ands	r3, r2
 80057ce:	d107      	bne.n	80057e0 <HAL_TIM_Base_Stop_IT+0x40>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2101      	movs	r1, #1
 80057dc:	438a      	bics	r2, r1
 80057de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	223d      	movs	r2, #61	@ 0x3d
 80057e4:	2101      	movs	r1, #1
 80057e6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	0018      	movs	r0, r3
 80057ec:	46bd      	mov	sp, r7
 80057ee:	b002      	add	sp, #8
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	46c0      	nop			@ (mov r8, r8)
 80057f4:	00001111 	.word	0x00001111
 80057f8:	00000444 	.word	0x00000444

080057fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e04a      	b.n	80058a4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	223d      	movs	r2, #61	@ 0x3d
 8005812:	5c9b      	ldrb	r3, [r3, r2]
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d107      	bne.n	800582a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	223c      	movs	r2, #60	@ 0x3c
 800581e:	2100      	movs	r1, #0
 8005820:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	0018      	movs	r0, r3
 8005826:	f7fc fdf5 	bl	8002414 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	223d      	movs	r2, #61	@ 0x3d
 800582e:	2102      	movs	r1, #2
 8005830:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3304      	adds	r3, #4
 800583a:	0019      	movs	r1, r3
 800583c:	0010      	movs	r0, r2
 800583e:	f000 fbc1 	bl	8005fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2248      	movs	r2, #72	@ 0x48
 8005846:	2101      	movs	r1, #1
 8005848:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	223e      	movs	r2, #62	@ 0x3e
 800584e:	2101      	movs	r1, #1
 8005850:	5499      	strb	r1, [r3, r2]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	223f      	movs	r2, #63	@ 0x3f
 8005856:	2101      	movs	r1, #1
 8005858:	5499      	strb	r1, [r3, r2]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2240      	movs	r2, #64	@ 0x40
 800585e:	2101      	movs	r1, #1
 8005860:	5499      	strb	r1, [r3, r2]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2241      	movs	r2, #65	@ 0x41
 8005866:	2101      	movs	r1, #1
 8005868:	5499      	strb	r1, [r3, r2]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2242      	movs	r2, #66	@ 0x42
 800586e:	2101      	movs	r1, #1
 8005870:	5499      	strb	r1, [r3, r2]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2243      	movs	r2, #67	@ 0x43
 8005876:	2101      	movs	r1, #1
 8005878:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2244      	movs	r2, #68	@ 0x44
 800587e:	2101      	movs	r1, #1
 8005880:	5499      	strb	r1, [r3, r2]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2245      	movs	r2, #69	@ 0x45
 8005886:	2101      	movs	r1, #1
 8005888:	5499      	strb	r1, [r3, r2]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2246      	movs	r2, #70	@ 0x46
 800588e:	2101      	movs	r1, #1
 8005890:	5499      	strb	r1, [r3, r2]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2247      	movs	r2, #71	@ 0x47
 8005896:	2101      	movs	r1, #1
 8005898:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	223d      	movs	r2, #61	@ 0x3d
 800589e:	2101      	movs	r1, #1
 80058a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	0018      	movs	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b002      	add	sp, #8
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d108      	bne.n	80058ce <HAL_TIM_PWM_Start+0x22>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	223e      	movs	r2, #62	@ 0x3e
 80058c0:	5c9b      	ldrb	r3, [r3, r2]
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	1e5a      	subs	r2, r3, #1
 80058c8:	4193      	sbcs	r3, r2
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	e037      	b.n	800593e <HAL_TIM_PWM_Start+0x92>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d108      	bne.n	80058e6 <HAL_TIM_PWM_Start+0x3a>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	223f      	movs	r2, #63	@ 0x3f
 80058d8:	5c9b      	ldrb	r3, [r3, r2]
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	3b01      	subs	r3, #1
 80058de:	1e5a      	subs	r2, r3, #1
 80058e0:	4193      	sbcs	r3, r2
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	e02b      	b.n	800593e <HAL_TIM_PWM_Start+0x92>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d108      	bne.n	80058fe <HAL_TIM_PWM_Start+0x52>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2240      	movs	r2, #64	@ 0x40
 80058f0:	5c9b      	ldrb	r3, [r3, r2]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	1e5a      	subs	r2, r3, #1
 80058f8:	4193      	sbcs	r3, r2
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	e01f      	b.n	800593e <HAL_TIM_PWM_Start+0x92>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b0c      	cmp	r3, #12
 8005902:	d108      	bne.n	8005916 <HAL_TIM_PWM_Start+0x6a>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2241      	movs	r2, #65	@ 0x41
 8005908:	5c9b      	ldrb	r3, [r3, r2]
 800590a:	b2db      	uxtb	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	1e5a      	subs	r2, r3, #1
 8005910:	4193      	sbcs	r3, r2
 8005912:	b2db      	uxtb	r3, r3
 8005914:	e013      	b.n	800593e <HAL_TIM_PWM_Start+0x92>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b10      	cmp	r3, #16
 800591a:	d108      	bne.n	800592e <HAL_TIM_PWM_Start+0x82>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2242      	movs	r2, #66	@ 0x42
 8005920:	5c9b      	ldrb	r3, [r3, r2]
 8005922:	b2db      	uxtb	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	1e5a      	subs	r2, r3, #1
 8005928:	4193      	sbcs	r3, r2
 800592a:	b2db      	uxtb	r3, r3
 800592c:	e007      	b.n	800593e <HAL_TIM_PWM_Start+0x92>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2243      	movs	r2, #67	@ 0x43
 8005932:	5c9b      	ldrb	r3, [r3, r2]
 8005934:	b2db      	uxtb	r3, r3
 8005936:	3b01      	subs	r3, #1
 8005938:	1e5a      	subs	r2, r3, #1
 800593a:	4193      	sbcs	r3, r2
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e081      	b.n	8005a4a <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d104      	bne.n	8005956 <HAL_TIM_PWM_Start+0xaa>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	223e      	movs	r2, #62	@ 0x3e
 8005950:	2102      	movs	r1, #2
 8005952:	5499      	strb	r1, [r3, r2]
 8005954:	e023      	b.n	800599e <HAL_TIM_PWM_Start+0xf2>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b04      	cmp	r3, #4
 800595a:	d104      	bne.n	8005966 <HAL_TIM_PWM_Start+0xba>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	223f      	movs	r2, #63	@ 0x3f
 8005960:	2102      	movs	r1, #2
 8005962:	5499      	strb	r1, [r3, r2]
 8005964:	e01b      	b.n	800599e <HAL_TIM_PWM_Start+0xf2>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b08      	cmp	r3, #8
 800596a:	d104      	bne.n	8005976 <HAL_TIM_PWM_Start+0xca>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2240      	movs	r2, #64	@ 0x40
 8005970:	2102      	movs	r1, #2
 8005972:	5499      	strb	r1, [r3, r2]
 8005974:	e013      	b.n	800599e <HAL_TIM_PWM_Start+0xf2>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b0c      	cmp	r3, #12
 800597a:	d104      	bne.n	8005986 <HAL_TIM_PWM_Start+0xda>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2241      	movs	r2, #65	@ 0x41
 8005980:	2102      	movs	r1, #2
 8005982:	5499      	strb	r1, [r3, r2]
 8005984:	e00b      	b.n	800599e <HAL_TIM_PWM_Start+0xf2>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b10      	cmp	r3, #16
 800598a:	d104      	bne.n	8005996 <HAL_TIM_PWM_Start+0xea>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2242      	movs	r2, #66	@ 0x42
 8005990:	2102      	movs	r1, #2
 8005992:	5499      	strb	r1, [r3, r2]
 8005994:	e003      	b.n	800599e <HAL_TIM_PWM_Start+0xf2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2243      	movs	r2, #67	@ 0x43
 800599a:	2102      	movs	r1, #2
 800599c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6839      	ldr	r1, [r7, #0]
 80059a4:	2201      	movs	r2, #1
 80059a6:	0018      	movs	r0, r3
 80059a8:	f000 fe2c 	bl	8006604 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a28      	ldr	r2, [pc, #160]	@ (8005a54 <HAL_TIM_PWM_Start+0x1a8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d009      	beq.n	80059ca <HAL_TIM_PWM_Start+0x11e>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a27      	ldr	r2, [pc, #156]	@ (8005a58 <HAL_TIM_PWM_Start+0x1ac>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d004      	beq.n	80059ca <HAL_TIM_PWM_Start+0x11e>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a25      	ldr	r2, [pc, #148]	@ (8005a5c <HAL_TIM_PWM_Start+0x1b0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d101      	bne.n	80059ce <HAL_TIM_PWM_Start+0x122>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e000      	b.n	80059d0 <HAL_TIM_PWM_Start+0x124>
 80059ce:	2300      	movs	r3, #0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2180      	movs	r1, #128	@ 0x80
 80059e0:	0209      	lsls	r1, r1, #8
 80059e2:	430a      	orrs	r2, r1
 80059e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005a54 <HAL_TIM_PWM_Start+0x1a8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00a      	beq.n	8005a06 <HAL_TIM_PWM_Start+0x15a>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	2380      	movs	r3, #128	@ 0x80
 80059f6:	05db      	lsls	r3, r3, #23
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d004      	beq.n	8005a06 <HAL_TIM_PWM_Start+0x15a>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a17      	ldr	r2, [pc, #92]	@ (8005a60 <HAL_TIM_PWM_Start+0x1b4>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d116      	bne.n	8005a34 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	4a15      	ldr	r2, [pc, #84]	@ (8005a64 <HAL_TIM_PWM_Start+0x1b8>)
 8005a0e:	4013      	ands	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b06      	cmp	r3, #6
 8005a16:	d016      	beq.n	8005a46 <HAL_TIM_PWM_Start+0x19a>
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	2380      	movs	r3, #128	@ 0x80
 8005a1c:	025b      	lsls	r3, r3, #9
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d011      	beq.n	8005a46 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a32:	e008      	b.n	8005a46 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2101      	movs	r1, #1
 8005a40:	430a      	orrs	r2, r1
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	e000      	b.n	8005a48 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a46:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	b004      	add	sp, #16
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	46c0      	nop			@ (mov r8, r8)
 8005a54:	40012c00 	.word	0x40012c00
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800
 8005a60:	40000400 	.word	0x40000400
 8005a64:	00010007 	.word	0x00010007

08005a68 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6839      	ldr	r1, [r7, #0]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	f000 fdc2 	bl	8006604 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a35      	ldr	r2, [pc, #212]	@ (8005b5c <HAL_TIM_PWM_Stop+0xf4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d009      	beq.n	8005a9e <HAL_TIM_PWM_Stop+0x36>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a34      	ldr	r2, [pc, #208]	@ (8005b60 <HAL_TIM_PWM_Stop+0xf8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d004      	beq.n	8005a9e <HAL_TIM_PWM_Stop+0x36>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a32      	ldr	r2, [pc, #200]	@ (8005b64 <HAL_TIM_PWM_Stop+0xfc>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d101      	bne.n	8005aa2 <HAL_TIM_PWM_Stop+0x3a>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e000      	b.n	8005aa4 <HAL_TIM_PWM_Stop+0x3c>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d013      	beq.n	8005ad0 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	4a2e      	ldr	r2, [pc, #184]	@ (8005b68 <HAL_TIM_PWM_Stop+0x100>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	d10d      	bne.n	8005ad0 <HAL_TIM_PWM_Stop+0x68>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	4a2c      	ldr	r2, [pc, #176]	@ (8005b6c <HAL_TIM_PWM_Stop+0x104>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	d107      	bne.n	8005ad0 <HAL_TIM_PWM_Stop+0x68>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4929      	ldr	r1, [pc, #164]	@ (8005b70 <HAL_TIM_PWM_Stop+0x108>)
 8005acc:	400a      	ands	r2, r1
 8005ace:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	4a24      	ldr	r2, [pc, #144]	@ (8005b68 <HAL_TIM_PWM_Stop+0x100>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	d10d      	bne.n	8005af8 <HAL_TIM_PWM_Stop+0x90>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	4a22      	ldr	r2, [pc, #136]	@ (8005b6c <HAL_TIM_PWM_Stop+0x104>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	d107      	bne.n	8005af8 <HAL_TIM_PWM_Stop+0x90>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2101      	movs	r1, #1
 8005af4:	438a      	bics	r2, r1
 8005af6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d104      	bne.n	8005b08 <HAL_TIM_PWM_Stop+0xa0>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	223e      	movs	r2, #62	@ 0x3e
 8005b02:	2101      	movs	r1, #1
 8005b04:	5499      	strb	r1, [r3, r2]
 8005b06:	e023      	b.n	8005b50 <HAL_TIM_PWM_Stop+0xe8>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d104      	bne.n	8005b18 <HAL_TIM_PWM_Stop+0xb0>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	223f      	movs	r2, #63	@ 0x3f
 8005b12:	2101      	movs	r1, #1
 8005b14:	5499      	strb	r1, [r3, r2]
 8005b16:	e01b      	b.n	8005b50 <HAL_TIM_PWM_Stop+0xe8>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b08      	cmp	r3, #8
 8005b1c:	d104      	bne.n	8005b28 <HAL_TIM_PWM_Stop+0xc0>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2240      	movs	r2, #64	@ 0x40
 8005b22:	2101      	movs	r1, #1
 8005b24:	5499      	strb	r1, [r3, r2]
 8005b26:	e013      	b.n	8005b50 <HAL_TIM_PWM_Stop+0xe8>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b0c      	cmp	r3, #12
 8005b2c:	d104      	bne.n	8005b38 <HAL_TIM_PWM_Stop+0xd0>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2241      	movs	r2, #65	@ 0x41
 8005b32:	2101      	movs	r1, #1
 8005b34:	5499      	strb	r1, [r3, r2]
 8005b36:	e00b      	b.n	8005b50 <HAL_TIM_PWM_Stop+0xe8>
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b10      	cmp	r3, #16
 8005b3c:	d104      	bne.n	8005b48 <HAL_TIM_PWM_Stop+0xe0>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2242      	movs	r2, #66	@ 0x42
 8005b42:	2101      	movs	r1, #1
 8005b44:	5499      	strb	r1, [r3, r2]
 8005b46:	e003      	b.n	8005b50 <HAL_TIM_PWM_Stop+0xe8>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2243      	movs	r2, #67	@ 0x43
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	0018      	movs	r0, r3
 8005b54:	46bd      	mov	sp, r7
 8005b56:	b002      	add	sp, #8
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	46c0      	nop			@ (mov r8, r8)
 8005b5c:	40012c00 	.word	0x40012c00
 8005b60:	40014400 	.word	0x40014400
 8005b64:	40014800 	.word	0x40014800
 8005b68:	00001111 	.word	0x00001111
 8005b6c:	00000444 	.word	0x00000444
 8005b70:	ffff7fff 	.word	0xffff7fff

08005b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	4013      	ands	r3, r2
 8005b92:	d021      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2202      	movs	r2, #2
 8005b98:	4013      	ands	r3, r2
 8005b9a:	d01d      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2203      	movs	r2, #3
 8005ba2:	4252      	negs	r2, r2
 8005ba4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	2203      	movs	r2, #3
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	d004      	beq.n	8005bc2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f000 f9ea 	bl	8005f94 <HAL_TIM_IC_CaptureCallback>
 8005bc0:	e007      	b.n	8005bd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	f000 f9dd 	bl	8005f84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f000 f9e9 	bl	8005fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2204      	movs	r2, #4
 8005bdc:	4013      	ands	r3, r2
 8005bde:	d022      	beq.n	8005c26 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2204      	movs	r2, #4
 8005be4:	4013      	ands	r3, r2
 8005be6:	d01e      	beq.n	8005c26 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2205      	movs	r2, #5
 8005bee:	4252      	negs	r2, r2
 8005bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699a      	ldr	r2, [r3, #24]
 8005bfe:	23c0      	movs	r3, #192	@ 0xc0
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4013      	ands	r3, r2
 8005c04:	d004      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f000 f9c3 	bl	8005f94 <HAL_TIM_IC_CaptureCallback>
 8005c0e:	e007      	b.n	8005c20 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	0018      	movs	r0, r3
 8005c14:	f000 f9b6 	bl	8005f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	f000 f9c2 	bl	8005fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2208      	movs	r2, #8
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	d021      	beq.n	8005c72 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2208      	movs	r2, #8
 8005c32:	4013      	ands	r3, r2
 8005c34:	d01d      	beq.n	8005c72 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2209      	movs	r2, #9
 8005c3c:	4252      	negs	r2, r2
 8005c3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2204      	movs	r2, #4
 8005c44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	2203      	movs	r2, #3
 8005c4e:	4013      	ands	r3, r2
 8005c50:	d004      	beq.n	8005c5c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	0018      	movs	r0, r3
 8005c56:	f000 f99d 	bl	8005f94 <HAL_TIM_IC_CaptureCallback>
 8005c5a:	e007      	b.n	8005c6c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	0018      	movs	r0, r3
 8005c60:	f000 f990 	bl	8005f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	0018      	movs	r0, r3
 8005c68:	f000 f99c 	bl	8005fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2210      	movs	r2, #16
 8005c76:	4013      	ands	r3, r2
 8005c78:	d022      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2210      	movs	r2, #16
 8005c7e:	4013      	ands	r3, r2
 8005c80:	d01e      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2211      	movs	r2, #17
 8005c88:	4252      	negs	r2, r2
 8005c8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2208      	movs	r2, #8
 8005c90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	69da      	ldr	r2, [r3, #28]
 8005c98:	23c0      	movs	r3, #192	@ 0xc0
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	d004      	beq.n	8005caa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	f000 f976 	bl	8005f94 <HAL_TIM_IC_CaptureCallback>
 8005ca8:	e007      	b.n	8005cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	0018      	movs	r0, r3
 8005cae:	f000 f969 	bl	8005f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f000 f975 	bl	8005fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	d00c      	beq.n	8005ce2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	4013      	ands	r3, r2
 8005cce:	d008      	beq.n	8005ce2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	4252      	negs	r2, r2
 8005cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	0018      	movs	r0, r3
 8005cde:	f7fb fdf9 	bl	80018d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2280      	movs	r2, #128	@ 0x80
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d104      	bne.n	8005cf4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	2380      	movs	r3, #128	@ 0x80
 8005cee:	019b      	lsls	r3, r3, #6
 8005cf0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005cf2:	d00b      	beq.n	8005d0c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2280      	movs	r2, #128	@ 0x80
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	d007      	beq.n	8005d0c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1e      	ldr	r2, [pc, #120]	@ (8005d7c <HAL_TIM_IRQHandler+0x208>)
 8005d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	0018      	movs	r0, r3
 8005d08:	f000 fdac 	bl	8006864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	2380      	movs	r3, #128	@ 0x80
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	4013      	ands	r3, r2
 8005d14:	d00b      	beq.n	8005d2e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2280      	movs	r2, #128	@ 0x80
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	d007      	beq.n	8005d2e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a17      	ldr	r2, [pc, #92]	@ (8005d80 <HAL_TIM_IRQHandler+0x20c>)
 8005d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	0018      	movs	r0, r3
 8005d2a:	f000 fda3 	bl	8006874 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2240      	movs	r2, #64	@ 0x40
 8005d32:	4013      	ands	r3, r2
 8005d34:	d00c      	beq.n	8005d50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2240      	movs	r2, #64	@ 0x40
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	d008      	beq.n	8005d50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2241      	movs	r2, #65	@ 0x41
 8005d44:	4252      	negs	r2, r2
 8005d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	f000 f932 	bl	8005fb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2220      	movs	r2, #32
 8005d54:	4013      	ands	r3, r2
 8005d56:	d00c      	beq.n	8005d72 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	d008      	beq.n	8005d72 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2221      	movs	r2, #33	@ 0x21
 8005d66:	4252      	negs	r2, r2
 8005d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	f000 fd71 	bl	8006854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d72:	46c0      	nop			@ (mov r8, r8)
 8005d74:	46bd      	mov	sp, r7
 8005d76:	b004      	add	sp, #16
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	46c0      	nop			@ (mov r8, r8)
 8005d7c:	ffffdf7f 	.word	0xffffdf7f
 8005d80:	fffffeff 	.word	0xfffffeff

08005d84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d90:	2317      	movs	r3, #23
 8005d92:	18fb      	adds	r3, r7, r3
 8005d94:	2200      	movs	r2, #0
 8005d96:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	223c      	movs	r2, #60	@ 0x3c
 8005d9c:	5c9b      	ldrb	r3, [r3, r2]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e0e5      	b.n	8005f72 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	223c      	movs	r2, #60	@ 0x3c
 8005daa:	2101      	movs	r1, #1
 8005dac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b14      	cmp	r3, #20
 8005db2:	d900      	bls.n	8005db6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005db4:	e0d1      	b.n	8005f5a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	009a      	lsls	r2, r3, #2
 8005dba:	4b70      	ldr	r3, [pc, #448]	@ (8005f7c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005dbc:	18d3      	adds	r3, r2, r3
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	0011      	movs	r1, r2
 8005dca:	0018      	movs	r0, r3
 8005dcc:	f000 f97e 	bl	80060cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2108      	movs	r1, #8
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2104      	movs	r1, #4
 8005dec:	438a      	bics	r2, r1
 8005dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6999      	ldr	r1, [r3, #24]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	691a      	ldr	r2, [r3, #16]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	619a      	str	r2, [r3, #24]
      break;
 8005e02:	e0af      	b.n	8005f64 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	0011      	movs	r1, r2
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f000 f9dd 	bl	80061cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699a      	ldr	r2, [r3, #24]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2180      	movs	r1, #128	@ 0x80
 8005e1e:	0109      	lsls	r1, r1, #4
 8005e20:	430a      	orrs	r2, r1
 8005e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4954      	ldr	r1, [pc, #336]	@ (8005f80 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005e30:	400a      	ands	r2, r1
 8005e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6999      	ldr	r1, [r3, #24]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	021a      	lsls	r2, r3, #8
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	619a      	str	r2, [r3, #24]
      break;
 8005e48:	e08c      	b.n	8005f64 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	0011      	movs	r1, r2
 8005e52:	0018      	movs	r0, r3
 8005e54:	f000 fa38 	bl	80062c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	69da      	ldr	r2, [r3, #28]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2108      	movs	r1, #8
 8005e64:	430a      	orrs	r2, r1
 8005e66:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	69da      	ldr	r2, [r3, #28]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2104      	movs	r1, #4
 8005e74:	438a      	bics	r2, r1
 8005e76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	69d9      	ldr	r1, [r3, #28]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	691a      	ldr	r2, [r3, #16]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	61da      	str	r2, [r3, #28]
      break;
 8005e8a:	e06b      	b.n	8005f64 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	0011      	movs	r1, r2
 8005e94:	0018      	movs	r0, r3
 8005e96:	f000 fa99 	bl	80063cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69da      	ldr	r2, [r3, #28]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2180      	movs	r1, #128	@ 0x80
 8005ea6:	0109      	lsls	r1, r1, #4
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	69da      	ldr	r2, [r3, #28]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4932      	ldr	r1, [pc, #200]	@ (8005f80 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005eb8:	400a      	ands	r2, r1
 8005eba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	69d9      	ldr	r1, [r3, #28]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	021a      	lsls	r2, r3, #8
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	61da      	str	r2, [r3, #28]
      break;
 8005ed0:	e048      	b.n	8005f64 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	0011      	movs	r1, r2
 8005eda:	0018      	movs	r0, r3
 8005edc:	f000 fada 	bl	8006494 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2108      	movs	r1, #8
 8005eec:	430a      	orrs	r2, r1
 8005eee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2104      	movs	r1, #4
 8005efc:	438a      	bics	r2, r1
 8005efe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005f12:	e027      	b.n	8005f64 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	0011      	movs	r1, r2
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	f000 fb13 	bl	8006548 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2180      	movs	r1, #128	@ 0x80
 8005f2e:	0109      	lsls	r1, r1, #4
 8005f30:	430a      	orrs	r2, r1
 8005f32:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4910      	ldr	r1, [pc, #64]	@ (8005f80 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005f40:	400a      	ands	r2, r1
 8005f42:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	021a      	lsls	r2, r3, #8
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005f58:	e004      	b.n	8005f64 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005f5a:	2317      	movs	r3, #23
 8005f5c:	18fb      	adds	r3, r7, r3
 8005f5e:	2201      	movs	r2, #1
 8005f60:	701a      	strb	r2, [r3, #0]
      break;
 8005f62:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	223c      	movs	r2, #60	@ 0x3c
 8005f68:	2100      	movs	r1, #0
 8005f6a:	5499      	strb	r1, [r3, r2]

  return status;
 8005f6c:	2317      	movs	r3, #23
 8005f6e:	18fb      	adds	r3, r7, r3
 8005f70:	781b      	ldrb	r3, [r3, #0]
}
 8005f72:	0018      	movs	r0, r3
 8005f74:	46bd      	mov	sp, r7
 8005f76:	b006      	add	sp, #24
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	46c0      	nop			@ (mov r8, r8)
 8005f7c:	08006980 	.word	0x08006980
 8005f80:	fffffbff 	.word	0xfffffbff

08005f84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f8c:	46c0      	nop			@ (mov r8, r8)
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b002      	add	sp, #8
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f9c:	46c0      	nop			@ (mov r8, r8)
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	b002      	add	sp, #8
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fac:	46c0      	nop			@ (mov r8, r8)
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	b002      	add	sp, #8
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fbc:	46c0      	nop			@ (mov r8, r8)
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	b002      	add	sp, #8
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a37      	ldr	r2, [pc, #220]	@ (80060b4 <TIM_Base_SetConfig+0xf0>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d008      	beq.n	8005fee <TIM_Base_SetConfig+0x2a>
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	2380      	movs	r3, #128	@ 0x80
 8005fe0:	05db      	lsls	r3, r3, #23
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d003      	beq.n	8005fee <TIM_Base_SetConfig+0x2a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a33      	ldr	r2, [pc, #204]	@ (80060b8 <TIM_Base_SetConfig+0xf4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d108      	bne.n	8006000 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2270      	movs	r2, #112	@ 0x70
 8005ff2:	4393      	bics	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a2c      	ldr	r2, [pc, #176]	@ (80060b4 <TIM_Base_SetConfig+0xf0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d014      	beq.n	8006032 <TIM_Base_SetConfig+0x6e>
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	2380      	movs	r3, #128	@ 0x80
 800600c:	05db      	lsls	r3, r3, #23
 800600e:	429a      	cmp	r2, r3
 8006010:	d00f      	beq.n	8006032 <TIM_Base_SetConfig+0x6e>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a28      	ldr	r2, [pc, #160]	@ (80060b8 <TIM_Base_SetConfig+0xf4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00b      	beq.n	8006032 <TIM_Base_SetConfig+0x6e>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a27      	ldr	r2, [pc, #156]	@ (80060bc <TIM_Base_SetConfig+0xf8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d007      	beq.n	8006032 <TIM_Base_SetConfig+0x6e>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a26      	ldr	r2, [pc, #152]	@ (80060c0 <TIM_Base_SetConfig+0xfc>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d003      	beq.n	8006032 <TIM_Base_SetConfig+0x6e>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a25      	ldr	r2, [pc, #148]	@ (80060c4 <TIM_Base_SetConfig+0x100>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d108      	bne.n	8006044 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	4a24      	ldr	r2, [pc, #144]	@ (80060c8 <TIM_Base_SetConfig+0x104>)
 8006036:	4013      	ands	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2280      	movs	r2, #128	@ 0x80
 8006048:	4393      	bics	r3, r2
 800604a:	001a      	movs	r2, r3
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a11      	ldr	r2, [pc, #68]	@ (80060b4 <TIM_Base_SetConfig+0xf0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d007      	beq.n	8006082 <TIM_Base_SetConfig+0xbe>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a12      	ldr	r2, [pc, #72]	@ (80060c0 <TIM_Base_SetConfig+0xfc>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d003      	beq.n	8006082 <TIM_Base_SetConfig+0xbe>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a11      	ldr	r2, [pc, #68]	@ (80060c4 <TIM_Base_SetConfig+0x100>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d103      	bne.n	800608a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	691a      	ldr	r2, [r3, #16]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	2201      	movs	r2, #1
 8006096:	4013      	ands	r3, r2
 8006098:	2b01      	cmp	r3, #1
 800609a:	d106      	bne.n	80060aa <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2201      	movs	r2, #1
 80060a2:	4393      	bics	r3, r2
 80060a4:	001a      	movs	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	611a      	str	r2, [r3, #16]
  }
}
 80060aa:	46c0      	nop			@ (mov r8, r8)
 80060ac:	46bd      	mov	sp, r7
 80060ae:	b004      	add	sp, #16
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	46c0      	nop			@ (mov r8, r8)
 80060b4:	40012c00 	.word	0x40012c00
 80060b8:	40000400 	.word	0x40000400
 80060bc:	40002000 	.word	0x40002000
 80060c0:	40014400 	.word	0x40014400
 80060c4:	40014800 	.word	0x40014800
 80060c8:	fffffcff 	.word	0xfffffcff

080060cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	2201      	movs	r2, #1
 80060e2:	4393      	bics	r3, r2
 80060e4:	001a      	movs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4a2e      	ldr	r2, [pc, #184]	@ (80061b4 <TIM_OC1_SetConfig+0xe8>)
 80060fa:	4013      	ands	r3, r2
 80060fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2203      	movs	r2, #3
 8006102:	4393      	bics	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4313      	orrs	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2202      	movs	r2, #2
 8006114:	4393      	bics	r3, r2
 8006116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a24      	ldr	r2, [pc, #144]	@ (80061b8 <TIM_OC1_SetConfig+0xec>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d007      	beq.n	800613a <TIM_OC1_SetConfig+0x6e>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a23      	ldr	r2, [pc, #140]	@ (80061bc <TIM_OC1_SetConfig+0xf0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d003      	beq.n	800613a <TIM_OC1_SetConfig+0x6e>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a22      	ldr	r2, [pc, #136]	@ (80061c0 <TIM_OC1_SetConfig+0xf4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d10c      	bne.n	8006154 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2208      	movs	r2, #8
 800613e:	4393      	bics	r3, r2
 8006140:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2204      	movs	r2, #4
 8006150:	4393      	bics	r3, r2
 8006152:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a18      	ldr	r2, [pc, #96]	@ (80061b8 <TIM_OC1_SetConfig+0xec>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d007      	beq.n	800616c <TIM_OC1_SetConfig+0xa0>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a17      	ldr	r2, [pc, #92]	@ (80061bc <TIM_OC1_SetConfig+0xf0>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d003      	beq.n	800616c <TIM_OC1_SetConfig+0xa0>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a16      	ldr	r2, [pc, #88]	@ (80061c0 <TIM_OC1_SetConfig+0xf4>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d111      	bne.n	8006190 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	4a15      	ldr	r2, [pc, #84]	@ (80061c4 <TIM_OC1_SetConfig+0xf8>)
 8006170:	4013      	ands	r3, r2
 8006172:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	4a14      	ldr	r2, [pc, #80]	@ (80061c8 <TIM_OC1_SetConfig+0xfc>)
 8006178:	4013      	ands	r3, r2
 800617a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	4313      	orrs	r3, r2
 800618e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	46c0      	nop			@ (mov r8, r8)
 80061ac:	46bd      	mov	sp, r7
 80061ae:	b006      	add	sp, #24
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	46c0      	nop			@ (mov r8, r8)
 80061b4:	fffeff8f 	.word	0xfffeff8f
 80061b8:	40012c00 	.word	0x40012c00
 80061bc:	40014400 	.word	0x40014400
 80061c0:	40014800 	.word	0x40014800
 80061c4:	fffffeff 	.word	0xfffffeff
 80061c8:	fffffdff 	.word	0xfffffdff

080061cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	2210      	movs	r2, #16
 80061e2:	4393      	bics	r3, r2
 80061e4:	001a      	movs	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	4a2c      	ldr	r2, [pc, #176]	@ (80062ac <TIM_OC2_SetConfig+0xe0>)
 80061fa:	4013      	ands	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4a2b      	ldr	r2, [pc, #172]	@ (80062b0 <TIM_OC2_SetConfig+0xe4>)
 8006202:	4013      	ands	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	021b      	lsls	r3, r3, #8
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2220      	movs	r2, #32
 8006216:	4393      	bics	r3, r2
 8006218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	011b      	lsls	r3, r3, #4
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a22      	ldr	r2, [pc, #136]	@ (80062b4 <TIM_OC2_SetConfig+0xe8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d10d      	bne.n	800624a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2280      	movs	r2, #128	@ 0x80
 8006232:	4393      	bics	r3, r2
 8006234:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2240      	movs	r2, #64	@ 0x40
 8006246:	4393      	bics	r3, r2
 8006248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a19      	ldr	r2, [pc, #100]	@ (80062b4 <TIM_OC2_SetConfig+0xe8>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d007      	beq.n	8006262 <TIM_OC2_SetConfig+0x96>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a18      	ldr	r2, [pc, #96]	@ (80062b8 <TIM_OC2_SetConfig+0xec>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d003      	beq.n	8006262 <TIM_OC2_SetConfig+0x96>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a17      	ldr	r2, [pc, #92]	@ (80062bc <TIM_OC2_SetConfig+0xf0>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d113      	bne.n	800628a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	4a16      	ldr	r2, [pc, #88]	@ (80062c0 <TIM_OC2_SetConfig+0xf4>)
 8006266:	4013      	ands	r3, r2
 8006268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	4a15      	ldr	r2, [pc, #84]	@ (80062c4 <TIM_OC2_SetConfig+0xf8>)
 800626e:	4013      	ands	r3, r2
 8006270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	4313      	orrs	r3, r2
 800627c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	4313      	orrs	r3, r2
 8006288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	621a      	str	r2, [r3, #32]
}
 80062a4:	46c0      	nop			@ (mov r8, r8)
 80062a6:	46bd      	mov	sp, r7
 80062a8:	b006      	add	sp, #24
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	feff8fff 	.word	0xfeff8fff
 80062b0:	fffffcff 	.word	0xfffffcff
 80062b4:	40012c00 	.word	0x40012c00
 80062b8:	40014400 	.word	0x40014400
 80062bc:	40014800 	.word	0x40014800
 80062c0:	fffffbff 	.word	0xfffffbff
 80062c4:	fffff7ff 	.word	0xfffff7ff

080062c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	4a31      	ldr	r2, [pc, #196]	@ (80063a4 <TIM_OC3_SetConfig+0xdc>)
 80062de:	401a      	ands	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4a2d      	ldr	r2, [pc, #180]	@ (80063a8 <TIM_OC3_SetConfig+0xe0>)
 80062f4:	4013      	ands	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2203      	movs	r2, #3
 80062fc:	4393      	bics	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	4313      	orrs	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	4a27      	ldr	r2, [pc, #156]	@ (80063ac <TIM_OC3_SetConfig+0xe4>)
 800630e:	4013      	ands	r3, r2
 8006310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	021b      	lsls	r3, r3, #8
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	4313      	orrs	r3, r2
 800631c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a23      	ldr	r2, [pc, #140]	@ (80063b0 <TIM_OC3_SetConfig+0xe8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d10d      	bne.n	8006342 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	4a22      	ldr	r2, [pc, #136]	@ (80063b4 <TIM_OC3_SetConfig+0xec>)
 800632a:	4013      	ands	r3, r2
 800632c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	4a1e      	ldr	r2, [pc, #120]	@ (80063b8 <TIM_OC3_SetConfig+0xf0>)
 800633e:	4013      	ands	r3, r2
 8006340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a1a      	ldr	r2, [pc, #104]	@ (80063b0 <TIM_OC3_SetConfig+0xe8>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d007      	beq.n	800635a <TIM_OC3_SetConfig+0x92>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a1b      	ldr	r2, [pc, #108]	@ (80063bc <TIM_OC3_SetConfig+0xf4>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d003      	beq.n	800635a <TIM_OC3_SetConfig+0x92>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a1a      	ldr	r2, [pc, #104]	@ (80063c0 <TIM_OC3_SetConfig+0xf8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d113      	bne.n	8006382 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	4a19      	ldr	r2, [pc, #100]	@ (80063c4 <TIM_OC3_SetConfig+0xfc>)
 800635e:	4013      	ands	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	4a18      	ldr	r2, [pc, #96]	@ (80063c8 <TIM_OC3_SetConfig+0x100>)
 8006366:	4013      	ands	r3, r2
 8006368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	4313      	orrs	r3, r2
 8006374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	011b      	lsls	r3, r3, #4
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4313      	orrs	r3, r2
 8006380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	621a      	str	r2, [r3, #32]
}
 800639c:	46c0      	nop			@ (mov r8, r8)
 800639e:	46bd      	mov	sp, r7
 80063a0:	b006      	add	sp, #24
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	fffffeff 	.word	0xfffffeff
 80063a8:	fffeff8f 	.word	0xfffeff8f
 80063ac:	fffffdff 	.word	0xfffffdff
 80063b0:	40012c00 	.word	0x40012c00
 80063b4:	fffff7ff 	.word	0xfffff7ff
 80063b8:	fffffbff 	.word	0xfffffbff
 80063bc:	40014400 	.word	0x40014400
 80063c0:	40014800 	.word	0x40014800
 80063c4:	ffffefff 	.word	0xffffefff
 80063c8:	ffffdfff 	.word	0xffffdfff

080063cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	4a24      	ldr	r2, [pc, #144]	@ (8006474 <TIM_OC4_SetConfig+0xa8>)
 80063e2:	401a      	ands	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4a20      	ldr	r2, [pc, #128]	@ (8006478 <TIM_OC4_SetConfig+0xac>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4a1f      	ldr	r2, [pc, #124]	@ (800647c <TIM_OC4_SetConfig+0xb0>)
 8006400:	4013      	ands	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	021b      	lsls	r3, r3, #8
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	4a1b      	ldr	r2, [pc, #108]	@ (8006480 <TIM_OC4_SetConfig+0xb4>)
 8006414:	4013      	ands	r3, r2
 8006416:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	031b      	lsls	r3, r3, #12
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	4313      	orrs	r3, r2
 8006422:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a17      	ldr	r2, [pc, #92]	@ (8006484 <TIM_OC4_SetConfig+0xb8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d007      	beq.n	800643c <TIM_OC4_SetConfig+0x70>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a16      	ldr	r2, [pc, #88]	@ (8006488 <TIM_OC4_SetConfig+0xbc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d003      	beq.n	800643c <TIM_OC4_SetConfig+0x70>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a15      	ldr	r2, [pc, #84]	@ (800648c <TIM_OC4_SetConfig+0xc0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d109      	bne.n	8006450 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	4a14      	ldr	r2, [pc, #80]	@ (8006490 <TIM_OC4_SetConfig+0xc4>)
 8006440:	4013      	ands	r3, r2
 8006442:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	019b      	lsls	r3, r3, #6
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4313      	orrs	r3, r2
 800644e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	621a      	str	r2, [r3, #32]
}
 800646a:	46c0      	nop			@ (mov r8, r8)
 800646c:	46bd      	mov	sp, r7
 800646e:	b006      	add	sp, #24
 8006470:	bd80      	pop	{r7, pc}
 8006472:	46c0      	nop			@ (mov r8, r8)
 8006474:	ffffefff 	.word	0xffffefff
 8006478:	feff8fff 	.word	0xfeff8fff
 800647c:	fffffcff 	.word	0xfffffcff
 8006480:	ffffdfff 	.word	0xffffdfff
 8006484:	40012c00 	.word	0x40012c00
 8006488:	40014400 	.word	0x40014400
 800648c:	40014800 	.word	0x40014800
 8006490:	ffffbfff 	.word	0xffffbfff

08006494 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	4a21      	ldr	r2, [pc, #132]	@ (8006530 <TIM_OC5_SetConfig+0x9c>)
 80064aa:	401a      	ands	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4a1d      	ldr	r2, [pc, #116]	@ (8006534 <TIM_OC5_SetConfig+0xa0>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	4a19      	ldr	r2, [pc, #100]	@ (8006538 <TIM_OC5_SetConfig+0xa4>)
 80064d2:	4013      	ands	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	041b      	lsls	r3, r3, #16
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4313      	orrs	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a15      	ldr	r2, [pc, #84]	@ (800653c <TIM_OC5_SetConfig+0xa8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d007      	beq.n	80064fa <TIM_OC5_SetConfig+0x66>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a14      	ldr	r2, [pc, #80]	@ (8006540 <TIM_OC5_SetConfig+0xac>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d003      	beq.n	80064fa <TIM_OC5_SetConfig+0x66>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a13      	ldr	r2, [pc, #76]	@ (8006544 <TIM_OC5_SetConfig+0xb0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d109      	bne.n	800650e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	4a0c      	ldr	r2, [pc, #48]	@ (8006530 <TIM_OC5_SetConfig+0x9c>)
 80064fe:	4013      	ands	r3, r2
 8006500:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	021b      	lsls	r3, r3, #8
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	621a      	str	r2, [r3, #32]
}
 8006528:	46c0      	nop			@ (mov r8, r8)
 800652a:	46bd      	mov	sp, r7
 800652c:	b006      	add	sp, #24
 800652e:	bd80      	pop	{r7, pc}
 8006530:	fffeffff 	.word	0xfffeffff
 8006534:	fffeff8f 	.word	0xfffeff8f
 8006538:	fffdffff 	.word	0xfffdffff
 800653c:	40012c00 	.word	0x40012c00
 8006540:	40014400 	.word	0x40014400
 8006544:	40014800 	.word	0x40014800

08006548 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	4a22      	ldr	r2, [pc, #136]	@ (80065e8 <TIM_OC6_SetConfig+0xa0>)
 800655e:	401a      	ands	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800656e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4a1e      	ldr	r2, [pc, #120]	@ (80065ec <TIM_OC6_SetConfig+0xa4>)
 8006574:	4013      	ands	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	4a1a      	ldr	r2, [pc, #104]	@ (80065f0 <TIM_OC6_SetConfig+0xa8>)
 8006588:	4013      	ands	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	051b      	lsls	r3, r3, #20
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a16      	ldr	r2, [pc, #88]	@ (80065f4 <TIM_OC6_SetConfig+0xac>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d007      	beq.n	80065b0 <TIM_OC6_SetConfig+0x68>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a15      	ldr	r2, [pc, #84]	@ (80065f8 <TIM_OC6_SetConfig+0xb0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d003      	beq.n	80065b0 <TIM_OC6_SetConfig+0x68>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a14      	ldr	r2, [pc, #80]	@ (80065fc <TIM_OC6_SetConfig+0xb4>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d109      	bne.n	80065c4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	4a13      	ldr	r2, [pc, #76]	@ (8006600 <TIM_OC6_SetConfig+0xb8>)
 80065b4:	4013      	ands	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	029b      	lsls	r3, r3, #10
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	621a      	str	r2, [r3, #32]
}
 80065de:	46c0      	nop			@ (mov r8, r8)
 80065e0:	46bd      	mov	sp, r7
 80065e2:	b006      	add	sp, #24
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	46c0      	nop			@ (mov r8, r8)
 80065e8:	ffefffff 	.word	0xffefffff
 80065ec:	feff8fff 	.word	0xfeff8fff
 80065f0:	ffdfffff 	.word	0xffdfffff
 80065f4:	40012c00 	.word	0x40012c00
 80065f8:	40014400 	.word	0x40014400
 80065fc:	40014800 	.word	0x40014800
 8006600:	fffbffff 	.word	0xfffbffff

08006604 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	221f      	movs	r2, #31
 8006614:	4013      	ands	r3, r2
 8006616:	2201      	movs	r2, #1
 8006618:	409a      	lsls	r2, r3
 800661a:	0013      	movs	r3, r2
 800661c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	43d2      	mvns	r2, r2
 8006626:	401a      	ands	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6a1a      	ldr	r2, [r3, #32]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	211f      	movs	r1, #31
 8006634:	400b      	ands	r3, r1
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	4099      	lsls	r1, r3
 800663a:	000b      	movs	r3, r1
 800663c:	431a      	orrs	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	621a      	str	r2, [r3, #32]
}
 8006642:	46c0      	nop			@ (mov r8, r8)
 8006644:	46bd      	mov	sp, r7
 8006646:	b006      	add	sp, #24
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	223c      	movs	r2, #60	@ 0x3c
 800665a:	5c9b      	ldrb	r3, [r3, r2]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d101      	bne.n	8006664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006660:	2302      	movs	r3, #2
 8006662:	e050      	b.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	223c      	movs	r2, #60	@ 0x3c
 8006668:	2101      	movs	r1, #1
 800666a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	223d      	movs	r2, #61	@ 0x3d
 8006670:	2102      	movs	r1, #2
 8006672:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a21      	ldr	r2, [pc, #132]	@ (8006710 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d108      	bne.n	80066a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4a20      	ldr	r2, [pc, #128]	@ (8006714 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006692:	4013      	ands	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	4313      	orrs	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2270      	movs	r2, #112	@ 0x70
 80066a4:	4393      	bics	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a14      	ldr	r2, [pc, #80]	@ (8006710 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d00a      	beq.n	80066da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	2380      	movs	r3, #128	@ 0x80
 80066ca:	05db      	lsls	r3, r3, #23
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d004      	beq.n	80066da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a10      	ldr	r2, [pc, #64]	@ (8006718 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d10c      	bne.n	80066f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2280      	movs	r2, #128	@ 0x80
 80066de:	4393      	bics	r3, r2
 80066e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	223d      	movs	r2, #61	@ 0x3d
 80066f8:	2101      	movs	r1, #1
 80066fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	223c      	movs	r2, #60	@ 0x3c
 8006700:	2100      	movs	r1, #0
 8006702:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	0018      	movs	r0, r3
 8006708:	46bd      	mov	sp, r7
 800670a:	b004      	add	sp, #16
 800670c:	bd80      	pop	{r7, pc}
 800670e:	46c0      	nop			@ (mov r8, r8)
 8006710:	40012c00 	.word	0x40012c00
 8006714:	ff0fffff 	.word	0xff0fffff
 8006718:	40000400 	.word	0x40000400

0800671c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	223c      	movs	r2, #60	@ 0x3c
 800672e:	5c9b      	ldrb	r3, [r3, r2]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d101      	bne.n	8006738 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006734:	2302      	movs	r3, #2
 8006736:	e06f      	b.n	8006818 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	223c      	movs	r2, #60	@ 0x3c
 800673c:	2101      	movs	r1, #1
 800673e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	22ff      	movs	r2, #255	@ 0xff
 8006744:	4393      	bics	r3, r2
 8006746:	001a      	movs	r2, r3
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	4313      	orrs	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4a33      	ldr	r2, [pc, #204]	@ (8006820 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8006754:	401a      	ands	r2, r3
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4a30      	ldr	r2, [pc, #192]	@ (8006824 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8006762:	401a      	ands	r2, r3
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	4313      	orrs	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4a2e      	ldr	r2, [pc, #184]	@ (8006828 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8006770:	401a      	ands	r2, r3
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4a2b      	ldr	r2, [pc, #172]	@ (800682c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800677e:	401a      	ands	r2, r3
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	4313      	orrs	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4a29      	ldr	r2, [pc, #164]	@ (8006830 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800678c:	401a      	ands	r2, r3
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4a26      	ldr	r2, [pc, #152]	@ (8006834 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800679a:	401a      	ands	r2, r3
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4a24      	ldr	r2, [pc, #144]	@ (8006838 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80067a8:	401a      	ands	r2, r3
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	041b      	lsls	r3, r3, #16
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4a21      	ldr	r2, [pc, #132]	@ (800683c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80067b8:	401a      	ands	r2, r3
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a1e      	ldr	r2, [pc, #120]	@ (8006840 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d11c      	bne.n	8006806 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006844 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80067d0:	401a      	ands	r2, r3
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d6:	051b      	lsls	r3, r3, #20
 80067d8:	4313      	orrs	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4a1a      	ldr	r2, [pc, #104]	@ (8006848 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80067e0:	401a      	ands	r2, r3
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4a17      	ldr	r2, [pc, #92]	@ (800684c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80067ee:	401a      	ands	r2, r3
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f4:	4313      	orrs	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4a15      	ldr	r2, [pc, #84]	@ (8006850 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80067fc:	401a      	ands	r2, r3
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006802:	4313      	orrs	r3, r2
 8006804:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	223c      	movs	r2, #60	@ 0x3c
 8006812:	2100      	movs	r1, #0
 8006814:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	0018      	movs	r0, r3
 800681a:	46bd      	mov	sp, r7
 800681c:	b004      	add	sp, #16
 800681e:	bd80      	pop	{r7, pc}
 8006820:	fffffcff 	.word	0xfffffcff
 8006824:	fffffbff 	.word	0xfffffbff
 8006828:	fffff7ff 	.word	0xfffff7ff
 800682c:	ffffefff 	.word	0xffffefff
 8006830:	ffffdfff 	.word	0xffffdfff
 8006834:	ffffbfff 	.word	0xffffbfff
 8006838:	fff0ffff 	.word	0xfff0ffff
 800683c:	efffffff 	.word	0xefffffff
 8006840:	40012c00 	.word	0x40012c00
 8006844:	ff0fffff 	.word	0xff0fffff
 8006848:	feffffff 	.word	0xfeffffff
 800684c:	fdffffff 	.word	0xfdffffff
 8006850:	dfffffff 	.word	0xdfffffff

08006854 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800685c:	46c0      	nop			@ (mov r8, r8)
 800685e:	46bd      	mov	sp, r7
 8006860:	b002      	add	sp, #8
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800686c:	46c0      	nop			@ (mov r8, r8)
 800686e:	46bd      	mov	sp, r7
 8006870:	b002      	add	sp, #8
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800687c:	46c0      	nop			@ (mov r8, r8)
 800687e:	46bd      	mov	sp, r7
 8006880:	b002      	add	sp, #8
 8006882:	bd80      	pop	{r7, pc}

08006884 <memset>:
 8006884:	0003      	movs	r3, r0
 8006886:	1882      	adds	r2, r0, r2
 8006888:	4293      	cmp	r3, r2
 800688a:	d100      	bne.n	800688e <memset+0xa>
 800688c:	4770      	bx	lr
 800688e:	7019      	strb	r1, [r3, #0]
 8006890:	3301      	adds	r3, #1
 8006892:	e7f9      	b.n	8006888 <memset+0x4>

08006894 <__libc_init_array>:
 8006894:	b570      	push	{r4, r5, r6, lr}
 8006896:	2600      	movs	r6, #0
 8006898:	4c0c      	ldr	r4, [pc, #48]	@ (80068cc <__libc_init_array+0x38>)
 800689a:	4d0d      	ldr	r5, [pc, #52]	@ (80068d0 <__libc_init_array+0x3c>)
 800689c:	1b64      	subs	r4, r4, r5
 800689e:	10a4      	asrs	r4, r4, #2
 80068a0:	42a6      	cmp	r6, r4
 80068a2:	d109      	bne.n	80068b8 <__libc_init_array+0x24>
 80068a4:	2600      	movs	r6, #0
 80068a6:	f000 f823 	bl	80068f0 <_init>
 80068aa:	4c0a      	ldr	r4, [pc, #40]	@ (80068d4 <__libc_init_array+0x40>)
 80068ac:	4d0a      	ldr	r5, [pc, #40]	@ (80068d8 <__libc_init_array+0x44>)
 80068ae:	1b64      	subs	r4, r4, r5
 80068b0:	10a4      	asrs	r4, r4, #2
 80068b2:	42a6      	cmp	r6, r4
 80068b4:	d105      	bne.n	80068c2 <__libc_init_array+0x2e>
 80068b6:	bd70      	pop	{r4, r5, r6, pc}
 80068b8:	00b3      	lsls	r3, r6, #2
 80068ba:	58eb      	ldr	r3, [r5, r3]
 80068bc:	4798      	blx	r3
 80068be:	3601      	adds	r6, #1
 80068c0:	e7ee      	b.n	80068a0 <__libc_init_array+0xc>
 80068c2:	00b3      	lsls	r3, r6, #2
 80068c4:	58eb      	ldr	r3, [r5, r3]
 80068c6:	4798      	blx	r3
 80068c8:	3601      	adds	r6, #1
 80068ca:	e7f2      	b.n	80068b2 <__libc_init_array+0x1e>
 80068cc:	080069d4 	.word	0x080069d4
 80068d0:	080069d4 	.word	0x080069d4
 80068d4:	080069d8 	.word	0x080069d8
 80068d8:	080069d4 	.word	0x080069d4

080068dc <memcpy>:
 80068dc:	2300      	movs	r3, #0
 80068de:	b510      	push	{r4, lr}
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d100      	bne.n	80068e6 <memcpy+0xa>
 80068e4:	bd10      	pop	{r4, pc}
 80068e6:	5ccc      	ldrb	r4, [r1, r3]
 80068e8:	54c4      	strb	r4, [r0, r3]
 80068ea:	3301      	adds	r3, #1
 80068ec:	e7f8      	b.n	80068e0 <memcpy+0x4>
	...

080068f0 <_init>:
 80068f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f2:	46c0      	nop			@ (mov r8, r8)
 80068f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f6:	bc08      	pop	{r3}
 80068f8:	469e      	mov	lr, r3
 80068fa:	4770      	bx	lr

080068fc <_fini>:
 80068fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fe:	46c0      	nop			@ (mov r8, r8)
 8006900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006902:	bc08      	pop	{r3}
 8006904:	469e      	mov	lr, r3
 8006906:	4770      	bx	lr
