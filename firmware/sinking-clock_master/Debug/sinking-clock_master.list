
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f3c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005ff8  08005ff8  00006ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060d4  080060d4  00008054  2**0
                  CONTENTS
  4 .ARM          00000000  080060d4  080060d4  00008054  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060d4  080060d4  00008054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060d4  080060d4  000070d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060d8  080060d8  000070d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  080060dc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000054  08006130  00008054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08006130  00008238  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b9a  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da3  00000000  00000000  0001bc16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  0001e9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f9a  00000000  00000000  0001fdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194f1  00000000  00000000  00020d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001842b  00000000  00000000  0003a25b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2086  00000000  00000000  00052686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f470c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004904  00000000  00000000  000f4750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000f9054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000054 	.word	0x20000054
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005fe0 	.word	0x08005fe0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000058 	.word	0x20000058
 8000100:	08005fe0 	.word	0x08005fe0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:
 */

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, uint8_t keyEnFlags) {
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	b087      	sub	sp, #28
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	2517      	movs	r5, #23
 800022c:	197b      	adds	r3, r7, r5
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	// Verify device ID
	uint8_t deviceIDRet = 0x00;
 8000238:	2615      	movs	r6, #21
 800023a:	19bb      	adds	r3, r7, r6
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]
	halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 8000240:	197c      	adds	r4, r7, r5
 8000242:	19ba      	adds	r2, r7, r6
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	0011      	movs	r1, r2
 8000248:	0018      	movs	r0, r3
 800024a:	f000 f84f 	bl	80002ec <capTouch_ReadDeviceID>
 800024e:	0003      	movs	r3, r0
 8000250:	7023      	strb	r3, [r4, #0]

	if(deviceIDRet != DEVICE_ID || halRet != HAL_OK) {
 8000252:	19bb      	adds	r3, r7, r6
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b2e      	cmp	r3, #46	@ 0x2e
 8000258:	d103      	bne.n	8000262 <capTouch_Init+0x46>
 800025a:	197b      	adds	r3, r7, r5
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <capTouch_Init+0x4a>
		return 1;
 8000262:	2301      	movs	r3, #1
 8000264:	e03e      	b.n	80002e4 <capTouch_Init+0xc8>
	}

	capTouch->deviceID = deviceIDRet;
 8000266:	2315      	movs	r3, #21
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	781a      	ldrb	r2, [r3, #0]
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	711a      	strb	r2, [r3, #4]

	// Force Device Recalibration
	halRet = capTouch_Recalibrate(capTouch);
 8000270:	2517      	movs	r5, #23
 8000272:	197c      	adds	r4, r7, r5
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	0018      	movs	r0, r3
 8000278:	f000 f87a 	bl	8000370 <capTouch_Recalibrate>
 800027c:	0003      	movs	r3, r0
 800027e:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000280:	197b      	adds	r3, r7, r5
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <capTouch_Init+0x70>
		return 2;
 8000288:	2302      	movs	r3, #2
 800028a:	e02b      	b.n	80002e4 <capTouch_Init+0xc8>
	}

	// Wait until calibration sequence completes
	while(capTouch_checkCal(capTouch)) {}
 800028c:	46c0      	nop			@ (mov r8, r8)
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	0018      	movs	r0, r3
 8000292:	f000 f88f 	bl	80003b4 <capTouch_checkCal>
 8000296:	1e03      	subs	r3, r0, #0
 8000298:	d1f9      	bne.n	800028e <capTouch_Init+0x72>

	// Get initial reading of channels
	uint8_t keyStatus = capTouch_readChannels(capTouch);
 800029a:	2316      	movs	r3, #22
 800029c:	18fc      	adds	r4, r7, r3
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	0018      	movs	r0, r3
 80002a2:	f000 f8c3 	bl	800042c <capTouch_readChannels>
 80002a6:	0003      	movs	r3, r0
 80002a8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 80002aa:	2317      	movs	r3, #23
 80002ac:	18fb      	adds	r3, r7, r3
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <capTouch_Init+0x9c>
		return 3;
 80002b4:	2303      	movs	r3, #3
 80002b6:	e015      	b.n	80002e4 <capTouch_Init+0xc8>
	}

	halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80002b8:	2517      	movs	r5, #23
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	1dfb      	adds	r3, r7, #7
 80002be:	781a      	ldrb	r2, [r3, #0]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ed 	bl	80004a4 <capTouch_enableKeys>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <capTouch_Init+0xbe>
		return 4;
 80002d6:	2304      	movs	r3, #4
 80002d8:	e004      	b.n	80002e4 <capTouch_Init+0xc8>
	}
	capTouch->keys = keyEnFlags;
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	1dfa      	adds	r2, r7, #7
 80002de:	7812      	ldrb	r2, [r2, #0]
 80002e0:	715a      	strb	r2, [r3, #5]

	return 0;
 80002e2:	2300      	movs	r3, #0

}
 80002e4:	0018      	movs	r0, r3
 80002e6:	46bd      	mov	sp, r7
 80002e8:	b007      	add	sp, #28
 80002ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002ec <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ee:	b087      	sub	sp, #28
 80002f0:	af02      	add	r7, sp, #8
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 80002f6:	260e      	movs	r6, #14
 80002f8:	19bb      	adds	r3, r7, r6
 80002fa:	2200      	movs	r2, #0
 80002fc:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80002fe:	250f      	movs	r5, #15
 8000300:	197b      	adds	r3, r7, r5
 8000302:	2200      	movs	r2, #0
 8000304:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 8000306:	210c      	movs	r1, #12
 8000308:	187b      	adds	r3, r7, r1
 800030a:	4a18      	ldr	r2, [pc, #96]	@ (800036c <capTouch_ReadDeviceID+0x80>)
 800030c:	7812      	ldrb	r2, [r2, #0]
 800030e:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	6818      	ldr	r0, [r3, #0]
 8000314:	197c      	adds	r4, r7, r5
 8000316:	187a      	adds	r2, r7, r1
 8000318:	2301      	movs	r3, #1
 800031a:	425b      	negs	r3, r3
 800031c:	9300      	str	r3, [sp, #0]
 800031e:	2301      	movs	r3, #1
 8000320:	2136      	movs	r1, #54	@ 0x36
 8000322:	f002 fe35 	bl	8002f90 <HAL_I2C_Master_Transmit>
 8000326:	0003      	movs	r3, r0
 8000328:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	6818      	ldr	r0, [r3, #0]
 800032e:	197c      	adds	r4, r7, r5
 8000330:	19ba      	adds	r2, r7, r6
 8000332:	2301      	movs	r3, #1
 8000334:	425b      	negs	r3, r3
 8000336:	9300      	str	r3, [sp, #0]
 8000338:	2301      	movs	r3, #1
 800033a:	2136      	movs	r1, #54	@ 0x36
 800033c:	f002 ff52 	bl	80031e4 <HAL_I2C_Master_Receive>
 8000340:	0003      	movs	r3, r0
 8000342:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000344:	197b      	adds	r3, r7, r5
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d002      	beq.n	8000352 <capTouch_ReadDeviceID+0x66>
		return halRet;
 800034c:	197b      	adds	r3, r7, r5
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	e007      	b.n	8000362 <capTouch_ReadDeviceID+0x76>

	*dataBuff = deviceIDRet_I2C;
 8000352:	230e      	movs	r3, #14
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	781a      	ldrb	r2, [r3, #0]
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	701a      	strb	r2, [r3, #0]

	return halRet;
 800035c:	230f      	movs	r3, #15
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	781b      	ldrb	r3, [r3, #0]

}
 8000362:	0018      	movs	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	b005      	add	sp, #20
 8000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036a:	46c0      	nop			@ (mov r8, r8)
 800036c:	08005ff8 	.word	0x08005ff8

08000370 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 8000370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000372:	b087      	sub	sp, #28
 8000374:	af02      	add	r7, sp, #8
 8000376:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000378:	210f      	movs	r1, #15
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 8000380:	260c      	movs	r6, #12
 8000382:	19bb      	adds	r3, r7, r6
 8000384:	22c8      	movs	r2, #200	@ 0xc8
 8000386:	4252      	negs	r2, r2
 8000388:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	6818      	ldr	r0, [r3, #0]
 800038e:	000d      	movs	r5, r1
 8000390:	187c      	adds	r4, r7, r1
 8000392:	19ba      	adds	r2, r7, r6
 8000394:	2301      	movs	r3, #1
 8000396:	425b      	negs	r3, r3
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	2302      	movs	r3, #2
 800039c:	2136      	movs	r1, #54	@ 0x36
 800039e:	f002 fdf7 	bl	8002f90 <HAL_I2C_Master_Transmit>
 80003a2:	0003      	movs	r3, r0
 80003a4:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80003a6:	197b      	adds	r3, r7, r5
 80003a8:	781b      	ldrb	r3, [r3, #0]

}
 80003aa:	0018      	movs	r0, r3
 80003ac:	46bd      	mov	sp, r7
 80003ae:	b005      	add	sp, #20
 80003b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080003b4 <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80003b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003b6:	b087      	sub	sp, #28
 80003b8:	af02      	add	r7, sp, #8
 80003ba:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80003bc:	210f      	movs	r1, #15
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80003c4:	260d      	movs	r6, #13
 80003c6:	19bb      	adds	r3, r7, r6
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 80003cc:	230c      	movs	r3, #12
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	4a15      	ldr	r2, [pc, #84]	@ (8000428 <capTouch_checkCal+0x74>)
 80003d2:	7812      	ldrb	r2, [r2, #0]
 80003d4:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	6818      	ldr	r0, [r3, #0]
 80003da:	000d      	movs	r5, r1
 80003dc:	187c      	adds	r4, r7, r1
 80003de:	230c      	movs	r3, #12
 80003e0:	18fa      	adds	r2, r7, r3
 80003e2:	2301      	movs	r3, #1
 80003e4:	425b      	negs	r3, r3
 80003e6:	9300      	str	r3, [sp, #0]
 80003e8:	2301      	movs	r3, #1
 80003ea:	2136      	movs	r1, #54	@ 0x36
 80003ec:	f002 fdd0 	bl	8002f90 <HAL_I2C_Master_Transmit>
 80003f0:	0003      	movs	r3, r0
 80003f2:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	6818      	ldr	r0, [r3, #0]
 80003f8:	197c      	adds	r4, r7, r5
 80003fa:	19ba      	adds	r2, r7, r6
 80003fc:	2301      	movs	r3, #1
 80003fe:	425b      	negs	r3, r3
 8000400:	9300      	str	r3, [sp, #0]
 8000402:	2301      	movs	r3, #1
 8000404:	2136      	movs	r1, #54	@ 0x36
 8000406:	f002 feed 	bl	80031e4 <HAL_I2C_Master_Receive>
 800040a:	0003      	movs	r3, r0
 800040c:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 800040e:	19bb      	adds	r3, r7, r6
 8000410:	781a      	ldrb	r2, [r3, #0]
 8000412:	210e      	movs	r1, #14
 8000414:	187b      	adds	r3, r7, r1
 8000416:	09d2      	lsrs	r2, r2, #7
 8000418:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 800041a:	187b      	adds	r3, r7, r1
 800041c:	781b      	ldrb	r3, [r3, #0]

}
 800041e:	0018      	movs	r0, r3
 8000420:	46bd      	mov	sp, r7
 8000422:	b005      	add	sp, #20
 8000424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	08005ffc 	.word	0x08005ffc

0800042c <capTouch_readChannels>:

uint8_t capTouch_readChannels(QT1070 *capTouch) {
 800042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042e:	b087      	sub	sp, #28
 8000430:	af02      	add	r7, sp, #8
 8000432:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000434:	210f      	movs	r1, #15
 8000436:	187b      	adds	r3, r7, r1
 8000438:	2200      	movs	r2, #0
 800043a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 800043c:	250e      	movs	r5, #14
 800043e:	197b      	adds	r3, r7, r5
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 8000444:	230c      	movs	r3, #12
 8000446:	18fb      	adds	r3, r7, r3
 8000448:	4a15      	ldr	r2, [pc, #84]	@ (80004a0 <capTouch_readChannels+0x74>)
 800044a:	7812      	ldrb	r2, [r2, #0]
 800044c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	6818      	ldr	r0, [r3, #0]
 8000452:	000e      	movs	r6, r1
 8000454:	187c      	adds	r4, r7, r1
 8000456:	230c      	movs	r3, #12
 8000458:	18fa      	adds	r2, r7, r3
 800045a:	2301      	movs	r3, #1
 800045c:	425b      	negs	r3, r3
 800045e:	9300      	str	r3, [sp, #0]
 8000460:	2301      	movs	r3, #1
 8000462:	2136      	movs	r1, #54	@ 0x36
 8000464:	f002 fd94 	bl	8002f90 <HAL_I2C_Master_Transmit>
 8000468:	0003      	movs	r3, r0
 800046a:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	6818      	ldr	r0, [r3, #0]
 8000470:	19bc      	adds	r4, r7, r6
 8000472:	197a      	adds	r2, r7, r5
 8000474:	2301      	movs	r3, #1
 8000476:	425b      	negs	r3, r3
 8000478:	9300      	str	r3, [sp, #0]
 800047a:	2301      	movs	r3, #1
 800047c:	2136      	movs	r1, #54	@ 0x36
 800047e:	f002 feb1 	bl	80031e4 <HAL_I2C_Master_Receive>
 8000482:	0003      	movs	r3, r0
 8000484:	7023      	strb	r3, [r4, #0]

	keyStatusRet = keyStatusRet & 0b01111111;
 8000486:	197b      	adds	r3, r7, r5
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	227f      	movs	r2, #127	@ 0x7f
 800048c:	4013      	ands	r3, r2
 800048e:	b2da      	uxtb	r2, r3
 8000490:	197b      	adds	r3, r7, r5
 8000492:	701a      	strb	r2, [r3, #0]

	return keyStatusRet;
 8000494:	197b      	adds	r3, r7, r5
 8000496:	781b      	ldrb	r3, [r3, #0]

}
 8000498:	0018      	movs	r0, r3
 800049a:	46bd      	mov	sp, r7
 800049c:	b005      	add	sp, #20
 800049e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a0:	08006000 	.word	0x08006000

080004a4 <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	b08b      	sub	sp, #44	@ 0x2c
 80004a8:	af02      	add	r7, sp, #8
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	000a      	movs	r2, r1
 80004ae:	1cfb      	adds	r3, r7, #3
 80004b0:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b2:	241b      	movs	r4, #27
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	2200      	movs	r2, #0
 80004b8:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80004ba:	2614      	movs	r6, #20
 80004bc:	19bb      	adds	r3, r7, r6
 80004be:	4a32      	ldr	r2, [pc, #200]	@ (8000588 <capTouch_enableKeys+0xe4>)
 80004c0:	6811      	ldr	r1, [r2, #0]
 80004c2:	6019      	str	r1, [r3, #0]
 80004c4:	8891      	ldrh	r1, [r2, #4]
 80004c6:	8099      	strh	r1, [r3, #4]
 80004c8:	7992      	ldrb	r2, [r2, #6]
 80004ca:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 80004cc:	230c      	movs	r3, #12
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	4a2e      	ldr	r2, [pc, #184]	@ (800058c <capTouch_enableKeys+0xe8>)
 80004d2:	6811      	ldr	r1, [r2, #0]
 80004d4:	6019      	str	r1, [r3, #0]
 80004d6:	8891      	ldrh	r1, [r2, #4]
 80004d8:	8099      	strh	r1, [r3, #4]
 80004da:	7992      	ldrb	r2, [r2, #6]
 80004dc:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6818      	ldr	r0, [r3, #0]
 80004e2:	0025      	movs	r5, r4
 80004e4:	193c      	adds	r4, r7, r4
 80004e6:	230c      	movs	r3, #12
 80004e8:	18fa      	adds	r2, r7, r3
 80004ea:	2301      	movs	r3, #1
 80004ec:	425b      	negs	r3, r3
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2301      	movs	r3, #1
 80004f2:	2136      	movs	r1, #54	@ 0x36
 80004f4:	f002 fd4c 	bl	8002f90 <HAL_I2C_Master_Transmit>
 80004f8:	0003      	movs	r3, r0
 80004fa:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	6818      	ldr	r0, [r3, #0]
 8000500:	197c      	adds	r4, r7, r5
 8000502:	19ba      	adds	r2, r7, r6
 8000504:	2301      	movs	r3, #1
 8000506:	425b      	negs	r3, r3
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	2307      	movs	r3, #7
 800050c:	2136      	movs	r1, #54	@ 0x36
 800050e:	f002 fe69 	bl	80031e4 <HAL_I2C_Master_Receive>
 8000512:	0003      	movs	r3, r0
 8000514:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000516:	197b      	adds	r3, r7, r5
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d002      	beq.n	8000524 <capTouch_enableKeys+0x80>
		return halRet;
 800051e:	197b      	adds	r3, r7, r5
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	e02c      	b.n	800057e <capTouch_enableKeys+0xda>

	int i; //temp;

	for(i = 0; i <= 6; i++) {
 8000524:	2300      	movs	r3, #0
 8000526:	61fb      	str	r3, [r7, #28]
 8000528:	e019      	b.n	800055e <capTouch_enableKeys+0xba>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 800052a:	2014      	movs	r0, #20
 800052c:	183a      	adds	r2, r7, r0
 800052e:	69fb      	ldr	r3, [r7, #28]
 8000530:	18d3      	adds	r3, r2, r3
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	089b      	lsrs	r3, r3, #2
 8000536:	b2db      	uxtb	r3, r3
 8000538:	1cfa      	adds	r2, r7, #3
 800053a:	7811      	ldrb	r1, [r2, #0]
 800053c:	69fa      	ldr	r2, [r7, #28]
 800053e:	4111      	asrs	r1, r2
 8000540:	000a      	movs	r2, r1
 8000542:	b2d2      	uxtb	r2, r2
 8000544:	2101      	movs	r1, #1
 8000546:	400a      	ands	r2, r1
 8000548:	b2d2      	uxtb	r2, r2
 800054a:	4353      	muls	r3, r2
 800054c:	b2d9      	uxtb	r1, r3
 800054e:	183a      	adds	r2, r7, r0
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	18d3      	adds	r3, r2, r3
 8000554:	1c0a      	adds	r2, r1, #0
 8000556:	701a      	strb	r2, [r3, #0]
	for(i = 0; i <= 6; i++) {
 8000558:	69fb      	ldr	r3, [r7, #28]
 800055a:	3301      	adds	r3, #1
 800055c:	61fb      	str	r3, [r7, #28]
 800055e:	69fb      	ldr	r3, [r7, #28]
 8000560:	2b06      	cmp	r3, #6
 8000562:	dde2      	ble.n	800052a <capTouch_enableKeys+0x86>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 8000564:	251b      	movs	r5, #27
 8000566:	197c      	adds	r4, r7, r5
 8000568:	2314      	movs	r3, #20
 800056a:	18fa      	adds	r2, r7, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	0011      	movs	r1, r2
 8000570:	0018      	movs	r0, r3
 8000572:	f000 f80d 	bl	8000590 <capTouch_SetAveragingFactor>
 8000576:	0003      	movs	r3, r0
 8000578:	7023      	strb	r3, [r4, #0]

	return halRet;
 800057a:	197b      	adds	r3, r7, r5
 800057c:	781b      	ldrb	r3, [r3, #0]

}
 800057e:	0018      	movs	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	b009      	add	sp, #36	@ 0x24
 8000584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	08006004 	.word	0x08006004
 800058c:	0800600c 	.word	0x0800600c

08000590 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	b08b      	sub	sp, #44	@ 0x2c
 8000594:	af02      	add	r7, sp, #8
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800059a:	241e      	movs	r4, #30
 800059c:	193b      	adds	r3, r7, r4
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80005a2:	2614      	movs	r6, #20
 80005a4:	19bb      	adds	r3, r7, r6
 80005a6:	4a51      	ldr	r2, [pc, #324]	@ (80006ec <capTouch_SetAveragingFactor+0x15c>)
 80005a8:	6811      	ldr	r1, [r2, #0]
 80005aa:	6019      	str	r1, [r3, #0]
 80005ac:	8891      	ldrh	r1, [r2, #4]
 80005ae:	8099      	strh	r1, [r3, #4]
 80005b0:	7992      	ldrb	r2, [r2, #6]
 80005b2:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 80005b4:	230c      	movs	r3, #12
 80005b6:	18fb      	adds	r3, r7, r3
 80005b8:	4a4d      	ldr	r2, [pc, #308]	@ (80006f0 <capTouch_SetAveragingFactor+0x160>)
 80005ba:	6811      	ldr	r1, [r2, #0]
 80005bc:	6019      	str	r1, [r3, #0]
 80005be:	8891      	ldrh	r1, [r2, #4]
 80005c0:	8099      	strh	r1, [r3, #4]
 80005c2:	7992      	ldrb	r2, [r2, #6]
 80005c4:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6818      	ldr	r0, [r3, #0]
 80005ca:	0025      	movs	r5, r4
 80005cc:	193c      	adds	r4, r7, r4
 80005ce:	230c      	movs	r3, #12
 80005d0:	18fa      	adds	r2, r7, r3
 80005d2:	2301      	movs	r3, #1
 80005d4:	425b      	negs	r3, r3
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2301      	movs	r3, #1
 80005da:	2136      	movs	r1, #54	@ 0x36
 80005dc:	f002 fcd8 	bl	8002f90 <HAL_I2C_Master_Transmit>
 80005e0:	0003      	movs	r3, r0
 80005e2:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6818      	ldr	r0, [r3, #0]
 80005e8:	197c      	adds	r4, r7, r5
 80005ea:	19ba      	adds	r2, r7, r6
 80005ec:	2301      	movs	r3, #1
 80005ee:	425b      	negs	r3, r3
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2307      	movs	r3, #7
 80005f4:	2136      	movs	r1, #54	@ 0x36
 80005f6:	f002 fdf5 	bl	80031e4 <HAL_I2C_Master_Receive>
 80005fa:	0003      	movs	r3, r0
 80005fc:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80005fe:	197b      	adds	r3, r7, r5
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d002      	beq.n	800060c <capTouch_SetAveragingFactor+0x7c>
		return halRet;
 8000606:	197b      	adds	r3, r7, r5
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	e06a      	b.n	80006e2 <capTouch_SetAveragingFactor+0x152>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 800060c:	2308      	movs	r3, #8
 800060e:	18fb      	adds	r3, r7, r3
 8000610:	2200      	movs	r2, #0
 8000612:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000614:	231d      	movs	r3, #29
 8000616:	18fb      	adds	r3, r7, r3
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800061c:	231f      	movs	r3, #31
 800061e:	18fb      	adds	r3, r7, r3
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	e039      	b.n	800069a <capTouch_SetAveragingFactor+0x10a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 8000626:	251f      	movs	r5, #31
 8000628:	197b      	adds	r3, r7, r5
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2214      	movs	r2, #20
 800062e:	18ba      	adds	r2, r7, r2
 8000630:	5cd2      	ldrb	r2, [r2, r3]
 8000632:	201d      	movs	r0, #29
 8000634:	183b      	adds	r3, r7, r0
 8000636:	2103      	movs	r1, #3
 8000638:	400a      	ands	r2, r1
 800063a:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 800063c:	197b      	adds	r3, r7, r5
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	18d3      	adds	r3, r2, r3
 8000644:	781a      	ldrb	r2, [r3, #0]
 8000646:	241c      	movs	r4, #28
 8000648:	193b      	adds	r3, r7, r4
 800064a:	0092      	lsls	r2, r2, #2
 800064c:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 800064e:	183b      	adds	r3, r7, r0
 8000650:	1839      	adds	r1, r7, r0
 8000652:	193a      	adds	r2, r7, r4
 8000654:	7809      	ldrb	r1, [r1, #0]
 8000656:	7812      	ldrb	r2, [r2, #0]
 8000658:	430a      	orrs	r2, r1
 800065a:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 800065c:	197b      	adds	r3, r7, r5
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	220c      	movs	r2, #12
 8000662:	18ba      	adds	r2, r7, r2
 8000664:	5cd2      	ldrb	r2, [r2, r3]
 8000666:	2108      	movs	r1, #8
 8000668:	187b      	adds	r3, r7, r1
 800066a:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	183a      	adds	r2, r7, r0
 8000670:	7812      	ldrb	r2, [r2, #0]
 8000672:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6818      	ldr	r0, [r3, #0]
 8000678:	231e      	movs	r3, #30
 800067a:	18fc      	adds	r4, r7, r3
 800067c:	187a      	adds	r2, r7, r1
 800067e:	2301      	movs	r3, #1
 8000680:	425b      	negs	r3, r3
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2302      	movs	r3, #2
 8000686:	2136      	movs	r1, #54	@ 0x36
 8000688:	f002 fc82 	bl	8002f90 <HAL_I2C_Master_Transmit>
 800068c:	0003      	movs	r3, r0
 800068e:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 8000690:	197b      	adds	r3, r7, r5
 8000692:	781a      	ldrb	r2, [r3, #0]
 8000694:	197b      	adds	r3, r7, r5
 8000696:	3201      	adds	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	231f      	movs	r3, #31
 800069c:	18fb      	adds	r3, r7, r3
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d9c0      	bls.n	8000626 <capTouch_SetAveragingFactor+0x96>
									avgRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6818      	ldr	r0, [r3, #0]
 80006a8:	251e      	movs	r5, #30
 80006aa:	197c      	adds	r4, r7, r5
 80006ac:	230c      	movs	r3, #12
 80006ae:	18fa      	adds	r2, r7, r3
 80006b0:	2301      	movs	r3, #1
 80006b2:	425b      	negs	r3, r3
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	2136      	movs	r1, #54	@ 0x36
 80006ba:	f002 fc69 	bl	8002f90 <HAL_I2C_Master_Transmit>
 80006be:	0003      	movs	r3, r0
 80006c0:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6818      	ldr	r0, [r3, #0]
 80006c6:	197c      	adds	r4, r7, r5
 80006c8:	2314      	movs	r3, #20
 80006ca:	18fa      	adds	r2, r7, r3
 80006cc:	2301      	movs	r3, #1
 80006ce:	425b      	negs	r3, r3
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2307      	movs	r3, #7
 80006d4:	2136      	movs	r1, #54	@ 0x36
 80006d6:	f002 fd85 	bl	80031e4 <HAL_I2C_Master_Receive>
 80006da:	0003      	movs	r3, r0
 80006dc:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006de:	197b      	adds	r3, r7, r5
 80006e0:	781b      	ldrb	r3, [r3, #0]

}
 80006e2:	0018      	movs	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b009      	add	sp, #36	@ 0x24
 80006e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	08006004 	.word	0x08006004
 80006f0:	0800600c 	.word	0x0800600c

080006f4 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 80006f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f6:	b08b      	sub	sp, #44	@ 0x2c
 80006f8:	af02      	add	r7, sp, #8
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80006fe:	231e      	movs	r3, #30
 8000700:	18fb      	adds	r3, r7, r3
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 8000706:	2314      	movs	r3, #20
 8000708:	18fb      	adds	r3, r7, r3
 800070a:	4a31      	ldr	r2, [pc, #196]	@ (80007d0 <capTouch_SetDetectionIntegrator+0xdc>)
 800070c:	6811      	ldr	r1, [r2, #0]
 800070e:	6019      	str	r1, [r3, #0]
 8000710:	8891      	ldrh	r1, [r2, #4]
 8000712:	8099      	strh	r1, [r3, #4]
 8000714:	7992      	ldrb	r2, [r2, #6]
 8000716:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 8000718:	2310      	movs	r3, #16
 800071a:	18fb      	adds	r3, r7, r3
 800071c:	2200      	movs	r2, #0
 800071e:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 8000720:	231f      	movs	r3, #31
 8000722:	18fb      	adds	r3, r7, r3
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
 8000728:	e022      	b.n	8000770 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 800072a:	251f      	movs	r5, #31
 800072c:	197b      	adds	r3, r7, r5
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2214      	movs	r2, #20
 8000732:	18ba      	adds	r2, r7, r2
 8000734:	5cd2      	ldrb	r2, [r2, r3]
 8000736:	2110      	movs	r1, #16
 8000738:	187b      	adds	r3, r7, r1
 800073a:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 800073c:	197b      	adds	r3, r7, r5
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	18d3      	adds	r3, r2, r3
 8000744:	781a      	ldrb	r2, [r3, #0]
 8000746:	187b      	adds	r3, r7, r1
 8000748:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6818      	ldr	r0, [r3, #0]
 800074e:	231e      	movs	r3, #30
 8000750:	18fc      	adds	r4, r7, r3
 8000752:	187a      	adds	r2, r7, r1
 8000754:	2301      	movs	r3, #1
 8000756:	425b      	negs	r3, r3
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2302      	movs	r3, #2
 800075c:	2136      	movs	r1, #54	@ 0x36
 800075e:	f002 fc17 	bl	8002f90 <HAL_I2C_Master_Transmit>
 8000762:	0003      	movs	r3, r0
 8000764:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 8000766:	197b      	adds	r3, r7, r5
 8000768:	781a      	ldrb	r2, [r3, #0]
 800076a:	197b      	adds	r3, r7, r5
 800076c:	3201      	adds	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
 8000770:	231f      	movs	r3, #31
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b06      	cmp	r3, #6
 8000778:	d9d7      	bls.n	800072a <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800077a:	2608      	movs	r6, #8
 800077c:	19bb      	adds	r3, r7, r6
 800077e:	4a15      	ldr	r2, [pc, #84]	@ (80007d4 <capTouch_SetDetectionIntegrator+0xe0>)
 8000780:	6811      	ldr	r1, [r2, #0]
 8000782:	6019      	str	r1, [r3, #0]
 8000784:	8891      	ldrh	r1, [r2, #4]
 8000786:	8099      	strh	r1, [r3, #4]
 8000788:	7992      	ldrb	r2, [r2, #6]
 800078a:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6818      	ldr	r0, [r3, #0]
 8000790:	251e      	movs	r5, #30
 8000792:	197c      	adds	r4, r7, r5
 8000794:	2314      	movs	r3, #20
 8000796:	18fa      	adds	r2, r7, r3
 8000798:	2301      	movs	r3, #1
 800079a:	425b      	negs	r3, r3
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	2301      	movs	r3, #1
 80007a0:	2136      	movs	r1, #54	@ 0x36
 80007a2:	f002 fbf5 	bl	8002f90 <HAL_I2C_Master_Transmit>
 80007a6:	0003      	movs	r3, r0
 80007a8:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6818      	ldr	r0, [r3, #0]
 80007ae:	197c      	adds	r4, r7, r5
 80007b0:	19ba      	adds	r2, r7, r6
 80007b2:	2301      	movs	r3, #1
 80007b4:	425b      	negs	r3, r3
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	2307      	movs	r3, #7
 80007ba:	2136      	movs	r1, #54	@ 0x36
 80007bc:	f002 fd12 	bl	80031e4 <HAL_I2C_Master_Receive>
 80007c0:	0003      	movs	r3, r0
 80007c2:	7023      	strb	r3, [r4, #0]

	return halRet;
 80007c4:	197b      	adds	r3, r7, r5
 80007c6:	781b      	ldrb	r3, [r3, #0]

}
 80007c8:	0018      	movs	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b009      	add	sp, #36	@ 0x24
 80007ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d0:	08006014 	.word	0x08006014
 80007d4:	08006004 	.word	0x08006004

080007d8 <getRTCTime>:
				internalAlarm_initTest.AlarmTime.Minutes, internalAlarm_initTest.AlarmTime.Seconds);
	}

}

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 80007e4:	68b9      	ldr	r1, [r7, #8]
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2200      	movs	r2, #0
 80007ea:	0018      	movs	r0, r3
 80007ec:	f004 f924 	bl	8004a38 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 80007f0:	6879      	ldr	r1, [r7, #4]
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	2200      	movs	r2, #0
 80007f6:	0018      	movs	r0, r3
 80007f8:	f004 fa0c 	bl	8004c14 <HAL_RTC_GetDate>

}
 80007fc:	46c0      	nop			@ (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b004      	add	sp, #16
 8000802:	bd80      	pop	{r7, pc}

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000806:	b08b      	sub	sp, #44	@ 0x2c
 8000808:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080a:	f001 fb4b 	bl	8001ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080e:	f000 f87b 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000812:	f000 facb 	bl	8000dac <MX_GPIO_Init>
  MX_ADC1_Init();
 8000816:	f000 f8e3 	bl	80009e0 <MX_ADC1_Init>
  MX_RTC_Init();
 800081a:	f000 f98d 	bl	8000b38 <MX_RTC_Init>
  MX_I2C1_Init();
 800081e:	f000 f94b 	bl	8000ab8 <MX_I2C1_Init>
  MX_TIM14_Init();
 8000822:	f000 fa9d 	bl	8000d60 <MX_TIM14_Init>
  MX_TIM2_Init();
 8000826:	f000 fa3b 	bl	8000ca0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 800082a:	2380      	movs	r3, #128	@ 0x80
 800082c:	009c      	lsls	r4, r3, #2
 800082e:	2380      	movs	r3, #128	@ 0x80
 8000830:	00dd      	lsls	r5, r3, #3
 8000832:	2680      	movs	r6, #128	@ 0x80
 8000834:	2340      	movs	r3, #64	@ 0x40
 8000836:	469c      	mov	ip, r3
 8000838:	2380      	movs	r3, #128	@ 0x80
 800083a:	011a      	lsls	r2, r3, #4
 800083c:	4b28      	ldr	r3, [pc, #160]	@ (80008e0 <main+0xdc>)
 800083e:	6819      	ldr	r1, [r3, #0]
 8000840:	4b28      	ldr	r3, [pc, #160]	@ (80008e4 <main+0xe0>)
 8000842:	6818      	ldr	r0, [r3, #0]
 8000844:	4b28      	ldr	r3, [pc, #160]	@ (80008e8 <main+0xe4>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	9304      	str	r3, [sp, #16]
 800084a:	9003      	str	r0, [sp, #12]
 800084c:	9102      	str	r1, [sp, #8]
 800084e:	4b27      	ldr	r3, [pc, #156]	@ (80008ec <main+0xe8>)
 8000850:	9301      	str	r3, [sp, #4]
 8000852:	9200      	str	r2, [sp, #0]
 8000854:	4663      	mov	r3, ip
 8000856:	0032      	movs	r2, r6
 8000858:	0029      	movs	r1, r5
 800085a:	0020      	movs	r0, r4
 800085c:	f000 ff0e 	bl	800167c <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);

	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 8000860:	250f      	movs	r5, #15
 8000862:	197c      	adds	r4, r7, r5
 8000864:	f000 fb74 	bl	8000f50 <updateAndDisplayTime>
 8000868:	0003      	movs	r3, r0
 800086a:	7023      	strb	r3, [r4, #0]

    /*
     * Initialize capacitive touch sensor
     */

    halRet = capTouch_Init(&capTouch, &hi2c1, 0b00001111);
 800086c:	197c      	adds	r4, r7, r5
 800086e:	4920      	ldr	r1, [pc, #128]	@ (80008f0 <main+0xec>)
 8000870:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <main+0xf0>)
 8000872:	220f      	movs	r2, #15
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff fcd1 	bl	800021c <capTouch_Init>
 800087a:	0003      	movs	r3, r0
 800087c:	7023      	strb	r3, [r4, #0]

    // Max. out averaging factor
    uint8_t avgFactors_New[7] = {32, 32, 32, 32, 0, 0, 0};
 800087e:	2008      	movs	r0, #8
 8000880:	183b      	adds	r3, r7, r0
 8000882:	4a1d      	ldr	r2, [pc, #116]	@ (80008f8 <main+0xf4>)
 8000884:	6811      	ldr	r1, [r2, #0]
 8000886:	6019      	str	r1, [r3, #0]
 8000888:	8891      	ldrh	r1, [r2, #4]
 800088a:	8099      	strh	r1, [r3, #4]
 800088c:	7992      	ldrb	r2, [r2, #6]
 800088e:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000890:	197c      	adds	r4, r7, r5
 8000892:	183a      	adds	r2, r7, r0
 8000894:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <main+0xf0>)
 8000896:	0011      	movs	r1, r2
 8000898:	0018      	movs	r0, r3
 800089a:	f7ff fe79 	bl	8000590 <capTouch_SetAveragingFactor>
 800089e:	0003      	movs	r3, r0
 80008a0:	7023      	strb	r3, [r4, #0]

    // Set detection integration factors
    uint8_t detIntFactors_New[7] = {0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04};
 80008a2:	003b      	movs	r3, r7
 80008a4:	4a15      	ldr	r2, [pc, #84]	@ (80008fc <main+0xf8>)
 80008a6:	6811      	ldr	r1, [r2, #0]
 80008a8:	6019      	str	r1, [r3, #0]
 80008aa:	8891      	ldrh	r1, [r2, #4]
 80008ac:	8099      	strh	r1, [r3, #4]
 80008ae:	7992      	ldrb	r2, [r2, #6]
 80008b0:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 80008b2:	197c      	adds	r4, r7, r5
 80008b4:	003a      	movs	r2, r7
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <main+0xf0>)
 80008b8:	0011      	movs	r1, r2
 80008ba:	0018      	movs	r0, r3
 80008bc:	f7ff ff1a 	bl	80006f4 <capTouch_SetDetectionIntegrator>
 80008c0:	0003      	movs	r3, r0
 80008c2:	7023      	strb	r3, [r4, #0]

	userAlarmToggle = false;			//Default to off
 80008c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <main+0xfc>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]

    // User alarm default value
    userAlarmTime.Hours = 1;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <main+0x100>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
    userAlarmTime.Minutes = 1;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <main+0x100>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	705a      	strb	r2, [r3, #1]
    userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <main+0x100>)
 80008d8:	2200      	movs	r2, #0
 80008da:	70da      	strb	r2, [r3, #3]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008dc:	46c0      	nop			@ (mov r8, r8)
 80008de:	e7fd      	b.n	80008dc <main+0xd8>
 80008e0:	20000024 	.word	0x20000024
 80008e4:	20000028 	.word	0x20000028
 80008e8:	2000002c 	.word	0x2000002c
 80008ec:	2000000c 	.word	0x2000000c
 80008f0:	200000d8 	.word	0x200000d8
 80008f4:	20000220 	.word	0x20000220
 80008f8:	0800601c 	.word	0x0800601c
 80008fc:	08006024 	.word	0x08006024
 8000900:	20000071 	.word	0x20000071
 8000904:	20000208 	.word	0x20000208

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b093      	sub	sp, #76	@ 0x4c
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	2410      	movs	r4, #16
 8000910:	193b      	adds	r3, r7, r4
 8000912:	0018      	movs	r0, r3
 8000914:	2338      	movs	r3, #56	@ 0x38
 8000916:	001a      	movs	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	f005 fb35 	bl	8005f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091e:	003b      	movs	r3, r7
 8000920:	0018      	movs	r0, r3
 8000922:	2310      	movs	r3, #16
 8000924:	001a      	movs	r2, r3
 8000926:	2100      	movs	r1, #0
 8000928:	f005 fb2e 	bl	8005f88 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800092c:	2380      	movs	r3, #128	@ 0x80
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	0018      	movs	r0, r3
 8000932:	f003 f8d9 	bl	8003ae8 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000936:	f003 f8c9 	bl	8003acc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800093a:	4b28      	ldr	r3, [pc, #160]	@ (80009dc <SystemClock_Config+0xd4>)
 800093c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800093e:	4b27      	ldr	r3, [pc, #156]	@ (80009dc <SystemClock_Config+0xd4>)
 8000940:	2118      	movs	r1, #24
 8000942:	438a      	bics	r2, r1
 8000944:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000946:	193b      	adds	r3, r7, r4
 8000948:	2206      	movs	r2, #6
 800094a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800094c:	193b      	adds	r3, r7, r4
 800094e:	2201      	movs	r2, #1
 8000950:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	2280      	movs	r2, #128	@ 0x80
 8000956:	0052      	lsls	r2, r2, #1
 8000958:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800095a:	0021      	movs	r1, r4
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2240      	movs	r2, #64	@ 0x40
 8000966:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2202      	movs	r2, #2
 800096c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2202      	movs	r2, #2
 8000972:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2208      	movs	r2, #8
 800097e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2280      	movs	r2, #128	@ 0x80
 8000984:	0292      	lsls	r2, r2, #10
 8000986:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2280      	movs	r2, #128	@ 0x80
 800098c:	0492      	lsls	r2, r2, #18
 800098e:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2280      	movs	r2, #128	@ 0x80
 8000994:	0592      	lsls	r2, r2, #22
 8000996:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000998:	187b      	adds	r3, r7, r1
 800099a:	0018      	movs	r0, r3
 800099c:	f003 f8e4 	bl	8003b68 <HAL_RCC_OscConfig>
 80009a0:	1e03      	subs	r3, r0, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80009a4:	f000 fe64 	bl	8001670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a8:	003b      	movs	r3, r7
 80009aa:	2207      	movs	r2, #7
 80009ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ae:	003b      	movs	r3, r7
 80009b0:	2202      	movs	r2, #2
 80009b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b4:	003b      	movs	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ba:	003b      	movs	r3, r7
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c0:	003b      	movs	r3, r7
 80009c2:	2102      	movs	r1, #2
 80009c4:	0018      	movs	r0, r3
 80009c6:	f003 fbe9 	bl	800419c <HAL_RCC_ClockConfig>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80009ce:	f000 fe4f 	bl	8001670 <Error_Handler>
  }
}
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b013      	add	sp, #76	@ 0x4c
 80009d8:	bd90      	pop	{r4, r7, pc}
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	40021000 	.word	0x40021000

080009e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	0018      	movs	r0, r3
 80009ea:	230c      	movs	r3, #12
 80009ec:	001a      	movs	r2, r3
 80009ee:	2100      	movs	r1, #0
 80009f0:	f005 faca 	bl	8005f88 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009f4:	4b2d      	ldr	r3, [pc, #180]	@ (8000aac <MX_ADC1_Init+0xcc>)
 80009f6:	4a2e      	ldr	r2, [pc, #184]	@ (8000ab0 <MX_ADC1_Init+0xd0>)
 80009f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009fa:	4b2c      	ldr	r3, [pc, #176]	@ (8000aac <MX_ADC1_Init+0xcc>)
 80009fc:	2280      	movs	r2, #128	@ 0x80
 80009fe:	05d2      	lsls	r2, r2, #23
 8000a00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a02:	4b2a      	ldr	r3, [pc, #168]	@ (8000aac <MX_ADC1_Init+0xcc>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a08:	4b28      	ldr	r3, [pc, #160]	@ (8000aac <MX_ADC1_Init+0xcc>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a0e:	4b27      	ldr	r3, [pc, #156]	@ (8000aac <MX_ADC1_Init+0xcc>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a14:	4b25      	ldr	r3, [pc, #148]	@ (8000aac <MX_ADC1_Init+0xcc>)
 8000a16:	2204      	movs	r2, #4
 8000a18:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a1a:	4b24      	ldr	r3, [pc, #144]	@ (8000aac <MX_ADC1_Init+0xcc>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000a20:	4b22      	ldr	r3, [pc, #136]	@ (8000aac <MX_ADC1_Init+0xcc>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a26:	4b21      	ldr	r3, [pc, #132]	@ (8000aac <MX_ADC1_Init+0xcc>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000aac <MX_ADC1_Init+0xcc>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a32:	4b1e      	ldr	r3, [pc, #120]	@ (8000aac <MX_ADC1_Init+0xcc>)
 8000a34:	2220      	movs	r2, #32
 8000a36:	2100      	movs	r1, #0
 8000a38:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aac <MX_ADC1_Init+0xcc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <MX_ADC1_Init+0xcc>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a46:	4b19      	ldr	r3, [pc, #100]	@ (8000aac <MX_ADC1_Init+0xcc>)
 8000a48:	222c      	movs	r2, #44	@ 0x2c
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a4e:	4b17      	ldr	r3, [pc, #92]	@ (8000aac <MX_ADC1_Init+0xcc>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000a54:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <MX_ADC1_Init+0xcc>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <MX_ADC1_Init+0xcc>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <MX_ADC1_Init+0xcc>)
 8000a62:	223c      	movs	r2, #60	@ 0x3c
 8000a64:	2100      	movs	r1, #0
 8000a66:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000a68:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <MX_ADC1_Init+0xcc>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <MX_ADC1_Init+0xcc>)
 8000a70:	0018      	movs	r0, r3
 8000a72:	f001 fb9b 	bl	80021ac <HAL_ADC_Init>
 8000a76:	1e03      	subs	r3, r0, #0
 8000a78:	d001      	beq.n	8000a7e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000a7a:	f000 fdf9 	bl	8001670 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab4 <MX_ADC1_Init+0xd4>)
 8000a82:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a90:	1d3a      	adds	r2, r7, #4
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <MX_ADC1_Init+0xcc>)
 8000a94:	0011      	movs	r1, r2
 8000a96:	0018      	movs	r0, r3
 8000a98:	f001 fd30 	bl	80024fc <HAL_ADC_ConfigChannel>
 8000a9c:	1e03      	subs	r3, r0, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000aa0:	f000 fde6 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b004      	add	sp, #16
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000074 	.word	0x20000074
 8000ab0:	40012400 	.word	0x40012400
 8000ab4:	08000004 	.word	0x08000004

08000ab8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000abe:	4a1c      	ldr	r2, [pc, #112]	@ (8000b30 <MX_I2C1_Init+0x78>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b34 <MX_I2C1_Init+0x7c>)
 8000ac6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ace:	4b17      	ldr	r3, [pc, #92]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ada:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000af4:	0018      	movs	r0, r3
 8000af6:	f002 f9a5 	bl	8002e44 <HAL_I2C_Init>
 8000afa:	1e03      	subs	r3, r0, #0
 8000afc:	d001      	beq.n	8000b02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000afe:	f000 fdb7 	bl	8001670 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b02:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000b04:	2100      	movs	r1, #0
 8000b06:	0018      	movs	r0, r3
 8000b08:	f002 ff48 	bl	800399c <HAL_I2CEx_ConfigAnalogFilter>
 8000b0c:	1e03      	subs	r3, r0, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b10:	f000 fdae 	bl	8001670 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b14:	4b05      	ldr	r3, [pc, #20]	@ (8000b2c <MX_I2C1_Init+0x74>)
 8000b16:	2100      	movs	r1, #0
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f002 ff8b 	bl	8003a34 <HAL_I2CEx_ConfigDigitalFilter>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d001      	beq.n	8000b26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b22:	f000 fda5 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200000d8 	.word	0x200000d8
 8000b30:	40005400 	.word	0x40005400
 8000b34:	00602173 	.word	0x00602173

08000b38 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b090      	sub	sp, #64	@ 0x40
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b3e:	232c      	movs	r3, #44	@ 0x2c
 8000b40:	18fb      	adds	r3, r7, r3
 8000b42:	0018      	movs	r0, r3
 8000b44:	2314      	movs	r3, #20
 8000b46:	001a      	movs	r2, r3
 8000b48:	2100      	movs	r1, #0
 8000b4a:	f005 fa1d 	bl	8005f88 <memset>
  RTC_DateTypeDef sDate = {0};
 8000b4e:	2328      	movs	r3, #40	@ 0x28
 8000b50:	18fb      	adds	r3, r7, r3
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000b56:	003b      	movs	r3, r7
 8000b58:	0018      	movs	r0, r3
 8000b5a:	2328      	movs	r3, #40	@ 0x28
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	2100      	movs	r1, #0
 8000b60:	f005 fa12 	bl	8005f88 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b64:	4b4b      	ldr	r3, [pc, #300]	@ (8000c94 <MX_RTC_Init+0x15c>)
 8000b66:	4a4c      	ldr	r2, [pc, #304]	@ (8000c98 <MX_RTC_Init+0x160>)
 8000b68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000b6a:	4b4a      	ldr	r3, [pc, #296]	@ (8000c94 <MX_RTC_Init+0x15c>)
 8000b6c:	2240      	movs	r2, #64	@ 0x40
 8000b6e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000b70:	4b48      	ldr	r3, [pc, #288]	@ (8000c94 <MX_RTC_Init+0x15c>)
 8000b72:	227f      	movs	r2, #127	@ 0x7f
 8000b74:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000b76:	4b47      	ldr	r3, [pc, #284]	@ (8000c94 <MX_RTC_Init+0x15c>)
 8000b78:	22ff      	movs	r2, #255	@ 0xff
 8000b7a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b7c:	4b45      	ldr	r3, [pc, #276]	@ (8000c94 <MX_RTC_Init+0x15c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b82:	4b44      	ldr	r3, [pc, #272]	@ (8000c94 <MX_RTC_Init+0x15c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b88:	4b42      	ldr	r3, [pc, #264]	@ (8000c94 <MX_RTC_Init+0x15c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b8e:	4b41      	ldr	r3, [pc, #260]	@ (8000c94 <MX_RTC_Init+0x15c>)
 8000b90:	2280      	movs	r2, #128	@ 0x80
 8000b92:	05d2      	lsls	r2, r2, #23
 8000b94:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000b96:	4b3f      	ldr	r3, [pc, #252]	@ (8000c94 <MX_RTC_Init+0x15c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c94 <MX_RTC_Init+0x15c>)
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f003 fe00 	bl	80047a4 <HAL_RTC_Init>
 8000ba4:	1e03      	subs	r3, r0, #0
 8000ba6:	d001      	beq.n	8000bac <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000ba8:	f000 fd62 	bl	8001670 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000bac:	212c      	movs	r1, #44	@ 0x2c
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2200      	movs	r2, #0
 8000bca:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000bd8:	1879      	adds	r1, r7, r1
 8000bda:	4b2e      	ldr	r3, [pc, #184]	@ (8000c94 <MX_RTC_Init+0x15c>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	0018      	movs	r0, r3
 8000be0:	f003 fe82 	bl	80048e8 <HAL_RTC_SetTime>
 8000be4:	1e03      	subs	r3, r0, #0
 8000be6:	d001      	beq.n	8000bec <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000be8:	f000 fd42 	bl	8001670 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bec:	2128      	movs	r1, #40	@ 0x28
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2200      	movs	r2, #0
 8000c04:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c06:	1879      	adds	r1, r7, r1
 8000c08:	4b22      	ldr	r3, [pc, #136]	@ (8000c94 <MX_RTC_Init+0x15c>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f003 ff6f 	bl	8004af0 <HAL_RTC_SetDate>
 8000c12:	1e03      	subs	r3, r0, #0
 8000c14:	d001      	beq.n	8000c1a <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 8000c16:	f000 fd2b 	bl	8001670 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000c1a:	003b      	movs	r3, r7
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000c20:	003b      	movs	r3, r7
 8000c22:	2201      	movs	r2, #1
 8000c24:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000c26:	003b      	movs	r3, r7
 8000c28:	2200      	movs	r2, #0
 8000c2a:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000c2c:	003b      	movs	r3, r7
 8000c2e:	2200      	movs	r2, #0
 8000c30:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000c32:	003b      	movs	r3, r7
 8000c34:	2200      	movs	r2, #0
 8000c36:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c38:	003b      	movs	r3, r7
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c3e:	003b      	movs	r3, r7
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000c44:	003b      	movs	r3, r7
 8000c46:	4a15      	ldr	r2, [pc, #84]	@ (8000c9c <MX_RTC_Init+0x164>)
 8000c48:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000c4a:	003b      	movs	r3, r7
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000c50:	003b      	movs	r3, r7
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000c56:	003b      	movs	r3, r7
 8000c58:	2220      	movs	r2, #32
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000c5e:	003b      	movs	r3, r7
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	0052      	lsls	r2, r2, #1
 8000c64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c66:	0039      	movs	r1, r7
 8000c68:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <MX_RTC_Init+0x15c>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f004 f81f 	bl	8004cb0 <HAL_RTC_SetAlarm_IT>
 8000c72:	1e03      	subs	r3, r0, #0
 8000c74:	d001      	beq.n	8000c7a <MX_RTC_Init+0x142>
  {
    Error_Handler();
 8000c76:	f000 fcfb 	bl	8001670 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <MX_RTC_Init+0x15c>)
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f004 fa86 	bl	8005190 <HAL_RTCEx_SetCalibrationOutPut>
 8000c84:	1e03      	subs	r3, r0, #0
 8000c86:	d001      	beq.n	8000c8c <MX_RTC_Init+0x154>
  {
    Error_Handler();
 8000c88:	f000 fcf2 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c8c:	46c0      	nop			@ (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b010      	add	sp, #64	@ 0x40
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	2000012c 	.word	0x2000012c
 8000c98:	40002800 	.word	0x40002800
 8000c9c:	80800080 	.word	0x80800080

08000ca0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca6:	231c      	movs	r3, #28
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	0018      	movs	r0, r3
 8000cac:	230c      	movs	r3, #12
 8000cae:	001a      	movs	r2, r3
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	f005 f969 	bl	8005f88 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb6:	003b      	movs	r3, r7
 8000cb8:	0018      	movs	r0, r3
 8000cba:	231c      	movs	r3, #28
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	f005 f962 	bl	8005f88 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc4:	4b24      	ldr	r3, [pc, #144]	@ (8000d58 <MX_TIM2_Init+0xb8>)
 8000cc6:	2280      	movs	r2, #128	@ 0x80
 8000cc8:	05d2      	lsls	r2, r2, #23
 8000cca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8000ccc:	4b22      	ldr	r3, [pc, #136]	@ (8000d58 <MX_TIM2_Init+0xb8>)
 8000cce:	4a23      	ldr	r2, [pc, #140]	@ (8000d5c <MX_TIM2_Init+0xbc>)
 8000cd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd2:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <MX_TIM2_Init+0xb8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d58 <MX_TIM2_Init+0xb8>)
 8000cda:	2263      	movs	r2, #99	@ 0x63
 8000cdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cde:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <MX_TIM2_Init+0xb8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d58 <MX_TIM2_Init+0xb8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cea:	4b1b      	ldr	r3, [pc, #108]	@ (8000d58 <MX_TIM2_Init+0xb8>)
 8000cec:	0018      	movs	r0, r3
 8000cee:	f004 fb69 	bl	80053c4 <HAL_TIM_PWM_Init>
 8000cf2:	1e03      	subs	r3, r0, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000cf6:	f000 fcbb 	bl	8001670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfa:	211c      	movs	r1, #28
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d08:	187a      	adds	r2, r7, r1
 8000d0a:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <MX_TIM2_Init+0xb8>)
 8000d0c:	0011      	movs	r1, r2
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f005 f8d2 	bl	8005eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d14:	1e03      	subs	r3, r0, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000d18:	f000 fcaa 	bl	8001670 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d1c:	003b      	movs	r3, r7
 8000d1e:	2260      	movs	r2, #96	@ 0x60
 8000d20:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d22:	003b      	movs	r3, r7
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d28:	003b      	movs	r3, r7
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d2e:	003b      	movs	r3, r7
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d34:	0039      	movs	r1, r7
 8000d36:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <MX_TIM2_Init+0xb8>)
 8000d38:	2208      	movs	r2, #8
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f004 fc78 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 8000d40:	1e03      	subs	r3, r0, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000d44:	f000 fc94 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d48:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <MX_TIM2_Init+0xb8>)
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 fff4 	bl	8001d38 <HAL_TIM_MspPostInit>

}
 8000d50:	46c0      	nop			@ (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b00a      	add	sp, #40	@ 0x28
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000158 	.word	0x20000158
 8000d5c:	0000031f 	.word	0x0000031f

08000d60 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000d64:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <MX_TIM14_Init+0x40>)
 8000d66:	4a0f      	ldr	r2, [pc, #60]	@ (8000da4 <MX_TIM14_Init+0x44>)
 8000d68:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000da0 <MX_TIM14_Init+0x40>)
 8000d6c:	22f4      	movs	r2, #244	@ 0xf4
 8000d6e:	0092      	lsls	r2, r2, #2
 8000d70:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <MX_TIM14_Init+0x40>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000d78:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <MX_TIM14_Init+0x40>)
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000da8 <MX_TIM14_Init+0x48>)
 8000d7c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <MX_TIM14_Init+0x40>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <MX_TIM14_Init+0x40>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000d8a:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <MX_TIM14_Init+0x40>)
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f004 fa4f 	bl	8005230 <HAL_TIM_Base_Init>
 8000d92:	1e03      	subs	r3, r0, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000d96:	f000 fc6b 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200001a4 	.word	0x200001a4
 8000da4:	40002000 	.word	0x40002000
 8000da8:	0000ffff 	.word	0x0000ffff

08000dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b08b      	sub	sp, #44	@ 0x2c
 8000db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db2:	2414      	movs	r4, #20
 8000db4:	193b      	adds	r3, r7, r4
 8000db6:	0018      	movs	r0, r3
 8000db8:	2314      	movs	r3, #20
 8000dba:	001a      	movs	r2, r3
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	f005 f8e3 	bl	8005f88 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc2:	4b5e      	ldr	r3, [pc, #376]	@ (8000f3c <MX_GPIO_Init+0x190>)
 8000dc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dc6:	4b5d      	ldr	r3, [pc, #372]	@ (8000f3c <MX_GPIO_Init+0x190>)
 8000dc8:	2104      	movs	r1, #4
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dce:	4b5b      	ldr	r3, [pc, #364]	@ (8000f3c <MX_GPIO_Init+0x190>)
 8000dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	4b58      	ldr	r3, [pc, #352]	@ (8000f3c <MX_GPIO_Init+0x190>)
 8000ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dde:	4b57      	ldr	r3, [pc, #348]	@ (8000f3c <MX_GPIO_Init+0x190>)
 8000de0:	2101      	movs	r1, #1
 8000de2:	430a      	orrs	r2, r1
 8000de4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000de6:	4b55      	ldr	r3, [pc, #340]	@ (8000f3c <MX_GPIO_Init+0x190>)
 8000de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dea:	2201      	movs	r2, #1
 8000dec:	4013      	ands	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df2:	4b52      	ldr	r3, [pc, #328]	@ (8000f3c <MX_GPIO_Init+0x190>)
 8000df4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000df6:	4b51      	ldr	r3, [pc, #324]	@ (8000f3c <MX_GPIO_Init+0x190>)
 8000df8:	2108      	movs	r1, #8
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dfe:	4b4f      	ldr	r3, [pc, #316]	@ (8000f3c <MX_GPIO_Init+0x190>)
 8000e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e02:	2208      	movs	r2, #8
 8000e04:	4013      	ands	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8000f3c <MX_GPIO_Init+0x190>)
 8000e0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e0e:	4b4b      	ldr	r3, [pc, #300]	@ (8000f3c <MX_GPIO_Init+0x190>)
 8000e10:	2102      	movs	r1, #2
 8000e12:	430a      	orrs	r2, r1
 8000e14:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e16:	4b49      	ldr	r3, [pc, #292]	@ (8000f3c <MX_GPIO_Init+0x190>)
 8000e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8000e22:	4947      	ldr	r1, [pc, #284]	@ (8000f40 <MX_GPIO_Init+0x194>)
 8000e24:	23a0      	movs	r3, #160	@ 0xa0
 8000e26:	05db      	lsls	r3, r3, #23
 8000e28:	2200      	movs	r2, #0
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f001 ff9d 	bl	8002d6a <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8000e30:	4b44      	ldr	r3, [pc, #272]	@ (8000f44 <MX_GPIO_Init+0x198>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	2180      	movs	r1, #128	@ 0x80
 8000e36:	0018      	movs	r0, r3
 8000e38:	f001 ff97 	bl	8002d6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_EN_GPIO_Port, CTOUCH_EN_Pin, GPIO_PIN_RESET);
 8000e3c:	2380      	movs	r3, #128	@ 0x80
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4841      	ldr	r0, [pc, #260]	@ (8000f48 <MX_GPIO_Init+0x19c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	0019      	movs	r1, r3
 8000e46:	f001 ff90 	bl	8002d6a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin BUZZER_OUT_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin
                           SHIFT_MCLR_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8000e4a:	193b      	adds	r3, r7, r4
 8000e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8000f40 <MX_GPIO_Init+0x194>)
 8000e4e:	601a      	str	r2, [r3, #0]
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	193b      	adds	r3, r7, r4
 8000e52:	2201      	movs	r2, #1
 8000e54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	193b      	adds	r3, r7, r4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	193b      	adds	r3, r7, r4
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	193a      	adds	r2, r7, r4
 8000e64:	23a0      	movs	r3, #160	@ 0xa0
 8000e66:	05db      	lsls	r3, r3, #23
 8000e68:	0011      	movs	r1, r2
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f001 fdfc 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	2280      	movs	r2, #128	@ 0x80
 8000e74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	2201      	movs	r2, #1
 8000e7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	193b      	adds	r3, r7, r4
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	4a2e      	ldr	r2, [pc, #184]	@ (8000f44 <MX_GPIO_Init+0x198>)
 8000e8c:	0019      	movs	r1, r3
 8000e8e:	0010      	movs	r0, r2
 8000e90:	f001 fdea 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	2280      	movs	r2, #128	@ 0x80
 8000e98:	0212      	lsls	r2, r2, #8
 8000e9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e9c:	193b      	adds	r3, r7, r4
 8000e9e:	2284      	movs	r2, #132	@ 0x84
 8000ea0:	0392      	lsls	r2, r2, #14
 8000ea2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea4:	193b      	adds	r3, r7, r4
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	193a      	adds	r2, r7, r4
 8000eac:	23a0      	movs	r3, #160	@ 0xa0
 8000eae:	05db      	lsls	r3, r3, #23
 8000eb0:	0011      	movs	r1, r2
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f001 fdd8 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 8000eb8:	0021      	movs	r1, r4
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	220f      	movs	r2, #15
 8000ebe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2284      	movs	r2, #132	@ 0x84
 8000ec4:	0392      	lsls	r2, r2, #14
 8000ec6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	2201      	movs	r2, #1
 8000ecc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ece:	000c      	movs	r4, r1
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f4c <MX_GPIO_Init+0x1a0>)
 8000ed4:	0019      	movs	r1, r3
 8000ed6:	0010      	movs	r0, r2
 8000ed8:	f001 fdc6 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_EN_Pin */
  GPIO_InitStruct.Pin = CTOUCH_EN_Pin;
 8000edc:	0021      	movs	r1, r4
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	2280      	movs	r2, #128	@ 0x80
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2201      	movs	r2, #1
 8000eea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_EN_GPIO_Port, &GPIO_InitStruct);
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	4a13      	ldr	r2, [pc, #76]	@ (8000f48 <MX_GPIO_Init+0x19c>)
 8000efc:	0019      	movs	r1, r3
 8000efe:	0010      	movs	r0, r2
 8000f00:	f001 fdb2 	bl	8002a68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	2005      	movs	r0, #5
 8000f0a:	f001 fd7b 	bl	8002a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000f0e:	2005      	movs	r0, #5
 8000f10:	f001 fd8d 	bl	8002a2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2100      	movs	r1, #0
 8000f18:	2006      	movs	r0, #6
 8000f1a:	f001 fd73 	bl	8002a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000f1e:	2006      	movs	r0, #6
 8000f20:	f001 fd85 	bl	8002a2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2101      	movs	r1, #1
 8000f28:	2007      	movs	r0, #7
 8000f2a:	f001 fd6b 	bl	8002a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000f2e:	2007      	movs	r0, #7
 8000f30:	f001 fd7d 	bl	8002a2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b00b      	add	sp, #44	@ 0x2c
 8000f3a:	bd90      	pop	{r4, r7, pc}
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	00001f01 	.word	0x00001f01
 8000f44:	50000800 	.word	0x50000800
 8000f48:	50000400 	.word	0x50000400
 8000f4c:	50000c00 	.word	0x50000c00

08000f50 <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8000f5c:	4a07      	ldr	r2, [pc, #28]	@ (8000f7c <updateAndDisplayTime+0x2c>)
 8000f5e:	4908      	ldr	r1, [pc, #32]	@ (8000f80 <updateAndDisplayTime+0x30>)
 8000f60:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <updateAndDisplayTime+0x34>)
 8000f62:	0018      	movs	r0, r3
 8000f64:	f7ff fc38 	bl	80007d8 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 8000f68:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <updateAndDisplayTime+0x30>)
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f000 fc9a 	bl	80018a4 <sevSeg_updateDigits>

	return halRet;
 8000f70:	1dfb      	adds	r3, r7, #7
 8000f72:	781b      	ldrb	r3, [r3, #0]

}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b002      	add	sp, #8
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000204 	.word	0x20000204
 8000f80:	200001f0 	.word	0x200001f0
 8000f84:	2000012c 	.word	0x2000012c

08000f88 <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 8000f94:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <updateAndDisplayAlarm+0x20>)
 8000f96:	0018      	movs	r0, r3
 8000f98:	f000 fc84 	bl	80018a4 <sevSeg_updateDigits>

	return halRet;
 8000f9c:	1dfb      	adds	r3, r7, #7
 8000f9e:	781b      	ldrb	r3, [r3, #0]

}
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b002      	add	sp, #8
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000208 	.word	0x20000208

08000fac <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08c      	sub	sp, #48	@ 0x30
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

	  //printf("Enter current time minute increment interrupt\n\r");

	  RTC_AlarmTypeDef sAlarm;
	  getRTCTime(hrtc, &currTime, &currDate);
 8000fb4:	4a22      	ldr	r2, [pc, #136]	@ (8001040 <HAL_RTC_AlarmAEventCallback+0x94>)
 8000fb6:	4923      	ldr	r1, [pc, #140]	@ (8001044 <HAL_RTC_AlarmAEventCallback+0x98>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f7ff fc0c 	bl	80007d8 <getRTCTime>

	  if(sAlarm.AlarmTime.Minutes>58) {
 8000fc0:	2208      	movs	r2, #8
 8000fc2:	18bb      	adds	r3, r7, r2
 8000fc4:	785b      	ldrb	r3, [r3, #1]
 8000fc6:	2b3a      	cmp	r3, #58	@ 0x3a
 8000fc8:	d903      	bls.n	8000fd2 <HAL_RTC_AlarmAEventCallback+0x26>
		sAlarm.AlarmTime.Minutes=0;
 8000fca:	18bb      	adds	r3, r7, r2
 8000fcc:	2200      	movs	r2, #0
 8000fce:	705a      	strb	r2, [r3, #1]
 8000fd0:	e00e      	b.n	8000ff0 <HAL_RTC_AlarmAEventCallback+0x44>
		//printf("Reset alarm time\n\r");
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8000fd2:	2108      	movs	r1, #8
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	785b      	ldrb	r3, [r3, #1]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8000fe0:	e006      	b.n	8000ff0 <HAL_RTC_AlarmAEventCallback+0x44>
			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 8000fe2:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <HAL_RTC_AlarmAEventCallback+0x9c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	0011      	movs	r1, r2
 8000fea:	0018      	movs	r0, r3
 8000fec:	f001 feda 	bl	8002da4 <HAL_GPIO_TogglePin>
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	18f9      	adds	r1, r7, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f003 fe59 	bl	8004cb0 <HAL_RTC_SetAlarm_IT>
 8000ffe:	1e03      	subs	r3, r0, #0
 8001000:	d1ef      	bne.n	8000fe2 <HAL_RTC_AlarmAEventCallback+0x36>
		}

	  updateAndDisplayTime();
 8001002:	f7ff ffa5 	bl	8000f50 <updateAndDisplayTime>

	  //printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 8001006:	4b11      	ldr	r3, [pc, #68]	@ (800104c <HAL_RTC_AlarmAEventCallback+0xa0>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d013      	beq.n	8001036 <HAL_RTC_AlarmAEventCallback+0x8a>
 800100e:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <HAL_RTC_AlarmAEventCallback+0xa4>)
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <HAL_RTC_AlarmAEventCallback+0x98>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	429a      	cmp	r2, r3
 8001018:	d10d      	bne.n	8001036 <HAL_RTC_AlarmAEventCallback+0x8a>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 800101a:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <HAL_RTC_AlarmAEventCallback+0xa4>)
 800101c:	785a      	ldrb	r2, [r3, #1]
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <HAL_RTC_AlarmAEventCallback+0x98>)
 8001020:	785b      	ldrb	r3, [r3, #1]
 8001022:	429a      	cmp	r2, r3
 8001024:	d107      	bne.n	8001036 <HAL_RTC_AlarmAEventCallback+0x8a>
 8001026:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <HAL_RTC_AlarmAEventCallback+0xa4>)
 8001028:	78da      	ldrb	r2, [r3, #3]
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HAL_RTC_AlarmAEventCallback+0x98>)
 800102c:	78db      	ldrb	r3, [r3, #3]
 800102e:	429a      	cmp	r2, r3
 8001030:	d101      	bne.n	8001036 <HAL_RTC_AlarmAEventCallback+0x8a>
		  userAlarmBeep();
 8001032:	f000 f80f 	bl	8001054 <userAlarmBeep>
	  }

}
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b00c      	add	sp, #48	@ 0x30
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	20000204 	.word	0x20000204
 8001044:	200001f0 	.word	0x200001f0
 8001048:	20000020 	.word	0x20000020
 800104c:	20000071 	.word	0x20000071
 8001050:	20000208 	.word	0x20000208

08001054 <userAlarmBeep>:

void userAlarmBeep() {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 800105a:	4b36      	ldr	r3, [pc, #216]	@ (8001134 <userAlarmBeep+0xe0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	0018      	movs	r0, r3
 8001060:	f004 f98a 	bl	8005378 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001064:	4b33      	ldr	r3, [pc, #204]	@ (8001134 <userAlarmBeep+0xe0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	0018      	movs	r0, r3
 800106a:	f004 f939 	bl	80052e0 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 800106e:	4b31      	ldr	r3, [pc, #196]	@ (8001134 <userAlarmBeep+0xe0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001076:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001078:	1cfb      	adds	r3, r7, #3
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 800107e:	f7ff ff67 	bl	8000f50 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 8001082:	4b2c      	ldr	r3, [pc, #176]	@ (8001134 <userAlarmBeep+0xe0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	4a2a      	ldr	r2, [pc, #168]	@ (8001138 <userAlarmBeep+0xe4>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d926      	bls.n	80010e2 <userAlarmBeep+0x8e>

			sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 8001094:	4b29      	ldr	r3, [pc, #164]	@ (800113c <userAlarmBeep+0xe8>)
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <userAlarmBeep+0xec>)
 800109a:	6819      	ldr	r1, [r3, #0]
 800109c:	1cfb      	adds	r3, r7, #3
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4a28      	ldr	r2, [pc, #160]	@ (8001144 <userAlarmBeep+0xf0>)
 80010a2:	5cd3      	ldrb	r3, [r2, r3]
 80010a4:	001a      	movs	r2, r3
 80010a6:	f000 fcaf 	bl	8001a08 <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(buzzerPort, buzzerPin);					// Toggle Buzzer
 80010aa:	4b27      	ldr	r3, [pc, #156]	@ (8001148 <userAlarmBeep+0xf4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2280      	movs	r2, #128	@ 0x80
 80010b0:	0052      	lsls	r2, r2, #1
 80010b2:	0011      	movs	r1, r2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f001 fe75 	bl	8002da4 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80010ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <userAlarmBeep+0xe0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c2:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80010c4:	1cfb      	adds	r3, r7, #3
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	1e5a      	subs	r2, r3, #1
 80010ca:	4193      	sbcs	r3, r2
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2201      	movs	r2, #1
 80010d0:	4053      	eors	r3, r2
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	001a      	movs	r2, r3
 80010d6:	1cfb      	adds	r3, r7, #3
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	781a      	ldrb	r2, [r3, #0]
 80010dc:	2101      	movs	r1, #1
 80010de:	400a      	ands	r2, r1
 80010e0:	701a      	strb	r2, [r3, #0]

		}


	} while(capTouch_readChannels(&capTouch) == 0x00);
 80010e2:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <userAlarmBeep+0xf8>)
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff f9a1 	bl	800042c <capTouch_readChannels>
 80010ea:	1e03      	subs	r3, r0, #0
 80010ec:	d0c7      	beq.n	800107e <userAlarmBeep+0x2a>

	HAL_TIM_Base_Stop(timerDelay);
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <userAlarmBeep+0xe0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	0018      	movs	r0, r3
 80010f4:	f004 f940 	bl	8005378 <HAL_TIM_Base_Stop>
	HAL_GPIO_WritePin(buzzerPort, buzzerPin, GPIO_PIN_RESET);
 80010f8:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <userAlarmBeep+0xf4>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	0051      	lsls	r1, r2, #1
 8001100:	2200      	movs	r2, #0
 8001102:	0018      	movs	r0, r3
 8001104:	f001 fe31 	bl	8002d6a <HAL_GPIO_WritePin>
	updateAndDisplayTime();				// Update to current time and display
 8001108:	f7ff ff22 	bl	8000f50 <updateAndDisplayTime>
	sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[1]);	// Toggle 0% to 50% duty cycle
 800110c:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <userAlarmBeep+0xe8>)
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <userAlarmBeep+0xec>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	225a      	movs	r2, #90	@ 0x5a
 8001116:	0019      	movs	r1, r3
 8001118:	f000 fc76 	bl	8001a08 <sevSeg_setIntensity>


	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 800111c:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <userAlarmBeep+0xfc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2201      	movs	r2, #1
 8001122:	0011      	movs	r1, r2
 8001124:	0018      	movs	r0, r3
 8001126:	f001 fe3d 	bl	8002da4 <HAL_GPIO_TogglePin>

}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b002      	add	sp, #8
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			@ (mov r8, r8)
 8001134:	20000024 	.word	0x20000024
 8001138:	00007ffe 	.word	0x00007ffe
 800113c:	20000028 	.word	0x20000028
 8001140:	2000002c 	.word	0x2000002c
 8001144:	0800602c 	.word	0x0800602c
 8001148:	20000008 	.word	0x20000008
 800114c:	20000220 	.word	0x20000220
 8001150:	20000020 	.word	0x20000020

08001154 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	0002      	movs	r2, r0
 800115c:	1dbb      	adds	r3, r7, #6
 800115e:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8001160:	2208      	movs	r2, #8
 8001162:	1dbb      	adds	r3, r7, #6
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	4293      	cmp	r3, r2
 8001168:	d106      	bne.n	8001178 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 800116a:	230f      	movs	r3, #15
 800116c:	18fc      	adds	r4, r7, r3
 800116e:	f000 f839 	bl	80011e4 <displayButtonISR>
 8001172:	0003      	movs	r3, r0
 8001174:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8001176:	e031      	b.n	80011dc <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8001178:	2204      	movs	r2, #4
 800117a:	1dbb      	adds	r3, r7, #6
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	4293      	cmp	r3, r2
 8001180:	d106      	bne.n	8001190 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 8001182:	230f      	movs	r3, #15
 8001184:	18fc      	adds	r4, r7, r3
 8001186:	f000 f85d 	bl	8001244 <alarmEnableISR>
 800118a:	0003      	movs	r3, r0
 800118c:	7023      	strb	r3, [r4, #0]
}
 800118e:	e025      	b.n	80011dc <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8001190:	2380      	movs	r3, #128	@ 0x80
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	1dba      	adds	r2, r7, #6
 8001196:	8812      	ldrh	r2, [r2, #0]
 8001198:	429a      	cmp	r2, r3
 800119a:	d106      	bne.n	80011aa <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 800119c:	230f      	movs	r3, #15
 800119e:	18fc      	adds	r4, r7, r3
 80011a0:	f000 f884 	bl	80012ac <alarmSetISR>
 80011a4:	0003      	movs	r3, r0
 80011a6:	7023      	strb	r3, [r4, #0]
}
 80011a8:	e018      	b.n	80011dc <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 80011aa:	2201      	movs	r2, #1
 80011ac:	1dbb      	adds	r3, r7, #6
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d106      	bne.n	80011c2 <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 80011b4:	230f      	movs	r3, #15
 80011b6:	18fc      	adds	r4, r7, r3
 80011b8:	f000 f954 	bl	8001464 <hourSetISR>
 80011bc:	0003      	movs	r3, r0
 80011be:	7023      	strb	r3, [r4, #0]
}
 80011c0:	e00c      	b.n	80011dc <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 80011c2:	2202      	movs	r2, #2
 80011c4:	1dbb      	adds	r3, r7, #6
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d106      	bne.n	80011da <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 80011cc:	230f      	movs	r3, #15
 80011ce:	18fc      	adds	r4, r7, r3
 80011d0:	f000 f974 	bl	80014bc <minuteSetISR>
 80011d4:	0003      	movs	r3, r0
 80011d6:	7023      	strb	r3, [r4, #0]
}
 80011d8:	e000      	b.n	80011dc <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 80011da:	46c0      	nop			@ (mov r8, r8)
}
 80011dc:	46c0      	nop			@ (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	b005      	add	sp, #20
 80011e2:	bd90      	pop	{r4, r7, pc}

080011e4 <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 80011f0:	f7ff feae 	bl	8000f50 <updateAndDisplayTime>

	sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 80011f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <displayButtonISR+0x50>)
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <displayButtonISR+0x54>)
 80011fa:	6819      	ldr	r1, [r3, #0]
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <displayButtonISR+0x58>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	001a      	movs	r2, r3
 8001202:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <displayButtonISR+0x5c>)
 8001204:	5c9b      	ldrb	r3, [r3, r2]
 8001206:	001a      	movs	r2, r3
 8001208:	f000 fbfe 	bl	8001a08 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 800120c:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <displayButtonISR+0x58>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d903      	bls.n	800121c <displayButtonISR+0x38>
		displayToggle = 0;
 8001214:	4b09      	ldr	r3, [pc, #36]	@ (800123c <displayButtonISR+0x58>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
 800121a:	e005      	b.n	8001228 <displayButtonISR+0x44>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <displayButtonISR+0x58>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <displayButtonISR+0x58>)
 8001226:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8001228:	1dfb      	adds	r3, r7, #7
 800122a:	781b      	ldrb	r3, [r3, #0]

}
 800122c:	0018      	movs	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	b002      	add	sp, #8
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000028 	.word	0x20000028
 8001238:	2000002c 	.word	0x2000002c
 800123c:	20000070 	.word	0x20000070
 8001240:	0800602c 	.word	0x0800602c

08001244 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8001250:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <alarmEnableISR+0x60>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2201      	movs	r2, #1
 8001256:	4053      	eors	r3, r2
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00b      	beq.n	8001276 <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 800125e:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <alarmEnableISR+0x64>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2280      	movs	r2, #128	@ 0x80
 8001264:	0151      	lsls	r1, r2, #5
 8001266:	2201      	movs	r2, #1
 8001268:	0018      	movs	r0, r3
 800126a:	f001 fd7e 	bl	8002d6a <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <alarmEnableISR+0x60>)
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	e010      	b.n	8001298 <alarmEnableISR+0x54>

		//printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
								//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8001276:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <alarmEnableISR+0x60>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00b      	beq.n	8001296 <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 800127e:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <alarmEnableISR+0x64>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2280      	movs	r2, #128	@ 0x80
 8001284:	0151      	lsls	r1, r2, #5
 8001286:	2200      	movs	r2, #0
 8001288:	0018      	movs	r0, r3
 800128a:	f001 fd6e 	bl	8002d6a <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 800128e:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <alarmEnableISR+0x60>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
 8001294:	e000      	b.n	8001298 <alarmEnableISR+0x54>

		//printf("User alarm disabled.\n\r");
	}
	else {
		__NOP();							//Code should never reach here.
 8001296:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 8001298:	1dfb      	adds	r3, r7, #7
 800129a:	781b      	ldrb	r3, [r3, #0]

}
 800129c:	0018      	movs	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	b002      	add	sp, #8
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000071 	.word	0x20000071
 80012a8:	20000004 	.word	0x20000004

080012ac <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
	//printf("Enter user alarm set ISR.\n\r");

	//printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
			//userAlarmTime.Minutes, userAlarmTime.Seconds);

	HAL_StatusTypeDef halRet = HAL_OK;
 80012b2:	1cbb      	adds	r3, r7, #2
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for switch debounce
	 */

	// First wait for button to deactivate again
	while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_SET);
 80012b8:	46c0      	nop			@ (mov r8, r8)
 80012ba:	4b64      	ldr	r3, [pc, #400]	@ (800144c <alarmSetISR+0x1a0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2280      	movs	r2, #128	@ 0x80
 80012c0:	0212      	lsls	r2, r2, #8
 80012c2:	0011      	movs	r1, r2
 80012c4:	0018      	movs	r0, r3
 80012c6:	f001 fd33 	bl	8002d30 <HAL_GPIO_ReadPin>
 80012ca:	0003      	movs	r3, r0
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d1f4      	bne.n	80012ba <alarmSetISR+0xe>

	// Go through debounce
	HAL_TIM_Base_Stop(timerDelay);
 80012d0:	4b5f      	ldr	r3, [pc, #380]	@ (8001450 <alarmSetISR+0x1a4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	0018      	movs	r0, r3
 80012d6:	f004 f84f 	bl	8005378 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80012da:	4b5d      	ldr	r3, [pc, #372]	@ (8001450 <alarmSetISR+0x1a4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	0018      	movs	r0, r3
 80012e0:	f003 fffe 	bl	80052e0 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80012e4:	4b5a      	ldr	r3, [pc, #360]	@ (8001450 <alarmSetISR+0x1a4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ec:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 8));
 80012ee:	4b58      	ldr	r3, [pc, #352]	@ (8001450 <alarmSetISR+0x1a4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	1ad2      	subs	r2, r2, r3
 80012fa:	2380      	movs	r3, #128	@ 0x80
 80012fc:	019b      	lsls	r3, r3, #6
 80012fe:	429a      	cmp	r2, r3
 8001300:	d9f5      	bls.n	80012ee <alarmSetISR+0x42>


	/*
	 *  Poll for 1 second to see if the alarm set button is pressed again
	 */
	HAL_TIM_Base_Stop(timerDelay);
 8001302:	4b53      	ldr	r3, [pc, #332]	@ (8001450 <alarmSetISR+0x1a4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	0018      	movs	r0, r3
 8001308:	f004 f836 	bl	8005378 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 800130c:	4b50      	ldr	r3, [pc, #320]	@ (8001450 <alarmSetISR+0x1a4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	0018      	movs	r0, r3
 8001312:	f003 ffe5 	bl	80052e0 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001316:	4b4e      	ldr	r3, [pc, #312]	@ (8001450 <alarmSetISR+0x1a4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131e:	607b      	str	r3, [r7, #4]

	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 8001320:	e00d      	b.n	800133e <alarmSetISR+0x92>

		if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 8001322:	4b4a      	ldr	r3, [pc, #296]	@ (800144c <alarmSetISR+0x1a0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2280      	movs	r2, #128	@ 0x80
 8001328:	0212      	lsls	r2, r2, #8
 800132a:	0011      	movs	r1, r2
 800132c:	0018      	movs	r0, r3
 800132e:	f001 fcff 	bl	8002d30 <HAL_GPIO_ReadPin>
 8001332:	1e03      	subs	r3, r0, #0
 8001334:	d103      	bne.n	800133e <alarmSetISR+0x92>
			alarmSetMode = true;
 8001336:	4b47      	ldr	r3, [pc, #284]	@ (8001454 <alarmSetISR+0x1a8>)
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
//			HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
			break;
 800133c:	e009      	b.n	8001352 <alarmSetISR+0xa6>
	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 800133e:	4b44      	ldr	r3, [pc, #272]	@ (8001450 <alarmSetISR+0x1a4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	1ad2      	subs	r2, r2, r3
 800134a:	2380      	movs	r3, #128	@ 0x80
 800134c:	025b      	lsls	r3, r3, #9
 800134e:	429a      	cmp	r2, r3
 8001350:	d9e7      	bls.n	8001322 <alarmSetISR+0x76>
		}

	}

	// Go through debounce once again
	HAL_TIM_Base_Stop(timerDelay);
 8001352:	4b3f      	ldr	r3, [pc, #252]	@ (8001450 <alarmSetISR+0x1a4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	0018      	movs	r0, r3
 8001358:	f004 f80e 	bl	8005378 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 800135c:	4b3c      	ldr	r3, [pc, #240]	@ (8001450 <alarmSetISR+0x1a4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	0018      	movs	r0, r3
 8001362:	f003 ffbd 	bl	80052e0 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001366:	4b3a      	ldr	r3, [pc, #232]	@ (8001450 <alarmSetISR+0x1a4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136e:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 4));
 8001370:	4b37      	ldr	r3, [pc, #220]	@ (8001450 <alarmSetISR+0x1a4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	1ad2      	subs	r2, r2, r3
 800137c:	2380      	movs	r3, #128	@ 0x80
 800137e:	01db      	lsls	r3, r3, #7
 8001380:	429a      	cmp	r2, r3
 8001382:	d9f5      	bls.n	8001370 <alarmSetISR+0xc4>
	/*
	 * Then, if we are in alarm set mode, go through the
	 * alarm set process until the button is pressed again
	 */

	HAL_TIM_Base_Stop(timerDelay);
 8001384:	4b32      	ldr	r3, [pc, #200]	@ (8001450 <alarmSetISR+0x1a4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0018      	movs	r0, r3
 800138a:	f003 fff5 	bl	8005378 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 800138e:	4b30      	ldr	r3, [pc, #192]	@ (8001450 <alarmSetISR+0x1a4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	0018      	movs	r0, r3
 8001394:	f003 ffa4 	bl	80052e0 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001398:	4b2d      	ldr	r3, [pc, #180]	@ (8001450 <alarmSetISR+0x1a4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a0:	607b      	str	r3, [r7, #4]

	if(alarmSetMode) {
 80013a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001454 <alarmSetISR+0x1a8>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d046      	beq.n	8001438 <alarmSetISR+0x18c>

		bool displayBlink = false;
 80013aa:	1cfb      	adds	r3, r7, #3
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			updateAndDisplayAlarm();
 80013b0:	f7ff fdea 	bl	8000f88 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 80013b4:	4b26      	ldr	r3, [pc, #152]	@ (8001450 <alarmSetISR+0x1a4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	1ad2      	subs	r2, r2, r3
 80013c0:	2380      	movs	r3, #128	@ 0x80
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d31e      	bcc.n	8001406 <alarmSetISR+0x15a>

//				HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

				sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 80013c8:	4b23      	ldr	r3, [pc, #140]	@ (8001458 <alarmSetISR+0x1ac>)
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	4b23      	ldr	r3, [pc, #140]	@ (800145c <alarmSetISR+0x1b0>)
 80013ce:	6819      	ldr	r1, [r3, #0]
 80013d0:	1cfb      	adds	r3, r7, #3
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4a22      	ldr	r2, [pc, #136]	@ (8001460 <alarmSetISR+0x1b4>)
 80013d6:	5cd3      	ldrb	r3, [r2, r3]
 80013d8:	001a      	movs	r2, r3
 80013da:	f000 fb15 	bl	8001a08 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 80013de:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <alarmSetISR+0x1a4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e6:	607b      	str	r3, [r7, #4]
				displayBlink = !displayBlink;
 80013e8:	1cfb      	adds	r3, r7, #3
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	1e5a      	subs	r2, r3, #1
 80013ee:	4193      	sbcs	r3, r2
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2201      	movs	r2, #1
 80013f4:	4053      	eors	r3, r2
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	001a      	movs	r2, r3
 80013fa:	1cfb      	adds	r3, r7, #3
 80013fc:	701a      	strb	r2, [r3, #0]
 80013fe:	781a      	ldrb	r2, [r3, #0]
 8001400:	2101      	movs	r1, #1
 8001402:	400a      	ands	r2, r1
 8001404:	701a      	strb	r2, [r3, #0]

			}

		}while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET);
 8001406:	4b11      	ldr	r3, [pc, #68]	@ (800144c <alarmSetISR+0x1a0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2280      	movs	r2, #128	@ 0x80
 800140c:	0212      	lsls	r2, r2, #8
 800140e:	0011      	movs	r1, r2
 8001410:	0018      	movs	r0, r3
 8001412:	f001 fc8d 	bl	8002d30 <HAL_GPIO_ReadPin>
 8001416:	1e03      	subs	r3, r0, #0
 8001418:	d1ca      	bne.n	80013b0 <alarmSetISR+0x104>

//		HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_RESET);

		sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <alarmSetISR+0x1ac>)
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <alarmSetISR+0x1b0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	225a      	movs	r2, #90	@ 0x5a
 8001424:	0019      	movs	r1, r3
 8001426:	f000 faef 	bl	8001a08 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <alarmSetISR+0x1a4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	0018      	movs	r0, r3
 8001430:	f003 ffa2 	bl	8005378 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8001434:	f7ff fd8c 	bl	8000f50 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8001438:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <alarmSetISR+0x1a8>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 800143e:	1cbb      	adds	r3, r7, #2
 8001440:	781b      	ldrb	r3, [r3, #0]

}
 8001442:	0018      	movs	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	b002      	add	sp, #8
 8001448:	bd80      	pop	{r7, pc}
 800144a:	46c0      	nop			@ (mov r8, r8)
 800144c:	20000000 	.word	0x20000000
 8001450:	20000024 	.word	0x20000024
 8001454:	2000021c 	.word	0x2000021c
 8001458:	20000028 	.word	0x20000028
 800145c:	2000002c 	.word	0x2000002c
 8001460:	0800602c 	.word	0x0800602c

08001464 <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0

//	printf("Entered hour set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);


	HAL_StatusTypeDef halRet = HAL_OK;
 800146a:	1dfb      	adds	r3, r7, #7
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001470:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <hourSetISR+0x48>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <hourSetISR+0x1a>

		alarmHourInc();
 8001478:	f000 f84c 	bl	8001514 <alarmHourInc>
 800147c:	e00f      	b.n	800149e <hourSetISR+0x3a>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 800147e:	f000 f877 	bl	8001570 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001482:	490b      	ldr	r1, [pc, #44]	@ (80014b0 <hourSetISR+0x4c>)
 8001484:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <hourSetISR+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	0018      	movs	r0, r3
 800148a:	f003 fa2d 	bl	80048e8 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 800148e:	f7ff fd5f 	bl	8000f50 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001492:	4a09      	ldr	r2, [pc, #36]	@ (80014b8 <hourSetISR+0x54>)
 8001494:	4906      	ldr	r1, [pc, #24]	@ (80014b0 <hourSetISR+0x4c>)
 8001496:	4b07      	ldr	r3, [pc, #28]	@ (80014b4 <hourSetISR+0x50>)
 8001498:	0018      	movs	r0, r3
 800149a:	f7ff f99d 	bl	80007d8 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	781b      	ldrb	r3, [r3, #0]

}
 80014a2:	0018      	movs	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b002      	add	sp, #8
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			@ (mov r8, r8)
 80014ac:	2000021c 	.word	0x2000021c
 80014b0:	200001f0 	.word	0x200001f0
 80014b4:	2000012c 	.word	0x2000012c
 80014b8:	20000204 	.word	0x20000204

080014bc <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0

//	printf("Entered minute set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

	HAL_StatusTypeDef halRet = HAL_OK;
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80014c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <minuteSetISR+0x48>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <minuteSetISR+0x1a>

		alarmMinuteInc();
 80014d0:	f000 f888 	bl	80015e4 <alarmMinuteInc>
 80014d4:	e00f      	b.n	80014f6 <minuteSetISR+0x3a>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 80014d6:	f000 f8a3 	bl	8001620 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80014da:	490b      	ldr	r1, [pc, #44]	@ (8001508 <minuteSetISR+0x4c>)
 80014dc:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <minuteSetISR+0x50>)
 80014de:	2200      	movs	r2, #0
 80014e0:	0018      	movs	r0, r3
 80014e2:	f003 fa01 	bl	80048e8 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80014e6:	f7ff fd33 	bl	8000f50 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80014ea:	4a09      	ldr	r2, [pc, #36]	@ (8001510 <minuteSetISR+0x54>)
 80014ec:	4906      	ldr	r1, [pc, #24]	@ (8001508 <minuteSetISR+0x4c>)
 80014ee:	4b07      	ldr	r3, [pc, #28]	@ (800150c <minuteSetISR+0x50>)
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7ff f971 	bl	80007d8 <getRTCTime>

		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 80014f6:	1dfb      	adds	r3, r7, #7
 80014f8:	781b      	ldrb	r3, [r3, #0]
}
 80014fa:	0018      	movs	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b002      	add	sp, #8
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			@ (mov r8, r8)
 8001504:	2000021c 	.word	0x2000021c
 8001508:	200001f0 	.word	0x200001f0
 800150c:	2000012c 	.word	0x2000012c
 8001510:	20000204 	.word	0x20000204

08001514 <alarmHourInc>:

void alarmHourInc(void) {
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <alarmHourInc+0x58>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b0b      	cmp	r3, #11
 800151e:	d903      	bls.n	8001528 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <alarmHourInc+0x58>)
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 8001526:	e01e      	b.n	8001566 <alarmHourInc+0x52>
	else if(userAlarmTime.Hours == 11) {
 8001528:	4b10      	ldr	r3, [pc, #64]	@ (800156c <alarmHourInc+0x58>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b0b      	cmp	r3, #11
 800152e:	d10e      	bne.n	800154e <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001530:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <alarmHourInc+0x58>)
 8001532:	78db      	ldrb	r3, [r3, #3]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d103      	bne.n	8001540 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <alarmHourInc+0x58>)
 800153a:	2201      	movs	r2, #1
 800153c:	70da      	strb	r2, [r3, #3]
 800153e:	e002      	b.n	8001546 <alarmHourInc+0x32>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001540:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <alarmHourInc+0x58>)
 8001542:	2200      	movs	r2, #0
 8001544:	70da      	strb	r2, [r3, #3]
		userAlarmTime.Hours = 12;
 8001546:	4b09      	ldr	r3, [pc, #36]	@ (800156c <alarmHourInc+0x58>)
 8001548:	220c      	movs	r2, #12
 800154a:	701a      	strb	r2, [r3, #0]
}
 800154c:	e00b      	b.n	8001566 <alarmHourInc+0x52>
	else if(userAlarmTime.Hours < 11) {
 800154e:	4b07      	ldr	r3, [pc, #28]	@ (800156c <alarmHourInc+0x58>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b0a      	cmp	r3, #10
 8001554:	d806      	bhi.n	8001564 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001556:	4b05      	ldr	r3, [pc, #20]	@ (800156c <alarmHourInc+0x58>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4b03      	ldr	r3, [pc, #12]	@ (800156c <alarmHourInc+0x58>)
 8001560:	701a      	strb	r2, [r3, #0]
}
 8001562:	e000      	b.n	8001566 <alarmHourInc+0x52>
		__NOP();
 8001564:	46c0      	nop			@ (mov r8, r8)
}
 8001566:	46c0      	nop			@ (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000208 	.word	0x20000208

08001570 <currHourInc>:

void currHourInc(void) {
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001574:	4a17      	ldr	r2, [pc, #92]	@ (80015d4 <currHourInc+0x64>)
 8001576:	4918      	ldr	r1, [pc, #96]	@ (80015d8 <currHourInc+0x68>)
 8001578:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <currHourInc+0x6c>)
 800157a:	0018      	movs	r0, r3
 800157c:	f7ff f92c 	bl	80007d8 <getRTCTime>

	if(currTime.Hours >= 12) {
 8001580:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <currHourInc+0x68>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b0b      	cmp	r3, #11
 8001586:	d903      	bls.n	8001590 <currHourInc+0x20>
		currTime.Hours = 1;
 8001588:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <currHourInc+0x68>)
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 800158e:	e01e      	b.n	80015ce <currHourInc+0x5e>
	else if(currTime.Hours == 11) {
 8001590:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <currHourInc+0x68>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b0b      	cmp	r3, #11
 8001596:	d10e      	bne.n	80015b6 <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <currHourInc+0x68>)
 800159a:	78db      	ldrb	r3, [r3, #3]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d103      	bne.n	80015a8 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80015a0:	4b0d      	ldr	r3, [pc, #52]	@ (80015d8 <currHourInc+0x68>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	70da      	strb	r2, [r3, #3]
 80015a6:	e002      	b.n	80015ae <currHourInc+0x3e>
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80015a8:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <currHourInc+0x68>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	70da      	strb	r2, [r3, #3]
		currTime.Hours = 12;
 80015ae:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <currHourInc+0x68>)
 80015b0:	220c      	movs	r2, #12
 80015b2:	701a      	strb	r2, [r3, #0]
}
 80015b4:	e00b      	b.n	80015ce <currHourInc+0x5e>
	else if(userAlarmTime.Hours < 11) {
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <currHourInc+0x70>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b0a      	cmp	r3, #10
 80015bc:	d806      	bhi.n	80015cc <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 80015be:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <currHourInc+0x68>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4b04      	ldr	r3, [pc, #16]	@ (80015d8 <currHourInc+0x68>)
 80015c8:	701a      	strb	r2, [r3, #0]
}
 80015ca:	e000      	b.n	80015ce <currHourInc+0x5e>
		__NOP();
 80015cc:	46c0      	nop			@ (mov r8, r8)
}
 80015ce:	46c0      	nop			@ (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000204 	.word	0x20000204
 80015d8:	200001f0 	.word	0x200001f0
 80015dc:	2000012c 	.word	0x2000012c
 80015e0:	20000208 	.word	0x20000208

080015e4 <alarmMinuteInc>:

void alarmMinuteInc(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <alarmMinuteInc+0x38>)
 80015ea:	785b      	ldrb	r3, [r3, #1]
 80015ec:	2b3a      	cmp	r3, #58	@ 0x3a
 80015ee:	d905      	bls.n	80015fc <alarmMinuteInc+0x18>
		alarmHourInc();
 80015f0:	f7ff ff90 	bl	8001514 <alarmHourInc>
		userAlarmTime.Minutes = 0;
 80015f4:	4b09      	ldr	r3, [pc, #36]	@ (800161c <alarmMinuteInc+0x38>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 80015fa:	e00b      	b.n	8001614 <alarmMinuteInc+0x30>
	else if(userAlarmTime.Minutes < 59) {
 80015fc:	4b07      	ldr	r3, [pc, #28]	@ (800161c <alarmMinuteInc+0x38>)
 80015fe:	785b      	ldrb	r3, [r3, #1]
 8001600:	2b3a      	cmp	r3, #58	@ 0x3a
 8001602:	d806      	bhi.n	8001612 <alarmMinuteInc+0x2e>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8001604:	4b05      	ldr	r3, [pc, #20]	@ (800161c <alarmMinuteInc+0x38>)
 8001606:	785b      	ldrb	r3, [r3, #1]
 8001608:	3301      	adds	r3, #1
 800160a:	b2da      	uxtb	r2, r3
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <alarmMinuteInc+0x38>)
 800160e:	705a      	strb	r2, [r3, #1]
}
 8001610:	e000      	b.n	8001614 <alarmMinuteInc+0x30>
		__NOP();
 8001612:	46c0      	nop			@ (mov r8, r8)
}
 8001614:	46c0      	nop			@ (mov r8, r8)
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			@ (mov r8, r8)
 800161c:	20000208 	.word	0x20000208

08001620 <currMinuteInc>:

void currMinuteInc(void) {
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001624:	4a0f      	ldr	r2, [pc, #60]	@ (8001664 <currMinuteInc+0x44>)
 8001626:	4910      	ldr	r1, [pc, #64]	@ (8001668 <currMinuteInc+0x48>)
 8001628:	4b10      	ldr	r3, [pc, #64]	@ (800166c <currMinuteInc+0x4c>)
 800162a:	0018      	movs	r0, r3
 800162c:	f7ff f8d4 	bl	80007d8 <getRTCTime>

	if(currTime.Minutes >= 59) {
 8001630:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <currMinuteInc+0x48>)
 8001632:	785b      	ldrb	r3, [r3, #1]
 8001634:	2b3a      	cmp	r3, #58	@ 0x3a
 8001636:	d905      	bls.n	8001644 <currMinuteInc+0x24>
		currHourInc();
 8001638:	f7ff ff9a 	bl	8001570 <currHourInc>
		currTime.Minutes = 0;
 800163c:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <currMinuteInc+0x48>)
 800163e:	2200      	movs	r2, #0
 8001640:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 8001642:	e00b      	b.n	800165c <currMinuteInc+0x3c>
	else if(currTime.Minutes < 59) {
 8001644:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <currMinuteInc+0x48>)
 8001646:	785b      	ldrb	r3, [r3, #1]
 8001648:	2b3a      	cmp	r3, #58	@ 0x3a
 800164a:	d806      	bhi.n	800165a <currMinuteInc+0x3a>
		currTime.Minutes = currTime.Minutes + 1;
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <currMinuteInc+0x48>)
 800164e:	785b      	ldrb	r3, [r3, #1]
 8001650:	3301      	adds	r3, #1
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <currMinuteInc+0x48>)
 8001656:	705a      	strb	r2, [r3, #1]
}
 8001658:	e000      	b.n	800165c <currMinuteInc+0x3c>
		__NOP();
 800165a:	46c0      	nop			@ (mov r8, r8)
}
 800165c:	46c0      	nop			@ (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	46c0      	nop			@ (mov r8, r8)
 8001664:	20000204 	.word	0x20000204
 8001668:	200001f0 	.word	0x200001f0
 800166c:	2000012c 	.word	0x2000012c

08001670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001678:	46c0      	nop			@ (mov r8, r8)
 800167a:	e7fd      	b.n	8001678 <Error_Handler+0x8>

0800167c <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM,
					uint32_t tim_PWM_CHANNEL) {
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
 8001682:	0005      	movs	r5, r0
 8001684:	000c      	movs	r4, r1
 8001686:	0010      	movs	r0, r2
 8001688:	0019      	movs	r1, r3
 800168a:	1dbb      	adds	r3, r7, #6
 800168c:	1c2a      	adds	r2, r5, #0
 800168e:	801a      	strh	r2, [r3, #0]
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	1c22      	adds	r2, r4, #0
 8001694:	801a      	strh	r2, [r3, #0]
 8001696:	1cbb      	adds	r3, r7, #2
 8001698:	1c02      	adds	r2, r0, #0
 800169a:	801a      	strh	r2, [r3, #0]
 800169c:	003b      	movs	r3, r7
 800169e:	1c0a      	adds	r2, r1, #0
 80016a0:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 80016a2:	4b78      	ldr	r3, [pc, #480]	@ (8001884 <sevSeg_Init+0x208>)
 80016a4:	1dba      	adds	r2, r7, #6
 80016a6:	8812      	ldrh	r2, [r2, #0]
 80016a8:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 80016aa:	4b77      	ldr	r3, [pc, #476]	@ (8001888 <sevSeg_Init+0x20c>)
 80016ac:	1d3a      	adds	r2, r7, #4
 80016ae:	8812      	ldrh	r2, [r2, #0]
 80016b0:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 80016b2:	4b76      	ldr	r3, [pc, #472]	@ (800188c <sevSeg_Init+0x210>)
 80016b4:	1cba      	adds	r2, r7, #2
 80016b6:	8812      	ldrh	r2, [r2, #0]
 80016b8:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 80016ba:	4b75      	ldr	r3, [pc, #468]	@ (8001890 <sevSeg_Init+0x214>)
 80016bc:	003a      	movs	r2, r7
 80016be:	8812      	ldrh	r2, [r2, #0]
 80016c0:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 80016c2:	4a74      	ldr	r2, [pc, #464]	@ (8001894 <sevSeg_Init+0x218>)
 80016c4:	2330      	movs	r3, #48	@ 0x30
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	8013      	strh	r3, [r2, #0]

	for(int i = 0; i < 5; i++) {
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
 80016d0:	e00b      	b.n	80016ea <sevSeg_Init+0x6e>
		portArray[i] = GPIOPortArray[i];
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80016d8:	18d3      	adds	r3, r2, r3
 80016da:	6819      	ldr	r1, [r3, #0]
 80016dc:	4b6e      	ldr	r3, [pc, #440]	@ (8001898 <sevSeg_Init+0x21c>)
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	0092      	lsls	r2, r2, #2
 80016e2:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	3301      	adds	r3, #1
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	ddf0      	ble.n	80016d2 <sevSeg_Init+0x56>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 80016f0:	4b69      	ldr	r3, [pc, #420]	@ (8001898 <sevSeg_Init+0x21c>)
 80016f2:	6918      	ldr	r0, [r3, #16]
 80016f4:	4b67      	ldr	r3, [pc, #412]	@ (8001894 <sevSeg_Init+0x218>)
 80016f6:	8819      	ldrh	r1, [r3, #0]
 80016f8:	4b68      	ldr	r3, [pc, #416]	@ (800189c <sevSeg_Init+0x220>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	001a      	movs	r2, r3
 80016fe:	f001 fb34 	bl	8002d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001702:	4b65      	ldr	r3, [pc, #404]	@ (8001898 <sevSeg_Init+0x21c>)
 8001704:	6918      	ldr	r0, [r3, #16]
 8001706:	4b63      	ldr	r3, [pc, #396]	@ (8001894 <sevSeg_Init+0x218>)
 8001708:	8819      	ldrh	r1, [r3, #0]
 800170a:	4b64      	ldr	r3, [pc, #400]	@ (800189c <sevSeg_Init+0x220>)
 800170c:	785b      	ldrb	r3, [r3, #1]
 800170e:	001a      	movs	r2, r3
 8001710:	f001 fb2b 	bl	8002d6a <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001714:	4b60      	ldr	r3, [pc, #384]	@ (8001898 <sevSeg_Init+0x21c>)
 8001716:	6898      	ldr	r0, [r3, #8]
 8001718:	4b5c      	ldr	r3, [pc, #368]	@ (800188c <sevSeg_Init+0x210>)
 800171a:	8819      	ldrh	r1, [r3, #0]
 800171c:	4b5f      	ldr	r3, [pc, #380]	@ (800189c <sevSeg_Init+0x220>)
 800171e:	785b      	ldrb	r3, [r3, #1]
 8001720:	001a      	movs	r2, r3
 8001722:	f001 fb22 	bl	8002d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001726:	4b5c      	ldr	r3, [pc, #368]	@ (8001898 <sevSeg_Init+0x21c>)
 8001728:	6898      	ldr	r0, [r3, #8]
 800172a:	4b58      	ldr	r3, [pc, #352]	@ (800188c <sevSeg_Init+0x210>)
 800172c:	8819      	ldrh	r1, [r3, #0]
 800172e:	4b5b      	ldr	r3, [pc, #364]	@ (800189c <sevSeg_Init+0x220>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	001a      	movs	r2, r3
 8001734:	f001 fb19 	bl	8002d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8001738:	4b57      	ldr	r3, [pc, #348]	@ (8001898 <sevSeg_Init+0x21c>)
 800173a:	68d8      	ldr	r0, [r3, #12]
 800173c:	4b54      	ldr	r3, [pc, #336]	@ (8001890 <sevSeg_Init+0x214>)
 800173e:	8819      	ldrh	r1, [r3, #0]
 8001740:	4b56      	ldr	r3, [pc, #344]	@ (800189c <sevSeg_Init+0x220>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	001a      	movs	r2, r3
 8001746:	f001 fb10 	bl	8002d6a <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(htim_PWM, tim_PWM_CHANNEL, 50);
 800174a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800174c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800174e:	2232      	movs	r2, #50	@ 0x32
 8001750:	0018      	movs	r0, r3
 8001752:	f000 f959 	bl	8001a08 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8001756:	2308      	movs	r3, #8
 8001758:	18fb      	adds	r3, r7, r3
 800175a:	4a51      	ldr	r2, [pc, #324]	@ (80018a0 <sevSeg_Init+0x224>)
 800175c:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e038      	b.n	80017d6 <sevSeg_Init+0x15a>

		sendByte = hofSymb[i];
 8001764:	231b      	movs	r3, #27
 8001766:	18fb      	adds	r3, r7, r3
 8001768:	2208      	movs	r2, #8
 800176a:	18b9      	adds	r1, r7, r2
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	188a      	adds	r2, r1, r2
 8001770:	7812      	ldrb	r2, [r2, #0]
 8001772:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	e027      	b.n	80017ca <sevSeg_Init+0x14e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 800177a:	4b47      	ldr	r3, [pc, #284]	@ (8001898 <sevSeg_Init+0x21c>)
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	4b41      	ldr	r3, [pc, #260]	@ (8001884 <sevSeg_Init+0x208>)
 8001780:	8819      	ldrh	r1, [r3, #0]
 8001782:	241b      	movs	r4, #27
 8001784:	193b      	adds	r3, r7, r4
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2201      	movs	r2, #1
 800178a:	4013      	ands	r3, r2
 800178c:	4a43      	ldr	r2, [pc, #268]	@ (800189c <sevSeg_Init+0x220>)
 800178e:	5cd3      	ldrb	r3, [r2, r3]
 8001790:	001a      	movs	r2, r3
 8001792:	f001 faea 	bl	8002d6a <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001796:	4b40      	ldr	r3, [pc, #256]	@ (8001898 <sevSeg_Init+0x21c>)
 8001798:	6858      	ldr	r0, [r3, #4]
 800179a:	4b3b      	ldr	r3, [pc, #236]	@ (8001888 <sevSeg_Init+0x20c>)
 800179c:	8819      	ldrh	r1, [r3, #0]
 800179e:	4b3f      	ldr	r3, [pc, #252]	@ (800189c <sevSeg_Init+0x220>)
 80017a0:	785b      	ldrb	r3, [r3, #1]
 80017a2:	001a      	movs	r2, r3
 80017a4:	f001 fae1 	bl	8002d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 80017a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001898 <sevSeg_Init+0x21c>)
 80017aa:	6858      	ldr	r0, [r3, #4]
 80017ac:	4b36      	ldr	r3, [pc, #216]	@ (8001888 <sevSeg_Init+0x20c>)
 80017ae:	8819      	ldrh	r1, [r3, #0]
 80017b0:	4b3a      	ldr	r3, [pc, #232]	@ (800189c <sevSeg_Init+0x220>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	001a      	movs	r2, r3
 80017b6:	f001 fad8 	bl	8002d6a <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 80017ba:	193b      	adds	r3, r7, r4
 80017bc:	193a      	adds	r2, r7, r4
 80017be:	7812      	ldrb	r2, [r2, #0]
 80017c0:	0852      	lsrs	r2, r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	3301      	adds	r3, #1
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	2b07      	cmp	r3, #7
 80017ce:	ddd4      	ble.n	800177a <sevSeg_Init+0xfe>
	for(int i = 0; i <= 3; i++) {
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3301      	adds	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2b03      	cmp	r3, #3
 80017da:	ddc3      	ble.n	8001764 <sevSeg_Init+0xe8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80017dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001898 <sevSeg_Init+0x21c>)
 80017de:	6898      	ldr	r0, [r3, #8]
 80017e0:	4b2a      	ldr	r3, [pc, #168]	@ (800188c <sevSeg_Init+0x210>)
 80017e2:	8819      	ldrh	r1, [r3, #0]
 80017e4:	4b2d      	ldr	r3, [pc, #180]	@ (800189c <sevSeg_Init+0x220>)
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	001a      	movs	r2, r3
 80017ea:	f001 fabe 	bl	8002d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80017ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001898 <sevSeg_Init+0x21c>)
 80017f0:	6898      	ldr	r0, [r3, #8]
 80017f2:	4b26      	ldr	r3, [pc, #152]	@ (800188c <sevSeg_Init+0x210>)
 80017f4:	8819      	ldrh	r1, [r3, #0]
 80017f6:	4b29      	ldr	r3, [pc, #164]	@ (800189c <sevSeg_Init+0x220>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	001a      	movs	r2, r3
 80017fc:	f001 fab5 	bl	8002d6a <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8001800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001802:	0018      	movs	r0, r3
 8001804:	f003 fdb8 	bl	8005378 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8001808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800180a:	0018      	movs	r0, r3
 800180c:	f003 fd68 	bl	80052e0 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8001810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001816:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8001818:	46c0      	nop			@ (mov r8, r8)
 800181a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	1ad2      	subs	r2, r2, r3
 8001824:	2380      	movs	r3, #128	@ 0x80
 8001826:	01db      	lsls	r3, r3, #7
 8001828:	429a      	cmp	r2, r3
 800182a:	d3f6      	bcc.n	800181a <sevSeg_Init+0x19e>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 800182c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800182e:	0018      	movs	r0, r3
 8001830:	f003 fda2 	bl	8005378 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001834:	4b18      	ldr	r3, [pc, #96]	@ (8001898 <sevSeg_Init+0x21c>)
 8001836:	6918      	ldr	r0, [r3, #16]
 8001838:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <sevSeg_Init+0x218>)
 800183a:	8819      	ldrh	r1, [r3, #0]
 800183c:	4b17      	ldr	r3, [pc, #92]	@ (800189c <sevSeg_Init+0x220>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	001a      	movs	r2, r3
 8001842:	f001 fa92 	bl	8002d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001846:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <sevSeg_Init+0x21c>)
 8001848:	6918      	ldr	r0, [r3, #16]
 800184a:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <sevSeg_Init+0x218>)
 800184c:	8819      	ldrh	r1, [r3, #0]
 800184e:	4b13      	ldr	r3, [pc, #76]	@ (800189c <sevSeg_Init+0x220>)
 8001850:	785b      	ldrb	r3, [r3, #1]
 8001852:	001a      	movs	r2, r3
 8001854:	f001 fa89 	bl	8002d6a <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001858:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <sevSeg_Init+0x21c>)
 800185a:	6898      	ldr	r0, [r3, #8]
 800185c:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <sevSeg_Init+0x210>)
 800185e:	8819      	ldrh	r1, [r3, #0]
 8001860:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <sevSeg_Init+0x220>)
 8001862:	785b      	ldrb	r3, [r3, #1]
 8001864:	001a      	movs	r2, r3
 8001866:	f001 fa80 	bl	8002d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800186a:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <sevSeg_Init+0x21c>)
 800186c:	6898      	ldr	r0, [r3, #8]
 800186e:	4b07      	ldr	r3, [pc, #28]	@ (800188c <sevSeg_Init+0x210>)
 8001870:	8819      	ldrh	r1, [r3, #0]
 8001872:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <sevSeg_Init+0x220>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	001a      	movs	r2, r3
 8001878:	f001 fa77 	bl	8002d6a <HAL_GPIO_WritePin>

}
 800187c:	46c0      	nop			@ (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	b008      	add	sp, #32
 8001882:	bdb0      	pop	{r4, r5, r7, pc}
 8001884:	20000228 	.word	0x20000228
 8001888:	2000022a 	.word	0x2000022a
 800188c:	2000022c 	.word	0x2000022c
 8001890:	2000022e 	.word	0x2000022e
 8001894:	20000230 	.word	0x20000230
 8001898:	20000030 	.word	0x20000030
 800189c:	20000044 	.word	0x20000044
 80018a0:	471d3700 	.word	0x471d3700

080018a4 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	210a      	movs	r1, #10
 80018b2:	0018      	movs	r0, r3
 80018b4:	f7fe fc26 	bl	8000104 <__udivsi3>
 80018b8:	0003      	movs	r3, r0
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	2408      	movs	r4, #8
 80018be:	193b      	adds	r3, r7, r4
 80018c0:	701a      	strb	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	210a      	movs	r1, #10
 80018c8:	0018      	movs	r0, r3
 80018ca:	f7fe fca1 	bl	8000210 <__aeabi_uidivmod>
 80018ce:	000b      	movs	r3, r1
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	193b      	adds	r3, r7, r4
 80018d4:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80018da:	210a      	movs	r1, #10
 80018dc:	0018      	movs	r0, r3
 80018de:	f7fe fc11 	bl	8000104 <__udivsi3>
 80018e2:	0003      	movs	r3, r0
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	193b      	adds	r3, r7, r4
 80018e8:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80018ee:	210a      	movs	r1, #10
 80018f0:	0018      	movs	r0, r3
 80018f2:	f7fe fc8d 	bl	8000210 <__aeabi_uidivmod>
 80018f6:	000b      	movs	r3, r1
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	193b      	adds	r3, r7, r4
 80018fc:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 80018fe:	2116      	movs	r1, #22
 8001900:	187b      	adds	r3, r7, r1
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	78db      	ldrb	r3, [r3, #3]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d102      	bne.n	8001914 <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 800190e:	187b      	adds	r3, r7, r1
 8001910:	2202      	movs	r2, #2
 8001912:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	e04f      	b.n	80019ba <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 800191a:	2308      	movs	r3, #8
 800191c:	18fa      	adds	r2, r7, r3
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	18d3      	adds	r3, r2, r3
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	0019      	movs	r1, r3
 8001926:	2417      	movs	r4, #23
 8001928:	193b      	adds	r3, r7, r4
 800192a:	4a30      	ldr	r2, [pc, #192]	@ (80019ec <sevSeg_updateDigits+0x148>)
 800192c:	5c52      	ldrb	r2, [r2, r1]
 800192e:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d110      	bne.n	8001958 <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	210a      	movs	r1, #10
 800193c:	0018      	movs	r0, r3
 800193e:	f7fe fbe1 	bl	8000104 <__udivsi3>
 8001942:	0003      	movs	r3, r0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	001a      	movs	r2, r3
 8001948:	2316      	movs	r3, #22
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	18d2      	adds	r2, r2, r3
 8001950:	193b      	adds	r3, r7, r4
 8001952:	4927      	ldr	r1, [pc, #156]	@ (80019f0 <sevSeg_updateDigits+0x14c>)
 8001954:	5c8a      	ldrb	r2, [r1, r2]
 8001956:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	e027      	b.n	80019ae <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 800195e:	4b25      	ldr	r3, [pc, #148]	@ (80019f4 <sevSeg_updateDigits+0x150>)
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	4b25      	ldr	r3, [pc, #148]	@ (80019f8 <sevSeg_updateDigits+0x154>)
 8001964:	8819      	ldrh	r1, [r3, #0]
 8001966:	2417      	movs	r4, #23
 8001968:	193b      	adds	r3, r7, r4
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2201      	movs	r2, #1
 800196e:	4013      	ands	r3, r2
 8001970:	4a22      	ldr	r2, [pc, #136]	@ (80019fc <sevSeg_updateDigits+0x158>)
 8001972:	5cd3      	ldrb	r3, [r2, r3]
 8001974:	001a      	movs	r2, r3
 8001976:	f001 f9f8 	bl	8002d6a <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 800197a:	4b1e      	ldr	r3, [pc, #120]	@ (80019f4 <sevSeg_updateDigits+0x150>)
 800197c:	6858      	ldr	r0, [r3, #4]
 800197e:	4b20      	ldr	r3, [pc, #128]	@ (8001a00 <sevSeg_updateDigits+0x15c>)
 8001980:	8819      	ldrh	r1, [r3, #0]
 8001982:	4b1e      	ldr	r3, [pc, #120]	@ (80019fc <sevSeg_updateDigits+0x158>)
 8001984:	785b      	ldrb	r3, [r3, #1]
 8001986:	001a      	movs	r2, r3
 8001988:	f001 f9ef 	bl	8002d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 800198c:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <sevSeg_updateDigits+0x150>)
 800198e:	6858      	ldr	r0, [r3, #4]
 8001990:	4b1b      	ldr	r3, [pc, #108]	@ (8001a00 <sevSeg_updateDigits+0x15c>)
 8001992:	8819      	ldrh	r1, [r3, #0]
 8001994:	4b19      	ldr	r3, [pc, #100]	@ (80019fc <sevSeg_updateDigits+0x158>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	001a      	movs	r2, r3
 800199a:	f001 f9e6 	bl	8002d6a <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 800199e:	193b      	adds	r3, r7, r4
 80019a0:	193a      	adds	r2, r7, r4
 80019a2:	7812      	ldrb	r2, [r2, #0]
 80019a4:	0852      	lsrs	r2, r2, #1
 80019a6:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	3301      	adds	r3, #1
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2b07      	cmp	r3, #7
 80019b2:	ddd4      	ble.n	800195e <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	3301      	adds	r3, #1
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	ddac      	ble.n	800191a <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80019c0:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <sevSeg_updateDigits+0x150>)
 80019c2:	6898      	ldr	r0, [r3, #8]
 80019c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <sevSeg_updateDigits+0x160>)
 80019c6:	8819      	ldrh	r1, [r3, #0]
 80019c8:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <sevSeg_updateDigits+0x158>)
 80019ca:	785b      	ldrb	r3, [r3, #1]
 80019cc:	001a      	movs	r2, r3
 80019ce:	f001 f9cc 	bl	8002d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80019d2:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <sevSeg_updateDigits+0x150>)
 80019d4:	6898      	ldr	r0, [r3, #8]
 80019d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <sevSeg_updateDigits+0x160>)
 80019d8:	8819      	ldrh	r1, [r3, #0]
 80019da:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <sevSeg_updateDigits+0x158>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	001a      	movs	r2, r3
 80019e0:	f001 f9c3 	bl	8002d6a <HAL_GPIO_WritePin>

	return;
 80019e4:	46c0      	nop			@ (mov r8, r8)

}
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b007      	add	sp, #28
 80019ea:	bd90      	pop	{r4, r7, pc}
 80019ec:	08006030 	.word	0x08006030
 80019f0:	0800603c 	.word	0x0800603c
 80019f4:	20000030 	.word	0x20000030
 80019f8:	20000228 	.word	0x20000228
 80019fc:	20000044 	.word	0x20000044
 8001a00:	2000022a 	.word	0x2000022a
 8001a04:	2000022c 	.word	0x2000022c

08001a08 <sevSeg_setIntensity>:

void sevSeg_setIntensity(TIM_HandleTypeDef *htim_PWM, uint32_t tim_PWM_CHANNEL, uint16_t dutyCycle) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	1dbb      	adds	r3, r7, #6
 8001a14:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(htim_PWM, tim_PWM_CHANNEL, dutyCycle);
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d105      	bne.n	8001a28 <sevSeg_setIntensity+0x20>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	1dba      	adds	r2, r7, #6
 8001a22:	8812      	ldrh	r2, [r2, #0]
 8001a24:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a26:	e028      	b.n	8001a7a <sevSeg_setIntensity+0x72>
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d105      	bne.n	8001a3a <sevSeg_setIntensity+0x32>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	1dbb      	adds	r3, r7, #6
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	6393      	str	r3, [r2, #56]	@ 0x38
 8001a38:	e01f      	b.n	8001a7a <sevSeg_setIntensity+0x72>
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d105      	bne.n	8001a4c <sevSeg_setIntensity+0x44>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	1dbb      	adds	r3, r7, #6
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001a4a:	e016      	b.n	8001a7a <sevSeg_setIntensity+0x72>
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b0c      	cmp	r3, #12
 8001a50:	d105      	bne.n	8001a5e <sevSeg_setIntensity+0x56>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	1dbb      	adds	r3, r7, #6
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a5c:	e00d      	b.n	8001a7a <sevSeg_setIntensity+0x72>
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b10      	cmp	r3, #16
 8001a62:	d105      	bne.n	8001a70 <sevSeg_setIntensity+0x68>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	1dbb      	adds	r3, r7, #6
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a6e:	e004      	b.n	8001a7a <sevSeg_setIntensity+0x72>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	1dbb      	adds	r3, r7, #6
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(htim_PWM, tim_PWM_CHANNEL);
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	0011      	movs	r1, r2
 8001a80:	0018      	movs	r0, r3
 8001a82:	f003 fcf7 	bl	8005474 <HAL_TIM_PWM_Start>

}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b004      	add	sp, #16
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	4b13      	ldr	r3, [pc, #76]	@ (8001ae4 <HAL_MspInit+0x54>)
 8001a98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ae4 <HAL_MspInit+0x54>)
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001aa2:	4b10      	ldr	r3, [pc, #64]	@ (8001ae4 <HAL_MspInit+0x54>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <HAL_MspInit+0x54>)
 8001ab0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <HAL_MspInit+0x54>)
 8001ab4:	2180      	movs	r1, #128	@ 0x80
 8001ab6:	0549      	lsls	r1, r1, #21
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001abc:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <HAL_MspInit+0x54>)
 8001abe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ac0:	2380      	movs	r3, #128	@ 0x80
 8001ac2:	055b      	lsls	r3, r3, #21
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	2004      	movs	r0, #4
 8001ad0:	f000 ff98 	bl	8002a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001ad4:	2004      	movs	r0, #4
 8001ad6:	f000 ffaa 	bl	8002a2e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ada:	46c0      	nop			@ (mov r8, r8)
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b002      	add	sp, #8
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b08b      	sub	sp, #44	@ 0x2c
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	2414      	movs	r4, #20
 8001af2:	193b      	adds	r3, r7, r4
 8001af4:	0018      	movs	r0, r3
 8001af6:	2314      	movs	r3, #20
 8001af8:	001a      	movs	r2, r3
 8001afa:	2100      	movs	r1, #0
 8001afc:	f004 fa44 	bl	8005f88 <memset>
  if(hadc->Instance==ADC1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a18      	ldr	r2, [pc, #96]	@ (8001b68 <HAL_ADC_MspInit+0x80>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d129      	bne.n	8001b5e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b0a:	4b18      	ldr	r3, [pc, #96]	@ (8001b6c <HAL_ADC_MspInit+0x84>)
 8001b0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b0e:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <HAL_ADC_MspInit+0x84>)
 8001b10:	2180      	movs	r1, #128	@ 0x80
 8001b12:	0349      	lsls	r1, r1, #13
 8001b14:	430a      	orrs	r2, r1
 8001b16:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b18:	4b14      	ldr	r3, [pc, #80]	@ (8001b6c <HAL_ADC_MspInit+0x84>)
 8001b1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b1c:	2380      	movs	r3, #128	@ 0x80
 8001b1e:	035b      	lsls	r3, r3, #13
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <HAL_ADC_MspInit+0x84>)
 8001b28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b2a:	4b10      	ldr	r3, [pc, #64]	@ (8001b6c <HAL_ADC_MspInit+0x84>)
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b32:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <HAL_ADC_MspInit+0x84>)
 8001b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b36:	2201      	movs	r2, #1
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b3e:	193b      	adds	r3, r7, r4
 8001b40:	2204      	movs	r2, #4
 8001b42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b44:	193b      	adds	r3, r7, r4
 8001b46:	2203      	movs	r2, #3
 8001b48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	193b      	adds	r3, r7, r4
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b50:	193a      	adds	r2, r7, r4
 8001b52:	23a0      	movs	r3, #160	@ 0xa0
 8001b54:	05db      	lsls	r3, r3, #23
 8001b56:	0011      	movs	r1, r2
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f000 ff85 	bl	8002a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b5e:	46c0      	nop			@ (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b00b      	add	sp, #44	@ 0x2c
 8001b64:	bd90      	pop	{r4, r7, pc}
 8001b66:	46c0      	nop			@ (mov r8, r8)
 8001b68:	40012400 	.word	0x40012400
 8001b6c:	40021000 	.word	0x40021000

08001b70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b095      	sub	sp, #84	@ 0x54
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	233c      	movs	r3, #60	@ 0x3c
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	2314      	movs	r3, #20
 8001b80:	001a      	movs	r2, r3
 8001b82:	2100      	movs	r1, #0
 8001b84:	f004 fa00 	bl	8005f88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b88:	2414      	movs	r4, #20
 8001b8a:	193b      	adds	r3, r7, r4
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	2328      	movs	r3, #40	@ 0x28
 8001b90:	001a      	movs	r2, r3
 8001b92:	2100      	movs	r1, #0
 8001b94:	f004 f9f8 	bl	8005f88 <memset>
  if(hi2c->Instance==I2C1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a22      	ldr	r2, [pc, #136]	@ (8001c28 <HAL_I2C_MspInit+0xb8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d13d      	bne.n	8001c1e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ba2:	193b      	adds	r3, r7, r4
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ba8:	193b      	adds	r3, r7, r4
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bae:	193b      	adds	r3, r7, r4
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f002 fc7d 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 8001bb6:	1e03      	subs	r3, r0, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001bba:	f7ff fd59 	bl	8001670 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <HAL_I2C_MspInit+0xbc>)
 8001bc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <HAL_I2C_MspInit+0xbc>)
 8001bc4:	2102      	movs	r1, #2
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bca:	4b18      	ldr	r3, [pc, #96]	@ (8001c2c <HAL_I2C_MspInit+0xbc>)
 8001bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bd6:	213c      	movs	r1, #60	@ 0x3c
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	22c0      	movs	r2, #192	@ 0xc0
 8001bdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bde:	187b      	adds	r3, r7, r1
 8001be0:	2212      	movs	r2, #18
 8001be2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	187b      	adds	r3, r7, r1
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	2206      	movs	r2, #6
 8001bf4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf6:	187b      	adds	r3, r7, r1
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <HAL_I2C_MspInit+0xc0>)
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	0010      	movs	r0, r2
 8001bfe:	f000 ff33 	bl	8002a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c02:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <HAL_I2C_MspInit+0xbc>)
 8001c04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c06:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <HAL_I2C_MspInit+0xbc>)
 8001c08:	2180      	movs	r1, #128	@ 0x80
 8001c0a:	0389      	lsls	r1, r1, #14
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c10:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <HAL_I2C_MspInit+0xbc>)
 8001c12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c14:	2380      	movs	r3, #128	@ 0x80
 8001c16:	039b      	lsls	r3, r3, #14
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c1e:	46c0      	nop			@ (mov r8, r8)
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b015      	add	sp, #84	@ 0x54
 8001c24:	bd90      	pop	{r4, r7, pc}
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	40005400 	.word	0x40005400
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	50000400 	.word	0x50000400

08001c34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b08f      	sub	sp, #60	@ 0x3c
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c3c:	2410      	movs	r4, #16
 8001c3e:	193b      	adds	r3, r7, r4
 8001c40:	0018      	movs	r0, r3
 8001c42:	2328      	movs	r3, #40	@ 0x28
 8001c44:	001a      	movs	r2, r3
 8001c46:	2100      	movs	r1, #0
 8001c48:	f004 f99e 	bl	8005f88 <memset>
  if(hrtc->Instance==RTC)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a19      	ldr	r2, [pc, #100]	@ (8001cb8 <HAL_RTC_MspInit+0x84>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d12c      	bne.n	8001cb0 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c56:	193b      	adds	r3, r7, r4
 8001c58:	2280      	movs	r2, #128	@ 0x80
 8001c5a:	0292      	lsls	r2, r2, #10
 8001c5c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c5e:	193b      	adds	r3, r7, r4
 8001c60:	2280      	movs	r2, #128	@ 0x80
 8001c62:	0052      	lsls	r2, r2, #1
 8001c64:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c66:	193b      	adds	r3, r7, r4
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f002 fc21 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 8001c6e:	1e03      	subs	r3, r0, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001c72:	f7ff fcfd 	bl	8001670 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c76:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <HAL_RTC_MspInit+0x88>)
 8001c78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c7a:	4b10      	ldr	r3, [pc, #64]	@ (8001cbc <HAL_RTC_MspInit+0x88>)
 8001c7c:	2180      	movs	r1, #128	@ 0x80
 8001c7e:	0209      	lsls	r1, r1, #8
 8001c80:	430a      	orrs	r2, r1
 8001c82:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001c84:	4b0d      	ldr	r3, [pc, #52]	@ (8001cbc <HAL_RTC_MspInit+0x88>)
 8001c86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c88:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <HAL_RTC_MspInit+0x88>)
 8001c8a:	2180      	movs	r1, #128	@ 0x80
 8001c8c:	00c9      	lsls	r1, r1, #3
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c92:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <HAL_RTC_MspInit+0x88>)
 8001c94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c96:	2380      	movs	r3, #128	@ 0x80
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	f000 fead 	bl	8002a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001caa:	2002      	movs	r0, #2
 8001cac:	f000 febf 	bl	8002a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001cb0:	46c0      	nop			@ (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b00f      	add	sp, #60	@ 0x3c
 8001cb6:	bd90      	pop	{r4, r7, pc}
 8001cb8:	40002800 	.word	0x40002800
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2380      	movs	r3, #128	@ 0x80
 8001cce:	05db      	lsls	r3, r3, #23
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d10b      	bne.n	8001cec <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cd4:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <HAL_TIM_PWM_MspInit+0x34>)
 8001cd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cd8:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_TIM_PWM_MspInit+0x34>)
 8001cda:	2101      	movs	r1, #1
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ce0:	4b04      	ldr	r3, [pc, #16]	@ (8001cf4 <HAL_TIM_PWM_MspInit+0x34>)
 8001ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cec:	46c0      	nop			@ (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b004      	add	sp, #16
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <HAL_TIM_Base_MspInit+0x38>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d10d      	bne.n	8001d26 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d34 <HAL_TIM_Base_MspInit+0x3c>)
 8001d0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d0e:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <HAL_TIM_Base_MspInit+0x3c>)
 8001d10:	2180      	movs	r1, #128	@ 0x80
 8001d12:	0209      	lsls	r1, r1, #8
 8001d14:	430a      	orrs	r2, r1
 8001d16:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <HAL_TIM_Base_MspInit+0x3c>)
 8001d1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d1c:	2380      	movs	r3, #128	@ 0x80
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	4013      	ands	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b004      	add	sp, #16
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	40002000 	.word	0x40002000
 8001d34:	40021000 	.word	0x40021000

08001d38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b089      	sub	sp, #36	@ 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	240c      	movs	r4, #12
 8001d42:	193b      	adds	r3, r7, r4
 8001d44:	0018      	movs	r0, r3
 8001d46:	2314      	movs	r3, #20
 8001d48:	001a      	movs	r2, r3
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	f004 f91c 	bl	8005f88 <memset>
  if(htim->Instance==TIM2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	@ 0x80
 8001d56:	05db      	lsls	r3, r3, #23
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d121      	bne.n	8001da0 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5c:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <HAL_TIM_MspPostInit+0x70>)
 8001d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d60:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <HAL_TIM_MspPostInit+0x70>)
 8001d62:	2104      	movs	r1, #4
 8001d64:	430a      	orrs	r2, r1
 8001d66:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d68:	4b0f      	ldr	r3, [pc, #60]	@ (8001da8 <HAL_TIM_MspPostInit+0x70>)
 8001d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	4013      	ands	r3, r2
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 8001d74:	0021      	movs	r1, r4
 8001d76:	187b      	adds	r3, r7, r1
 8001d78:	2240      	movs	r2, #64	@ 0x40
 8001d7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	187b      	adds	r3, r7, r1
 8001d7e:	2202      	movs	r2, #2
 8001d80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	187b      	adds	r3, r7, r1
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d88:	187b      	adds	r3, r7, r1
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001d8e:	187b      	adds	r3, r7, r1
 8001d90:	2202      	movs	r2, #2
 8001d92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d94:	187b      	adds	r3, r7, r1
 8001d96:	4a05      	ldr	r2, [pc, #20]	@ (8001dac <HAL_TIM_MspPostInit+0x74>)
 8001d98:	0019      	movs	r1, r3
 8001d9a:	0010      	movs	r0, r2
 8001d9c:	f000 fe64 	bl	8002a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001da0:	46c0      	nop			@ (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b009      	add	sp, #36	@ 0x24
 8001da6:	bd90      	pop	{r4, r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	50000800 	.word	0x50000800

08001db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001db4:	46c0      	nop			@ (mov r8, r8)
 8001db6:	e7fd      	b.n	8001db4 <NMI_Handler+0x4>

08001db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dbc:	46c0      	nop			@ (mov r8, r8)
 8001dbe:	e7fd      	b.n	8001dbc <HardFault_Handler+0x4>

08001dc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001dc4:	46c0      	nop			@ (mov r8, r8)
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd8:	f000 f8ce 	bl	8001f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ddc:	46c0      	nop			@ (mov r8, r8)
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001de8:	4b03      	ldr	r3, [pc, #12]	@ (8001df8 <RTC_TAMP_IRQHandler+0x14>)
 8001dea:	0018      	movs	r0, r3
 8001dec:	f003 f8a0 	bl	8004f30 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8001df0:	46c0      	nop			@ (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	46c0      	nop			@ (mov r8, r8)
 8001df8:	2000012c 	.word	0x2000012c

08001dfc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001e00:	46c0      	nop			@ (mov r8, r8)
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f000 ffe6 	bl	8002ddc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 8001e10:	2002      	movs	r0, #2
 8001e12:	f000 ffe3 	bl	8002ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001e16:	46c0      	nop			@ (mov r8, r8)
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 8001e20:	2004      	movs	r0, #4
 8001e22:	f000 ffdb 	bl	8002ddc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 8001e26:	2008      	movs	r0, #8
 8001e28:	f000 ffd8 	bl	8002ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001e2c:	46c0      	nop			@ (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 8001e36:	2380      	movs	r3, #128	@ 0x80
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f000 ffce 	bl	8002ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001e40:	46c0      	nop			@ (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e4a:	46c0      	nop			@ (mov r8, r8)
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e50:	480d      	ldr	r0, [pc, #52]	@ (8001e88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e54:	f7ff fff7 	bl	8001e46 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e58:	480c      	ldr	r0, [pc, #48]	@ (8001e8c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e5a:	490d      	ldr	r1, [pc, #52]	@ (8001e90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e94 <LoopForever+0xe>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e60:	e002      	b.n	8001e68 <LoopCopyDataInit>

08001e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e66:	3304      	adds	r3, #4

08001e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e6c:	d3f9      	bcc.n	8001e62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e70:	4c0a      	ldr	r4, [pc, #40]	@ (8001e9c <LoopForever+0x16>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e74:	e001      	b.n	8001e7a <LoopFillZerobss>

08001e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e78:	3204      	adds	r2, #4

08001e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e7c:	d3fb      	bcc.n	8001e76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e7e:	f004 f88b 	bl	8005f98 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001e82:	f7fe fcbf 	bl	8000804 <main>

08001e86 <LoopForever>:

LoopForever:
  b LoopForever
 8001e86:	e7fe      	b.n	8001e86 <LoopForever>
  ldr   r0, =_estack
 8001e88:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e90:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001e94:	080060dc 	.word	0x080060dc
  ldr r2, =_sbss
 8001e98:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001e9c:	20000238 	.word	0x20000238

08001ea0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ea0:	e7fe      	b.n	8001ea0 <ADC1_IRQHandler>
	...

08001ea4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001eaa:	1dfb      	adds	r3, r7, #7
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <HAL_Init+0x3c>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <HAL_Init+0x3c>)
 8001eb6:	2180      	movs	r1, #128	@ 0x80
 8001eb8:	0049      	lsls	r1, r1, #1
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ebe:	2003      	movs	r0, #3
 8001ec0:	f000 f810 	bl	8001ee4 <HAL_InitTick>
 8001ec4:	1e03      	subs	r3, r0, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ec8:	1dfb      	adds	r3, r7, #7
 8001eca:	2201      	movs	r2, #1
 8001ecc:	701a      	strb	r2, [r3, #0]
 8001ece:	e001      	b.n	8001ed4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001ed0:	f7ff fdde 	bl	8001a90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ed4:	1dfb      	adds	r3, r7, #7
 8001ed6:	781b      	ldrb	r3, [r3, #0]
}
 8001ed8:	0018      	movs	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b002      	add	sp, #8
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40022000 	.word	0x40022000

08001ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001eec:	230f      	movs	r3, #15
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f6c <HAL_InitTick+0x88>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d02b      	beq.n	8001f54 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001efc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f70 <HAL_InitTick+0x8c>)
 8001efe:	681c      	ldr	r4, [r3, #0]
 8001f00:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <HAL_InitTick+0x88>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	0019      	movs	r1, r3
 8001f06:	23fa      	movs	r3, #250	@ 0xfa
 8001f08:	0098      	lsls	r0, r3, #2
 8001f0a:	f7fe f8fb 	bl	8000104 <__udivsi3>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	0019      	movs	r1, r3
 8001f12:	0020      	movs	r0, r4
 8001f14:	f7fe f8f6 	bl	8000104 <__udivsi3>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f000 fd97 	bl	8002a4e <HAL_SYSTICK_Config>
 8001f20:	1e03      	subs	r3, r0, #0
 8001f22:	d112      	bne.n	8001f4a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d80a      	bhi.n	8001f40 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	425b      	negs	r3, r3
 8001f30:	2200      	movs	r2, #0
 8001f32:	0018      	movs	r0, r3
 8001f34:	f000 fd66 	bl	8002a04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f38:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <HAL_InitTick+0x90>)
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	e00d      	b.n	8001f5c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001f40:	230f      	movs	r3, #15
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
 8001f48:	e008      	b.n	8001f5c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f4a:	230f      	movs	r3, #15
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
 8001f52:	e003      	b.n	8001f5c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f54:	230f      	movs	r3, #15
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	2201      	movs	r2, #1
 8001f5a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001f5c:	230f      	movs	r3, #15
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	781b      	ldrb	r3, [r3, #0]
}
 8001f62:	0018      	movs	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b005      	add	sp, #20
 8001f68:	bd90      	pop	{r4, r7, pc}
 8001f6a:	46c0      	nop			@ (mov r8, r8)
 8001f6c:	20000050 	.word	0x20000050
 8001f70:	20000048 	.word	0x20000048
 8001f74:	2000004c 	.word	0x2000004c

08001f78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f7c:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <HAL_IncTick+0x1c>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	001a      	movs	r2, r3
 8001f82:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <HAL_IncTick+0x20>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	18d2      	adds	r2, r2, r3
 8001f88:	4b03      	ldr	r3, [pc, #12]	@ (8001f98 <HAL_IncTick+0x20>)
 8001f8a:	601a      	str	r2, [r3, #0]
}
 8001f8c:	46c0      	nop			@ (mov r8, r8)
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	20000050 	.word	0x20000050
 8001f98:	20000234 	.word	0x20000234

08001f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa0:	4b02      	ldr	r3, [pc, #8]	@ (8001fac <HAL_GetTick+0x10>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			@ (mov r8, r8)
 8001fac:	20000234 	.word	0x20000234

08001fb0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a05      	ldr	r2, [pc, #20]	@ (8001fd4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	601a      	str	r2, [r3, #0]
}
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b002      	add	sp, #8
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	fe3fffff 	.word	0xfe3fffff

08001fd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	23e0      	movs	r3, #224	@ 0xe0
 8001fe6:	045b      	lsls	r3, r3, #17
 8001fe8:	4013      	ands	r3, r2
}
 8001fea:	0018      	movs	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b002      	add	sp, #8
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	2104      	movs	r1, #4
 8002006:	400a      	ands	r2, r1
 8002008:	2107      	movs	r1, #7
 800200a:	4091      	lsls	r1, r2
 800200c:	000a      	movs	r2, r1
 800200e:	43d2      	mvns	r2, r2
 8002010:	401a      	ands	r2, r3
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2104      	movs	r1, #4
 8002016:	400b      	ands	r3, r1
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4099      	lsls	r1, r3
 800201c:	000b      	movs	r3, r1
 800201e:	431a      	orrs	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002024:	46c0      	nop			@ (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	b004      	add	sp, #16
 800202a:	bd80      	pop	{r7, pc}

0800202c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	2104      	movs	r1, #4
 800203e:	400a      	ands	r2, r1
 8002040:	2107      	movs	r1, #7
 8002042:	4091      	lsls	r1, r2
 8002044:	000a      	movs	r2, r1
 8002046:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2104      	movs	r1, #4
 800204c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800204e:	40da      	lsrs	r2, r3
 8002050:	0013      	movs	r3, r2
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b002      	add	sp, #8
 8002058:	bd80      	pop	{r7, pc}

0800205a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	211f      	movs	r1, #31
 800206e:	400a      	ands	r2, r1
 8002070:	210f      	movs	r1, #15
 8002072:	4091      	lsls	r1, r2
 8002074:	000a      	movs	r2, r1
 8002076:	43d2      	mvns	r2, r2
 8002078:	401a      	ands	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	0e9b      	lsrs	r3, r3, #26
 800207e:	210f      	movs	r1, #15
 8002080:	4019      	ands	r1, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	201f      	movs	r0, #31
 8002086:	4003      	ands	r3, r0
 8002088:	4099      	lsls	r1, r3
 800208a:	000b      	movs	r3, r1
 800208c:	431a      	orrs	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002092:	46c0      	nop			@ (mov r8, r8)
 8002094:	46bd      	mov	sp, r7
 8002096:	b004      	add	sp, #16
 8002098:	bd80      	pop	{r7, pc}

0800209a <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	035b      	lsls	r3, r3, #13
 80020ac:	0b5b      	lsrs	r3, r3, #13
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020b4:	46c0      	nop			@ (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b002      	add	sp, #8
 80020ba:	bd80      	pop	{r7, pc}

080020bc <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	0352      	lsls	r2, r2, #13
 80020ce:	0b52      	lsrs	r2, r2, #13
 80020d0:	43d2      	mvns	r2, r2
 80020d2:	401a      	ands	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020d8:	46c0      	nop			@ (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	b002      	add	sp, #8
 80020de:	bd80      	pop	{r7, pc}

080020e0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	0212      	lsls	r2, r2, #8
 80020f4:	43d2      	mvns	r2, r2
 80020f6:	401a      	ands	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	400b      	ands	r3, r1
 8002100:	4904      	ldr	r1, [pc, #16]	@ (8002114 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002102:	400b      	ands	r3, r1
 8002104:	431a      	orrs	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800210a:	46c0      	nop			@ (mov r8, r8)
 800210c:	46bd      	mov	sp, r7
 800210e:	b004      	add	sp, #16
 8002110:	bd80      	pop	{r7, pc}
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	07ffff00 	.word	0x07ffff00

08002118 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	4a05      	ldr	r2, [pc, #20]	@ (800213c <LL_ADC_EnableInternalRegulator+0x24>)
 8002126:	4013      	ands	r3, r2
 8002128:	2280      	movs	r2, #128	@ 0x80
 800212a:	0552      	lsls	r2, r2, #21
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002132:	46c0      	nop			@ (mov r8, r8)
 8002134:	46bd      	mov	sp, r7
 8002136:	b002      	add	sp, #8
 8002138:	bd80      	pop	{r7, pc}
 800213a:	46c0      	nop			@ (mov r8, r8)
 800213c:	6fffffe8 	.word	0x6fffffe8

08002140 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	2380      	movs	r3, #128	@ 0x80
 800214e:	055b      	lsls	r3, r3, #21
 8002150:	401a      	ands	r2, r3
 8002152:	2380      	movs	r3, #128	@ 0x80
 8002154:	055b      	lsls	r3, r3, #21
 8002156:	429a      	cmp	r2, r3
 8002158:	d101      	bne.n	800215e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800215e:	2300      	movs	r3, #0
}
 8002160:	0018      	movs	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	b002      	add	sp, #8
 8002166:	bd80      	pop	{r7, pc}

08002168 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2201      	movs	r2, #1
 8002176:	4013      	ands	r3, r2
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <LL_ADC_IsEnabled+0x18>
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <LL_ADC_IsEnabled+0x1a>
 8002180:	2300      	movs	r3, #0
}
 8002182:	0018      	movs	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	b002      	add	sp, #8
 8002188:	bd80      	pop	{r7, pc}

0800218a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2204      	movs	r2, #4
 8002198:	4013      	ands	r3, r2
 800219a:	2b04      	cmp	r3, #4
 800219c:	d101      	bne.n	80021a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b002      	add	sp, #8
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b4:	231f      	movs	r3, #31
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e17f      	b.n	80024d2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10a      	bne.n	80021f0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	0018      	movs	r0, r3
 80021de:	f7ff fc83 	bl	8001ae8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2254      	movs	r2, #84	@ 0x54
 80021ec:	2100      	movs	r1, #0
 80021ee:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7ff ffa3 	bl	8002140 <LL_ADC_IsInternalRegulatorEnabled>
 80021fa:	1e03      	subs	r3, r0, #0
 80021fc:	d115      	bne.n	800222a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	0018      	movs	r0, r3
 8002204:	f7ff ff88 	bl	8002118 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002208:	4bb4      	ldr	r3, [pc, #720]	@ (80024dc <HAL_ADC_Init+0x330>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	49b4      	ldr	r1, [pc, #720]	@ (80024e0 <HAL_ADC_Init+0x334>)
 800220e:	0018      	movs	r0, r3
 8002210:	f7fd ff78 	bl	8000104 <__udivsi3>
 8002214:	0003      	movs	r3, r0
 8002216:	3301      	adds	r3, #1
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800221c:	e002      	b.n	8002224 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3b01      	subs	r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f9      	bne.n	800221e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	0018      	movs	r0, r3
 8002230:	f7ff ff86 	bl	8002140 <LL_ADC_IsInternalRegulatorEnabled>
 8002234:	1e03      	subs	r3, r0, #0
 8002236:	d10f      	bne.n	8002258 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223c:	2210      	movs	r2, #16
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002248:	2201      	movs	r2, #1
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002250:	231f      	movs	r3, #31
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	0018      	movs	r0, r3
 800225e:	f7ff ff94 	bl	800218a <LL_ADC_REG_IsConversionOngoing>
 8002262:	0003      	movs	r3, r0
 8002264:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226a:	2210      	movs	r2, #16
 800226c:	4013      	ands	r3, r2
 800226e:	d000      	beq.n	8002272 <HAL_ADC_Init+0xc6>
 8002270:	e122      	b.n	80024b8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d000      	beq.n	800227a <HAL_ADC_Init+0xce>
 8002278:	e11e      	b.n	80024b8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227e:	4a99      	ldr	r2, [pc, #612]	@ (80024e4 <HAL_ADC_Init+0x338>)
 8002280:	4013      	ands	r3, r2
 8002282:	2202      	movs	r2, #2
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	0018      	movs	r0, r3
 8002290:	f7ff ff6a 	bl	8002168 <LL_ADC_IsEnabled>
 8002294:	1e03      	subs	r3, r0, #0
 8002296:	d000      	beq.n	800229a <HAL_ADC_Init+0xee>
 8002298:	e0ad      	b.n	80023f6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	7e1b      	ldrb	r3, [r3, #24]
 80022a2:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80022a4:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7e5b      	ldrb	r3, [r3, #25]
 80022aa:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80022ac:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7e9b      	ldrb	r3, [r3, #26]
 80022b2:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80022b4:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <HAL_ADC_Init+0x118>
 80022be:	2380      	movs	r3, #128	@ 0x80
 80022c0:	015b      	lsls	r3, r3, #5
 80022c2:	e000      	b.n	80022c6 <HAL_ADC_Init+0x11a>
 80022c4:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80022c6:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80022cc:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da04      	bge.n	80022e0 <HAL_ADC_Init+0x134>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	085b      	lsrs	r3, r3, #1
 80022de:	e001      	b.n	80022e4 <HAL_ADC_Init+0x138>
 80022e0:	2380      	movs	r3, #128	@ 0x80
 80022e2:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80022e4:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	212c      	movs	r1, #44	@ 0x2c
 80022ea:	5c5b      	ldrb	r3, [r3, r1]
 80022ec:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80022ee:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2220      	movs	r2, #32
 80022fa:	5c9b      	ldrb	r3, [r3, r2]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d115      	bne.n	800232c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7e9b      	ldrb	r3, [r3, #26]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d105      	bne.n	8002314 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2280      	movs	r2, #128	@ 0x80
 800230c:	0252      	lsls	r2, r2, #9
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	e00b      	b.n	800232c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002318:	2220      	movs	r2, #32
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002324:	2201      	movs	r2, #1
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00a      	beq.n	800234a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002338:	23e0      	movs	r3, #224	@ 0xe0
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002342:	4313      	orrs	r3, r2
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a65      	ldr	r2, [pc, #404]	@ (80024e8 <HAL_ADC_Init+0x33c>)
 8002352:	4013      	ands	r3, r2
 8002354:	0019      	movs	r1, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	430a      	orrs	r2, r1
 800235e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	0f9b      	lsrs	r3, r3, #30
 8002366:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800236c:	4313      	orrs	r3, r2
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4313      	orrs	r3, r2
 8002372:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	223c      	movs	r2, #60	@ 0x3c
 8002378:	5c9b      	ldrb	r3, [r3, r2]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d111      	bne.n	80023a2 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	0f9b      	lsrs	r3, r3, #30
 8002384:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800238a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002390:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8002396:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	4313      	orrs	r3, r2
 800239c:	2201      	movs	r2, #1
 800239e:	4313      	orrs	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	4a50      	ldr	r2, [pc, #320]	@ (80024ec <HAL_ADC_Init+0x340>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	0019      	movs	r1, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	23c0      	movs	r3, #192	@ 0xc0
 80023be:	061b      	lsls	r3, r3, #24
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d018      	beq.n	80023f6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80023c8:	2380      	movs	r3, #128	@ 0x80
 80023ca:	05db      	lsls	r3, r3, #23
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d012      	beq.n	80023f6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80023d4:	2380      	movs	r3, #128	@ 0x80
 80023d6:	061b      	lsls	r3, r3, #24
 80023d8:	429a      	cmp	r2, r3
 80023da:	d00c      	beq.n	80023f6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80023dc:	4b44      	ldr	r3, [pc, #272]	@ (80024f0 <HAL_ADC_Init+0x344>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a44      	ldr	r2, [pc, #272]	@ (80024f4 <HAL_ADC_Init+0x348>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	0019      	movs	r1, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	23f0      	movs	r3, #240	@ 0xf0
 80023ec:	039b      	lsls	r3, r3, #14
 80023ee:	401a      	ands	r2, r3
 80023f0:	4b3f      	ldr	r3, [pc, #252]	@ (80024f0 <HAL_ADC_Init+0x344>)
 80023f2:	430a      	orrs	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023fe:	001a      	movs	r2, r3
 8002400:	2100      	movs	r1, #0
 8002402:	f7ff fdf6 	bl	8001ff2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240e:	493a      	ldr	r1, [pc, #232]	@ (80024f8 <HAL_ADC_Init+0x34c>)
 8002410:	001a      	movs	r2, r3
 8002412:	f7ff fdee 	bl	8001ff2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2110      	movs	r1, #16
 800242a:	4249      	negs	r1, r1
 800242c:	430a      	orrs	r2, r1
 800242e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002430:	e018      	b.n	8002464 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	2380      	movs	r3, #128	@ 0x80
 8002438:	039b      	lsls	r3, r3, #14
 800243a:	429a      	cmp	r2, r3
 800243c:	d112      	bne.n	8002464 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	3b01      	subs	r3, #1
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	221c      	movs	r2, #28
 800244e:	4013      	ands	r3, r2
 8002450:	2210      	movs	r2, #16
 8002452:	4252      	negs	r2, r2
 8002454:	409a      	lsls	r2, r3
 8002456:	0011      	movs	r1, r2
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2100      	movs	r1, #0
 800246a:	0018      	movs	r0, r3
 800246c:	f7ff fdde 	bl	800202c <LL_ADC_GetSamplingTimeCommonChannels>
 8002470:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002476:	429a      	cmp	r2, r3
 8002478:	d10b      	bne.n	8002492 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002484:	2203      	movs	r2, #3
 8002486:	4393      	bics	r3, r2
 8002488:	2201      	movs	r2, #1
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002490:	e01c      	b.n	80024cc <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002496:	2212      	movs	r2, #18
 8002498:	4393      	bics	r3, r2
 800249a:	2210      	movs	r2, #16
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a6:	2201      	movs	r2, #1
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80024ae:	231f      	movs	r3, #31
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	2201      	movs	r2, #1
 80024b4:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80024b6:	e009      	b.n	80024cc <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024bc:	2210      	movs	r2, #16
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80024c4:	231f      	movs	r3, #31
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80024cc:	231f      	movs	r3, #31
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	781b      	ldrb	r3, [r3, #0]
}
 80024d2:	0018      	movs	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b008      	add	sp, #32
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			@ (mov r8, r8)
 80024dc:	20000048 	.word	0x20000048
 80024e0:	00030d40 	.word	0x00030d40
 80024e4:	fffffefd 	.word	0xfffffefd
 80024e8:	ffde0201 	.word	0xffde0201
 80024ec:	1ffffc02 	.word	0x1ffffc02
 80024f0:	40012708 	.word	0x40012708
 80024f4:	ffc3ffff 	.word	0xffc3ffff
 80024f8:	07ffff04 	.word	0x07ffff04

080024fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002506:	2317      	movs	r3, #23
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2254      	movs	r2, #84	@ 0x54
 8002516:	5c9b      	ldrb	r3, [r3, r2]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x24>
 800251c:	2302      	movs	r3, #2
 800251e:	e1c0      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x3a6>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2254      	movs	r2, #84	@ 0x54
 8002524:	2101      	movs	r1, #1
 8002526:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	0018      	movs	r0, r3
 800252e:	f7ff fe2c 	bl	800218a <LL_ADC_REG_IsConversionOngoing>
 8002532:	1e03      	subs	r3, r0, #0
 8002534:	d000      	beq.n	8002538 <HAL_ADC_ConfigChannel+0x3c>
 8002536:	e1a3      	b.n	8002880 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d100      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x46>
 8002540:	e143      	b.n	80027ca <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	2380      	movs	r3, #128	@ 0x80
 8002548:	061b      	lsls	r3, r3, #24
 800254a:	429a      	cmp	r2, r3
 800254c:	d004      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002552:	4ac1      	ldr	r2, [pc, #772]	@ (8002858 <HAL_ADC_ConfigChannel+0x35c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d108      	bne.n	800256a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	0019      	movs	r1, r3
 8002562:	0010      	movs	r0, r2
 8002564:	f7ff fd99 	bl	800209a <LL_ADC_REG_SetSequencerChAdd>
 8002568:	e0c9      	b.n	80026fe <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	211f      	movs	r1, #31
 8002574:	400b      	ands	r3, r1
 8002576:	210f      	movs	r1, #15
 8002578:	4099      	lsls	r1, r3
 800257a:	000b      	movs	r3, r1
 800257c:	43db      	mvns	r3, r3
 800257e:	4013      	ands	r3, r2
 8002580:	0019      	movs	r1, r3
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	035b      	lsls	r3, r3, #13
 8002588:	0b5b      	lsrs	r3, r3, #13
 800258a:	d105      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x9c>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	0e9b      	lsrs	r3, r3, #26
 8002592:	221f      	movs	r2, #31
 8002594:	4013      	ands	r3, r2
 8002596:	e098      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1ce>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2201      	movs	r2, #1
 800259e:	4013      	ands	r3, r2
 80025a0:	d000      	beq.n	80025a4 <HAL_ADC_ConfigChannel+0xa8>
 80025a2:	e091      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x1cc>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2202      	movs	r2, #2
 80025aa:	4013      	ands	r3, r2
 80025ac:	d000      	beq.n	80025b0 <HAL_ADC_ConfigChannel+0xb4>
 80025ae:	e089      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x1c8>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2204      	movs	r2, #4
 80025b6:	4013      	ands	r3, r2
 80025b8:	d000      	beq.n	80025bc <HAL_ADC_ConfigChannel+0xc0>
 80025ba:	e081      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x1c4>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2208      	movs	r2, #8
 80025c2:	4013      	ands	r3, r2
 80025c4:	d000      	beq.n	80025c8 <HAL_ADC_ConfigChannel+0xcc>
 80025c6:	e079      	b.n	80026bc <HAL_ADC_ConfigChannel+0x1c0>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2210      	movs	r2, #16
 80025ce:	4013      	ands	r3, r2
 80025d0:	d000      	beq.n	80025d4 <HAL_ADC_ConfigChannel+0xd8>
 80025d2:	e071      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x1bc>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2220      	movs	r2, #32
 80025da:	4013      	ands	r3, r2
 80025dc:	d000      	beq.n	80025e0 <HAL_ADC_ConfigChannel+0xe4>
 80025de:	e069      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x1b8>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2240      	movs	r2, #64	@ 0x40
 80025e6:	4013      	ands	r3, r2
 80025e8:	d000      	beq.n	80025ec <HAL_ADC_ConfigChannel+0xf0>
 80025ea:	e061      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x1b4>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2280      	movs	r2, #128	@ 0x80
 80025f2:	4013      	ands	r3, r2
 80025f4:	d000      	beq.n	80025f8 <HAL_ADC_ConfigChannel+0xfc>
 80025f6:	e059      	b.n	80026ac <HAL_ADC_ConfigChannel+0x1b0>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2380      	movs	r3, #128	@ 0x80
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4013      	ands	r3, r2
 8002602:	d151      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x1ac>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	@ 0x80
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4013      	ands	r3, r2
 800260e:	d149      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x1a8>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2380      	movs	r3, #128	@ 0x80
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4013      	ands	r3, r2
 800261a:	d141      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x1a4>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	2380      	movs	r3, #128	@ 0x80
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	4013      	ands	r3, r2
 8002626:	d139      	bne.n	800269c <HAL_ADC_ConfigChannel+0x1a0>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2380      	movs	r3, #128	@ 0x80
 800262e:	015b      	lsls	r3, r3, #5
 8002630:	4013      	ands	r3, r2
 8002632:	d131      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x19c>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2380      	movs	r3, #128	@ 0x80
 800263a:	019b      	lsls	r3, r3, #6
 800263c:	4013      	ands	r3, r2
 800263e:	d129      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x198>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	2380      	movs	r3, #128	@ 0x80
 8002646:	01db      	lsls	r3, r3, #7
 8002648:	4013      	ands	r3, r2
 800264a:	d121      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x194>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2380      	movs	r3, #128	@ 0x80
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	4013      	ands	r3, r2
 8002656:	d119      	bne.n	800268c <HAL_ADC_ConfigChannel+0x190>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	2380      	movs	r3, #128	@ 0x80
 800265e:	025b      	lsls	r3, r3, #9
 8002660:	4013      	ands	r3, r2
 8002662:	d111      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x18c>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	2380      	movs	r3, #128	@ 0x80
 800266a:	029b      	lsls	r3, r3, #10
 800266c:	4013      	ands	r3, r2
 800266e:	d109      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x188>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	2380      	movs	r3, #128	@ 0x80
 8002676:	02db      	lsls	r3, r3, #11
 8002678:	4013      	ands	r3, r2
 800267a:	d001      	beq.n	8002680 <HAL_ADC_ConfigChannel+0x184>
 800267c:	2312      	movs	r3, #18
 800267e:	e024      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1ce>
 8002680:	2300      	movs	r3, #0
 8002682:	e022      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1ce>
 8002684:	2311      	movs	r3, #17
 8002686:	e020      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1ce>
 8002688:	2310      	movs	r3, #16
 800268a:	e01e      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1ce>
 800268c:	230f      	movs	r3, #15
 800268e:	e01c      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1ce>
 8002690:	230e      	movs	r3, #14
 8002692:	e01a      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1ce>
 8002694:	230d      	movs	r3, #13
 8002696:	e018      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1ce>
 8002698:	230c      	movs	r3, #12
 800269a:	e016      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1ce>
 800269c:	230b      	movs	r3, #11
 800269e:	e014      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1ce>
 80026a0:	230a      	movs	r3, #10
 80026a2:	e012      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1ce>
 80026a4:	2309      	movs	r3, #9
 80026a6:	e010      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1ce>
 80026a8:	2308      	movs	r3, #8
 80026aa:	e00e      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1ce>
 80026ac:	2307      	movs	r3, #7
 80026ae:	e00c      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1ce>
 80026b0:	2306      	movs	r3, #6
 80026b2:	e00a      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1ce>
 80026b4:	2305      	movs	r3, #5
 80026b6:	e008      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1ce>
 80026b8:	2304      	movs	r3, #4
 80026ba:	e006      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1ce>
 80026bc:	2303      	movs	r3, #3
 80026be:	e004      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1ce>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e002      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1ce>
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1ce>
 80026c8:	2300      	movs	r3, #0
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	6852      	ldr	r2, [r2, #4]
 80026ce:	201f      	movs	r0, #31
 80026d0:	4002      	ands	r2, r0
 80026d2:	4093      	lsls	r3, r2
 80026d4:	000a      	movs	r2, r1
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d808      	bhi.n	80026fe <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	001a      	movs	r2, r3
 80026fa:	f7ff fcae 	bl	800205a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6819      	ldr	r1, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	001a      	movs	r2, r3
 800270c:	f7ff fce8 	bl	80020e0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	db00      	blt.n	800271a <HAL_ADC_ConfigChannel+0x21e>
 8002718:	e0bc      	b.n	8002894 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800271a:	4b50      	ldr	r3, [pc, #320]	@ (800285c <HAL_ADC_ConfigChannel+0x360>)
 800271c:	0018      	movs	r0, r3
 800271e:	f7ff fc5b 	bl	8001fd8 <LL_ADC_GetCommonPathInternalCh>
 8002722:	0003      	movs	r3, r0
 8002724:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a4d      	ldr	r2, [pc, #308]	@ (8002860 <HAL_ADC_ConfigChannel+0x364>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d122      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	2380      	movs	r3, #128	@ 0x80
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002738:	d11d      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2280      	movs	r2, #128	@ 0x80
 800273e:	0412      	lsls	r2, r2, #16
 8002740:	4313      	orrs	r3, r2
 8002742:	4a46      	ldr	r2, [pc, #280]	@ (800285c <HAL_ADC_ConfigChannel+0x360>)
 8002744:	0019      	movs	r1, r3
 8002746:	0010      	movs	r0, r2
 8002748:	f7ff fc32 	bl	8001fb0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800274c:	4b45      	ldr	r3, [pc, #276]	@ (8002864 <HAL_ADC_ConfigChannel+0x368>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4945      	ldr	r1, [pc, #276]	@ (8002868 <HAL_ADC_ConfigChannel+0x36c>)
 8002752:	0018      	movs	r0, r3
 8002754:	f7fd fcd6 	bl	8000104 <__udivsi3>
 8002758:	0003      	movs	r3, r0
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	0013      	movs	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	189b      	adds	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002766:	e002      	b.n	800276e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	3b01      	subs	r3, #1
 800276c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f9      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002774:	e08e      	b.n	8002894 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a3c      	ldr	r2, [pc, #240]	@ (800286c <HAL_ADC_ConfigChannel+0x370>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d10e      	bne.n	800279e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	2380      	movs	r3, #128	@ 0x80
 8002784:	045b      	lsls	r3, r3, #17
 8002786:	4013      	ands	r3, r2
 8002788:	d109      	bne.n	800279e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2280      	movs	r2, #128	@ 0x80
 800278e:	0452      	lsls	r2, r2, #17
 8002790:	4313      	orrs	r3, r2
 8002792:	4a32      	ldr	r2, [pc, #200]	@ (800285c <HAL_ADC_ConfigChannel+0x360>)
 8002794:	0019      	movs	r1, r3
 8002796:	0010      	movs	r0, r2
 8002798:	f7ff fc0a 	bl	8001fb0 <LL_ADC_SetCommonPathInternalCh>
 800279c:	e07a      	b.n	8002894 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a33      	ldr	r2, [pc, #204]	@ (8002870 <HAL_ADC_ConfigChannel+0x374>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d000      	beq.n	80027aa <HAL_ADC_ConfigChannel+0x2ae>
 80027a8:	e074      	b.n	8002894 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	2380      	movs	r3, #128	@ 0x80
 80027ae:	03db      	lsls	r3, r3, #15
 80027b0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80027b2:	d000      	beq.n	80027b6 <HAL_ADC_ConfigChannel+0x2ba>
 80027b4:	e06e      	b.n	8002894 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	2280      	movs	r2, #128	@ 0x80
 80027ba:	03d2      	lsls	r2, r2, #15
 80027bc:	4313      	orrs	r3, r2
 80027be:	4a27      	ldr	r2, [pc, #156]	@ (800285c <HAL_ADC_ConfigChannel+0x360>)
 80027c0:	0019      	movs	r1, r3
 80027c2:	0010      	movs	r0, r2
 80027c4:	f7ff fbf4 	bl	8001fb0 <LL_ADC_SetCommonPathInternalCh>
 80027c8:	e064      	b.n	8002894 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	2380      	movs	r3, #128	@ 0x80
 80027d0:	061b      	lsls	r3, r3, #24
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d004      	beq.n	80027e0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027da:	4a1f      	ldr	r2, [pc, #124]	@ (8002858 <HAL_ADC_ConfigChannel+0x35c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d107      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	0019      	movs	r1, r3
 80027ea:	0010      	movs	r0, r2
 80027ec:	f7ff fc66 	bl	80020bc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	da4d      	bge.n	8002894 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027f8:	4b18      	ldr	r3, [pc, #96]	@ (800285c <HAL_ADC_ConfigChannel+0x360>)
 80027fa:	0018      	movs	r0, r3
 80027fc:	f7ff fbec 	bl	8001fd8 <LL_ADC_GetCommonPathInternalCh>
 8002800:	0003      	movs	r3, r0
 8002802:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a15      	ldr	r2, [pc, #84]	@ (8002860 <HAL_ADC_ConfigChannel+0x364>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d108      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4a18      	ldr	r2, [pc, #96]	@ (8002874 <HAL_ADC_ConfigChannel+0x378>)
 8002812:	4013      	ands	r3, r2
 8002814:	4a11      	ldr	r2, [pc, #68]	@ (800285c <HAL_ADC_ConfigChannel+0x360>)
 8002816:	0019      	movs	r1, r3
 8002818:	0010      	movs	r0, r2
 800281a:	f7ff fbc9 	bl	8001fb0 <LL_ADC_SetCommonPathInternalCh>
 800281e:	e039      	b.n	8002894 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a11      	ldr	r2, [pc, #68]	@ (800286c <HAL_ADC_ConfigChannel+0x370>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d108      	bne.n	800283c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4a12      	ldr	r2, [pc, #72]	@ (8002878 <HAL_ADC_ConfigChannel+0x37c>)
 800282e:	4013      	ands	r3, r2
 8002830:	4a0a      	ldr	r2, [pc, #40]	@ (800285c <HAL_ADC_ConfigChannel+0x360>)
 8002832:	0019      	movs	r1, r3
 8002834:	0010      	movs	r0, r2
 8002836:	f7ff fbbb 	bl	8001fb0 <LL_ADC_SetCommonPathInternalCh>
 800283a:	e02b      	b.n	8002894 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0b      	ldr	r2, [pc, #44]	@ (8002870 <HAL_ADC_ConfigChannel+0x374>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d126      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4a0c      	ldr	r2, [pc, #48]	@ (800287c <HAL_ADC_ConfigChannel+0x380>)
 800284a:	4013      	ands	r3, r2
 800284c:	4a03      	ldr	r2, [pc, #12]	@ (800285c <HAL_ADC_ConfigChannel+0x360>)
 800284e:	0019      	movs	r1, r3
 8002850:	0010      	movs	r0, r2
 8002852:	f7ff fbad 	bl	8001fb0 <LL_ADC_SetCommonPathInternalCh>
 8002856:	e01d      	b.n	8002894 <HAL_ADC_ConfigChannel+0x398>
 8002858:	80000004 	.word	0x80000004
 800285c:	40012708 	.word	0x40012708
 8002860:	b0001000 	.word	0xb0001000
 8002864:	20000048 	.word	0x20000048
 8002868:	00030d40 	.word	0x00030d40
 800286c:	b8004000 	.word	0xb8004000
 8002870:	b4002000 	.word	0xb4002000
 8002874:	ff7fffff 	.word	0xff7fffff
 8002878:	feffffff 	.word	0xfeffffff
 800287c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002884:	2220      	movs	r2, #32
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800288c:	2317      	movs	r3, #23
 800288e:	18fb      	adds	r3, r7, r3
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2254      	movs	r2, #84	@ 0x54
 8002898:	2100      	movs	r1, #0
 800289a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800289c:	2317      	movs	r3, #23
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	781b      	ldrb	r3, [r3, #0]
}
 80028a2:	0018      	movs	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	b006      	add	sp, #24
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	46c0      	nop			@ (mov r8, r8)

080028ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	0002      	movs	r2, r0
 80028b4:	1dfb      	adds	r3, r7, #7
 80028b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028b8:	1dfb      	adds	r3, r7, #7
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80028be:	d809      	bhi.n	80028d4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c0:	1dfb      	adds	r3, r7, #7
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	001a      	movs	r2, r3
 80028c6:	231f      	movs	r3, #31
 80028c8:	401a      	ands	r2, r3
 80028ca:	4b04      	ldr	r3, [pc, #16]	@ (80028dc <__NVIC_EnableIRQ+0x30>)
 80028cc:	2101      	movs	r1, #1
 80028ce:	4091      	lsls	r1, r2
 80028d0:	000a      	movs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80028d4:	46c0      	nop			@ (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	e000e100 	.word	0xe000e100

080028e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e0:	b590      	push	{r4, r7, lr}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	0002      	movs	r2, r0
 80028e8:	6039      	str	r1, [r7, #0]
 80028ea:	1dfb      	adds	r3, r7, #7
 80028ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028ee:	1dfb      	adds	r3, r7, #7
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80028f4:	d828      	bhi.n	8002948 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028f6:	4a2f      	ldr	r2, [pc, #188]	@ (80029b4 <__NVIC_SetPriority+0xd4>)
 80028f8:	1dfb      	adds	r3, r7, #7
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	b25b      	sxtb	r3, r3
 80028fe:	089b      	lsrs	r3, r3, #2
 8002900:	33c0      	adds	r3, #192	@ 0xc0
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	589b      	ldr	r3, [r3, r2]
 8002906:	1dfa      	adds	r2, r7, #7
 8002908:	7812      	ldrb	r2, [r2, #0]
 800290a:	0011      	movs	r1, r2
 800290c:	2203      	movs	r2, #3
 800290e:	400a      	ands	r2, r1
 8002910:	00d2      	lsls	r2, r2, #3
 8002912:	21ff      	movs	r1, #255	@ 0xff
 8002914:	4091      	lsls	r1, r2
 8002916:	000a      	movs	r2, r1
 8002918:	43d2      	mvns	r2, r2
 800291a:	401a      	ands	r2, r3
 800291c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	019b      	lsls	r3, r3, #6
 8002922:	22ff      	movs	r2, #255	@ 0xff
 8002924:	401a      	ands	r2, r3
 8002926:	1dfb      	adds	r3, r7, #7
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	0018      	movs	r0, r3
 800292c:	2303      	movs	r3, #3
 800292e:	4003      	ands	r3, r0
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002934:	481f      	ldr	r0, [pc, #124]	@ (80029b4 <__NVIC_SetPriority+0xd4>)
 8002936:	1dfb      	adds	r3, r7, #7
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	b25b      	sxtb	r3, r3
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	430a      	orrs	r2, r1
 8002940:	33c0      	adds	r3, #192	@ 0xc0
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002946:	e031      	b.n	80029ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002948:	4a1b      	ldr	r2, [pc, #108]	@ (80029b8 <__NVIC_SetPriority+0xd8>)
 800294a:	1dfb      	adds	r3, r7, #7
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	0019      	movs	r1, r3
 8002950:	230f      	movs	r3, #15
 8002952:	400b      	ands	r3, r1
 8002954:	3b08      	subs	r3, #8
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	3306      	adds	r3, #6
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	18d3      	adds	r3, r2, r3
 800295e:	3304      	adds	r3, #4
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	1dfa      	adds	r2, r7, #7
 8002964:	7812      	ldrb	r2, [r2, #0]
 8002966:	0011      	movs	r1, r2
 8002968:	2203      	movs	r2, #3
 800296a:	400a      	ands	r2, r1
 800296c:	00d2      	lsls	r2, r2, #3
 800296e:	21ff      	movs	r1, #255	@ 0xff
 8002970:	4091      	lsls	r1, r2
 8002972:	000a      	movs	r2, r1
 8002974:	43d2      	mvns	r2, r2
 8002976:	401a      	ands	r2, r3
 8002978:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	019b      	lsls	r3, r3, #6
 800297e:	22ff      	movs	r2, #255	@ 0xff
 8002980:	401a      	ands	r2, r3
 8002982:	1dfb      	adds	r3, r7, #7
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	0018      	movs	r0, r3
 8002988:	2303      	movs	r3, #3
 800298a:	4003      	ands	r3, r0
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002990:	4809      	ldr	r0, [pc, #36]	@ (80029b8 <__NVIC_SetPriority+0xd8>)
 8002992:	1dfb      	adds	r3, r7, #7
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	001c      	movs	r4, r3
 8002998:	230f      	movs	r3, #15
 800299a:	4023      	ands	r3, r4
 800299c:	3b08      	subs	r3, #8
 800299e:	089b      	lsrs	r3, r3, #2
 80029a0:	430a      	orrs	r2, r1
 80029a2:	3306      	adds	r3, #6
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	18c3      	adds	r3, r0, r3
 80029a8:	3304      	adds	r3, #4
 80029aa:	601a      	str	r2, [r3, #0]
}
 80029ac:	46c0      	nop			@ (mov r8, r8)
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b003      	add	sp, #12
 80029b2:	bd90      	pop	{r4, r7, pc}
 80029b4:	e000e100 	.word	0xe000e100
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	1e5a      	subs	r2, r3, #1
 80029c8:	2380      	movs	r3, #128	@ 0x80
 80029ca:	045b      	lsls	r3, r3, #17
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d301      	bcc.n	80029d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029d0:	2301      	movs	r3, #1
 80029d2:	e010      	b.n	80029f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a00 <SysTick_Config+0x44>)
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	3a01      	subs	r2, #1
 80029da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029dc:	2301      	movs	r3, #1
 80029de:	425b      	negs	r3, r3
 80029e0:	2103      	movs	r1, #3
 80029e2:	0018      	movs	r0, r3
 80029e4:	f7ff ff7c 	bl	80028e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e8:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <SysTick_Config+0x44>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ee:	4b04      	ldr	r3, [pc, #16]	@ (8002a00 <SysTick_Config+0x44>)
 80029f0:	2207      	movs	r2, #7
 80029f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	0018      	movs	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b002      	add	sp, #8
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	46c0      	nop			@ (mov r8, r8)
 8002a00:	e000e010 	.word	0xe000e010

08002a04 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	210f      	movs	r1, #15
 8002a10:	187b      	adds	r3, r7, r1
 8002a12:	1c02      	adds	r2, r0, #0
 8002a14:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	187b      	adds	r3, r7, r1
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	b25b      	sxtb	r3, r3
 8002a1e:	0011      	movs	r1, r2
 8002a20:	0018      	movs	r0, r3
 8002a22:	f7ff ff5d 	bl	80028e0 <__NVIC_SetPriority>
}
 8002a26:	46c0      	nop			@ (mov r8, r8)
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b004      	add	sp, #16
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	0002      	movs	r2, r0
 8002a36:	1dfb      	adds	r3, r7, #7
 8002a38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a3a:	1dfb      	adds	r3, r7, #7
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	b25b      	sxtb	r3, r3
 8002a40:	0018      	movs	r0, r3
 8002a42:	f7ff ff33 	bl	80028ac <__NVIC_EnableIRQ>
}
 8002a46:	46c0      	nop			@ (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b002      	add	sp, #8
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f7ff ffaf 	bl	80029bc <SysTick_Config>
 8002a5e:	0003      	movs	r3, r0
}
 8002a60:	0018      	movs	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b002      	add	sp, #8
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a76:	e147      	b.n	8002d08 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4091      	lsls	r1, r2
 8002a82:	000a      	movs	r2, r1
 8002a84:	4013      	ands	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d100      	bne.n	8002a90 <HAL_GPIO_Init+0x28>
 8002a8e:	e138      	b.n	8002d02 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2203      	movs	r2, #3
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d005      	beq.n	8002aa8 <HAL_GPIO_Init+0x40>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d130      	bne.n	8002b0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	0013      	movs	r3, r2
 8002ab8:	43da      	mvns	r2, r3
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	0013      	movs	r3, r2
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ade:	2201      	movs	r2, #1
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4013      	ands	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	091b      	lsrs	r3, r3, #4
 8002af4:	2201      	movs	r2, #1
 8002af6:	401a      	ands	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	409a      	lsls	r2, r3
 8002afc:	0013      	movs	r3, r2
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2203      	movs	r2, #3
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d017      	beq.n	8002b46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	2203      	movs	r2, #3
 8002b22:	409a      	lsls	r2, r3
 8002b24:	0013      	movs	r3, r2
 8002b26:	43da      	mvns	r2, r3
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	409a      	lsls	r2, r3
 8002b38:	0013      	movs	r3, r2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d123      	bne.n	8002b9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	08da      	lsrs	r2, r3, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3208      	adds	r2, #8
 8002b5a:	0092      	lsls	r2, r2, #2
 8002b5c:	58d3      	ldr	r3, [r2, r3]
 8002b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2207      	movs	r2, #7
 8002b64:	4013      	ands	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	0013      	movs	r3, r2
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4013      	ands	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2107      	movs	r1, #7
 8002b7e:	400b      	ands	r3, r1
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	409a      	lsls	r2, r3
 8002b84:	0013      	movs	r3, r2
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	08da      	lsrs	r2, r3, #3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3208      	adds	r2, #8
 8002b94:	0092      	lsls	r2, r2, #2
 8002b96:	6939      	ldr	r1, [r7, #16]
 8002b98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	0013      	movs	r3, r2
 8002baa:	43da      	mvns	r2, r3
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	401a      	ands	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	0013      	movs	r3, r2
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	23c0      	movs	r3, #192	@ 0xc0
 8002bd4:	029b      	lsls	r3, r3, #10
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d100      	bne.n	8002bdc <HAL_GPIO_Init+0x174>
 8002bda:	e092      	b.n	8002d02 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002bdc:	4a50      	ldr	r2, [pc, #320]	@ (8002d20 <HAL_GPIO_Init+0x2b8>)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	3318      	adds	r3, #24
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	589b      	ldr	r3, [r3, r2]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2203      	movs	r2, #3
 8002bee:	4013      	ands	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	220f      	movs	r2, #15
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	0013      	movs	r3, r2
 8002bf8:	43da      	mvns	r2, r3
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	23a0      	movs	r3, #160	@ 0xa0
 8002c04:	05db      	lsls	r3, r3, #23
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d013      	beq.n	8002c32 <HAL_GPIO_Init+0x1ca>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a45      	ldr	r2, [pc, #276]	@ (8002d24 <HAL_GPIO_Init+0x2bc>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00d      	beq.n	8002c2e <HAL_GPIO_Init+0x1c6>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a44      	ldr	r2, [pc, #272]	@ (8002d28 <HAL_GPIO_Init+0x2c0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d007      	beq.n	8002c2a <HAL_GPIO_Init+0x1c2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a43      	ldr	r2, [pc, #268]	@ (8002d2c <HAL_GPIO_Init+0x2c4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d101      	bne.n	8002c26 <HAL_GPIO_Init+0x1be>
 8002c22:	2303      	movs	r3, #3
 8002c24:	e006      	b.n	8002c34 <HAL_GPIO_Init+0x1cc>
 8002c26:	2305      	movs	r3, #5
 8002c28:	e004      	b.n	8002c34 <HAL_GPIO_Init+0x1cc>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e002      	b.n	8002c34 <HAL_GPIO_Init+0x1cc>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_GPIO_Init+0x1cc>
 8002c32:	2300      	movs	r3, #0
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	2103      	movs	r1, #3
 8002c38:	400a      	ands	r2, r1
 8002c3a:	00d2      	lsls	r2, r2, #3
 8002c3c:	4093      	lsls	r3, r2
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002c44:	4936      	ldr	r1, [pc, #216]	@ (8002d20 <HAL_GPIO_Init+0x2b8>)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	089b      	lsrs	r3, r3, #2
 8002c4a:	3318      	adds	r3, #24
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c52:	4b33      	ldr	r3, [pc, #204]	@ (8002d20 <HAL_GPIO_Init+0x2b8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	2380      	movs	r3, #128	@ 0x80
 8002c68:	035b      	lsls	r3, r3, #13
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c76:	4b2a      	ldr	r3, [pc, #168]	@ (8002d20 <HAL_GPIO_Init+0x2b8>)
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002c7c:	4b28      	ldr	r3, [pc, #160]	@ (8002d20 <HAL_GPIO_Init+0x2b8>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	43da      	mvns	r2, r3
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	2380      	movs	r3, #128	@ 0x80
 8002c92:	039b      	lsls	r3, r3, #14
 8002c94:	4013      	ands	r3, r2
 8002c96:	d003      	beq.n	8002ca0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d20 <HAL_GPIO_Init+0x2b8>)
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8002d20 <HAL_GPIO_Init+0x2b8>)
 8002ca8:	2384      	movs	r3, #132	@ 0x84
 8002caa:	58d3      	ldr	r3, [r2, r3]
 8002cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	43da      	mvns	r2, r3
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	2380      	movs	r3, #128	@ 0x80
 8002cbe:	029b      	lsls	r3, r3, #10
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ccc:	4914      	ldr	r1, [pc, #80]	@ (8002d20 <HAL_GPIO_Init+0x2b8>)
 8002cce:	2284      	movs	r2, #132	@ 0x84
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002cd4:	4a12      	ldr	r2, [pc, #72]	@ (8002d20 <HAL_GPIO_Init+0x2b8>)
 8002cd6:	2380      	movs	r3, #128	@ 0x80
 8002cd8:	58d3      	ldr	r3, [r2, r3]
 8002cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	2380      	movs	r3, #128	@ 0x80
 8002cec:	025b      	lsls	r3, r3, #9
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cfa:	4909      	ldr	r1, [pc, #36]	@ (8002d20 <HAL_GPIO_Init+0x2b8>)
 8002cfc:	2280      	movs	r2, #128	@ 0x80
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	3301      	adds	r3, #1
 8002d06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	40da      	lsrs	r2, r3
 8002d10:	1e13      	subs	r3, r2, #0
 8002d12:	d000      	beq.n	8002d16 <HAL_GPIO_Init+0x2ae>
 8002d14:	e6b0      	b.n	8002a78 <HAL_GPIO_Init+0x10>
  }
}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	46c0      	nop			@ (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b006      	add	sp, #24
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021800 	.word	0x40021800
 8002d24:	50000400 	.word	0x50000400
 8002d28:	50000800 	.word	0x50000800
 8002d2c:	50000c00 	.word	0x50000c00

08002d30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	000a      	movs	r2, r1
 8002d3a:	1cbb      	adds	r3, r7, #2
 8002d3c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	1cba      	adds	r2, r7, #2
 8002d44:	8812      	ldrh	r2, [r2, #0]
 8002d46:	4013      	ands	r3, r2
 8002d48:	d004      	beq.n	8002d54 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002d4a:	230f      	movs	r3, #15
 8002d4c:	18fb      	adds	r3, r7, r3
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	e003      	b.n	8002d5c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d54:	230f      	movs	r3, #15
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002d5c:	230f      	movs	r3, #15
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	781b      	ldrb	r3, [r3, #0]
}
 8002d62:	0018      	movs	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b004      	add	sp, #16
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	0008      	movs	r0, r1
 8002d74:	0011      	movs	r1, r2
 8002d76:	1cbb      	adds	r3, r7, #2
 8002d78:	1c02      	adds	r2, r0, #0
 8002d7a:	801a      	strh	r2, [r3, #0]
 8002d7c:	1c7b      	adds	r3, r7, #1
 8002d7e:	1c0a      	adds	r2, r1, #0
 8002d80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d82:	1c7b      	adds	r3, r7, #1
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d004      	beq.n	8002d94 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d8a:	1cbb      	adds	r3, r7, #2
 8002d8c:	881a      	ldrh	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d92:	e003      	b.n	8002d9c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d94:	1cbb      	adds	r3, r7, #2
 8002d96:	881a      	ldrh	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d9c:	46c0      	nop			@ (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b002      	add	sp, #8
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	000a      	movs	r2, r1
 8002dae:	1cbb      	adds	r3, r7, #2
 8002db0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002db8:	1cbb      	adds	r3, r7, #2
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	041a      	lsls	r2, r3, #16
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	1cb9      	adds	r1, r7, #2
 8002dc8:	8809      	ldrh	r1, [r1, #0]
 8002dca:	400b      	ands	r3, r1
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	619a      	str	r2, [r3, #24]
}
 8002dd2:	46c0      	nop			@ (mov r8, r8)
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	b004      	add	sp, #16
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	0002      	movs	r2, r0
 8002de4:	1dbb      	adds	r3, r7, #6
 8002de6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002de8:	4b10      	ldr	r3, [pc, #64]	@ (8002e2c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	1dba      	adds	r2, r7, #6
 8002dee:	8812      	ldrh	r2, [r2, #0]
 8002df0:	4013      	ands	r3, r2
 8002df2:	d008      	beq.n	8002e06 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002df4:	4b0d      	ldr	r3, [pc, #52]	@ (8002e2c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002df6:	1dba      	adds	r2, r7, #6
 8002df8:	8812      	ldrh	r2, [r2, #0]
 8002dfa:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002dfc:	1dbb      	adds	r3, r7, #6
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	0018      	movs	r0, r3
 8002e02:	f000 f815 	bl	8002e30 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002e06:	4b09      	ldr	r3, [pc, #36]	@ (8002e2c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	1dba      	adds	r2, r7, #6
 8002e0c:	8812      	ldrh	r2, [r2, #0]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d008      	beq.n	8002e24 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002e12:	4b06      	ldr	r3, [pc, #24]	@ (8002e2c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e14:	1dba      	adds	r2, r7, #6
 8002e16:	8812      	ldrh	r2, [r2, #0]
 8002e18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002e1a:	1dbb      	adds	r3, r7, #6
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f7fe f998 	bl	8001154 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002e24:	46c0      	nop			@ (mov r8, r8)
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b002      	add	sp, #8
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40021800 	.word	0x40021800

08002e30 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	0002      	movs	r2, r0
 8002e38:	1dbb      	adds	r3, r7, #6
 8002e3a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002e3c:	46c0      	nop			@ (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b002      	add	sp, #8
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e08f      	b.n	8002f76 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2241      	movs	r2, #65	@ 0x41
 8002e5a:	5c9b      	ldrb	r3, [r3, r2]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d107      	bne.n	8002e72 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2240      	movs	r2, #64	@ 0x40
 8002e66:	2100      	movs	r1, #0
 8002e68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f7fe fe7f 	bl	8001b70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2241      	movs	r2, #65	@ 0x41
 8002e76:	2124      	movs	r1, #36	@ 0x24
 8002e78:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2101      	movs	r1, #1
 8002e86:	438a      	bics	r2, r1
 8002e88:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	493b      	ldr	r1, [pc, #236]	@ (8002f80 <HAL_I2C_Init+0x13c>)
 8002e94:	400a      	ands	r2, r1
 8002e96:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4938      	ldr	r1, [pc, #224]	@ (8002f84 <HAL_I2C_Init+0x140>)
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d108      	bne.n	8002ec2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2180      	movs	r1, #128	@ 0x80
 8002eba:	0209      	lsls	r1, r1, #8
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	e007      	b.n	8002ed2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2184      	movs	r1, #132	@ 0x84
 8002ecc:	0209      	lsls	r1, r1, #8
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d109      	bne.n	8002eee <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2180      	movs	r1, #128	@ 0x80
 8002ee6:	0109      	lsls	r1, r1, #4
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	605a      	str	r2, [r3, #4]
 8002eec:	e007      	b.n	8002efe <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4923      	ldr	r1, [pc, #140]	@ (8002f88 <HAL_I2C_Init+0x144>)
 8002efa:	400a      	ands	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4920      	ldr	r1, [pc, #128]	@ (8002f8c <HAL_I2C_Init+0x148>)
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	491a      	ldr	r1, [pc, #104]	@ (8002f84 <HAL_I2C_Init+0x140>)
 8002f1a:	400a      	ands	r2, r1
 8002f1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69d9      	ldr	r1, [r3, #28]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1a      	ldr	r2, [r3, #32]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2101      	movs	r1, #1
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2241      	movs	r2, #65	@ 0x41
 8002f62:	2120      	movs	r1, #32
 8002f64:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2242      	movs	r2, #66	@ 0x42
 8002f70:	2100      	movs	r1, #0
 8002f72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	0018      	movs	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b002      	add	sp, #8
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	46c0      	nop			@ (mov r8, r8)
 8002f80:	f0ffffff 	.word	0xf0ffffff
 8002f84:	ffff7fff 	.word	0xffff7fff
 8002f88:	fffff7ff 	.word	0xfffff7ff
 8002f8c:	02008000 	.word	0x02008000

08002f90 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b089      	sub	sp, #36	@ 0x24
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	0008      	movs	r0, r1
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	0019      	movs	r1, r3
 8002f9e:	230a      	movs	r3, #10
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	1c02      	adds	r2, r0, #0
 8002fa4:	801a      	strh	r2, [r3, #0]
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	1c0a      	adds	r2, r1, #0
 8002fac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2241      	movs	r2, #65	@ 0x41
 8002fb2:	5c9b      	ldrb	r3, [r3, r2]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	d000      	beq.n	8002fbc <HAL_I2C_Master_Transmit+0x2c>
 8002fba:	e10a      	b.n	80031d2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2240      	movs	r2, #64	@ 0x40
 8002fc0:	5c9b      	ldrb	r3, [r3, r2]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_I2C_Master_Transmit+0x3a>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e104      	b.n	80031d4 <HAL_I2C_Master_Transmit+0x244>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2240      	movs	r2, #64	@ 0x40
 8002fce:	2101      	movs	r1, #1
 8002fd0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fd2:	f7fe ffe3 	bl	8001f9c <HAL_GetTick>
 8002fd6:	0003      	movs	r3, r0
 8002fd8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fda:	2380      	movs	r3, #128	@ 0x80
 8002fdc:	0219      	lsls	r1, r3, #8
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	2319      	movs	r3, #25
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f000 fa26 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8002fec:	1e03      	subs	r3, r0, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0ef      	b.n	80031d4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2241      	movs	r2, #65	@ 0x41
 8002ff8:	2121      	movs	r1, #33	@ 0x21
 8002ffa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2242      	movs	r2, #66	@ 0x42
 8003000:	2110      	movs	r1, #16
 8003002:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2208      	movs	r2, #8
 8003014:	18ba      	adds	r2, r7, r2
 8003016:	8812      	ldrh	r2, [r2, #0]
 8003018:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	2bff      	cmp	r3, #255	@ 0xff
 8003028:	d906      	bls.n	8003038 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	22ff      	movs	r2, #255	@ 0xff
 800302e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003030:	2380      	movs	r3, #128	@ 0x80
 8003032:	045b      	lsls	r3, r3, #17
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	e007      	b.n	8003048 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003042:	2380      	movs	r3, #128	@ 0x80
 8003044:	049b      	lsls	r3, r3, #18
 8003046:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	d027      	beq.n	80030a0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003078:	3b01      	subs	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003084:	b2db      	uxtb	r3, r3
 8003086:	3301      	adds	r3, #1
 8003088:	b2da      	uxtb	r2, r3
 800308a:	697c      	ldr	r4, [r7, #20]
 800308c:	230a      	movs	r3, #10
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	8819      	ldrh	r1, [r3, #0]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	4b51      	ldr	r3, [pc, #324]	@ (80031dc <HAL_I2C_Master_Transmit+0x24c>)
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	0023      	movs	r3, r4
 800309a:	f000 fc45 	bl	8003928 <I2C_TransferConfig>
 800309e:	e06f      	b.n	8003180 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	697c      	ldr	r4, [r7, #20]
 80030a8:	230a      	movs	r3, #10
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	8819      	ldrh	r1, [r3, #0]
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	4b4a      	ldr	r3, [pc, #296]	@ (80031dc <HAL_I2C_Master_Transmit+0x24c>)
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	0023      	movs	r3, r4
 80030b6:	f000 fc37 	bl	8003928 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80030ba:	e061      	b.n	8003180 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	0018      	movs	r0, r3
 80030c4:	f000 fa10 	bl	80034e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80030c8:	1e03      	subs	r3, r0, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e081      	b.n	80031d4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d4:	781a      	ldrb	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d03a      	beq.n	8003180 <HAL_I2C_Master_Transmit+0x1f0>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310e:	2b00      	cmp	r3, #0
 8003110:	d136      	bne.n	8003180 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003112:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	0013      	movs	r3, r2
 800311c:	2200      	movs	r2, #0
 800311e:	2180      	movs	r1, #128	@ 0x80
 8003120:	f000 f98a 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8003124:	1e03      	subs	r3, r0, #0
 8003126:	d001      	beq.n	800312c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e053      	b.n	80031d4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	2bff      	cmp	r3, #255	@ 0xff
 8003134:	d911      	bls.n	800315a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	22ff      	movs	r2, #255	@ 0xff
 800313a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003140:	b2da      	uxtb	r2, r3
 8003142:	2380      	movs	r3, #128	@ 0x80
 8003144:	045c      	lsls	r4, r3, #17
 8003146:	230a      	movs	r3, #10
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	8819      	ldrh	r1, [r3, #0]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	2300      	movs	r3, #0
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	0023      	movs	r3, r4
 8003154:	f000 fbe8 	bl	8003928 <I2C_TransferConfig>
 8003158:	e012      	b.n	8003180 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003168:	b2da      	uxtb	r2, r3
 800316a:	2380      	movs	r3, #128	@ 0x80
 800316c:	049c      	lsls	r4, r3, #18
 800316e:	230a      	movs	r3, #10
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	8819      	ldrh	r1, [r3, #0]
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	2300      	movs	r3, #0
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	0023      	movs	r3, r4
 800317c:	f000 fbd4 	bl	8003928 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d198      	bne.n	80030bc <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	0018      	movs	r0, r3
 8003192:	f000 f9ef 	bl	8003574 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003196:	1e03      	subs	r3, r0, #0
 8003198:	d001      	beq.n	800319e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e01a      	b.n	80031d4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2220      	movs	r2, #32
 80031a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	490b      	ldr	r1, [pc, #44]	@ (80031e0 <HAL_I2C_Master_Transmit+0x250>)
 80031b2:	400a      	ands	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2241      	movs	r2, #65	@ 0x41
 80031ba:	2120      	movs	r1, #32
 80031bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2242      	movs	r2, #66	@ 0x42
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2240      	movs	r2, #64	@ 0x40
 80031ca:	2100      	movs	r1, #0
 80031cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	e000      	b.n	80031d4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80031d2:	2302      	movs	r3, #2
  }
}
 80031d4:	0018      	movs	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b007      	add	sp, #28
 80031da:	bd90      	pop	{r4, r7, pc}
 80031dc:	80002000 	.word	0x80002000
 80031e0:	fe00e800 	.word	0xfe00e800

080031e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b089      	sub	sp, #36	@ 0x24
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	0008      	movs	r0, r1
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	0019      	movs	r1, r3
 80031f2:	230a      	movs	r3, #10
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	1c02      	adds	r2, r0, #0
 80031f8:	801a      	strh	r2, [r3, #0]
 80031fa:	2308      	movs	r3, #8
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	1c0a      	adds	r2, r1, #0
 8003200:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2241      	movs	r2, #65	@ 0x41
 8003206:	5c9b      	ldrb	r3, [r3, r2]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b20      	cmp	r3, #32
 800320c:	d000      	beq.n	8003210 <HAL_I2C_Master_Receive+0x2c>
 800320e:	e0e8      	b.n	80033e2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2240      	movs	r2, #64	@ 0x40
 8003214:	5c9b      	ldrb	r3, [r3, r2]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_I2C_Master_Receive+0x3a>
 800321a:	2302      	movs	r3, #2
 800321c:	e0e2      	b.n	80033e4 <HAL_I2C_Master_Receive+0x200>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2240      	movs	r2, #64	@ 0x40
 8003222:	2101      	movs	r1, #1
 8003224:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003226:	f7fe feb9 	bl	8001f9c <HAL_GetTick>
 800322a:	0003      	movs	r3, r0
 800322c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800322e:	2380      	movs	r3, #128	@ 0x80
 8003230:	0219      	lsls	r1, r3, #8
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	2319      	movs	r3, #25
 800323a:	2201      	movs	r2, #1
 800323c:	f000 f8fc 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8003240:	1e03      	subs	r3, r0, #0
 8003242:	d001      	beq.n	8003248 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0cd      	b.n	80033e4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2241      	movs	r2, #65	@ 0x41
 800324c:	2122      	movs	r1, #34	@ 0x22
 800324e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2242      	movs	r2, #66	@ 0x42
 8003254:	2110      	movs	r1, #16
 8003256:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2208      	movs	r2, #8
 8003268:	18ba      	adds	r2, r7, r2
 800326a:	8812      	ldrh	r2, [r2, #0]
 800326c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	2bff      	cmp	r3, #255	@ 0xff
 800327c:	d911      	bls.n	80032a2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	22ff      	movs	r2, #255	@ 0xff
 8003282:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003288:	b2da      	uxtb	r2, r3
 800328a:	2380      	movs	r3, #128	@ 0x80
 800328c:	045c      	lsls	r4, r3, #17
 800328e:	230a      	movs	r3, #10
 8003290:	18fb      	adds	r3, r7, r3
 8003292:	8819      	ldrh	r1, [r3, #0]
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	4b55      	ldr	r3, [pc, #340]	@ (80033ec <HAL_I2C_Master_Receive+0x208>)
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	0023      	movs	r3, r4
 800329c:	f000 fb44 	bl	8003928 <I2C_TransferConfig>
 80032a0:	e076      	b.n	8003390 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	2380      	movs	r3, #128	@ 0x80
 80032b4:	049c      	lsls	r4, r3, #18
 80032b6:	230a      	movs	r3, #10
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	8819      	ldrh	r1, [r3, #0]
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	4b4b      	ldr	r3, [pc, #300]	@ (80033ec <HAL_I2C_Master_Receive+0x208>)
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	0023      	movs	r3, r4
 80032c4:	f000 fb30 	bl	8003928 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80032c8:	e062      	b.n	8003390 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f000 f993 	bl	80035fc <I2C_WaitOnRXNEFlagUntilTimeout>
 80032d6:	1e03      	subs	r3, r0, #0
 80032d8:	d001      	beq.n	80032de <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e082      	b.n	80033e4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d03a      	beq.n	8003390 <HAL_I2C_Master_Receive+0x1ac>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800331e:	2b00      	cmp	r3, #0
 8003320:	d136      	bne.n	8003390 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003322:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	0013      	movs	r3, r2
 800332c:	2200      	movs	r2, #0
 800332e:	2180      	movs	r1, #128	@ 0x80
 8003330:	f000 f882 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8003334:	1e03      	subs	r3, r0, #0
 8003336:	d001      	beq.n	800333c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e053      	b.n	80033e4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003340:	b29b      	uxth	r3, r3
 8003342:	2bff      	cmp	r3, #255	@ 0xff
 8003344:	d911      	bls.n	800336a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	22ff      	movs	r2, #255	@ 0xff
 800334a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003350:	b2da      	uxtb	r2, r3
 8003352:	2380      	movs	r3, #128	@ 0x80
 8003354:	045c      	lsls	r4, r3, #17
 8003356:	230a      	movs	r3, #10
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	8819      	ldrh	r1, [r3, #0]
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	2300      	movs	r3, #0
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	0023      	movs	r3, r4
 8003364:	f000 fae0 	bl	8003928 <I2C_TransferConfig>
 8003368:	e012      	b.n	8003390 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003378:	b2da      	uxtb	r2, r3
 800337a:	2380      	movs	r3, #128	@ 0x80
 800337c:	049c      	lsls	r4, r3, #18
 800337e:	230a      	movs	r3, #10
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	8819      	ldrh	r1, [r3, #0]
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	2300      	movs	r3, #0
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	0023      	movs	r3, r4
 800338c:	f000 facc 	bl	8003928 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d197      	bne.n	80032ca <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	0018      	movs	r0, r3
 80033a2:	f000 f8e7 	bl	8003574 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033a6:	1e03      	subs	r3, r0, #0
 80033a8:	d001      	beq.n	80033ae <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e01a      	b.n	80033e4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2220      	movs	r2, #32
 80033b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	490b      	ldr	r1, [pc, #44]	@ (80033f0 <HAL_I2C_Master_Receive+0x20c>)
 80033c2:	400a      	ands	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2241      	movs	r2, #65	@ 0x41
 80033ca:	2120      	movs	r1, #32
 80033cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2242      	movs	r2, #66	@ 0x42
 80033d2:	2100      	movs	r1, #0
 80033d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2240      	movs	r2, #64	@ 0x40
 80033da:	2100      	movs	r1, #0
 80033dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	e000      	b.n	80033e4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80033e2:	2302      	movs	r3, #2
  }
}
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b007      	add	sp, #28
 80033ea:	bd90      	pop	{r4, r7, pc}
 80033ec:	80002400 	.word	0x80002400
 80033f0:	fe00e800 	.word	0xfe00e800

080033f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	2202      	movs	r2, #2
 8003404:	4013      	ands	r3, r2
 8003406:	2b02      	cmp	r3, #2
 8003408:	d103      	bne.n	8003412 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2200      	movs	r2, #0
 8003410:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	2201      	movs	r2, #1
 800341a:	4013      	ands	r3, r2
 800341c:	2b01      	cmp	r3, #1
 800341e:	d007      	beq.n	8003430 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699a      	ldr	r2, [r3, #24]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2101      	movs	r1, #1
 800342c:	430a      	orrs	r2, r1
 800342e:	619a      	str	r2, [r3, #24]
  }
}
 8003430:	46c0      	nop			@ (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	b002      	add	sp, #8
 8003436:	bd80      	pop	{r7, pc}

08003438 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	1dfb      	adds	r3, r7, #7
 8003446:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003448:	e03a      	b.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	6839      	ldr	r1, [r7, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	0018      	movs	r0, r3
 8003452:	f000 f971 	bl	8003738 <I2C_IsErrorOccurred>
 8003456:	1e03      	subs	r3, r0, #0
 8003458:	d001      	beq.n	800345e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e040      	b.n	80034e0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	3301      	adds	r3, #1
 8003462:	d02d      	beq.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003464:	f7fe fd9a 	bl	8001f9c <HAL_GetTick>
 8003468:	0002      	movs	r2, r0
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d302      	bcc.n	800347a <I2C_WaitOnFlagUntilTimeout+0x42>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d122      	bne.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	4013      	ands	r3, r2
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	425a      	negs	r2, r3
 800348a:	4153      	adcs	r3, r2
 800348c:	b2db      	uxtb	r3, r3
 800348e:	001a      	movs	r2, r3
 8003490:	1dfb      	adds	r3, r7, #7
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d113      	bne.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349c:	2220      	movs	r2, #32
 800349e:	431a      	orrs	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2241      	movs	r2, #65	@ 0x41
 80034a8:	2120      	movs	r1, #32
 80034aa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2242      	movs	r2, #66	@ 0x42
 80034b0:	2100      	movs	r1, #0
 80034b2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2240      	movs	r2, #64	@ 0x40
 80034b8:	2100      	movs	r1, #0
 80034ba:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e00f      	b.n	80034e0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	4013      	ands	r3, r2
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	425a      	negs	r2, r3
 80034d0:	4153      	adcs	r3, r2
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	001a      	movs	r2, r3
 80034d6:	1dfb      	adds	r3, r7, #7
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d0b5      	beq.n	800344a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	0018      	movs	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b004      	add	sp, #16
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034f4:	e032      	b.n	800355c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	68b9      	ldr	r1, [r7, #8]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	0018      	movs	r0, r3
 80034fe:	f000 f91b 	bl	8003738 <I2C_IsErrorOccurred>
 8003502:	1e03      	subs	r3, r0, #0
 8003504:	d001      	beq.n	800350a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e030      	b.n	800356c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	3301      	adds	r3, #1
 800350e:	d025      	beq.n	800355c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003510:	f7fe fd44 	bl	8001f9c <HAL_GetTick>
 8003514:	0002      	movs	r2, r0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	429a      	cmp	r2, r3
 800351e:	d302      	bcc.n	8003526 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d11a      	bne.n	800355c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	2202      	movs	r2, #2
 800352e:	4013      	ands	r3, r2
 8003530:	2b02      	cmp	r3, #2
 8003532:	d013      	beq.n	800355c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003538:	2220      	movs	r2, #32
 800353a:	431a      	orrs	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2241      	movs	r2, #65	@ 0x41
 8003544:	2120      	movs	r1, #32
 8003546:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2242      	movs	r2, #66	@ 0x42
 800354c:	2100      	movs	r1, #0
 800354e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2240      	movs	r2, #64	@ 0x40
 8003554:	2100      	movs	r1, #0
 8003556:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e007      	b.n	800356c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2202      	movs	r2, #2
 8003564:	4013      	ands	r3, r2
 8003566:	2b02      	cmp	r3, #2
 8003568:	d1c5      	bne.n	80034f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	0018      	movs	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	b004      	add	sp, #16
 8003572:	bd80      	pop	{r7, pc}

08003574 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003580:	e02f      	b.n	80035e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	0018      	movs	r0, r3
 800358a:	f000 f8d5 	bl	8003738 <I2C_IsErrorOccurred>
 800358e:	1e03      	subs	r3, r0, #0
 8003590:	d001      	beq.n	8003596 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e02d      	b.n	80035f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003596:	f7fe fd01 	bl	8001f9c <HAL_GetTick>
 800359a:	0002      	movs	r2, r0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d302      	bcc.n	80035ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d11a      	bne.n	80035e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2220      	movs	r2, #32
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d013      	beq.n	80035e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035be:	2220      	movs	r2, #32
 80035c0:	431a      	orrs	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2241      	movs	r2, #65	@ 0x41
 80035ca:	2120      	movs	r1, #32
 80035cc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2242      	movs	r2, #66	@ 0x42
 80035d2:	2100      	movs	r1, #0
 80035d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2240      	movs	r2, #64	@ 0x40
 80035da:	2100      	movs	r1, #0
 80035dc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e007      	b.n	80035f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2220      	movs	r2, #32
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	d1c8      	bne.n	8003582 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	0018      	movs	r0, r3
 80035f4:	46bd      	mov	sp, r7
 80035f6:	b004      	add	sp, #16
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003608:	2317      	movs	r3, #23
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003610:	e07b      	b.n	800370a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68b9      	ldr	r1, [r7, #8]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	0018      	movs	r0, r3
 800361a:	f000 f88d 	bl	8003738 <I2C_IsErrorOccurred>
 800361e:	1e03      	subs	r3, r0, #0
 8003620:	d003      	beq.n	800362a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8003622:	2317      	movs	r3, #23
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	2201      	movs	r2, #1
 8003628:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	2220      	movs	r2, #32
 8003632:	4013      	ands	r3, r2
 8003634:	2b20      	cmp	r3, #32
 8003636:	d140      	bne.n	80036ba <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003638:	2117      	movs	r1, #23
 800363a:	187b      	adds	r3, r7, r1
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d13b      	bne.n	80036ba <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2204      	movs	r2, #4
 800364a:	4013      	ands	r3, r2
 800364c:	2b04      	cmp	r3, #4
 800364e:	d106      	bne.n	800365e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003658:	187b      	adds	r3, r7, r1
 800365a:	2200      	movs	r2, #0
 800365c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	2210      	movs	r2, #16
 8003666:	4013      	ands	r3, r2
 8003668:	2b10      	cmp	r3, #16
 800366a:	d123      	bne.n	80036b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2210      	movs	r2, #16
 8003672:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2204      	movs	r2, #4
 8003678:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2220      	movs	r2, #32
 8003680:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4929      	ldr	r1, [pc, #164]	@ (8003734 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800368e:	400a      	ands	r2, r1
 8003690:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2241      	movs	r2, #65	@ 0x41
 8003696:	2120      	movs	r1, #32
 8003698:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2242      	movs	r2, #66	@ 0x42
 800369e:	2100      	movs	r1, #0
 80036a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2240      	movs	r2, #64	@ 0x40
 80036a6:	2100      	movs	r1, #0
 80036a8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80036aa:	2317      	movs	r3, #23
 80036ac:	18fb      	adds	r3, r7, r3
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]
 80036b2:	e002      	b.n	80036ba <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80036ba:	f7fe fc6f 	bl	8001f9c <HAL_GetTick>
 80036be:	0002      	movs	r2, r0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d302      	bcc.n	80036d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d11c      	bne.n	800370a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80036d0:	2017      	movs	r0, #23
 80036d2:	183b      	adds	r3, r7, r0
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d117      	bne.n	800370a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	2204      	movs	r2, #4
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d010      	beq.n	800370a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ec:	2220      	movs	r2, #32
 80036ee:	431a      	orrs	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2241      	movs	r2, #65	@ 0x41
 80036f8:	2120      	movs	r1, #32
 80036fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2240      	movs	r2, #64	@ 0x40
 8003700:	2100      	movs	r1, #0
 8003702:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003704:	183b      	adds	r3, r7, r0
 8003706:	2201      	movs	r2, #1
 8003708:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	2204      	movs	r2, #4
 8003712:	4013      	ands	r3, r2
 8003714:	2b04      	cmp	r3, #4
 8003716:	d005      	beq.n	8003724 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003718:	2317      	movs	r3, #23
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d100      	bne.n	8003724 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003722:	e776      	b.n	8003612 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8003724:	2317      	movs	r3, #23
 8003726:	18fb      	adds	r3, r7, r3
 8003728:	781b      	ldrb	r3, [r3, #0]
}
 800372a:	0018      	movs	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	b006      	add	sp, #24
 8003730:	bd80      	pop	{r7, pc}
 8003732:	46c0      	nop			@ (mov r8, r8)
 8003734:	fe00e800 	.word	0xfe00e800

08003738 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	@ 0x28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003744:	2327      	movs	r3, #39	@ 0x27
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	2210      	movs	r2, #16
 8003760:	4013      	ands	r3, r2
 8003762:	d100      	bne.n	8003766 <I2C_IsErrorOccurred+0x2e>
 8003764:	e079      	b.n	800385a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2210      	movs	r2, #16
 800376c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800376e:	e057      	b.n	8003820 <I2C_IsErrorOccurred+0xe8>
 8003770:	2227      	movs	r2, #39	@ 0x27
 8003772:	18bb      	adds	r3, r7, r2
 8003774:	18ba      	adds	r2, r7, r2
 8003776:	7812      	ldrb	r2, [r2, #0]
 8003778:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	3301      	adds	r3, #1
 800377e:	d04f      	beq.n	8003820 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003780:	f7fe fc0c 	bl	8001f9c <HAL_GetTick>
 8003784:	0002      	movs	r2, r0
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	429a      	cmp	r2, r3
 800378e:	d302      	bcc.n	8003796 <I2C_IsErrorOccurred+0x5e>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d144      	bne.n	8003820 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	2380      	movs	r3, #128	@ 0x80
 800379e:	01db      	lsls	r3, r3, #7
 80037a0:	4013      	ands	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80037a4:	2013      	movs	r0, #19
 80037a6:	183b      	adds	r3, r7, r0
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	2142      	movs	r1, #66	@ 0x42
 80037ac:	5c52      	ldrb	r2, [r2, r1]
 80037ae:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	2380      	movs	r3, #128	@ 0x80
 80037b8:	021b      	lsls	r3, r3, #8
 80037ba:	401a      	ands	r2, r3
 80037bc:	2380      	movs	r3, #128	@ 0x80
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d126      	bne.n	8003812 <I2C_IsErrorOccurred+0xda>
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	2380      	movs	r3, #128	@ 0x80
 80037c8:	01db      	lsls	r3, r3, #7
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d021      	beq.n	8003812 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80037ce:	183b      	adds	r3, r7, r0
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	d01d      	beq.n	8003812 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2180      	movs	r1, #128	@ 0x80
 80037e2:	01c9      	lsls	r1, r1, #7
 80037e4:	430a      	orrs	r2, r1
 80037e6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80037e8:	f7fe fbd8 	bl	8001f9c <HAL_GetTick>
 80037ec:	0003      	movs	r3, r0
 80037ee:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037f0:	e00f      	b.n	8003812 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80037f2:	f7fe fbd3 	bl	8001f9c <HAL_GetTick>
 80037f6:	0002      	movs	r2, r0
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b19      	cmp	r3, #25
 80037fe:	d908      	bls.n	8003812 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	2220      	movs	r2, #32
 8003804:	4313      	orrs	r3, r2
 8003806:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003808:	2327      	movs	r3, #39	@ 0x27
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	2201      	movs	r2, #1
 800380e:	701a      	strb	r2, [r3, #0]

              break;
 8003810:	e006      	b.n	8003820 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	2220      	movs	r2, #32
 800381a:	4013      	ands	r3, r2
 800381c:	2b20      	cmp	r3, #32
 800381e:	d1e8      	bne.n	80037f2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2220      	movs	r2, #32
 8003828:	4013      	ands	r3, r2
 800382a:	2b20      	cmp	r3, #32
 800382c:	d004      	beq.n	8003838 <I2C_IsErrorOccurred+0x100>
 800382e:	2327      	movs	r3, #39	@ 0x27
 8003830:	18fb      	adds	r3, r7, r3
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d09b      	beq.n	8003770 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003838:	2327      	movs	r3, #39	@ 0x27
 800383a:	18fb      	adds	r3, r7, r3
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d103      	bne.n	800384a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2220      	movs	r2, #32
 8003848:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	2204      	movs	r2, #4
 800384e:	4313      	orrs	r3, r2
 8003850:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003852:	2327      	movs	r3, #39	@ 0x27
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	2380      	movs	r3, #128	@ 0x80
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	4013      	ands	r3, r2
 800386a:	d00c      	beq.n	8003886 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	2201      	movs	r2, #1
 8003870:	4313      	orrs	r3, r2
 8003872:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2280      	movs	r2, #128	@ 0x80
 800387a:	0052      	lsls	r2, r2, #1
 800387c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800387e:	2327      	movs	r3, #39	@ 0x27
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	2201      	movs	r2, #1
 8003884:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	2380      	movs	r3, #128	@ 0x80
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4013      	ands	r3, r2
 800388e:	d00c      	beq.n	80038aa <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	2208      	movs	r2, #8
 8003894:	4313      	orrs	r3, r2
 8003896:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2280      	movs	r2, #128	@ 0x80
 800389e:	00d2      	lsls	r2, r2, #3
 80038a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038a2:	2327      	movs	r3, #39	@ 0x27
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	2380      	movs	r3, #128	@ 0x80
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4013      	ands	r3, r2
 80038b2:	d00c      	beq.n	80038ce <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	2202      	movs	r2, #2
 80038b8:	4313      	orrs	r3, r2
 80038ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2280      	movs	r2, #128	@ 0x80
 80038c2:	0092      	lsls	r2, r2, #2
 80038c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038c6:	2327      	movs	r3, #39	@ 0x27
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	2201      	movs	r2, #1
 80038cc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80038ce:	2327      	movs	r3, #39	@ 0x27
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01d      	beq.n	8003914 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	0018      	movs	r0, r3
 80038dc:	f7ff fd8a 	bl	80033f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	490e      	ldr	r1, [pc, #56]	@ (8003924 <I2C_IsErrorOccurred+0x1ec>)
 80038ec:	400a      	ands	r2, r1
 80038ee:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2241      	movs	r2, #65	@ 0x41
 8003900:	2120      	movs	r1, #32
 8003902:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2242      	movs	r2, #66	@ 0x42
 8003908:	2100      	movs	r1, #0
 800390a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2240      	movs	r2, #64	@ 0x40
 8003910:	2100      	movs	r1, #0
 8003912:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003914:	2327      	movs	r3, #39	@ 0x27
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	781b      	ldrb	r3, [r3, #0]
}
 800391a:	0018      	movs	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	b00a      	add	sp, #40	@ 0x28
 8003920:	bd80      	pop	{r7, pc}
 8003922:	46c0      	nop			@ (mov r8, r8)
 8003924:	fe00e800 	.word	0xfe00e800

08003928 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003928:	b590      	push	{r4, r7, lr}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	0008      	movs	r0, r1
 8003932:	0011      	movs	r1, r2
 8003934:	607b      	str	r3, [r7, #4]
 8003936:	240a      	movs	r4, #10
 8003938:	193b      	adds	r3, r7, r4
 800393a:	1c02      	adds	r2, r0, #0
 800393c:	801a      	strh	r2, [r3, #0]
 800393e:	2009      	movs	r0, #9
 8003940:	183b      	adds	r3, r7, r0
 8003942:	1c0a      	adds	r2, r1, #0
 8003944:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003946:	193b      	adds	r3, r7, r4
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	059b      	lsls	r3, r3, #22
 800394c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800394e:	183b      	adds	r3, r7, r0
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	0419      	lsls	r1, r3, #16
 8003954:	23ff      	movs	r3, #255	@ 0xff
 8003956:	041b      	lsls	r3, r3, #16
 8003958:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800395a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003962:	4313      	orrs	r3, r2
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003972:	0d51      	lsrs	r1, r2, #21
 8003974:	2280      	movs	r2, #128	@ 0x80
 8003976:	00d2      	lsls	r2, r2, #3
 8003978:	400a      	ands	r2, r1
 800397a:	4907      	ldr	r1, [pc, #28]	@ (8003998 <I2C_TransferConfig+0x70>)
 800397c:	430a      	orrs	r2, r1
 800397e:	43d2      	mvns	r2, r2
 8003980:	401a      	ands	r2, r3
 8003982:	0011      	movs	r1, r2
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	46bd      	mov	sp, r7
 8003992:	b007      	add	sp, #28
 8003994:	bd90      	pop	{r4, r7, pc}
 8003996:	46c0      	nop			@ (mov r8, r8)
 8003998:	03ff63ff 	.word	0x03ff63ff

0800399c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2241      	movs	r2, #65	@ 0x41
 80039aa:	5c9b      	ldrb	r3, [r3, r2]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d138      	bne.n	8003a24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2240      	movs	r2, #64	@ 0x40
 80039b6:	5c9b      	ldrb	r3, [r3, r2]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039bc:	2302      	movs	r3, #2
 80039be:	e032      	b.n	8003a26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2240      	movs	r2, #64	@ 0x40
 80039c4:	2101      	movs	r1, #1
 80039c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2241      	movs	r2, #65	@ 0x41
 80039cc:	2124      	movs	r1, #36	@ 0x24
 80039ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2101      	movs	r1, #1
 80039dc:	438a      	bics	r2, r1
 80039de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4911      	ldr	r1, [pc, #68]	@ (8003a30 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80039ec:	400a      	ands	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6819      	ldr	r1, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2241      	movs	r2, #65	@ 0x41
 8003a14:	2120      	movs	r1, #32
 8003a16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2240      	movs	r2, #64	@ 0x40
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	e000      	b.n	8003a26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a24:	2302      	movs	r3, #2
  }
}
 8003a26:	0018      	movs	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b002      	add	sp, #8
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	46c0      	nop			@ (mov r8, r8)
 8003a30:	ffffefff 	.word	0xffffefff

08003a34 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2241      	movs	r2, #65	@ 0x41
 8003a42:	5c9b      	ldrb	r3, [r3, r2]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d139      	bne.n	8003abe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2240      	movs	r2, #64	@ 0x40
 8003a4e:	5c9b      	ldrb	r3, [r3, r2]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e033      	b.n	8003ac0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2240      	movs	r2, #64	@ 0x40
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2241      	movs	r2, #65	@ 0x41
 8003a64:	2124      	movs	r1, #36	@ 0x24
 8003a66:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2101      	movs	r1, #1
 8003a74:	438a      	bics	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4a11      	ldr	r2, [pc, #68]	@ (8003ac8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2241      	movs	r2, #65	@ 0x41
 8003aae:	2120      	movs	r1, #32
 8003ab0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2240      	movs	r2, #64	@ 0x40
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	e000      	b.n	8003ac0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003abe:	2302      	movs	r3, #2
  }
}
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b004      	add	sp, #16
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	fffff0ff 	.word	0xfffff0ff

08003acc <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ad0:	4b04      	ldr	r3, [pc, #16]	@ (8003ae4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	4b03      	ldr	r3, [pc, #12]	@ (8003ae4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003ad6:	2180      	movs	r1, #128	@ 0x80
 8003ad8:	0049      	lsls	r1, r1, #1
 8003ada:	430a      	orrs	r2, r1
 8003adc:	601a      	str	r2, [r3, #0]
}
 8003ade:	46c0      	nop			@ (mov r8, r8)
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40007000 	.word	0x40007000

08003ae8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003af0:	4b19      	ldr	r3, [pc, #100]	@ (8003b58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a19      	ldr	r2, [pc, #100]	@ (8003b5c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	0019      	movs	r1, r3
 8003afa:	4b17      	ldr	r3, [pc, #92]	@ (8003b58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	2380      	movs	r3, #128	@ 0x80
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d11f      	bne.n	8003b4c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003b0c:	4b14      	ldr	r3, [pc, #80]	@ (8003b60 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	0013      	movs	r3, r2
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	189b      	adds	r3, r3, r2
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	4912      	ldr	r1, [pc, #72]	@ (8003b64 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f7fc faf2 	bl	8000104 <__udivsi3>
 8003b20:	0003      	movs	r3, r0
 8003b22:	3301      	adds	r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b26:	e008      	b.n	8003b3a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	e001      	b.n	8003b3a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e009      	b.n	8003b4e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b3a:	4b07      	ldr	r3, [pc, #28]	@ (8003b58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	2380      	movs	r3, #128	@ 0x80
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	401a      	ands	r2, r3
 8003b44:	2380      	movs	r3, #128	@ 0x80
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d0ed      	beq.n	8003b28 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	0018      	movs	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b004      	add	sp, #16
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	46c0      	nop			@ (mov r8, r8)
 8003b58:	40007000 	.word	0x40007000
 8003b5c:	fffff9ff 	.word	0xfffff9ff
 8003b60:	20000048 	.word	0x20000048
 8003b64:	000f4240 	.word	0x000f4240

08003b68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e2fe      	b.n	8004178 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	4013      	ands	r3, r2
 8003b82:	d100      	bne.n	8003b86 <HAL_RCC_OscConfig+0x1e>
 8003b84:	e07c      	b.n	8003c80 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b86:	4bc3      	ldr	r3, [pc, #780]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2238      	movs	r2, #56	@ 0x38
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b90:	4bc0      	ldr	r3, [pc, #768]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2203      	movs	r2, #3
 8003b96:	4013      	ands	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d102      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x3e>
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d002      	beq.n	8003bac <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d10b      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bac:	4bb9      	ldr	r3, [pc, #740]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2380      	movs	r3, #128	@ 0x80
 8003bb2:	029b      	lsls	r3, r3, #10
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d062      	beq.n	8003c7e <HAL_RCC_OscConfig+0x116>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d15e      	bne.n	8003c7e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e2d9      	b.n	8004178 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	2380      	movs	r3, #128	@ 0x80
 8003bca:	025b      	lsls	r3, r3, #9
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_OscConfig+0x78>
 8003bd0:	4bb0      	ldr	r3, [pc, #704]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	4baf      	ldr	r3, [pc, #700]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003bd6:	2180      	movs	r1, #128	@ 0x80
 8003bd8:	0249      	lsls	r1, r1, #9
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	e020      	b.n	8003c22 <HAL_RCC_OscConfig+0xba>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	23a0      	movs	r3, #160	@ 0xa0
 8003be6:	02db      	lsls	r3, r3, #11
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d10e      	bne.n	8003c0a <HAL_RCC_OscConfig+0xa2>
 8003bec:	4ba9      	ldr	r3, [pc, #676]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4ba8      	ldr	r3, [pc, #672]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003bf2:	2180      	movs	r1, #128	@ 0x80
 8003bf4:	02c9      	lsls	r1, r1, #11
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	4ba6      	ldr	r3, [pc, #664]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	4ba5      	ldr	r3, [pc, #660]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003c00:	2180      	movs	r1, #128	@ 0x80
 8003c02:	0249      	lsls	r1, r1, #9
 8003c04:	430a      	orrs	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	e00b      	b.n	8003c22 <HAL_RCC_OscConfig+0xba>
 8003c0a:	4ba2      	ldr	r3, [pc, #648]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	4ba1      	ldr	r3, [pc, #644]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003c10:	49a1      	ldr	r1, [pc, #644]	@ (8003e98 <HAL_RCC_OscConfig+0x330>)
 8003c12:	400a      	ands	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	4b9f      	ldr	r3, [pc, #636]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	4b9e      	ldr	r3, [pc, #632]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003c1c:	499f      	ldr	r1, [pc, #636]	@ (8003e9c <HAL_RCC_OscConfig+0x334>)
 8003c1e:	400a      	ands	r2, r1
 8003c20:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d014      	beq.n	8003c54 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7fe f9b7 	bl	8001f9c <HAL_GetTick>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c34:	f7fe f9b2 	bl	8001f9c <HAL_GetTick>
 8003c38:	0002      	movs	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b64      	cmp	r3, #100	@ 0x64
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e298      	b.n	8004178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c46:	4b93      	ldr	r3, [pc, #588]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	2380      	movs	r3, #128	@ 0x80
 8003c4c:	029b      	lsls	r3, r3, #10
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0xcc>
 8003c52:	e015      	b.n	8003c80 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fe f9a2 	bl	8001f9c <HAL_GetTick>
 8003c58:	0003      	movs	r3, r0
 8003c5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c5e:	f7fe f99d 	bl	8001f9c <HAL_GetTick>
 8003c62:	0002      	movs	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b64      	cmp	r3, #100	@ 0x64
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e283      	b.n	8004178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c70:	4b88      	ldr	r3, [pc, #544]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	2380      	movs	r3, #128	@ 0x80
 8003c76:	029b      	lsls	r3, r3, #10
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d1f0      	bne.n	8003c5e <HAL_RCC_OscConfig+0xf6>
 8003c7c:	e000      	b.n	8003c80 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2202      	movs	r2, #2
 8003c86:	4013      	ands	r3, r2
 8003c88:	d100      	bne.n	8003c8c <HAL_RCC_OscConfig+0x124>
 8003c8a:	e099      	b.n	8003dc0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c8c:	4b81      	ldr	r3, [pc, #516]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2238      	movs	r2, #56	@ 0x38
 8003c92:	4013      	ands	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c96:	4b7f      	ldr	r3, [pc, #508]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	2b10      	cmp	r3, #16
 8003ca4:	d102      	bne.n	8003cac <HAL_RCC_OscConfig+0x144>
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d002      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d135      	bne.n	8003d1e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb2:	4b78      	ldr	r3, [pc, #480]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	2380      	movs	r3, #128	@ 0x80
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d005      	beq.n	8003cca <HAL_RCC_OscConfig+0x162>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e256      	b.n	8004178 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cca:	4b72      	ldr	r3, [pc, #456]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	4a74      	ldr	r2, [pc, #464]	@ (8003ea0 <HAL_RCC_OscConfig+0x338>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	021a      	lsls	r2, r3, #8
 8003cda:	4b6e      	ldr	r3, [pc, #440]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d112      	bne.n	8003d0c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ce6:	4b6b      	ldr	r3, [pc, #428]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a6e      	ldr	r2, [pc, #440]	@ (8003ea4 <HAL_RCC_OscConfig+0x33c>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	0019      	movs	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	4b67      	ldr	r3, [pc, #412]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003cfa:	4b66      	ldr	r3, [pc, #408]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	0adb      	lsrs	r3, r3, #11
 8003d00:	2207      	movs	r2, #7
 8003d02:	4013      	ands	r3, r2
 8003d04:	4a68      	ldr	r2, [pc, #416]	@ (8003ea8 <HAL_RCC_OscConfig+0x340>)
 8003d06:	40da      	lsrs	r2, r3
 8003d08:	4b68      	ldr	r3, [pc, #416]	@ (8003eac <HAL_RCC_OscConfig+0x344>)
 8003d0a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d0c:	4b68      	ldr	r3, [pc, #416]	@ (8003eb0 <HAL_RCC_OscConfig+0x348>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	0018      	movs	r0, r3
 8003d12:	f7fe f8e7 	bl	8001ee4 <HAL_InitTick>
 8003d16:	1e03      	subs	r3, r0, #0
 8003d18:	d051      	beq.n	8003dbe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e22c      	b.n	8004178 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d030      	beq.n	8003d88 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d26:	4b5b      	ldr	r3, [pc, #364]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a5e      	ldr	r2, [pc, #376]	@ (8003ea4 <HAL_RCC_OscConfig+0x33c>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	0019      	movs	r1, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	4b57      	ldr	r3, [pc, #348]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003d36:	430a      	orrs	r2, r1
 8003d38:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003d3a:	4b56      	ldr	r3, [pc, #344]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4b55      	ldr	r3, [pc, #340]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003d40:	2180      	movs	r1, #128	@ 0x80
 8003d42:	0049      	lsls	r1, r1, #1
 8003d44:	430a      	orrs	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fe f928 	bl	8001f9c <HAL_GetTick>
 8003d4c:	0003      	movs	r3, r0
 8003d4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d52:	f7fe f923 	bl	8001f9c <HAL_GetTick>
 8003d56:	0002      	movs	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e209      	b.n	8004178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d64:	4b4b      	ldr	r3, [pc, #300]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	2380      	movs	r3, #128	@ 0x80
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d70:	4b48      	ldr	r3, [pc, #288]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4a4a      	ldr	r2, [pc, #296]	@ (8003ea0 <HAL_RCC_OscConfig+0x338>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	0019      	movs	r1, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	021a      	lsls	r2, r3, #8
 8003d80:	4b44      	ldr	r3, [pc, #272]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	e01b      	b.n	8003dc0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003d88:	4b42      	ldr	r3, [pc, #264]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	4b41      	ldr	r3, [pc, #260]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003d8e:	4949      	ldr	r1, [pc, #292]	@ (8003eb4 <HAL_RCC_OscConfig+0x34c>)
 8003d90:	400a      	ands	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fe f902 	bl	8001f9c <HAL_GetTick>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d9e:	f7fe f8fd 	bl	8001f9c <HAL_GetTick>
 8003da2:	0002      	movs	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e1e3      	b.n	8004178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003db0:	4b38      	ldr	r3, [pc, #224]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	2380      	movs	r3, #128	@ 0x80
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4013      	ands	r3, r2
 8003dba:	d1f0      	bne.n	8003d9e <HAL_RCC_OscConfig+0x236>
 8003dbc:	e000      	b.n	8003dc0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dbe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d047      	beq.n	8003e5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003dca:	4b32      	ldr	r3, [pc, #200]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2238      	movs	r2, #56	@ 0x38
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b18      	cmp	r3, #24
 8003dd4:	d10a      	bne.n	8003dec <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dda:	2202      	movs	r2, #2
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d03c      	beq.n	8003e5a <HAL_RCC_OscConfig+0x2f2>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d138      	bne.n	8003e5a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e1c5      	b.n	8004178 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d019      	beq.n	8003e28 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003df4:	4b27      	ldr	r3, [pc, #156]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003df6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003df8:	4b26      	ldr	r3, [pc, #152]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fe f8cc 	bl	8001f9c <HAL_GetTick>
 8003e04:	0003      	movs	r3, r0
 8003e06:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e0a:	f7fe f8c7 	bl	8001f9c <HAL_GetTick>
 8003e0e:	0002      	movs	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e1ad      	b.n	8004178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e20:	2202      	movs	r2, #2
 8003e22:	4013      	ands	r3, r2
 8003e24:	d0f1      	beq.n	8003e0a <HAL_RCC_OscConfig+0x2a2>
 8003e26:	e018      	b.n	8003e5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003e28:	4b1a      	ldr	r3, [pc, #104]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003e2a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e2c:	4b19      	ldr	r3, [pc, #100]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003e2e:	2101      	movs	r1, #1
 8003e30:	438a      	bics	r2, r1
 8003e32:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fe f8b2 	bl	8001f9c <HAL_GetTick>
 8003e38:	0003      	movs	r3, r0
 8003e3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e3e:	f7fe f8ad 	bl	8001f9c <HAL_GetTick>
 8003e42:	0002      	movs	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e193      	b.n	8004178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e50:	4b10      	ldr	r3, [pc, #64]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e54:	2202      	movs	r2, #2
 8003e56:	4013      	ands	r3, r2
 8003e58:	d1f1      	bne.n	8003e3e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2204      	movs	r2, #4
 8003e60:	4013      	ands	r3, r2
 8003e62:	d100      	bne.n	8003e66 <HAL_RCC_OscConfig+0x2fe>
 8003e64:	e0c6      	b.n	8003ff4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e66:	231f      	movs	r3, #31
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003e6e:	4b09      	ldr	r3, [pc, #36]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2238      	movs	r2, #56	@ 0x38
 8003e74:	4013      	ands	r3, r2
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d11e      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003e7a:	4b06      	ldr	r3, [pc, #24]	@ (8003e94 <HAL_RCC_OscConfig+0x32c>)
 8003e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7e:	2202      	movs	r2, #2
 8003e80:	4013      	ands	r3, r2
 8003e82:	d100      	bne.n	8003e86 <HAL_RCC_OscConfig+0x31e>
 8003e84:	e0b6      	b.n	8003ff4 <HAL_RCC_OscConfig+0x48c>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d000      	beq.n	8003e90 <HAL_RCC_OscConfig+0x328>
 8003e8e:	e0b1      	b.n	8003ff4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e171      	b.n	8004178 <HAL_RCC_OscConfig+0x610>
 8003e94:	40021000 	.word	0x40021000
 8003e98:	fffeffff 	.word	0xfffeffff
 8003e9c:	fffbffff 	.word	0xfffbffff
 8003ea0:	ffff80ff 	.word	0xffff80ff
 8003ea4:	ffffc7ff 	.word	0xffffc7ff
 8003ea8:	00f42400 	.word	0x00f42400
 8003eac:	20000048 	.word	0x20000048
 8003eb0:	2000004c 	.word	0x2000004c
 8003eb4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003eb8:	4bb1      	ldr	r3, [pc, #708]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8003eba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ebc:	2380      	movs	r3, #128	@ 0x80
 8003ebe:	055b      	lsls	r3, r3, #21
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x360>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <HAL_RCC_OscConfig+0x362>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d011      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003ece:	4bac      	ldr	r3, [pc, #688]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8003ed0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ed2:	4bab      	ldr	r3, [pc, #684]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8003ed4:	2180      	movs	r1, #128	@ 0x80
 8003ed6:	0549      	lsls	r1, r1, #21
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003edc:	4ba8      	ldr	r3, [pc, #672]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8003ede:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ee0:	2380      	movs	r3, #128	@ 0x80
 8003ee2:	055b      	lsls	r3, r3, #21
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003eea:	231f      	movs	r3, #31
 8003eec:	18fb      	adds	r3, r7, r3
 8003eee:	2201      	movs	r2, #1
 8003ef0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ef2:	4ba4      	ldr	r3, [pc, #656]	@ (8004184 <HAL_RCC_OscConfig+0x61c>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	2380      	movs	r3, #128	@ 0x80
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	4013      	ands	r3, r2
 8003efc:	d11a      	bne.n	8003f34 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003efe:	4ba1      	ldr	r3, [pc, #644]	@ (8004184 <HAL_RCC_OscConfig+0x61c>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4ba0      	ldr	r3, [pc, #640]	@ (8004184 <HAL_RCC_OscConfig+0x61c>)
 8003f04:	2180      	movs	r1, #128	@ 0x80
 8003f06:	0049      	lsls	r1, r1, #1
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003f0c:	f7fe f846 	bl	8001f9c <HAL_GetTick>
 8003f10:	0003      	movs	r3, r0
 8003f12:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f16:	f7fe f841 	bl	8001f9c <HAL_GetTick>
 8003f1a:	0002      	movs	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e127      	b.n	8004178 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f28:	4b96      	ldr	r3, [pc, #600]	@ (8004184 <HAL_RCC_OscConfig+0x61c>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	2380      	movs	r3, #128	@ 0x80
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	4013      	ands	r3, r2
 8003f32:	d0f0      	beq.n	8003f16 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d106      	bne.n	8003f4a <HAL_RCC_OscConfig+0x3e2>
 8003f3c:	4b90      	ldr	r3, [pc, #576]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8003f3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f40:	4b8f      	ldr	r3, [pc, #572]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8003f42:	2101      	movs	r1, #1
 8003f44:	430a      	orrs	r2, r1
 8003f46:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f48:	e01c      	b.n	8003f84 <HAL_RCC_OscConfig+0x41c>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b05      	cmp	r3, #5
 8003f50:	d10c      	bne.n	8003f6c <HAL_RCC_OscConfig+0x404>
 8003f52:	4b8b      	ldr	r3, [pc, #556]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8003f54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f56:	4b8a      	ldr	r3, [pc, #552]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8003f58:	2104      	movs	r1, #4
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f5e:	4b88      	ldr	r3, [pc, #544]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8003f60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f62:	4b87      	ldr	r3, [pc, #540]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8003f64:	2101      	movs	r1, #1
 8003f66:	430a      	orrs	r2, r1
 8003f68:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f6a:	e00b      	b.n	8003f84 <HAL_RCC_OscConfig+0x41c>
 8003f6c:	4b84      	ldr	r3, [pc, #528]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8003f6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f70:	4b83      	ldr	r3, [pc, #524]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8003f72:	2101      	movs	r1, #1
 8003f74:	438a      	bics	r2, r1
 8003f76:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f78:	4b81      	ldr	r3, [pc, #516]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8003f7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f7c:	4b80      	ldr	r3, [pc, #512]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8003f7e:	2104      	movs	r1, #4
 8003f80:	438a      	bics	r2, r1
 8003f82:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d014      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fe f806 	bl	8001f9c <HAL_GetTick>
 8003f90:	0003      	movs	r3, r0
 8003f92:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f94:	e009      	b.n	8003faa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f96:	f7fe f801 	bl	8001f9c <HAL_GetTick>
 8003f9a:	0002      	movs	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	4a79      	ldr	r2, [pc, #484]	@ (8004188 <HAL_RCC_OscConfig+0x620>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e0e6      	b.n	8004178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003faa:	4b75      	ldr	r3, [pc, #468]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8003fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fae:	2202      	movs	r2, #2
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d0f0      	beq.n	8003f96 <HAL_RCC_OscConfig+0x42e>
 8003fb4:	e013      	b.n	8003fde <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb6:	f7fd fff1 	bl	8001f9c <HAL_GetTick>
 8003fba:	0003      	movs	r3, r0
 8003fbc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fbe:	e009      	b.n	8003fd4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc0:	f7fd ffec 	bl	8001f9c <HAL_GetTick>
 8003fc4:	0002      	movs	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	4a6f      	ldr	r2, [pc, #444]	@ (8004188 <HAL_RCC_OscConfig+0x620>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e0d1      	b.n	8004178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fd4:	4b6a      	ldr	r3, [pc, #424]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8003fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd8:	2202      	movs	r2, #2
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003fde:	231f      	movs	r3, #31
 8003fe0:	18fb      	adds	r3, r7, r3
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d105      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003fe8:	4b65      	ldr	r3, [pc, #404]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8003fea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fec:	4b64      	ldr	r3, [pc, #400]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8003fee:	4967      	ldr	r1, [pc, #412]	@ (800418c <HAL_RCC_OscConfig+0x624>)
 8003ff0:	400a      	ands	r2, r1
 8003ff2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d100      	bne.n	8003ffe <HAL_RCC_OscConfig+0x496>
 8003ffc:	e0bb      	b.n	8004176 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ffe:	4b60      	ldr	r3, [pc, #384]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2238      	movs	r2, #56	@ 0x38
 8004004:	4013      	ands	r3, r2
 8004006:	2b10      	cmp	r3, #16
 8004008:	d100      	bne.n	800400c <HAL_RCC_OscConfig+0x4a4>
 800400a:	e07b      	b.n	8004104 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d156      	bne.n	80040c2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004014:	4b5a      	ldr	r3, [pc, #360]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b59      	ldr	r3, [pc, #356]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 800401a:	495d      	ldr	r1, [pc, #372]	@ (8004190 <HAL_RCC_OscConfig+0x628>)
 800401c:	400a      	ands	r2, r1
 800401e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004020:	f7fd ffbc 	bl	8001f9c <HAL_GetTick>
 8004024:	0003      	movs	r3, r0
 8004026:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402a:	f7fd ffb7 	bl	8001f9c <HAL_GetTick>
 800402e:	0002      	movs	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e09d      	b.n	8004178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800403c:	4b50      	ldr	r3, [pc, #320]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	2380      	movs	r3, #128	@ 0x80
 8004042:	049b      	lsls	r3, r3, #18
 8004044:	4013      	ands	r3, r2
 8004046:	d1f0      	bne.n	800402a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004048:	4b4d      	ldr	r3, [pc, #308]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4a51      	ldr	r2, [pc, #324]	@ (8004194 <HAL_RCC_OscConfig+0x62c>)
 800404e:	4013      	ands	r3, r2
 8004050:	0019      	movs	r1, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1a      	ldr	r2, [r3, #32]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004068:	431a      	orrs	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004074:	431a      	orrs	r2, r3
 8004076:	4b42      	ldr	r3, [pc, #264]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8004078:	430a      	orrs	r2, r1
 800407a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800407c:	4b40      	ldr	r3, [pc, #256]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	4b3f      	ldr	r3, [pc, #252]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8004082:	2180      	movs	r1, #128	@ 0x80
 8004084:	0449      	lsls	r1, r1, #17
 8004086:	430a      	orrs	r2, r1
 8004088:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800408a:	4b3d      	ldr	r3, [pc, #244]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	4b3c      	ldr	r3, [pc, #240]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8004090:	2180      	movs	r1, #128	@ 0x80
 8004092:	0549      	lsls	r1, r1, #21
 8004094:	430a      	orrs	r2, r1
 8004096:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004098:	f7fd ff80 	bl	8001f9c <HAL_GetTick>
 800409c:	0003      	movs	r3, r0
 800409e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a2:	f7fd ff7b 	bl	8001f9c <HAL_GetTick>
 80040a6:	0002      	movs	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e061      	b.n	8004178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b4:	4b32      	ldr	r3, [pc, #200]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	2380      	movs	r3, #128	@ 0x80
 80040ba:	049b      	lsls	r3, r3, #18
 80040bc:	4013      	ands	r3, r2
 80040be:	d0f0      	beq.n	80040a2 <HAL_RCC_OscConfig+0x53a>
 80040c0:	e059      	b.n	8004176 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c2:	4b2f      	ldr	r3, [pc, #188]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	4b2e      	ldr	r3, [pc, #184]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 80040c8:	4931      	ldr	r1, [pc, #196]	@ (8004190 <HAL_RCC_OscConfig+0x628>)
 80040ca:	400a      	ands	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ce:	f7fd ff65 	bl	8001f9c <HAL_GetTick>
 80040d2:	0003      	movs	r3, r0
 80040d4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fd ff60 	bl	8001f9c <HAL_GetTick>
 80040dc:	0002      	movs	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e046      	b.n	8004178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040ea:	4b25      	ldr	r3, [pc, #148]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	2380      	movs	r3, #128	@ 0x80
 80040f0:	049b      	lsls	r3, r3, #18
 80040f2:	4013      	ands	r3, r2
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80040f6:	4b22      	ldr	r3, [pc, #136]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	4b21      	ldr	r3, [pc, #132]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 80040fc:	4926      	ldr	r1, [pc, #152]	@ (8004198 <HAL_RCC_OscConfig+0x630>)
 80040fe:	400a      	ands	r2, r1
 8004100:	60da      	str	r2, [r3, #12]
 8004102:	e038      	b.n	8004176 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e033      	b.n	8004178 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004110:	4b1b      	ldr	r3, [pc, #108]	@ (8004180 <HAL_RCC_OscConfig+0x618>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2203      	movs	r2, #3
 800411a:	401a      	ands	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	429a      	cmp	r2, r3
 8004122:	d126      	bne.n	8004172 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2270      	movs	r2, #112	@ 0x70
 8004128:	401a      	ands	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800412e:	429a      	cmp	r2, r3
 8004130:	d11f      	bne.n	8004172 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	23fe      	movs	r3, #254	@ 0xfe
 8004136:	01db      	lsls	r3, r3, #7
 8004138:	401a      	ands	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004140:	429a      	cmp	r2, r3
 8004142:	d116      	bne.n	8004172 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	23f8      	movs	r3, #248	@ 0xf8
 8004148:	039b      	lsls	r3, r3, #14
 800414a:	401a      	ands	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004150:	429a      	cmp	r2, r3
 8004152:	d10e      	bne.n	8004172 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	23e0      	movs	r3, #224	@ 0xe0
 8004158:	051b      	lsls	r3, r3, #20
 800415a:	401a      	ands	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004160:	429a      	cmp	r2, r3
 8004162:	d106      	bne.n	8004172 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	0f5b      	lsrs	r3, r3, #29
 8004168:	075a      	lsls	r2, r3, #29
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800416e:	429a      	cmp	r2, r3
 8004170:	d001      	beq.n	8004176 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	0018      	movs	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	b008      	add	sp, #32
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40021000 	.word	0x40021000
 8004184:	40007000 	.word	0x40007000
 8004188:	00001388 	.word	0x00001388
 800418c:	efffffff 	.word	0xefffffff
 8004190:	feffffff 	.word	0xfeffffff
 8004194:	11c1808c 	.word	0x11c1808c
 8004198:	eefefffc 	.word	0xeefefffc

0800419c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0e9      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041b0:	4b76      	ldr	r3, [pc, #472]	@ (800438c <HAL_RCC_ClockConfig+0x1f0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2207      	movs	r2, #7
 80041b6:	4013      	ands	r3, r2
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d91e      	bls.n	80041fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041be:	4b73      	ldr	r3, [pc, #460]	@ (800438c <HAL_RCC_ClockConfig+0x1f0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2207      	movs	r2, #7
 80041c4:	4393      	bics	r3, r2
 80041c6:	0019      	movs	r1, r3
 80041c8:	4b70      	ldr	r3, [pc, #448]	@ (800438c <HAL_RCC_ClockConfig+0x1f0>)
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041d0:	f7fd fee4 	bl	8001f9c <HAL_GetTick>
 80041d4:	0003      	movs	r3, r0
 80041d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041d8:	e009      	b.n	80041ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041da:	f7fd fedf 	bl	8001f9c <HAL_GetTick>
 80041de:	0002      	movs	r2, r0
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	4a6a      	ldr	r2, [pc, #424]	@ (8004390 <HAL_RCC_ClockConfig+0x1f4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e0ca      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041ee:	4b67      	ldr	r3, [pc, #412]	@ (800438c <HAL_RCC_ClockConfig+0x1f0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2207      	movs	r2, #7
 80041f4:	4013      	ands	r3, r2
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d1ee      	bne.n	80041da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2202      	movs	r2, #2
 8004202:	4013      	ands	r3, r2
 8004204:	d015      	beq.n	8004232 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2204      	movs	r2, #4
 800420c:	4013      	ands	r3, r2
 800420e:	d006      	beq.n	800421e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004210:	4b60      	ldr	r3, [pc, #384]	@ (8004394 <HAL_RCC_ClockConfig+0x1f8>)
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	4b5f      	ldr	r3, [pc, #380]	@ (8004394 <HAL_RCC_ClockConfig+0x1f8>)
 8004216:	21e0      	movs	r1, #224	@ 0xe0
 8004218:	01c9      	lsls	r1, r1, #7
 800421a:	430a      	orrs	r2, r1
 800421c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800421e:	4b5d      	ldr	r3, [pc, #372]	@ (8004394 <HAL_RCC_ClockConfig+0x1f8>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	4a5d      	ldr	r2, [pc, #372]	@ (8004398 <HAL_RCC_ClockConfig+0x1fc>)
 8004224:	4013      	ands	r3, r2
 8004226:	0019      	movs	r1, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	4b59      	ldr	r3, [pc, #356]	@ (8004394 <HAL_RCC_ClockConfig+0x1f8>)
 800422e:	430a      	orrs	r2, r1
 8004230:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2201      	movs	r2, #1
 8004238:	4013      	ands	r3, r2
 800423a:	d057      	beq.n	80042ec <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d107      	bne.n	8004254 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004244:	4b53      	ldr	r3, [pc, #332]	@ (8004394 <HAL_RCC_ClockConfig+0x1f8>)
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	2380      	movs	r3, #128	@ 0x80
 800424a:	029b      	lsls	r3, r3, #10
 800424c:	4013      	ands	r3, r2
 800424e:	d12b      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e097      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d107      	bne.n	800426c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800425c:	4b4d      	ldr	r3, [pc, #308]	@ (8004394 <HAL_RCC_ClockConfig+0x1f8>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	2380      	movs	r3, #128	@ 0x80
 8004262:	049b      	lsls	r3, r3, #18
 8004264:	4013      	ands	r3, r2
 8004266:	d11f      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e08b      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d107      	bne.n	8004284 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004274:	4b47      	ldr	r3, [pc, #284]	@ (8004394 <HAL_RCC_ClockConfig+0x1f8>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	2380      	movs	r3, #128	@ 0x80
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	4013      	ands	r3, r2
 800427e:	d113      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e07f      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b03      	cmp	r3, #3
 800428a:	d106      	bne.n	800429a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800428c:	4b41      	ldr	r3, [pc, #260]	@ (8004394 <HAL_RCC_ClockConfig+0x1f8>)
 800428e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004290:	2202      	movs	r2, #2
 8004292:	4013      	ands	r3, r2
 8004294:	d108      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e074      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800429a:	4b3e      	ldr	r3, [pc, #248]	@ (8004394 <HAL_RCC_ClockConfig+0x1f8>)
 800429c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800429e:	2202      	movs	r2, #2
 80042a0:	4013      	ands	r3, r2
 80042a2:	d101      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e06d      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042a8:	4b3a      	ldr	r3, [pc, #232]	@ (8004394 <HAL_RCC_ClockConfig+0x1f8>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2207      	movs	r2, #7
 80042ae:	4393      	bics	r3, r2
 80042b0:	0019      	movs	r1, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	4b37      	ldr	r3, [pc, #220]	@ (8004394 <HAL_RCC_ClockConfig+0x1f8>)
 80042b8:	430a      	orrs	r2, r1
 80042ba:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042bc:	f7fd fe6e 	bl	8001f9c <HAL_GetTick>
 80042c0:	0003      	movs	r3, r0
 80042c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c4:	e009      	b.n	80042da <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c6:	f7fd fe69 	bl	8001f9c <HAL_GetTick>
 80042ca:	0002      	movs	r2, r0
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004390 <HAL_RCC_ClockConfig+0x1f4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e054      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042da:	4b2e      	ldr	r3, [pc, #184]	@ (8004394 <HAL_RCC_ClockConfig+0x1f8>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2238      	movs	r2, #56	@ 0x38
 80042e0:	401a      	ands	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d1ec      	bne.n	80042c6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042ec:	4b27      	ldr	r3, [pc, #156]	@ (800438c <HAL_RCC_ClockConfig+0x1f0>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2207      	movs	r2, #7
 80042f2:	4013      	ands	r3, r2
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d21e      	bcs.n	8004338 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fa:	4b24      	ldr	r3, [pc, #144]	@ (800438c <HAL_RCC_ClockConfig+0x1f0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2207      	movs	r2, #7
 8004300:	4393      	bics	r3, r2
 8004302:	0019      	movs	r1, r3
 8004304:	4b21      	ldr	r3, [pc, #132]	@ (800438c <HAL_RCC_ClockConfig+0x1f0>)
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800430c:	f7fd fe46 	bl	8001f9c <HAL_GetTick>
 8004310:	0003      	movs	r3, r0
 8004312:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004314:	e009      	b.n	800432a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004316:	f7fd fe41 	bl	8001f9c <HAL_GetTick>
 800431a:	0002      	movs	r2, r0
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	4a1b      	ldr	r2, [pc, #108]	@ (8004390 <HAL_RCC_ClockConfig+0x1f4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d901      	bls.n	800432a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e02c      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800432a:	4b18      	ldr	r3, [pc, #96]	@ (800438c <HAL_RCC_ClockConfig+0x1f0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2207      	movs	r2, #7
 8004330:	4013      	ands	r3, r2
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d1ee      	bne.n	8004316 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2204      	movs	r2, #4
 800433e:	4013      	ands	r3, r2
 8004340:	d009      	beq.n	8004356 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004342:	4b14      	ldr	r3, [pc, #80]	@ (8004394 <HAL_RCC_ClockConfig+0x1f8>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	4a15      	ldr	r2, [pc, #84]	@ (800439c <HAL_RCC_ClockConfig+0x200>)
 8004348:	4013      	ands	r3, r2
 800434a:	0019      	movs	r1, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	4b10      	ldr	r3, [pc, #64]	@ (8004394 <HAL_RCC_ClockConfig+0x1f8>)
 8004352:	430a      	orrs	r2, r1
 8004354:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004356:	f000 f829 	bl	80043ac <HAL_RCC_GetSysClockFreq>
 800435a:	0001      	movs	r1, r0
 800435c:	4b0d      	ldr	r3, [pc, #52]	@ (8004394 <HAL_RCC_ClockConfig+0x1f8>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	0a1b      	lsrs	r3, r3, #8
 8004362:	220f      	movs	r2, #15
 8004364:	401a      	ands	r2, r3
 8004366:	4b0e      	ldr	r3, [pc, #56]	@ (80043a0 <HAL_RCC_ClockConfig+0x204>)
 8004368:	0092      	lsls	r2, r2, #2
 800436a:	58d3      	ldr	r3, [r2, r3]
 800436c:	221f      	movs	r2, #31
 800436e:	4013      	ands	r3, r2
 8004370:	000a      	movs	r2, r1
 8004372:	40da      	lsrs	r2, r3
 8004374:	4b0b      	ldr	r3, [pc, #44]	@ (80043a4 <HAL_RCC_ClockConfig+0x208>)
 8004376:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004378:	4b0b      	ldr	r3, [pc, #44]	@ (80043a8 <HAL_RCC_ClockConfig+0x20c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	0018      	movs	r0, r3
 800437e:	f7fd fdb1 	bl	8001ee4 <HAL_InitTick>
 8004382:	0003      	movs	r3, r0
}
 8004384:	0018      	movs	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	b004      	add	sp, #16
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40022000 	.word	0x40022000
 8004390:	00001388 	.word	0x00001388
 8004394:	40021000 	.word	0x40021000
 8004398:	fffff0ff 	.word	0xfffff0ff
 800439c:	ffff8fff 	.word	0xffff8fff
 80043a0:	08006040 	.word	0x08006040
 80043a4:	20000048 	.word	0x20000048
 80043a8:	2000004c 	.word	0x2000004c

080043ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043b2:	4b3c      	ldr	r3, [pc, #240]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2238      	movs	r2, #56	@ 0x38
 80043b8:	4013      	ands	r3, r2
 80043ba:	d10f      	bne.n	80043dc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80043bc:	4b39      	ldr	r3, [pc, #228]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	0adb      	lsrs	r3, r3, #11
 80043c2:	2207      	movs	r2, #7
 80043c4:	4013      	ands	r3, r2
 80043c6:	2201      	movs	r2, #1
 80043c8:	409a      	lsls	r2, r3
 80043ca:	0013      	movs	r3, r2
 80043cc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80043ce:	6839      	ldr	r1, [r7, #0]
 80043d0:	4835      	ldr	r0, [pc, #212]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80043d2:	f7fb fe97 	bl	8000104 <__udivsi3>
 80043d6:	0003      	movs	r3, r0
 80043d8:	613b      	str	r3, [r7, #16]
 80043da:	e05d      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043dc:	4b31      	ldr	r3, [pc, #196]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2238      	movs	r2, #56	@ 0x38
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d102      	bne.n	80043ee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043e8:	4b30      	ldr	r3, [pc, #192]	@ (80044ac <HAL_RCC_GetSysClockFreq+0x100>)
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	e054      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043ee:	4b2d      	ldr	r3, [pc, #180]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2238      	movs	r2, #56	@ 0x38
 80043f4:	4013      	ands	r3, r2
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d138      	bne.n	800446c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80043fa:	4b2a      	ldr	r3, [pc, #168]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	2203      	movs	r2, #3
 8004400:	4013      	ands	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004404:	4b27      	ldr	r3, [pc, #156]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	2207      	movs	r2, #7
 800440c:	4013      	ands	r3, r2
 800440e:	3301      	adds	r3, #1
 8004410:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b03      	cmp	r3, #3
 8004416:	d10d      	bne.n	8004434 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	4824      	ldr	r0, [pc, #144]	@ (80044ac <HAL_RCC_GetSysClockFreq+0x100>)
 800441c:	f7fb fe72 	bl	8000104 <__udivsi3>
 8004420:	0003      	movs	r3, r0
 8004422:	0019      	movs	r1, r3
 8004424:	4b1f      	ldr	r3, [pc, #124]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	0a1b      	lsrs	r3, r3, #8
 800442a:	227f      	movs	r2, #127	@ 0x7f
 800442c:	4013      	ands	r3, r2
 800442e:	434b      	muls	r3, r1
 8004430:	617b      	str	r3, [r7, #20]
        break;
 8004432:	e00d      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	481c      	ldr	r0, [pc, #112]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004438:	f7fb fe64 	bl	8000104 <__udivsi3>
 800443c:	0003      	movs	r3, r0
 800443e:	0019      	movs	r1, r3
 8004440:	4b18      	ldr	r3, [pc, #96]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	0a1b      	lsrs	r3, r3, #8
 8004446:	227f      	movs	r2, #127	@ 0x7f
 8004448:	4013      	ands	r3, r2
 800444a:	434b      	muls	r3, r1
 800444c:	617b      	str	r3, [r7, #20]
        break;
 800444e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004450:	4b14      	ldr	r3, [pc, #80]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	0f5b      	lsrs	r3, r3, #29
 8004456:	2207      	movs	r2, #7
 8004458:	4013      	ands	r3, r2
 800445a:	3301      	adds	r3, #1
 800445c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	6978      	ldr	r0, [r7, #20]
 8004462:	f7fb fe4f 	bl	8000104 <__udivsi3>
 8004466:	0003      	movs	r3, r0
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	e015      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800446c:	4b0d      	ldr	r3, [pc, #52]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2238      	movs	r2, #56	@ 0x38
 8004472:	4013      	ands	r3, r2
 8004474:	2b20      	cmp	r3, #32
 8004476:	d103      	bne.n	8004480 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004478:	2380      	movs	r3, #128	@ 0x80
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	e00b      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004480:	4b08      	ldr	r3, [pc, #32]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2238      	movs	r2, #56	@ 0x38
 8004486:	4013      	ands	r3, r2
 8004488:	2b18      	cmp	r3, #24
 800448a:	d103      	bne.n	8004494 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800448c:	23fa      	movs	r3, #250	@ 0xfa
 800448e:	01db      	lsls	r3, r3, #7
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	e001      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004498:	693b      	ldr	r3, [r7, #16]
}
 800449a:	0018      	movs	r0, r3
 800449c:	46bd      	mov	sp, r7
 800449e:	b006      	add	sp, #24
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	46c0      	nop			@ (mov r8, r8)
 80044a4:	40021000 	.word	0x40021000
 80044a8:	00f42400 	.word	0x00f42400
 80044ac:	007a1200 	.word	0x007a1200

080044b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80044b8:	2313      	movs	r3, #19
 80044ba:	18fb      	adds	r3, r7, r3
 80044bc:	2200      	movs	r2, #0
 80044be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044c0:	2312      	movs	r3, #18
 80044c2:	18fb      	adds	r3, r7, r3
 80044c4:	2200      	movs	r2, #0
 80044c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	2380      	movs	r3, #128	@ 0x80
 80044ce:	029b      	lsls	r3, r3, #10
 80044d0:	4013      	ands	r3, r2
 80044d2:	d100      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80044d4:	e0a3      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044d6:	2011      	movs	r0, #17
 80044d8:	183b      	adds	r3, r7, r0
 80044da:	2200      	movs	r2, #0
 80044dc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044de:	4ba5      	ldr	r3, [pc, #660]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044e2:	2380      	movs	r3, #128	@ 0x80
 80044e4:	055b      	lsls	r3, r3, #21
 80044e6:	4013      	ands	r3, r2
 80044e8:	d110      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ea:	4ba2      	ldr	r3, [pc, #648]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044ee:	4ba1      	ldr	r3, [pc, #644]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044f0:	2180      	movs	r1, #128	@ 0x80
 80044f2:	0549      	lsls	r1, r1, #21
 80044f4:	430a      	orrs	r2, r1
 80044f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80044f8:	4b9e      	ldr	r3, [pc, #632]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044fc:	2380      	movs	r3, #128	@ 0x80
 80044fe:	055b      	lsls	r3, r3, #21
 8004500:	4013      	ands	r3, r2
 8004502:	60bb      	str	r3, [r7, #8]
 8004504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004506:	183b      	adds	r3, r7, r0
 8004508:	2201      	movs	r2, #1
 800450a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800450c:	4b9a      	ldr	r3, [pc, #616]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	4b99      	ldr	r3, [pc, #612]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004512:	2180      	movs	r1, #128	@ 0x80
 8004514:	0049      	lsls	r1, r1, #1
 8004516:	430a      	orrs	r2, r1
 8004518:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800451a:	f7fd fd3f 	bl	8001f9c <HAL_GetTick>
 800451e:	0003      	movs	r3, r0
 8004520:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004522:	e00b      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004524:	f7fd fd3a 	bl	8001f9c <HAL_GetTick>
 8004528:	0002      	movs	r2, r0
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d904      	bls.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004532:	2313      	movs	r3, #19
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	2203      	movs	r2, #3
 8004538:	701a      	strb	r2, [r3, #0]
        break;
 800453a:	e005      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800453c:	4b8e      	ldr	r3, [pc, #568]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	2380      	movs	r3, #128	@ 0x80
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	4013      	ands	r3, r2
 8004546:	d0ed      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004548:	2313      	movs	r3, #19
 800454a:	18fb      	adds	r3, r7, r3
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d154      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004552:	4b88      	ldr	r3, [pc, #544]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004554:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004556:	23c0      	movs	r3, #192	@ 0xc0
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4013      	ands	r3, r2
 800455c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d019      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	429a      	cmp	r2, r3
 800456c:	d014      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800456e:	4b81      	ldr	r3, [pc, #516]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004572:	4a82      	ldr	r2, [pc, #520]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004574:	4013      	ands	r3, r2
 8004576:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004578:	4b7e      	ldr	r3, [pc, #504]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800457a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800457c:	4b7d      	ldr	r3, [pc, #500]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800457e:	2180      	movs	r1, #128	@ 0x80
 8004580:	0249      	lsls	r1, r1, #9
 8004582:	430a      	orrs	r2, r1
 8004584:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004586:	4b7b      	ldr	r3, [pc, #492]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004588:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800458a:	4b7a      	ldr	r3, [pc, #488]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800458c:	497c      	ldr	r1, [pc, #496]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800458e:	400a      	ands	r2, r1
 8004590:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004592:	4b78      	ldr	r3, [pc, #480]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2201      	movs	r2, #1
 800459c:	4013      	ands	r3, r2
 800459e:	d016      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a0:	f7fd fcfc 	bl	8001f9c <HAL_GetTick>
 80045a4:	0003      	movs	r3, r0
 80045a6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a8:	e00c      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045aa:	f7fd fcf7 	bl	8001f9c <HAL_GetTick>
 80045ae:	0002      	movs	r2, r0
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	4a73      	ldr	r2, [pc, #460]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d904      	bls.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80045ba:	2313      	movs	r3, #19
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	2203      	movs	r2, #3
 80045c0:	701a      	strb	r2, [r3, #0]
            break;
 80045c2:	e004      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c8:	2202      	movs	r2, #2
 80045ca:	4013      	ands	r3, r2
 80045cc:	d0ed      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80045ce:	2313      	movs	r3, #19
 80045d0:	18fb      	adds	r3, r7, r3
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045d8:	4b66      	ldr	r3, [pc, #408]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045dc:	4a67      	ldr	r2, [pc, #412]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80045de:	4013      	ands	r3, r2
 80045e0:	0019      	movs	r1, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045e6:	4b63      	ldr	r3, [pc, #396]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045e8:	430a      	orrs	r2, r1
 80045ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045ec:	e00c      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045ee:	2312      	movs	r3, #18
 80045f0:	18fb      	adds	r3, r7, r3
 80045f2:	2213      	movs	r2, #19
 80045f4:	18ba      	adds	r2, r7, r2
 80045f6:	7812      	ldrb	r2, [r2, #0]
 80045f8:	701a      	strb	r2, [r3, #0]
 80045fa:	e005      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fc:	2312      	movs	r3, #18
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	2213      	movs	r2, #19
 8004602:	18ba      	adds	r2, r7, r2
 8004604:	7812      	ldrb	r2, [r2, #0]
 8004606:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004608:	2311      	movs	r3, #17
 800460a:	18fb      	adds	r3, r7, r3
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d105      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004612:	4b58      	ldr	r3, [pc, #352]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004614:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004616:	4b57      	ldr	r3, [pc, #348]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004618:	495b      	ldr	r1, [pc, #364]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800461a:	400a      	ands	r2, r1
 800461c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2201      	movs	r2, #1
 8004624:	4013      	ands	r3, r2
 8004626:	d009      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004628:	4b52      	ldr	r3, [pc, #328]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800462a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462c:	2203      	movs	r2, #3
 800462e:	4393      	bics	r3, r2
 8004630:	0019      	movs	r1, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	4b4f      	ldr	r3, [pc, #316]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004638:	430a      	orrs	r2, r1
 800463a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2210      	movs	r2, #16
 8004642:	4013      	ands	r3, r2
 8004644:	d009      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004646:	4b4b      	ldr	r3, [pc, #300]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464a:	4a50      	ldr	r2, [pc, #320]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800464c:	4013      	ands	r3, r2
 800464e:	0019      	movs	r1, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	4b47      	ldr	r3, [pc, #284]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004656:	430a      	orrs	r2, r1
 8004658:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	2380      	movs	r3, #128	@ 0x80
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4013      	ands	r3, r2
 8004664:	d009      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004666:	4b43      	ldr	r3, [pc, #268]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466a:	4a49      	ldr	r2, [pc, #292]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800466c:	4013      	ands	r3, r2
 800466e:	0019      	movs	r1, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	695a      	ldr	r2, [r3, #20]
 8004674:	4b3f      	ldr	r3, [pc, #252]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004676:	430a      	orrs	r2, r1
 8004678:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	2380      	movs	r3, #128	@ 0x80
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	4013      	ands	r3, r2
 8004684:	d009      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004686:	4b3b      	ldr	r3, [pc, #236]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800468a:	4a42      	ldr	r2, [pc, #264]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800468c:	4013      	ands	r3, r2
 800468e:	0019      	movs	r1, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699a      	ldr	r2, [r3, #24]
 8004694:	4b37      	ldr	r3, [pc, #220]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004696:	430a      	orrs	r2, r1
 8004698:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2220      	movs	r2, #32
 80046a0:	4013      	ands	r3, r2
 80046a2:	d009      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046a4:	4b33      	ldr	r3, [pc, #204]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a8:	4a3b      	ldr	r2, [pc, #236]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	0019      	movs	r1, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	4b30      	ldr	r3, [pc, #192]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046b4:	430a      	orrs	r2, r1
 80046b6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	2380      	movs	r3, #128	@ 0x80
 80046be:	01db      	lsls	r3, r3, #7
 80046c0:	4013      	ands	r3, r2
 80046c2:	d015      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	0899      	lsrs	r1, r3, #2
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69da      	ldr	r2, [r3, #28]
 80046d0:	4b28      	ldr	r3, [pc, #160]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046d2:	430a      	orrs	r2, r1
 80046d4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69da      	ldr	r2, [r3, #28]
 80046da:	2380      	movs	r3, #128	@ 0x80
 80046dc:	05db      	lsls	r3, r3, #23
 80046de:	429a      	cmp	r2, r3
 80046e0:	d106      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80046e2:	4b24      	ldr	r3, [pc, #144]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	4b23      	ldr	r3, [pc, #140]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046e8:	2180      	movs	r1, #128	@ 0x80
 80046ea:	0249      	lsls	r1, r1, #9
 80046ec:	430a      	orrs	r2, r1
 80046ee:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	2380      	movs	r3, #128	@ 0x80
 80046f6:	039b      	lsls	r3, r3, #14
 80046f8:	4013      	ands	r3, r2
 80046fa:	d016      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80046fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004700:	4a26      	ldr	r2, [pc, #152]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004702:	4013      	ands	r3, r2
 8004704:	0019      	movs	r1, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1a      	ldr	r2, [r3, #32]
 800470a:	4b1a      	ldr	r3, [pc, #104]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800470c:	430a      	orrs	r2, r1
 800470e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1a      	ldr	r2, [r3, #32]
 8004714:	2380      	movs	r3, #128	@ 0x80
 8004716:	03db      	lsls	r3, r3, #15
 8004718:	429a      	cmp	r2, r3
 800471a:	d106      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800471c:	4b15      	ldr	r3, [pc, #84]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	4b14      	ldr	r3, [pc, #80]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004722:	2180      	movs	r1, #128	@ 0x80
 8004724:	0449      	lsls	r1, r1, #17
 8004726:	430a      	orrs	r2, r1
 8004728:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	2380      	movs	r3, #128	@ 0x80
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	4013      	ands	r3, r2
 8004734:	d016      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004736:	4b0f      	ldr	r3, [pc, #60]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473a:	4a19      	ldr	r2, [pc, #100]	@ (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800473c:	4013      	ands	r3, r2
 800473e:	0019      	movs	r1, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	4b0b      	ldr	r3, [pc, #44]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004746:	430a      	orrs	r2, r1
 8004748:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	2380      	movs	r3, #128	@ 0x80
 8004750:	01db      	lsls	r3, r3, #7
 8004752:	429a      	cmp	r2, r3
 8004754:	d106      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004756:	4b07      	ldr	r3, [pc, #28]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	4b06      	ldr	r3, [pc, #24]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800475c:	2180      	movs	r1, #128	@ 0x80
 800475e:	0249      	lsls	r1, r1, #9
 8004760:	430a      	orrs	r2, r1
 8004762:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004764:	2312      	movs	r3, #18
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	781b      	ldrb	r3, [r3, #0]
}
 800476a:	0018      	movs	r0, r3
 800476c:	46bd      	mov	sp, r7
 800476e:	b006      	add	sp, #24
 8004770:	bd80      	pop	{r7, pc}
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	40021000 	.word	0x40021000
 8004778:	40007000 	.word	0x40007000
 800477c:	fffffcff 	.word	0xfffffcff
 8004780:	fffeffff 	.word	0xfffeffff
 8004784:	00001388 	.word	0x00001388
 8004788:	efffffff 	.word	0xefffffff
 800478c:	fffff3ff 	.word	0xfffff3ff
 8004790:	fff3ffff 	.word	0xfff3ffff
 8004794:	ffcfffff 	.word	0xffcfffff
 8004798:	ffffcfff 	.word	0xffffcfff
 800479c:	ffbfffff 	.word	0xffbfffff
 80047a0:	ffff3fff 	.word	0xffff3fff

080047a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80047a4:	b5b0      	push	{r4, r5, r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80047ac:	230f      	movs	r3, #15
 80047ae:	18fb      	adds	r3, r7, r3
 80047b0:	2201      	movs	r2, #1
 80047b2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d100      	bne.n	80047bc <HAL_RTC_Init+0x18>
 80047ba:	e08c      	b.n	80048d6 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2229      	movs	r2, #41	@ 0x29
 80047c0:	5c9b      	ldrb	r3, [r3, r2]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10b      	bne.n	80047e0 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2228      	movs	r2, #40	@ 0x28
 80047cc:	2100      	movs	r1, #0
 80047ce:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2288      	movs	r2, #136	@ 0x88
 80047d4:	0212      	lsls	r2, r2, #8
 80047d6:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	0018      	movs	r0, r3
 80047dc:	f7fd fa2a 	bl	8001c34 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2229      	movs	r2, #41	@ 0x29
 80047e4:	2102      	movs	r1, #2
 80047e6:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	2210      	movs	r2, #16
 80047f0:	4013      	ands	r3, r2
 80047f2:	2b10      	cmp	r3, #16
 80047f4:	d062      	beq.n	80048bc <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	22ca      	movs	r2, #202	@ 0xca
 80047fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2253      	movs	r2, #83	@ 0x53
 8004804:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004806:	250f      	movs	r5, #15
 8004808:	197c      	adds	r4, r7, r5
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	0018      	movs	r0, r3
 800480e:	f000 fbf3 	bl	8004ff8 <RTC_EnterInitMode>
 8004812:	0003      	movs	r3, r0
 8004814:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004816:	0028      	movs	r0, r5
 8004818:	183b      	adds	r3, r7, r0
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d12c      	bne.n	800487a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	492e      	ldr	r1, [pc, #184]	@ (80048e4 <HAL_RTC_Init+0x140>)
 800482c:	400a      	ands	r2, r1
 800482e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6999      	ldr	r1, [r3, #24]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6912      	ldr	r2, [r2, #16]
 8004856:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6919      	ldr	r1, [r3, #16]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	041a      	lsls	r2, r3, #16
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800486c:	183c      	adds	r4, r7, r0
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	0018      	movs	r0, r3
 8004872:	f000 fc03 	bl	800507c <RTC_ExitInitMode>
 8004876:	0003      	movs	r3, r0
 8004878:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800487a:	230f      	movs	r3, #15
 800487c:	18fb      	adds	r3, r7, r3
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d116      	bne.n	80048b2 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	00d2      	lsls	r2, r2, #3
 8004890:	08d2      	lsrs	r2, r2, #3
 8004892:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6999      	ldr	r1, [r3, #24]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	22ff      	movs	r2, #255	@ 0xff
 80048b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80048ba:	e003      	b.n	80048c4 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80048bc:	230f      	movs	r3, #15
 80048be:	18fb      	adds	r3, r7, r3
 80048c0:	2200      	movs	r2, #0
 80048c2:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80048c4:	230f      	movs	r3, #15
 80048c6:	18fb      	adds	r3, r7, r3
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d103      	bne.n	80048d6 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2229      	movs	r2, #41	@ 0x29
 80048d2:	2101      	movs	r1, #1
 80048d4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80048d6:	230f      	movs	r3, #15
 80048d8:	18fb      	adds	r3, r7, r3
 80048da:	781b      	ldrb	r3, [r3, #0]
}
 80048dc:	0018      	movs	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	b004      	add	sp, #16
 80048e2:	bdb0      	pop	{r4, r5, r7, pc}
 80048e4:	fb8fffbf 	.word	0xfb8fffbf

080048e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048e8:	b5b0      	push	{r4, r5, r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2228      	movs	r2, #40	@ 0x28
 80048f8:	5c9b      	ldrb	r3, [r3, r2]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_RTC_SetTime+0x1a>
 80048fe:	2302      	movs	r3, #2
 8004900:	e092      	b.n	8004a28 <HAL_RTC_SetTime+0x140>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2228      	movs	r2, #40	@ 0x28
 8004906:	2101      	movs	r1, #1
 8004908:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2229      	movs	r2, #41	@ 0x29
 800490e:	2102      	movs	r1, #2
 8004910:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	22ca      	movs	r2, #202	@ 0xca
 8004918:	625a      	str	r2, [r3, #36]	@ 0x24
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2253      	movs	r2, #83	@ 0x53
 8004920:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004922:	2513      	movs	r5, #19
 8004924:	197c      	adds	r4, r7, r5
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	0018      	movs	r0, r3
 800492a:	f000 fb65 	bl	8004ff8 <RTC_EnterInitMode>
 800492e:	0003      	movs	r3, r0
 8004930:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004932:	197b      	adds	r3, r7, r5
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d162      	bne.n	8004a00 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d125      	bne.n	800498c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	2240      	movs	r2, #64	@ 0x40
 8004948:	4013      	ands	r3, r2
 800494a:	d102      	bne.n	8004952 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2200      	movs	r2, #0
 8004950:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	0018      	movs	r0, r3
 8004958:	f000 fbd4 	bl	8005104 <RTC_ByteToBcd2>
 800495c:	0003      	movs	r3, r0
 800495e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	785b      	ldrb	r3, [r3, #1]
 8004964:	0018      	movs	r0, r3
 8004966:	f000 fbcd 	bl	8005104 <RTC_ByteToBcd2>
 800496a:	0003      	movs	r3, r0
 800496c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800496e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	789b      	ldrb	r3, [r3, #2]
 8004974:	0018      	movs	r0, r3
 8004976:	f000 fbc5 	bl	8005104 <RTC_ByteToBcd2>
 800497a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800497c:	0022      	movs	r2, r4
 800497e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	78db      	ldrb	r3, [r3, #3]
 8004984:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004986:	4313      	orrs	r3, r2
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	e017      	b.n	80049bc <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	2240      	movs	r2, #64	@ 0x40
 8004994:	4013      	ands	r3, r2
 8004996:	d102      	bne.n	800499e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2200      	movs	r2, #0
 800499c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	785b      	ldrb	r3, [r3, #1]
 80049a8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049aa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049b0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	78db      	ldrb	r3, [r3, #3]
 80049b6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	491b      	ldr	r1, [pc, #108]	@ (8004a30 <HAL_RTC_SetTime+0x148>)
 80049c4:	400a      	ands	r2, r1
 80049c6:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699a      	ldr	r2, [r3, #24]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4918      	ldr	r1, [pc, #96]	@ (8004a34 <HAL_RTC_SetTime+0x14c>)
 80049d4:	400a      	ands	r2, r1
 80049d6:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6999      	ldr	r1, [r3, #24]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80049f0:	2313      	movs	r3, #19
 80049f2:	18fc      	adds	r4, r7, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	0018      	movs	r0, r3
 80049f8:	f000 fb40 	bl	800507c <RTC_ExitInitMode>
 80049fc:	0003      	movs	r3, r0
 80049fe:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	22ff      	movs	r2, #255	@ 0xff
 8004a06:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8004a08:	2313      	movs	r3, #19
 8004a0a:	18fb      	adds	r3, r7, r3
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d103      	bne.n	8004a1a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2229      	movs	r2, #41	@ 0x29
 8004a16:	2101      	movs	r1, #1
 8004a18:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2228      	movs	r2, #40	@ 0x28
 8004a1e:	2100      	movs	r1, #0
 8004a20:	5499      	strb	r1, [r3, r2]

  return status;
 8004a22:	2313      	movs	r3, #19
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	781b      	ldrb	r3, [r3, #0]
}
 8004a28:	0018      	movs	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b006      	add	sp, #24
 8004a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8004a30:	007f7f7f 	.word	0x007f7f7f
 8004a34:	fffbffff 	.word	0xfffbffff

08004a38 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	045b      	lsls	r3, r3, #17
 8004a56:	0c5a      	lsrs	r2, r3, #17
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a22      	ldr	r2, [pc, #136]	@ (8004aec <HAL_RTC_GetTime+0xb4>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	0c1b      	lsrs	r3, r3, #16
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	223f      	movs	r2, #63	@ 0x3f
 8004a70:	4013      	ands	r3, r2
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	0a1b      	lsrs	r3, r3, #8
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	227f      	movs	r2, #127	@ 0x7f
 8004a80:	4013      	ands	r3, r2
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	227f      	movs	r2, #127	@ 0x7f
 8004a8e:	4013      	ands	r3, r2
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	0d9b      	lsrs	r3, r3, #22
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d11a      	bne.n	8004ae2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f000 fb4f 	bl	8005154 <RTC_Bcd2ToByte>
 8004ab6:	0003      	movs	r3, r0
 8004ab8:	001a      	movs	r2, r3
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	785b      	ldrb	r3, [r3, #1]
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f000 fb46 	bl	8005154 <RTC_Bcd2ToByte>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	001a      	movs	r2, r3
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	789b      	ldrb	r3, [r3, #2]
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f000 fb3d 	bl	8005154 <RTC_Bcd2ToByte>
 8004ada:	0003      	movs	r3, r0
 8004adc:	001a      	movs	r2, r3
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b006      	add	sp, #24
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	007f7f7f 	.word	0x007f7f7f

08004af0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004af0:	b5b0      	push	{r4, r5, r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2228      	movs	r2, #40	@ 0x28
 8004b00:	5c9b      	ldrb	r3, [r3, r2]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_RTC_SetDate+0x1a>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e07e      	b.n	8004c08 <HAL_RTC_SetDate+0x118>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2228      	movs	r2, #40	@ 0x28
 8004b0e:	2101      	movs	r1, #1
 8004b10:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2229      	movs	r2, #41	@ 0x29
 8004b16:	2102      	movs	r1, #2
 8004b18:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10e      	bne.n	8004b3e <HAL_RTC_SetDate+0x4e>
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	785b      	ldrb	r3, [r3, #1]
 8004b24:	001a      	movs	r2, r3
 8004b26:	2310      	movs	r3, #16
 8004b28:	4013      	ands	r3, r2
 8004b2a:	d008      	beq.n	8004b3e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	785b      	ldrb	r3, [r3, #1]
 8004b30:	2210      	movs	r2, #16
 8004b32:	4393      	bics	r3, r2
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	330a      	adds	r3, #10
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d11c      	bne.n	8004b7e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	78db      	ldrb	r3, [r3, #3]
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f000 fadb 	bl	8005104 <RTC_ByteToBcd2>
 8004b4e:	0003      	movs	r3, r0
 8004b50:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	785b      	ldrb	r3, [r3, #1]
 8004b56:	0018      	movs	r0, r3
 8004b58:	f000 fad4 	bl	8005104 <RTC_ByteToBcd2>
 8004b5c:	0003      	movs	r3, r0
 8004b5e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b60:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	789b      	ldrb	r3, [r3, #2]
 8004b66:	0018      	movs	r0, r3
 8004b68:	f000 facc 	bl	8005104 <RTC_ByteToBcd2>
 8004b6c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b6e:	0022      	movs	r2, r4
 8004b70:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	e00e      	b.n	8004b9c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	78db      	ldrb	r3, [r3, #3]
 8004b82:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	785b      	ldrb	r3, [r3, #1]
 8004b88:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004b8a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004b90:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	22ca      	movs	r2, #202	@ 0xca
 8004ba2:	625a      	str	r2, [r3, #36]	@ 0x24
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2253      	movs	r2, #83	@ 0x53
 8004baa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004bac:	2513      	movs	r5, #19
 8004bae:	197c      	adds	r4, r7, r5
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f000 fa20 	bl	8004ff8 <RTC_EnterInitMode>
 8004bb8:	0003      	movs	r3, r0
 8004bba:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004bbc:	0028      	movs	r0, r5
 8004bbe:	183b      	adds	r3, r7, r0
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10c      	bne.n	8004be0 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4910      	ldr	r1, [pc, #64]	@ (8004c10 <HAL_RTC_SetDate+0x120>)
 8004bce:	400a      	ands	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004bd2:	183c      	adds	r4, r7, r0
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f000 fa50 	bl	800507c <RTC_ExitInitMode>
 8004bdc:	0003      	movs	r3, r0
 8004bde:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	22ff      	movs	r2, #255	@ 0xff
 8004be6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004be8:	2313      	movs	r3, #19
 8004bea:	18fb      	adds	r3, r7, r3
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d103      	bne.n	8004bfa <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2229      	movs	r2, #41	@ 0x29
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2228      	movs	r2, #40	@ 0x28
 8004bfe:	2100      	movs	r1, #0
 8004c00:	5499      	strb	r1, [r3, r2]

  return status;
 8004c02:	2313      	movs	r3, #19
 8004c04:	18fb      	adds	r3, r7, r3
 8004c06:	781b      	ldrb	r3, [r3, #0]
}
 8004c08:	0018      	movs	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	b006      	add	sp, #24
 8004c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c10:	00ffff3f 	.word	0x00ffff3f

08004c14 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	4a21      	ldr	r2, [pc, #132]	@ (8004cac <HAL_RTC_GetDate+0x98>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	0c1b      	lsrs	r3, r3, #16
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	0a1b      	lsrs	r3, r3, #8
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	221f      	movs	r2, #31
 8004c3e:	4013      	ands	r3, r2
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	223f      	movs	r2, #63	@ 0x3f
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	0b5b      	lsrs	r3, r3, #13
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2207      	movs	r2, #7
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d11a      	bne.n	8004ca0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	78db      	ldrb	r3, [r3, #3]
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f000 fa70 	bl	8005154 <RTC_Bcd2ToByte>
 8004c74:	0003      	movs	r3, r0
 8004c76:	001a      	movs	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	785b      	ldrb	r3, [r3, #1]
 8004c80:	0018      	movs	r0, r3
 8004c82:	f000 fa67 	bl	8005154 <RTC_Bcd2ToByte>
 8004c86:	0003      	movs	r3, r0
 8004c88:	001a      	movs	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	789b      	ldrb	r3, [r3, #2]
 8004c92:	0018      	movs	r0, r3
 8004c94:	f000 fa5e 	bl	8005154 <RTC_Bcd2ToByte>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	001a      	movs	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	b006      	add	sp, #24
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	46c0      	nop			@ (mov r8, r8)
 8004cac:	00ffff3f 	.word	0x00ffff3f

08004cb0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004cb0:	b590      	push	{r4, r7, lr}
 8004cb2:	b089      	sub	sp, #36	@ 0x24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2228      	movs	r2, #40	@ 0x28
 8004cc0:	5c9b      	ldrb	r3, [r3, r2]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <HAL_RTC_SetAlarm_IT+0x1a>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e127      	b.n	8004f1a <HAL_RTC_SetAlarm_IT+0x26a>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2228      	movs	r2, #40	@ 0x28
 8004cce:	2101      	movs	r1, #1
 8004cd0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2229      	movs	r2, #41	@ 0x29
 8004cd6:	2102      	movs	r1, #2
 8004cd8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d136      	bne.n	8004d4e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	2240      	movs	r2, #64	@ 0x40
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d102      	bne.n	8004cf2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	f000 fa04 	bl	8005104 <RTC_ByteToBcd2>
 8004cfc:	0003      	movs	r3, r0
 8004cfe:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	785b      	ldrb	r3, [r3, #1]
 8004d04:	0018      	movs	r0, r3
 8004d06:	f000 f9fd 	bl	8005104 <RTC_ByteToBcd2>
 8004d0a:	0003      	movs	r3, r0
 8004d0c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d0e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	789b      	ldrb	r3, [r3, #2]
 8004d14:	0018      	movs	r0, r3
 8004d16:	f000 f9f5 	bl	8005104 <RTC_ByteToBcd2>
 8004d1a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004d1c:	0022      	movs	r2, r4
 8004d1e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	78db      	ldrb	r3, [r3, #3]
 8004d24:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004d26:	431a      	orrs	r2, r3
 8004d28:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	5c9b      	ldrb	r3, [r3, r2]
 8004d30:	0018      	movs	r0, r3
 8004d32:	f000 f9e7 	bl	8005104 <RTC_ByteToBcd2>
 8004d36:	0003      	movs	r3, r0
 8004d38:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004d3a:	0022      	movs	r2, r4
 8004d3c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004d42:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	e022      	b.n	8004d94 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	2240      	movs	r2, #64	@ 0x40
 8004d56:	4013      	ands	r3, r2
 8004d58:	d102      	bne.n	8004d60 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	785b      	ldrb	r3, [r3, #1]
 8004d6a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d6c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004d72:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	78db      	ldrb	r3, [r3, #3]
 8004d78:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004d7a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2120      	movs	r1, #32
 8004d80:	5c5b      	ldrb	r3, [r3, r1]
 8004d82:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004d84:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004d8a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d90:	4313      	orrs	r3, r2
 8004d92:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	22ca      	movs	r2, #202	@ 0xca
 8004da6:	625a      	str	r2, [r3, #36]	@ 0x24
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2253      	movs	r2, #83	@ 0x53
 8004dae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004db4:	2380      	movs	r3, #128	@ 0x80
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d14c      	bne.n	8004e56 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4957      	ldr	r1, [pc, #348]	@ (8004f24 <HAL_RTC_SetAlarm_IT+0x274>)
 8004dc8:	400a      	ands	r2, r1
 8004dca:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004ddc:	f7fd f8de 	bl	8001f9c <HAL_GetTick>
 8004de0:	0003      	movs	r3, r0
 8004de2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004de4:	e016      	b.n	8004e14 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004de6:	f7fd f8d9 	bl	8001f9c <HAL_GetTick>
 8004dea:	0002      	movs	r2, r0
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	1ad2      	subs	r2, r2, r3
 8004df0:	23fa      	movs	r3, #250	@ 0xfa
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d90d      	bls.n	8004e14 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	22ff      	movs	r2, #255	@ 0xff
 8004dfe:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2229      	movs	r2, #41	@ 0x29
 8004e04:	2103      	movs	r1, #3
 8004e06:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2228      	movs	r2, #40	@ 0x28
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e082      	b.n	8004f1a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d0e2      	beq.n	8004de6 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2180      	movs	r1, #128	@ 0x80
 8004e3c:	0049      	lsls	r1, r1, #1
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699a      	ldr	r2, [r3, #24]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2180      	movs	r1, #128	@ 0x80
 8004e4e:	0149      	lsls	r1, r1, #5
 8004e50:	430a      	orrs	r2, r1
 8004e52:	619a      	str	r2, [r3, #24]
 8004e54:	e04b      	b.n	8004eee <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	699a      	ldr	r2, [r3, #24]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4931      	ldr	r1, [pc, #196]	@ (8004f28 <HAL_RTC_SetAlarm_IT+0x278>)
 8004e62:	400a      	ands	r2, r1
 8004e64:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2102      	movs	r1, #2
 8004e72:	430a      	orrs	r2, r1
 8004e74:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004e76:	f7fd f891 	bl	8001f9c <HAL_GetTick>
 8004e7a:	0003      	movs	r3, r0
 8004e7c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004e7e:	e016      	b.n	8004eae <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e80:	f7fd f88c 	bl	8001f9c <HAL_GetTick>
 8004e84:	0002      	movs	r2, r0
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	1ad2      	subs	r2, r2, r3
 8004e8a:	23fa      	movs	r3, #250	@ 0xfa
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d90d      	bls.n	8004eae <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	22ff      	movs	r2, #255	@ 0xff
 8004e98:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2229      	movs	r2, #41	@ 0x29
 8004e9e:	2103      	movs	r1, #3
 8004ea0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2228      	movs	r2, #40	@ 0x28
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e035      	b.n	8004f1a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d0e2      	beq.n	8004e80 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	699a      	ldr	r2, [r3, #24]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2180      	movs	r1, #128	@ 0x80
 8004ed6:	0089      	lsls	r1, r1, #2
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699a      	ldr	r2, [r3, #24]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2180      	movs	r1, #128	@ 0x80
 8004ee8:	0189      	lsls	r1, r1, #6
 8004eea:	430a      	orrs	r2, r1
 8004eec:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004eee:	4a0f      	ldr	r2, [pc, #60]	@ (8004f2c <HAL_RTC_SetAlarm_IT+0x27c>)
 8004ef0:	2380      	movs	r3, #128	@ 0x80
 8004ef2:	58d3      	ldr	r3, [r2, r3]
 8004ef4:	490d      	ldr	r1, [pc, #52]	@ (8004f2c <HAL_RTC_SetAlarm_IT+0x27c>)
 8004ef6:	2280      	movs	r2, #128	@ 0x80
 8004ef8:	0312      	lsls	r2, r2, #12
 8004efa:	4313      	orrs	r3, r2
 8004efc:	2280      	movs	r2, #128	@ 0x80
 8004efe:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	22ff      	movs	r2, #255	@ 0xff
 8004f06:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2229      	movs	r2, #41	@ 0x29
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2228      	movs	r2, #40	@ 0x28
 8004f14:	2100      	movs	r1, #0
 8004f16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	b009      	add	sp, #36	@ 0x24
 8004f20:	bd90      	pop	{r4, r7, pc}
 8004f22:	46c0      	nop			@ (mov r8, r8)
 8004f24:	fffffeff 	.word	0xfffffeff
 8004f28:	fffffdff 	.word	0xfffffdff
 8004f2c:	40021800 	.word	0x40021800

08004f30 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	2380      	movs	r3, #128	@ 0x80
 8004f40:	015b      	lsls	r3, r3, #5
 8004f42:	4013      	ands	r3, r2
 8004f44:	d011      	beq.n	8004f6a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d00b      	beq.n	8004f6a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	0018      	movs	r0, r3
 8004f66:	f7fc f821 	bl	8000fac <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699a      	ldr	r2, [r3, #24]
 8004f70:	2380      	movs	r3, #128	@ 0x80
 8004f72:	019b      	lsls	r3, r3, #6
 8004f74:	4013      	ands	r3, r2
 8004f76:	d011      	beq.n	8004f9c <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f7e:	2202      	movs	r2, #2
 8004f80:	4013      	ands	r3, r2
 8004f82:	d00b      	beq.n	8004f9c <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2102      	movs	r1, #2
 8004f90:	430a      	orrs	r2, r1
 8004f92:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	0018      	movs	r0, r3
 8004f98:	f000 f942 	bl	8005220 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2229      	movs	r2, #41	@ 0x29
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	5499      	strb	r1, [r3, r2]
}
 8004fa4:	46c0      	nop			@ (mov r8, r8)
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	b002      	add	sp, #8
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8004ff4 <HAL_RTC_WaitForSynchro+0x48>)
 8004fba:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004fbc:	f7fc ffee 	bl	8001f9c <HAL_GetTick>
 8004fc0:	0003      	movs	r3, r0
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004fc4:	e00a      	b.n	8004fdc <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004fc6:	f7fc ffe9 	bl	8001f9c <HAL_GetTick>
 8004fca:	0002      	movs	r2, r0
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	1ad2      	subs	r2, r2, r3
 8004fd0:	23fa      	movs	r3, #250	@ 0xfa
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d901      	bls.n	8004fdc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e006      	b.n	8004fea <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d0ee      	beq.n	8004fc6 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	0018      	movs	r0, r3
 8004fec:	46bd      	mov	sp, r7
 8004fee:	b004      	add	sp, #16
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	46c0      	nop			@ (mov r8, r8)
 8004ff4:	0001005f 	.word	0x0001005f

08004ff8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005000:	230f      	movs	r3, #15
 8005002:	18fb      	adds	r3, r7, r3
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	2240      	movs	r2, #64	@ 0x40
 8005010:	4013      	ands	r3, r2
 8005012:	d12c      	bne.n	800506e <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2180      	movs	r1, #128	@ 0x80
 8005020:	430a      	orrs	r2, r1
 8005022:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005024:	f7fc ffba 	bl	8001f9c <HAL_GetTick>
 8005028:	0003      	movs	r3, r0
 800502a:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800502c:	e014      	b.n	8005058 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800502e:	f7fc ffb5 	bl	8001f9c <HAL_GetTick>
 8005032:	0002      	movs	r2, r0
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	1ad2      	subs	r2, r2, r3
 8005038:	200f      	movs	r0, #15
 800503a:	183b      	adds	r3, r7, r0
 800503c:	1839      	adds	r1, r7, r0
 800503e:	7809      	ldrb	r1, [r1, #0]
 8005040:	7019      	strb	r1, [r3, #0]
 8005042:	23fa      	movs	r3, #250	@ 0xfa
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	429a      	cmp	r2, r3
 8005048:	d906      	bls.n	8005058 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800504a:	183b      	adds	r3, r7, r0
 800504c:	2203      	movs	r2, #3
 800504e:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2229      	movs	r2, #41	@ 0x29
 8005054:	2103      	movs	r1, #3
 8005056:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	2240      	movs	r2, #64	@ 0x40
 8005060:	4013      	ands	r3, r2
 8005062:	d104      	bne.n	800506e <RTC_EnterInitMode+0x76>
 8005064:	230f      	movs	r3, #15
 8005066:	18fb      	adds	r3, r7, r3
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2b03      	cmp	r3, #3
 800506c:	d1df      	bne.n	800502e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800506e:	230f      	movs	r3, #15
 8005070:	18fb      	adds	r3, r7, r3
 8005072:	781b      	ldrb	r3, [r3, #0]
}
 8005074:	0018      	movs	r0, r3
 8005076:	46bd      	mov	sp, r7
 8005078:	b004      	add	sp, #16
 800507a:	bd80      	pop	{r7, pc}

0800507c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800507c:	b590      	push	{r4, r7, lr}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005084:	240f      	movs	r4, #15
 8005086:	193b      	adds	r3, r7, r4
 8005088:	2200      	movs	r2, #0
 800508a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800508c:	4b1c      	ldr	r3, [pc, #112]	@ (8005100 <RTC_ExitInitMode+0x84>)
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	4b1b      	ldr	r3, [pc, #108]	@ (8005100 <RTC_ExitInitMode+0x84>)
 8005092:	2180      	movs	r1, #128	@ 0x80
 8005094:	438a      	bics	r2, r1
 8005096:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005098:	4b19      	ldr	r3, [pc, #100]	@ (8005100 <RTC_ExitInitMode+0x84>)
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	2220      	movs	r2, #32
 800509e:	4013      	ands	r3, r2
 80050a0:	d10d      	bne.n	80050be <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	0018      	movs	r0, r3
 80050a6:	f7ff ff81 	bl	8004fac <HAL_RTC_WaitForSynchro>
 80050aa:	1e03      	subs	r3, r0, #0
 80050ac:	d021      	beq.n	80050f2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2229      	movs	r2, #41	@ 0x29
 80050b2:	2103      	movs	r1, #3
 80050b4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80050b6:	193b      	adds	r3, r7, r4
 80050b8:	2203      	movs	r2, #3
 80050ba:	701a      	strb	r2, [r3, #0]
 80050bc:	e019      	b.n	80050f2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80050be:	4b10      	ldr	r3, [pc, #64]	@ (8005100 <RTC_ExitInitMode+0x84>)
 80050c0:	699a      	ldr	r2, [r3, #24]
 80050c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005100 <RTC_ExitInitMode+0x84>)
 80050c4:	2120      	movs	r1, #32
 80050c6:	438a      	bics	r2, r1
 80050c8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	0018      	movs	r0, r3
 80050ce:	f7ff ff6d 	bl	8004fac <HAL_RTC_WaitForSynchro>
 80050d2:	1e03      	subs	r3, r0, #0
 80050d4:	d007      	beq.n	80050e6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2229      	movs	r2, #41	@ 0x29
 80050da:	2103      	movs	r1, #3
 80050dc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80050de:	230f      	movs	r3, #15
 80050e0:	18fb      	adds	r3, r7, r3
 80050e2:	2203      	movs	r2, #3
 80050e4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80050e6:	4b06      	ldr	r3, [pc, #24]	@ (8005100 <RTC_ExitInitMode+0x84>)
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	4b05      	ldr	r3, [pc, #20]	@ (8005100 <RTC_ExitInitMode+0x84>)
 80050ec:	2120      	movs	r1, #32
 80050ee:	430a      	orrs	r2, r1
 80050f0:	619a      	str	r2, [r3, #24]
  }

  return status;
 80050f2:	230f      	movs	r3, #15
 80050f4:	18fb      	adds	r3, r7, r3
 80050f6:	781b      	ldrb	r3, [r3, #0]
}
 80050f8:	0018      	movs	r0, r3
 80050fa:	46bd      	mov	sp, r7
 80050fc:	b005      	add	sp, #20
 80050fe:	bd90      	pop	{r4, r7, pc}
 8005100:	40002800 	.word	0x40002800

08005104 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	0002      	movs	r2, r0
 800510c:	1dfb      	adds	r3, r7, #7
 800510e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005114:	230b      	movs	r3, #11
 8005116:	18fb      	adds	r3, r7, r3
 8005118:	1dfa      	adds	r2, r7, #7
 800511a:	7812      	ldrb	r2, [r2, #0]
 800511c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800511e:	e008      	b.n	8005132 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3301      	adds	r3, #1
 8005124:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005126:	220b      	movs	r2, #11
 8005128:	18bb      	adds	r3, r7, r2
 800512a:	18ba      	adds	r2, r7, r2
 800512c:	7812      	ldrb	r2, [r2, #0]
 800512e:	3a0a      	subs	r2, #10
 8005130:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005132:	210b      	movs	r1, #11
 8005134:	187b      	adds	r3, r7, r1
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b09      	cmp	r3, #9
 800513a:	d8f1      	bhi.n	8005120 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	b2db      	uxtb	r3, r3
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	b2da      	uxtb	r2, r3
 8005144:	187b      	adds	r3, r7, r1
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	4313      	orrs	r3, r2
 800514a:	b2db      	uxtb	r3, r3
}
 800514c:	0018      	movs	r0, r3
 800514e:	46bd      	mov	sp, r7
 8005150:	b004      	add	sp, #16
 8005152:	bd80      	pop	{r7, pc}

08005154 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	0002      	movs	r2, r0
 800515c:	1dfb      	adds	r3, r7, #7
 800515e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005160:	1dfb      	adds	r3, r7, #7
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	b2db      	uxtb	r3, r3
 8005168:	001a      	movs	r2, r3
 800516a:	0013      	movs	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	189b      	adds	r3, r3, r2
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	b2da      	uxtb	r2, r3
 8005178:	1dfb      	adds	r3, r7, #7
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	210f      	movs	r1, #15
 800517e:	400b      	ands	r3, r1
 8005180:	b2db      	uxtb	r3, r3
 8005182:	18d3      	adds	r3, r2, r3
 8005184:	b2db      	uxtb	r3, r3
}
 8005186:	0018      	movs	r0, r3
 8005188:	46bd      	mov	sp, r7
 800518a:	b004      	add	sp, #16
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2228      	movs	r2, #40	@ 0x28
 800519e:	5c9b      	ldrb	r3, [r3, r2]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e035      	b.n	8005214 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2228      	movs	r2, #40	@ 0x28
 80051ac:	2101      	movs	r1, #1
 80051ae:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2229      	movs	r2, #41	@ 0x29
 80051b4:	2102      	movs	r1, #2
 80051b6:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	22ca      	movs	r2, #202	@ 0xca
 80051be:	625a      	str	r2, [r3, #36]	@ 0x24
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2253      	movs	r2, #83	@ 0x53
 80051c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699a      	ldr	r2, [r3, #24]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4912      	ldr	r1, [pc, #72]	@ (800521c <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 80051d4:	400a      	ands	r2, r1
 80051d6:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6999      	ldr	r1, [r3, #24]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2180      	movs	r1, #128	@ 0x80
 80051f4:	0409      	lsls	r1, r1, #16
 80051f6:	430a      	orrs	r2, r1
 80051f8:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	22ff      	movs	r2, #255	@ 0xff
 8005200:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2229      	movs	r2, #41	@ 0x29
 8005206:	2101      	movs	r1, #1
 8005208:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2228      	movs	r2, #40	@ 0x28
 800520e:	2100      	movs	r1, #0
 8005210:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	0018      	movs	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	b002      	add	sp, #8
 800521a:	bd80      	pop	{r7, pc}
 800521c:	fff7ffff 	.word	0xfff7ffff

08005220 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005228:	46c0      	nop			@ (mov r8, r8)
 800522a:	46bd      	mov	sp, r7
 800522c:	b002      	add	sp, #8
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e04a      	b.n	80052d8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	223d      	movs	r2, #61	@ 0x3d
 8005246:	5c9b      	ldrb	r3, [r3, r2]
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d107      	bne.n	800525e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	223c      	movs	r2, #60	@ 0x3c
 8005252:	2100      	movs	r1, #0
 8005254:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	0018      	movs	r0, r3
 800525a:	f7fc fd4d 	bl	8001cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	223d      	movs	r2, #61	@ 0x3d
 8005262:	2102      	movs	r1, #2
 8005264:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3304      	adds	r3, #4
 800526e:	0019      	movs	r1, r3
 8005270:	0010      	movs	r0, r2
 8005272:	f000 fadd 	bl	8005830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2248      	movs	r2, #72	@ 0x48
 800527a:	2101      	movs	r1, #1
 800527c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	223e      	movs	r2, #62	@ 0x3e
 8005282:	2101      	movs	r1, #1
 8005284:	5499      	strb	r1, [r3, r2]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	223f      	movs	r2, #63	@ 0x3f
 800528a:	2101      	movs	r1, #1
 800528c:	5499      	strb	r1, [r3, r2]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2240      	movs	r2, #64	@ 0x40
 8005292:	2101      	movs	r1, #1
 8005294:	5499      	strb	r1, [r3, r2]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2241      	movs	r2, #65	@ 0x41
 800529a:	2101      	movs	r1, #1
 800529c:	5499      	strb	r1, [r3, r2]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2242      	movs	r2, #66	@ 0x42
 80052a2:	2101      	movs	r1, #1
 80052a4:	5499      	strb	r1, [r3, r2]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2243      	movs	r2, #67	@ 0x43
 80052aa:	2101      	movs	r1, #1
 80052ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2244      	movs	r2, #68	@ 0x44
 80052b2:	2101      	movs	r1, #1
 80052b4:	5499      	strb	r1, [r3, r2]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2245      	movs	r2, #69	@ 0x45
 80052ba:	2101      	movs	r1, #1
 80052bc:	5499      	strb	r1, [r3, r2]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2246      	movs	r2, #70	@ 0x46
 80052c2:	2101      	movs	r1, #1
 80052c4:	5499      	strb	r1, [r3, r2]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2247      	movs	r2, #71	@ 0x47
 80052ca:	2101      	movs	r1, #1
 80052cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	223d      	movs	r2, #61	@ 0x3d
 80052d2:	2101      	movs	r1, #1
 80052d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	0018      	movs	r0, r3
 80052da:	46bd      	mov	sp, r7
 80052dc:	b002      	add	sp, #8
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	223d      	movs	r2, #61	@ 0x3d
 80052ec:	5c9b      	ldrb	r3, [r3, r2]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d001      	beq.n	80052f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e035      	b.n	8005364 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	223d      	movs	r2, #61	@ 0x3d
 80052fc:	2102      	movs	r1, #2
 80052fe:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a19      	ldr	r2, [pc, #100]	@ (800536c <HAL_TIM_Base_Start+0x8c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d00a      	beq.n	8005320 <HAL_TIM_Base_Start+0x40>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	2380      	movs	r3, #128	@ 0x80
 8005310:	05db      	lsls	r3, r3, #23
 8005312:	429a      	cmp	r2, r3
 8005314:	d004      	beq.n	8005320 <HAL_TIM_Base_Start+0x40>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a15      	ldr	r2, [pc, #84]	@ (8005370 <HAL_TIM_Base_Start+0x90>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d116      	bne.n	800534e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	4a13      	ldr	r2, [pc, #76]	@ (8005374 <HAL_TIM_Base_Start+0x94>)
 8005328:	4013      	ands	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b06      	cmp	r3, #6
 8005330:	d016      	beq.n	8005360 <HAL_TIM_Base_Start+0x80>
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	2380      	movs	r3, #128	@ 0x80
 8005336:	025b      	lsls	r3, r3, #9
 8005338:	429a      	cmp	r2, r3
 800533a:	d011      	beq.n	8005360 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2101      	movs	r1, #1
 8005348:	430a      	orrs	r2, r1
 800534a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534c:	e008      	b.n	8005360 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2101      	movs	r1, #1
 800535a:	430a      	orrs	r2, r1
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	e000      	b.n	8005362 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005360:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	0018      	movs	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	b004      	add	sp, #16
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40012c00 	.word	0x40012c00
 8005370:	40000400 	.word	0x40000400
 8005374:	00010007 	.word	0x00010007

08005378 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	4a0d      	ldr	r2, [pc, #52]	@ (80053bc <HAL_TIM_Base_Stop+0x44>)
 8005388:	4013      	ands	r3, r2
 800538a:	d10d      	bne.n	80053a8 <HAL_TIM_Base_Stop+0x30>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	4a0b      	ldr	r2, [pc, #44]	@ (80053c0 <HAL_TIM_Base_Stop+0x48>)
 8005394:	4013      	ands	r3, r2
 8005396:	d107      	bne.n	80053a8 <HAL_TIM_Base_Stop+0x30>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2101      	movs	r1, #1
 80053a4:	438a      	bics	r2, r1
 80053a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	223d      	movs	r2, #61	@ 0x3d
 80053ac:	2101      	movs	r1, #1
 80053ae:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	0018      	movs	r0, r3
 80053b4:	46bd      	mov	sp, r7
 80053b6:	b002      	add	sp, #8
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	46c0      	nop			@ (mov r8, r8)
 80053bc:	00001111 	.word	0x00001111
 80053c0:	00000444 	.word	0x00000444

080053c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e04a      	b.n	800546c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	223d      	movs	r2, #61	@ 0x3d
 80053da:	5c9b      	ldrb	r3, [r3, r2]
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d107      	bne.n	80053f2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	223c      	movs	r2, #60	@ 0x3c
 80053e6:	2100      	movs	r1, #0
 80053e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	0018      	movs	r0, r3
 80053ee:	f7fc fc67 	bl	8001cc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	223d      	movs	r2, #61	@ 0x3d
 80053f6:	2102      	movs	r1, #2
 80053f8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3304      	adds	r3, #4
 8005402:	0019      	movs	r1, r3
 8005404:	0010      	movs	r0, r2
 8005406:	f000 fa13 	bl	8005830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2248      	movs	r2, #72	@ 0x48
 800540e:	2101      	movs	r1, #1
 8005410:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	223e      	movs	r2, #62	@ 0x3e
 8005416:	2101      	movs	r1, #1
 8005418:	5499      	strb	r1, [r3, r2]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	223f      	movs	r2, #63	@ 0x3f
 800541e:	2101      	movs	r1, #1
 8005420:	5499      	strb	r1, [r3, r2]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2240      	movs	r2, #64	@ 0x40
 8005426:	2101      	movs	r1, #1
 8005428:	5499      	strb	r1, [r3, r2]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2241      	movs	r2, #65	@ 0x41
 800542e:	2101      	movs	r1, #1
 8005430:	5499      	strb	r1, [r3, r2]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2242      	movs	r2, #66	@ 0x42
 8005436:	2101      	movs	r1, #1
 8005438:	5499      	strb	r1, [r3, r2]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2243      	movs	r2, #67	@ 0x43
 800543e:	2101      	movs	r1, #1
 8005440:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2244      	movs	r2, #68	@ 0x44
 8005446:	2101      	movs	r1, #1
 8005448:	5499      	strb	r1, [r3, r2]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2245      	movs	r2, #69	@ 0x45
 800544e:	2101      	movs	r1, #1
 8005450:	5499      	strb	r1, [r3, r2]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2246      	movs	r2, #70	@ 0x46
 8005456:	2101      	movs	r1, #1
 8005458:	5499      	strb	r1, [r3, r2]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2247      	movs	r2, #71	@ 0x47
 800545e:	2101      	movs	r1, #1
 8005460:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	223d      	movs	r2, #61	@ 0x3d
 8005466:	2101      	movs	r1, #1
 8005468:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	0018      	movs	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	b002      	add	sp, #8
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d108      	bne.n	8005496 <HAL_TIM_PWM_Start+0x22>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	223e      	movs	r2, #62	@ 0x3e
 8005488:	5c9b      	ldrb	r3, [r3, r2]
 800548a:	b2db      	uxtb	r3, r3
 800548c:	3b01      	subs	r3, #1
 800548e:	1e5a      	subs	r2, r3, #1
 8005490:	4193      	sbcs	r3, r2
 8005492:	b2db      	uxtb	r3, r3
 8005494:	e037      	b.n	8005506 <HAL_TIM_PWM_Start+0x92>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b04      	cmp	r3, #4
 800549a:	d108      	bne.n	80054ae <HAL_TIM_PWM_Start+0x3a>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	223f      	movs	r2, #63	@ 0x3f
 80054a0:	5c9b      	ldrb	r3, [r3, r2]
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	1e5a      	subs	r2, r3, #1
 80054a8:	4193      	sbcs	r3, r2
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	e02b      	b.n	8005506 <HAL_TIM_PWM_Start+0x92>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d108      	bne.n	80054c6 <HAL_TIM_PWM_Start+0x52>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2240      	movs	r2, #64	@ 0x40
 80054b8:	5c9b      	ldrb	r3, [r3, r2]
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	1e5a      	subs	r2, r3, #1
 80054c0:	4193      	sbcs	r3, r2
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	e01f      	b.n	8005506 <HAL_TIM_PWM_Start+0x92>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b0c      	cmp	r3, #12
 80054ca:	d108      	bne.n	80054de <HAL_TIM_PWM_Start+0x6a>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2241      	movs	r2, #65	@ 0x41
 80054d0:	5c9b      	ldrb	r3, [r3, r2]
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	3b01      	subs	r3, #1
 80054d6:	1e5a      	subs	r2, r3, #1
 80054d8:	4193      	sbcs	r3, r2
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	e013      	b.n	8005506 <HAL_TIM_PWM_Start+0x92>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b10      	cmp	r3, #16
 80054e2:	d108      	bne.n	80054f6 <HAL_TIM_PWM_Start+0x82>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2242      	movs	r2, #66	@ 0x42
 80054e8:	5c9b      	ldrb	r3, [r3, r2]
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	1e5a      	subs	r2, r3, #1
 80054f0:	4193      	sbcs	r3, r2
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	e007      	b.n	8005506 <HAL_TIM_PWM_Start+0x92>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2243      	movs	r2, #67	@ 0x43
 80054fa:	5c9b      	ldrb	r3, [r3, r2]
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	1e5a      	subs	r2, r3, #1
 8005502:	4193      	sbcs	r3, r2
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e081      	b.n	8005612 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d104      	bne.n	800551e <HAL_TIM_PWM_Start+0xaa>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	223e      	movs	r2, #62	@ 0x3e
 8005518:	2102      	movs	r1, #2
 800551a:	5499      	strb	r1, [r3, r2]
 800551c:	e023      	b.n	8005566 <HAL_TIM_PWM_Start+0xf2>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b04      	cmp	r3, #4
 8005522:	d104      	bne.n	800552e <HAL_TIM_PWM_Start+0xba>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	223f      	movs	r2, #63	@ 0x3f
 8005528:	2102      	movs	r1, #2
 800552a:	5499      	strb	r1, [r3, r2]
 800552c:	e01b      	b.n	8005566 <HAL_TIM_PWM_Start+0xf2>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b08      	cmp	r3, #8
 8005532:	d104      	bne.n	800553e <HAL_TIM_PWM_Start+0xca>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2240      	movs	r2, #64	@ 0x40
 8005538:	2102      	movs	r1, #2
 800553a:	5499      	strb	r1, [r3, r2]
 800553c:	e013      	b.n	8005566 <HAL_TIM_PWM_Start+0xf2>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b0c      	cmp	r3, #12
 8005542:	d104      	bne.n	800554e <HAL_TIM_PWM_Start+0xda>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2241      	movs	r2, #65	@ 0x41
 8005548:	2102      	movs	r1, #2
 800554a:	5499      	strb	r1, [r3, r2]
 800554c:	e00b      	b.n	8005566 <HAL_TIM_PWM_Start+0xf2>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b10      	cmp	r3, #16
 8005552:	d104      	bne.n	800555e <HAL_TIM_PWM_Start+0xea>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2242      	movs	r2, #66	@ 0x42
 8005558:	2102      	movs	r1, #2
 800555a:	5499      	strb	r1, [r3, r2]
 800555c:	e003      	b.n	8005566 <HAL_TIM_PWM_Start+0xf2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2243      	movs	r2, #67	@ 0x43
 8005562:	2102      	movs	r1, #2
 8005564:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6839      	ldr	r1, [r7, #0]
 800556c:	2201      	movs	r2, #1
 800556e:	0018      	movs	r0, r3
 8005570:	f000 fc7e 	bl	8005e70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a28      	ldr	r2, [pc, #160]	@ (800561c <HAL_TIM_PWM_Start+0x1a8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d009      	beq.n	8005592 <HAL_TIM_PWM_Start+0x11e>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a27      	ldr	r2, [pc, #156]	@ (8005620 <HAL_TIM_PWM_Start+0x1ac>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d004      	beq.n	8005592 <HAL_TIM_PWM_Start+0x11e>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a25      	ldr	r2, [pc, #148]	@ (8005624 <HAL_TIM_PWM_Start+0x1b0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d101      	bne.n	8005596 <HAL_TIM_PWM_Start+0x122>
 8005592:	2301      	movs	r3, #1
 8005594:	e000      	b.n	8005598 <HAL_TIM_PWM_Start+0x124>
 8005596:	2300      	movs	r3, #0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d008      	beq.n	80055ae <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2180      	movs	r1, #128	@ 0x80
 80055a8:	0209      	lsls	r1, r1, #8
 80055aa:	430a      	orrs	r2, r1
 80055ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a1a      	ldr	r2, [pc, #104]	@ (800561c <HAL_TIM_PWM_Start+0x1a8>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00a      	beq.n	80055ce <HAL_TIM_PWM_Start+0x15a>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	2380      	movs	r3, #128	@ 0x80
 80055be:	05db      	lsls	r3, r3, #23
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d004      	beq.n	80055ce <HAL_TIM_PWM_Start+0x15a>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a17      	ldr	r2, [pc, #92]	@ (8005628 <HAL_TIM_PWM_Start+0x1b4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d116      	bne.n	80055fc <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	4a15      	ldr	r2, [pc, #84]	@ (800562c <HAL_TIM_PWM_Start+0x1b8>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b06      	cmp	r3, #6
 80055de:	d016      	beq.n	800560e <HAL_TIM_PWM_Start+0x19a>
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	2380      	movs	r3, #128	@ 0x80
 80055e4:	025b      	lsls	r3, r3, #9
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d011      	beq.n	800560e <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2101      	movs	r1, #1
 80055f6:	430a      	orrs	r2, r1
 80055f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fa:	e008      	b.n	800560e <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2101      	movs	r1, #1
 8005608:	430a      	orrs	r2, r1
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	e000      	b.n	8005610 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800560e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	0018      	movs	r0, r3
 8005614:	46bd      	mov	sp, r7
 8005616:	b004      	add	sp, #16
 8005618:	bd80      	pop	{r7, pc}
 800561a:	46c0      	nop			@ (mov r8, r8)
 800561c:	40012c00 	.word	0x40012c00
 8005620:	40014400 	.word	0x40014400
 8005624:	40014800 	.word	0x40014800
 8005628:	40000400 	.word	0x40000400
 800562c:	00010007 	.word	0x00010007

08005630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800563c:	2317      	movs	r3, #23
 800563e:	18fb      	adds	r3, r7, r3
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	223c      	movs	r2, #60	@ 0x3c
 8005648:	5c9b      	ldrb	r3, [r3, r2]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_TIM_PWM_ConfigChannel+0x22>
 800564e:	2302      	movs	r3, #2
 8005650:	e0e5      	b.n	800581e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	223c      	movs	r2, #60	@ 0x3c
 8005656:	2101      	movs	r1, #1
 8005658:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b14      	cmp	r3, #20
 800565e:	d900      	bls.n	8005662 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005660:	e0d1      	b.n	8005806 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	009a      	lsls	r2, r3, #2
 8005666:	4b70      	ldr	r3, [pc, #448]	@ (8005828 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005668:	18d3      	adds	r3, r2, r3
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	0011      	movs	r1, r2
 8005676:	0018      	movs	r0, r3
 8005678:	f000 f95e 	bl	8005938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699a      	ldr	r2, [r3, #24]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2108      	movs	r1, #8
 8005688:	430a      	orrs	r2, r1
 800568a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699a      	ldr	r2, [r3, #24]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2104      	movs	r1, #4
 8005698:	438a      	bics	r2, r1
 800569a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6999      	ldr	r1, [r3, #24]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	619a      	str	r2, [r3, #24]
      break;
 80056ae:	e0af      	b.n	8005810 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	0011      	movs	r1, r2
 80056b8:	0018      	movs	r0, r3
 80056ba:	f000 f9bd 	bl	8005a38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699a      	ldr	r2, [r3, #24]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2180      	movs	r1, #128	@ 0x80
 80056ca:	0109      	lsls	r1, r1, #4
 80056cc:	430a      	orrs	r2, r1
 80056ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4954      	ldr	r1, [pc, #336]	@ (800582c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80056dc:	400a      	ands	r2, r1
 80056de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6999      	ldr	r1, [r3, #24]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	021a      	lsls	r2, r3, #8
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	619a      	str	r2, [r3, #24]
      break;
 80056f4:	e08c      	b.n	8005810 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	0011      	movs	r1, r2
 80056fe:	0018      	movs	r0, r3
 8005700:	f000 fa18 	bl	8005b34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	69da      	ldr	r2, [r3, #28]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2108      	movs	r1, #8
 8005710:	430a      	orrs	r2, r1
 8005712:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	69da      	ldr	r2, [r3, #28]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2104      	movs	r1, #4
 8005720:	438a      	bics	r2, r1
 8005722:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	69d9      	ldr	r1, [r3, #28]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	691a      	ldr	r2, [r3, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	61da      	str	r2, [r3, #28]
      break;
 8005736:	e06b      	b.n	8005810 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	0011      	movs	r1, r2
 8005740:	0018      	movs	r0, r3
 8005742:	f000 fa79 	bl	8005c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2180      	movs	r1, #128	@ 0x80
 8005752:	0109      	lsls	r1, r1, #4
 8005754:	430a      	orrs	r2, r1
 8005756:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69da      	ldr	r2, [r3, #28]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4932      	ldr	r1, [pc, #200]	@ (800582c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005764:	400a      	ands	r2, r1
 8005766:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	69d9      	ldr	r1, [r3, #28]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	021a      	lsls	r2, r3, #8
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	61da      	str	r2, [r3, #28]
      break;
 800577c:	e048      	b.n	8005810 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	0011      	movs	r1, r2
 8005786:	0018      	movs	r0, r3
 8005788:	f000 faba 	bl	8005d00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2108      	movs	r1, #8
 8005798:	430a      	orrs	r2, r1
 800579a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2104      	movs	r1, #4
 80057a8:	438a      	bics	r2, r1
 80057aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	691a      	ldr	r2, [r3, #16]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80057be:	e027      	b.n	8005810 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	0011      	movs	r1, r2
 80057c8:	0018      	movs	r0, r3
 80057ca:	f000 faf3 	bl	8005db4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2180      	movs	r1, #128	@ 0x80
 80057da:	0109      	lsls	r1, r1, #4
 80057dc:	430a      	orrs	r2, r1
 80057de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4910      	ldr	r1, [pc, #64]	@ (800582c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80057ec:	400a      	ands	r2, r1
 80057ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	021a      	lsls	r2, r3, #8
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005804:	e004      	b.n	8005810 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005806:	2317      	movs	r3, #23
 8005808:	18fb      	adds	r3, r7, r3
 800580a:	2201      	movs	r2, #1
 800580c:	701a      	strb	r2, [r3, #0]
      break;
 800580e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	223c      	movs	r2, #60	@ 0x3c
 8005814:	2100      	movs	r1, #0
 8005816:	5499      	strb	r1, [r3, r2]

  return status;
 8005818:	2317      	movs	r3, #23
 800581a:	18fb      	adds	r3, r7, r3
 800581c:	781b      	ldrb	r3, [r3, #0]
}
 800581e:	0018      	movs	r0, r3
 8005820:	46bd      	mov	sp, r7
 8005822:	b006      	add	sp, #24
 8005824:	bd80      	pop	{r7, pc}
 8005826:	46c0      	nop			@ (mov r8, r8)
 8005828:	08006080 	.word	0x08006080
 800582c:	fffffbff 	.word	0xfffffbff

08005830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a37      	ldr	r2, [pc, #220]	@ (8005920 <TIM_Base_SetConfig+0xf0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d008      	beq.n	800585a <TIM_Base_SetConfig+0x2a>
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	2380      	movs	r3, #128	@ 0x80
 800584c:	05db      	lsls	r3, r3, #23
 800584e:	429a      	cmp	r2, r3
 8005850:	d003      	beq.n	800585a <TIM_Base_SetConfig+0x2a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a33      	ldr	r2, [pc, #204]	@ (8005924 <TIM_Base_SetConfig+0xf4>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d108      	bne.n	800586c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2270      	movs	r2, #112	@ 0x70
 800585e:	4393      	bics	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4313      	orrs	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a2c      	ldr	r2, [pc, #176]	@ (8005920 <TIM_Base_SetConfig+0xf0>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d014      	beq.n	800589e <TIM_Base_SetConfig+0x6e>
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	2380      	movs	r3, #128	@ 0x80
 8005878:	05db      	lsls	r3, r3, #23
 800587a:	429a      	cmp	r2, r3
 800587c:	d00f      	beq.n	800589e <TIM_Base_SetConfig+0x6e>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a28      	ldr	r2, [pc, #160]	@ (8005924 <TIM_Base_SetConfig+0xf4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00b      	beq.n	800589e <TIM_Base_SetConfig+0x6e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a27      	ldr	r2, [pc, #156]	@ (8005928 <TIM_Base_SetConfig+0xf8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d007      	beq.n	800589e <TIM_Base_SetConfig+0x6e>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a26      	ldr	r2, [pc, #152]	@ (800592c <TIM_Base_SetConfig+0xfc>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d003      	beq.n	800589e <TIM_Base_SetConfig+0x6e>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a25      	ldr	r2, [pc, #148]	@ (8005930 <TIM_Base_SetConfig+0x100>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d108      	bne.n	80058b0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4a24      	ldr	r2, [pc, #144]	@ (8005934 <TIM_Base_SetConfig+0x104>)
 80058a2:	4013      	ands	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2280      	movs	r2, #128	@ 0x80
 80058b4:	4393      	bics	r3, r2
 80058b6:	001a      	movs	r2, r3
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a11      	ldr	r2, [pc, #68]	@ (8005920 <TIM_Base_SetConfig+0xf0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d007      	beq.n	80058ee <TIM_Base_SetConfig+0xbe>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a12      	ldr	r2, [pc, #72]	@ (800592c <TIM_Base_SetConfig+0xfc>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d003      	beq.n	80058ee <TIM_Base_SetConfig+0xbe>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a11      	ldr	r2, [pc, #68]	@ (8005930 <TIM_Base_SetConfig+0x100>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d103      	bne.n	80058f6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	691a      	ldr	r2, [r3, #16]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	2201      	movs	r2, #1
 8005902:	4013      	ands	r3, r2
 8005904:	2b01      	cmp	r3, #1
 8005906:	d106      	bne.n	8005916 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	2201      	movs	r2, #1
 800590e:	4393      	bics	r3, r2
 8005910:	001a      	movs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	611a      	str	r2, [r3, #16]
  }
}
 8005916:	46c0      	nop			@ (mov r8, r8)
 8005918:	46bd      	mov	sp, r7
 800591a:	b004      	add	sp, #16
 800591c:	bd80      	pop	{r7, pc}
 800591e:	46c0      	nop			@ (mov r8, r8)
 8005920:	40012c00 	.word	0x40012c00
 8005924:	40000400 	.word	0x40000400
 8005928:	40002000 	.word	0x40002000
 800592c:	40014400 	.word	0x40014400
 8005930:	40014800 	.word	0x40014800
 8005934:	fffffcff 	.word	0xfffffcff

08005938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	2201      	movs	r2, #1
 800594e:	4393      	bics	r3, r2
 8005950:	001a      	movs	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4a2e      	ldr	r2, [pc, #184]	@ (8005a20 <TIM_OC1_SetConfig+0xe8>)
 8005966:	4013      	ands	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2203      	movs	r2, #3
 800596e:	4393      	bics	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2202      	movs	r2, #2
 8005980:	4393      	bics	r3, r2
 8005982:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a24      	ldr	r2, [pc, #144]	@ (8005a24 <TIM_OC1_SetConfig+0xec>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d007      	beq.n	80059a6 <TIM_OC1_SetConfig+0x6e>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a23      	ldr	r2, [pc, #140]	@ (8005a28 <TIM_OC1_SetConfig+0xf0>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d003      	beq.n	80059a6 <TIM_OC1_SetConfig+0x6e>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a22      	ldr	r2, [pc, #136]	@ (8005a2c <TIM_OC1_SetConfig+0xf4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d10c      	bne.n	80059c0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2208      	movs	r2, #8
 80059aa:	4393      	bics	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	2204      	movs	r2, #4
 80059bc:	4393      	bics	r3, r2
 80059be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a18      	ldr	r2, [pc, #96]	@ (8005a24 <TIM_OC1_SetConfig+0xec>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d007      	beq.n	80059d8 <TIM_OC1_SetConfig+0xa0>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a17      	ldr	r2, [pc, #92]	@ (8005a28 <TIM_OC1_SetConfig+0xf0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_OC1_SetConfig+0xa0>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a16      	ldr	r2, [pc, #88]	@ (8005a2c <TIM_OC1_SetConfig+0xf4>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d111      	bne.n	80059fc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	4a15      	ldr	r2, [pc, #84]	@ (8005a30 <TIM_OC1_SetConfig+0xf8>)
 80059dc:	4013      	ands	r3, r2
 80059de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4a14      	ldr	r2, [pc, #80]	@ (8005a34 <TIM_OC1_SetConfig+0xfc>)
 80059e4:	4013      	ands	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	621a      	str	r2, [r3, #32]
}
 8005a16:	46c0      	nop			@ (mov r8, r8)
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	b006      	add	sp, #24
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	46c0      	nop			@ (mov r8, r8)
 8005a20:	fffeff8f 	.word	0xfffeff8f
 8005a24:	40012c00 	.word	0x40012c00
 8005a28:	40014400 	.word	0x40014400
 8005a2c:	40014800 	.word	0x40014800
 8005a30:	fffffeff 	.word	0xfffffeff
 8005a34:	fffffdff 	.word	0xfffffdff

08005a38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	2210      	movs	r2, #16
 8005a4e:	4393      	bics	r3, r2
 8005a50:	001a      	movs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4a2c      	ldr	r2, [pc, #176]	@ (8005b18 <TIM_OC2_SetConfig+0xe0>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4a2b      	ldr	r2, [pc, #172]	@ (8005b1c <TIM_OC2_SetConfig+0xe4>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	021b      	lsls	r3, r3, #8
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2220      	movs	r2, #32
 8005a82:	4393      	bics	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	011b      	lsls	r3, r3, #4
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a22      	ldr	r2, [pc, #136]	@ (8005b20 <TIM_OC2_SetConfig+0xe8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d10d      	bne.n	8005ab6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2280      	movs	r2, #128	@ 0x80
 8005a9e:	4393      	bics	r3, r2
 8005aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2240      	movs	r2, #64	@ 0x40
 8005ab2:	4393      	bics	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a19      	ldr	r2, [pc, #100]	@ (8005b20 <TIM_OC2_SetConfig+0xe8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d007      	beq.n	8005ace <TIM_OC2_SetConfig+0x96>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a18      	ldr	r2, [pc, #96]	@ (8005b24 <TIM_OC2_SetConfig+0xec>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d003      	beq.n	8005ace <TIM_OC2_SetConfig+0x96>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a17      	ldr	r2, [pc, #92]	@ (8005b28 <TIM_OC2_SetConfig+0xf0>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d113      	bne.n	8005af6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4a16      	ldr	r2, [pc, #88]	@ (8005b2c <TIM_OC2_SetConfig+0xf4>)
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	4a15      	ldr	r2, [pc, #84]	@ (8005b30 <TIM_OC2_SetConfig+0xf8>)
 8005ada:	4013      	ands	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	621a      	str	r2, [r3, #32]
}
 8005b10:	46c0      	nop			@ (mov r8, r8)
 8005b12:	46bd      	mov	sp, r7
 8005b14:	b006      	add	sp, #24
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	feff8fff 	.word	0xfeff8fff
 8005b1c:	fffffcff 	.word	0xfffffcff
 8005b20:	40012c00 	.word	0x40012c00
 8005b24:	40014400 	.word	0x40014400
 8005b28:	40014800 	.word	0x40014800
 8005b2c:	fffffbff 	.word	0xfffffbff
 8005b30:	fffff7ff 	.word	0xfffff7ff

08005b34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	4a31      	ldr	r2, [pc, #196]	@ (8005c10 <TIM_OC3_SetConfig+0xdc>)
 8005b4a:	401a      	ands	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8005c14 <TIM_OC3_SetConfig+0xe0>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2203      	movs	r2, #3
 8005b68:	4393      	bics	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	4a27      	ldr	r2, [pc, #156]	@ (8005c18 <TIM_OC3_SetConfig+0xe4>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	021b      	lsls	r3, r3, #8
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a23      	ldr	r2, [pc, #140]	@ (8005c1c <TIM_OC3_SetConfig+0xe8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d10d      	bne.n	8005bae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	4a22      	ldr	r2, [pc, #136]	@ (8005c20 <TIM_OC3_SetConfig+0xec>)
 8005b96:	4013      	ands	r3, r2
 8005b98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	021b      	lsls	r3, r3, #8
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8005c24 <TIM_OC3_SetConfig+0xf0>)
 8005baa:	4013      	ands	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a1a      	ldr	r2, [pc, #104]	@ (8005c1c <TIM_OC3_SetConfig+0xe8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d007      	beq.n	8005bc6 <TIM_OC3_SetConfig+0x92>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c28 <TIM_OC3_SetConfig+0xf4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d003      	beq.n	8005bc6 <TIM_OC3_SetConfig+0x92>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8005c2c <TIM_OC3_SetConfig+0xf8>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d113      	bne.n	8005bee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	4a19      	ldr	r2, [pc, #100]	@ (8005c30 <TIM_OC3_SetConfig+0xfc>)
 8005bca:	4013      	ands	r3, r2
 8005bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	4a18      	ldr	r2, [pc, #96]	@ (8005c34 <TIM_OC3_SetConfig+0x100>)
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	621a      	str	r2, [r3, #32]
}
 8005c08:	46c0      	nop			@ (mov r8, r8)
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	b006      	add	sp, #24
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	fffffeff 	.word	0xfffffeff
 8005c14:	fffeff8f 	.word	0xfffeff8f
 8005c18:	fffffdff 	.word	0xfffffdff
 8005c1c:	40012c00 	.word	0x40012c00
 8005c20:	fffff7ff 	.word	0xfffff7ff
 8005c24:	fffffbff 	.word	0xfffffbff
 8005c28:	40014400 	.word	0x40014400
 8005c2c:	40014800 	.word	0x40014800
 8005c30:	ffffefff 	.word	0xffffefff
 8005c34:	ffffdfff 	.word	0xffffdfff

08005c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	4a24      	ldr	r2, [pc, #144]	@ (8005ce0 <TIM_OC4_SetConfig+0xa8>)
 8005c4e:	401a      	ands	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4a20      	ldr	r2, [pc, #128]	@ (8005ce4 <TIM_OC4_SetConfig+0xac>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ce8 <TIM_OC4_SetConfig+0xb0>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	021b      	lsls	r3, r3, #8
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8005cec <TIM_OC4_SetConfig+0xb4>)
 8005c80:	4013      	ands	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	031b      	lsls	r3, r3, #12
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a17      	ldr	r2, [pc, #92]	@ (8005cf0 <TIM_OC4_SetConfig+0xb8>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d007      	beq.n	8005ca8 <TIM_OC4_SetConfig+0x70>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a16      	ldr	r2, [pc, #88]	@ (8005cf4 <TIM_OC4_SetConfig+0xbc>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d003      	beq.n	8005ca8 <TIM_OC4_SetConfig+0x70>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a15      	ldr	r2, [pc, #84]	@ (8005cf8 <TIM_OC4_SetConfig+0xc0>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d109      	bne.n	8005cbc <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	4a14      	ldr	r2, [pc, #80]	@ (8005cfc <TIM_OC4_SetConfig+0xc4>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	019b      	lsls	r3, r3, #6
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	621a      	str	r2, [r3, #32]
}
 8005cd6:	46c0      	nop			@ (mov r8, r8)
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	b006      	add	sp, #24
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	46c0      	nop			@ (mov r8, r8)
 8005ce0:	ffffefff 	.word	0xffffefff
 8005ce4:	feff8fff 	.word	0xfeff8fff
 8005ce8:	fffffcff 	.word	0xfffffcff
 8005cec:	ffffdfff 	.word	0xffffdfff
 8005cf0:	40012c00 	.word	0x40012c00
 8005cf4:	40014400 	.word	0x40014400
 8005cf8:	40014800 	.word	0x40014800
 8005cfc:	ffffbfff 	.word	0xffffbfff

08005d00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	4a21      	ldr	r2, [pc, #132]	@ (8005d9c <TIM_OC5_SetConfig+0x9c>)
 8005d16:	401a      	ands	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8005da0 <TIM_OC5_SetConfig+0xa0>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	4a19      	ldr	r2, [pc, #100]	@ (8005da4 <TIM_OC5_SetConfig+0xa4>)
 8005d3e:	4013      	ands	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	041b      	lsls	r3, r3, #16
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a15      	ldr	r2, [pc, #84]	@ (8005da8 <TIM_OC5_SetConfig+0xa8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d007      	beq.n	8005d66 <TIM_OC5_SetConfig+0x66>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a14      	ldr	r2, [pc, #80]	@ (8005dac <TIM_OC5_SetConfig+0xac>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d003      	beq.n	8005d66 <TIM_OC5_SetConfig+0x66>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a13      	ldr	r2, [pc, #76]	@ (8005db0 <TIM_OC5_SetConfig+0xb0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d109      	bne.n	8005d7a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	4a0c      	ldr	r2, [pc, #48]	@ (8005d9c <TIM_OC5_SetConfig+0x9c>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	621a      	str	r2, [r3, #32]
}
 8005d94:	46c0      	nop			@ (mov r8, r8)
 8005d96:	46bd      	mov	sp, r7
 8005d98:	b006      	add	sp, #24
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	fffeffff 	.word	0xfffeffff
 8005da0:	fffeff8f 	.word	0xfffeff8f
 8005da4:	fffdffff 	.word	0xfffdffff
 8005da8:	40012c00 	.word	0x40012c00
 8005dac:	40014400 	.word	0x40014400
 8005db0:	40014800 	.word	0x40014800

08005db4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	4a22      	ldr	r2, [pc, #136]	@ (8005e54 <TIM_OC6_SetConfig+0xa0>)
 8005dca:	401a      	ands	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4a1e      	ldr	r2, [pc, #120]	@ (8005e58 <TIM_OC6_SetConfig+0xa4>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	4a1a      	ldr	r2, [pc, #104]	@ (8005e5c <TIM_OC6_SetConfig+0xa8>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	051b      	lsls	r3, r3, #20
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a16      	ldr	r2, [pc, #88]	@ (8005e60 <TIM_OC6_SetConfig+0xac>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d007      	beq.n	8005e1c <TIM_OC6_SetConfig+0x68>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a15      	ldr	r2, [pc, #84]	@ (8005e64 <TIM_OC6_SetConfig+0xb0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_OC6_SetConfig+0x68>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a14      	ldr	r2, [pc, #80]	@ (8005e68 <TIM_OC6_SetConfig+0xb4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d109      	bne.n	8005e30 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	4a13      	ldr	r2, [pc, #76]	@ (8005e6c <TIM_OC6_SetConfig+0xb8>)
 8005e20:	4013      	ands	r3, r2
 8005e22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	029b      	lsls	r3, r3, #10
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	46c0      	nop			@ (mov r8, r8)
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	b006      	add	sp, #24
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	46c0      	nop			@ (mov r8, r8)
 8005e54:	ffefffff 	.word	0xffefffff
 8005e58:	feff8fff 	.word	0xfeff8fff
 8005e5c:	ffdfffff 	.word	0xffdfffff
 8005e60:	40012c00 	.word	0x40012c00
 8005e64:	40014400 	.word	0x40014400
 8005e68:	40014800 	.word	0x40014800
 8005e6c:	fffbffff 	.word	0xfffbffff

08005e70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	221f      	movs	r2, #31
 8005e80:	4013      	ands	r3, r2
 8005e82:	2201      	movs	r2, #1
 8005e84:	409a      	lsls	r2, r3
 8005e86:	0013      	movs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	43d2      	mvns	r2, r2
 8005e92:	401a      	ands	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6a1a      	ldr	r2, [r3, #32]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	211f      	movs	r1, #31
 8005ea0:	400b      	ands	r3, r1
 8005ea2:	6879      	ldr	r1, [r7, #4]
 8005ea4:	4099      	lsls	r1, r3
 8005ea6:	000b      	movs	r3, r1
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	621a      	str	r2, [r3, #32]
}
 8005eae:	46c0      	nop			@ (mov r8, r8)
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	b006      	add	sp, #24
 8005eb4:	bd80      	pop	{r7, pc}
	...

08005eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	223c      	movs	r2, #60	@ 0x3c
 8005ec6:	5c9b      	ldrb	r3, [r3, r2]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e050      	b.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	223c      	movs	r2, #60	@ 0x3c
 8005ed4:	2101      	movs	r1, #1
 8005ed6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	223d      	movs	r2, #61	@ 0x3d
 8005edc:	2102      	movs	r1, #2
 8005ede:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a21      	ldr	r2, [pc, #132]	@ (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d108      	bne.n	8005f0c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	4a20      	ldr	r2, [pc, #128]	@ (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005efe:	4013      	ands	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2270      	movs	r2, #112	@ 0x70
 8005f10:	4393      	bics	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a14      	ldr	r2, [pc, #80]	@ (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d00a      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	2380      	movs	r3, #128	@ 0x80
 8005f36:	05db      	lsls	r3, r3, #23
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d004      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a10      	ldr	r2, [pc, #64]	@ (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d10c      	bne.n	8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2280      	movs	r2, #128	@ 0x80
 8005f4a:	4393      	bics	r3, r2
 8005f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	223d      	movs	r2, #61	@ 0x3d
 8005f64:	2101      	movs	r1, #1
 8005f66:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	223c      	movs	r2, #60	@ 0x3c
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	0018      	movs	r0, r3
 8005f74:	46bd      	mov	sp, r7
 8005f76:	b004      	add	sp, #16
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	46c0      	nop			@ (mov r8, r8)
 8005f7c:	40012c00 	.word	0x40012c00
 8005f80:	ff0fffff 	.word	0xff0fffff
 8005f84:	40000400 	.word	0x40000400

08005f88 <memset>:
 8005f88:	0003      	movs	r3, r0
 8005f8a:	1882      	adds	r2, r0, r2
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d100      	bne.n	8005f92 <memset+0xa>
 8005f90:	4770      	bx	lr
 8005f92:	7019      	strb	r1, [r3, #0]
 8005f94:	3301      	adds	r3, #1
 8005f96:	e7f9      	b.n	8005f8c <memset+0x4>

08005f98 <__libc_init_array>:
 8005f98:	b570      	push	{r4, r5, r6, lr}
 8005f9a:	2600      	movs	r6, #0
 8005f9c:	4c0c      	ldr	r4, [pc, #48]	@ (8005fd0 <__libc_init_array+0x38>)
 8005f9e:	4d0d      	ldr	r5, [pc, #52]	@ (8005fd4 <__libc_init_array+0x3c>)
 8005fa0:	1b64      	subs	r4, r4, r5
 8005fa2:	10a4      	asrs	r4, r4, #2
 8005fa4:	42a6      	cmp	r6, r4
 8005fa6:	d109      	bne.n	8005fbc <__libc_init_array+0x24>
 8005fa8:	2600      	movs	r6, #0
 8005faa:	f000 f819 	bl	8005fe0 <_init>
 8005fae:	4c0a      	ldr	r4, [pc, #40]	@ (8005fd8 <__libc_init_array+0x40>)
 8005fb0:	4d0a      	ldr	r5, [pc, #40]	@ (8005fdc <__libc_init_array+0x44>)
 8005fb2:	1b64      	subs	r4, r4, r5
 8005fb4:	10a4      	asrs	r4, r4, #2
 8005fb6:	42a6      	cmp	r6, r4
 8005fb8:	d105      	bne.n	8005fc6 <__libc_init_array+0x2e>
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
 8005fbc:	00b3      	lsls	r3, r6, #2
 8005fbe:	58eb      	ldr	r3, [r5, r3]
 8005fc0:	4798      	blx	r3
 8005fc2:	3601      	adds	r6, #1
 8005fc4:	e7ee      	b.n	8005fa4 <__libc_init_array+0xc>
 8005fc6:	00b3      	lsls	r3, r6, #2
 8005fc8:	58eb      	ldr	r3, [r5, r3]
 8005fca:	4798      	blx	r3
 8005fcc:	3601      	adds	r6, #1
 8005fce:	e7f2      	b.n	8005fb6 <__libc_init_array+0x1e>
 8005fd0:	080060d4 	.word	0x080060d4
 8005fd4:	080060d4 	.word	0x080060d4
 8005fd8:	080060d8 	.word	0x080060d8
 8005fdc:	080060d4 	.word	0x080060d4

08005fe0 <_init>:
 8005fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe2:	46c0      	nop			@ (mov r8, r8)
 8005fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe6:	bc08      	pop	{r3}
 8005fe8:	469e      	mov	lr, r3
 8005fea:	4770      	bx	lr

08005fec <_fini>:
 8005fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fee:	46c0      	nop			@ (mov r8, r8)
 8005ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff2:	bc08      	pop	{r3}
 8005ff4:	469e      	mov	lr, r3
 8005ff6:	4770      	bx	lr
