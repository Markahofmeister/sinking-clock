
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005df4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005eb0  08005eb0  00006eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f7c  08005f7c  00007054  2**0
                  CONTENTS
  4 .ARM          00000000  08005f7c  08005f7c  00007054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f7c  08005f7c  00007054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f7c  08005f7c  00006f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f80  08005f80  00006f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08005f84  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000054  08005fd8  00007054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08005fd8  0000722c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b27  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da3  00000000  00000000  0001aba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  0001d948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8c  00000000  00000000  0001ed48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194f1  00000000  00000000  0001fcd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183b4  00000000  00000000  000391c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2035  00000000  00000000  00051579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f35ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c4  00000000  00000000  000f35f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000f7eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000054 	.word	0x20000054
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005e98 	.word	0x08005e98

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000058 	.word	0x20000058
 8000100:	08005e98 	.word	0x08005e98

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:
 */

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, uint8_t keyEnFlags) {
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	b087      	sub	sp, #28
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	2517      	movs	r5, #23
 800022c:	197b      	adds	r3, r7, r5
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	// Verify device ID
	uint8_t deviceIDRet = 0x00;
 8000238:	2616      	movs	r6, #22
 800023a:	19bb      	adds	r3, r7, r6
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]
	halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 8000240:	197c      	adds	r4, r7, r5
 8000242:	19ba      	adds	r2, r7, r6
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	0011      	movs	r1, r2
 8000248:	0018      	movs	r0, r3
 800024a:	f000 f855 	bl	80002f8 <capTouch_ReadDeviceID>
 800024e:	0003      	movs	r3, r0
 8000250:	7023      	strb	r3, [r4, #0]

	if(deviceIDRet != DEVICE_ID || halRet != HAL_OK) {
 8000252:	19bb      	adds	r3, r7, r6
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b2e      	cmp	r3, #46	@ 0x2e
 8000258:	d103      	bne.n	8000262 <capTouch_Init+0x46>
 800025a:	197b      	adds	r3, r7, r5
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <capTouch_Init+0x4a>
		return 1;
 8000262:	2301      	movs	r3, #1
 8000264:	e043      	b.n	80002ee <capTouch_Init+0xd2>
	}

	capTouch->deviceID = deviceIDRet;
 8000266:	2316      	movs	r3, #22
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	781a      	ldrb	r2, [r3, #0]
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	711a      	strb	r2, [r3, #4]

	// Force Device Recalibration
	halRet = capTouch_Recalibrate(capTouch);
 8000270:	2517      	movs	r5, #23
 8000272:	197c      	adds	r4, r7, r5
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	0018      	movs	r0, r3
 8000278:	f000 f876 	bl	8000368 <capTouch_Recalibrate>
 800027c:	0003      	movs	r3, r0
 800027e:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000280:	197b      	adds	r3, r7, r5
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <capTouch_Init+0x70>
		return 2;
 8000288:	2302      	movs	r3, #2
 800028a:	e030      	b.n	80002ee <capTouch_Init+0xd2>
	}

	// Wait until calibration sequence completes
	while(capTouch_checkCal(capTouch)) {}
 800028c:	46c0      	nop			@ (mov r8, r8)
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	0018      	movs	r0, r3
 8000292:	f000 f88b 	bl	80003ac <capTouch_checkCal>
 8000296:	1e03      	subs	r3, r0, #0
 8000298:	d1f9      	bne.n	800028e <capTouch_Init+0x72>

	// Get initial reading of channels
	uint8_t keyStatus = 0x00;
 800029a:	2115      	movs	r1, #21
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2200      	movs	r2, #0
 80002a0:	701a      	strb	r2, [r3, #0]
	halRet = capTouch_readChannels(capTouch, &keyStatus);
 80002a2:	2517      	movs	r5, #23
 80002a4:	197c      	adds	r4, r7, r5
 80002a6:	187a      	adds	r2, r7, r1
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	0011      	movs	r1, r2
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 f8b9 	bl	8000424 <capTouch_readChannels>
 80002b2:	0003      	movs	r3, r0
 80002b4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 80002b6:	197b      	adds	r3, r7, r5
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <capTouch_Init+0xa6>
		return 3;
 80002be:	2303      	movs	r3, #3
 80002c0:	e015      	b.n	80002ee <capTouch_Init+0xd2>
	}

	halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80002c2:	2517      	movs	r5, #23
 80002c4:	197c      	adds	r4, r7, r5
 80002c6:	1dfb      	adds	r3, r7, #7
 80002c8:	781a      	ldrb	r2, [r3, #0]
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	0011      	movs	r1, r2
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 f8e0 	bl	8000494 <capTouch_enableKeys>
 80002d4:	0003      	movs	r3, r0
 80002d6:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 80002d8:	197b      	adds	r3, r7, r5
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <capTouch_Init+0xc8>
		return 4;
 80002e0:	2304      	movs	r3, #4
 80002e2:	e004      	b.n	80002ee <capTouch_Init+0xd2>
	}
	capTouch->keys = keyEnFlags;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	1dfa      	adds	r2, r7, #7
 80002e8:	7812      	ldrb	r2, [r2, #0]
 80002ea:	715a      	strb	r2, [r3, #5]

	return 0;
 80002ec:	2300      	movs	r3, #0

}
 80002ee:	0018      	movs	r0, r3
 80002f0:	46bd      	mov	sp, r7
 80002f2:	b007      	add	sp, #28
 80002f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080002f8 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	b087      	sub	sp, #28
 80002fc:	af02      	add	r7, sp, #8
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 8000302:	260e      	movs	r6, #14
 8000304:	19bb      	adds	r3, r7, r6
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800030a:	250f      	movs	r5, #15
 800030c:	197b      	adds	r3, r7, r5
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 8000312:	210c      	movs	r1, #12
 8000314:	187b      	adds	r3, r7, r1
 8000316:	4a13      	ldr	r2, [pc, #76]	@ (8000364 <capTouch_ReadDeviceID+0x6c>)
 8000318:	7812      	ldrb	r2, [r2, #0]
 800031a:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	6818      	ldr	r0, [r3, #0]
 8000320:	197c      	adds	r4, r7, r5
 8000322:	187a      	adds	r2, r7, r1
 8000324:	2301      	movs	r3, #1
 8000326:	425b      	negs	r3, r3
 8000328:	9300      	str	r3, [sp, #0]
 800032a:	2301      	movs	r3, #1
 800032c:	2136      	movs	r1, #54	@ 0x36
 800032e:	f002 fd8b 	bl	8002e48 <HAL_I2C_Master_Transmit>
 8000332:	0003      	movs	r3, r0
 8000334:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	6818      	ldr	r0, [r3, #0]
 800033a:	197c      	adds	r4, r7, r5
 800033c:	19ba      	adds	r2, r7, r6
 800033e:	2301      	movs	r3, #1
 8000340:	425b      	negs	r3, r3
 8000342:	9300      	str	r3, [sp, #0]
 8000344:	2301      	movs	r3, #1
 8000346:	2136      	movs	r1, #54	@ 0x36
 8000348:	f002 fea8 	bl	800309c <HAL_I2C_Master_Receive>
 800034c:	0003      	movs	r3, r0
 800034e:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 8000350:	19bb      	adds	r3, r7, r6
 8000352:	781a      	ldrb	r2, [r3, #0]
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000358:	197b      	adds	r3, r7, r5
 800035a:	781b      	ldrb	r3, [r3, #0]

}
 800035c:	0018      	movs	r0, r3
 800035e:	46bd      	mov	sp, r7
 8000360:	b005      	add	sp, #20
 8000362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000364:	08005eb0 	.word	0x08005eb0

08000368 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 8000368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036a:	b087      	sub	sp, #28
 800036c:	af02      	add	r7, sp, #8
 800036e:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000370:	210f      	movs	r1, #15
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2200      	movs	r2, #0
 8000376:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 8000378:	260c      	movs	r6, #12
 800037a:	19bb      	adds	r3, r7, r6
 800037c:	22c8      	movs	r2, #200	@ 0xc8
 800037e:	4252      	negs	r2, r2
 8000380:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	6818      	ldr	r0, [r3, #0]
 8000386:	000d      	movs	r5, r1
 8000388:	187c      	adds	r4, r7, r1
 800038a:	19ba      	adds	r2, r7, r6
 800038c:	2301      	movs	r3, #1
 800038e:	425b      	negs	r3, r3
 8000390:	9300      	str	r3, [sp, #0]
 8000392:	2302      	movs	r3, #2
 8000394:	2136      	movs	r1, #54	@ 0x36
 8000396:	f002 fd57 	bl	8002e48 <HAL_I2C_Master_Transmit>
 800039a:	0003      	movs	r3, r0
 800039c:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 800039e:	197b      	adds	r3, r7, r5
 80003a0:	781b      	ldrb	r3, [r3, #0]

}
 80003a2:	0018      	movs	r0, r3
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b005      	add	sp, #20
 80003a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080003ac <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80003ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ae:	b087      	sub	sp, #28
 80003b0:	af02      	add	r7, sp, #8
 80003b2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80003b4:	210f      	movs	r1, #15
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80003bc:	260d      	movs	r6, #13
 80003be:	19bb      	adds	r3, r7, r6
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 80003c4:	230c      	movs	r3, #12
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	4a15      	ldr	r2, [pc, #84]	@ (8000420 <capTouch_checkCal+0x74>)
 80003ca:	7812      	ldrb	r2, [r2, #0]
 80003cc:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	6818      	ldr	r0, [r3, #0]
 80003d2:	000d      	movs	r5, r1
 80003d4:	187c      	adds	r4, r7, r1
 80003d6:	230c      	movs	r3, #12
 80003d8:	18fa      	adds	r2, r7, r3
 80003da:	2301      	movs	r3, #1
 80003dc:	425b      	negs	r3, r3
 80003de:	9300      	str	r3, [sp, #0]
 80003e0:	2301      	movs	r3, #1
 80003e2:	2136      	movs	r1, #54	@ 0x36
 80003e4:	f002 fd30 	bl	8002e48 <HAL_I2C_Master_Transmit>
 80003e8:	0003      	movs	r3, r0
 80003ea:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	6818      	ldr	r0, [r3, #0]
 80003f0:	197c      	adds	r4, r7, r5
 80003f2:	19ba      	adds	r2, r7, r6
 80003f4:	2301      	movs	r3, #1
 80003f6:	425b      	negs	r3, r3
 80003f8:	9300      	str	r3, [sp, #0]
 80003fa:	2301      	movs	r3, #1
 80003fc:	2136      	movs	r1, #54	@ 0x36
 80003fe:	f002 fe4d 	bl	800309c <HAL_I2C_Master_Receive>
 8000402:	0003      	movs	r3, r0
 8000404:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000406:	19bb      	adds	r3, r7, r6
 8000408:	781a      	ldrb	r2, [r3, #0]
 800040a:	210e      	movs	r1, #14
 800040c:	187b      	adds	r3, r7, r1
 800040e:	09d2      	lsrs	r2, r2, #7
 8000410:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000412:	187b      	adds	r3, r7, r1
 8000414:	781b      	ldrb	r3, [r3, #0]

}
 8000416:	0018      	movs	r0, r3
 8000418:	46bd      	mov	sp, r7
 800041a:	b005      	add	sp, #20
 800041c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	08005eb4 	.word	0x08005eb4

08000424 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800042e:	250f      	movs	r5, #15
 8000430:	197b      	adds	r3, r7, r5
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000436:	260e      	movs	r6, #14
 8000438:	19bb      	adds	r3, r7, r6
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a13      	ldr	r2, [pc, #76]	@ (8000490 <capTouch_readChannels+0x6c>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f002 fcf5 	bl	8002e48 <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	6818      	ldr	r0, [r3, #0]
 8000466:	197c      	adds	r4, r7, r5
 8000468:	19ba      	adds	r2, r7, r6
 800046a:	2301      	movs	r3, #1
 800046c:	425b      	negs	r3, r3
 800046e:	9300      	str	r3, [sp, #0]
 8000470:	2301      	movs	r3, #1
 8000472:	2136      	movs	r1, #54	@ 0x36
 8000474:	f002 fe12 	bl	800309c <HAL_I2C_Master_Receive>
 8000478:	0003      	movs	r3, r0
 800047a:	7023      	strb	r3, [r4, #0]

	*dataBuff = keyStatusRet;
 800047c:	19bb      	adds	r3, r7, r6
 800047e:	781a      	ldrb	r2, [r3, #0]
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000484:	197b      	adds	r3, r7, r5
 8000486:	781b      	ldrb	r3, [r3, #0]

}
 8000488:	0018      	movs	r0, r3
 800048a:	46bd      	mov	sp, r7
 800048c:	b005      	add	sp, #20
 800048e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000490:	08005eb8 	.word	0x08005eb8

08000494 <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	b08b      	sub	sp, #44	@ 0x2c
 8000498:	af02      	add	r7, sp, #8
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	000a      	movs	r2, r1
 800049e:	1cfb      	adds	r3, r7, #3
 80004a0:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004a2:	241b      	movs	r4, #27
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2200      	movs	r2, #0
 80004a8:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80004aa:	2614      	movs	r6, #20
 80004ac:	19bb      	adds	r3, r7, r6
 80004ae:	4a2e      	ldr	r2, [pc, #184]	@ (8000568 <capTouch_enableKeys+0xd4>)
 80004b0:	6811      	ldr	r1, [r2, #0]
 80004b2:	6019      	str	r1, [r3, #0]
 80004b4:	8891      	ldrh	r1, [r2, #4]
 80004b6:	8099      	strh	r1, [r3, #4]
 80004b8:	7992      	ldrb	r2, [r2, #6]
 80004ba:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 80004bc:	230c      	movs	r3, #12
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	4a2a      	ldr	r2, [pc, #168]	@ (800056c <capTouch_enableKeys+0xd8>)
 80004c2:	6811      	ldr	r1, [r2, #0]
 80004c4:	6019      	str	r1, [r3, #0]
 80004c6:	8891      	ldrh	r1, [r2, #4]
 80004c8:	8099      	strh	r1, [r3, #4]
 80004ca:	7992      	ldrb	r2, [r2, #6]
 80004cc:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	6818      	ldr	r0, [r3, #0]
 80004d2:	0025      	movs	r5, r4
 80004d4:	193c      	adds	r4, r7, r4
 80004d6:	230c      	movs	r3, #12
 80004d8:	18fa      	adds	r2, r7, r3
 80004da:	2301      	movs	r3, #1
 80004dc:	425b      	negs	r3, r3
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	2301      	movs	r3, #1
 80004e2:	2136      	movs	r1, #54	@ 0x36
 80004e4:	f002 fcb0 	bl	8002e48 <HAL_I2C_Master_Transmit>
 80004e8:	0003      	movs	r3, r0
 80004ea:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	6818      	ldr	r0, [r3, #0]
 80004f0:	197c      	adds	r4, r7, r5
 80004f2:	19ba      	adds	r2, r7, r6
 80004f4:	2301      	movs	r3, #1
 80004f6:	425b      	negs	r3, r3
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2307      	movs	r3, #7
 80004fc:	2136      	movs	r1, #54	@ 0x36
 80004fe:	f002 fdcd 	bl	800309c <HAL_I2C_Master_Receive>
 8000502:	0003      	movs	r3, r0
 8000504:	7023      	strb	r3, [r4, #0]

	int i; //temp;

	for(i = 0; i <= 6; i++) {
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]
 800050a:	e019      	b.n	8000540 <capTouch_enableKeys+0xac>
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.

		// Extract bits 2-6 and multiply by 0 or 1
//		temp = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
//		avgRet[i] = (avgRet[i] & 0b00000011) | (temp << 2);
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 800050c:	2014      	movs	r0, #20
 800050e:	183a      	adds	r2, r7, r0
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	18d3      	adds	r3, r2, r3
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	089b      	lsrs	r3, r3, #2
 8000518:	b2db      	uxtb	r3, r3
 800051a:	1cfa      	adds	r2, r7, #3
 800051c:	7811      	ldrb	r1, [r2, #0]
 800051e:	69fa      	ldr	r2, [r7, #28]
 8000520:	4111      	asrs	r1, r2
 8000522:	000a      	movs	r2, r1
 8000524:	b2d2      	uxtb	r2, r2
 8000526:	2101      	movs	r1, #1
 8000528:	400a      	ands	r2, r1
 800052a:	b2d2      	uxtb	r2, r2
 800052c:	4353      	muls	r3, r2
 800052e:	b2d9      	uxtb	r1, r3
 8000530:	183a      	adds	r2, r7, r0
 8000532:	69fb      	ldr	r3, [r7, #28]
 8000534:	18d3      	adds	r3, r2, r3
 8000536:	1c0a      	adds	r2, r1, #0
 8000538:	701a      	strb	r2, [r3, #0]
	for(i = 0; i <= 6; i++) {
 800053a:	69fb      	ldr	r3, [r7, #28]
 800053c:	3301      	adds	r3, #1
 800053e:	61fb      	str	r3, [r7, #28]
 8000540:	69fb      	ldr	r3, [r7, #28]
 8000542:	2b06      	cmp	r3, #6
 8000544:	dde2      	ble.n	800050c <capTouch_enableKeys+0x78>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 8000546:	251b      	movs	r5, #27
 8000548:	197c      	adds	r4, r7, r5
 800054a:	2314      	movs	r3, #20
 800054c:	18fa      	adds	r2, r7, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	0011      	movs	r1, r2
 8000552:	0018      	movs	r0, r3
 8000554:	f000 f80c 	bl	8000570 <capTouch_SetAveragingFactor>
 8000558:	0003      	movs	r3, r0
 800055a:	7023      	strb	r3, [r4, #0]


	return halRet;
 800055c:	197b      	adds	r3, r7, r5
 800055e:	781b      	ldrb	r3, [r3, #0]

}
 8000560:	0018      	movs	r0, r3
 8000562:	46bd      	mov	sp, r7
 8000564:	b009      	add	sp, #36	@ 0x24
 8000566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000568:	08005ebc 	.word	0x08005ebc
 800056c:	08005ec4 	.word	0x08005ec4

08000570 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000572:	b08b      	sub	sp, #44	@ 0x2c
 8000574:	af02      	add	r7, sp, #8
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800057a:	241e      	movs	r4, #30
 800057c:	193b      	adds	r3, r7, r4
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000582:	2614      	movs	r6, #20
 8000584:	19bb      	adds	r3, r7, r6
 8000586:	4a4d      	ldr	r2, [pc, #308]	@ (80006bc <capTouch_SetAveragingFactor+0x14c>)
 8000588:	6811      	ldr	r1, [r2, #0]
 800058a:	6019      	str	r1, [r3, #0]
 800058c:	8891      	ldrh	r1, [r2, #4]
 800058e:	8099      	strh	r1, [r3, #4]
 8000590:	7992      	ldrb	r2, [r2, #6]
 8000592:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000594:	230c      	movs	r3, #12
 8000596:	18fb      	adds	r3, r7, r3
 8000598:	4a49      	ldr	r2, [pc, #292]	@ (80006c0 <capTouch_SetAveragingFactor+0x150>)
 800059a:	6811      	ldr	r1, [r2, #0]
 800059c:	6019      	str	r1, [r3, #0]
 800059e:	8891      	ldrh	r1, [r2, #4]
 80005a0:	8099      	strh	r1, [r3, #4]
 80005a2:	7992      	ldrb	r2, [r2, #6]
 80005a4:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	0025      	movs	r5, r4
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	230c      	movs	r3, #12
 80005b0:	18fa      	adds	r2, r7, r3
 80005b2:	2301      	movs	r3, #1
 80005b4:	425b      	negs	r3, r3
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2301      	movs	r3, #1
 80005ba:	2136      	movs	r1, #54	@ 0x36
 80005bc:	f002 fc44 	bl	8002e48 <HAL_I2C_Master_Transmit>
 80005c0:	0003      	movs	r3, r0
 80005c2:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6818      	ldr	r0, [r3, #0]
 80005c8:	197c      	adds	r4, r7, r5
 80005ca:	19ba      	adds	r2, r7, r6
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2307      	movs	r3, #7
 80005d4:	2136      	movs	r1, #54	@ 0x36
 80005d6:	f002 fd61 	bl	800309c <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 80005de:	2308      	movs	r3, #8
 80005e0:	18fb      	adds	r3, r7, r3
 80005e2:	2200      	movs	r2, #0
 80005e4:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 80005e6:	231d      	movs	r3, #29
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80005ee:	231f      	movs	r3, #31
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
 80005f6:	e039      	b.n	800066c <capTouch_SetAveragingFactor+0xfc>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80005f8:	251f      	movs	r5, #31
 80005fa:	197b      	adds	r3, r7, r5
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2214      	movs	r2, #20
 8000600:	18ba      	adds	r2, r7, r2
 8000602:	5cd2      	ldrb	r2, [r2, r3]
 8000604:	201d      	movs	r0, #29
 8000606:	183b      	adds	r3, r7, r0
 8000608:	2103      	movs	r1, #3
 800060a:	400a      	ands	r2, r1
 800060c:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 800060e:	197b      	adds	r3, r7, r5
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	18d3      	adds	r3, r2, r3
 8000616:	781a      	ldrb	r2, [r3, #0]
 8000618:	241c      	movs	r4, #28
 800061a:	193b      	adds	r3, r7, r4
 800061c:	0092      	lsls	r2, r2, #2
 800061e:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 8000620:	183b      	adds	r3, r7, r0
 8000622:	1839      	adds	r1, r7, r0
 8000624:	193a      	adds	r2, r7, r4
 8000626:	7809      	ldrb	r1, [r1, #0]
 8000628:	7812      	ldrb	r2, [r2, #0]
 800062a:	430a      	orrs	r2, r1
 800062c:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 800062e:	197b      	adds	r3, r7, r5
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	220c      	movs	r2, #12
 8000634:	18ba      	adds	r2, r7, r2
 8000636:	5cd2      	ldrb	r2, [r2, r3]
 8000638:	2108      	movs	r1, #8
 800063a:	187b      	adds	r3, r7, r1
 800063c:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	183a      	adds	r2, r7, r0
 8000642:	7812      	ldrb	r2, [r2, #0]
 8000644:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6818      	ldr	r0, [r3, #0]
 800064a:	231e      	movs	r3, #30
 800064c:	18fc      	adds	r4, r7, r3
 800064e:	187a      	adds	r2, r7, r1
 8000650:	2301      	movs	r3, #1
 8000652:	425b      	negs	r3, r3
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2302      	movs	r3, #2
 8000658:	2136      	movs	r1, #54	@ 0x36
 800065a:	f002 fbf5 	bl	8002e48 <HAL_I2C_Master_Transmit>
 800065e:	0003      	movs	r3, r0
 8000660:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 8000662:	197b      	adds	r3, r7, r5
 8000664:	781a      	ldrb	r2, [r3, #0]
 8000666:	197b      	adds	r3, r7, r5
 8000668:	3201      	adds	r2, #1
 800066a:	701a      	strb	r2, [r3, #0]
 800066c:	231f      	movs	r3, #31
 800066e:	18fb      	adds	r3, r7, r3
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b06      	cmp	r3, #6
 8000674:	d9c0      	bls.n	80005f8 <capTouch_SetAveragingFactor+0x88>
									avgRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6818      	ldr	r0, [r3, #0]
 800067a:	251e      	movs	r5, #30
 800067c:	197c      	adds	r4, r7, r5
 800067e:	230c      	movs	r3, #12
 8000680:	18fa      	adds	r2, r7, r3
 8000682:	2301      	movs	r3, #1
 8000684:	425b      	negs	r3, r3
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2301      	movs	r3, #1
 800068a:	2136      	movs	r1, #54	@ 0x36
 800068c:	f002 fbdc 	bl	8002e48 <HAL_I2C_Master_Transmit>
 8000690:	0003      	movs	r3, r0
 8000692:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6818      	ldr	r0, [r3, #0]
 8000698:	197c      	adds	r4, r7, r5
 800069a:	2314      	movs	r3, #20
 800069c:	18fa      	adds	r2, r7, r3
 800069e:	2301      	movs	r3, #1
 80006a0:	425b      	negs	r3, r3
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2307      	movs	r3, #7
 80006a6:	2136      	movs	r1, #54	@ 0x36
 80006a8:	f002 fcf8 	bl	800309c <HAL_I2C_Master_Receive>
 80006ac:	0003      	movs	r3, r0
 80006ae:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006b0:	197b      	adds	r3, r7, r5
 80006b2:	781b      	ldrb	r3, [r3, #0]

}
 80006b4:	0018      	movs	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b009      	add	sp, #36	@ 0x24
 80006ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006bc:	08005ebc 	.word	0x08005ebc
 80006c0:	08005ec4 	.word	0x08005ec4

080006c4 <getRTCTime>:
				internalAlarm_initTest.AlarmTime.Minutes, internalAlarm_initTest.AlarmTime.Seconds);
	}

}

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	2200      	movs	r2, #0
 80006d6:	0018      	movs	r0, r3
 80006d8:	f004 f90a 	bl	80048f0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 80006dc:	6879      	ldr	r1, [r7, #4]
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	2200      	movs	r2, #0
 80006e2:	0018      	movs	r0, r3
 80006e4:	f004 f9f2 	bl	8004acc <HAL_RTC_GetDate>

}
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b004      	add	sp, #16
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f2:	b08d      	sub	sp, #52	@ 0x34
 80006f4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f6:	f001 fb31 	bl	8001d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fa:	f000 f88b 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 fadb 	bl	8000cb8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000702:	f000 f8f3 	bl	80008ec <MX_ADC1_Init>
  MX_RTC_Init();
 8000706:	f000 f99d 	bl	8000a44 <MX_RTC_Init>
  MX_I2C1_Init();
 800070a:	f000 f95b 	bl	80009c4 <MX_I2C1_Init>
  MX_TIM14_Init();
 800070e:	f000 faad 	bl	8000c6c <MX_TIM14_Init>
  MX_TIM2_Init();
 8000712:	f000 fa4b 	bl	8000bac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000716:	2380      	movs	r3, #128	@ 0x80
 8000718:	009c      	lsls	r4, r3, #2
 800071a:	2380      	movs	r3, #128	@ 0x80
 800071c:	00dd      	lsls	r5, r3, #3
 800071e:	2680      	movs	r6, #128	@ 0x80
 8000720:	2340      	movs	r3, #64	@ 0x40
 8000722:	469c      	mov	ip, r3
 8000724:	2380      	movs	r3, #128	@ 0x80
 8000726:	011a      	lsls	r2, r3, #4
 8000728:	4b31      	ldr	r3, [pc, #196]	@ (80007f0 <main+0x100>)
 800072a:	6819      	ldr	r1, [r3, #0]
 800072c:	4b31      	ldr	r3, [pc, #196]	@ (80007f4 <main+0x104>)
 800072e:	6818      	ldr	r0, [r3, #0]
 8000730:	4b31      	ldr	r3, [pc, #196]	@ (80007f8 <main+0x108>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	9304      	str	r3, [sp, #16]
 8000736:	9003      	str	r0, [sp, #12]
 8000738:	9102      	str	r1, [sp, #8]
 800073a:	4b30      	ldr	r3, [pc, #192]	@ (80007fc <main+0x10c>)
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	9200      	str	r2, [sp, #0]
 8000740:	4663      	mov	r3, ip
 8000742:	0032      	movs	r2, r6
 8000744:	0029      	movs	r1, r5
 8000746:	0020      	movs	r0, r4
 8000748:	f000 fefc 	bl	8001544 <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);

	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 800074c:	2515      	movs	r5, #21
 800074e:	197c      	adds	r4, r7, r5
 8000750:	f000 fb84 	bl	8000e5c <updateAndDisplayTime>
 8000754:	0003      	movs	r3, r0
 8000756:	7023      	strb	r3, [r4, #0]

    /*
     * Initialize capacitive touch sensor
     */
    QT1070 capTouch;
    halRet = capTouch_Init(&capTouch, &hi2c1, 0b00001111);
 8000758:	197c      	adds	r4, r7, r5
 800075a:	4929      	ldr	r1, [pc, #164]	@ (8000800 <main+0x110>)
 800075c:	260c      	movs	r6, #12
 800075e:	19bb      	adds	r3, r7, r6
 8000760:	220f      	movs	r2, #15
 8000762:	0018      	movs	r0, r3
 8000764:	f7ff fd5a 	bl	800021c <capTouch_Init>
 8000768:	0003      	movs	r3, r0
 800076a:	7023      	strb	r3, [r4, #0]
    uint8_t avgFactors_New[7] = {32, 32, 32, 32, 0, 0, 0};
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4a25      	ldr	r2, [pc, #148]	@ (8000804 <main+0x114>)
 8000770:	6811      	ldr	r1, [r2, #0]
 8000772:	6019      	str	r1, [r3, #0]
 8000774:	8891      	ldrh	r1, [r2, #4]
 8000776:	8099      	strh	r1, [r3, #4]
 8000778:	7992      	ldrb	r2, [r2, #6]
 800077a:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 800077c:	197c      	adds	r4, r7, r5
 800077e:	1d3a      	adds	r2, r7, #4
 8000780:	19bb      	adds	r3, r7, r6
 8000782:	0011      	movs	r1, r2
 8000784:	0018      	movs	r0, r3
 8000786:	f7ff fef3 	bl	8000570 <capTouch_SetAveragingFactor>
 800078a:	0003      	movs	r3, r0
 800078c:	7023      	strb	r3, [r4, #0]

	userAlarmToggle = false;			//Default to off
 800078e:	4b1e      	ldr	r3, [pc, #120]	@ (8000808 <main+0x118>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]

    // User alarm default value
    userAlarmTime.Hours = 1;
 8000794:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <main+0x11c>)
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
    userAlarmTime.Minutes = 1;
 800079a:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <main+0x11c>)
 800079c:	2201      	movs	r2, #1
 800079e:	705a      	strb	r2, [r3, #1]
    userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	@ (800080c <main+0x11c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	70da      	strb	r2, [r3, #3]

    uint16_t count = 0;
 80007a6:	2316      	movs	r3, #22
 80007a8:	18fb      	adds	r3, r7, r3
 80007aa:	2200      	movs	r2, #0
 80007ac:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {

	  uint8_t channelTest = 0x00;
 80007ae:	1cfb      	adds	r3, r7, #3
 80007b0:	2200      	movs	r2, #0
 80007b2:	701a      	strb	r2, [r3, #0]
	  halRet = capTouch_readChannels(&capTouch, &channelTest);
 80007b4:	2315      	movs	r3, #21
 80007b6:	18fc      	adds	r4, r7, r3
 80007b8:	1cfa      	adds	r2, r7, #3
 80007ba:	230c      	movs	r3, #12
 80007bc:	18fb      	adds	r3, r7, r3
 80007be:	0011      	movs	r1, r2
 80007c0:	0018      	movs	r0, r3
 80007c2:	f7ff fe2f 	bl	8000424 <capTouch_readChannels>
 80007c6:	0003      	movs	r3, r0
 80007c8:	7023      	strb	r3, [r4, #0]
	  if(channelTest != 0x00) {
 80007ca:	1cfb      	adds	r3, r7, #3
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d0ed      	beq.n	80007ae <main+0xbe>
		  HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <main+0x120>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2201      	movs	r2, #1
 80007d8:	0011      	movs	r1, r2
 80007da:	0018      	movs	r0, r3
 80007dc:	f002 fa3e 	bl	8002c5c <HAL_GPIO_TogglePin>
		  count++;
 80007e0:	2116      	movs	r1, #22
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	881a      	ldrh	r2, [r3, #0]
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	3201      	adds	r2, #1
 80007ea:	801a      	strh	r2, [r3, #0]
  while (1) {
 80007ec:	e7df      	b.n	80007ae <main+0xbe>
 80007ee:	46c0      	nop			@ (mov r8, r8)
 80007f0:	20000024 	.word	0x20000024
 80007f4:	20000028 	.word	0x20000028
 80007f8:	2000002c 	.word	0x2000002c
 80007fc:	2000000c 	.word	0x2000000c
 8000800:	200000d8 	.word	0x200000d8
 8000804:	08005ecc 	.word	0x08005ecc
 8000808:	20000071 	.word	0x20000071
 800080c:	20000208 	.word	0x20000208
 8000810:	20000020 	.word	0x20000020

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b093      	sub	sp, #76	@ 0x4c
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	2410      	movs	r4, #16
 800081c:	193b      	adds	r3, r7, r4
 800081e:	0018      	movs	r0, r3
 8000820:	2338      	movs	r3, #56	@ 0x38
 8000822:	001a      	movs	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f005 fb0b 	bl	8005e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082a:	003b      	movs	r3, r7
 800082c:	0018      	movs	r0, r3
 800082e:	2310      	movs	r3, #16
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f005 fb04 	bl	8005e40 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000838:	2380      	movs	r3, #128	@ 0x80
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	0018      	movs	r0, r3
 800083e:	f003 f8af 	bl	80039a0 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000842:	f003 f89f 	bl	8003984 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000846:	4b28      	ldr	r3, [pc, #160]	@ (80008e8 <SystemClock_Config+0xd4>)
 8000848:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800084a:	4b27      	ldr	r3, [pc, #156]	@ (80008e8 <SystemClock_Config+0xd4>)
 800084c:	2118      	movs	r1, #24
 800084e:	438a      	bics	r2, r1
 8000850:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2206      	movs	r2, #6
 8000856:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	2201      	movs	r2, #1
 800085c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085e:	193b      	adds	r3, r7, r4
 8000860:	2280      	movs	r2, #128	@ 0x80
 8000862:	0052      	lsls	r2, r2, #1
 8000864:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000866:	0021      	movs	r1, r4
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2240      	movs	r2, #64	@ 0x40
 8000872:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2202      	movs	r2, #2
 8000878:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2202      	movs	r2, #2
 800087e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2208      	movs	r2, #8
 800088a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2280      	movs	r2, #128	@ 0x80
 8000890:	0292      	lsls	r2, r2, #10
 8000892:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2280      	movs	r2, #128	@ 0x80
 8000898:	0492      	lsls	r2, r2, #18
 800089a:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2280      	movs	r2, #128	@ 0x80
 80008a0:	0592      	lsls	r2, r2, #22
 80008a2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	0018      	movs	r0, r3
 80008a8:	f003 f8ba 	bl	8003a20 <HAL_RCC_OscConfig>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80008b0:	f000 fe42 	bl	8001538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b4:	003b      	movs	r3, r7
 80008b6:	2207      	movs	r2, #7
 80008b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ba:	003b      	movs	r3, r7
 80008bc:	2202      	movs	r2, #2
 80008be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	003b      	movs	r3, r7
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c6:	003b      	movs	r3, r7
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008cc:	003b      	movs	r3, r7
 80008ce:	2102      	movs	r1, #2
 80008d0:	0018      	movs	r0, r3
 80008d2:	f003 fbbf 	bl	8004054 <HAL_RCC_ClockConfig>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008da:	f000 fe2d 	bl	8001538 <Error_Handler>
  }
}
 80008de:	46c0      	nop			@ (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b013      	add	sp, #76	@ 0x4c
 80008e4:	bd90      	pop	{r4, r7, pc}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	40021000 	.word	0x40021000

080008ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	0018      	movs	r0, r3
 80008f6:	230c      	movs	r3, #12
 80008f8:	001a      	movs	r2, r3
 80008fa:	2100      	movs	r1, #0
 80008fc:	f005 faa0 	bl	8005e40 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000900:	4b2d      	ldr	r3, [pc, #180]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 8000902:	4a2e      	ldr	r2, [pc, #184]	@ (80009bc <MX_ADC1_Init+0xd0>)
 8000904:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000906:	4b2c      	ldr	r3, [pc, #176]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 8000908:	2280      	movs	r2, #128	@ 0x80
 800090a:	05d2      	lsls	r2, r2, #23
 800090c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800090e:	4b2a      	ldr	r3, [pc, #168]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000914:	4b28      	ldr	r3, [pc, #160]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800091a:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000920:	4b25      	ldr	r3, [pc, #148]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 8000922:	2204      	movs	r2, #4
 8000924:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000926:	4b24      	ldr	r3, [pc, #144]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 8000928:	2200      	movs	r2, #0
 800092a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800092c:	4b22      	ldr	r3, [pc, #136]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 800092e:	2200      	movs	r2, #0
 8000930:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000932:	4b21      	ldr	r3, [pc, #132]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 8000934:	2200      	movs	r2, #0
 8000936:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000938:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 800093a:	2201      	movs	r2, #1
 800093c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800093e:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 8000940:	2220      	movs	r2, #32
 8000942:	2100      	movs	r1, #0
 8000944:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000946:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 800094e:	2200      	movs	r2, #0
 8000950:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000952:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 8000954:	222c      	movs	r2, #44	@ 0x2c
 8000956:	2100      	movs	r1, #0
 8000958:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800095a:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 800095c:	2200      	movs	r2, #0
 800095e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000960:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 8000962:	2200      	movs	r2, #0
 8000964:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000966:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 8000968:	2200      	movs	r2, #0
 800096a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 800096e:	223c      	movs	r2, #60	@ 0x3c
 8000970:	2100      	movs	r1, #0
 8000972:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000974:	4b10      	ldr	r3, [pc, #64]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 8000976:	2200      	movs	r2, #0
 8000978:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800097a:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 800097c:	0018      	movs	r0, r3
 800097e:	f001 fb71 	bl	8002064 <HAL_ADC_Init>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000986:	f000 fdd7 	bl	8001538 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	4a0c      	ldr	r2, [pc, #48]	@ (80009c0 <MX_ADC1_Init+0xd4>)
 800098e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099c:	1d3a      	adds	r2, r7, #4
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <MX_ADC1_Init+0xcc>)
 80009a0:	0011      	movs	r1, r2
 80009a2:	0018      	movs	r0, r3
 80009a4:	f001 fd06 	bl	80023b4 <HAL_ADC_ConfigChannel>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80009ac:	f000 fdc4 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009b0:	46c0      	nop			@ (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b004      	add	sp, #16
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000074 	.word	0x20000074
 80009bc:	40012400 	.word	0x40012400
 80009c0:	08000004 	.word	0x08000004

080009c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <MX_I2C1_Init+0x74>)
 80009ca:	4a1c      	ldr	r2, [pc, #112]	@ (8000a3c <MX_I2C1_Init+0x78>)
 80009cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <MX_I2C1_Init+0x74>)
 80009d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a40 <MX_I2C1_Init+0x7c>)
 80009d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009d4:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <MX_I2C1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009da:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <MX_I2C1_Init+0x74>)
 80009dc:	2201      	movs	r2, #1
 80009de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e0:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <MX_I2C1_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009e6:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <MX_I2C1_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009ec:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <MX_I2C1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f2:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_I2C1_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <MX_I2C1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_I2C1_Init+0x74>)
 8000a00:	0018      	movs	r0, r3
 8000a02:	f002 f97b 	bl	8002cfc <HAL_I2C_Init>
 8000a06:	1e03      	subs	r3, r0, #0
 8000a08:	d001      	beq.n	8000a0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a0a:	f000 fd95 	bl	8001538 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a38 <MX_I2C1_Init+0x74>)
 8000a10:	2100      	movs	r1, #0
 8000a12:	0018      	movs	r0, r3
 8000a14:	f002 ff1e 	bl	8003854 <HAL_I2CEx_ConfigAnalogFilter>
 8000a18:	1e03      	subs	r3, r0, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a1c:	f000 fd8c 	bl	8001538 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a20:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <MX_I2C1_Init+0x74>)
 8000a22:	2100      	movs	r1, #0
 8000a24:	0018      	movs	r0, r3
 8000a26:	f002 ff61 	bl	80038ec <HAL_I2CEx_ConfigDigitalFilter>
 8000a2a:	1e03      	subs	r3, r0, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a2e:	f000 fd83 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a32:	46c0      	nop			@ (mov r8, r8)
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200000d8 	.word	0x200000d8
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	00602173 	.word	0x00602173

08000a44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b090      	sub	sp, #64	@ 0x40
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a4a:	232c      	movs	r3, #44	@ 0x2c
 8000a4c:	18fb      	adds	r3, r7, r3
 8000a4e:	0018      	movs	r0, r3
 8000a50:	2314      	movs	r3, #20
 8000a52:	001a      	movs	r2, r3
 8000a54:	2100      	movs	r1, #0
 8000a56:	f005 f9f3 	bl	8005e40 <memset>
  RTC_DateTypeDef sDate = {0};
 8000a5a:	2328      	movs	r3, #40	@ 0x28
 8000a5c:	18fb      	adds	r3, r7, r3
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000a62:	003b      	movs	r3, r7
 8000a64:	0018      	movs	r0, r3
 8000a66:	2328      	movs	r3, #40	@ 0x28
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f005 f9e8 	bl	8005e40 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a70:	4b4b      	ldr	r3, [pc, #300]	@ (8000ba0 <MX_RTC_Init+0x15c>)
 8000a72:	4a4c      	ldr	r2, [pc, #304]	@ (8000ba4 <MX_RTC_Init+0x160>)
 8000a74:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000a76:	4b4a      	ldr	r3, [pc, #296]	@ (8000ba0 <MX_RTC_Init+0x15c>)
 8000a78:	2240      	movs	r2, #64	@ 0x40
 8000a7a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000a7c:	4b48      	ldr	r3, [pc, #288]	@ (8000ba0 <MX_RTC_Init+0x15c>)
 8000a7e:	227f      	movs	r2, #127	@ 0x7f
 8000a80:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000a82:	4b47      	ldr	r3, [pc, #284]	@ (8000ba0 <MX_RTC_Init+0x15c>)
 8000a84:	22ff      	movs	r2, #255	@ 0xff
 8000a86:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a88:	4b45      	ldr	r3, [pc, #276]	@ (8000ba0 <MX_RTC_Init+0x15c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a8e:	4b44      	ldr	r3, [pc, #272]	@ (8000ba0 <MX_RTC_Init+0x15c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a94:	4b42      	ldr	r3, [pc, #264]	@ (8000ba0 <MX_RTC_Init+0x15c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a9a:	4b41      	ldr	r3, [pc, #260]	@ (8000ba0 <MX_RTC_Init+0x15c>)
 8000a9c:	2280      	movs	r2, #128	@ 0x80
 8000a9e:	05d2      	lsls	r2, r2, #23
 8000aa0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000aa2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ba0 <MX_RTC_Init+0x15c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000aa8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ba0 <MX_RTC_Init+0x15c>)
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f003 fdd6 	bl	800465c <HAL_RTC_Init>
 8000ab0:	1e03      	subs	r3, r0, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000ab4:	f000 fd40 	bl	8001538 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000ab8:	212c      	movs	r1, #44	@ 0x2c
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2200      	movs	r2, #0
 8000aca:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ae4:	1879      	adds	r1, r7, r1
 8000ae6:	4b2e      	ldr	r3, [pc, #184]	@ (8000ba0 <MX_RTC_Init+0x15c>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	0018      	movs	r0, r3
 8000aec:	f003 fe58 	bl	80047a0 <HAL_RTC_SetTime>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d001      	beq.n	8000af8 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000af4:	f000 fd20 	bl	8001538 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000af8:	2128      	movs	r1, #40	@ 0x28
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2201      	movs	r2, #1
 8000b04:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2201      	movs	r2, #1
 8000b0a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2200      	movs	r2, #0
 8000b10:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b12:	1879      	adds	r1, r7, r1
 8000b14:	4b22      	ldr	r3, [pc, #136]	@ (8000ba0 <MX_RTC_Init+0x15c>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f003 ff45 	bl	80049a8 <HAL_RTC_SetDate>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d001      	beq.n	8000b26 <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 8000b22:	f000 fd09 	bl	8001538 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000b26:	003b      	movs	r3, r7
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000b2c:	003b      	movs	r3, r7
 8000b2e:	2201      	movs	r2, #1
 8000b30:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000b32:	003b      	movs	r3, r7
 8000b34:	2200      	movs	r2, #0
 8000b36:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000b38:	003b      	movs	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000b3e:	003b      	movs	r3, r7
 8000b40:	2200      	movs	r2, #0
 8000b42:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b44:	003b      	movs	r3, r7
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b4a:	003b      	movs	r3, r7
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000b50:	003b      	movs	r3, r7
 8000b52:	4a15      	ldr	r2, [pc, #84]	@ (8000ba8 <MX_RTC_Init+0x164>)
 8000b54:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000b56:	003b      	movs	r3, r7
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000b5c:	003b      	movs	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000b62:	003b      	movs	r3, r7
 8000b64:	2220      	movs	r2, #32
 8000b66:	2101      	movs	r1, #1
 8000b68:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000b6a:	003b      	movs	r3, r7
 8000b6c:	2280      	movs	r2, #128	@ 0x80
 8000b6e:	0052      	lsls	r2, r2, #1
 8000b70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000b72:	0039      	movs	r1, r7
 8000b74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <MX_RTC_Init+0x15c>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f003 fff5 	bl	8004b68 <HAL_RTC_SetAlarm_IT>
 8000b7e:	1e03      	subs	r3, r0, #0
 8000b80:	d001      	beq.n	8000b86 <MX_RTC_Init+0x142>
  {
    Error_Handler();
 8000b82:	f000 fcd9 	bl	8001538 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <MX_RTC_Init+0x15c>)
 8000b88:	2100      	movs	r1, #0
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f004 fa5c 	bl	8005048 <HAL_RTCEx_SetCalibrationOutPut>
 8000b90:	1e03      	subs	r3, r0, #0
 8000b92:	d001      	beq.n	8000b98 <MX_RTC_Init+0x154>
  {
    Error_Handler();
 8000b94:	f000 fcd0 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b98:	46c0      	nop			@ (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b010      	add	sp, #64	@ 0x40
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000012c 	.word	0x2000012c
 8000ba4:	40002800 	.word	0x40002800
 8000ba8:	80800080 	.word	0x80800080

08000bac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	@ 0x28
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb2:	231c      	movs	r3, #28
 8000bb4:	18fb      	adds	r3, r7, r3
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	230c      	movs	r3, #12
 8000bba:	001a      	movs	r2, r3
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	f005 f93f 	bl	8005e40 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc2:	003b      	movs	r3, r7
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	231c      	movs	r3, #28
 8000bc8:	001a      	movs	r2, r3
 8000bca:	2100      	movs	r1, #0
 8000bcc:	f005 f938 	bl	8005e40 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bd0:	4b24      	ldr	r3, [pc, #144]	@ (8000c64 <MX_TIM2_Init+0xb8>)
 8000bd2:	2280      	movs	r2, #128	@ 0x80
 8000bd4:	05d2      	lsls	r2, r2, #23
 8000bd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8000bd8:	4b22      	ldr	r3, [pc, #136]	@ (8000c64 <MX_TIM2_Init+0xb8>)
 8000bda:	4a23      	ldr	r2, [pc, #140]	@ (8000c68 <MX_TIM2_Init+0xbc>)
 8000bdc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bde:	4b21      	ldr	r3, [pc, #132]	@ (8000c64 <MX_TIM2_Init+0xb8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000be4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c64 <MX_TIM2_Init+0xb8>)
 8000be6:	2263      	movs	r2, #99	@ 0x63
 8000be8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bea:	4b1e      	ldr	r3, [pc, #120]	@ (8000c64 <MX_TIM2_Init+0xb8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <MX_TIM2_Init+0xb8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c64 <MX_TIM2_Init+0xb8>)
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f004 fb3f 	bl	800527c <HAL_TIM_PWM_Init>
 8000bfe:	1e03      	subs	r3, r0, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000c02:	f000 fc99 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c06:	211c      	movs	r1, #28
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c14:	187a      	adds	r2, r7, r1
 8000c16:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <MX_TIM2_Init+0xb8>)
 8000c18:	0011      	movs	r1, r2
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f005 f8a8 	bl	8005d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000c24:	f000 fc88 	bl	8001538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c28:	003b      	movs	r3, r7
 8000c2a:	2260      	movs	r2, #96	@ 0x60
 8000c2c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c2e:	003b      	movs	r3, r7
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c34:	003b      	movs	r3, r7
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c3a:	003b      	movs	r3, r7
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c40:	0039      	movs	r1, r7
 8000c42:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <MX_TIM2_Init+0xb8>)
 8000c44:	2208      	movs	r2, #8
 8000c46:	0018      	movs	r0, r3
 8000c48:	f004 fc4e 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000c50:	f000 fc72 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c54:	4b03      	ldr	r3, [pc, #12]	@ (8000c64 <MX_TIM2_Init+0xb8>)
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 ffce 	bl	8001bf8 <HAL_TIM_MspPostInit>

}
 8000c5c:	46c0      	nop			@ (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b00a      	add	sp, #40	@ 0x28
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000158 	.word	0x20000158
 8000c68:	0000031f 	.word	0x0000031f

08000c6c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c70:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <MX_TIM14_Init+0x40>)
 8000c72:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb0 <MX_TIM14_Init+0x44>)
 8000c74:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8000c76:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <MX_TIM14_Init+0x40>)
 8000c78:	22f4      	movs	r2, #244	@ 0xf4
 8000c7a:	0092      	lsls	r2, r2, #2
 8000c7c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <MX_TIM14_Init+0x40>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000c84:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <MX_TIM14_Init+0x40>)
 8000c86:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb4 <MX_TIM14_Init+0x48>)
 8000c88:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <MX_TIM14_Init+0x40>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <MX_TIM14_Init+0x40>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000c96:	4b05      	ldr	r3, [pc, #20]	@ (8000cac <MX_TIM14_Init+0x40>)
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f004 fa25 	bl	80050e8 <HAL_TIM_Base_Init>
 8000c9e:	1e03      	subs	r3, r0, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000ca2:	f000 fc49 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200001a4 	.word	0x200001a4
 8000cb0:	40002000 	.word	0x40002000
 8000cb4:	0000ffff 	.word	0x0000ffff

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b08b      	sub	sp, #44	@ 0x2c
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	2414      	movs	r4, #20
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	2314      	movs	r3, #20
 8000cc6:	001a      	movs	r2, r3
 8000cc8:	2100      	movs	r1, #0
 8000cca:	f005 f8b9 	bl	8005e40 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	4b5e      	ldr	r3, [pc, #376]	@ (8000e48 <MX_GPIO_Init+0x190>)
 8000cd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cd2:	4b5d      	ldr	r3, [pc, #372]	@ (8000e48 <MX_GPIO_Init+0x190>)
 8000cd4:	2104      	movs	r1, #4
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cda:	4b5b      	ldr	r3, [pc, #364]	@ (8000e48 <MX_GPIO_Init+0x190>)
 8000cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cde:	2204      	movs	r2, #4
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	4b58      	ldr	r3, [pc, #352]	@ (8000e48 <MX_GPIO_Init+0x190>)
 8000ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cea:	4b57      	ldr	r3, [pc, #348]	@ (8000e48 <MX_GPIO_Init+0x190>)
 8000cec:	2101      	movs	r1, #1
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cf2:	4b55      	ldr	r3, [pc, #340]	@ (8000e48 <MX_GPIO_Init+0x190>)
 8000cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	4b52      	ldr	r3, [pc, #328]	@ (8000e48 <MX_GPIO_Init+0x190>)
 8000d00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d02:	4b51      	ldr	r3, [pc, #324]	@ (8000e48 <MX_GPIO_Init+0x190>)
 8000d04:	2108      	movs	r1, #8
 8000d06:	430a      	orrs	r2, r1
 8000d08:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d0a:	4b4f      	ldr	r3, [pc, #316]	@ (8000e48 <MX_GPIO_Init+0x190>)
 8000d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d0e:	2208      	movs	r2, #8
 8000d10:	4013      	ands	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b4c      	ldr	r3, [pc, #304]	@ (8000e48 <MX_GPIO_Init+0x190>)
 8000d18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d1a:	4b4b      	ldr	r3, [pc, #300]	@ (8000e48 <MX_GPIO_Init+0x190>)
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d22:	4b49      	ldr	r3, [pc, #292]	@ (8000e48 <MX_GPIO_Init+0x190>)
 8000d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d26:	2202      	movs	r2, #2
 8000d28:	4013      	ands	r3, r2
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8000d2e:	4947      	ldr	r1, [pc, #284]	@ (8000e4c <MX_GPIO_Init+0x194>)
 8000d30:	23a0      	movs	r3, #160	@ 0xa0
 8000d32:	05db      	lsls	r3, r3, #23
 8000d34:	2200      	movs	r2, #0
 8000d36:	0018      	movs	r0, r3
 8000d38:	f001 ff73 	bl	8002c22 <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8000d3c:	4b44      	ldr	r3, [pc, #272]	@ (8000e50 <MX_GPIO_Init+0x198>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2180      	movs	r1, #128	@ 0x80
 8000d42:	0018      	movs	r0, r3
 8000d44:	f001 ff6d 	bl	8002c22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_EN_GPIO_Port, CTOUCH_EN_Pin, GPIO_PIN_RESET);
 8000d48:	2380      	movs	r3, #128	@ 0x80
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4841      	ldr	r0, [pc, #260]	@ (8000e54 <MX_GPIO_Init+0x19c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	0019      	movs	r1, r3
 8000d52:	f001 ff66 	bl	8002c22 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin BUZZER_OUT_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin
                           SHIFT_MCLR_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	4a3c      	ldr	r2, [pc, #240]	@ (8000e4c <MX_GPIO_Init+0x194>)
 8000d5a:	601a      	str	r2, [r3, #0]
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	2201      	movs	r2, #1
 8000d60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	193b      	adds	r3, r7, r4
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	193a      	adds	r2, r7, r4
 8000d70:	23a0      	movs	r3, #160	@ 0xa0
 8000d72:	05db      	lsls	r3, r3, #23
 8000d74:	0011      	movs	r1, r2
 8000d76:	0018      	movs	r0, r3
 8000d78:	f001 fdd2 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8000d7c:	193b      	adds	r3, r7, r4
 8000d7e:	2280      	movs	r2, #128	@ 0x80
 8000d80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	2201      	movs	r2, #1
 8000d86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	2200      	movs	r2, #0
 8000d92:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 8000d94:	193b      	adds	r3, r7, r4
 8000d96:	4a2e      	ldr	r2, [pc, #184]	@ (8000e50 <MX_GPIO_Init+0x198>)
 8000d98:	0019      	movs	r1, r3
 8000d9a:	0010      	movs	r0, r2
 8000d9c:	f001 fdc0 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 8000da0:	193b      	adds	r3, r7, r4
 8000da2:	2280      	movs	r2, #128	@ 0x80
 8000da4:	0212      	lsls	r2, r2, #8
 8000da6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000da8:	193b      	adds	r3, r7, r4
 8000daa:	2284      	movs	r2, #132	@ 0x84
 8000dac:	0392      	lsls	r2, r2, #14
 8000dae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	2201      	movs	r2, #1
 8000db4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000db6:	193a      	adds	r2, r7, r4
 8000db8:	23a0      	movs	r3, #160	@ 0xa0
 8000dba:	05db      	lsls	r3, r3, #23
 8000dbc:	0011      	movs	r1, r2
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f001 fdae 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 8000dc4:	0021      	movs	r1, r4
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	220f      	movs	r2, #15
 8000dca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2284      	movs	r2, #132	@ 0x84
 8000dd0:	0392      	lsls	r2, r2, #14
 8000dd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dda:	000c      	movs	r4, r1
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	4a1e      	ldr	r2, [pc, #120]	@ (8000e58 <MX_GPIO_Init+0x1a0>)
 8000de0:	0019      	movs	r1, r3
 8000de2:	0010      	movs	r0, r2
 8000de4:	f001 fd9c 	bl	8002920 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_EN_Pin */
  GPIO_InitStruct.Pin = CTOUCH_EN_Pin;
 8000de8:	0021      	movs	r1, r4
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2280      	movs	r2, #128	@ 0x80
 8000dee:	0092      	lsls	r2, r2, #2
 8000df0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2201      	movs	r2, #1
 8000df6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_EN_GPIO_Port, &GPIO_InitStruct);
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	4a13      	ldr	r2, [pc, #76]	@ (8000e54 <MX_GPIO_Init+0x19c>)
 8000e08:	0019      	movs	r1, r3
 8000e0a:	0010      	movs	r0, r2
 8000e0c:	f001 fd88 	bl	8002920 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2100      	movs	r1, #0
 8000e14:	2005      	movs	r0, #5
 8000e16:	f001 fd51 	bl	80028bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000e1a:	2005      	movs	r0, #5
 8000e1c:	f001 fd63 	bl	80028e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	2006      	movs	r0, #6
 8000e26:	f001 fd49 	bl	80028bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000e2a:	2006      	movs	r0, #6
 8000e2c:	f001 fd5b 	bl	80028e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2101      	movs	r1, #1
 8000e34:	2007      	movs	r0, #7
 8000e36:	f001 fd41 	bl	80028bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000e3a:	2007      	movs	r0, #7
 8000e3c:	f001 fd53 	bl	80028e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e40:	46c0      	nop			@ (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b00b      	add	sp, #44	@ 0x2c
 8000e46:	bd90      	pop	{r4, r7, pc}
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	00001f01 	.word	0x00001f01
 8000e50:	50000800 	.word	0x50000800
 8000e54:	50000400 	.word	0x50000400
 8000e58:	50000c00 	.word	0x50000c00

08000e5c <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8000e68:	4a07      	ldr	r2, [pc, #28]	@ (8000e88 <updateAndDisplayTime+0x2c>)
 8000e6a:	4908      	ldr	r1, [pc, #32]	@ (8000e8c <updateAndDisplayTime+0x30>)
 8000e6c:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <updateAndDisplayTime+0x34>)
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f7ff fc28 	bl	80006c4 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 8000e74:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <updateAndDisplayTime+0x30>)
 8000e76:	0018      	movs	r0, r3
 8000e78:	f000 fc7c 	bl	8001774 <sevSeg_updateDigits>

	return halRet;
 8000e7c:	1dfb      	adds	r3, r7, #7
 8000e7e:	781b      	ldrb	r3, [r3, #0]

}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b002      	add	sp, #8
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000204 	.word	0x20000204
 8000e8c:	200001f0 	.word	0x200001f0
 8000e90:	2000012c 	.word	0x2000012c

08000e94 <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 8000ea0:	4b04      	ldr	r3, [pc, #16]	@ (8000eb4 <updateAndDisplayAlarm+0x20>)
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f000 fc66 	bl	8001774 <sevSeg_updateDigits>

	return halRet;
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	781b      	ldrb	r3, [r3, #0]

}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000208 	.word	0x20000208

08000eb8 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08c      	sub	sp, #48	@ 0x30
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

	  //printf("Enter current time minute increment interrupt\n\r");

	  RTC_AlarmTypeDef sAlarm;
	  getRTCTime(hrtc, &currTime, &currDate);
 8000ec0:	4a1e      	ldr	r2, [pc, #120]	@ (8000f3c <HAL_RTC_AlarmAEventCallback+0x84>)
 8000ec2:	491f      	ldr	r1, [pc, #124]	@ (8000f40 <HAL_RTC_AlarmAEventCallback+0x88>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f7ff fbfc 	bl	80006c4 <getRTCTime>

	  if(sAlarm.AlarmTime.Minutes>58) {
 8000ecc:	2208      	movs	r2, #8
 8000ece:	18bb      	adds	r3, r7, r2
 8000ed0:	785b      	ldrb	r3, [r3, #1]
 8000ed2:	2b3a      	cmp	r3, #58	@ 0x3a
 8000ed4:	d903      	bls.n	8000ede <HAL_RTC_AlarmAEventCallback+0x26>
		sAlarm.AlarmTime.Minutes=0;
 8000ed6:	18bb      	adds	r3, r7, r2
 8000ed8:	2200      	movs	r2, #0
 8000eda:	705a      	strb	r2, [r3, #1]
 8000edc:	e006      	b.n	8000eec <HAL_RTC_AlarmAEventCallback+0x34>
		//printf("Reset alarm time\n\r");
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8000ede:	2108      	movs	r1, #8
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	785b      	ldrb	r3, [r3, #1]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000eec:	46c0      	nop			@ (mov r8, r8)
 8000eee:	2308      	movs	r3, #8
 8000ef0:	18f9      	adds	r1, r7, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f003 fe36 	bl	8004b68 <HAL_RTC_SetAlarm_IT>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d1f6      	bne.n	8000eee <HAL_RTC_AlarmAEventCallback+0x36>

	  updateAndDisplayTime();
 8000f00:	f7ff ffac 	bl	8000e5c <updateAndDisplayTime>

	  //printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d013      	beq.n	8000f34 <HAL_RTC_AlarmAEventCallback+0x7c>
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000f0e:	781a      	ldrb	r2, [r3, #0]
 8000f10:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <HAL_RTC_AlarmAEventCallback+0x88>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d10d      	bne.n	8000f34 <HAL_RTC_AlarmAEventCallback+0x7c>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 8000f18:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000f1a:	785a      	ldrb	r2, [r3, #1]
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <HAL_RTC_AlarmAEventCallback+0x88>)
 8000f1e:	785b      	ldrb	r3, [r3, #1]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d107      	bne.n	8000f34 <HAL_RTC_AlarmAEventCallback+0x7c>
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000f26:	78da      	ldrb	r2, [r3, #3]
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <HAL_RTC_AlarmAEventCallback+0x88>)
 8000f2a:	78db      	ldrb	r3, [r3, #3]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d101      	bne.n	8000f34 <HAL_RTC_AlarmAEventCallback+0x7c>
		  userAlarmBeep();
 8000f30:	f000 f80c 	bl	8000f4c <userAlarmBeep>
	  }

}
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b00c      	add	sp, #48	@ 0x30
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000204 	.word	0x20000204
 8000f40:	200001f0 	.word	0x200001f0
 8000f44:	20000071 	.word	0x20000071
 8000f48:	20000208 	.word	0x20000208

08000f4c <userAlarmBeep>:

void userAlarmBeep() {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8000f52:	4b2c      	ldr	r3, [pc, #176]	@ (8001004 <userAlarmBeep+0xb8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	0018      	movs	r0, r3
 8000f58:	f004 f96a 	bl	8005230 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8000f5c:	4b29      	ldr	r3, [pc, #164]	@ (8001004 <userAlarmBeep+0xb8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	0018      	movs	r0, r3
 8000f62:	f004 f919 	bl	8005198 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8000f66:	4b27      	ldr	r3, [pc, #156]	@ (8001004 <userAlarmBeep+0xb8>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f6e:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8000f70:	1cfb      	adds	r3, r7, #3
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8000f76:	1cbb      	adds	r3, r7, #2
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 8000f7c:	f7ff ff6e 	bl	8000e5c <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 8000f80:	4b20      	ldr	r3, [pc, #128]	@ (8001004 <userAlarmBeep+0xb8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001008 <userAlarmBeep+0xbc>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d926      	bls.n	8000fe0 <userAlarmBeep+0x94>

			sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 8000f92:	4b1e      	ldr	r3, [pc, #120]	@ (800100c <userAlarmBeep+0xc0>)
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	4b1e      	ldr	r3, [pc, #120]	@ (8001010 <userAlarmBeep+0xc4>)
 8000f98:	6819      	ldr	r1, [r3, #0]
 8000f9a:	1cfb      	adds	r3, r7, #3
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001014 <userAlarmBeep+0xc8>)
 8000fa0:	5cd3      	ldrb	r3, [r2, r3]
 8000fa2:	001a      	movs	r2, r3
 8000fa4:	f000 fc98 	bl	80018d8 <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(buzzerPort, buzzerPin);					// Toggle Buzzer
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001018 <userAlarmBeep+0xcc>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2280      	movs	r2, #128	@ 0x80
 8000fae:	0052      	lsls	r2, r2, #1
 8000fb0:	0011      	movs	r1, r2
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f001 fe52 	bl	8002c5c <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <userAlarmBeep+0xb8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc0:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8000fc2:	1cfb      	adds	r3, r7, #3
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	1e5a      	subs	r2, r3, #1
 8000fc8:	4193      	sbcs	r3, r2
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4053      	eors	r3, r2
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	001a      	movs	r2, r3
 8000fd4:	1cfb      	adds	r3, r7, #3
 8000fd6:	701a      	strb	r2, [r3, #0]
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	2101      	movs	r1, #1
 8000fdc:	400a      	ands	r2, r1
 8000fde:	701a      	strb	r2, [r3, #0]

			//printf("Display Blink = %u\n\r", displayBlink);

		}

		i++;		// Get rid of. This is just for testing.
 8000fe0:	1cbb      	adds	r3, r7, #2
 8000fe2:	781a      	ldrb	r2, [r3, #0]
 8000fe4:	1cbb      	adds	r3, r7, #2
 8000fe6:	3201      	adds	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]

//	} while(capTouchTrigger(snoozeButtonPin));
	} while(i < 5);
 8000fea:	1cbb      	adds	r3, r7, #2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	d9c4      	bls.n	8000f7c <userAlarmBeep+0x30>

	HAL_TIM_Base_Stop(timerDelay);
 8000ff2:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <userAlarmBeep+0xb8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f004 f91a 	bl	8005230 <HAL_TIM_Base_Stop>

}
 8000ffc:	46c0      	nop			@ (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b002      	add	sp, #8
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000024 	.word	0x20000024
 8001008:	00007ffe 	.word	0x00007ffe
 800100c:	20000028 	.word	0x20000028
 8001010:	2000002c 	.word	0x2000002c
 8001014:	08005ed4 	.word	0x08005ed4
 8001018:	20000008 	.word	0x20000008

0800101c <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	0002      	movs	r2, r0
 8001024:	1dbb      	adds	r3, r7, #6
 8001026:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8001028:	2208      	movs	r2, #8
 800102a:	1dbb      	adds	r3, r7, #6
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	4293      	cmp	r3, r2
 8001030:	d106      	bne.n	8001040 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 8001032:	230f      	movs	r3, #15
 8001034:	18fc      	adds	r4, r7, r3
 8001036:	f000 f839 	bl	80010ac <displayButtonISR>
 800103a:	0003      	movs	r3, r0
 800103c:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 800103e:	e031      	b.n	80010a4 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8001040:	2204      	movs	r2, #4
 8001042:	1dbb      	adds	r3, r7, #6
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	4293      	cmp	r3, r2
 8001048:	d106      	bne.n	8001058 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 800104a:	230f      	movs	r3, #15
 800104c:	18fc      	adds	r4, r7, r3
 800104e:	f000 f85d 	bl	800110c <alarmEnableISR>
 8001052:	0003      	movs	r3, r0
 8001054:	7023      	strb	r3, [r4, #0]
}
 8001056:	e025      	b.n	80010a4 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8001058:	2380      	movs	r3, #128	@ 0x80
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	1dba      	adds	r2, r7, #6
 800105e:	8812      	ldrh	r2, [r2, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d106      	bne.n	8001072 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 8001064:	230f      	movs	r3, #15
 8001066:	18fc      	adds	r4, r7, r3
 8001068:	f000 f884 	bl	8001174 <alarmSetISR>
 800106c:	0003      	movs	r3, r0
 800106e:	7023      	strb	r3, [r4, #0]
}
 8001070:	e018      	b.n	80010a4 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 8001072:	2201      	movs	r2, #1
 8001074:	1dbb      	adds	r3, r7, #6
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	4293      	cmp	r3, r2
 800107a:	d106      	bne.n	800108a <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 800107c:	230f      	movs	r3, #15
 800107e:	18fc      	adds	r4, r7, r3
 8001080:	f000 f954 	bl	800132c <hourSetISR>
 8001084:	0003      	movs	r3, r0
 8001086:	7023      	strb	r3, [r4, #0]
}
 8001088:	e00c      	b.n	80010a4 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 800108a:	2202      	movs	r2, #2
 800108c:	1dbb      	adds	r3, r7, #6
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	4293      	cmp	r3, r2
 8001092:	d106      	bne.n	80010a2 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 8001094:	230f      	movs	r3, #15
 8001096:	18fc      	adds	r4, r7, r3
 8001098:	f000 f974 	bl	8001384 <minuteSetISR>
 800109c:	0003      	movs	r3, r0
 800109e:	7023      	strb	r3, [r4, #0]
}
 80010a0:	e000      	b.n	80010a4 <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 80010a2:	46c0      	nop			@ (mov r8, r8)
}
 80010a4:	46c0      	nop			@ (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b005      	add	sp, #20
 80010aa:	bd90      	pop	{r4, r7, pc}

080010ac <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 80010b2:	1dfb      	adds	r3, r7, #7
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 80010b8:	f7ff fed0 	bl	8000e5c <updateAndDisplayTime>

	sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 80010bc:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <displayButtonISR+0x50>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <displayButtonISR+0x54>)
 80010c2:	6819      	ldr	r1, [r3, #0]
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <displayButtonISR+0x58>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	001a      	movs	r2, r3
 80010ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <displayButtonISR+0x5c>)
 80010cc:	5c9b      	ldrb	r3, [r3, r2]
 80010ce:	001a      	movs	r2, r3
 80010d0:	f000 fc02 	bl	80018d8 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <displayButtonISR+0x58>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d903      	bls.n	80010e4 <displayButtonISR+0x38>
		displayToggle = 0;
 80010dc:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <displayButtonISR+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	e005      	b.n	80010f0 <displayButtonISR+0x44>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <displayButtonISR+0x58>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <displayButtonISR+0x58>)
 80010ee:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	781b      	ldrb	r3, [r3, #0]

}
 80010f4:	0018      	movs	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b002      	add	sp, #8
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000028 	.word	0x20000028
 8001100:	2000002c 	.word	0x2000002c
 8001104:	20000070 	.word	0x20000070
 8001108:	08005ed4 	.word	0x08005ed4

0800110c <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8001118:	4b14      	ldr	r3, [pc, #80]	@ (800116c <alarmEnableISR+0x60>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2201      	movs	r2, #1
 800111e:	4053      	eors	r3, r2
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00b      	beq.n	800113e <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 8001126:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <alarmEnableISR+0x64>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2280      	movs	r2, #128	@ 0x80
 800112c:	0151      	lsls	r1, r2, #5
 800112e:	2201      	movs	r2, #1
 8001130:	0018      	movs	r0, r3
 8001132:	f001 fd76 	bl	8002c22 <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 8001136:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <alarmEnableISR+0x60>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	e010      	b.n	8001160 <alarmEnableISR+0x54>

		//printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
								//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 800113e:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <alarmEnableISR+0x60>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d00b      	beq.n	800115e <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 8001146:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <alarmEnableISR+0x64>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2280      	movs	r2, #128	@ 0x80
 800114c:	0151      	lsls	r1, r2, #5
 800114e:	2200      	movs	r2, #0
 8001150:	0018      	movs	r0, r3
 8001152:	f001 fd66 	bl	8002c22 <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 8001156:	4b05      	ldr	r3, [pc, #20]	@ (800116c <alarmEnableISR+0x60>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	e000      	b.n	8001160 <alarmEnableISR+0x54>

		//printf("User alarm disabled.\n\r");
	}
	else {
		__NOP();							//Code should never reach here.
 800115e:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	781b      	ldrb	r3, [r3, #0]

}
 8001164:	0018      	movs	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	b002      	add	sp, #8
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000071 	.word	0x20000071
 8001170:	20000004 	.word	0x20000004

08001174 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
	//printf("Enter user alarm set ISR.\n\r");

	//printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
			//userAlarmTime.Minutes, userAlarmTime.Seconds);

	HAL_StatusTypeDef halRet = HAL_OK;
 800117a:	1cbb      	adds	r3, r7, #2
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for switch debounce
	 */

	// First wait for button to deactivate again
	while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_SET);
 8001180:	46c0      	nop			@ (mov r8, r8)
 8001182:	4b64      	ldr	r3, [pc, #400]	@ (8001314 <alarmSetISR+0x1a0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2280      	movs	r2, #128	@ 0x80
 8001188:	0212      	lsls	r2, r2, #8
 800118a:	0011      	movs	r1, r2
 800118c:	0018      	movs	r0, r3
 800118e:	f001 fd2b 	bl	8002be8 <HAL_GPIO_ReadPin>
 8001192:	0003      	movs	r3, r0
 8001194:	2b01      	cmp	r3, #1
 8001196:	d1f4      	bne.n	8001182 <alarmSetISR+0xe>

	// Go through debounce
	HAL_TIM_Base_Stop(timerDelay);
 8001198:	4b5f      	ldr	r3, [pc, #380]	@ (8001318 <alarmSetISR+0x1a4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	0018      	movs	r0, r3
 800119e:	f004 f847 	bl	8005230 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80011a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001318 <alarmSetISR+0x1a4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	0018      	movs	r0, r3
 80011a8:	f003 fff6 	bl	8005198 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80011ac:	4b5a      	ldr	r3, [pc, #360]	@ (8001318 <alarmSetISR+0x1a4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b4:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 8));
 80011b6:	4b58      	ldr	r3, [pc, #352]	@ (8001318 <alarmSetISR+0x1a4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	1ad2      	subs	r2, r2, r3
 80011c2:	2380      	movs	r3, #128	@ 0x80
 80011c4:	019b      	lsls	r3, r3, #6
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d9f5      	bls.n	80011b6 <alarmSetISR+0x42>


	/*
	 *  Poll for 1 second to see if the alarm set button is pressed again
	 */
	HAL_TIM_Base_Stop(timerDelay);
 80011ca:	4b53      	ldr	r3, [pc, #332]	@ (8001318 <alarmSetISR+0x1a4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	0018      	movs	r0, r3
 80011d0:	f004 f82e 	bl	8005230 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80011d4:	4b50      	ldr	r3, [pc, #320]	@ (8001318 <alarmSetISR+0x1a4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	0018      	movs	r0, r3
 80011da:	f003 ffdd 	bl	8005198 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80011de:	4b4e      	ldr	r3, [pc, #312]	@ (8001318 <alarmSetISR+0x1a4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e6:	607b      	str	r3, [r7, #4]

	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 80011e8:	e00d      	b.n	8001206 <alarmSetISR+0x92>

		if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 80011ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001314 <alarmSetISR+0x1a0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2280      	movs	r2, #128	@ 0x80
 80011f0:	0212      	lsls	r2, r2, #8
 80011f2:	0011      	movs	r1, r2
 80011f4:	0018      	movs	r0, r3
 80011f6:	f001 fcf7 	bl	8002be8 <HAL_GPIO_ReadPin>
 80011fa:	1e03      	subs	r3, r0, #0
 80011fc:	d103      	bne.n	8001206 <alarmSetISR+0x92>
			alarmSetMode = true;
 80011fe:	4b47      	ldr	r3, [pc, #284]	@ (800131c <alarmSetISR+0x1a8>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
//			HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
			break;
 8001204:	e009      	b.n	800121a <alarmSetISR+0xa6>
	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 8001206:	4b44      	ldr	r3, [pc, #272]	@ (8001318 <alarmSetISR+0x1a4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	1ad2      	subs	r2, r2, r3
 8001212:	2380      	movs	r3, #128	@ 0x80
 8001214:	025b      	lsls	r3, r3, #9
 8001216:	429a      	cmp	r2, r3
 8001218:	d9e7      	bls.n	80011ea <alarmSetISR+0x76>
		}

	}

	// Go through debounce once again
	HAL_TIM_Base_Stop(timerDelay);
 800121a:	4b3f      	ldr	r3, [pc, #252]	@ (8001318 <alarmSetISR+0x1a4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	0018      	movs	r0, r3
 8001220:	f004 f806 	bl	8005230 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001224:	4b3c      	ldr	r3, [pc, #240]	@ (8001318 <alarmSetISR+0x1a4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	0018      	movs	r0, r3
 800122a:	f003 ffb5 	bl	8005198 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 800122e:	4b3a      	ldr	r3, [pc, #232]	@ (8001318 <alarmSetISR+0x1a4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001236:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 4));
 8001238:	4b37      	ldr	r3, [pc, #220]	@ (8001318 <alarmSetISR+0x1a4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	1ad2      	subs	r2, r2, r3
 8001244:	2380      	movs	r3, #128	@ 0x80
 8001246:	01db      	lsls	r3, r3, #7
 8001248:	429a      	cmp	r2, r3
 800124a:	d9f5      	bls.n	8001238 <alarmSetISR+0xc4>
	/*
	 * Then, if we are in alarm set mode, go through the
	 * alarm set process until the button is pressed again
	 */

	HAL_TIM_Base_Stop(timerDelay);
 800124c:	4b32      	ldr	r3, [pc, #200]	@ (8001318 <alarmSetISR+0x1a4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	0018      	movs	r0, r3
 8001252:	f003 ffed 	bl	8005230 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001256:	4b30      	ldr	r3, [pc, #192]	@ (8001318 <alarmSetISR+0x1a4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	0018      	movs	r0, r3
 800125c:	f003 ff9c 	bl	8005198 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001260:	4b2d      	ldr	r3, [pc, #180]	@ (8001318 <alarmSetISR+0x1a4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001268:	607b      	str	r3, [r7, #4]

	if(alarmSetMode) {
 800126a:	4b2c      	ldr	r3, [pc, #176]	@ (800131c <alarmSetISR+0x1a8>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d046      	beq.n	8001300 <alarmSetISR+0x18c>

		bool displayBlink = false;
 8001272:	1cfb      	adds	r3, r7, #3
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			updateAndDisplayAlarm();
 8001278:	f7ff fe0c 	bl	8000e94 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 800127c:	4b26      	ldr	r3, [pc, #152]	@ (8001318 <alarmSetISR+0x1a4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	1ad2      	subs	r2, r2, r3
 8001288:	2380      	movs	r3, #128	@ 0x80
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	429a      	cmp	r2, r3
 800128e:	d31e      	bcc.n	80012ce <alarmSetISR+0x15a>

//				HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

				sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 8001290:	4b23      	ldr	r3, [pc, #140]	@ (8001320 <alarmSetISR+0x1ac>)
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <alarmSetISR+0x1b0>)
 8001296:	6819      	ldr	r1, [r3, #0]
 8001298:	1cfb      	adds	r3, r7, #3
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4a22      	ldr	r2, [pc, #136]	@ (8001328 <alarmSetISR+0x1b4>)
 800129e:	5cd3      	ldrb	r3, [r2, r3]
 80012a0:	001a      	movs	r2, r3
 80012a2:	f000 fb19 	bl	80018d8 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 80012a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <alarmSetISR+0x1a4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ae:	607b      	str	r3, [r7, #4]
				displayBlink = !displayBlink;
 80012b0:	1cfb      	adds	r3, r7, #3
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	1e5a      	subs	r2, r3, #1
 80012b6:	4193      	sbcs	r3, r2
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2201      	movs	r2, #1
 80012bc:	4053      	eors	r3, r2
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	001a      	movs	r2, r3
 80012c2:	1cfb      	adds	r3, r7, #3
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	781a      	ldrb	r2, [r3, #0]
 80012c8:	2101      	movs	r1, #1
 80012ca:	400a      	ands	r2, r1
 80012cc:	701a      	strb	r2, [r3, #0]

			}

		}while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET);
 80012ce:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <alarmSetISR+0x1a0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2280      	movs	r2, #128	@ 0x80
 80012d4:	0212      	lsls	r2, r2, #8
 80012d6:	0011      	movs	r1, r2
 80012d8:	0018      	movs	r0, r3
 80012da:	f001 fc85 	bl	8002be8 <HAL_GPIO_ReadPin>
 80012de:	1e03      	subs	r3, r0, #0
 80012e0:	d1ca      	bne.n	8001278 <alarmSetISR+0x104>

//		HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_RESET);

		sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 80012e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <alarmSetISR+0x1ac>)
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <alarmSetISR+0x1b0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	225a      	movs	r2, #90	@ 0x5a
 80012ec:	0019      	movs	r1, r3
 80012ee:	f000 faf3 	bl	80018d8 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <alarmSetISR+0x1a4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	0018      	movs	r0, r3
 80012f8:	f003 ff9a 	bl	8005230 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 80012fc:	f7ff fdae 	bl	8000e5c <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <alarmSetISR+0x1a8>)
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 8001306:	1cbb      	adds	r3, r7, #2
 8001308:	781b      	ldrb	r3, [r3, #0]

}
 800130a:	0018      	movs	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	b002      	add	sp, #8
 8001310:	bd80      	pop	{r7, pc}
 8001312:	46c0      	nop			@ (mov r8, r8)
 8001314:	20000000 	.word	0x20000000
 8001318:	20000024 	.word	0x20000024
 800131c:	2000021c 	.word	0x2000021c
 8001320:	20000028 	.word	0x20000028
 8001324:	2000002c 	.word	0x2000002c
 8001328:	08005ed4 	.word	0x08005ed4

0800132c <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0

//	printf("Entered hour set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);


	HAL_StatusTypeDef halRet = HAL_OK;
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001338:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <hourSetISR+0x48>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d002      	beq.n	8001346 <hourSetISR+0x1a>

		alarmHourInc();
 8001340:	f000 f84c 	bl	80013dc <alarmHourInc>
 8001344:	e00f      	b.n	8001366 <hourSetISR+0x3a>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 8001346:	f000 f877 	bl	8001438 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 800134a:	490b      	ldr	r1, [pc, #44]	@ (8001378 <hourSetISR+0x4c>)
 800134c:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <hourSetISR+0x50>)
 800134e:	2200      	movs	r2, #0
 8001350:	0018      	movs	r0, r3
 8001352:	f003 fa25 	bl	80047a0 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8001356:	f7ff fd81 	bl	8000e5c <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 800135a:	4a09      	ldr	r2, [pc, #36]	@ (8001380 <hourSetISR+0x54>)
 800135c:	4906      	ldr	r1, [pc, #24]	@ (8001378 <hourSetISR+0x4c>)
 800135e:	4b07      	ldr	r3, [pc, #28]	@ (800137c <hourSetISR+0x50>)
 8001360:	0018      	movs	r0, r3
 8001362:	f7ff f9af 	bl	80006c4 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 8001366:	1dfb      	adds	r3, r7, #7
 8001368:	781b      	ldrb	r3, [r3, #0]

}
 800136a:	0018      	movs	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	b002      	add	sp, #8
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			@ (mov r8, r8)
 8001374:	2000021c 	.word	0x2000021c
 8001378:	200001f0 	.word	0x200001f0
 800137c:	2000012c 	.word	0x2000012c
 8001380:	20000204 	.word	0x20000204

08001384 <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0

//	printf("Entered minute set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

	HAL_StatusTypeDef halRet = HAL_OK;
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001390:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <minuteSetISR+0x48>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <minuteSetISR+0x1a>

		alarmMinuteInc();
 8001398:	f000 f888 	bl	80014ac <alarmMinuteInc>
 800139c:	e00f      	b.n	80013be <minuteSetISR+0x3a>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 800139e:	f000 f8a3 	bl	80014e8 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80013a2:	490b      	ldr	r1, [pc, #44]	@ (80013d0 <minuteSetISR+0x4c>)
 80013a4:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <minuteSetISR+0x50>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	0018      	movs	r0, r3
 80013aa:	f003 f9f9 	bl	80047a0 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80013ae:	f7ff fd55 	bl	8000e5c <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80013b2:	4a09      	ldr	r2, [pc, #36]	@ (80013d8 <minuteSetISR+0x54>)
 80013b4:	4906      	ldr	r1, [pc, #24]	@ (80013d0 <minuteSetISR+0x4c>)
 80013b6:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <minuteSetISR+0x50>)
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff f983 	bl	80006c4 <getRTCTime>

		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 80013be:	1dfb      	adds	r3, r7, #7
 80013c0:	781b      	ldrb	r3, [r3, #0]
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b002      	add	sp, #8
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	2000021c 	.word	0x2000021c
 80013d0:	200001f0 	.word	0x200001f0
 80013d4:	2000012c 	.word	0x2000012c
 80013d8:	20000204 	.word	0x20000204

080013dc <alarmHourInc>:

void alarmHourInc(void) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 80013e0:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <alarmHourInc+0x58>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b0b      	cmp	r3, #11
 80013e6:	d903      	bls.n	80013f0 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <alarmHourInc+0x58>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 80013ee:	e01e      	b.n	800142e <alarmHourInc+0x52>
	else if(userAlarmTime.Hours == 11) {
 80013f0:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <alarmHourInc+0x58>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b0b      	cmp	r3, #11
 80013f6:	d10e      	bne.n	8001416 <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80013f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <alarmHourInc+0x58>)
 80013fa:	78db      	ldrb	r3, [r3, #3]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d103      	bne.n	8001408 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <alarmHourInc+0x58>)
 8001402:	2201      	movs	r2, #1
 8001404:	70da      	strb	r2, [r3, #3]
 8001406:	e002      	b.n	800140e <alarmHourInc+0x32>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001408:	4b0a      	ldr	r3, [pc, #40]	@ (8001434 <alarmHourInc+0x58>)
 800140a:	2200      	movs	r2, #0
 800140c:	70da      	strb	r2, [r3, #3]
		userAlarmTime.Hours = 12;
 800140e:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <alarmHourInc+0x58>)
 8001410:	220c      	movs	r2, #12
 8001412:	701a      	strb	r2, [r3, #0]
}
 8001414:	e00b      	b.n	800142e <alarmHourInc+0x52>
	else if(userAlarmTime.Hours < 11) {
 8001416:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <alarmHourInc+0x58>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b0a      	cmp	r3, #10
 800141c:	d806      	bhi.n	800142c <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 800141e:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <alarmHourInc+0x58>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	3301      	adds	r3, #1
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b03      	ldr	r3, [pc, #12]	@ (8001434 <alarmHourInc+0x58>)
 8001428:	701a      	strb	r2, [r3, #0]
}
 800142a:	e000      	b.n	800142e <alarmHourInc+0x52>
		__NOP();
 800142c:	46c0      	nop			@ (mov r8, r8)
}
 800142e:	46c0      	nop			@ (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000208 	.word	0x20000208

08001438 <currHourInc>:

void currHourInc(void) {
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 800143c:	4a17      	ldr	r2, [pc, #92]	@ (800149c <currHourInc+0x64>)
 800143e:	4918      	ldr	r1, [pc, #96]	@ (80014a0 <currHourInc+0x68>)
 8001440:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <currHourInc+0x6c>)
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff f93e 	bl	80006c4 <getRTCTime>

	if(currTime.Hours >= 12) {
 8001448:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <currHourInc+0x68>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b0b      	cmp	r3, #11
 800144e:	d903      	bls.n	8001458 <currHourInc+0x20>
		currTime.Hours = 1;
 8001450:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <currHourInc+0x68>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 8001456:	e01e      	b.n	8001496 <currHourInc+0x5e>
	else if(currTime.Hours == 11) {
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <currHourInc+0x68>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b0b      	cmp	r3, #11
 800145e:	d10e      	bne.n	800147e <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <currHourInc+0x68>)
 8001462:	78db      	ldrb	r3, [r3, #3]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d103      	bne.n	8001470 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001468:	4b0d      	ldr	r3, [pc, #52]	@ (80014a0 <currHourInc+0x68>)
 800146a:	2201      	movs	r2, #1
 800146c:	70da      	strb	r2, [r3, #3]
 800146e:	e002      	b.n	8001476 <currHourInc+0x3e>
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001470:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <currHourInc+0x68>)
 8001472:	2200      	movs	r2, #0
 8001474:	70da      	strb	r2, [r3, #3]
		currTime.Hours = 12;
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <currHourInc+0x68>)
 8001478:	220c      	movs	r2, #12
 800147a:	701a      	strb	r2, [r3, #0]
}
 800147c:	e00b      	b.n	8001496 <currHourInc+0x5e>
	else if(userAlarmTime.Hours < 11) {
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <currHourInc+0x70>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b0a      	cmp	r3, #10
 8001484:	d806      	bhi.n	8001494 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <currHourInc+0x68>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	3301      	adds	r3, #1
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <currHourInc+0x68>)
 8001490:	701a      	strb	r2, [r3, #0]
}
 8001492:	e000      	b.n	8001496 <currHourInc+0x5e>
		__NOP();
 8001494:	46c0      	nop			@ (mov r8, r8)
}
 8001496:	46c0      	nop			@ (mov r8, r8)
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000204 	.word	0x20000204
 80014a0:	200001f0 	.word	0x200001f0
 80014a4:	2000012c 	.word	0x2000012c
 80014a8:	20000208 	.word	0x20000208

080014ac <alarmMinuteInc>:

void alarmMinuteInc(void) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <alarmMinuteInc+0x38>)
 80014b2:	785b      	ldrb	r3, [r3, #1]
 80014b4:	2b3a      	cmp	r3, #58	@ 0x3a
 80014b6:	d905      	bls.n	80014c4 <alarmMinuteInc+0x18>
		alarmHourInc();
 80014b8:	f7ff ff90 	bl	80013dc <alarmHourInc>
		userAlarmTime.Minutes = 0;
 80014bc:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <alarmMinuteInc+0x38>)
 80014be:	2200      	movs	r2, #0
 80014c0:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 80014c2:	e00b      	b.n	80014dc <alarmMinuteInc+0x30>
	else if(userAlarmTime.Minutes < 59) {
 80014c4:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <alarmMinuteInc+0x38>)
 80014c6:	785b      	ldrb	r3, [r3, #1]
 80014c8:	2b3a      	cmp	r3, #58	@ 0x3a
 80014ca:	d806      	bhi.n	80014da <alarmMinuteInc+0x2e>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 80014cc:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <alarmMinuteInc+0x38>)
 80014ce:	785b      	ldrb	r3, [r3, #1]
 80014d0:	3301      	adds	r3, #1
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <alarmMinuteInc+0x38>)
 80014d6:	705a      	strb	r2, [r3, #1]
}
 80014d8:	e000      	b.n	80014dc <alarmMinuteInc+0x30>
		__NOP();
 80014da:	46c0      	nop			@ (mov r8, r8)
}
 80014dc:	46c0      	nop			@ (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	20000208 	.word	0x20000208

080014e8 <currMinuteInc>:

void currMinuteInc(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 80014ec:	4a0f      	ldr	r2, [pc, #60]	@ (800152c <currMinuteInc+0x44>)
 80014ee:	4910      	ldr	r1, [pc, #64]	@ (8001530 <currMinuteInc+0x48>)
 80014f0:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <currMinuteInc+0x4c>)
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7ff f8e6 	bl	80006c4 <getRTCTime>

	if(currTime.Minutes >= 59) {
 80014f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001530 <currMinuteInc+0x48>)
 80014fa:	785b      	ldrb	r3, [r3, #1]
 80014fc:	2b3a      	cmp	r3, #58	@ 0x3a
 80014fe:	d905      	bls.n	800150c <currMinuteInc+0x24>
		currHourInc();
 8001500:	f7ff ff9a 	bl	8001438 <currHourInc>
		currTime.Minutes = 0;
 8001504:	4b0a      	ldr	r3, [pc, #40]	@ (8001530 <currMinuteInc+0x48>)
 8001506:	2200      	movs	r2, #0
 8001508:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 800150a:	e00b      	b.n	8001524 <currMinuteInc+0x3c>
	else if(currTime.Minutes < 59) {
 800150c:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <currMinuteInc+0x48>)
 800150e:	785b      	ldrb	r3, [r3, #1]
 8001510:	2b3a      	cmp	r3, #58	@ 0x3a
 8001512:	d806      	bhi.n	8001522 <currMinuteInc+0x3a>
		currTime.Minutes = currTime.Minutes + 1;
 8001514:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <currMinuteInc+0x48>)
 8001516:	785b      	ldrb	r3, [r3, #1]
 8001518:	3301      	adds	r3, #1
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b04      	ldr	r3, [pc, #16]	@ (8001530 <currMinuteInc+0x48>)
 800151e:	705a      	strb	r2, [r3, #1]
}
 8001520:	e000      	b.n	8001524 <currMinuteInc+0x3c>
		__NOP();
 8001522:	46c0      	nop			@ (mov r8, r8)
}
 8001524:	46c0      	nop			@ (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	46c0      	nop			@ (mov r8, r8)
 800152c:	20000204 	.word	0x20000204
 8001530:	200001f0 	.word	0x200001f0
 8001534:	2000012c 	.word	0x2000012c

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001540:	46c0      	nop			@ (mov r8, r8)
 8001542:	e7fd      	b.n	8001540 <Error_Handler+0x8>

08001544 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM,
					uint32_t tim_PWM_CHANNEL) {
 8001544:	b5b0      	push	{r4, r5, r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0
 800154a:	0005      	movs	r5, r0
 800154c:	000c      	movs	r4, r1
 800154e:	0010      	movs	r0, r2
 8001550:	0019      	movs	r1, r3
 8001552:	1dbb      	adds	r3, r7, #6
 8001554:	1c2a      	adds	r2, r5, #0
 8001556:	801a      	strh	r2, [r3, #0]
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	1c22      	adds	r2, r4, #0
 800155c:	801a      	strh	r2, [r3, #0]
 800155e:	1cbb      	adds	r3, r7, #2
 8001560:	1c02      	adds	r2, r0, #0
 8001562:	801a      	strh	r2, [r3, #0]
 8001564:	003b      	movs	r3, r7
 8001566:	1c0a      	adds	r2, r1, #0
 8001568:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 800156a:	4b7a      	ldr	r3, [pc, #488]	@ (8001754 <sevSeg_Init+0x210>)
 800156c:	1dba      	adds	r2, r7, #6
 800156e:	8812      	ldrh	r2, [r2, #0]
 8001570:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8001572:	4b79      	ldr	r3, [pc, #484]	@ (8001758 <sevSeg_Init+0x214>)
 8001574:	1d3a      	adds	r2, r7, #4
 8001576:	8812      	ldrh	r2, [r2, #0]
 8001578:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 800157a:	4b78      	ldr	r3, [pc, #480]	@ (800175c <sevSeg_Init+0x218>)
 800157c:	1cba      	adds	r2, r7, #2
 800157e:	8812      	ldrh	r2, [r2, #0]
 8001580:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8001582:	4b77      	ldr	r3, [pc, #476]	@ (8001760 <sevSeg_Init+0x21c>)
 8001584:	003a      	movs	r2, r7
 8001586:	8812      	ldrh	r2, [r2, #0]
 8001588:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 800158a:	4a76      	ldr	r2, [pc, #472]	@ (8001764 <sevSeg_Init+0x220>)
 800158c:	2330      	movs	r3, #48	@ 0x30
 800158e:	18fb      	adds	r3, r7, r3
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	8013      	strh	r3, [r2, #0]

	for(int i = 0; i < 5; i++) {
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
 8001598:	e00b      	b.n	80015b2 <sevSeg_Init+0x6e>
		portArray[i] = GPIOPortArray[i];
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015a0:	18d3      	adds	r3, r2, r3
 80015a2:	6819      	ldr	r1, [r3, #0]
 80015a4:	4b70      	ldr	r3, [pc, #448]	@ (8001768 <sevSeg_Init+0x224>)
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	0092      	lsls	r2, r2, #2
 80015aa:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	3301      	adds	r3, #1
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	ddf0      	ble.n	800159a <sevSeg_Init+0x56>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 80015b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001768 <sevSeg_Init+0x224>)
 80015ba:	6918      	ldr	r0, [r3, #16]
 80015bc:	4b69      	ldr	r3, [pc, #420]	@ (8001764 <sevSeg_Init+0x220>)
 80015be:	8819      	ldrh	r1, [r3, #0]
 80015c0:	4b6a      	ldr	r3, [pc, #424]	@ (800176c <sevSeg_Init+0x228>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	001a      	movs	r2, r3
 80015c6:	f001 fb2c 	bl	8002c22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 80015ca:	4b67      	ldr	r3, [pc, #412]	@ (8001768 <sevSeg_Init+0x224>)
 80015cc:	6918      	ldr	r0, [r3, #16]
 80015ce:	4b65      	ldr	r3, [pc, #404]	@ (8001764 <sevSeg_Init+0x220>)
 80015d0:	8819      	ldrh	r1, [r3, #0]
 80015d2:	4b66      	ldr	r3, [pc, #408]	@ (800176c <sevSeg_Init+0x228>)
 80015d4:	785b      	ldrb	r3, [r3, #1]
 80015d6:	001a      	movs	r2, r3
 80015d8:	f001 fb23 	bl	8002c22 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80015dc:	4b62      	ldr	r3, [pc, #392]	@ (8001768 <sevSeg_Init+0x224>)
 80015de:	6898      	ldr	r0, [r3, #8]
 80015e0:	4b5e      	ldr	r3, [pc, #376]	@ (800175c <sevSeg_Init+0x218>)
 80015e2:	8819      	ldrh	r1, [r3, #0]
 80015e4:	4b61      	ldr	r3, [pc, #388]	@ (800176c <sevSeg_Init+0x228>)
 80015e6:	785b      	ldrb	r3, [r3, #1]
 80015e8:	001a      	movs	r2, r3
 80015ea:	f001 fb1a 	bl	8002c22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80015ee:	4b5e      	ldr	r3, [pc, #376]	@ (8001768 <sevSeg_Init+0x224>)
 80015f0:	6898      	ldr	r0, [r3, #8]
 80015f2:	4b5a      	ldr	r3, [pc, #360]	@ (800175c <sevSeg_Init+0x218>)
 80015f4:	8819      	ldrh	r1, [r3, #0]
 80015f6:	4b5d      	ldr	r3, [pc, #372]	@ (800176c <sevSeg_Init+0x228>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	001a      	movs	r2, r3
 80015fc:	f001 fb11 	bl	8002c22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8001600:	4b59      	ldr	r3, [pc, #356]	@ (8001768 <sevSeg_Init+0x224>)
 8001602:	68d8      	ldr	r0, [r3, #12]
 8001604:	4b56      	ldr	r3, [pc, #344]	@ (8001760 <sevSeg_Init+0x21c>)
 8001606:	8819      	ldrh	r1, [r3, #0]
 8001608:	4b58      	ldr	r3, [pc, #352]	@ (800176c <sevSeg_Init+0x228>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	001a      	movs	r2, r3
 800160e:	f001 fb08 	bl	8002c22 <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(htim_PWM, tim_PWM_CHANNEL, 50);
 8001612:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001616:	2232      	movs	r2, #50	@ 0x32
 8001618:	0018      	movs	r0, r3
 800161a:	f000 f95d 	bl	80018d8 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 800161e:	2308      	movs	r3, #8
 8001620:	18fb      	adds	r3, r7, r3
 8001622:	4a53      	ldr	r2, [pc, #332]	@ (8001770 <sevSeg_Init+0x22c>)
 8001624:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	e038      	b.n	800169e <sevSeg_Init+0x15a>

		sendByte = hofSymb[i];
 800162c:	231b      	movs	r3, #27
 800162e:	18fb      	adds	r3, r7, r3
 8001630:	2208      	movs	r2, #8
 8001632:	18b9      	adds	r1, r7, r2
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	188a      	adds	r2, r1, r2
 8001638:	7812      	ldrb	r2, [r2, #0]
 800163a:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	e027      	b.n	8001692 <sevSeg_Init+0x14e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001642:	4b49      	ldr	r3, [pc, #292]	@ (8001768 <sevSeg_Init+0x224>)
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	4b43      	ldr	r3, [pc, #268]	@ (8001754 <sevSeg_Init+0x210>)
 8001648:	8819      	ldrh	r1, [r3, #0]
 800164a:	241b      	movs	r4, #27
 800164c:	193b      	adds	r3, r7, r4
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2201      	movs	r2, #1
 8001652:	4013      	ands	r3, r2
 8001654:	4a45      	ldr	r2, [pc, #276]	@ (800176c <sevSeg_Init+0x228>)
 8001656:	5cd3      	ldrb	r3, [r2, r3]
 8001658:	001a      	movs	r2, r3
 800165a:	f001 fae2 	bl	8002c22 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 800165e:	4b42      	ldr	r3, [pc, #264]	@ (8001768 <sevSeg_Init+0x224>)
 8001660:	6858      	ldr	r0, [r3, #4]
 8001662:	4b3d      	ldr	r3, [pc, #244]	@ (8001758 <sevSeg_Init+0x214>)
 8001664:	8819      	ldrh	r1, [r3, #0]
 8001666:	4b41      	ldr	r3, [pc, #260]	@ (800176c <sevSeg_Init+0x228>)
 8001668:	785b      	ldrb	r3, [r3, #1]
 800166a:	001a      	movs	r2, r3
 800166c:	f001 fad9 	bl	8002c22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001670:	4b3d      	ldr	r3, [pc, #244]	@ (8001768 <sevSeg_Init+0x224>)
 8001672:	6858      	ldr	r0, [r3, #4]
 8001674:	4b38      	ldr	r3, [pc, #224]	@ (8001758 <sevSeg_Init+0x214>)
 8001676:	8819      	ldrh	r1, [r3, #0]
 8001678:	4b3c      	ldr	r3, [pc, #240]	@ (800176c <sevSeg_Init+0x228>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	001a      	movs	r2, r3
 800167e:	f001 fad0 	bl	8002c22 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001682:	193b      	adds	r3, r7, r4
 8001684:	193a      	adds	r2, r7, r4
 8001686:	7812      	ldrb	r2, [r2, #0]
 8001688:	0852      	lsrs	r2, r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	3301      	adds	r3, #1
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	2b07      	cmp	r3, #7
 8001696:	ddd4      	ble.n	8001642 <sevSeg_Init+0xfe>
	for(int i = 0; i <= 3; i++) {
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3301      	adds	r3, #1
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	ddc3      	ble.n	800162c <sevSeg_Init+0xe8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80016a4:	4b30      	ldr	r3, [pc, #192]	@ (8001768 <sevSeg_Init+0x224>)
 80016a6:	6898      	ldr	r0, [r3, #8]
 80016a8:	4b2c      	ldr	r3, [pc, #176]	@ (800175c <sevSeg_Init+0x218>)
 80016aa:	8819      	ldrh	r1, [r3, #0]
 80016ac:	4b2f      	ldr	r3, [pc, #188]	@ (800176c <sevSeg_Init+0x228>)
 80016ae:	785b      	ldrb	r3, [r3, #1]
 80016b0:	001a      	movs	r2, r3
 80016b2:	f001 fab6 	bl	8002c22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80016b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001768 <sevSeg_Init+0x224>)
 80016b8:	6898      	ldr	r0, [r3, #8]
 80016ba:	4b28      	ldr	r3, [pc, #160]	@ (800175c <sevSeg_Init+0x218>)
 80016bc:	8819      	ldrh	r1, [r3, #0]
 80016be:	4b2b      	ldr	r3, [pc, #172]	@ (800176c <sevSeg_Init+0x228>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	001a      	movs	r2, r3
 80016c4:	f001 faad 	bl	8002c22 <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 80016c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016ca:	0018      	movs	r0, r3
 80016cc:	f003 fdb0 	bl	8005230 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 80016d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016d2:	0018      	movs	r0, r3
 80016d4:	f003 fd60 	bl	8005198 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 80016d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016de:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 8)){ timerVal = __HAL_TIM_GET_COUNTER(htim); }
 80016e0:	e003      	b.n	80016ea <sevSeg_Init+0x1a6>
 80016e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	1ad2      	subs	r2, r2, r3
 80016f4:	2380      	movs	r3, #128	@ 0x80
 80016f6:	019b      	lsls	r3, r3, #6
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d3f2      	bcc.n	80016e2 <sevSeg_Init+0x19e>

	HAL_TIM_Base_Stop(htim);
 80016fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016fe:	0018      	movs	r0, r3
 8001700:	f003 fd96 	bl	8005230 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001704:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <sevSeg_Init+0x224>)
 8001706:	6918      	ldr	r0, [r3, #16]
 8001708:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <sevSeg_Init+0x220>)
 800170a:	8819      	ldrh	r1, [r3, #0]
 800170c:	4b17      	ldr	r3, [pc, #92]	@ (800176c <sevSeg_Init+0x228>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	001a      	movs	r2, r3
 8001712:	f001 fa86 	bl	8002c22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001716:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <sevSeg_Init+0x224>)
 8001718:	6918      	ldr	r0, [r3, #16]
 800171a:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <sevSeg_Init+0x220>)
 800171c:	8819      	ldrh	r1, [r3, #0]
 800171e:	4b13      	ldr	r3, [pc, #76]	@ (800176c <sevSeg_Init+0x228>)
 8001720:	785b      	ldrb	r3, [r3, #1]
 8001722:	001a      	movs	r2, r3
 8001724:	f001 fa7d 	bl	8002c22 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001728:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <sevSeg_Init+0x224>)
 800172a:	6898      	ldr	r0, [r3, #8]
 800172c:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <sevSeg_Init+0x218>)
 800172e:	8819      	ldrh	r1, [r3, #0]
 8001730:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <sevSeg_Init+0x228>)
 8001732:	785b      	ldrb	r3, [r3, #1]
 8001734:	001a      	movs	r2, r3
 8001736:	f001 fa74 	bl	8002c22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800173a:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <sevSeg_Init+0x224>)
 800173c:	6898      	ldr	r0, [r3, #8]
 800173e:	4b07      	ldr	r3, [pc, #28]	@ (800175c <sevSeg_Init+0x218>)
 8001740:	8819      	ldrh	r1, [r3, #0]
 8001742:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <sevSeg_Init+0x228>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	001a      	movs	r2, r3
 8001748:	f001 fa6b 	bl	8002c22 <HAL_GPIO_WritePin>

}
 800174c:	46c0      	nop			@ (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b008      	add	sp, #32
 8001752:	bdb0      	pop	{r4, r5, r7, pc}
 8001754:	2000021e 	.word	0x2000021e
 8001758:	20000220 	.word	0x20000220
 800175c:	20000222 	.word	0x20000222
 8001760:	20000224 	.word	0x20000224
 8001764:	20000226 	.word	0x20000226
 8001768:	20000030 	.word	0x20000030
 800176c:	20000044 	.word	0x20000044
 8001770:	471d3700 	.word	0x471d3700

08001774 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	210a      	movs	r1, #10
 8001782:	0018      	movs	r0, r3
 8001784:	f7fe fcbe 	bl	8000104 <__udivsi3>
 8001788:	0003      	movs	r3, r0
 800178a:	b2da      	uxtb	r2, r3
 800178c:	2408      	movs	r4, #8
 800178e:	193b      	adds	r3, r7, r4
 8001790:	701a      	strb	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	210a      	movs	r1, #10
 8001798:	0018      	movs	r0, r3
 800179a:	f7fe fd39 	bl	8000210 <__aeabi_uidivmod>
 800179e:	000b      	movs	r3, r1
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	193b      	adds	r3, r7, r4
 80017a4:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80017aa:	210a      	movs	r1, #10
 80017ac:	0018      	movs	r0, r3
 80017ae:	f7fe fca9 	bl	8000104 <__udivsi3>
 80017b2:	0003      	movs	r3, r0
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	193b      	adds	r3, r7, r4
 80017b8:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80017be:	210a      	movs	r1, #10
 80017c0:	0018      	movs	r0, r3
 80017c2:	f7fe fd25 	bl	8000210 <__aeabi_uidivmod>
 80017c6:	000b      	movs	r3, r1
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	193b      	adds	r3, r7, r4
 80017cc:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 80017ce:	2116      	movs	r1, #22
 80017d0:	187b      	adds	r3, r7, r1
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	78db      	ldrb	r3, [r3, #3]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d102      	bne.n	80017e4 <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 80017de:	187b      	adds	r3, r7, r1
 80017e0:	2202      	movs	r2, #2
 80017e2:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	e04f      	b.n	800188a <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 80017ea:	2308      	movs	r3, #8
 80017ec:	18fa      	adds	r2, r7, r3
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	18d3      	adds	r3, r2, r3
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	0019      	movs	r1, r3
 80017f6:	2417      	movs	r4, #23
 80017f8:	193b      	adds	r3, r7, r4
 80017fa:	4a30      	ldr	r2, [pc, #192]	@ (80018bc <sevSeg_updateDigits+0x148>)
 80017fc:	5c52      	ldrb	r2, [r2, r1]
 80017fe:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d110      	bne.n	8001828 <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	210a      	movs	r1, #10
 800180c:	0018      	movs	r0, r3
 800180e:	f7fe fc79 	bl	8000104 <__udivsi3>
 8001812:	0003      	movs	r3, r0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	001a      	movs	r2, r3
 8001818:	2316      	movs	r3, #22
 800181a:	18fb      	adds	r3, r7, r3
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	18d2      	adds	r2, r2, r3
 8001820:	193b      	adds	r3, r7, r4
 8001822:	4927      	ldr	r1, [pc, #156]	@ (80018c0 <sevSeg_updateDigits+0x14c>)
 8001824:	5c8a      	ldrb	r2, [r1, r2]
 8001826:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	e027      	b.n	800187e <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 800182e:	4b25      	ldr	r3, [pc, #148]	@ (80018c4 <sevSeg_updateDigits+0x150>)
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	4b25      	ldr	r3, [pc, #148]	@ (80018c8 <sevSeg_updateDigits+0x154>)
 8001834:	8819      	ldrh	r1, [r3, #0]
 8001836:	2417      	movs	r4, #23
 8001838:	193b      	adds	r3, r7, r4
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2201      	movs	r2, #1
 800183e:	4013      	ands	r3, r2
 8001840:	4a22      	ldr	r2, [pc, #136]	@ (80018cc <sevSeg_updateDigits+0x158>)
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	001a      	movs	r2, r3
 8001846:	f001 f9ec 	bl	8002c22 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 800184a:	4b1e      	ldr	r3, [pc, #120]	@ (80018c4 <sevSeg_updateDigits+0x150>)
 800184c:	6858      	ldr	r0, [r3, #4]
 800184e:	4b20      	ldr	r3, [pc, #128]	@ (80018d0 <sevSeg_updateDigits+0x15c>)
 8001850:	8819      	ldrh	r1, [r3, #0]
 8001852:	4b1e      	ldr	r3, [pc, #120]	@ (80018cc <sevSeg_updateDigits+0x158>)
 8001854:	785b      	ldrb	r3, [r3, #1]
 8001856:	001a      	movs	r2, r3
 8001858:	f001 f9e3 	bl	8002c22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 800185c:	4b19      	ldr	r3, [pc, #100]	@ (80018c4 <sevSeg_updateDigits+0x150>)
 800185e:	6858      	ldr	r0, [r3, #4]
 8001860:	4b1b      	ldr	r3, [pc, #108]	@ (80018d0 <sevSeg_updateDigits+0x15c>)
 8001862:	8819      	ldrh	r1, [r3, #0]
 8001864:	4b19      	ldr	r3, [pc, #100]	@ (80018cc <sevSeg_updateDigits+0x158>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	001a      	movs	r2, r3
 800186a:	f001 f9da 	bl	8002c22 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 800186e:	193b      	adds	r3, r7, r4
 8001870:	193a      	adds	r2, r7, r4
 8001872:	7812      	ldrb	r2, [r2, #0]
 8001874:	0852      	lsrs	r2, r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3301      	adds	r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b07      	cmp	r3, #7
 8001882:	ddd4      	ble.n	800182e <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	3301      	adds	r3, #1
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	2b03      	cmp	r3, #3
 800188e:	ddac      	ble.n	80017ea <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001890:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <sevSeg_updateDigits+0x150>)
 8001892:	6898      	ldr	r0, [r3, #8]
 8001894:	4b0f      	ldr	r3, [pc, #60]	@ (80018d4 <sevSeg_updateDigits+0x160>)
 8001896:	8819      	ldrh	r1, [r3, #0]
 8001898:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <sevSeg_updateDigits+0x158>)
 800189a:	785b      	ldrb	r3, [r3, #1]
 800189c:	001a      	movs	r2, r3
 800189e:	f001 f9c0 	bl	8002c22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80018a2:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <sevSeg_updateDigits+0x150>)
 80018a4:	6898      	ldr	r0, [r3, #8]
 80018a6:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <sevSeg_updateDigits+0x160>)
 80018a8:	8819      	ldrh	r1, [r3, #0]
 80018aa:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <sevSeg_updateDigits+0x158>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	001a      	movs	r2, r3
 80018b0:	f001 f9b7 	bl	8002c22 <HAL_GPIO_WritePin>

	return;
 80018b4:	46c0      	nop			@ (mov r8, r8)

}
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b007      	add	sp, #28
 80018ba:	bd90      	pop	{r4, r7, pc}
 80018bc:	08005ed8 	.word	0x08005ed8
 80018c0:	08005ee4 	.word	0x08005ee4
 80018c4:	20000030 	.word	0x20000030
 80018c8:	2000021e 	.word	0x2000021e
 80018cc:	20000044 	.word	0x20000044
 80018d0:	20000220 	.word	0x20000220
 80018d4:	20000222 	.word	0x20000222

080018d8 <sevSeg_setIntensity>:

void sevSeg_setIntensity(TIM_HandleTypeDef *htim_PWM, uint32_t tim_PWM_CHANNEL, uint16_t dutyCycle) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	1dbb      	adds	r3, r7, #6
 80018e4:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(htim_PWM, tim_PWM_CHANNEL, dutyCycle);
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d105      	bne.n	80018f8 <sevSeg_setIntensity+0x20>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	1dba      	adds	r2, r7, #6
 80018f2:	8812      	ldrh	r2, [r2, #0]
 80018f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80018f6:	e028      	b.n	800194a <sevSeg_setIntensity+0x72>
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d105      	bne.n	800190a <sevSeg_setIntensity+0x32>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	1dbb      	adds	r3, r7, #6
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	6393      	str	r3, [r2, #56]	@ 0x38
 8001908:	e01f      	b.n	800194a <sevSeg_setIntensity+0x72>
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2b08      	cmp	r3, #8
 800190e:	d105      	bne.n	800191c <sevSeg_setIntensity+0x44>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	1dbb      	adds	r3, r7, #6
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800191a:	e016      	b.n	800194a <sevSeg_setIntensity+0x72>
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b0c      	cmp	r3, #12
 8001920:	d105      	bne.n	800192e <sevSeg_setIntensity+0x56>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	1dbb      	adds	r3, r7, #6
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	6413      	str	r3, [r2, #64]	@ 0x40
 800192c:	e00d      	b.n	800194a <sevSeg_setIntensity+0x72>
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b10      	cmp	r3, #16
 8001932:	d105      	bne.n	8001940 <sevSeg_setIntensity+0x68>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	1dbb      	adds	r3, r7, #6
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	6593      	str	r3, [r2, #88]	@ 0x58
 800193e:	e004      	b.n	800194a <sevSeg_setIntensity+0x72>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	1dbb      	adds	r3, r7, #6
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(htim_PWM, tim_PWM_CHANNEL);
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	0011      	movs	r1, r2
 8001950:	0018      	movs	r0, r3
 8001952:	f003 fceb 	bl	800532c <HAL_TIM_PWM_Start>

}
 8001956:	46c0      	nop			@ (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	b004      	add	sp, #16
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	4b0f      	ldr	r3, [pc, #60]	@ (80019a4 <HAL_MspInit+0x44>)
 8001968:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <HAL_MspInit+0x44>)
 800196c:	2101      	movs	r1, #1
 800196e:	430a      	orrs	r2, r1
 8001970:	641a      	str	r2, [r3, #64]	@ 0x40
 8001972:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <HAL_MspInit+0x44>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	2201      	movs	r2, #1
 8001978:	4013      	ands	r3, r2
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <HAL_MspInit+0x44>)
 8001980:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001982:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <HAL_MspInit+0x44>)
 8001984:	2180      	movs	r1, #128	@ 0x80
 8001986:	0549      	lsls	r1, r1, #21
 8001988:	430a      	orrs	r2, r1
 800198a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800198c:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <HAL_MspInit+0x44>)
 800198e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001990:	2380      	movs	r3, #128	@ 0x80
 8001992:	055b      	lsls	r3, r3, #21
 8001994:	4013      	ands	r3, r2
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	b002      	add	sp, #8
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			@ (mov r8, r8)
 80019a4:	40021000 	.word	0x40021000

080019a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b08b      	sub	sp, #44	@ 0x2c
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	2414      	movs	r4, #20
 80019b2:	193b      	adds	r3, r7, r4
 80019b4:	0018      	movs	r0, r3
 80019b6:	2314      	movs	r3, #20
 80019b8:	001a      	movs	r2, r3
 80019ba:	2100      	movs	r1, #0
 80019bc:	f004 fa40 	bl	8005e40 <memset>
  if(hadc->Instance==ADC1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a18      	ldr	r2, [pc, #96]	@ (8001a28 <HAL_ADC_MspInit+0x80>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d129      	bne.n	8001a1e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019ca:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <HAL_ADC_MspInit+0x84>)
 80019cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019ce:	4b17      	ldr	r3, [pc, #92]	@ (8001a2c <HAL_ADC_MspInit+0x84>)
 80019d0:	2180      	movs	r1, #128	@ 0x80
 80019d2:	0349      	lsls	r1, r1, #13
 80019d4:	430a      	orrs	r2, r1
 80019d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80019d8:	4b14      	ldr	r3, [pc, #80]	@ (8001a2c <HAL_ADC_MspInit+0x84>)
 80019da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019dc:	2380      	movs	r3, #128	@ 0x80
 80019de:	035b      	lsls	r3, r3, #13
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <HAL_ADC_MspInit+0x84>)
 80019e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <HAL_ADC_MspInit+0x84>)
 80019ec:	2101      	movs	r1, #1
 80019ee:	430a      	orrs	r2, r1
 80019f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80019f2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <HAL_ADC_MspInit+0x84>)
 80019f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f6:	2201      	movs	r2, #1
 80019f8:	4013      	ands	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019fe:	193b      	adds	r3, r7, r4
 8001a00:	2204      	movs	r2, #4
 8001a02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a04:	193b      	adds	r3, r7, r4
 8001a06:	2203      	movs	r2, #3
 8001a08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	193b      	adds	r3, r7, r4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a10:	193a      	adds	r2, r7, r4
 8001a12:	23a0      	movs	r3, #160	@ 0xa0
 8001a14:	05db      	lsls	r3, r3, #23
 8001a16:	0011      	movs	r1, r2
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f000 ff81 	bl	8002920 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b00b      	add	sp, #44	@ 0x2c
 8001a24:	bd90      	pop	{r4, r7, pc}
 8001a26:	46c0      	nop			@ (mov r8, r8)
 8001a28:	40012400 	.word	0x40012400
 8001a2c:	40021000 	.word	0x40021000

08001a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b095      	sub	sp, #84	@ 0x54
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	233c      	movs	r3, #60	@ 0x3c
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	2314      	movs	r3, #20
 8001a40:	001a      	movs	r2, r3
 8001a42:	2100      	movs	r1, #0
 8001a44:	f004 f9fc 	bl	8005e40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a48:	2414      	movs	r4, #20
 8001a4a:	193b      	adds	r3, r7, r4
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	2328      	movs	r3, #40	@ 0x28
 8001a50:	001a      	movs	r2, r3
 8001a52:	2100      	movs	r1, #0
 8001a54:	f004 f9f4 	bl	8005e40 <memset>
  if(hi2c->Instance==I2C1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a22      	ldr	r2, [pc, #136]	@ (8001ae8 <HAL_I2C_MspInit+0xb8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d13d      	bne.n	8001ade <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a62:	193b      	adds	r3, r7, r4
 8001a64:	2220      	movs	r2, #32
 8001a66:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a68:	193b      	adds	r3, r7, r4
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a6e:	193b      	adds	r3, r7, r4
 8001a70:	0018      	movs	r0, r3
 8001a72:	f002 fc79 	bl	8004368 <HAL_RCCEx_PeriphCLKConfig>
 8001a76:	1e03      	subs	r3, r0, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001a7a:	f7ff fd5d 	bl	8001538 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001aec <HAL_I2C_MspInit+0xbc>)
 8001a80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a82:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <HAL_I2C_MspInit+0xbc>)
 8001a84:	2102      	movs	r1, #2
 8001a86:	430a      	orrs	r2, r1
 8001a88:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a8a:	4b18      	ldr	r3, [pc, #96]	@ (8001aec <HAL_I2C_MspInit+0xbc>)
 8001a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a8e:	2202      	movs	r2, #2
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a96:	213c      	movs	r1, #60	@ 0x3c
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	22c0      	movs	r2, #192	@ 0xc0
 8001a9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a9e:	187b      	adds	r3, r7, r1
 8001aa0:	2212      	movs	r2, #18
 8001aa2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	187b      	adds	r3, r7, r1
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	187b      	adds	r3, r7, r1
 8001aac:	2200      	movs	r2, #0
 8001aae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001ab0:	187b      	adds	r3, r7, r1
 8001ab2:	2206      	movs	r2, #6
 8001ab4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8001af0 <HAL_I2C_MspInit+0xc0>)
 8001aba:	0019      	movs	r1, r3
 8001abc:	0010      	movs	r0, r2
 8001abe:	f000 ff2f 	bl	8002920 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <HAL_I2C_MspInit+0xbc>)
 8001ac4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ac6:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <HAL_I2C_MspInit+0xbc>)
 8001ac8:	2180      	movs	r1, #128	@ 0x80
 8001aca:	0389      	lsls	r1, r1, #14
 8001acc:	430a      	orrs	r2, r1
 8001ace:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ad0:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <HAL_I2C_MspInit+0xbc>)
 8001ad2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ad4:	2380      	movs	r3, #128	@ 0x80
 8001ad6:	039b      	lsls	r3, r3, #14
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ade:	46c0      	nop			@ (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b015      	add	sp, #84	@ 0x54
 8001ae4:	bd90      	pop	{r4, r7, pc}
 8001ae6:	46c0      	nop			@ (mov r8, r8)
 8001ae8:	40005400 	.word	0x40005400
 8001aec:	40021000 	.word	0x40021000
 8001af0:	50000400 	.word	0x50000400

08001af4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b08f      	sub	sp, #60	@ 0x3c
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001afc:	2410      	movs	r4, #16
 8001afe:	193b      	adds	r3, r7, r4
 8001b00:	0018      	movs	r0, r3
 8001b02:	2328      	movs	r3, #40	@ 0x28
 8001b04:	001a      	movs	r2, r3
 8001b06:	2100      	movs	r1, #0
 8001b08:	f004 f99a 	bl	8005e40 <memset>
  if(hrtc->Instance==RTC)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a19      	ldr	r2, [pc, #100]	@ (8001b78 <HAL_RTC_MspInit+0x84>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d12c      	bne.n	8001b70 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b16:	193b      	adds	r3, r7, r4
 8001b18:	2280      	movs	r2, #128	@ 0x80
 8001b1a:	0292      	lsls	r2, r2, #10
 8001b1c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b1e:	193b      	adds	r3, r7, r4
 8001b20:	2280      	movs	r2, #128	@ 0x80
 8001b22:	0052      	lsls	r2, r2, #1
 8001b24:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b26:	193b      	adds	r3, r7, r4
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f002 fc1d 	bl	8004368 <HAL_RCCEx_PeriphCLKConfig>
 8001b2e:	1e03      	subs	r3, r0, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001b32:	f7ff fd01 	bl	8001538 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b36:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <HAL_RTC_MspInit+0x88>)
 8001b38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <HAL_RTC_MspInit+0x88>)
 8001b3c:	2180      	movs	r1, #128	@ 0x80
 8001b3e:	0209      	lsls	r1, r1, #8
 8001b40:	430a      	orrs	r2, r1
 8001b42:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001b44:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <HAL_RTC_MspInit+0x88>)
 8001b46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b48:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <HAL_RTC_MspInit+0x88>)
 8001b4a:	2180      	movs	r1, #128	@ 0x80
 8001b4c:	00c9      	lsls	r1, r1, #3
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b52:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <HAL_RTC_MspInit+0x88>)
 8001b54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b56:	2380      	movs	r3, #128	@ 0x80
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2100      	movs	r1, #0
 8001b64:	2002      	movs	r0, #2
 8001b66:	f000 fea9 	bl	80028bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001b6a:	2002      	movs	r0, #2
 8001b6c:	f000 febb 	bl	80028e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001b70:	46c0      	nop			@ (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b00f      	add	sp, #60	@ 0x3c
 8001b76:	bd90      	pop	{r4, r7, pc}
 8001b78:	40002800 	.word	0x40002800
 8001b7c:	40021000 	.word	0x40021000

08001b80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2380      	movs	r3, #128	@ 0x80
 8001b8e:	05db      	lsls	r3, r3, #23
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d10b      	bne.n	8001bac <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b94:	4b07      	ldr	r3, [pc, #28]	@ (8001bb4 <HAL_TIM_PWM_MspInit+0x34>)
 8001b96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_TIM_PWM_MspInit+0x34>)
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ba0:	4b04      	ldr	r3, [pc, #16]	@ (8001bb4 <HAL_TIM_PWM_MspInit+0x34>)
 8001ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bac:	46c0      	nop			@ (mov r8, r8)
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b004      	add	sp, #16
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <HAL_TIM_Base_MspInit+0x38>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d10d      	bne.n	8001be6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001bca:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <HAL_TIM_Base_MspInit+0x3c>)
 8001bcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bce:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <HAL_TIM_Base_MspInit+0x3c>)
 8001bd0:	2180      	movs	r1, #128	@ 0x80
 8001bd2:	0209      	lsls	r1, r1, #8
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bd8:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <HAL_TIM_Base_MspInit+0x3c>)
 8001bda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bdc:	2380      	movs	r3, #128	@ 0x80
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	4013      	ands	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001be6:	46c0      	nop			@ (mov r8, r8)
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b004      	add	sp, #16
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			@ (mov r8, r8)
 8001bf0:	40002000 	.word	0x40002000
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bf8:	b590      	push	{r4, r7, lr}
 8001bfa:	b089      	sub	sp, #36	@ 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	240c      	movs	r4, #12
 8001c02:	193b      	adds	r3, r7, r4
 8001c04:	0018      	movs	r0, r3
 8001c06:	2314      	movs	r3, #20
 8001c08:	001a      	movs	r2, r3
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	f004 f918 	bl	8005e40 <memset>
  if(htim->Instance==TIM2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2380      	movs	r3, #128	@ 0x80
 8001c16:	05db      	lsls	r3, r3, #23
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d121      	bne.n	8001c60 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1c:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <HAL_TIM_MspPostInit+0x70>)
 8001c1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c20:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <HAL_TIM_MspPostInit+0x70>)
 8001c22:	2104      	movs	r1, #4
 8001c24:	430a      	orrs	r2, r1
 8001c26:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c28:	4b0f      	ldr	r3, [pc, #60]	@ (8001c68 <HAL_TIM_MspPostInit+0x70>)
 8001c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	4013      	ands	r3, r2
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 8001c34:	0021      	movs	r1, r4
 8001c36:	187b      	adds	r3, r7, r1
 8001c38:	2240      	movs	r2, #64	@ 0x40
 8001c3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	187b      	adds	r3, r7, r1
 8001c3e:	2202      	movs	r2, #2
 8001c40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	187b      	adds	r3, r7, r1
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	187b      	adds	r3, r7, r1
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001c4e:	187b      	adds	r3, r7, r1
 8001c50:	2202      	movs	r2, #2
 8001c52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	4a05      	ldr	r2, [pc, #20]	@ (8001c6c <HAL_TIM_MspPostInit+0x74>)
 8001c58:	0019      	movs	r1, r3
 8001c5a:	0010      	movs	r0, r2
 8001c5c:	f000 fe60 	bl	8002920 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c60:	46c0      	nop			@ (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b009      	add	sp, #36	@ 0x24
 8001c66:	bd90      	pop	{r4, r7, pc}
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	50000800 	.word	0x50000800

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c74:	46c0      	nop			@ (mov r8, r8)
 8001c76:	e7fd      	b.n	8001c74 <NMI_Handler+0x4>

08001c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7c:	46c0      	nop			@ (mov r8, r8)
 8001c7e:	e7fd      	b.n	8001c7c <HardFault_Handler+0x4>

08001c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c84:	46c0      	nop			@ (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c98:	f000 f8ca 	bl	8001e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9c:	46c0      	nop			@ (mov r8, r8)
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001ca8:	4b03      	ldr	r3, [pc, #12]	@ (8001cb8 <RTC_TAMP_IRQHandler+0x14>)
 8001caa:	0018      	movs	r0, r3
 8001cac:	f003 f89c 	bl	8004de8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8001cb0:	46c0      	nop			@ (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			@ (mov r8, r8)
 8001cb8:	2000012c 	.word	0x2000012c

08001cbc <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f000 ffe7 	bl	8002c94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f000 ffe4 	bl	8002c94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001ccc:	46c0      	nop			@ (mov r8, r8)
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 8001cd6:	2004      	movs	r0, #4
 8001cd8:	f000 ffdc 	bl	8002c94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 8001cdc:	2008      	movs	r0, #8
 8001cde:	f000 ffd9 	bl	8002c94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001ce2:	46c0      	nop			@ (mov r8, r8)
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 8001cec:	2380      	movs	r3, #128	@ 0x80
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f000 ffcf 	bl	8002c94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001cf6:	46c0      	nop			@ (mov r8, r8)
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d00:	46c0      	nop			@ (mov r8, r8)
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d08:	480d      	ldr	r0, [pc, #52]	@ (8001d40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d0c:	f7ff fff6 	bl	8001cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d10:	480c      	ldr	r0, [pc, #48]	@ (8001d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d12:	490d      	ldr	r1, [pc, #52]	@ (8001d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d14:	4a0d      	ldr	r2, [pc, #52]	@ (8001d4c <LoopForever+0xe>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d18:	e002      	b.n	8001d20 <LoopCopyDataInit>

08001d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1e:	3304      	adds	r3, #4

08001d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d24:	d3f9      	bcc.n	8001d1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d26:	4a0a      	ldr	r2, [pc, #40]	@ (8001d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d28:	4c0a      	ldr	r4, [pc, #40]	@ (8001d54 <LoopForever+0x16>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d2c:	e001      	b.n	8001d32 <LoopFillZerobss>

08001d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d30:	3204      	adds	r2, #4

08001d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d34:	d3fb      	bcc.n	8001d2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d36:	f004 f88b 	bl	8005e50 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d3a:	f7fe fcd9 	bl	80006f0 <main>

08001d3e <LoopForever>:

LoopForever:
  b LoopForever
 8001d3e:	e7fe      	b.n	8001d3e <LoopForever>
  ldr   r0, =_estack
 8001d40:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d48:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001d4c:	08005f84 	.word	0x08005f84
  ldr r2, =_sbss
 8001d50:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001d54:	2000022c 	.word	0x2000022c

08001d58 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC1_IRQHandler>
	...

08001d5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d62:	1dfb      	adds	r3, r7, #7
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_Init+0x3c>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <HAL_Init+0x3c>)
 8001d6e:	2180      	movs	r1, #128	@ 0x80
 8001d70:	0049      	lsls	r1, r1, #1
 8001d72:	430a      	orrs	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d76:	2003      	movs	r0, #3
 8001d78:	f000 f810 	bl	8001d9c <HAL_InitTick>
 8001d7c:	1e03      	subs	r3, r0, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d80:	1dfb      	adds	r3, r7, #7
 8001d82:	2201      	movs	r2, #1
 8001d84:	701a      	strb	r2, [r3, #0]
 8001d86:	e001      	b.n	8001d8c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001d88:	f7ff fdea 	bl	8001960 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d8c:	1dfb      	adds	r3, r7, #7
 8001d8e:	781b      	ldrb	r3, [r3, #0]
}
 8001d90:	0018      	movs	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b002      	add	sp, #8
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40022000 	.word	0x40022000

08001d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001da4:	230f      	movs	r3, #15
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001dac:	4b1d      	ldr	r3, [pc, #116]	@ (8001e24 <HAL_InitTick+0x88>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d02b      	beq.n	8001e0c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001db4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e28 <HAL_InitTick+0x8c>)
 8001db6:	681c      	ldr	r4, [r3, #0]
 8001db8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e24 <HAL_InitTick+0x88>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	23fa      	movs	r3, #250	@ 0xfa
 8001dc0:	0098      	lsls	r0, r3, #2
 8001dc2:	f7fe f99f 	bl	8000104 <__udivsi3>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	0019      	movs	r1, r3
 8001dca:	0020      	movs	r0, r4
 8001dcc:	f7fe f99a 	bl	8000104 <__udivsi3>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f000 fd97 	bl	8002906 <HAL_SYSTICK_Config>
 8001dd8:	1e03      	subs	r3, r0, #0
 8001dda:	d112      	bne.n	8001e02 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d80a      	bhi.n	8001df8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	2301      	movs	r3, #1
 8001de6:	425b      	negs	r3, r3
 8001de8:	2200      	movs	r2, #0
 8001dea:	0018      	movs	r0, r3
 8001dec:	f000 fd66 	bl	80028bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001df0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <HAL_InitTick+0x90>)
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	e00d      	b.n	8001e14 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001df8:	230f      	movs	r3, #15
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
 8001e00:	e008      	b.n	8001e14 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e02:	230f      	movs	r3, #15
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
 8001e0a:	e003      	b.n	8001e14 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e0c:	230f      	movs	r3, #15
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001e14:	230f      	movs	r3, #15
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	781b      	ldrb	r3, [r3, #0]
}
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	b005      	add	sp, #20
 8001e20:	bd90      	pop	{r4, r7, pc}
 8001e22:	46c0      	nop			@ (mov r8, r8)
 8001e24:	20000050 	.word	0x20000050
 8001e28:	20000048 	.word	0x20000048
 8001e2c:	2000004c 	.word	0x2000004c

08001e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e34:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <HAL_IncTick+0x1c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	001a      	movs	r2, r3
 8001e3a:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <HAL_IncTick+0x20>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	18d2      	adds	r2, r2, r3
 8001e40:	4b03      	ldr	r3, [pc, #12]	@ (8001e50 <HAL_IncTick+0x20>)
 8001e42:	601a      	str	r2, [r3, #0]
}
 8001e44:	46c0      	nop			@ (mov r8, r8)
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			@ (mov r8, r8)
 8001e4c:	20000050 	.word	0x20000050
 8001e50:	20000228 	.word	0x20000228

08001e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  return uwTick;
 8001e58:	4b02      	ldr	r3, [pc, #8]	@ (8001e64 <HAL_GetTick+0x10>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	20000228 	.word	0x20000228

08001e68 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a05      	ldr	r2, [pc, #20]	@ (8001e8c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001e78:	401a      	ands	r2, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	601a      	str	r2, [r3, #0]
}
 8001e82:	46c0      	nop			@ (mov r8, r8)
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b002      	add	sp, #8
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			@ (mov r8, r8)
 8001e8c:	fe3fffff 	.word	0xfe3fffff

08001e90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	23e0      	movs	r3, #224	@ 0xe0
 8001e9e:	045b      	lsls	r3, r3, #17
 8001ea0:	4013      	ands	r3, r2
}
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b002      	add	sp, #8
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b084      	sub	sp, #16
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	2104      	movs	r1, #4
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	2107      	movs	r1, #7
 8001ec2:	4091      	lsls	r1, r2
 8001ec4:	000a      	movs	r2, r1
 8001ec6:	43d2      	mvns	r2, r2
 8001ec8:	401a      	ands	r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2104      	movs	r1, #4
 8001ece:	400b      	ands	r3, r1
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4099      	lsls	r1, r3
 8001ed4:	000b      	movs	r3, r1
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001edc:	46c0      	nop			@ (mov r8, r8)
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b004      	add	sp, #16
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	2104      	movs	r1, #4
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	2107      	movs	r1, #7
 8001efa:	4091      	lsls	r1, r2
 8001efc:	000a      	movs	r2, r1
 8001efe:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	2104      	movs	r1, #4
 8001f04:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f06:	40da      	lsrs	r2, r3
 8001f08:	0013      	movs	r3, r2
}
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	b002      	add	sp, #8
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	211f      	movs	r1, #31
 8001f26:	400a      	ands	r2, r1
 8001f28:	210f      	movs	r1, #15
 8001f2a:	4091      	lsls	r1, r2
 8001f2c:	000a      	movs	r2, r1
 8001f2e:	43d2      	mvns	r2, r2
 8001f30:	401a      	ands	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	0e9b      	lsrs	r3, r3, #26
 8001f36:	210f      	movs	r1, #15
 8001f38:	4019      	ands	r1, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	201f      	movs	r0, #31
 8001f3e:	4003      	ands	r3, r0
 8001f40:	4099      	lsls	r1, r3
 8001f42:	000b      	movs	r3, r1
 8001f44:	431a      	orrs	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f4a:	46c0      	nop			@ (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b004      	add	sp, #16
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	035b      	lsls	r3, r3, #13
 8001f64:	0b5b      	lsrs	r3, r3, #13
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f6c:	46c0      	nop			@ (mov r8, r8)
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b002      	add	sp, #8
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	0352      	lsls	r2, r2, #13
 8001f86:	0b52      	lsrs	r2, r2, #13
 8001f88:	43d2      	mvns	r2, r2
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f90:	46c0      	nop			@ (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b002      	add	sp, #8
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	0212      	lsls	r2, r2, #8
 8001fac:	43d2      	mvns	r2, r2
 8001fae:	401a      	ands	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	400b      	ands	r3, r1
 8001fb8:	4904      	ldr	r1, [pc, #16]	@ (8001fcc <LL_ADC_SetChannelSamplingTime+0x34>)
 8001fba:	400b      	ands	r3, r1
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b004      	add	sp, #16
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	07ffff00 	.word	0x07ffff00

08001fd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	4a05      	ldr	r2, [pc, #20]	@ (8001ff4 <LL_ADC_EnableInternalRegulator+0x24>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2280      	movs	r2, #128	@ 0x80
 8001fe2:	0552      	lsls	r2, r2, #21
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b002      	add	sp, #8
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			@ (mov r8, r8)
 8001ff4:	6fffffe8 	.word	0x6fffffe8

08001ff8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	2380      	movs	r3, #128	@ 0x80
 8002006:	055b      	lsls	r3, r3, #21
 8002008:	401a      	ands	r2, r3
 800200a:	2380      	movs	r3, #128	@ 0x80
 800200c:	055b      	lsls	r3, r3, #21
 800200e:	429a      	cmp	r2, r3
 8002010:	d101      	bne.n	8002016 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002016:	2300      	movs	r3, #0
}
 8002018:	0018      	movs	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	b002      	add	sp, #8
 800201e:	bd80      	pop	{r7, pc}

08002020 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2201      	movs	r2, #1
 800202e:	4013      	ands	r3, r2
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <LL_ADC_IsEnabled+0x18>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <LL_ADC_IsEnabled+0x1a>
 8002038:	2300      	movs	r3, #0
}
 800203a:	0018      	movs	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	b002      	add	sp, #8
 8002040:	bd80      	pop	{r7, pc}

08002042 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2204      	movs	r2, #4
 8002050:	4013      	ands	r3, r2
 8002052:	2b04      	cmp	r3, #4
 8002054:	d101      	bne.n	800205a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800205a:	2300      	movs	r3, #0
}
 800205c:	0018      	movs	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	b002      	add	sp, #8
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800206c:	231f      	movs	r3, #31
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e17f      	b.n	800238a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10a      	bne.n	80020a8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	0018      	movs	r0, r3
 8002096:	f7ff fc87 	bl	80019a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2254      	movs	r2, #84	@ 0x54
 80020a4:	2100      	movs	r1, #0
 80020a6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7ff ffa3 	bl	8001ff8 <LL_ADC_IsInternalRegulatorEnabled>
 80020b2:	1e03      	subs	r3, r0, #0
 80020b4:	d115      	bne.n	80020e2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	0018      	movs	r0, r3
 80020bc:	f7ff ff88 	bl	8001fd0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020c0:	4bb4      	ldr	r3, [pc, #720]	@ (8002394 <HAL_ADC_Init+0x330>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	49b4      	ldr	r1, [pc, #720]	@ (8002398 <HAL_ADC_Init+0x334>)
 80020c6:	0018      	movs	r0, r3
 80020c8:	f7fe f81c 	bl	8000104 <__udivsi3>
 80020cc:	0003      	movs	r3, r0
 80020ce:	3301      	adds	r3, #1
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020d4:	e002      	b.n	80020dc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	3b01      	subs	r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f9      	bne.n	80020d6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	0018      	movs	r0, r3
 80020e8:	f7ff ff86 	bl	8001ff8 <LL_ADC_IsInternalRegulatorEnabled>
 80020ec:	1e03      	subs	r3, r0, #0
 80020ee:	d10f      	bne.n	8002110 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f4:	2210      	movs	r2, #16
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002100:	2201      	movs	r2, #1
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002108:	231f      	movs	r3, #31
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	0018      	movs	r0, r3
 8002116:	f7ff ff94 	bl	8002042 <LL_ADC_REG_IsConversionOngoing>
 800211a:	0003      	movs	r3, r0
 800211c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002122:	2210      	movs	r2, #16
 8002124:	4013      	ands	r3, r2
 8002126:	d000      	beq.n	800212a <HAL_ADC_Init+0xc6>
 8002128:	e122      	b.n	8002370 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d000      	beq.n	8002132 <HAL_ADC_Init+0xce>
 8002130:	e11e      	b.n	8002370 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002136:	4a99      	ldr	r2, [pc, #612]	@ (800239c <HAL_ADC_Init+0x338>)
 8002138:	4013      	ands	r3, r2
 800213a:	2202      	movs	r2, #2
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	0018      	movs	r0, r3
 8002148:	f7ff ff6a 	bl	8002020 <LL_ADC_IsEnabled>
 800214c:	1e03      	subs	r3, r0, #0
 800214e:	d000      	beq.n	8002152 <HAL_ADC_Init+0xee>
 8002150:	e0ad      	b.n	80022ae <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	7e1b      	ldrb	r3, [r3, #24]
 800215a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800215c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7e5b      	ldrb	r3, [r3, #25]
 8002162:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002164:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	7e9b      	ldrb	r3, [r3, #26]
 800216a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800216c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_ADC_Init+0x118>
 8002176:	2380      	movs	r3, #128	@ 0x80
 8002178:	015b      	lsls	r3, r3, #5
 800217a:	e000      	b.n	800217e <HAL_ADC_Init+0x11a>
 800217c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800217e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002184:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b00      	cmp	r3, #0
 800218c:	da04      	bge.n	8002198 <HAL_ADC_Init+0x134>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	085b      	lsrs	r3, r3, #1
 8002196:	e001      	b.n	800219c <HAL_ADC_Init+0x138>
 8002198:	2380      	movs	r3, #128	@ 0x80
 800219a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800219c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	212c      	movs	r1, #44	@ 0x2c
 80021a2:	5c5b      	ldrb	r3, [r3, r1]
 80021a4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80021a6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2220      	movs	r2, #32
 80021b2:	5c9b      	ldrb	r3, [r3, r2]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d115      	bne.n	80021e4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	7e9b      	ldrb	r3, [r3, #26]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d105      	bne.n	80021cc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	2280      	movs	r2, #128	@ 0x80
 80021c4:	0252      	lsls	r2, r2, #9
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
 80021ca:	e00b      	b.n	80021e4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d0:	2220      	movs	r2, #32
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021dc:	2201      	movs	r2, #1
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021f0:	23e0      	movs	r3, #224	@ 0xe0
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80021fa:	4313      	orrs	r3, r2
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4a65      	ldr	r2, [pc, #404]	@ (80023a0 <HAL_ADC_Init+0x33c>)
 800220a:	4013      	ands	r3, r2
 800220c:	0019      	movs	r1, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	430a      	orrs	r2, r1
 8002216:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	0f9b      	lsrs	r3, r3, #30
 800221e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002224:	4313      	orrs	r3, r2
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	223c      	movs	r2, #60	@ 0x3c
 8002230:	5c9b      	ldrb	r3, [r3, r2]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d111      	bne.n	800225a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	0f9b      	lsrs	r3, r3, #30
 800223c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002242:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002248:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800224e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	4313      	orrs	r3, r2
 8002254:	2201      	movs	r2, #1
 8002256:	4313      	orrs	r3, r2
 8002258:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	4a50      	ldr	r2, [pc, #320]	@ (80023a4 <HAL_ADC_Init+0x340>)
 8002262:	4013      	ands	r3, r2
 8002264:	0019      	movs	r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	430a      	orrs	r2, r1
 800226e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	23c0      	movs	r3, #192	@ 0xc0
 8002276:	061b      	lsls	r3, r3, #24
 8002278:	429a      	cmp	r2, r3
 800227a:	d018      	beq.n	80022ae <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002280:	2380      	movs	r3, #128	@ 0x80
 8002282:	05db      	lsls	r3, r3, #23
 8002284:	429a      	cmp	r2, r3
 8002286:	d012      	beq.n	80022ae <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800228c:	2380      	movs	r3, #128	@ 0x80
 800228e:	061b      	lsls	r3, r3, #24
 8002290:	429a      	cmp	r2, r3
 8002292:	d00c      	beq.n	80022ae <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002294:	4b44      	ldr	r3, [pc, #272]	@ (80023a8 <HAL_ADC_Init+0x344>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a44      	ldr	r2, [pc, #272]	@ (80023ac <HAL_ADC_Init+0x348>)
 800229a:	4013      	ands	r3, r2
 800229c:	0019      	movs	r1, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	23f0      	movs	r3, #240	@ 0xf0
 80022a4:	039b      	lsls	r3, r3, #14
 80022a6:	401a      	ands	r2, r3
 80022a8:	4b3f      	ldr	r3, [pc, #252]	@ (80023a8 <HAL_ADC_Init+0x344>)
 80022aa:	430a      	orrs	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b6:	001a      	movs	r2, r3
 80022b8:	2100      	movs	r1, #0
 80022ba:	f7ff fdf6 	bl	8001eaa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c6:	493a      	ldr	r1, [pc, #232]	@ (80023b0 <HAL_ADC_Init+0x34c>)
 80022c8:	001a      	movs	r2, r3
 80022ca:	f7ff fdee 	bl	8001eaa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2110      	movs	r1, #16
 80022e2:	4249      	negs	r1, r1
 80022e4:	430a      	orrs	r2, r1
 80022e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80022e8:	e018      	b.n	800231c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	2380      	movs	r3, #128	@ 0x80
 80022f0:	039b      	lsls	r3, r3, #14
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d112      	bne.n	800231c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	3b01      	subs	r3, #1
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	221c      	movs	r2, #28
 8002306:	4013      	ands	r3, r2
 8002308:	2210      	movs	r2, #16
 800230a:	4252      	negs	r2, r2
 800230c:	409a      	lsls	r2, r3
 800230e:	0011      	movs	r1, r2
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2100      	movs	r1, #0
 8002322:	0018      	movs	r0, r3
 8002324:	f7ff fdde 	bl	8001ee4 <LL_ADC_GetSamplingTimeCommonChannels>
 8002328:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800232e:	429a      	cmp	r2, r3
 8002330:	d10b      	bne.n	800234a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233c:	2203      	movs	r2, #3
 800233e:	4393      	bics	r3, r2
 8002340:	2201      	movs	r2, #1
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002348:	e01c      	b.n	8002384 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234e:	2212      	movs	r2, #18
 8002350:	4393      	bics	r3, r2
 8002352:	2210      	movs	r2, #16
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235e:	2201      	movs	r2, #1
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002366:	231f      	movs	r3, #31
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	2201      	movs	r2, #1
 800236c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800236e:	e009      	b.n	8002384 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002374:	2210      	movs	r2, #16
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800237c:	231f      	movs	r3, #31
 800237e:	18fb      	adds	r3, r7, r3
 8002380:	2201      	movs	r2, #1
 8002382:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002384:	231f      	movs	r3, #31
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	781b      	ldrb	r3, [r3, #0]
}
 800238a:	0018      	movs	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	b008      	add	sp, #32
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			@ (mov r8, r8)
 8002394:	20000048 	.word	0x20000048
 8002398:	00030d40 	.word	0x00030d40
 800239c:	fffffefd 	.word	0xfffffefd
 80023a0:	ffde0201 	.word	0xffde0201
 80023a4:	1ffffc02 	.word	0x1ffffc02
 80023a8:	40012708 	.word	0x40012708
 80023ac:	ffc3ffff 	.word	0xffc3ffff
 80023b0:	07ffff04 	.word	0x07ffff04

080023b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023be:	2317      	movs	r3, #23
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2254      	movs	r2, #84	@ 0x54
 80023ce:	5c9b      	ldrb	r3, [r3, r2]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x24>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e1c0      	b.n	800275a <HAL_ADC_ConfigChannel+0x3a6>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2254      	movs	r2, #84	@ 0x54
 80023dc:	2101      	movs	r1, #1
 80023de:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7ff fe2c 	bl	8002042 <LL_ADC_REG_IsConversionOngoing>
 80023ea:	1e03      	subs	r3, r0, #0
 80023ec:	d000      	beq.n	80023f0 <HAL_ADC_ConfigChannel+0x3c>
 80023ee:	e1a3      	b.n	8002738 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d100      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x46>
 80023f8:	e143      	b.n	8002682 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	2380      	movs	r3, #128	@ 0x80
 8002400:	061b      	lsls	r3, r3, #24
 8002402:	429a      	cmp	r2, r3
 8002404:	d004      	beq.n	8002410 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800240a:	4ac1      	ldr	r2, [pc, #772]	@ (8002710 <HAL_ADC_ConfigChannel+0x35c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d108      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0019      	movs	r1, r3
 800241a:	0010      	movs	r0, r2
 800241c:	f7ff fd99 	bl	8001f52 <LL_ADC_REG_SetSequencerChAdd>
 8002420:	e0c9      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	211f      	movs	r1, #31
 800242c:	400b      	ands	r3, r1
 800242e:	210f      	movs	r1, #15
 8002430:	4099      	lsls	r1, r3
 8002432:	000b      	movs	r3, r1
 8002434:	43db      	mvns	r3, r3
 8002436:	4013      	ands	r3, r2
 8002438:	0019      	movs	r1, r3
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	035b      	lsls	r3, r3, #13
 8002440:	0b5b      	lsrs	r3, r3, #13
 8002442:	d105      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x9c>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0e9b      	lsrs	r3, r3, #26
 800244a:	221f      	movs	r2, #31
 800244c:	4013      	ands	r3, r2
 800244e:	e098      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1ce>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2201      	movs	r2, #1
 8002456:	4013      	ands	r3, r2
 8002458:	d000      	beq.n	800245c <HAL_ADC_ConfigChannel+0xa8>
 800245a:	e091      	b.n	8002580 <HAL_ADC_ConfigChannel+0x1cc>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2202      	movs	r2, #2
 8002462:	4013      	ands	r3, r2
 8002464:	d000      	beq.n	8002468 <HAL_ADC_ConfigChannel+0xb4>
 8002466:	e089      	b.n	800257c <HAL_ADC_ConfigChannel+0x1c8>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2204      	movs	r2, #4
 800246e:	4013      	ands	r3, r2
 8002470:	d000      	beq.n	8002474 <HAL_ADC_ConfigChannel+0xc0>
 8002472:	e081      	b.n	8002578 <HAL_ADC_ConfigChannel+0x1c4>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2208      	movs	r2, #8
 800247a:	4013      	ands	r3, r2
 800247c:	d000      	beq.n	8002480 <HAL_ADC_ConfigChannel+0xcc>
 800247e:	e079      	b.n	8002574 <HAL_ADC_ConfigChannel+0x1c0>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2210      	movs	r2, #16
 8002486:	4013      	ands	r3, r2
 8002488:	d000      	beq.n	800248c <HAL_ADC_ConfigChannel+0xd8>
 800248a:	e071      	b.n	8002570 <HAL_ADC_ConfigChannel+0x1bc>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2220      	movs	r2, #32
 8002492:	4013      	ands	r3, r2
 8002494:	d000      	beq.n	8002498 <HAL_ADC_ConfigChannel+0xe4>
 8002496:	e069      	b.n	800256c <HAL_ADC_ConfigChannel+0x1b8>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2240      	movs	r2, #64	@ 0x40
 800249e:	4013      	ands	r3, r2
 80024a0:	d000      	beq.n	80024a4 <HAL_ADC_ConfigChannel+0xf0>
 80024a2:	e061      	b.n	8002568 <HAL_ADC_ConfigChannel+0x1b4>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2280      	movs	r2, #128	@ 0x80
 80024aa:	4013      	ands	r3, r2
 80024ac:	d000      	beq.n	80024b0 <HAL_ADC_ConfigChannel+0xfc>
 80024ae:	e059      	b.n	8002564 <HAL_ADC_ConfigChannel+0x1b0>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	2380      	movs	r3, #128	@ 0x80
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4013      	ands	r3, r2
 80024ba:	d151      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x1ac>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4013      	ands	r3, r2
 80024c6:	d149      	bne.n	800255c <HAL_ADC_ConfigChannel+0x1a8>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	2380      	movs	r3, #128	@ 0x80
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4013      	ands	r3, r2
 80024d2:	d141      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x1a4>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2380      	movs	r3, #128	@ 0x80
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	4013      	ands	r3, r2
 80024de:	d139      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x1a0>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	2380      	movs	r3, #128	@ 0x80
 80024e6:	015b      	lsls	r3, r3, #5
 80024e8:	4013      	ands	r3, r2
 80024ea:	d131      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x19c>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	@ 0x80
 80024f2:	019b      	lsls	r3, r3, #6
 80024f4:	4013      	ands	r3, r2
 80024f6:	d129      	bne.n	800254c <HAL_ADC_ConfigChannel+0x198>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2380      	movs	r3, #128	@ 0x80
 80024fe:	01db      	lsls	r3, r3, #7
 8002500:	4013      	ands	r3, r2
 8002502:	d121      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x194>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	2380      	movs	r3, #128	@ 0x80
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	4013      	ands	r3, r2
 800250e:	d119      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x190>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	2380      	movs	r3, #128	@ 0x80
 8002516:	025b      	lsls	r3, r3, #9
 8002518:	4013      	ands	r3, r2
 800251a:	d111      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x18c>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	2380      	movs	r3, #128	@ 0x80
 8002522:	029b      	lsls	r3, r3, #10
 8002524:	4013      	ands	r3, r2
 8002526:	d109      	bne.n	800253c <HAL_ADC_ConfigChannel+0x188>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2380      	movs	r3, #128	@ 0x80
 800252e:	02db      	lsls	r3, r3, #11
 8002530:	4013      	ands	r3, r2
 8002532:	d001      	beq.n	8002538 <HAL_ADC_ConfigChannel+0x184>
 8002534:	2312      	movs	r3, #18
 8002536:	e024      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1ce>
 8002538:	2300      	movs	r3, #0
 800253a:	e022      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1ce>
 800253c:	2311      	movs	r3, #17
 800253e:	e020      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1ce>
 8002540:	2310      	movs	r3, #16
 8002542:	e01e      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1ce>
 8002544:	230f      	movs	r3, #15
 8002546:	e01c      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1ce>
 8002548:	230e      	movs	r3, #14
 800254a:	e01a      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1ce>
 800254c:	230d      	movs	r3, #13
 800254e:	e018      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1ce>
 8002550:	230c      	movs	r3, #12
 8002552:	e016      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1ce>
 8002554:	230b      	movs	r3, #11
 8002556:	e014      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1ce>
 8002558:	230a      	movs	r3, #10
 800255a:	e012      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1ce>
 800255c:	2309      	movs	r3, #9
 800255e:	e010      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1ce>
 8002560:	2308      	movs	r3, #8
 8002562:	e00e      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1ce>
 8002564:	2307      	movs	r3, #7
 8002566:	e00c      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1ce>
 8002568:	2306      	movs	r3, #6
 800256a:	e00a      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1ce>
 800256c:	2305      	movs	r3, #5
 800256e:	e008      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1ce>
 8002570:	2304      	movs	r3, #4
 8002572:	e006      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1ce>
 8002574:	2303      	movs	r3, #3
 8002576:	e004      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1ce>
 8002578:	2302      	movs	r3, #2
 800257a:	e002      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1ce>
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1ce>
 8002580:	2300      	movs	r3, #0
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	6852      	ldr	r2, [r2, #4]
 8002586:	201f      	movs	r0, #31
 8002588:	4002      	ands	r2, r0
 800258a:	4093      	lsls	r3, r2
 800258c:	000a      	movs	r2, r1
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	089b      	lsrs	r3, r3, #2
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d808      	bhi.n	80025b6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	001a      	movs	r2, r3
 80025b2:	f7ff fcae 	bl	8001f12 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	6819      	ldr	r1, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	001a      	movs	r2, r3
 80025c4:	f7ff fce8 	bl	8001f98 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	db00      	blt.n	80025d2 <HAL_ADC_ConfigChannel+0x21e>
 80025d0:	e0bc      	b.n	800274c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025d2:	4b50      	ldr	r3, [pc, #320]	@ (8002714 <HAL_ADC_ConfigChannel+0x360>)
 80025d4:	0018      	movs	r0, r3
 80025d6:	f7ff fc5b 	bl	8001e90 <LL_ADC_GetCommonPathInternalCh>
 80025da:	0003      	movs	r3, r0
 80025dc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002718 <HAL_ADC_ConfigChannel+0x364>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d122      	bne.n	800262e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	2380      	movs	r3, #128	@ 0x80
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025f0:	d11d      	bne.n	800262e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	2280      	movs	r2, #128	@ 0x80
 80025f6:	0412      	lsls	r2, r2, #16
 80025f8:	4313      	orrs	r3, r2
 80025fa:	4a46      	ldr	r2, [pc, #280]	@ (8002714 <HAL_ADC_ConfigChannel+0x360>)
 80025fc:	0019      	movs	r1, r3
 80025fe:	0010      	movs	r0, r2
 8002600:	f7ff fc32 	bl	8001e68 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002604:	4b45      	ldr	r3, [pc, #276]	@ (800271c <HAL_ADC_ConfigChannel+0x368>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4945      	ldr	r1, [pc, #276]	@ (8002720 <HAL_ADC_ConfigChannel+0x36c>)
 800260a:	0018      	movs	r0, r3
 800260c:	f7fd fd7a 	bl	8000104 <__udivsi3>
 8002610:	0003      	movs	r3, r0
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	0013      	movs	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	189b      	adds	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800261e:	e002      	b.n	8002626 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	3b01      	subs	r3, #1
 8002624:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f9      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800262c:	e08e      	b.n	800274c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a3c      	ldr	r2, [pc, #240]	@ (8002724 <HAL_ADC_ConfigChannel+0x370>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d10e      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	2380      	movs	r3, #128	@ 0x80
 800263c:	045b      	lsls	r3, r3, #17
 800263e:	4013      	ands	r3, r2
 8002640:	d109      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	2280      	movs	r2, #128	@ 0x80
 8002646:	0452      	lsls	r2, r2, #17
 8002648:	4313      	orrs	r3, r2
 800264a:	4a32      	ldr	r2, [pc, #200]	@ (8002714 <HAL_ADC_ConfigChannel+0x360>)
 800264c:	0019      	movs	r1, r3
 800264e:	0010      	movs	r0, r2
 8002650:	f7ff fc0a 	bl	8001e68 <LL_ADC_SetCommonPathInternalCh>
 8002654:	e07a      	b.n	800274c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a33      	ldr	r2, [pc, #204]	@ (8002728 <HAL_ADC_ConfigChannel+0x374>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d000      	beq.n	8002662 <HAL_ADC_ConfigChannel+0x2ae>
 8002660:	e074      	b.n	800274c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	2380      	movs	r3, #128	@ 0x80
 8002666:	03db      	lsls	r3, r3, #15
 8002668:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800266a:	d000      	beq.n	800266e <HAL_ADC_ConfigChannel+0x2ba>
 800266c:	e06e      	b.n	800274c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2280      	movs	r2, #128	@ 0x80
 8002672:	03d2      	lsls	r2, r2, #15
 8002674:	4313      	orrs	r3, r2
 8002676:	4a27      	ldr	r2, [pc, #156]	@ (8002714 <HAL_ADC_ConfigChannel+0x360>)
 8002678:	0019      	movs	r1, r3
 800267a:	0010      	movs	r0, r2
 800267c:	f7ff fbf4 	bl	8001e68 <LL_ADC_SetCommonPathInternalCh>
 8002680:	e064      	b.n	800274c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	2380      	movs	r3, #128	@ 0x80
 8002688:	061b      	lsls	r3, r3, #24
 800268a:	429a      	cmp	r2, r3
 800268c:	d004      	beq.n	8002698 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002692:	4a1f      	ldr	r2, [pc, #124]	@ (8002710 <HAL_ADC_ConfigChannel+0x35c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d107      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	0019      	movs	r1, r3
 80026a2:	0010      	movs	r0, r2
 80026a4:	f7ff fc66 	bl	8001f74 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	da4d      	bge.n	800274c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026b0:	4b18      	ldr	r3, [pc, #96]	@ (8002714 <HAL_ADC_ConfigChannel+0x360>)
 80026b2:	0018      	movs	r0, r3
 80026b4:	f7ff fbec 	bl	8001e90 <LL_ADC_GetCommonPathInternalCh>
 80026b8:	0003      	movs	r3, r0
 80026ba:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a15      	ldr	r2, [pc, #84]	@ (8002718 <HAL_ADC_ConfigChannel+0x364>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d108      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4a18      	ldr	r2, [pc, #96]	@ (800272c <HAL_ADC_ConfigChannel+0x378>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	4a11      	ldr	r2, [pc, #68]	@ (8002714 <HAL_ADC_ConfigChannel+0x360>)
 80026ce:	0019      	movs	r1, r3
 80026d0:	0010      	movs	r0, r2
 80026d2:	f7ff fbc9 	bl	8001e68 <LL_ADC_SetCommonPathInternalCh>
 80026d6:	e039      	b.n	800274c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a11      	ldr	r2, [pc, #68]	@ (8002724 <HAL_ADC_ConfigChannel+0x370>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d108      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4a12      	ldr	r2, [pc, #72]	@ (8002730 <HAL_ADC_ConfigChannel+0x37c>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002714 <HAL_ADC_ConfigChannel+0x360>)
 80026ea:	0019      	movs	r1, r3
 80026ec:	0010      	movs	r0, r2
 80026ee:	f7ff fbbb 	bl	8001e68 <LL_ADC_SetCommonPathInternalCh>
 80026f2:	e02b      	b.n	800274c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002728 <HAL_ADC_ConfigChannel+0x374>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d126      	bne.n	800274c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4a0c      	ldr	r2, [pc, #48]	@ (8002734 <HAL_ADC_ConfigChannel+0x380>)
 8002702:	4013      	ands	r3, r2
 8002704:	4a03      	ldr	r2, [pc, #12]	@ (8002714 <HAL_ADC_ConfigChannel+0x360>)
 8002706:	0019      	movs	r1, r3
 8002708:	0010      	movs	r0, r2
 800270a:	f7ff fbad 	bl	8001e68 <LL_ADC_SetCommonPathInternalCh>
 800270e:	e01d      	b.n	800274c <HAL_ADC_ConfigChannel+0x398>
 8002710:	80000004 	.word	0x80000004
 8002714:	40012708 	.word	0x40012708
 8002718:	b0001000 	.word	0xb0001000
 800271c:	20000048 	.word	0x20000048
 8002720:	00030d40 	.word	0x00030d40
 8002724:	b8004000 	.word	0xb8004000
 8002728:	b4002000 	.word	0xb4002000
 800272c:	ff7fffff 	.word	0xff7fffff
 8002730:	feffffff 	.word	0xfeffffff
 8002734:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273c:	2220      	movs	r2, #32
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002744:	2317      	movs	r3, #23
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	2201      	movs	r2, #1
 800274a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2254      	movs	r2, #84	@ 0x54
 8002750:	2100      	movs	r1, #0
 8002752:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002754:	2317      	movs	r3, #23
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	781b      	ldrb	r3, [r3, #0]
}
 800275a:	0018      	movs	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	b006      	add	sp, #24
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			@ (mov r8, r8)

08002764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	0002      	movs	r2, r0
 800276c:	1dfb      	adds	r3, r7, #7
 800276e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002770:	1dfb      	adds	r3, r7, #7
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b7f      	cmp	r3, #127	@ 0x7f
 8002776:	d809      	bhi.n	800278c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002778:	1dfb      	adds	r3, r7, #7
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	001a      	movs	r2, r3
 800277e:	231f      	movs	r3, #31
 8002780:	401a      	ands	r2, r3
 8002782:	4b04      	ldr	r3, [pc, #16]	@ (8002794 <__NVIC_EnableIRQ+0x30>)
 8002784:	2101      	movs	r1, #1
 8002786:	4091      	lsls	r1, r2
 8002788:	000a      	movs	r2, r1
 800278a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800278c:	46c0      	nop			@ (mov r8, r8)
 800278e:	46bd      	mov	sp, r7
 8002790:	b002      	add	sp, #8
 8002792:	bd80      	pop	{r7, pc}
 8002794:	e000e100 	.word	0xe000e100

08002798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	0002      	movs	r2, r0
 80027a0:	6039      	str	r1, [r7, #0]
 80027a2:	1dfb      	adds	r3, r7, #7
 80027a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027a6:	1dfb      	adds	r3, r7, #7
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80027ac:	d828      	bhi.n	8002800 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027ae:	4a2f      	ldr	r2, [pc, #188]	@ (800286c <__NVIC_SetPriority+0xd4>)
 80027b0:	1dfb      	adds	r3, r7, #7
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b25b      	sxtb	r3, r3
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	33c0      	adds	r3, #192	@ 0xc0
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	589b      	ldr	r3, [r3, r2]
 80027be:	1dfa      	adds	r2, r7, #7
 80027c0:	7812      	ldrb	r2, [r2, #0]
 80027c2:	0011      	movs	r1, r2
 80027c4:	2203      	movs	r2, #3
 80027c6:	400a      	ands	r2, r1
 80027c8:	00d2      	lsls	r2, r2, #3
 80027ca:	21ff      	movs	r1, #255	@ 0xff
 80027cc:	4091      	lsls	r1, r2
 80027ce:	000a      	movs	r2, r1
 80027d0:	43d2      	mvns	r2, r2
 80027d2:	401a      	ands	r2, r3
 80027d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	019b      	lsls	r3, r3, #6
 80027da:	22ff      	movs	r2, #255	@ 0xff
 80027dc:	401a      	ands	r2, r3
 80027de:	1dfb      	adds	r3, r7, #7
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	0018      	movs	r0, r3
 80027e4:	2303      	movs	r3, #3
 80027e6:	4003      	ands	r3, r0
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027ec:	481f      	ldr	r0, [pc, #124]	@ (800286c <__NVIC_SetPriority+0xd4>)
 80027ee:	1dfb      	adds	r3, r7, #7
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b25b      	sxtb	r3, r3
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	430a      	orrs	r2, r1
 80027f8:	33c0      	adds	r3, #192	@ 0xc0
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80027fe:	e031      	b.n	8002864 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002800:	4a1b      	ldr	r2, [pc, #108]	@ (8002870 <__NVIC_SetPriority+0xd8>)
 8002802:	1dfb      	adds	r3, r7, #7
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	0019      	movs	r1, r3
 8002808:	230f      	movs	r3, #15
 800280a:	400b      	ands	r3, r1
 800280c:	3b08      	subs	r3, #8
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	3306      	adds	r3, #6
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	18d3      	adds	r3, r2, r3
 8002816:	3304      	adds	r3, #4
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	1dfa      	adds	r2, r7, #7
 800281c:	7812      	ldrb	r2, [r2, #0]
 800281e:	0011      	movs	r1, r2
 8002820:	2203      	movs	r2, #3
 8002822:	400a      	ands	r2, r1
 8002824:	00d2      	lsls	r2, r2, #3
 8002826:	21ff      	movs	r1, #255	@ 0xff
 8002828:	4091      	lsls	r1, r2
 800282a:	000a      	movs	r2, r1
 800282c:	43d2      	mvns	r2, r2
 800282e:	401a      	ands	r2, r3
 8002830:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	019b      	lsls	r3, r3, #6
 8002836:	22ff      	movs	r2, #255	@ 0xff
 8002838:	401a      	ands	r2, r3
 800283a:	1dfb      	adds	r3, r7, #7
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	0018      	movs	r0, r3
 8002840:	2303      	movs	r3, #3
 8002842:	4003      	ands	r3, r0
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002848:	4809      	ldr	r0, [pc, #36]	@ (8002870 <__NVIC_SetPriority+0xd8>)
 800284a:	1dfb      	adds	r3, r7, #7
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	001c      	movs	r4, r3
 8002850:	230f      	movs	r3, #15
 8002852:	4023      	ands	r3, r4
 8002854:	3b08      	subs	r3, #8
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	430a      	orrs	r2, r1
 800285a:	3306      	adds	r3, #6
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	18c3      	adds	r3, r0, r3
 8002860:	3304      	adds	r3, #4
 8002862:	601a      	str	r2, [r3, #0]
}
 8002864:	46c0      	nop			@ (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	b003      	add	sp, #12
 800286a:	bd90      	pop	{r4, r7, pc}
 800286c:	e000e100 	.word	0xe000e100
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	1e5a      	subs	r2, r3, #1
 8002880:	2380      	movs	r3, #128	@ 0x80
 8002882:	045b      	lsls	r3, r3, #17
 8002884:	429a      	cmp	r2, r3
 8002886:	d301      	bcc.n	800288c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002888:	2301      	movs	r3, #1
 800288a:	e010      	b.n	80028ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288c:	4b0a      	ldr	r3, [pc, #40]	@ (80028b8 <SysTick_Config+0x44>)
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	3a01      	subs	r2, #1
 8002892:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002894:	2301      	movs	r3, #1
 8002896:	425b      	negs	r3, r3
 8002898:	2103      	movs	r1, #3
 800289a:	0018      	movs	r0, r3
 800289c:	f7ff ff7c 	bl	8002798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a0:	4b05      	ldr	r3, [pc, #20]	@ (80028b8 <SysTick_Config+0x44>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a6:	4b04      	ldr	r3, [pc, #16]	@ (80028b8 <SysTick_Config+0x44>)
 80028a8:	2207      	movs	r2, #7
 80028aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	0018      	movs	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b002      	add	sp, #8
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	46c0      	nop			@ (mov r8, r8)
 80028b8:	e000e010 	.word	0xe000e010

080028bc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	210f      	movs	r1, #15
 80028c8:	187b      	adds	r3, r7, r1
 80028ca:	1c02      	adds	r2, r0, #0
 80028cc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	187b      	adds	r3, r7, r1
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	b25b      	sxtb	r3, r3
 80028d6:	0011      	movs	r1, r2
 80028d8:	0018      	movs	r0, r3
 80028da:	f7ff ff5d 	bl	8002798 <__NVIC_SetPriority>
}
 80028de:	46c0      	nop			@ (mov r8, r8)
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b004      	add	sp, #16
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	0002      	movs	r2, r0
 80028ee:	1dfb      	adds	r3, r7, #7
 80028f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f2:	1dfb      	adds	r3, r7, #7
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	b25b      	sxtb	r3, r3
 80028f8:	0018      	movs	r0, r3
 80028fa:	f7ff ff33 	bl	8002764 <__NVIC_EnableIRQ>
}
 80028fe:	46c0      	nop			@ (mov r8, r8)
 8002900:	46bd      	mov	sp, r7
 8002902:	b002      	add	sp, #8
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	0018      	movs	r0, r3
 8002912:	f7ff ffaf 	bl	8002874 <SysTick_Config>
 8002916:	0003      	movs	r3, r0
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b002      	add	sp, #8
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800292e:	e147      	b.n	8002bc0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2101      	movs	r1, #1
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4091      	lsls	r1, r2
 800293a:	000a      	movs	r2, r1
 800293c:	4013      	ands	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d100      	bne.n	8002948 <HAL_GPIO_Init+0x28>
 8002946:	e138      	b.n	8002bba <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2203      	movs	r2, #3
 800294e:	4013      	ands	r3, r2
 8002950:	2b01      	cmp	r3, #1
 8002952:	d005      	beq.n	8002960 <HAL_GPIO_Init+0x40>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2203      	movs	r2, #3
 800295a:	4013      	ands	r3, r2
 800295c:	2b02      	cmp	r3, #2
 800295e:	d130      	bne.n	80029c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	409a      	lsls	r2, r3
 800296e:	0013      	movs	r3, r2
 8002970:	43da      	mvns	r2, r3
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	409a      	lsls	r2, r3
 8002982:	0013      	movs	r3, r2
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002996:	2201      	movs	r2, #1
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	409a      	lsls	r2, r3
 800299c:	0013      	movs	r3, r2
 800299e:	43da      	mvns	r2, r3
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4013      	ands	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	2201      	movs	r2, #1
 80029ae:	401a      	ands	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	409a      	lsls	r2, r3
 80029b4:	0013      	movs	r3, r2
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2203      	movs	r2, #3
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d017      	beq.n	80029fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	2203      	movs	r2, #3
 80029da:	409a      	lsls	r2, r3
 80029dc:	0013      	movs	r3, r2
 80029de:	43da      	mvns	r2, r3
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4013      	ands	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	409a      	lsls	r2, r3
 80029f0:	0013      	movs	r3, r2
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2203      	movs	r2, #3
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d123      	bne.n	8002a52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	08da      	lsrs	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3208      	adds	r2, #8
 8002a12:	0092      	lsls	r2, r2, #2
 8002a14:	58d3      	ldr	r3, [r2, r3]
 8002a16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2207      	movs	r2, #7
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	220f      	movs	r2, #15
 8002a22:	409a      	lsls	r2, r3
 8002a24:	0013      	movs	r3, r2
 8002a26:	43da      	mvns	r2, r3
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2107      	movs	r1, #7
 8002a36:	400b      	ands	r3, r1
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	0013      	movs	r3, r2
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	08da      	lsrs	r2, r3, #3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3208      	adds	r2, #8
 8002a4c:	0092      	lsls	r2, r2, #2
 8002a4e:	6939      	ldr	r1, [r7, #16]
 8002a50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	0013      	movs	r3, r2
 8002a62:	43da      	mvns	r2, r3
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2203      	movs	r2, #3
 8002a70:	401a      	ands	r2, r3
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	409a      	lsls	r2, r3
 8002a78:	0013      	movs	r3, r2
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	23c0      	movs	r3, #192	@ 0xc0
 8002a8c:	029b      	lsls	r3, r3, #10
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d100      	bne.n	8002a94 <HAL_GPIO_Init+0x174>
 8002a92:	e092      	b.n	8002bba <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002a94:	4a50      	ldr	r2, [pc, #320]	@ (8002bd8 <HAL_GPIO_Init+0x2b8>)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	089b      	lsrs	r3, r3, #2
 8002a9a:	3318      	adds	r3, #24
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	589b      	ldr	r3, [r3, r2]
 8002aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	220f      	movs	r2, #15
 8002aac:	409a      	lsls	r2, r3
 8002aae:	0013      	movs	r3, r2
 8002ab0:	43da      	mvns	r2, r3
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	23a0      	movs	r3, #160	@ 0xa0
 8002abc:	05db      	lsls	r3, r3, #23
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d013      	beq.n	8002aea <HAL_GPIO_Init+0x1ca>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a45      	ldr	r2, [pc, #276]	@ (8002bdc <HAL_GPIO_Init+0x2bc>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00d      	beq.n	8002ae6 <HAL_GPIO_Init+0x1c6>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a44      	ldr	r2, [pc, #272]	@ (8002be0 <HAL_GPIO_Init+0x2c0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d007      	beq.n	8002ae2 <HAL_GPIO_Init+0x1c2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a43      	ldr	r2, [pc, #268]	@ (8002be4 <HAL_GPIO_Init+0x2c4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d101      	bne.n	8002ade <HAL_GPIO_Init+0x1be>
 8002ada:	2303      	movs	r3, #3
 8002adc:	e006      	b.n	8002aec <HAL_GPIO_Init+0x1cc>
 8002ade:	2305      	movs	r3, #5
 8002ae0:	e004      	b.n	8002aec <HAL_GPIO_Init+0x1cc>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e002      	b.n	8002aec <HAL_GPIO_Init+0x1cc>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <HAL_GPIO_Init+0x1cc>
 8002aea:	2300      	movs	r3, #0
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	2103      	movs	r1, #3
 8002af0:	400a      	ands	r2, r1
 8002af2:	00d2      	lsls	r2, r2, #3
 8002af4:	4093      	lsls	r3, r2
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002afc:	4936      	ldr	r1, [pc, #216]	@ (8002bd8 <HAL_GPIO_Init+0x2b8>)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	089b      	lsrs	r3, r3, #2
 8002b02:	3318      	adds	r3, #24
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b0a:	4b33      	ldr	r3, [pc, #204]	@ (8002bd8 <HAL_GPIO_Init+0x2b8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	43da      	mvns	r2, r3
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4013      	ands	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	2380      	movs	r3, #128	@ 0x80
 8002b20:	035b      	lsls	r3, r3, #13
 8002b22:	4013      	ands	r3, r2
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd8 <HAL_GPIO_Init+0x2b8>)
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002b34:	4b28      	ldr	r3, [pc, #160]	@ (8002bd8 <HAL_GPIO_Init+0x2b8>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	43da      	mvns	r2, r3
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	2380      	movs	r3, #128	@ 0x80
 8002b4a:	039b      	lsls	r3, r3, #14
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b58:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd8 <HAL_GPIO_Init+0x2b8>)
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8002bd8 <HAL_GPIO_Init+0x2b8>)
 8002b60:	2384      	movs	r3, #132	@ 0x84
 8002b62:	58d3      	ldr	r3, [r2, r3]
 8002b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	43da      	mvns	r2, r3
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	2380      	movs	r3, #128	@ 0x80
 8002b76:	029b      	lsls	r3, r3, #10
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d003      	beq.n	8002b84 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b84:	4914      	ldr	r1, [pc, #80]	@ (8002bd8 <HAL_GPIO_Init+0x2b8>)
 8002b86:	2284      	movs	r2, #132	@ 0x84
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002b8c:	4a12      	ldr	r2, [pc, #72]	@ (8002bd8 <HAL_GPIO_Init+0x2b8>)
 8002b8e:	2380      	movs	r3, #128	@ 0x80
 8002b90:	58d3      	ldr	r3, [r2, r3]
 8002b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	43da      	mvns	r2, r3
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	2380      	movs	r3, #128	@ 0x80
 8002ba4:	025b      	lsls	r3, r3, #9
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bb2:	4909      	ldr	r1, [pc, #36]	@ (8002bd8 <HAL_GPIO_Init+0x2b8>)
 8002bb4:	2280      	movs	r2, #128	@ 0x80
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	40da      	lsrs	r2, r3
 8002bc8:	1e13      	subs	r3, r2, #0
 8002bca:	d000      	beq.n	8002bce <HAL_GPIO_Init+0x2ae>
 8002bcc:	e6b0      	b.n	8002930 <HAL_GPIO_Init+0x10>
  }
}
 8002bce:	46c0      	nop			@ (mov r8, r8)
 8002bd0:	46c0      	nop			@ (mov r8, r8)
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b006      	add	sp, #24
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40021800 	.word	0x40021800
 8002bdc:	50000400 	.word	0x50000400
 8002be0:	50000800 	.word	0x50000800
 8002be4:	50000c00 	.word	0x50000c00

08002be8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	000a      	movs	r2, r1
 8002bf2:	1cbb      	adds	r3, r7, #2
 8002bf4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	1cba      	adds	r2, r7, #2
 8002bfc:	8812      	ldrh	r2, [r2, #0]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d004      	beq.n	8002c0c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002c02:	230f      	movs	r3, #15
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	2201      	movs	r2, #1
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	e003      	b.n	8002c14 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c0c:	230f      	movs	r3, #15
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002c14:	230f      	movs	r3, #15
 8002c16:	18fb      	adds	r3, r7, r3
 8002c18:	781b      	ldrb	r3, [r3, #0]
}
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	b004      	add	sp, #16
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	0008      	movs	r0, r1
 8002c2c:	0011      	movs	r1, r2
 8002c2e:	1cbb      	adds	r3, r7, #2
 8002c30:	1c02      	adds	r2, r0, #0
 8002c32:	801a      	strh	r2, [r3, #0]
 8002c34:	1c7b      	adds	r3, r7, #1
 8002c36:	1c0a      	adds	r2, r1, #0
 8002c38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c3a:	1c7b      	adds	r3, r7, #1
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d004      	beq.n	8002c4c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c42:	1cbb      	adds	r3, r7, #2
 8002c44:	881a      	ldrh	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c4a:	e003      	b.n	8002c54 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c4c:	1cbb      	adds	r3, r7, #2
 8002c4e:	881a      	ldrh	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c54:	46c0      	nop			@ (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b002      	add	sp, #8
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	000a      	movs	r2, r1
 8002c66:	1cbb      	adds	r3, r7, #2
 8002c68:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c70:	1cbb      	adds	r3, r7, #2
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4013      	ands	r3, r2
 8002c78:	041a      	lsls	r2, r3, #16
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	1cb9      	adds	r1, r7, #2
 8002c80:	8809      	ldrh	r1, [r1, #0]
 8002c82:	400b      	ands	r3, r1
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	619a      	str	r2, [r3, #24]
}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b004      	add	sp, #16
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	1dbb      	adds	r3, r7, #6
 8002c9e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002ca0:	4b10      	ldr	r3, [pc, #64]	@ (8002ce4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	1dba      	adds	r2, r7, #6
 8002ca6:	8812      	ldrh	r2, [r2, #0]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d008      	beq.n	8002cbe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002cac:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002cae:	1dba      	adds	r2, r7, #6
 8002cb0:	8812      	ldrh	r2, [r2, #0]
 8002cb2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002cb4:	1dbb      	adds	r3, r7, #6
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f000 f815 	bl	8002ce8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002cbe:	4b09      	ldr	r3, [pc, #36]	@ (8002ce4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	1dba      	adds	r2, r7, #6
 8002cc4:	8812      	ldrh	r2, [r2, #0]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d008      	beq.n	8002cdc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002cca:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002ccc:	1dba      	adds	r2, r7, #6
 8002cce:	8812      	ldrh	r2, [r2, #0]
 8002cd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002cd2:	1dbb      	adds	r3, r7, #6
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f7fe f9a0 	bl	800101c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002cdc:	46c0      	nop			@ (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b002      	add	sp, #8
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40021800 	.word	0x40021800

08002ce8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	0002      	movs	r2, r0
 8002cf0:	1dbb      	adds	r3, r7, #6
 8002cf2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002cf4:	46c0      	nop			@ (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e08f      	b.n	8002e2e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2241      	movs	r2, #65	@ 0x41
 8002d12:	5c9b      	ldrb	r3, [r3, r2]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d107      	bne.n	8002d2a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2240      	movs	r2, #64	@ 0x40
 8002d1e:	2100      	movs	r1, #0
 8002d20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7fe fe83 	bl	8001a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2241      	movs	r2, #65	@ 0x41
 8002d2e:	2124      	movs	r1, #36	@ 0x24
 8002d30:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	438a      	bics	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	493b      	ldr	r1, [pc, #236]	@ (8002e38 <HAL_I2C_Init+0x13c>)
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4938      	ldr	r1, [pc, #224]	@ (8002e3c <HAL_I2C_Init+0x140>)
 8002d5c:	400a      	ands	r2, r1
 8002d5e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d108      	bne.n	8002d7a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2180      	movs	r1, #128	@ 0x80
 8002d72:	0209      	lsls	r1, r1, #8
 8002d74:	430a      	orrs	r2, r1
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	e007      	b.n	8002d8a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2184      	movs	r1, #132	@ 0x84
 8002d84:	0209      	lsls	r1, r1, #8
 8002d86:	430a      	orrs	r2, r1
 8002d88:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d109      	bne.n	8002da6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2180      	movs	r1, #128	@ 0x80
 8002d9e:	0109      	lsls	r1, r1, #4
 8002da0:	430a      	orrs	r2, r1
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	e007      	b.n	8002db6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4923      	ldr	r1, [pc, #140]	@ (8002e40 <HAL_I2C_Init+0x144>)
 8002db2:	400a      	ands	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4920      	ldr	r1, [pc, #128]	@ (8002e44 <HAL_I2C_Init+0x148>)
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	491a      	ldr	r1, [pc, #104]	@ (8002e3c <HAL_I2C_Init+0x140>)
 8002dd2:	400a      	ands	r2, r1
 8002dd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69d9      	ldr	r1, [r3, #28]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1a      	ldr	r2, [r3, #32]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2241      	movs	r2, #65	@ 0x41
 8002e1a:	2120      	movs	r1, #32
 8002e1c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2242      	movs	r2, #66	@ 0x42
 8002e28:	2100      	movs	r1, #0
 8002e2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	0018      	movs	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b002      	add	sp, #8
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			@ (mov r8, r8)
 8002e38:	f0ffffff 	.word	0xf0ffffff
 8002e3c:	ffff7fff 	.word	0xffff7fff
 8002e40:	fffff7ff 	.word	0xfffff7ff
 8002e44:	02008000 	.word	0x02008000

08002e48 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e48:	b590      	push	{r4, r7, lr}
 8002e4a:	b089      	sub	sp, #36	@ 0x24
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	0008      	movs	r0, r1
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	0019      	movs	r1, r3
 8002e56:	230a      	movs	r3, #10
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	1c02      	adds	r2, r0, #0
 8002e5c:	801a      	strh	r2, [r3, #0]
 8002e5e:	2308      	movs	r3, #8
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	1c0a      	adds	r2, r1, #0
 8002e64:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2241      	movs	r2, #65	@ 0x41
 8002e6a:	5c9b      	ldrb	r3, [r3, r2]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	d000      	beq.n	8002e74 <HAL_I2C_Master_Transmit+0x2c>
 8002e72:	e10a      	b.n	800308a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2240      	movs	r2, #64	@ 0x40
 8002e78:	5c9b      	ldrb	r3, [r3, r2]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_I2C_Master_Transmit+0x3a>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e104      	b.n	800308c <HAL_I2C_Master_Transmit+0x244>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2240      	movs	r2, #64	@ 0x40
 8002e86:	2101      	movs	r1, #1
 8002e88:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e8a:	f7fe ffe3 	bl	8001e54 <HAL_GetTick>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e92:	2380      	movs	r3, #128	@ 0x80
 8002e94:	0219      	lsls	r1, r3, #8
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	2319      	movs	r3, #25
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f000 fa26 	bl	80032f0 <I2C_WaitOnFlagUntilTimeout>
 8002ea4:	1e03      	subs	r3, r0, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0ef      	b.n	800308c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2241      	movs	r2, #65	@ 0x41
 8002eb0:	2121      	movs	r1, #33	@ 0x21
 8002eb2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2242      	movs	r2, #66	@ 0x42
 8002eb8:	2110      	movs	r1, #16
 8002eba:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2208      	movs	r2, #8
 8002ecc:	18ba      	adds	r2, r7, r2
 8002ece:	8812      	ldrh	r2, [r2, #0]
 8002ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2bff      	cmp	r3, #255	@ 0xff
 8002ee0:	d906      	bls.n	8002ef0 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	22ff      	movs	r2, #255	@ 0xff
 8002ee6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002ee8:	2380      	movs	r3, #128	@ 0x80
 8002eea:	045b      	lsls	r3, r3, #17
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e007      	b.n	8002f00 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002efa:	2380      	movs	r3, #128	@ 0x80
 8002efc:	049b      	lsls	r3, r3, #18
 8002efe:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d027      	beq.n	8002f58 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0c:	781a      	ldrb	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	3301      	adds	r3, #1
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	697c      	ldr	r4, [r7, #20]
 8002f44:	230a      	movs	r3, #10
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	8819      	ldrh	r1, [r3, #0]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	4b51      	ldr	r3, [pc, #324]	@ (8003094 <HAL_I2C_Master_Transmit+0x24c>)
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	0023      	movs	r3, r4
 8002f52:	f000 fc45 	bl	80037e0 <I2C_TransferConfig>
 8002f56:	e06f      	b.n	8003038 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	697c      	ldr	r4, [r7, #20]
 8002f60:	230a      	movs	r3, #10
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	8819      	ldrh	r1, [r3, #0]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	4b4a      	ldr	r3, [pc, #296]	@ (8003094 <HAL_I2C_Master_Transmit+0x24c>)
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	0023      	movs	r3, r4
 8002f6e:	f000 fc37 	bl	80037e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f72:	e061      	b.n	8003038 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f000 fa10 	bl	80033a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f80:	1e03      	subs	r3, r0, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e081      	b.n	800308c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	781a      	ldrb	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d03a      	beq.n	8003038 <HAL_I2C_Master_Transmit+0x1f0>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d136      	bne.n	8003038 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	0013      	movs	r3, r2
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2180      	movs	r1, #128	@ 0x80
 8002fd8:	f000 f98a 	bl	80032f0 <I2C_WaitOnFlagUntilTimeout>
 8002fdc:	1e03      	subs	r3, r0, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e053      	b.n	800308c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2bff      	cmp	r3, #255	@ 0xff
 8002fec:	d911      	bls.n	8003012 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	22ff      	movs	r2, #255	@ 0xff
 8002ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	2380      	movs	r3, #128	@ 0x80
 8002ffc:	045c      	lsls	r4, r3, #17
 8002ffe:	230a      	movs	r3, #10
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	8819      	ldrh	r1, [r3, #0]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	2300      	movs	r3, #0
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	0023      	movs	r3, r4
 800300c:	f000 fbe8 	bl	80037e0 <I2C_TransferConfig>
 8003010:	e012      	b.n	8003038 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003020:	b2da      	uxtb	r2, r3
 8003022:	2380      	movs	r3, #128	@ 0x80
 8003024:	049c      	lsls	r4, r3, #18
 8003026:	230a      	movs	r3, #10
 8003028:	18fb      	adds	r3, r7, r3
 800302a:	8819      	ldrh	r1, [r3, #0]
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	2300      	movs	r3, #0
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	0023      	movs	r3, r4
 8003034:	f000 fbd4 	bl	80037e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d198      	bne.n	8002f74 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	0018      	movs	r0, r3
 800304a:	f000 f9ef 	bl	800342c <I2C_WaitOnSTOPFlagUntilTimeout>
 800304e:	1e03      	subs	r3, r0, #0
 8003050:	d001      	beq.n	8003056 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e01a      	b.n	800308c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2220      	movs	r2, #32
 800305c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	490b      	ldr	r1, [pc, #44]	@ (8003098 <HAL_I2C_Master_Transmit+0x250>)
 800306a:	400a      	ands	r2, r1
 800306c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2241      	movs	r2, #65	@ 0x41
 8003072:	2120      	movs	r1, #32
 8003074:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2242      	movs	r2, #66	@ 0x42
 800307a:	2100      	movs	r1, #0
 800307c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2240      	movs	r2, #64	@ 0x40
 8003082:	2100      	movs	r1, #0
 8003084:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	e000      	b.n	800308c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800308a:	2302      	movs	r3, #2
  }
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b007      	add	sp, #28
 8003092:	bd90      	pop	{r4, r7, pc}
 8003094:	80002000 	.word	0x80002000
 8003098:	fe00e800 	.word	0xfe00e800

0800309c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b089      	sub	sp, #36	@ 0x24
 80030a0:	af02      	add	r7, sp, #8
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	0008      	movs	r0, r1
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	0019      	movs	r1, r3
 80030aa:	230a      	movs	r3, #10
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	1c02      	adds	r2, r0, #0
 80030b0:	801a      	strh	r2, [r3, #0]
 80030b2:	2308      	movs	r3, #8
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	1c0a      	adds	r2, r1, #0
 80030b8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2241      	movs	r2, #65	@ 0x41
 80030be:	5c9b      	ldrb	r3, [r3, r2]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	d000      	beq.n	80030c8 <HAL_I2C_Master_Receive+0x2c>
 80030c6:	e0e8      	b.n	800329a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2240      	movs	r2, #64	@ 0x40
 80030cc:	5c9b      	ldrb	r3, [r3, r2]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_I2C_Master_Receive+0x3a>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e0e2      	b.n	800329c <HAL_I2C_Master_Receive+0x200>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2240      	movs	r2, #64	@ 0x40
 80030da:	2101      	movs	r1, #1
 80030dc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030de:	f7fe feb9 	bl	8001e54 <HAL_GetTick>
 80030e2:	0003      	movs	r3, r0
 80030e4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030e6:	2380      	movs	r3, #128	@ 0x80
 80030e8:	0219      	lsls	r1, r3, #8
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	2319      	movs	r3, #25
 80030f2:	2201      	movs	r2, #1
 80030f4:	f000 f8fc 	bl	80032f0 <I2C_WaitOnFlagUntilTimeout>
 80030f8:	1e03      	subs	r3, r0, #0
 80030fa:	d001      	beq.n	8003100 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0cd      	b.n	800329c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2241      	movs	r2, #65	@ 0x41
 8003104:	2122      	movs	r1, #34	@ 0x22
 8003106:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2242      	movs	r2, #66	@ 0x42
 800310c:	2110      	movs	r1, #16
 800310e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2208      	movs	r2, #8
 8003120:	18ba      	adds	r2, r7, r2
 8003122:	8812      	ldrh	r2, [r2, #0]
 8003124:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	2bff      	cmp	r3, #255	@ 0xff
 8003134:	d911      	bls.n	800315a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	22ff      	movs	r2, #255	@ 0xff
 800313a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003140:	b2da      	uxtb	r2, r3
 8003142:	2380      	movs	r3, #128	@ 0x80
 8003144:	045c      	lsls	r4, r3, #17
 8003146:	230a      	movs	r3, #10
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	8819      	ldrh	r1, [r3, #0]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	4b55      	ldr	r3, [pc, #340]	@ (80032a4 <HAL_I2C_Master_Receive+0x208>)
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	0023      	movs	r3, r4
 8003154:	f000 fb44 	bl	80037e0 <I2C_TransferConfig>
 8003158:	e076      	b.n	8003248 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003168:	b2da      	uxtb	r2, r3
 800316a:	2380      	movs	r3, #128	@ 0x80
 800316c:	049c      	lsls	r4, r3, #18
 800316e:	230a      	movs	r3, #10
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	8819      	ldrh	r1, [r3, #0]
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	4b4b      	ldr	r3, [pc, #300]	@ (80032a4 <HAL_I2C_Master_Receive+0x208>)
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	0023      	movs	r3, r4
 800317c:	f000 fb30 	bl	80037e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003180:	e062      	b.n	8003248 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	0018      	movs	r0, r3
 800318a:	f000 f993 	bl	80034b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800318e:	1e03      	subs	r3, r0, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e082      	b.n	800329c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d03a      	beq.n	8003248 <HAL_I2C_Master_Receive+0x1ac>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d136      	bne.n	8003248 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	0013      	movs	r3, r2
 80031e4:	2200      	movs	r2, #0
 80031e6:	2180      	movs	r1, #128	@ 0x80
 80031e8:	f000 f882 	bl	80032f0 <I2C_WaitOnFlagUntilTimeout>
 80031ec:	1e03      	subs	r3, r0, #0
 80031ee:	d001      	beq.n	80031f4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e053      	b.n	800329c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2bff      	cmp	r3, #255	@ 0xff
 80031fc:	d911      	bls.n	8003222 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	22ff      	movs	r2, #255	@ 0xff
 8003202:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003208:	b2da      	uxtb	r2, r3
 800320a:	2380      	movs	r3, #128	@ 0x80
 800320c:	045c      	lsls	r4, r3, #17
 800320e:	230a      	movs	r3, #10
 8003210:	18fb      	adds	r3, r7, r3
 8003212:	8819      	ldrh	r1, [r3, #0]
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	2300      	movs	r3, #0
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	0023      	movs	r3, r4
 800321c:	f000 fae0 	bl	80037e0 <I2C_TransferConfig>
 8003220:	e012      	b.n	8003248 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003230:	b2da      	uxtb	r2, r3
 8003232:	2380      	movs	r3, #128	@ 0x80
 8003234:	049c      	lsls	r4, r3, #18
 8003236:	230a      	movs	r3, #10
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	8819      	ldrh	r1, [r3, #0]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	2300      	movs	r3, #0
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	0023      	movs	r3, r4
 8003244:	f000 facc 	bl	80037e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d197      	bne.n	8003182 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	0018      	movs	r0, r3
 800325a:	f000 f8e7 	bl	800342c <I2C_WaitOnSTOPFlagUntilTimeout>
 800325e:	1e03      	subs	r3, r0, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e01a      	b.n	800329c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2220      	movs	r2, #32
 800326c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	490b      	ldr	r1, [pc, #44]	@ (80032a8 <HAL_I2C_Master_Receive+0x20c>)
 800327a:	400a      	ands	r2, r1
 800327c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2241      	movs	r2, #65	@ 0x41
 8003282:	2120      	movs	r1, #32
 8003284:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2242      	movs	r2, #66	@ 0x42
 800328a:	2100      	movs	r1, #0
 800328c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2240      	movs	r2, #64	@ 0x40
 8003292:	2100      	movs	r1, #0
 8003294:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	e000      	b.n	800329c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800329a:	2302      	movs	r3, #2
  }
}
 800329c:	0018      	movs	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	b007      	add	sp, #28
 80032a2:	bd90      	pop	{r4, r7, pc}
 80032a4:	80002400 	.word	0x80002400
 80032a8:	fe00e800 	.word	0xfe00e800

080032ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2202      	movs	r2, #2
 80032bc:	4013      	ands	r3, r2
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d103      	bne.n	80032ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2200      	movs	r2, #0
 80032c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2201      	movs	r2, #1
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d007      	beq.n	80032e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2101      	movs	r1, #1
 80032e4:	430a      	orrs	r2, r1
 80032e6:	619a      	str	r2, [r3, #24]
  }
}
 80032e8:	46c0      	nop			@ (mov r8, r8)
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b002      	add	sp, #8
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	1dfb      	adds	r3, r7, #7
 80032fe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003300:	e03a      	b.n	8003378 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	6839      	ldr	r1, [r7, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	0018      	movs	r0, r3
 800330a:	f000 f971 	bl	80035f0 <I2C_IsErrorOccurred>
 800330e:	1e03      	subs	r3, r0, #0
 8003310:	d001      	beq.n	8003316 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e040      	b.n	8003398 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	3301      	adds	r3, #1
 800331a:	d02d      	beq.n	8003378 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331c:	f7fe fd9a 	bl	8001e54 <HAL_GetTick>
 8003320:	0002      	movs	r2, r0
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d302      	bcc.n	8003332 <I2C_WaitOnFlagUntilTimeout+0x42>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d122      	bne.n	8003378 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	4013      	ands	r3, r2
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	425a      	negs	r2, r3
 8003342:	4153      	adcs	r3, r2
 8003344:	b2db      	uxtb	r3, r3
 8003346:	001a      	movs	r2, r3
 8003348:	1dfb      	adds	r3, r7, #7
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d113      	bne.n	8003378 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003354:	2220      	movs	r2, #32
 8003356:	431a      	orrs	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2241      	movs	r2, #65	@ 0x41
 8003360:	2120      	movs	r1, #32
 8003362:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2242      	movs	r2, #66	@ 0x42
 8003368:	2100      	movs	r1, #0
 800336a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2240      	movs	r2, #64	@ 0x40
 8003370:	2100      	movs	r1, #0
 8003372:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e00f      	b.n	8003398 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	4013      	ands	r3, r2
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	425a      	negs	r2, r3
 8003388:	4153      	adcs	r3, r2
 800338a:	b2db      	uxtb	r3, r3
 800338c:	001a      	movs	r2, r3
 800338e:	1dfb      	adds	r3, r7, #7
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d0b5      	beq.n	8003302 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	0018      	movs	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	b004      	add	sp, #16
 800339e:	bd80      	pop	{r7, pc}

080033a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033ac:	e032      	b.n	8003414 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	0018      	movs	r0, r3
 80033b6:	f000 f91b 	bl	80035f0 <I2C_IsErrorOccurred>
 80033ba:	1e03      	subs	r3, r0, #0
 80033bc:	d001      	beq.n	80033c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e030      	b.n	8003424 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	3301      	adds	r3, #1
 80033c6:	d025      	beq.n	8003414 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c8:	f7fe fd44 	bl	8001e54 <HAL_GetTick>
 80033cc:	0002      	movs	r2, r0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d302      	bcc.n	80033de <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d11a      	bne.n	8003414 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	2202      	movs	r2, #2
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d013      	beq.n	8003414 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f0:	2220      	movs	r2, #32
 80033f2:	431a      	orrs	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2241      	movs	r2, #65	@ 0x41
 80033fc:	2120      	movs	r1, #32
 80033fe:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2242      	movs	r2, #66	@ 0x42
 8003404:	2100      	movs	r1, #0
 8003406:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2240      	movs	r2, #64	@ 0x40
 800340c:	2100      	movs	r1, #0
 800340e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e007      	b.n	8003424 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	2202      	movs	r2, #2
 800341c:	4013      	ands	r3, r2
 800341e:	2b02      	cmp	r3, #2
 8003420:	d1c5      	bne.n	80033ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	0018      	movs	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	b004      	add	sp, #16
 800342a:	bd80      	pop	{r7, pc}

0800342c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003438:	e02f      	b.n	800349a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	0018      	movs	r0, r3
 8003442:	f000 f8d5 	bl	80035f0 <I2C_IsErrorOccurred>
 8003446:	1e03      	subs	r3, r0, #0
 8003448:	d001      	beq.n	800344e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e02d      	b.n	80034aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344e:	f7fe fd01 	bl	8001e54 <HAL_GetTick>
 8003452:	0002      	movs	r2, r0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	d302      	bcc.n	8003464 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d11a      	bne.n	800349a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	2220      	movs	r2, #32
 800346c:	4013      	ands	r3, r2
 800346e:	2b20      	cmp	r3, #32
 8003470:	d013      	beq.n	800349a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003476:	2220      	movs	r2, #32
 8003478:	431a      	orrs	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2241      	movs	r2, #65	@ 0x41
 8003482:	2120      	movs	r1, #32
 8003484:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2242      	movs	r2, #66	@ 0x42
 800348a:	2100      	movs	r1, #0
 800348c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2240      	movs	r2, #64	@ 0x40
 8003492:	2100      	movs	r1, #0
 8003494:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e007      	b.n	80034aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	2220      	movs	r2, #32
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d1c8      	bne.n	800343a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	0018      	movs	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b004      	add	sp, #16
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c0:	2317      	movs	r3, #23
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	2200      	movs	r2, #0
 80034c6:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80034c8:	e07b      	b.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	0018      	movs	r0, r3
 80034d2:	f000 f88d 	bl	80035f0 <I2C_IsErrorOccurred>
 80034d6:	1e03      	subs	r3, r0, #0
 80034d8:	d003      	beq.n	80034e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80034da:	2317      	movs	r3, #23
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	2201      	movs	r2, #1
 80034e0:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	2220      	movs	r2, #32
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	d140      	bne.n	8003572 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80034f0:	2117      	movs	r1, #23
 80034f2:	187b      	adds	r3, r7, r1
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d13b      	bne.n	8003572 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	2204      	movs	r2, #4
 8003502:	4013      	ands	r3, r2
 8003504:	2b04      	cmp	r3, #4
 8003506:	d106      	bne.n	8003516 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003510:	187b      	adds	r3, r7, r1
 8003512:	2200      	movs	r2, #0
 8003514:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2210      	movs	r2, #16
 800351e:	4013      	ands	r3, r2
 8003520:	2b10      	cmp	r3, #16
 8003522:	d123      	bne.n	800356c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2210      	movs	r2, #16
 800352a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2204      	movs	r2, #4
 8003530:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2220      	movs	r2, #32
 8003538:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4929      	ldr	r1, [pc, #164]	@ (80035ec <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8003546:	400a      	ands	r2, r1
 8003548:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2241      	movs	r2, #65	@ 0x41
 800354e:	2120      	movs	r1, #32
 8003550:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2242      	movs	r2, #66	@ 0x42
 8003556:	2100      	movs	r1, #0
 8003558:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2240      	movs	r2, #64	@ 0x40
 800355e:	2100      	movs	r1, #0
 8003560:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003562:	2317      	movs	r3, #23
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	2201      	movs	r2, #1
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	e002      	b.n	8003572 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003572:	f7fe fc6f 	bl	8001e54 <HAL_GetTick>
 8003576:	0002      	movs	r2, r0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	429a      	cmp	r2, r3
 8003580:	d302      	bcc.n	8003588 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d11c      	bne.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003588:	2017      	movs	r0, #23
 800358a:	183b      	adds	r3, r7, r0
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d117      	bne.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	2204      	movs	r2, #4
 800359a:	4013      	ands	r3, r2
 800359c:	2b04      	cmp	r3, #4
 800359e:	d010      	beq.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a4:	2220      	movs	r2, #32
 80035a6:	431a      	orrs	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2241      	movs	r2, #65	@ 0x41
 80035b0:	2120      	movs	r1, #32
 80035b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2240      	movs	r2, #64	@ 0x40
 80035b8:	2100      	movs	r1, #0
 80035ba:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80035bc:	183b      	adds	r3, r7, r0
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	2204      	movs	r2, #4
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d005      	beq.n	80035dc <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80035d0:	2317      	movs	r3, #23
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d100      	bne.n	80035dc <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80035da:	e776      	b.n	80034ca <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80035dc:	2317      	movs	r3, #23
 80035de:	18fb      	adds	r3, r7, r3
 80035e0:	781b      	ldrb	r3, [r3, #0]
}
 80035e2:	0018      	movs	r0, r3
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b006      	add	sp, #24
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	fe00e800 	.word	0xfe00e800

080035f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08a      	sub	sp, #40	@ 0x28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035fc:	2327      	movs	r3, #39	@ 0x27
 80035fe:	18fb      	adds	r3, r7, r3
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	2210      	movs	r2, #16
 8003618:	4013      	ands	r3, r2
 800361a:	d100      	bne.n	800361e <I2C_IsErrorOccurred+0x2e>
 800361c:	e079      	b.n	8003712 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2210      	movs	r2, #16
 8003624:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003626:	e057      	b.n	80036d8 <I2C_IsErrorOccurred+0xe8>
 8003628:	2227      	movs	r2, #39	@ 0x27
 800362a:	18bb      	adds	r3, r7, r2
 800362c:	18ba      	adds	r2, r7, r2
 800362e:	7812      	ldrb	r2, [r2, #0]
 8003630:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	3301      	adds	r3, #1
 8003636:	d04f      	beq.n	80036d8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003638:	f7fe fc0c 	bl	8001e54 <HAL_GetTick>
 800363c:	0002      	movs	r2, r0
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	429a      	cmp	r2, r3
 8003646:	d302      	bcc.n	800364e <I2C_IsErrorOccurred+0x5e>
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d144      	bne.n	80036d8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	2380      	movs	r3, #128	@ 0x80
 8003656:	01db      	lsls	r3, r3, #7
 8003658:	4013      	ands	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800365c:	2013      	movs	r0, #19
 800365e:	183b      	adds	r3, r7, r0
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	2142      	movs	r1, #66	@ 0x42
 8003664:	5c52      	ldrb	r2, [r2, r1]
 8003666:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	2380      	movs	r3, #128	@ 0x80
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	401a      	ands	r2, r3
 8003674:	2380      	movs	r3, #128	@ 0x80
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	429a      	cmp	r2, r3
 800367a:	d126      	bne.n	80036ca <I2C_IsErrorOccurred+0xda>
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	2380      	movs	r3, #128	@ 0x80
 8003680:	01db      	lsls	r3, r3, #7
 8003682:	429a      	cmp	r2, r3
 8003684:	d021      	beq.n	80036ca <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003686:	183b      	adds	r3, r7, r0
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b20      	cmp	r3, #32
 800368c:	d01d      	beq.n	80036ca <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2180      	movs	r1, #128	@ 0x80
 800369a:	01c9      	lsls	r1, r1, #7
 800369c:	430a      	orrs	r2, r1
 800369e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036a0:	f7fe fbd8 	bl	8001e54 <HAL_GetTick>
 80036a4:	0003      	movs	r3, r0
 80036a6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036a8:	e00f      	b.n	80036ca <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036aa:	f7fe fbd3 	bl	8001e54 <HAL_GetTick>
 80036ae:	0002      	movs	r2, r0
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b19      	cmp	r3, #25
 80036b6:	d908      	bls.n	80036ca <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	2220      	movs	r2, #32
 80036bc:	4313      	orrs	r3, r2
 80036be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036c0:	2327      	movs	r3, #39	@ 0x27
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	2201      	movs	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]

              break;
 80036c8:	e006      	b.n	80036d8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	2220      	movs	r2, #32
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d1e8      	bne.n	80036aa <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	2220      	movs	r2, #32
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d004      	beq.n	80036f0 <I2C_IsErrorOccurred+0x100>
 80036e6:	2327      	movs	r3, #39	@ 0x27
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d09b      	beq.n	8003628 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036f0:	2327      	movs	r3, #39	@ 0x27
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2220      	movs	r2, #32
 8003700:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	2204      	movs	r2, #4
 8003706:	4313      	orrs	r3, r2
 8003708:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800370a:	2327      	movs	r3, #39	@ 0x27
 800370c:	18fb      	adds	r3, r7, r3
 800370e:	2201      	movs	r2, #1
 8003710:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	2380      	movs	r3, #128	@ 0x80
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	4013      	ands	r3, r2
 8003722:	d00c      	beq.n	800373e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	2201      	movs	r2, #1
 8003728:	4313      	orrs	r3, r2
 800372a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2280      	movs	r2, #128	@ 0x80
 8003732:	0052      	lsls	r2, r2, #1
 8003734:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003736:	2327      	movs	r3, #39	@ 0x27
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	2201      	movs	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	2380      	movs	r3, #128	@ 0x80
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4013      	ands	r3, r2
 8003746:	d00c      	beq.n	8003762 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	2208      	movs	r2, #8
 800374c:	4313      	orrs	r3, r2
 800374e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2280      	movs	r2, #128	@ 0x80
 8003756:	00d2      	lsls	r2, r2, #3
 8003758:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800375a:	2327      	movs	r3, #39	@ 0x27
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	2380      	movs	r3, #128	@ 0x80
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4013      	ands	r3, r2
 800376a:	d00c      	beq.n	8003786 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	2202      	movs	r2, #2
 8003770:	4313      	orrs	r3, r2
 8003772:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2280      	movs	r2, #128	@ 0x80
 800377a:	0092      	lsls	r2, r2, #2
 800377c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800377e:	2327      	movs	r3, #39	@ 0x27
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	2201      	movs	r2, #1
 8003784:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003786:	2327      	movs	r3, #39	@ 0x27
 8003788:	18fb      	adds	r3, r7, r3
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01d      	beq.n	80037cc <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	0018      	movs	r0, r3
 8003794:	f7ff fd8a 	bl	80032ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	490e      	ldr	r1, [pc, #56]	@ (80037dc <I2C_IsErrorOccurred+0x1ec>)
 80037a4:	400a      	ands	r2, r1
 80037a6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	431a      	orrs	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2241      	movs	r2, #65	@ 0x41
 80037b8:	2120      	movs	r1, #32
 80037ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2242      	movs	r2, #66	@ 0x42
 80037c0:	2100      	movs	r1, #0
 80037c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2240      	movs	r2, #64	@ 0x40
 80037c8:	2100      	movs	r1, #0
 80037ca:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80037cc:	2327      	movs	r3, #39	@ 0x27
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	781b      	ldrb	r3, [r3, #0]
}
 80037d2:	0018      	movs	r0, r3
 80037d4:	46bd      	mov	sp, r7
 80037d6:	b00a      	add	sp, #40	@ 0x28
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	46c0      	nop			@ (mov r8, r8)
 80037dc:	fe00e800 	.word	0xfe00e800

080037e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037e0:	b590      	push	{r4, r7, lr}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	0008      	movs	r0, r1
 80037ea:	0011      	movs	r1, r2
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	240a      	movs	r4, #10
 80037f0:	193b      	adds	r3, r7, r4
 80037f2:	1c02      	adds	r2, r0, #0
 80037f4:	801a      	strh	r2, [r3, #0]
 80037f6:	2009      	movs	r0, #9
 80037f8:	183b      	adds	r3, r7, r0
 80037fa:	1c0a      	adds	r2, r1, #0
 80037fc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037fe:	193b      	adds	r3, r7, r4
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	059b      	lsls	r3, r3, #22
 8003804:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003806:	183b      	adds	r3, r7, r0
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	0419      	lsls	r1, r3, #16
 800380c:	23ff      	movs	r3, #255	@ 0xff
 800380e:	041b      	lsls	r3, r3, #16
 8003810:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003812:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381a:	4313      	orrs	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	085b      	lsrs	r3, r3, #1
 8003820:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800382a:	0d51      	lsrs	r1, r2, #21
 800382c:	2280      	movs	r2, #128	@ 0x80
 800382e:	00d2      	lsls	r2, r2, #3
 8003830:	400a      	ands	r2, r1
 8003832:	4907      	ldr	r1, [pc, #28]	@ (8003850 <I2C_TransferConfig+0x70>)
 8003834:	430a      	orrs	r2, r1
 8003836:	43d2      	mvns	r2, r2
 8003838:	401a      	ands	r2, r3
 800383a:	0011      	movs	r1, r2
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	46bd      	mov	sp, r7
 800384a:	b007      	add	sp, #28
 800384c:	bd90      	pop	{r4, r7, pc}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	03ff63ff 	.word	0x03ff63ff

08003854 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2241      	movs	r2, #65	@ 0x41
 8003862:	5c9b      	ldrb	r3, [r3, r2]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b20      	cmp	r3, #32
 8003868:	d138      	bne.n	80038dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2240      	movs	r2, #64	@ 0x40
 800386e:	5c9b      	ldrb	r3, [r3, r2]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003874:	2302      	movs	r3, #2
 8003876:	e032      	b.n	80038de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2240      	movs	r2, #64	@ 0x40
 800387c:	2101      	movs	r1, #1
 800387e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2241      	movs	r2, #65	@ 0x41
 8003884:	2124      	movs	r1, #36	@ 0x24
 8003886:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2101      	movs	r1, #1
 8003894:	438a      	bics	r2, r1
 8003896:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4911      	ldr	r1, [pc, #68]	@ (80038e8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80038a4:	400a      	ands	r2, r1
 80038a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6819      	ldr	r1, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2101      	movs	r1, #1
 80038c4:	430a      	orrs	r2, r1
 80038c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2241      	movs	r2, #65	@ 0x41
 80038cc:	2120      	movs	r1, #32
 80038ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2240      	movs	r2, #64	@ 0x40
 80038d4:	2100      	movs	r1, #0
 80038d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	e000      	b.n	80038de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038dc:	2302      	movs	r3, #2
  }
}
 80038de:	0018      	movs	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b002      	add	sp, #8
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			@ (mov r8, r8)
 80038e8:	ffffefff 	.word	0xffffefff

080038ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2241      	movs	r2, #65	@ 0x41
 80038fa:	5c9b      	ldrb	r3, [r3, r2]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d139      	bne.n	8003976 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2240      	movs	r2, #64	@ 0x40
 8003906:	5c9b      	ldrb	r3, [r3, r2]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800390c:	2302      	movs	r3, #2
 800390e:	e033      	b.n	8003978 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2240      	movs	r2, #64	@ 0x40
 8003914:	2101      	movs	r1, #1
 8003916:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2241      	movs	r2, #65	@ 0x41
 800391c:	2124      	movs	r1, #36	@ 0x24
 800391e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2101      	movs	r1, #1
 800392c:	438a      	bics	r2, r1
 800392e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4a11      	ldr	r2, [pc, #68]	@ (8003980 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800393c:	4013      	ands	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2101      	movs	r1, #1
 800395e:	430a      	orrs	r2, r1
 8003960:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2241      	movs	r2, #65	@ 0x41
 8003966:	2120      	movs	r1, #32
 8003968:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2240      	movs	r2, #64	@ 0x40
 800396e:	2100      	movs	r1, #0
 8003970:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	e000      	b.n	8003978 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003976:	2302      	movs	r3, #2
  }
}
 8003978:	0018      	movs	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	b004      	add	sp, #16
 800397e:	bd80      	pop	{r7, pc}
 8003980:	fffff0ff 	.word	0xfffff0ff

08003984 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003988:	4b04      	ldr	r3, [pc, #16]	@ (800399c <HAL_PWR_EnableBkUpAccess+0x18>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	4b03      	ldr	r3, [pc, #12]	@ (800399c <HAL_PWR_EnableBkUpAccess+0x18>)
 800398e:	2180      	movs	r1, #128	@ 0x80
 8003990:	0049      	lsls	r1, r1, #1
 8003992:	430a      	orrs	r2, r1
 8003994:	601a      	str	r2, [r3, #0]
}
 8003996:	46c0      	nop			@ (mov r8, r8)
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40007000 	.word	0x40007000

080039a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80039a8:	4b19      	ldr	r3, [pc, #100]	@ (8003a10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a19      	ldr	r2, [pc, #100]	@ (8003a14 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80039ae:	4013      	ands	r3, r2
 80039b0:	0019      	movs	r1, r3
 80039b2:	4b17      	ldr	r3, [pc, #92]	@ (8003a10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	2380      	movs	r3, #128	@ 0x80
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d11f      	bne.n	8003a04 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80039c4:	4b14      	ldr	r3, [pc, #80]	@ (8003a18 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	0013      	movs	r3, r2
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	189b      	adds	r3, r3, r2
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	4912      	ldr	r1, [pc, #72]	@ (8003a1c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80039d2:	0018      	movs	r0, r3
 80039d4:	f7fc fb96 	bl	8000104 <__udivsi3>
 80039d8:	0003      	movs	r3, r0
 80039da:	3301      	adds	r3, #1
 80039dc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039de:	e008      	b.n	80039f2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	e001      	b.n	80039f2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e009      	b.n	8003a06 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039f2:	4b07      	ldr	r3, [pc, #28]	@ (8003a10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80039f4:	695a      	ldr	r2, [r3, #20]
 80039f6:	2380      	movs	r3, #128	@ 0x80
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	401a      	ands	r2, r3
 80039fc:	2380      	movs	r3, #128	@ 0x80
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d0ed      	beq.n	80039e0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	0018      	movs	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b004      	add	sp, #16
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	46c0      	nop			@ (mov r8, r8)
 8003a10:	40007000 	.word	0x40007000
 8003a14:	fffff9ff 	.word	0xfffff9ff
 8003a18:	20000048 	.word	0x20000048
 8003a1c:	000f4240 	.word	0x000f4240

08003a20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e2fe      	b.n	8004030 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2201      	movs	r2, #1
 8003a38:	4013      	ands	r3, r2
 8003a3a:	d100      	bne.n	8003a3e <HAL_RCC_OscConfig+0x1e>
 8003a3c:	e07c      	b.n	8003b38 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a3e:	4bc3      	ldr	r3, [pc, #780]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2238      	movs	r2, #56	@ 0x38
 8003a44:	4013      	ands	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a48:	4bc0      	ldr	r3, [pc, #768]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	2203      	movs	r2, #3
 8003a4e:	4013      	ands	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d102      	bne.n	8003a5e <HAL_RCC_OscConfig+0x3e>
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d002      	beq.n	8003a64 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d10b      	bne.n	8003a7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a64:	4bb9      	ldr	r3, [pc, #740]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	2380      	movs	r3, #128	@ 0x80
 8003a6a:	029b      	lsls	r3, r3, #10
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d062      	beq.n	8003b36 <HAL_RCC_OscConfig+0x116>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d15e      	bne.n	8003b36 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e2d9      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	2380      	movs	r3, #128	@ 0x80
 8003a82:	025b      	lsls	r3, r3, #9
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d107      	bne.n	8003a98 <HAL_RCC_OscConfig+0x78>
 8003a88:	4bb0      	ldr	r3, [pc, #704]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4baf      	ldr	r3, [pc, #700]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003a8e:	2180      	movs	r1, #128	@ 0x80
 8003a90:	0249      	lsls	r1, r1, #9
 8003a92:	430a      	orrs	r2, r1
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e020      	b.n	8003ada <HAL_RCC_OscConfig+0xba>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	23a0      	movs	r3, #160	@ 0xa0
 8003a9e:	02db      	lsls	r3, r3, #11
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d10e      	bne.n	8003ac2 <HAL_RCC_OscConfig+0xa2>
 8003aa4:	4ba9      	ldr	r3, [pc, #676]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	4ba8      	ldr	r3, [pc, #672]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003aaa:	2180      	movs	r1, #128	@ 0x80
 8003aac:	02c9      	lsls	r1, r1, #11
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	4ba6      	ldr	r3, [pc, #664]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4ba5      	ldr	r3, [pc, #660]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003ab8:	2180      	movs	r1, #128	@ 0x80
 8003aba:	0249      	lsls	r1, r1, #9
 8003abc:	430a      	orrs	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	e00b      	b.n	8003ada <HAL_RCC_OscConfig+0xba>
 8003ac2:	4ba2      	ldr	r3, [pc, #648]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	4ba1      	ldr	r3, [pc, #644]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003ac8:	49a1      	ldr	r1, [pc, #644]	@ (8003d50 <HAL_RCC_OscConfig+0x330>)
 8003aca:	400a      	ands	r2, r1
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	4b9f      	ldr	r3, [pc, #636]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b9e      	ldr	r3, [pc, #632]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003ad4:	499f      	ldr	r1, [pc, #636]	@ (8003d54 <HAL_RCC_OscConfig+0x334>)
 8003ad6:	400a      	ands	r2, r1
 8003ad8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d014      	beq.n	8003b0c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae2:	f7fe f9b7 	bl	8001e54 <HAL_GetTick>
 8003ae6:	0003      	movs	r3, r0
 8003ae8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aec:	f7fe f9b2 	bl	8001e54 <HAL_GetTick>
 8003af0:	0002      	movs	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	@ 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e298      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003afe:	4b93      	ldr	r3, [pc, #588]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	2380      	movs	r3, #128	@ 0x80
 8003b04:	029b      	lsls	r3, r3, #10
 8003b06:	4013      	ands	r3, r2
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0xcc>
 8003b0a:	e015      	b.n	8003b38 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fe f9a2 	bl	8001e54 <HAL_GetTick>
 8003b10:	0003      	movs	r3, r0
 8003b12:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b16:	f7fe f99d 	bl	8001e54 <HAL_GetTick>
 8003b1a:	0002      	movs	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b64      	cmp	r3, #100	@ 0x64
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e283      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b28:	4b88      	ldr	r3, [pc, #544]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	2380      	movs	r3, #128	@ 0x80
 8003b2e:	029b      	lsls	r3, r3, #10
 8003b30:	4013      	ands	r3, r2
 8003b32:	d1f0      	bne.n	8003b16 <HAL_RCC_OscConfig+0xf6>
 8003b34:	e000      	b.n	8003b38 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b36:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d100      	bne.n	8003b44 <HAL_RCC_OscConfig+0x124>
 8003b42:	e099      	b.n	8003c78 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b44:	4b81      	ldr	r3, [pc, #516]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2238      	movs	r2, #56	@ 0x38
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b4e:	4b7f      	ldr	r3, [pc, #508]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2203      	movs	r2, #3
 8003b54:	4013      	ands	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b10      	cmp	r3, #16
 8003b5c:	d102      	bne.n	8003b64 <HAL_RCC_OscConfig+0x144>
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d002      	beq.n	8003b6a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d135      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b6a:	4b78      	ldr	r3, [pc, #480]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	2380      	movs	r3, #128	@ 0x80
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	4013      	ands	r3, r2
 8003b74:	d005      	beq.n	8003b82 <HAL_RCC_OscConfig+0x162>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e256      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b82:	4b72      	ldr	r3, [pc, #456]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	4a74      	ldr	r2, [pc, #464]	@ (8003d58 <HAL_RCC_OscConfig+0x338>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	0019      	movs	r1, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	021a      	lsls	r2, r3, #8
 8003b92:	4b6e      	ldr	r3, [pc, #440]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003b94:	430a      	orrs	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d112      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b9e:	4b6b      	ldr	r3, [pc, #428]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a6e      	ldr	r2, [pc, #440]	@ (8003d5c <HAL_RCC_OscConfig+0x33c>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	4b67      	ldr	r3, [pc, #412]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003bb2:	4b66      	ldr	r3, [pc, #408]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	0adb      	lsrs	r3, r3, #11
 8003bb8:	2207      	movs	r2, #7
 8003bba:	4013      	ands	r3, r2
 8003bbc:	4a68      	ldr	r2, [pc, #416]	@ (8003d60 <HAL_RCC_OscConfig+0x340>)
 8003bbe:	40da      	lsrs	r2, r3
 8003bc0:	4b68      	ldr	r3, [pc, #416]	@ (8003d64 <HAL_RCC_OscConfig+0x344>)
 8003bc2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003bc4:	4b68      	ldr	r3, [pc, #416]	@ (8003d68 <HAL_RCC_OscConfig+0x348>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f7fe f8e7 	bl	8001d9c <HAL_InitTick>
 8003bce:	1e03      	subs	r3, r0, #0
 8003bd0:	d051      	beq.n	8003c76 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e22c      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d030      	beq.n	8003c40 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003bde:	4b5b      	ldr	r3, [pc, #364]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a5e      	ldr	r2, [pc, #376]	@ (8003d5c <HAL_RCC_OscConfig+0x33c>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	0019      	movs	r1, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	4b57      	ldr	r3, [pc, #348]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003bf2:	4b56      	ldr	r3, [pc, #344]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4b55      	ldr	r3, [pc, #340]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003bf8:	2180      	movs	r1, #128	@ 0x80
 8003bfa:	0049      	lsls	r1, r1, #1
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fe f928 	bl	8001e54 <HAL_GetTick>
 8003c04:	0003      	movs	r3, r0
 8003c06:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c0a:	f7fe f923 	bl	8001e54 <HAL_GetTick>
 8003c0e:	0002      	movs	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e209      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	2380      	movs	r3, #128	@ 0x80
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4013      	ands	r3, r2
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c28:	4b48      	ldr	r3, [pc, #288]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	4a4a      	ldr	r2, [pc, #296]	@ (8003d58 <HAL_RCC_OscConfig+0x338>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	0019      	movs	r1, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	021a      	lsls	r2, r3, #8
 8003c38:	4b44      	ldr	r3, [pc, #272]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
 8003c3e:	e01b      	b.n	8003c78 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003c40:	4b42      	ldr	r3, [pc, #264]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b41      	ldr	r3, [pc, #260]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003c46:	4949      	ldr	r1, [pc, #292]	@ (8003d6c <HAL_RCC_OscConfig+0x34c>)
 8003c48:	400a      	ands	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4c:	f7fe f902 	bl	8001e54 <HAL_GetTick>
 8003c50:	0003      	movs	r3, r0
 8003c52:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c56:	f7fe f8fd 	bl	8001e54 <HAL_GetTick>
 8003c5a:	0002      	movs	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e1e3      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c68:	4b38      	ldr	r3, [pc, #224]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	2380      	movs	r3, #128	@ 0x80
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4013      	ands	r3, r2
 8003c72:	d1f0      	bne.n	8003c56 <HAL_RCC_OscConfig+0x236>
 8003c74:	e000      	b.n	8003c78 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c76:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2208      	movs	r2, #8
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d047      	beq.n	8003d12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c82:	4b32      	ldr	r3, [pc, #200]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2238      	movs	r2, #56	@ 0x38
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2b18      	cmp	r3, #24
 8003c8c:	d10a      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c92:	2202      	movs	r2, #2
 8003c94:	4013      	ands	r3, r2
 8003c96:	d03c      	beq.n	8003d12 <HAL_RCC_OscConfig+0x2f2>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d138      	bne.n	8003d12 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e1c5      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d019      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003cac:	4b27      	ldr	r3, [pc, #156]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003cae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003cb0:	4b26      	ldr	r3, [pc, #152]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fe f8cc 	bl	8001e54 <HAL_GetTick>
 8003cbc:	0003      	movs	r3, r0
 8003cbe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc2:	f7fe f8c7 	bl	8001e54 <HAL_GetTick>
 8003cc6:	0002      	movs	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e1ad      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cd8:	2202      	movs	r2, #2
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d0f1      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x2a2>
 8003cde:	e018      	b.n	8003d12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003ce2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003ce4:	4b19      	ldr	r3, [pc, #100]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	438a      	bics	r2, r1
 8003cea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fe f8b2 	bl	8001e54 <HAL_GetTick>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf6:	f7fe f8ad 	bl	8001e54 <HAL_GetTick>
 8003cfa:	0002      	movs	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e193      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d08:	4b10      	ldr	r3, [pc, #64]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d1f1      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2204      	movs	r2, #4
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d100      	bne.n	8003d1e <HAL_RCC_OscConfig+0x2fe>
 8003d1c:	e0c6      	b.n	8003eac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d1e:	231f      	movs	r3, #31
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003d26:	4b09      	ldr	r3, [pc, #36]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2238      	movs	r2, #56	@ 0x38
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	d11e      	bne.n	8003d70 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003d32:	4b06      	ldr	r3, [pc, #24]	@ (8003d4c <HAL_RCC_OscConfig+0x32c>)
 8003d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d36:	2202      	movs	r2, #2
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d100      	bne.n	8003d3e <HAL_RCC_OscConfig+0x31e>
 8003d3c:	e0b6      	b.n	8003eac <HAL_RCC_OscConfig+0x48c>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d000      	beq.n	8003d48 <HAL_RCC_OscConfig+0x328>
 8003d46:	e0b1      	b.n	8003eac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e171      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	fffeffff 	.word	0xfffeffff
 8003d54:	fffbffff 	.word	0xfffbffff
 8003d58:	ffff80ff 	.word	0xffff80ff
 8003d5c:	ffffc7ff 	.word	0xffffc7ff
 8003d60:	00f42400 	.word	0x00f42400
 8003d64:	20000048 	.word	0x20000048
 8003d68:	2000004c 	.word	0x2000004c
 8003d6c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d70:	4bb1      	ldr	r3, [pc, #708]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003d72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d74:	2380      	movs	r3, #128	@ 0x80
 8003d76:	055b      	lsls	r3, r3, #21
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d101      	bne.n	8003d80 <HAL_RCC_OscConfig+0x360>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <HAL_RCC_OscConfig+0x362>
 8003d80:	2300      	movs	r3, #0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d011      	beq.n	8003daa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003d86:	4bac      	ldr	r3, [pc, #688]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003d88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d8a:	4bab      	ldr	r3, [pc, #684]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003d8c:	2180      	movs	r1, #128	@ 0x80
 8003d8e:	0549      	lsls	r1, r1, #21
 8003d90:	430a      	orrs	r2, r1
 8003d92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d94:	4ba8      	ldr	r3, [pc, #672]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003d96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d98:	2380      	movs	r3, #128	@ 0x80
 8003d9a:	055b      	lsls	r3, r3, #21
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003da2:	231f      	movs	r3, #31
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003daa:	4ba4      	ldr	r3, [pc, #656]	@ (800403c <HAL_RCC_OscConfig+0x61c>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	2380      	movs	r3, #128	@ 0x80
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4013      	ands	r3, r2
 8003db4:	d11a      	bne.n	8003dec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003db6:	4ba1      	ldr	r3, [pc, #644]	@ (800403c <HAL_RCC_OscConfig+0x61c>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4ba0      	ldr	r3, [pc, #640]	@ (800403c <HAL_RCC_OscConfig+0x61c>)
 8003dbc:	2180      	movs	r1, #128	@ 0x80
 8003dbe:	0049      	lsls	r1, r1, #1
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003dc4:	f7fe f846 	bl	8001e54 <HAL_GetTick>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dce:	f7fe f841 	bl	8001e54 <HAL_GetTick>
 8003dd2:	0002      	movs	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e127      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de0:	4b96      	ldr	r3, [pc, #600]	@ (800403c <HAL_RCC_OscConfig+0x61c>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	2380      	movs	r3, #128	@ 0x80
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	4013      	ands	r3, r2
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d106      	bne.n	8003e02 <HAL_RCC_OscConfig+0x3e2>
 8003df4:	4b90      	ldr	r3, [pc, #576]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003df6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003df8:	4b8f      	ldr	r3, [pc, #572]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e00:	e01c      	b.n	8003e3c <HAL_RCC_OscConfig+0x41c>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b05      	cmp	r3, #5
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCC_OscConfig+0x404>
 8003e0a:	4b8b      	ldr	r3, [pc, #556]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003e0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e0e:	4b8a      	ldr	r3, [pc, #552]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003e10:	2104      	movs	r1, #4
 8003e12:	430a      	orrs	r2, r1
 8003e14:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e16:	4b88      	ldr	r3, [pc, #544]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003e18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e1a:	4b87      	ldr	r3, [pc, #540]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e22:	e00b      	b.n	8003e3c <HAL_RCC_OscConfig+0x41c>
 8003e24:	4b84      	ldr	r3, [pc, #528]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003e26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e28:	4b83      	ldr	r3, [pc, #524]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	438a      	bics	r2, r1
 8003e2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e30:	4b81      	ldr	r3, [pc, #516]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003e32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e34:	4b80      	ldr	r3, [pc, #512]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003e36:	2104      	movs	r1, #4
 8003e38:	438a      	bics	r2, r1
 8003e3a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d014      	beq.n	8003e6e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fe f806 	bl	8001e54 <HAL_GetTick>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e4c:	e009      	b.n	8003e62 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4e:	f7fe f801 	bl	8001e54 <HAL_GetTick>
 8003e52:	0002      	movs	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	4a79      	ldr	r2, [pc, #484]	@ (8004040 <HAL_RCC_OscConfig+0x620>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e0e6      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e62:	4b75      	ldr	r3, [pc, #468]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e66:	2202      	movs	r2, #2
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCC_OscConfig+0x42e>
 8003e6c:	e013      	b.n	8003e96 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6e:	f7fd fff1 	bl	8001e54 <HAL_GetTick>
 8003e72:	0003      	movs	r3, r0
 8003e74:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e76:	e009      	b.n	8003e8c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e78:	f7fd ffec 	bl	8001e54 <HAL_GetTick>
 8003e7c:	0002      	movs	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	4a6f      	ldr	r2, [pc, #444]	@ (8004040 <HAL_RCC_OscConfig+0x620>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e0d1      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e8c:	4b6a      	ldr	r3, [pc, #424]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e90:	2202      	movs	r2, #2
 8003e92:	4013      	ands	r3, r2
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003e96:	231f      	movs	r3, #31
 8003e98:	18fb      	adds	r3, r7, r3
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d105      	bne.n	8003eac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003ea0:	4b65      	ldr	r3, [pc, #404]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003ea2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ea4:	4b64      	ldr	r3, [pc, #400]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003ea6:	4967      	ldr	r1, [pc, #412]	@ (8004044 <HAL_RCC_OscConfig+0x624>)
 8003ea8:	400a      	ands	r2, r1
 8003eaa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d100      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x496>
 8003eb4:	e0bb      	b.n	800402e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eb6:	4b60      	ldr	r3, [pc, #384]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2238      	movs	r2, #56	@ 0x38
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b10      	cmp	r3, #16
 8003ec0:	d100      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x4a4>
 8003ec2:	e07b      	b.n	8003fbc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d156      	bne.n	8003f7a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ecc:	4b5a      	ldr	r3, [pc, #360]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b59      	ldr	r3, [pc, #356]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003ed2:	495d      	ldr	r1, [pc, #372]	@ (8004048 <HAL_RCC_OscConfig+0x628>)
 8003ed4:	400a      	ands	r2, r1
 8003ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7fd ffbc 	bl	8001e54 <HAL_GetTick>
 8003edc:	0003      	movs	r3, r0
 8003ede:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee2:	f7fd ffb7 	bl	8001e54 <HAL_GetTick>
 8003ee6:	0002      	movs	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e09d      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef4:	4b50      	ldr	r3, [pc, #320]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	2380      	movs	r3, #128	@ 0x80
 8003efa:	049b      	lsls	r3, r3, #18
 8003efc:	4013      	ands	r3, r2
 8003efe:	d1f0      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f00:	4b4d      	ldr	r3, [pc, #308]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4a51      	ldr	r2, [pc, #324]	@ (800404c <HAL_RCC_OscConfig+0x62c>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	0019      	movs	r1, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1a      	ldr	r2, [r3, #32]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f18:	021b      	lsls	r3, r3, #8
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	4b42      	ldr	r3, [pc, #264]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003f30:	430a      	orrs	r2, r1
 8003f32:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f34:	4b40      	ldr	r3, [pc, #256]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	4b3f      	ldr	r3, [pc, #252]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003f3a:	2180      	movs	r1, #128	@ 0x80
 8003f3c:	0449      	lsls	r1, r1, #17
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003f42:	4b3d      	ldr	r3, [pc, #244]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	4b3c      	ldr	r3, [pc, #240]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003f48:	2180      	movs	r1, #128	@ 0x80
 8003f4a:	0549      	lsls	r1, r1, #21
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fd ff80 	bl	8001e54 <HAL_GetTick>
 8003f54:	0003      	movs	r3, r0
 8003f56:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fd ff7b 	bl	8001e54 <HAL_GetTick>
 8003f5e:	0002      	movs	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e061      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f6c:	4b32      	ldr	r3, [pc, #200]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	2380      	movs	r3, #128	@ 0x80
 8003f72:	049b      	lsls	r3, r3, #18
 8003f74:	4013      	ands	r3, r2
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x53a>
 8003f78:	e059      	b.n	800402e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4b2e      	ldr	r3, [pc, #184]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003f80:	4931      	ldr	r1, [pc, #196]	@ (8004048 <HAL_RCC_OscConfig+0x628>)
 8003f82:	400a      	ands	r2, r1
 8003f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f86:	f7fd ff65 	bl	8001e54 <HAL_GetTick>
 8003f8a:	0003      	movs	r3, r0
 8003f8c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fd ff60 	bl	8001e54 <HAL_GetTick>
 8003f94:	0002      	movs	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e046      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa2:	4b25      	ldr	r3, [pc, #148]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	2380      	movs	r3, #128	@ 0x80
 8003fa8:	049b      	lsls	r3, r3, #18
 8003faa:	4013      	ands	r3, r2
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003fae:	4b22      	ldr	r3, [pc, #136]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	4b21      	ldr	r3, [pc, #132]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003fb4:	4926      	ldr	r1, [pc, #152]	@ (8004050 <HAL_RCC_OscConfig+0x630>)
 8003fb6:	400a      	ands	r2, r1
 8003fb8:	60da      	str	r2, [r3, #12]
 8003fba:	e038      	b.n	800402e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e033      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8004038 <HAL_RCC_OscConfig+0x618>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	401a      	ands	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d126      	bne.n	800402a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2270      	movs	r2, #112	@ 0x70
 8003fe0:	401a      	ands	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d11f      	bne.n	800402a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	23fe      	movs	r3, #254	@ 0xfe
 8003fee:	01db      	lsls	r3, r3, #7
 8003ff0:	401a      	ands	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d116      	bne.n	800402a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	23f8      	movs	r3, #248	@ 0xf8
 8004000:	039b      	lsls	r3, r3, #14
 8004002:	401a      	ands	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d10e      	bne.n	800402a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	23e0      	movs	r3, #224	@ 0xe0
 8004010:	051b      	lsls	r3, r3, #20
 8004012:	401a      	ands	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004018:	429a      	cmp	r2, r3
 800401a:	d106      	bne.n	800402a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	0f5b      	lsrs	r3, r3, #29
 8004020:	075a      	lsls	r2, r3, #29
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004026:	429a      	cmp	r2, r3
 8004028:	d001      	beq.n	800402e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	0018      	movs	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	b008      	add	sp, #32
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000
 800403c:	40007000 	.word	0x40007000
 8004040:	00001388 	.word	0x00001388
 8004044:	efffffff 	.word	0xefffffff
 8004048:	feffffff 	.word	0xfeffffff
 800404c:	11c1808c 	.word	0x11c1808c
 8004050:	eefefffc 	.word	0xeefefffc

08004054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0e9      	b.n	800423c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004068:	4b76      	ldr	r3, [pc, #472]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2207      	movs	r2, #7
 800406e:	4013      	ands	r3, r2
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d91e      	bls.n	80040b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004076:	4b73      	ldr	r3, [pc, #460]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2207      	movs	r2, #7
 800407c:	4393      	bics	r3, r2
 800407e:	0019      	movs	r1, r3
 8004080:	4b70      	ldr	r3, [pc, #448]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004088:	f7fd fee4 	bl	8001e54 <HAL_GetTick>
 800408c:	0003      	movs	r3, r0
 800408e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004090:	e009      	b.n	80040a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004092:	f7fd fedf 	bl	8001e54 <HAL_GetTick>
 8004096:	0002      	movs	r2, r0
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	4a6a      	ldr	r2, [pc, #424]	@ (8004248 <HAL_RCC_ClockConfig+0x1f4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e0ca      	b.n	800423c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040a6:	4b67      	ldr	r3, [pc, #412]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2207      	movs	r2, #7
 80040ac:	4013      	ands	r3, r2
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d1ee      	bne.n	8004092 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2202      	movs	r2, #2
 80040ba:	4013      	ands	r3, r2
 80040bc:	d015      	beq.n	80040ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2204      	movs	r2, #4
 80040c4:	4013      	ands	r3, r2
 80040c6:	d006      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80040c8:	4b60      	ldr	r3, [pc, #384]	@ (800424c <HAL_RCC_ClockConfig+0x1f8>)
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	4b5f      	ldr	r3, [pc, #380]	@ (800424c <HAL_RCC_ClockConfig+0x1f8>)
 80040ce:	21e0      	movs	r1, #224	@ 0xe0
 80040d0:	01c9      	lsls	r1, r1, #7
 80040d2:	430a      	orrs	r2, r1
 80040d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d6:	4b5d      	ldr	r3, [pc, #372]	@ (800424c <HAL_RCC_ClockConfig+0x1f8>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	4a5d      	ldr	r2, [pc, #372]	@ (8004250 <HAL_RCC_ClockConfig+0x1fc>)
 80040dc:	4013      	ands	r3, r2
 80040de:	0019      	movs	r1, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	4b59      	ldr	r3, [pc, #356]	@ (800424c <HAL_RCC_ClockConfig+0x1f8>)
 80040e6:	430a      	orrs	r2, r1
 80040e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2201      	movs	r2, #1
 80040f0:	4013      	ands	r3, r2
 80040f2:	d057      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d107      	bne.n	800410c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040fc:	4b53      	ldr	r3, [pc, #332]	@ (800424c <HAL_RCC_ClockConfig+0x1f8>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	2380      	movs	r3, #128	@ 0x80
 8004102:	029b      	lsls	r3, r3, #10
 8004104:	4013      	ands	r3, r2
 8004106:	d12b      	bne.n	8004160 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e097      	b.n	800423c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d107      	bne.n	8004124 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004114:	4b4d      	ldr	r3, [pc, #308]	@ (800424c <HAL_RCC_ClockConfig+0x1f8>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	2380      	movs	r3, #128	@ 0x80
 800411a:	049b      	lsls	r3, r3, #18
 800411c:	4013      	ands	r3, r2
 800411e:	d11f      	bne.n	8004160 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e08b      	b.n	800423c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d107      	bne.n	800413c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800412c:	4b47      	ldr	r3, [pc, #284]	@ (800424c <HAL_RCC_ClockConfig+0x1f8>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	2380      	movs	r3, #128	@ 0x80
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4013      	ands	r3, r2
 8004136:	d113      	bne.n	8004160 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e07f      	b.n	800423c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b03      	cmp	r3, #3
 8004142:	d106      	bne.n	8004152 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004144:	4b41      	ldr	r3, [pc, #260]	@ (800424c <HAL_RCC_ClockConfig+0x1f8>)
 8004146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004148:	2202      	movs	r2, #2
 800414a:	4013      	ands	r3, r2
 800414c:	d108      	bne.n	8004160 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e074      	b.n	800423c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004152:	4b3e      	ldr	r3, [pc, #248]	@ (800424c <HAL_RCC_ClockConfig+0x1f8>)
 8004154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004156:	2202      	movs	r2, #2
 8004158:	4013      	ands	r3, r2
 800415a:	d101      	bne.n	8004160 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e06d      	b.n	800423c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004160:	4b3a      	ldr	r3, [pc, #232]	@ (800424c <HAL_RCC_ClockConfig+0x1f8>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2207      	movs	r2, #7
 8004166:	4393      	bics	r3, r2
 8004168:	0019      	movs	r1, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	4b37      	ldr	r3, [pc, #220]	@ (800424c <HAL_RCC_ClockConfig+0x1f8>)
 8004170:	430a      	orrs	r2, r1
 8004172:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004174:	f7fd fe6e 	bl	8001e54 <HAL_GetTick>
 8004178:	0003      	movs	r3, r0
 800417a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417c:	e009      	b.n	8004192 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800417e:	f7fd fe69 	bl	8001e54 <HAL_GetTick>
 8004182:	0002      	movs	r2, r0
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	4a2f      	ldr	r2, [pc, #188]	@ (8004248 <HAL_RCC_ClockConfig+0x1f4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e054      	b.n	800423c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004192:	4b2e      	ldr	r3, [pc, #184]	@ (800424c <HAL_RCC_ClockConfig+0x1f8>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2238      	movs	r2, #56	@ 0x38
 8004198:	401a      	ands	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d1ec      	bne.n	800417e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041a4:	4b27      	ldr	r3, [pc, #156]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2207      	movs	r2, #7
 80041aa:	4013      	ands	r3, r2
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d21e      	bcs.n	80041f0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b24      	ldr	r3, [pc, #144]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2207      	movs	r2, #7
 80041b8:	4393      	bics	r3, r2
 80041ba:	0019      	movs	r1, r3
 80041bc:	4b21      	ldr	r3, [pc, #132]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041c4:	f7fd fe46 	bl	8001e54 <HAL_GetTick>
 80041c8:	0003      	movs	r3, r0
 80041ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041cc:	e009      	b.n	80041e2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ce:	f7fd fe41 	bl	8001e54 <HAL_GetTick>
 80041d2:	0002      	movs	r2, r0
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004248 <HAL_RCC_ClockConfig+0x1f4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e02c      	b.n	800423c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041e2:	4b18      	ldr	r3, [pc, #96]	@ (8004244 <HAL_RCC_ClockConfig+0x1f0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2207      	movs	r2, #7
 80041e8:	4013      	ands	r3, r2
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d1ee      	bne.n	80041ce <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2204      	movs	r2, #4
 80041f6:	4013      	ands	r3, r2
 80041f8:	d009      	beq.n	800420e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80041fa:	4b14      	ldr	r3, [pc, #80]	@ (800424c <HAL_RCC_ClockConfig+0x1f8>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	4a15      	ldr	r2, [pc, #84]	@ (8004254 <HAL_RCC_ClockConfig+0x200>)
 8004200:	4013      	ands	r3, r2
 8004202:	0019      	movs	r1, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	4b10      	ldr	r3, [pc, #64]	@ (800424c <HAL_RCC_ClockConfig+0x1f8>)
 800420a:	430a      	orrs	r2, r1
 800420c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800420e:	f000 f829 	bl	8004264 <HAL_RCC_GetSysClockFreq>
 8004212:	0001      	movs	r1, r0
 8004214:	4b0d      	ldr	r3, [pc, #52]	@ (800424c <HAL_RCC_ClockConfig+0x1f8>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	0a1b      	lsrs	r3, r3, #8
 800421a:	220f      	movs	r2, #15
 800421c:	401a      	ands	r2, r3
 800421e:	4b0e      	ldr	r3, [pc, #56]	@ (8004258 <HAL_RCC_ClockConfig+0x204>)
 8004220:	0092      	lsls	r2, r2, #2
 8004222:	58d3      	ldr	r3, [r2, r3]
 8004224:	221f      	movs	r2, #31
 8004226:	4013      	ands	r3, r2
 8004228:	000a      	movs	r2, r1
 800422a:	40da      	lsrs	r2, r3
 800422c:	4b0b      	ldr	r3, [pc, #44]	@ (800425c <HAL_RCC_ClockConfig+0x208>)
 800422e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004230:	4b0b      	ldr	r3, [pc, #44]	@ (8004260 <HAL_RCC_ClockConfig+0x20c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	0018      	movs	r0, r3
 8004236:	f7fd fdb1 	bl	8001d9c <HAL_InitTick>
 800423a:	0003      	movs	r3, r0
}
 800423c:	0018      	movs	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	b004      	add	sp, #16
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40022000 	.word	0x40022000
 8004248:	00001388 	.word	0x00001388
 800424c:	40021000 	.word	0x40021000
 8004250:	fffff0ff 	.word	0xfffff0ff
 8004254:	ffff8fff 	.word	0xffff8fff
 8004258:	08005ee8 	.word	0x08005ee8
 800425c:	20000048 	.word	0x20000048
 8004260:	2000004c 	.word	0x2000004c

08004264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800426a:	4b3c      	ldr	r3, [pc, #240]	@ (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2238      	movs	r2, #56	@ 0x38
 8004270:	4013      	ands	r3, r2
 8004272:	d10f      	bne.n	8004294 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004274:	4b39      	ldr	r3, [pc, #228]	@ (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	0adb      	lsrs	r3, r3, #11
 800427a:	2207      	movs	r2, #7
 800427c:	4013      	ands	r3, r2
 800427e:	2201      	movs	r2, #1
 8004280:	409a      	lsls	r2, r3
 8004282:	0013      	movs	r3, r2
 8004284:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004286:	6839      	ldr	r1, [r7, #0]
 8004288:	4835      	ldr	r0, [pc, #212]	@ (8004360 <HAL_RCC_GetSysClockFreq+0xfc>)
 800428a:	f7fb ff3b 	bl	8000104 <__udivsi3>
 800428e:	0003      	movs	r3, r0
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	e05d      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004294:	4b31      	ldr	r3, [pc, #196]	@ (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2238      	movs	r2, #56	@ 0x38
 800429a:	4013      	ands	r3, r2
 800429c:	2b08      	cmp	r3, #8
 800429e:	d102      	bne.n	80042a6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042a0:	4b30      	ldr	r3, [pc, #192]	@ (8004364 <HAL_RCC_GetSysClockFreq+0x100>)
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	e054      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042a6:	4b2d      	ldr	r3, [pc, #180]	@ (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2238      	movs	r2, #56	@ 0x38
 80042ac:	4013      	ands	r3, r2
 80042ae:	2b10      	cmp	r3, #16
 80042b0:	d138      	bne.n	8004324 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80042b2:	4b2a      	ldr	r3, [pc, #168]	@ (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2203      	movs	r2, #3
 80042b8:	4013      	ands	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042bc:	4b27      	ldr	r3, [pc, #156]	@ (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	2207      	movs	r2, #7
 80042c4:	4013      	ands	r3, r2
 80042c6:	3301      	adds	r3, #1
 80042c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d10d      	bne.n	80042ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4824      	ldr	r0, [pc, #144]	@ (8004364 <HAL_RCC_GetSysClockFreq+0x100>)
 80042d4:	f7fb ff16 	bl	8000104 <__udivsi3>
 80042d8:	0003      	movs	r3, r0
 80042da:	0019      	movs	r1, r3
 80042dc:	4b1f      	ldr	r3, [pc, #124]	@ (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	0a1b      	lsrs	r3, r3, #8
 80042e2:	227f      	movs	r2, #127	@ 0x7f
 80042e4:	4013      	ands	r3, r2
 80042e6:	434b      	muls	r3, r1
 80042e8:	617b      	str	r3, [r7, #20]
        break;
 80042ea:	e00d      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	481c      	ldr	r0, [pc, #112]	@ (8004360 <HAL_RCC_GetSysClockFreq+0xfc>)
 80042f0:	f7fb ff08 	bl	8000104 <__udivsi3>
 80042f4:	0003      	movs	r3, r0
 80042f6:	0019      	movs	r1, r3
 80042f8:	4b18      	ldr	r3, [pc, #96]	@ (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	0a1b      	lsrs	r3, r3, #8
 80042fe:	227f      	movs	r2, #127	@ 0x7f
 8004300:	4013      	ands	r3, r2
 8004302:	434b      	muls	r3, r1
 8004304:	617b      	str	r3, [r7, #20]
        break;
 8004306:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004308:	4b14      	ldr	r3, [pc, #80]	@ (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	0f5b      	lsrs	r3, r3, #29
 800430e:	2207      	movs	r2, #7
 8004310:	4013      	ands	r3, r2
 8004312:	3301      	adds	r3, #1
 8004314:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	6978      	ldr	r0, [r7, #20]
 800431a:	f7fb fef3 	bl	8000104 <__udivsi3>
 800431e:	0003      	movs	r3, r0
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	e015      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004324:	4b0d      	ldr	r3, [pc, #52]	@ (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2238      	movs	r2, #56	@ 0x38
 800432a:	4013      	ands	r3, r2
 800432c:	2b20      	cmp	r3, #32
 800432e:	d103      	bne.n	8004338 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004330:	2380      	movs	r3, #128	@ 0x80
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	e00b      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004338:	4b08      	ldr	r3, [pc, #32]	@ (800435c <HAL_RCC_GetSysClockFreq+0xf8>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2238      	movs	r2, #56	@ 0x38
 800433e:	4013      	ands	r3, r2
 8004340:	2b18      	cmp	r3, #24
 8004342:	d103      	bne.n	800434c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004344:	23fa      	movs	r3, #250	@ 0xfa
 8004346:	01db      	lsls	r3, r3, #7
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	e001      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004350:	693b      	ldr	r3, [r7, #16]
}
 8004352:	0018      	movs	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	b006      	add	sp, #24
 8004358:	bd80      	pop	{r7, pc}
 800435a:	46c0      	nop			@ (mov r8, r8)
 800435c:	40021000 	.word	0x40021000
 8004360:	00f42400 	.word	0x00f42400
 8004364:	007a1200 	.word	0x007a1200

08004368 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004370:	2313      	movs	r3, #19
 8004372:	18fb      	adds	r3, r7, r3
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004378:	2312      	movs	r3, #18
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	2380      	movs	r3, #128	@ 0x80
 8004386:	029b      	lsls	r3, r3, #10
 8004388:	4013      	ands	r3, r2
 800438a:	d100      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800438c:	e0a3      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800438e:	2011      	movs	r0, #17
 8004390:	183b      	adds	r3, r7, r0
 8004392:	2200      	movs	r2, #0
 8004394:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004396:	4ba5      	ldr	r3, [pc, #660]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004398:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800439a:	2380      	movs	r3, #128	@ 0x80
 800439c:	055b      	lsls	r3, r3, #21
 800439e:	4013      	ands	r3, r2
 80043a0:	d110      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043a2:	4ba2      	ldr	r3, [pc, #648]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043a6:	4ba1      	ldr	r3, [pc, #644]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043a8:	2180      	movs	r1, #128	@ 0x80
 80043aa:	0549      	lsls	r1, r1, #21
 80043ac:	430a      	orrs	r2, r1
 80043ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80043b0:	4b9e      	ldr	r3, [pc, #632]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043b4:	2380      	movs	r3, #128	@ 0x80
 80043b6:	055b      	lsls	r3, r3, #21
 80043b8:	4013      	ands	r3, r2
 80043ba:	60bb      	str	r3, [r7, #8]
 80043bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043be:	183b      	adds	r3, r7, r0
 80043c0:	2201      	movs	r2, #1
 80043c2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043c4:	4b9a      	ldr	r3, [pc, #616]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	4b99      	ldr	r3, [pc, #612]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80043ca:	2180      	movs	r1, #128	@ 0x80
 80043cc:	0049      	lsls	r1, r1, #1
 80043ce:	430a      	orrs	r2, r1
 80043d0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043d2:	f7fd fd3f 	bl	8001e54 <HAL_GetTick>
 80043d6:	0003      	movs	r3, r0
 80043d8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043da:	e00b      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043dc:	f7fd fd3a 	bl	8001e54 <HAL_GetTick>
 80043e0:	0002      	movs	r2, r0
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d904      	bls.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80043ea:	2313      	movs	r3, #19
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	2203      	movs	r2, #3
 80043f0:	701a      	strb	r2, [r3, #0]
        break;
 80043f2:	e005      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043f4:	4b8e      	ldr	r3, [pc, #568]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	2380      	movs	r3, #128	@ 0x80
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	4013      	ands	r3, r2
 80043fe:	d0ed      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004400:	2313      	movs	r3, #19
 8004402:	18fb      	adds	r3, r7, r3
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d154      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800440a:	4b88      	ldr	r3, [pc, #544]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800440c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800440e:	23c0      	movs	r3, #192	@ 0xc0
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4013      	ands	r3, r2
 8004414:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d019      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	429a      	cmp	r2, r3
 8004424:	d014      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004426:	4b81      	ldr	r3, [pc, #516]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800442a:	4a82      	ldr	r2, [pc, #520]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800442c:	4013      	ands	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004430:	4b7e      	ldr	r3, [pc, #504]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004432:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004434:	4b7d      	ldr	r3, [pc, #500]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004436:	2180      	movs	r1, #128	@ 0x80
 8004438:	0249      	lsls	r1, r1, #9
 800443a:	430a      	orrs	r2, r1
 800443c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800443e:	4b7b      	ldr	r3, [pc, #492]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004440:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004442:	4b7a      	ldr	r3, [pc, #488]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004444:	497c      	ldr	r1, [pc, #496]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004446:	400a      	ands	r2, r1
 8004448:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800444a:	4b78      	ldr	r3, [pc, #480]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2201      	movs	r2, #1
 8004454:	4013      	ands	r3, r2
 8004456:	d016      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fd fcfc 	bl	8001e54 <HAL_GetTick>
 800445c:	0003      	movs	r3, r0
 800445e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004460:	e00c      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004462:	f7fd fcf7 	bl	8001e54 <HAL_GetTick>
 8004466:	0002      	movs	r2, r0
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	4a73      	ldr	r2, [pc, #460]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d904      	bls.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004472:	2313      	movs	r3, #19
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	2203      	movs	r2, #3
 8004478:	701a      	strb	r2, [r3, #0]
            break;
 800447a:	e004      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800447c:	4b6b      	ldr	r3, [pc, #428]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800447e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004480:	2202      	movs	r2, #2
 8004482:	4013      	ands	r3, r2
 8004484:	d0ed      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004486:	2313      	movs	r3, #19
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10a      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004490:	4b66      	ldr	r3, [pc, #408]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004494:	4a67      	ldr	r2, [pc, #412]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004496:	4013      	ands	r3, r2
 8004498:	0019      	movs	r1, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800449e:	4b63      	ldr	r3, [pc, #396]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044a0:	430a      	orrs	r2, r1
 80044a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044a4:	e00c      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044a6:	2312      	movs	r3, #18
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	2213      	movs	r2, #19
 80044ac:	18ba      	adds	r2, r7, r2
 80044ae:	7812      	ldrb	r2, [r2, #0]
 80044b0:	701a      	strb	r2, [r3, #0]
 80044b2:	e005      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b4:	2312      	movs	r3, #18
 80044b6:	18fb      	adds	r3, r7, r3
 80044b8:	2213      	movs	r2, #19
 80044ba:	18ba      	adds	r2, r7, r2
 80044bc:	7812      	ldrb	r2, [r2, #0]
 80044be:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044c0:	2311      	movs	r3, #17
 80044c2:	18fb      	adds	r3, r7, r3
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d105      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ca:	4b58      	ldr	r3, [pc, #352]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044ce:	4b57      	ldr	r3, [pc, #348]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044d0:	495b      	ldr	r1, [pc, #364]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80044d2:	400a      	ands	r2, r1
 80044d4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2201      	movs	r2, #1
 80044dc:	4013      	ands	r3, r2
 80044de:	d009      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044e0:	4b52      	ldr	r3, [pc, #328]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e4:	2203      	movs	r2, #3
 80044e6:	4393      	bics	r3, r2
 80044e8:	0019      	movs	r1, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	4b4f      	ldr	r3, [pc, #316]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044f0:	430a      	orrs	r2, r1
 80044f2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2210      	movs	r2, #16
 80044fa:	4013      	ands	r3, r2
 80044fc:	d009      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044fe:	4b4b      	ldr	r3, [pc, #300]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004502:	4a50      	ldr	r2, [pc, #320]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004504:	4013      	ands	r3, r2
 8004506:	0019      	movs	r1, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	4b47      	ldr	r3, [pc, #284]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800450e:	430a      	orrs	r2, r1
 8004510:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	2380      	movs	r3, #128	@ 0x80
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4013      	ands	r3, r2
 800451c:	d009      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800451e:	4b43      	ldr	r3, [pc, #268]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004522:	4a49      	ldr	r2, [pc, #292]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004524:	4013      	ands	r3, r2
 8004526:	0019      	movs	r1, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	695a      	ldr	r2, [r3, #20]
 800452c:	4b3f      	ldr	r3, [pc, #252]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800452e:	430a      	orrs	r2, r1
 8004530:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	2380      	movs	r3, #128	@ 0x80
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	4013      	ands	r3, r2
 800453c:	d009      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800453e:	4b3b      	ldr	r3, [pc, #236]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004542:	4a42      	ldr	r2, [pc, #264]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004544:	4013      	ands	r3, r2
 8004546:	0019      	movs	r1, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699a      	ldr	r2, [r3, #24]
 800454c:	4b37      	ldr	r3, [pc, #220]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800454e:	430a      	orrs	r2, r1
 8004550:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2220      	movs	r2, #32
 8004558:	4013      	ands	r3, r2
 800455a:	d009      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800455c:	4b33      	ldr	r3, [pc, #204]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800455e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004560:	4a3b      	ldr	r2, [pc, #236]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004562:	4013      	ands	r3, r2
 8004564:	0019      	movs	r1, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	4b30      	ldr	r3, [pc, #192]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800456c:	430a      	orrs	r2, r1
 800456e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	2380      	movs	r3, #128	@ 0x80
 8004576:	01db      	lsls	r3, r3, #7
 8004578:	4013      	ands	r3, r2
 800457a:	d015      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800457c:	4b2b      	ldr	r3, [pc, #172]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800457e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	0899      	lsrs	r1, r3, #2
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	4b28      	ldr	r3, [pc, #160]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800458a:	430a      	orrs	r2, r1
 800458c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69da      	ldr	r2, [r3, #28]
 8004592:	2380      	movs	r3, #128	@ 0x80
 8004594:	05db      	lsls	r3, r3, #23
 8004596:	429a      	cmp	r2, r3
 8004598:	d106      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800459a:	4b24      	ldr	r3, [pc, #144]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	4b23      	ldr	r3, [pc, #140]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045a0:	2180      	movs	r1, #128	@ 0x80
 80045a2:	0249      	lsls	r1, r1, #9
 80045a4:	430a      	orrs	r2, r1
 80045a6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	2380      	movs	r3, #128	@ 0x80
 80045ae:	039b      	lsls	r3, r3, #14
 80045b0:	4013      	ands	r3, r2
 80045b2:	d016      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80045b4:	4b1d      	ldr	r3, [pc, #116]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b8:	4a26      	ldr	r2, [pc, #152]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	0019      	movs	r1, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1a      	ldr	r2, [r3, #32]
 80045c2:	4b1a      	ldr	r3, [pc, #104]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045c4:	430a      	orrs	r2, r1
 80045c6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1a      	ldr	r2, [r3, #32]
 80045cc:	2380      	movs	r3, #128	@ 0x80
 80045ce:	03db      	lsls	r3, r3, #15
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d106      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80045d4:	4b15      	ldr	r3, [pc, #84]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	4b14      	ldr	r3, [pc, #80]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045da:	2180      	movs	r1, #128	@ 0x80
 80045dc:	0449      	lsls	r1, r1, #17
 80045de:	430a      	orrs	r2, r1
 80045e0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	2380      	movs	r3, #128	@ 0x80
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	4013      	ands	r3, r2
 80045ec:	d016      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80045ee:	4b0f      	ldr	r3, [pc, #60]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f2:	4a19      	ldr	r2, [pc, #100]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	0019      	movs	r1, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	4b0b      	ldr	r3, [pc, #44]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045fe:	430a      	orrs	r2, r1
 8004600:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	2380      	movs	r3, #128	@ 0x80
 8004608:	01db      	lsls	r3, r3, #7
 800460a:	429a      	cmp	r2, r3
 800460c:	d106      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800460e:	4b07      	ldr	r3, [pc, #28]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	4b06      	ldr	r3, [pc, #24]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004614:	2180      	movs	r1, #128	@ 0x80
 8004616:	0249      	lsls	r1, r1, #9
 8004618:	430a      	orrs	r2, r1
 800461a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800461c:	2312      	movs	r3, #18
 800461e:	18fb      	adds	r3, r7, r3
 8004620:	781b      	ldrb	r3, [r3, #0]
}
 8004622:	0018      	movs	r0, r3
 8004624:	46bd      	mov	sp, r7
 8004626:	b006      	add	sp, #24
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			@ (mov r8, r8)
 800462c:	40021000 	.word	0x40021000
 8004630:	40007000 	.word	0x40007000
 8004634:	fffffcff 	.word	0xfffffcff
 8004638:	fffeffff 	.word	0xfffeffff
 800463c:	00001388 	.word	0x00001388
 8004640:	efffffff 	.word	0xefffffff
 8004644:	fffff3ff 	.word	0xfffff3ff
 8004648:	fff3ffff 	.word	0xfff3ffff
 800464c:	ffcfffff 	.word	0xffcfffff
 8004650:	ffffcfff 	.word	0xffffcfff
 8004654:	ffbfffff 	.word	0xffbfffff
 8004658:	ffff3fff 	.word	0xffff3fff

0800465c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800465c:	b5b0      	push	{r4, r5, r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004664:	230f      	movs	r3, #15
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	2201      	movs	r2, #1
 800466a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d100      	bne.n	8004674 <HAL_RTC_Init+0x18>
 8004672:	e08c      	b.n	800478e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2229      	movs	r2, #41	@ 0x29
 8004678:	5c9b      	ldrb	r3, [r3, r2]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10b      	bne.n	8004698 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2228      	movs	r2, #40	@ 0x28
 8004684:	2100      	movs	r1, #0
 8004686:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2288      	movs	r2, #136	@ 0x88
 800468c:	0212      	lsls	r2, r2, #8
 800468e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	0018      	movs	r0, r3
 8004694:	f7fd fa2e 	bl	8001af4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2229      	movs	r2, #41	@ 0x29
 800469c:	2102      	movs	r1, #2
 800469e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	2210      	movs	r2, #16
 80046a8:	4013      	ands	r3, r2
 80046aa:	2b10      	cmp	r3, #16
 80046ac:	d062      	beq.n	8004774 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	22ca      	movs	r2, #202	@ 0xca
 80046b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2253      	movs	r2, #83	@ 0x53
 80046bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80046be:	250f      	movs	r5, #15
 80046c0:	197c      	adds	r4, r7, r5
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	0018      	movs	r0, r3
 80046c6:	f000 fbf3 	bl	8004eb0 <RTC_EnterInitMode>
 80046ca:	0003      	movs	r3, r0
 80046cc:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80046ce:	0028      	movs	r0, r5
 80046d0:	183b      	adds	r3, r7, r0
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d12c      	bne.n	8004732 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	492e      	ldr	r1, [pc, #184]	@ (800479c <HAL_RTC_Init+0x140>)
 80046e4:	400a      	ands	r2, r1
 80046e6:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6999      	ldr	r1, [r3, #24]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6912      	ldr	r2, [r2, #16]
 800470e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6919      	ldr	r1, [r3, #16]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	041a      	lsls	r2, r3, #16
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004724:	183c      	adds	r4, r7, r0
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	0018      	movs	r0, r3
 800472a:	f000 fc03 	bl	8004f34 <RTC_ExitInitMode>
 800472e:	0003      	movs	r3, r0
 8004730:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004732:	230f      	movs	r3, #15
 8004734:	18fb      	adds	r3, r7, r3
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d116      	bne.n	800476a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699a      	ldr	r2, [r3, #24]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	00d2      	lsls	r2, r2, #3
 8004748:	08d2      	lsrs	r2, r2, #3
 800474a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6999      	ldr	r1, [r3, #24]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	431a      	orrs	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	22ff      	movs	r2, #255	@ 0xff
 8004770:	625a      	str	r2, [r3, #36]	@ 0x24
 8004772:	e003      	b.n	800477c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004774:	230f      	movs	r3, #15
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800477c:	230f      	movs	r3, #15
 800477e:	18fb      	adds	r3, r7, r3
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d103      	bne.n	800478e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2229      	movs	r2, #41	@ 0x29
 800478a:	2101      	movs	r1, #1
 800478c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800478e:	230f      	movs	r3, #15
 8004790:	18fb      	adds	r3, r7, r3
 8004792:	781b      	ldrb	r3, [r3, #0]
}
 8004794:	0018      	movs	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	b004      	add	sp, #16
 800479a:	bdb0      	pop	{r4, r5, r7, pc}
 800479c:	fb8fffbf 	.word	0xfb8fffbf

080047a0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047a0:	b5b0      	push	{r4, r5, r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2228      	movs	r2, #40	@ 0x28
 80047b0:	5c9b      	ldrb	r3, [r3, r2]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_RTC_SetTime+0x1a>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e092      	b.n	80048e0 <HAL_RTC_SetTime+0x140>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2228      	movs	r2, #40	@ 0x28
 80047be:	2101      	movs	r1, #1
 80047c0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2229      	movs	r2, #41	@ 0x29
 80047c6:	2102      	movs	r1, #2
 80047c8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	22ca      	movs	r2, #202	@ 0xca
 80047d0:	625a      	str	r2, [r3, #36]	@ 0x24
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2253      	movs	r2, #83	@ 0x53
 80047d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80047da:	2513      	movs	r5, #19
 80047dc:	197c      	adds	r4, r7, r5
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	0018      	movs	r0, r3
 80047e2:	f000 fb65 	bl	8004eb0 <RTC_EnterInitMode>
 80047e6:	0003      	movs	r3, r0
 80047e8:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80047ea:	197b      	adds	r3, r7, r5
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d162      	bne.n	80048b8 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d125      	bne.n	8004844 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	2240      	movs	r2, #64	@ 0x40
 8004800:	4013      	ands	r3, r2
 8004802:	d102      	bne.n	800480a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2200      	movs	r2, #0
 8004808:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	0018      	movs	r0, r3
 8004810:	f000 fbd4 	bl	8004fbc <RTC_ByteToBcd2>
 8004814:	0003      	movs	r3, r0
 8004816:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	785b      	ldrb	r3, [r3, #1]
 800481c:	0018      	movs	r0, r3
 800481e:	f000 fbcd 	bl	8004fbc <RTC_ByteToBcd2>
 8004822:	0003      	movs	r3, r0
 8004824:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004826:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	789b      	ldrb	r3, [r3, #2]
 800482c:	0018      	movs	r0, r3
 800482e:	f000 fbc5 	bl	8004fbc <RTC_ByteToBcd2>
 8004832:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004834:	0022      	movs	r2, r4
 8004836:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	78db      	ldrb	r3, [r3, #3]
 800483c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800483e:	4313      	orrs	r3, r2
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	e017      	b.n	8004874 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	2240      	movs	r2, #64	@ 0x40
 800484c:	4013      	ands	r3, r2
 800484e:	d102      	bne.n	8004856 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2200      	movs	r2, #0
 8004854:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	785b      	ldrb	r3, [r3, #1]
 8004860:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004862:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004868:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	78db      	ldrb	r3, [r3, #3]
 800486e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	491b      	ldr	r1, [pc, #108]	@ (80048e8 <HAL_RTC_SetTime+0x148>)
 800487c:	400a      	ands	r2, r1
 800487e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4918      	ldr	r1, [pc, #96]	@ (80048ec <HAL_RTC_SetTime+0x14c>)
 800488c:	400a      	ands	r2, r1
 800488e:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6999      	ldr	r1, [r3, #24]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	431a      	orrs	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80048a8:	2313      	movs	r3, #19
 80048aa:	18fc      	adds	r4, r7, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	0018      	movs	r0, r3
 80048b0:	f000 fb40 	bl	8004f34 <RTC_ExitInitMode>
 80048b4:	0003      	movs	r3, r0
 80048b6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	22ff      	movs	r2, #255	@ 0xff
 80048be:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 80048c0:	2313      	movs	r3, #19
 80048c2:	18fb      	adds	r3, r7, r3
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d103      	bne.n	80048d2 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2229      	movs	r2, #41	@ 0x29
 80048ce:	2101      	movs	r1, #1
 80048d0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2228      	movs	r2, #40	@ 0x28
 80048d6:	2100      	movs	r1, #0
 80048d8:	5499      	strb	r1, [r3, r2]

  return status;
 80048da:	2313      	movs	r3, #19
 80048dc:	18fb      	adds	r3, r7, r3
 80048de:	781b      	ldrb	r3, [r3, #0]
}
 80048e0:	0018      	movs	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b006      	add	sp, #24
 80048e6:	bdb0      	pop	{r4, r5, r7, pc}
 80048e8:	007f7f7f 	.word	0x007f7f7f
 80048ec:	fffbffff 	.word	0xfffbffff

080048f0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	045b      	lsls	r3, r3, #17
 800490e:	0c5a      	lsrs	r2, r3, #17
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a22      	ldr	r2, [pc, #136]	@ (80049a4 <HAL_RTC_GetTime+0xb4>)
 800491c:	4013      	ands	r3, r2
 800491e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	0c1b      	lsrs	r3, r3, #16
 8004924:	b2db      	uxtb	r3, r3
 8004926:	223f      	movs	r2, #63	@ 0x3f
 8004928:	4013      	ands	r3, r2
 800492a:	b2da      	uxtb	r2, r3
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	0a1b      	lsrs	r3, r3, #8
 8004934:	b2db      	uxtb	r3, r3
 8004936:	227f      	movs	r2, #127	@ 0x7f
 8004938:	4013      	ands	r3, r2
 800493a:	b2da      	uxtb	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	227f      	movs	r2, #127	@ 0x7f
 8004946:	4013      	ands	r3, r2
 8004948:	b2da      	uxtb	r2, r3
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	0d9b      	lsrs	r3, r3, #22
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2201      	movs	r2, #1
 8004956:	4013      	ands	r3, r2
 8004958:	b2da      	uxtb	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d11a      	bne.n	800499a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	0018      	movs	r0, r3
 800496a:	f000 fb4f 	bl	800500c <RTC_Bcd2ToByte>
 800496e:	0003      	movs	r3, r0
 8004970:	001a      	movs	r2, r3
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	785b      	ldrb	r3, [r3, #1]
 800497a:	0018      	movs	r0, r3
 800497c:	f000 fb46 	bl	800500c <RTC_Bcd2ToByte>
 8004980:	0003      	movs	r3, r0
 8004982:	001a      	movs	r2, r3
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	789b      	ldrb	r3, [r3, #2]
 800498c:	0018      	movs	r0, r3
 800498e:	f000 fb3d 	bl	800500c <RTC_Bcd2ToByte>
 8004992:	0003      	movs	r3, r0
 8004994:	001a      	movs	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	0018      	movs	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	b006      	add	sp, #24
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	007f7f7f 	.word	0x007f7f7f

080049a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80049a8:	b5b0      	push	{r4, r5, r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2228      	movs	r2, #40	@ 0x28
 80049b8:	5c9b      	ldrb	r3, [r3, r2]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <HAL_RTC_SetDate+0x1a>
 80049be:	2302      	movs	r3, #2
 80049c0:	e07e      	b.n	8004ac0 <HAL_RTC_SetDate+0x118>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2228      	movs	r2, #40	@ 0x28
 80049c6:	2101      	movs	r1, #1
 80049c8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2229      	movs	r2, #41	@ 0x29
 80049ce:	2102      	movs	r1, #2
 80049d0:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10e      	bne.n	80049f6 <HAL_RTC_SetDate+0x4e>
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	785b      	ldrb	r3, [r3, #1]
 80049dc:	001a      	movs	r2, r3
 80049de:	2310      	movs	r3, #16
 80049e0:	4013      	ands	r3, r2
 80049e2:	d008      	beq.n	80049f6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	785b      	ldrb	r3, [r3, #1]
 80049e8:	2210      	movs	r2, #16
 80049ea:	4393      	bics	r3, r2
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	330a      	adds	r3, #10
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d11c      	bne.n	8004a36 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	78db      	ldrb	r3, [r3, #3]
 8004a00:	0018      	movs	r0, r3
 8004a02:	f000 fadb 	bl	8004fbc <RTC_ByteToBcd2>
 8004a06:	0003      	movs	r3, r0
 8004a08:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	785b      	ldrb	r3, [r3, #1]
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f000 fad4 	bl	8004fbc <RTC_ByteToBcd2>
 8004a14:	0003      	movs	r3, r0
 8004a16:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a18:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	789b      	ldrb	r3, [r3, #2]
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f000 facc 	bl	8004fbc <RTC_ByteToBcd2>
 8004a24:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004a26:	0022      	movs	r2, r4
 8004a28:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a30:	4313      	orrs	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	e00e      	b.n	8004a54 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	78db      	ldrb	r3, [r3, #3]
 8004a3a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	785b      	ldrb	r3, [r3, #1]
 8004a40:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004a42:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004a48:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004a50:	4313      	orrs	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	22ca      	movs	r2, #202	@ 0xca
 8004a5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2253      	movs	r2, #83	@ 0x53
 8004a62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a64:	2513      	movs	r5, #19
 8004a66:	197c      	adds	r4, r7, r5
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f000 fa20 	bl	8004eb0 <RTC_EnterInitMode>
 8004a70:	0003      	movs	r3, r0
 8004a72:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004a74:	0028      	movs	r0, r5
 8004a76:	183b      	adds	r3, r7, r0
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10c      	bne.n	8004a98 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4910      	ldr	r1, [pc, #64]	@ (8004ac8 <HAL_RTC_SetDate+0x120>)
 8004a86:	400a      	ands	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004a8a:	183c      	adds	r4, r7, r0
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f000 fa50 	bl	8004f34 <RTC_ExitInitMode>
 8004a94:	0003      	movs	r3, r0
 8004a96:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	22ff      	movs	r2, #255	@ 0xff
 8004a9e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004aa0:	2313      	movs	r3, #19
 8004aa2:	18fb      	adds	r3, r7, r3
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d103      	bne.n	8004ab2 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2229      	movs	r2, #41	@ 0x29
 8004aae:	2101      	movs	r1, #1
 8004ab0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2228      	movs	r2, #40	@ 0x28
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	5499      	strb	r1, [r3, r2]

  return status;
 8004aba:	2313      	movs	r3, #19
 8004abc:	18fb      	adds	r3, r7, r3
 8004abe:	781b      	ldrb	r3, [r3, #0]
}
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	b006      	add	sp, #24
 8004ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ac8:	00ffff3f 	.word	0x00ffff3f

08004acc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	4a21      	ldr	r2, [pc, #132]	@ (8004b64 <HAL_RTC_GetDate+0x98>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	0c1b      	lsrs	r3, r3, #16
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	0a1b      	lsrs	r3, r3, #8
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	221f      	movs	r2, #31
 8004af6:	4013      	ands	r3, r2
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	223f      	movs	r2, #63	@ 0x3f
 8004b04:	4013      	ands	r3, r2
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	0b5b      	lsrs	r3, r3, #13
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2207      	movs	r2, #7
 8004b14:	4013      	ands	r3, r2
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d11a      	bne.n	8004b58 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	78db      	ldrb	r3, [r3, #3]
 8004b26:	0018      	movs	r0, r3
 8004b28:	f000 fa70 	bl	800500c <RTC_Bcd2ToByte>
 8004b2c:	0003      	movs	r3, r0
 8004b2e:	001a      	movs	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	785b      	ldrb	r3, [r3, #1]
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f000 fa67 	bl	800500c <RTC_Bcd2ToByte>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	001a      	movs	r2, r3
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	789b      	ldrb	r3, [r3, #2]
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	f000 fa5e 	bl	800500c <RTC_Bcd2ToByte>
 8004b50:	0003      	movs	r3, r0
 8004b52:	001a      	movs	r2, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	b006      	add	sp, #24
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	46c0      	nop			@ (mov r8, r8)
 8004b64:	00ffff3f 	.word	0x00ffff3f

08004b68 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004b68:	b590      	push	{r4, r7, lr}
 8004b6a:	b089      	sub	sp, #36	@ 0x24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2228      	movs	r2, #40	@ 0x28
 8004b78:	5c9b      	ldrb	r3, [r3, r2]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_RTC_SetAlarm_IT+0x1a>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e127      	b.n	8004dd2 <HAL_RTC_SetAlarm_IT+0x26a>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2228      	movs	r2, #40	@ 0x28
 8004b86:	2101      	movs	r1, #1
 8004b88:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2229      	movs	r2, #41	@ 0x29
 8004b8e:	2102      	movs	r1, #2
 8004b90:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d136      	bne.n	8004c06 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	2240      	movs	r2, #64	@ 0x40
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d102      	bne.n	8004baa <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f000 fa04 	bl	8004fbc <RTC_ByteToBcd2>
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	785b      	ldrb	r3, [r3, #1]
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f000 f9fd 	bl	8004fbc <RTC_ByteToBcd2>
 8004bc2:	0003      	movs	r3, r0
 8004bc4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004bc6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	789b      	ldrb	r3, [r3, #2]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f000 f9f5 	bl	8004fbc <RTC_ByteToBcd2>
 8004bd2:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004bd4:	0022      	movs	r2, r4
 8004bd6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	78db      	ldrb	r3, [r3, #3]
 8004bdc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004bde:	431a      	orrs	r2, r3
 8004be0:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2220      	movs	r2, #32
 8004be6:	5c9b      	ldrb	r3, [r3, r2]
 8004be8:	0018      	movs	r0, r3
 8004bea:	f000 f9e7 	bl	8004fbc <RTC_ByteToBcd2>
 8004bee:	0003      	movs	r3, r0
 8004bf0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004bf2:	0022      	movs	r2, r4
 8004bf4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004bfa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c00:	4313      	orrs	r3, r2
 8004c02:	61fb      	str	r3, [r7, #28]
 8004c04:	e022      	b.n	8004c4c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	2240      	movs	r2, #64	@ 0x40
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d102      	bne.n	8004c18 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2200      	movs	r2, #0
 8004c16:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	785b      	ldrb	r3, [r3, #1]
 8004c22:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c24:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004c2a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	78db      	ldrb	r3, [r3, #3]
 8004c30:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004c32:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2120      	movs	r1, #32
 8004c38:	5c5b      	ldrb	r3, [r3, r1]
 8004c3a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004c3c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004c42:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	22ca      	movs	r2, #202	@ 0xca
 8004c5e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2253      	movs	r2, #83	@ 0x53
 8004c66:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c6c:	2380      	movs	r3, #128	@ 0x80
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d14c      	bne.n	8004d0e <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4957      	ldr	r1, [pc, #348]	@ (8004ddc <HAL_RTC_SetAlarm_IT+0x274>)
 8004c80:	400a      	ands	r2, r1
 8004c82:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2101      	movs	r1, #1
 8004c90:	430a      	orrs	r2, r1
 8004c92:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004c94:	f7fd f8de 	bl	8001e54 <HAL_GetTick>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004c9c:	e016      	b.n	8004ccc <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c9e:	f7fd f8d9 	bl	8001e54 <HAL_GetTick>
 8004ca2:	0002      	movs	r2, r0
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	1ad2      	subs	r2, r2, r3
 8004ca8:	23fa      	movs	r3, #250	@ 0xfa
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d90d      	bls.n	8004ccc <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	22ff      	movs	r2, #255	@ 0xff
 8004cb6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2229      	movs	r2, #41	@ 0x29
 8004cbc:	2103      	movs	r1, #3
 8004cbe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2228      	movs	r2, #40	@ 0x28
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e082      	b.n	8004dd2 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d0e2      	beq.n	8004c9e <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699a      	ldr	r2, [r3, #24]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2180      	movs	r1, #128	@ 0x80
 8004cf4:	0049      	lsls	r1, r1, #1
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699a      	ldr	r2, [r3, #24]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2180      	movs	r1, #128	@ 0x80
 8004d06:	0149      	lsls	r1, r1, #5
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	619a      	str	r2, [r3, #24]
 8004d0c:	e04b      	b.n	8004da6 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699a      	ldr	r2, [r3, #24]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4931      	ldr	r1, [pc, #196]	@ (8004de0 <HAL_RTC_SetAlarm_IT+0x278>)
 8004d1a:	400a      	ands	r2, r1
 8004d1c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2102      	movs	r1, #2
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004d2e:	f7fd f891 	bl	8001e54 <HAL_GetTick>
 8004d32:	0003      	movs	r3, r0
 8004d34:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004d36:	e016      	b.n	8004d66 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d38:	f7fd f88c 	bl	8001e54 <HAL_GetTick>
 8004d3c:	0002      	movs	r2, r0
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	1ad2      	subs	r2, r2, r3
 8004d42:	23fa      	movs	r3, #250	@ 0xfa
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d90d      	bls.n	8004d66 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	22ff      	movs	r2, #255	@ 0xff
 8004d50:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2229      	movs	r2, #41	@ 0x29
 8004d56:	2103      	movs	r1, #3
 8004d58:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2228      	movs	r2, #40	@ 0x28
 8004d5e:	2100      	movs	r1, #0
 8004d60:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e035      	b.n	8004dd2 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d0e2      	beq.n	8004d38 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69fa      	ldr	r2, [r7, #28]
 8004d78:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699a      	ldr	r2, [r3, #24]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2180      	movs	r1, #128	@ 0x80
 8004d8e:	0089      	lsls	r1, r1, #2
 8004d90:	430a      	orrs	r2, r1
 8004d92:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2180      	movs	r1, #128	@ 0x80
 8004da0:	0189      	lsls	r1, r1, #6
 8004da2:	430a      	orrs	r2, r1
 8004da4:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004da6:	4a0f      	ldr	r2, [pc, #60]	@ (8004de4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004da8:	2380      	movs	r3, #128	@ 0x80
 8004daa:	58d3      	ldr	r3, [r2, r3]
 8004dac:	490d      	ldr	r1, [pc, #52]	@ (8004de4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004dae:	2280      	movs	r2, #128	@ 0x80
 8004db0:	0312      	lsls	r2, r2, #12
 8004db2:	4313      	orrs	r3, r2
 8004db4:	2280      	movs	r2, #128	@ 0x80
 8004db6:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	22ff      	movs	r2, #255	@ 0xff
 8004dbe:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2229      	movs	r2, #41	@ 0x29
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2228      	movs	r2, #40	@ 0x28
 8004dcc:	2100      	movs	r1, #0
 8004dce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	b009      	add	sp, #36	@ 0x24
 8004dd8:	bd90      	pop	{r4, r7, pc}
 8004dda:	46c0      	nop			@ (mov r8, r8)
 8004ddc:	fffffeff 	.word	0xfffffeff
 8004de0:	fffffdff 	.word	0xfffffdff
 8004de4:	40021800 	.word	0x40021800

08004de8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	2380      	movs	r3, #128	@ 0x80
 8004df8:	015b      	lsls	r3, r3, #5
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	d011      	beq.n	8004e22 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e04:	2201      	movs	r2, #1
 8004e06:	4013      	ands	r3, r2
 8004e08:	d00b      	beq.n	8004e22 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2101      	movs	r1, #1
 8004e16:	430a      	orrs	r2, r1
 8004e18:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f7fc f84b 	bl	8000eb8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699a      	ldr	r2, [r3, #24]
 8004e28:	2380      	movs	r3, #128	@ 0x80
 8004e2a:	019b      	lsls	r3, r3, #6
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	d011      	beq.n	8004e54 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e36:	2202      	movs	r2, #2
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d00b      	beq.n	8004e54 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2102      	movs	r1, #2
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f000 f942 	bl	80050d8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2229      	movs	r2, #41	@ 0x29
 8004e58:	2101      	movs	r1, #1
 8004e5a:	5499      	strb	r1, [r3, r2]
}
 8004e5c:	46c0      	nop			@ (mov r8, r8)
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	b002      	add	sp, #8
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a0e      	ldr	r2, [pc, #56]	@ (8004eac <HAL_RTC_WaitForSynchro+0x48>)
 8004e72:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004e74:	f7fc ffee 	bl	8001e54 <HAL_GetTick>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004e7c:	e00a      	b.n	8004e94 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e7e:	f7fc ffe9 	bl	8001e54 <HAL_GetTick>
 8004e82:	0002      	movs	r2, r0
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	1ad2      	subs	r2, r2, r3
 8004e88:	23fa      	movs	r3, #250	@ 0xfa
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d901      	bls.n	8004e94 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e006      	b.n	8004ea2 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d0ee      	beq.n	8004e7e <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	b004      	add	sp, #16
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	46c0      	nop			@ (mov r8, r8)
 8004eac:	0001005f 	.word	0x0001005f

08004eb0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004eb8:	230f      	movs	r3, #15
 8004eba:	18fb      	adds	r3, r7, r3
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	2240      	movs	r2, #64	@ 0x40
 8004ec8:	4013      	ands	r3, r2
 8004eca:	d12c      	bne.n	8004f26 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2180      	movs	r1, #128	@ 0x80
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004edc:	f7fc ffba 	bl	8001e54 <HAL_GetTick>
 8004ee0:	0003      	movs	r3, r0
 8004ee2:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ee4:	e014      	b.n	8004f10 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004ee6:	f7fc ffb5 	bl	8001e54 <HAL_GetTick>
 8004eea:	0002      	movs	r2, r0
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	1ad2      	subs	r2, r2, r3
 8004ef0:	200f      	movs	r0, #15
 8004ef2:	183b      	adds	r3, r7, r0
 8004ef4:	1839      	adds	r1, r7, r0
 8004ef6:	7809      	ldrb	r1, [r1, #0]
 8004ef8:	7019      	strb	r1, [r3, #0]
 8004efa:	23fa      	movs	r3, #250	@ 0xfa
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d906      	bls.n	8004f10 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004f02:	183b      	adds	r3, r7, r0
 8004f04:	2203      	movs	r2, #3
 8004f06:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2229      	movs	r2, #41	@ 0x29
 8004f0c:	2103      	movs	r1, #3
 8004f0e:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	2240      	movs	r2, #64	@ 0x40
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d104      	bne.n	8004f26 <RTC_EnterInitMode+0x76>
 8004f1c:	230f      	movs	r3, #15
 8004f1e:	18fb      	adds	r3, r7, r3
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d1df      	bne.n	8004ee6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004f26:	230f      	movs	r3, #15
 8004f28:	18fb      	adds	r3, r7, r3
 8004f2a:	781b      	ldrb	r3, [r3, #0]
}
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	b004      	add	sp, #16
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f34:	b590      	push	{r4, r7, lr}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3c:	240f      	movs	r4, #15
 8004f3e:	193b      	adds	r3, r7, r4
 8004f40:	2200      	movs	r2, #0
 8004f42:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004f44:	4b1c      	ldr	r3, [pc, #112]	@ (8004fb8 <RTC_ExitInitMode+0x84>)
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb8 <RTC_ExitInitMode+0x84>)
 8004f4a:	2180      	movs	r1, #128	@ 0x80
 8004f4c:	438a      	bics	r2, r1
 8004f4e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004f50:	4b19      	ldr	r3, [pc, #100]	@ (8004fb8 <RTC_ExitInitMode+0x84>)
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	2220      	movs	r2, #32
 8004f56:	4013      	ands	r3, r2
 8004f58:	d10d      	bne.n	8004f76 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	f7ff ff81 	bl	8004e64 <HAL_RTC_WaitForSynchro>
 8004f62:	1e03      	subs	r3, r0, #0
 8004f64:	d021      	beq.n	8004faa <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2229      	movs	r2, #41	@ 0x29
 8004f6a:	2103      	movs	r1, #3
 8004f6c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004f6e:	193b      	adds	r3, r7, r4
 8004f70:	2203      	movs	r2, #3
 8004f72:	701a      	strb	r2, [r3, #0]
 8004f74:	e019      	b.n	8004faa <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f76:	4b10      	ldr	r3, [pc, #64]	@ (8004fb8 <RTC_ExitInitMode+0x84>)
 8004f78:	699a      	ldr	r2, [r3, #24]
 8004f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004fb8 <RTC_ExitInitMode+0x84>)
 8004f7c:	2120      	movs	r1, #32
 8004f7e:	438a      	bics	r2, r1
 8004f80:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	0018      	movs	r0, r3
 8004f86:	f7ff ff6d 	bl	8004e64 <HAL_RTC_WaitForSynchro>
 8004f8a:	1e03      	subs	r3, r0, #0
 8004f8c:	d007      	beq.n	8004f9e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2229      	movs	r2, #41	@ 0x29
 8004f92:	2103      	movs	r1, #3
 8004f94:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004f96:	230f      	movs	r3, #15
 8004f98:	18fb      	adds	r3, r7, r3
 8004f9a:	2203      	movs	r2, #3
 8004f9c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f9e:	4b06      	ldr	r3, [pc, #24]	@ (8004fb8 <RTC_ExitInitMode+0x84>)
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	4b05      	ldr	r3, [pc, #20]	@ (8004fb8 <RTC_ExitInitMode+0x84>)
 8004fa4:	2120      	movs	r1, #32
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004faa:	230f      	movs	r3, #15
 8004fac:	18fb      	adds	r3, r7, r3
 8004fae:	781b      	ldrb	r3, [r3, #0]
}
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b005      	add	sp, #20
 8004fb6:	bd90      	pop	{r4, r7, pc}
 8004fb8:	40002800 	.word	0x40002800

08004fbc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	0002      	movs	r2, r0
 8004fc4:	1dfb      	adds	r3, r7, #7
 8004fc6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004fcc:	230b      	movs	r3, #11
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	1dfa      	adds	r2, r7, #7
 8004fd2:	7812      	ldrb	r2, [r2, #0]
 8004fd4:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004fd6:	e008      	b.n	8004fea <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004fde:	220b      	movs	r2, #11
 8004fe0:	18bb      	adds	r3, r7, r2
 8004fe2:	18ba      	adds	r2, r7, r2
 8004fe4:	7812      	ldrb	r2, [r2, #0]
 8004fe6:	3a0a      	subs	r2, #10
 8004fe8:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004fea:	210b      	movs	r1, #11
 8004fec:	187b      	adds	r3, r7, r1
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b09      	cmp	r3, #9
 8004ff2:	d8f1      	bhi.n	8004fd8 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	187b      	adds	r3, r7, r1
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	4313      	orrs	r3, r2
 8005002:	b2db      	uxtb	r3, r3
}
 8005004:	0018      	movs	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	b004      	add	sp, #16
 800500a:	bd80      	pop	{r7, pc}

0800500c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	0002      	movs	r2, r0
 8005014:	1dfb      	adds	r3, r7, #7
 8005016:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005018:	1dfb      	adds	r3, r7, #7
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	091b      	lsrs	r3, r3, #4
 800501e:	b2db      	uxtb	r3, r3
 8005020:	001a      	movs	r2, r3
 8005022:	0013      	movs	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	189b      	adds	r3, r3, r2
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	b2da      	uxtb	r2, r3
 8005030:	1dfb      	adds	r3, r7, #7
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	210f      	movs	r1, #15
 8005036:	400b      	ands	r3, r1
 8005038:	b2db      	uxtb	r3, r3
 800503a:	18d3      	adds	r3, r2, r3
 800503c:	b2db      	uxtb	r3, r3
}
 800503e:	0018      	movs	r0, r3
 8005040:	46bd      	mov	sp, r7
 8005042:	b004      	add	sp, #16
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2228      	movs	r2, #40	@ 0x28
 8005056:	5c9b      	ldrb	r3, [r3, r2]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 800505c:	2302      	movs	r3, #2
 800505e:	e035      	b.n	80050cc <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2228      	movs	r2, #40	@ 0x28
 8005064:	2101      	movs	r1, #1
 8005066:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2229      	movs	r2, #41	@ 0x29
 800506c:	2102      	movs	r1, #2
 800506e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	22ca      	movs	r2, #202	@ 0xca
 8005076:	625a      	str	r2, [r3, #36]	@ 0x24
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2253      	movs	r2, #83	@ 0x53
 800507e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699a      	ldr	r2, [r3, #24]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4912      	ldr	r1, [pc, #72]	@ (80050d4 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 800508c:	400a      	ands	r2, r1
 800508e:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6999      	ldr	r1, [r3, #24]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2180      	movs	r1, #128	@ 0x80
 80050ac:	0409      	lsls	r1, r1, #16
 80050ae:	430a      	orrs	r2, r1
 80050b0:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	22ff      	movs	r2, #255	@ 0xff
 80050b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2229      	movs	r2, #41	@ 0x29
 80050be:	2101      	movs	r1, #1
 80050c0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2228      	movs	r2, #40	@ 0x28
 80050c6:	2100      	movs	r1, #0
 80050c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	0018      	movs	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	b002      	add	sp, #8
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	fff7ffff 	.word	0xfff7ffff

080050d8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80050e0:	46c0      	nop			@ (mov r8, r8)
 80050e2:	46bd      	mov	sp, r7
 80050e4:	b002      	add	sp, #8
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e04a      	b.n	8005190 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	223d      	movs	r2, #61	@ 0x3d
 80050fe:	5c9b      	ldrb	r3, [r3, r2]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d107      	bne.n	8005116 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	223c      	movs	r2, #60	@ 0x3c
 800510a:	2100      	movs	r1, #0
 800510c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	0018      	movs	r0, r3
 8005112:	f7fc fd51 	bl	8001bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	223d      	movs	r2, #61	@ 0x3d
 800511a:	2102      	movs	r1, #2
 800511c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3304      	adds	r3, #4
 8005126:	0019      	movs	r1, r3
 8005128:	0010      	movs	r0, r2
 800512a:	f000 fadd 	bl	80056e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2248      	movs	r2, #72	@ 0x48
 8005132:	2101      	movs	r1, #1
 8005134:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	223e      	movs	r2, #62	@ 0x3e
 800513a:	2101      	movs	r1, #1
 800513c:	5499      	strb	r1, [r3, r2]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	223f      	movs	r2, #63	@ 0x3f
 8005142:	2101      	movs	r1, #1
 8005144:	5499      	strb	r1, [r3, r2]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2240      	movs	r2, #64	@ 0x40
 800514a:	2101      	movs	r1, #1
 800514c:	5499      	strb	r1, [r3, r2]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2241      	movs	r2, #65	@ 0x41
 8005152:	2101      	movs	r1, #1
 8005154:	5499      	strb	r1, [r3, r2]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2242      	movs	r2, #66	@ 0x42
 800515a:	2101      	movs	r1, #1
 800515c:	5499      	strb	r1, [r3, r2]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2243      	movs	r2, #67	@ 0x43
 8005162:	2101      	movs	r1, #1
 8005164:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2244      	movs	r2, #68	@ 0x44
 800516a:	2101      	movs	r1, #1
 800516c:	5499      	strb	r1, [r3, r2]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2245      	movs	r2, #69	@ 0x45
 8005172:	2101      	movs	r1, #1
 8005174:	5499      	strb	r1, [r3, r2]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2246      	movs	r2, #70	@ 0x46
 800517a:	2101      	movs	r1, #1
 800517c:	5499      	strb	r1, [r3, r2]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2247      	movs	r2, #71	@ 0x47
 8005182:	2101      	movs	r1, #1
 8005184:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	223d      	movs	r2, #61	@ 0x3d
 800518a:	2101      	movs	r1, #1
 800518c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	0018      	movs	r0, r3
 8005192:	46bd      	mov	sp, r7
 8005194:	b002      	add	sp, #8
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	223d      	movs	r2, #61	@ 0x3d
 80051a4:	5c9b      	ldrb	r3, [r3, r2]
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d001      	beq.n	80051b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e035      	b.n	800521c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	223d      	movs	r2, #61	@ 0x3d
 80051b4:	2102      	movs	r1, #2
 80051b6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a19      	ldr	r2, [pc, #100]	@ (8005224 <HAL_TIM_Base_Start+0x8c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00a      	beq.n	80051d8 <HAL_TIM_Base_Start+0x40>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	2380      	movs	r3, #128	@ 0x80
 80051c8:	05db      	lsls	r3, r3, #23
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d004      	beq.n	80051d8 <HAL_TIM_Base_Start+0x40>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a15      	ldr	r2, [pc, #84]	@ (8005228 <HAL_TIM_Base_Start+0x90>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d116      	bne.n	8005206 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	4a13      	ldr	r2, [pc, #76]	@ (800522c <HAL_TIM_Base_Start+0x94>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b06      	cmp	r3, #6
 80051e8:	d016      	beq.n	8005218 <HAL_TIM_Base_Start+0x80>
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	2380      	movs	r3, #128	@ 0x80
 80051ee:	025b      	lsls	r3, r3, #9
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d011      	beq.n	8005218 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2101      	movs	r1, #1
 8005200:	430a      	orrs	r2, r1
 8005202:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005204:	e008      	b.n	8005218 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2101      	movs	r1, #1
 8005212:	430a      	orrs	r2, r1
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	e000      	b.n	800521a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005218:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	0018      	movs	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	b004      	add	sp, #16
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40000400 	.word	0x40000400
 800522c:	00010007 	.word	0x00010007

08005230 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	4a0d      	ldr	r2, [pc, #52]	@ (8005274 <HAL_TIM_Base_Stop+0x44>)
 8005240:	4013      	ands	r3, r2
 8005242:	d10d      	bne.n	8005260 <HAL_TIM_Base_Stop+0x30>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	4a0b      	ldr	r2, [pc, #44]	@ (8005278 <HAL_TIM_Base_Stop+0x48>)
 800524c:	4013      	ands	r3, r2
 800524e:	d107      	bne.n	8005260 <HAL_TIM_Base_Stop+0x30>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2101      	movs	r1, #1
 800525c:	438a      	bics	r2, r1
 800525e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	223d      	movs	r2, #61	@ 0x3d
 8005264:	2101      	movs	r1, #1
 8005266:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	0018      	movs	r0, r3
 800526c:	46bd      	mov	sp, r7
 800526e:	b002      	add	sp, #8
 8005270:	bd80      	pop	{r7, pc}
 8005272:	46c0      	nop			@ (mov r8, r8)
 8005274:	00001111 	.word	0x00001111
 8005278:	00000444 	.word	0x00000444

0800527c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e04a      	b.n	8005324 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	223d      	movs	r2, #61	@ 0x3d
 8005292:	5c9b      	ldrb	r3, [r3, r2]
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d107      	bne.n	80052aa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	223c      	movs	r2, #60	@ 0x3c
 800529e:	2100      	movs	r1, #0
 80052a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	0018      	movs	r0, r3
 80052a6:	f7fc fc6b 	bl	8001b80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	223d      	movs	r2, #61	@ 0x3d
 80052ae:	2102      	movs	r1, #2
 80052b0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3304      	adds	r3, #4
 80052ba:	0019      	movs	r1, r3
 80052bc:	0010      	movs	r0, r2
 80052be:	f000 fa13 	bl	80056e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2248      	movs	r2, #72	@ 0x48
 80052c6:	2101      	movs	r1, #1
 80052c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	223e      	movs	r2, #62	@ 0x3e
 80052ce:	2101      	movs	r1, #1
 80052d0:	5499      	strb	r1, [r3, r2]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	223f      	movs	r2, #63	@ 0x3f
 80052d6:	2101      	movs	r1, #1
 80052d8:	5499      	strb	r1, [r3, r2]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2240      	movs	r2, #64	@ 0x40
 80052de:	2101      	movs	r1, #1
 80052e0:	5499      	strb	r1, [r3, r2]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2241      	movs	r2, #65	@ 0x41
 80052e6:	2101      	movs	r1, #1
 80052e8:	5499      	strb	r1, [r3, r2]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2242      	movs	r2, #66	@ 0x42
 80052ee:	2101      	movs	r1, #1
 80052f0:	5499      	strb	r1, [r3, r2]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2243      	movs	r2, #67	@ 0x43
 80052f6:	2101      	movs	r1, #1
 80052f8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2244      	movs	r2, #68	@ 0x44
 80052fe:	2101      	movs	r1, #1
 8005300:	5499      	strb	r1, [r3, r2]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2245      	movs	r2, #69	@ 0x45
 8005306:	2101      	movs	r1, #1
 8005308:	5499      	strb	r1, [r3, r2]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2246      	movs	r2, #70	@ 0x46
 800530e:	2101      	movs	r1, #1
 8005310:	5499      	strb	r1, [r3, r2]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2247      	movs	r2, #71	@ 0x47
 8005316:	2101      	movs	r1, #1
 8005318:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	223d      	movs	r2, #61	@ 0x3d
 800531e:	2101      	movs	r1, #1
 8005320:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	0018      	movs	r0, r3
 8005326:	46bd      	mov	sp, r7
 8005328:	b002      	add	sp, #8
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d108      	bne.n	800534e <HAL_TIM_PWM_Start+0x22>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	223e      	movs	r2, #62	@ 0x3e
 8005340:	5c9b      	ldrb	r3, [r3, r2]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	3b01      	subs	r3, #1
 8005346:	1e5a      	subs	r2, r3, #1
 8005348:	4193      	sbcs	r3, r2
 800534a:	b2db      	uxtb	r3, r3
 800534c:	e037      	b.n	80053be <HAL_TIM_PWM_Start+0x92>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b04      	cmp	r3, #4
 8005352:	d108      	bne.n	8005366 <HAL_TIM_PWM_Start+0x3a>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	223f      	movs	r2, #63	@ 0x3f
 8005358:	5c9b      	ldrb	r3, [r3, r2]
 800535a:	b2db      	uxtb	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	1e5a      	subs	r2, r3, #1
 8005360:	4193      	sbcs	r3, r2
 8005362:	b2db      	uxtb	r3, r3
 8005364:	e02b      	b.n	80053be <HAL_TIM_PWM_Start+0x92>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b08      	cmp	r3, #8
 800536a:	d108      	bne.n	800537e <HAL_TIM_PWM_Start+0x52>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2240      	movs	r2, #64	@ 0x40
 8005370:	5c9b      	ldrb	r3, [r3, r2]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	1e5a      	subs	r2, r3, #1
 8005378:	4193      	sbcs	r3, r2
 800537a:	b2db      	uxtb	r3, r3
 800537c:	e01f      	b.n	80053be <HAL_TIM_PWM_Start+0x92>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b0c      	cmp	r3, #12
 8005382:	d108      	bne.n	8005396 <HAL_TIM_PWM_Start+0x6a>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2241      	movs	r2, #65	@ 0x41
 8005388:	5c9b      	ldrb	r3, [r3, r2]
 800538a:	b2db      	uxtb	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	1e5a      	subs	r2, r3, #1
 8005390:	4193      	sbcs	r3, r2
 8005392:	b2db      	uxtb	r3, r3
 8005394:	e013      	b.n	80053be <HAL_TIM_PWM_Start+0x92>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b10      	cmp	r3, #16
 800539a:	d108      	bne.n	80053ae <HAL_TIM_PWM_Start+0x82>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2242      	movs	r2, #66	@ 0x42
 80053a0:	5c9b      	ldrb	r3, [r3, r2]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	1e5a      	subs	r2, r3, #1
 80053a8:	4193      	sbcs	r3, r2
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	e007      	b.n	80053be <HAL_TIM_PWM_Start+0x92>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2243      	movs	r2, #67	@ 0x43
 80053b2:	5c9b      	ldrb	r3, [r3, r2]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	3b01      	subs	r3, #1
 80053b8:	1e5a      	subs	r2, r3, #1
 80053ba:	4193      	sbcs	r3, r2
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e081      	b.n	80054ca <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d104      	bne.n	80053d6 <HAL_TIM_PWM_Start+0xaa>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	223e      	movs	r2, #62	@ 0x3e
 80053d0:	2102      	movs	r1, #2
 80053d2:	5499      	strb	r1, [r3, r2]
 80053d4:	e023      	b.n	800541e <HAL_TIM_PWM_Start+0xf2>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d104      	bne.n	80053e6 <HAL_TIM_PWM_Start+0xba>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	223f      	movs	r2, #63	@ 0x3f
 80053e0:	2102      	movs	r1, #2
 80053e2:	5499      	strb	r1, [r3, r2]
 80053e4:	e01b      	b.n	800541e <HAL_TIM_PWM_Start+0xf2>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d104      	bne.n	80053f6 <HAL_TIM_PWM_Start+0xca>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2240      	movs	r2, #64	@ 0x40
 80053f0:	2102      	movs	r1, #2
 80053f2:	5499      	strb	r1, [r3, r2]
 80053f4:	e013      	b.n	800541e <HAL_TIM_PWM_Start+0xf2>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b0c      	cmp	r3, #12
 80053fa:	d104      	bne.n	8005406 <HAL_TIM_PWM_Start+0xda>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2241      	movs	r2, #65	@ 0x41
 8005400:	2102      	movs	r1, #2
 8005402:	5499      	strb	r1, [r3, r2]
 8005404:	e00b      	b.n	800541e <HAL_TIM_PWM_Start+0xf2>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b10      	cmp	r3, #16
 800540a:	d104      	bne.n	8005416 <HAL_TIM_PWM_Start+0xea>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2242      	movs	r2, #66	@ 0x42
 8005410:	2102      	movs	r1, #2
 8005412:	5499      	strb	r1, [r3, r2]
 8005414:	e003      	b.n	800541e <HAL_TIM_PWM_Start+0xf2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2243      	movs	r2, #67	@ 0x43
 800541a:	2102      	movs	r1, #2
 800541c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6839      	ldr	r1, [r7, #0]
 8005424:	2201      	movs	r2, #1
 8005426:	0018      	movs	r0, r3
 8005428:	f000 fc7e 	bl	8005d28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a28      	ldr	r2, [pc, #160]	@ (80054d4 <HAL_TIM_PWM_Start+0x1a8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d009      	beq.n	800544a <HAL_TIM_PWM_Start+0x11e>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a27      	ldr	r2, [pc, #156]	@ (80054d8 <HAL_TIM_PWM_Start+0x1ac>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d004      	beq.n	800544a <HAL_TIM_PWM_Start+0x11e>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a25      	ldr	r2, [pc, #148]	@ (80054dc <HAL_TIM_PWM_Start+0x1b0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d101      	bne.n	800544e <HAL_TIM_PWM_Start+0x122>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <HAL_TIM_PWM_Start+0x124>
 800544e:	2300      	movs	r3, #0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2180      	movs	r1, #128	@ 0x80
 8005460:	0209      	lsls	r1, r1, #8
 8005462:	430a      	orrs	r2, r1
 8005464:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a1a      	ldr	r2, [pc, #104]	@ (80054d4 <HAL_TIM_PWM_Start+0x1a8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00a      	beq.n	8005486 <HAL_TIM_PWM_Start+0x15a>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	2380      	movs	r3, #128	@ 0x80
 8005476:	05db      	lsls	r3, r3, #23
 8005478:	429a      	cmp	r2, r3
 800547a:	d004      	beq.n	8005486 <HAL_TIM_PWM_Start+0x15a>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a17      	ldr	r2, [pc, #92]	@ (80054e0 <HAL_TIM_PWM_Start+0x1b4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d116      	bne.n	80054b4 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	4a15      	ldr	r2, [pc, #84]	@ (80054e4 <HAL_TIM_PWM_Start+0x1b8>)
 800548e:	4013      	ands	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b06      	cmp	r3, #6
 8005496:	d016      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x19a>
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	2380      	movs	r3, #128	@ 0x80
 800549c:	025b      	lsls	r3, r3, #9
 800549e:	429a      	cmp	r2, r3
 80054a0:	d011      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2101      	movs	r1, #1
 80054ae:	430a      	orrs	r2, r1
 80054b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b2:	e008      	b.n	80054c6 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2101      	movs	r1, #1
 80054c0:	430a      	orrs	r2, r1
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	e000      	b.n	80054c8 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	0018      	movs	r0, r3
 80054cc:	46bd      	mov	sp, r7
 80054ce:	b004      	add	sp, #16
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	46c0      	nop			@ (mov r8, r8)
 80054d4:	40012c00 	.word	0x40012c00
 80054d8:	40014400 	.word	0x40014400
 80054dc:	40014800 	.word	0x40014800
 80054e0:	40000400 	.word	0x40000400
 80054e4:	00010007 	.word	0x00010007

080054e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054f4:	2317      	movs	r3, #23
 80054f6:	18fb      	adds	r3, r7, r3
 80054f8:	2200      	movs	r2, #0
 80054fa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	223c      	movs	r2, #60	@ 0x3c
 8005500:	5c9b      	ldrb	r3, [r3, r2]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d101      	bne.n	800550a <HAL_TIM_PWM_ConfigChannel+0x22>
 8005506:	2302      	movs	r3, #2
 8005508:	e0e5      	b.n	80056d6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	223c      	movs	r2, #60	@ 0x3c
 800550e:	2101      	movs	r1, #1
 8005510:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b14      	cmp	r3, #20
 8005516:	d900      	bls.n	800551a <HAL_TIM_PWM_ConfigChannel+0x32>
 8005518:	e0d1      	b.n	80056be <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	009a      	lsls	r2, r3, #2
 800551e:	4b70      	ldr	r3, [pc, #448]	@ (80056e0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005520:	18d3      	adds	r3, r2, r3
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	0011      	movs	r1, r2
 800552e:	0018      	movs	r0, r3
 8005530:	f000 f95e 	bl	80057f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699a      	ldr	r2, [r3, #24]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2108      	movs	r1, #8
 8005540:	430a      	orrs	r2, r1
 8005542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2104      	movs	r1, #4
 8005550:	438a      	bics	r2, r1
 8005552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6999      	ldr	r1, [r3, #24]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	619a      	str	r2, [r3, #24]
      break;
 8005566:	e0af      	b.n	80056c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	0011      	movs	r1, r2
 8005570:	0018      	movs	r0, r3
 8005572:	f000 f9bd 	bl	80058f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	699a      	ldr	r2, [r3, #24]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2180      	movs	r1, #128	@ 0x80
 8005582:	0109      	lsls	r1, r1, #4
 8005584:	430a      	orrs	r2, r1
 8005586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4954      	ldr	r1, [pc, #336]	@ (80056e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005594:	400a      	ands	r2, r1
 8005596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6999      	ldr	r1, [r3, #24]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	021a      	lsls	r2, r3, #8
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	619a      	str	r2, [r3, #24]
      break;
 80055ac:	e08c      	b.n	80056c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	0011      	movs	r1, r2
 80055b6:	0018      	movs	r0, r3
 80055b8:	f000 fa18 	bl	80059ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69da      	ldr	r2, [r3, #28]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2108      	movs	r1, #8
 80055c8:	430a      	orrs	r2, r1
 80055ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	69da      	ldr	r2, [r3, #28]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2104      	movs	r1, #4
 80055d8:	438a      	bics	r2, r1
 80055da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	69d9      	ldr	r1, [r3, #28]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	691a      	ldr	r2, [r3, #16]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	61da      	str	r2, [r3, #28]
      break;
 80055ee:	e06b      	b.n	80056c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	0011      	movs	r1, r2
 80055f8:	0018      	movs	r0, r3
 80055fa:	f000 fa79 	bl	8005af0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69da      	ldr	r2, [r3, #28]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2180      	movs	r1, #128	@ 0x80
 800560a:	0109      	lsls	r1, r1, #4
 800560c:	430a      	orrs	r2, r1
 800560e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69da      	ldr	r2, [r3, #28]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4932      	ldr	r1, [pc, #200]	@ (80056e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800561c:	400a      	ands	r2, r1
 800561e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	69d9      	ldr	r1, [r3, #28]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	021a      	lsls	r2, r3, #8
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	61da      	str	r2, [r3, #28]
      break;
 8005634:	e048      	b.n	80056c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	0011      	movs	r1, r2
 800563e:	0018      	movs	r0, r3
 8005640:	f000 faba 	bl	8005bb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2108      	movs	r1, #8
 8005650:	430a      	orrs	r2, r1
 8005652:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2104      	movs	r1, #4
 8005660:	438a      	bics	r2, r1
 8005662:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005676:	e027      	b.n	80056c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	0011      	movs	r1, r2
 8005680:	0018      	movs	r0, r3
 8005682:	f000 faf3 	bl	8005c6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2180      	movs	r1, #128	@ 0x80
 8005692:	0109      	lsls	r1, r1, #4
 8005694:	430a      	orrs	r2, r1
 8005696:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4910      	ldr	r1, [pc, #64]	@ (80056e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80056a4:	400a      	ands	r2, r1
 80056a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	021a      	lsls	r2, r3, #8
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80056bc:	e004      	b.n	80056c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80056be:	2317      	movs	r3, #23
 80056c0:	18fb      	adds	r3, r7, r3
 80056c2:	2201      	movs	r2, #1
 80056c4:	701a      	strb	r2, [r3, #0]
      break;
 80056c6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	223c      	movs	r2, #60	@ 0x3c
 80056cc:	2100      	movs	r1, #0
 80056ce:	5499      	strb	r1, [r3, r2]

  return status;
 80056d0:	2317      	movs	r3, #23
 80056d2:	18fb      	adds	r3, r7, r3
 80056d4:	781b      	ldrb	r3, [r3, #0]
}
 80056d6:	0018      	movs	r0, r3
 80056d8:	46bd      	mov	sp, r7
 80056da:	b006      	add	sp, #24
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	46c0      	nop			@ (mov r8, r8)
 80056e0:	08005f28 	.word	0x08005f28
 80056e4:	fffffbff 	.word	0xfffffbff

080056e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a37      	ldr	r2, [pc, #220]	@ (80057d8 <TIM_Base_SetConfig+0xf0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d008      	beq.n	8005712 <TIM_Base_SetConfig+0x2a>
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	2380      	movs	r3, #128	@ 0x80
 8005704:	05db      	lsls	r3, r3, #23
 8005706:	429a      	cmp	r2, r3
 8005708:	d003      	beq.n	8005712 <TIM_Base_SetConfig+0x2a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a33      	ldr	r2, [pc, #204]	@ (80057dc <TIM_Base_SetConfig+0xf4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d108      	bne.n	8005724 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2270      	movs	r2, #112	@ 0x70
 8005716:	4393      	bics	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a2c      	ldr	r2, [pc, #176]	@ (80057d8 <TIM_Base_SetConfig+0xf0>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d014      	beq.n	8005756 <TIM_Base_SetConfig+0x6e>
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	2380      	movs	r3, #128	@ 0x80
 8005730:	05db      	lsls	r3, r3, #23
 8005732:	429a      	cmp	r2, r3
 8005734:	d00f      	beq.n	8005756 <TIM_Base_SetConfig+0x6e>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a28      	ldr	r2, [pc, #160]	@ (80057dc <TIM_Base_SetConfig+0xf4>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00b      	beq.n	8005756 <TIM_Base_SetConfig+0x6e>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a27      	ldr	r2, [pc, #156]	@ (80057e0 <TIM_Base_SetConfig+0xf8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d007      	beq.n	8005756 <TIM_Base_SetConfig+0x6e>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a26      	ldr	r2, [pc, #152]	@ (80057e4 <TIM_Base_SetConfig+0xfc>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d003      	beq.n	8005756 <TIM_Base_SetConfig+0x6e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a25      	ldr	r2, [pc, #148]	@ (80057e8 <TIM_Base_SetConfig+0x100>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d108      	bne.n	8005768 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4a24      	ldr	r2, [pc, #144]	@ (80057ec <TIM_Base_SetConfig+0x104>)
 800575a:	4013      	ands	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4313      	orrs	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2280      	movs	r2, #128	@ 0x80
 800576c:	4393      	bics	r3, r2
 800576e:	001a      	movs	r2, r3
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	689a      	ldr	r2, [r3, #8]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a11      	ldr	r2, [pc, #68]	@ (80057d8 <TIM_Base_SetConfig+0xf0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d007      	beq.n	80057a6 <TIM_Base_SetConfig+0xbe>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a12      	ldr	r2, [pc, #72]	@ (80057e4 <TIM_Base_SetConfig+0xfc>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d003      	beq.n	80057a6 <TIM_Base_SetConfig+0xbe>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a11      	ldr	r2, [pc, #68]	@ (80057e8 <TIM_Base_SetConfig+0x100>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d103      	bne.n	80057ae <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	691a      	ldr	r2, [r3, #16]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	2201      	movs	r2, #1
 80057ba:	4013      	ands	r3, r2
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d106      	bne.n	80057ce <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	2201      	movs	r2, #1
 80057c6:	4393      	bics	r3, r2
 80057c8:	001a      	movs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	611a      	str	r2, [r3, #16]
  }
}
 80057ce:	46c0      	nop			@ (mov r8, r8)
 80057d0:	46bd      	mov	sp, r7
 80057d2:	b004      	add	sp, #16
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	46c0      	nop			@ (mov r8, r8)
 80057d8:	40012c00 	.word	0x40012c00
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40002000 	.word	0x40002000
 80057e4:	40014400 	.word	0x40014400
 80057e8:	40014800 	.word	0x40014800
 80057ec:	fffffcff 	.word	0xfffffcff

080057f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	2201      	movs	r2, #1
 8005806:	4393      	bics	r3, r2
 8005808:	001a      	movs	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4a2e      	ldr	r2, [pc, #184]	@ (80058d8 <TIM_OC1_SetConfig+0xe8>)
 800581e:	4013      	ands	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2203      	movs	r2, #3
 8005826:	4393      	bics	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4313      	orrs	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2202      	movs	r2, #2
 8005838:	4393      	bics	r3, r2
 800583a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	4313      	orrs	r3, r2
 8005844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a24      	ldr	r2, [pc, #144]	@ (80058dc <TIM_OC1_SetConfig+0xec>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d007      	beq.n	800585e <TIM_OC1_SetConfig+0x6e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a23      	ldr	r2, [pc, #140]	@ (80058e0 <TIM_OC1_SetConfig+0xf0>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d003      	beq.n	800585e <TIM_OC1_SetConfig+0x6e>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a22      	ldr	r2, [pc, #136]	@ (80058e4 <TIM_OC1_SetConfig+0xf4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d10c      	bne.n	8005878 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2208      	movs	r2, #8
 8005862:	4393      	bics	r3, r2
 8005864:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	2204      	movs	r2, #4
 8005874:	4393      	bics	r3, r2
 8005876:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a18      	ldr	r2, [pc, #96]	@ (80058dc <TIM_OC1_SetConfig+0xec>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d007      	beq.n	8005890 <TIM_OC1_SetConfig+0xa0>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a17      	ldr	r2, [pc, #92]	@ (80058e0 <TIM_OC1_SetConfig+0xf0>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d003      	beq.n	8005890 <TIM_OC1_SetConfig+0xa0>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a16      	ldr	r2, [pc, #88]	@ (80058e4 <TIM_OC1_SetConfig+0xf4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d111      	bne.n	80058b4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	4a15      	ldr	r2, [pc, #84]	@ (80058e8 <TIM_OC1_SetConfig+0xf8>)
 8005894:	4013      	ands	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	4a14      	ldr	r2, [pc, #80]	@ (80058ec <TIM_OC1_SetConfig+0xfc>)
 800589c:	4013      	ands	r3, r2
 800589e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	621a      	str	r2, [r3, #32]
}
 80058ce:	46c0      	nop			@ (mov r8, r8)
 80058d0:	46bd      	mov	sp, r7
 80058d2:	b006      	add	sp, #24
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	46c0      	nop			@ (mov r8, r8)
 80058d8:	fffeff8f 	.word	0xfffeff8f
 80058dc:	40012c00 	.word	0x40012c00
 80058e0:	40014400 	.word	0x40014400
 80058e4:	40014800 	.word	0x40014800
 80058e8:	fffffeff 	.word	0xfffffeff
 80058ec:	fffffdff 	.word	0xfffffdff

080058f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	2210      	movs	r2, #16
 8005906:	4393      	bics	r3, r2
 8005908:	001a      	movs	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4a2c      	ldr	r2, [pc, #176]	@ (80059d0 <TIM_OC2_SetConfig+0xe0>)
 800591e:	4013      	ands	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4a2b      	ldr	r2, [pc, #172]	@ (80059d4 <TIM_OC2_SetConfig+0xe4>)
 8005926:	4013      	ands	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2220      	movs	r2, #32
 800593a:	4393      	bics	r3, r2
 800593c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	4313      	orrs	r3, r2
 8005948:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a22      	ldr	r2, [pc, #136]	@ (80059d8 <TIM_OC2_SetConfig+0xe8>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d10d      	bne.n	800596e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2280      	movs	r2, #128	@ 0x80
 8005956:	4393      	bics	r3, r2
 8005958:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2240      	movs	r2, #64	@ 0x40
 800596a:	4393      	bics	r3, r2
 800596c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a19      	ldr	r2, [pc, #100]	@ (80059d8 <TIM_OC2_SetConfig+0xe8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d007      	beq.n	8005986 <TIM_OC2_SetConfig+0x96>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a18      	ldr	r2, [pc, #96]	@ (80059dc <TIM_OC2_SetConfig+0xec>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d003      	beq.n	8005986 <TIM_OC2_SetConfig+0x96>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a17      	ldr	r2, [pc, #92]	@ (80059e0 <TIM_OC2_SetConfig+0xf0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d113      	bne.n	80059ae <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	4a16      	ldr	r2, [pc, #88]	@ (80059e4 <TIM_OC2_SetConfig+0xf4>)
 800598a:	4013      	ands	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	4a15      	ldr	r2, [pc, #84]	@ (80059e8 <TIM_OC2_SetConfig+0xf8>)
 8005992:	4013      	ands	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	4313      	orrs	r3, r2
 80059a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	621a      	str	r2, [r3, #32]
}
 80059c8:	46c0      	nop			@ (mov r8, r8)
 80059ca:	46bd      	mov	sp, r7
 80059cc:	b006      	add	sp, #24
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	feff8fff 	.word	0xfeff8fff
 80059d4:	fffffcff 	.word	0xfffffcff
 80059d8:	40012c00 	.word	0x40012c00
 80059dc:	40014400 	.word	0x40014400
 80059e0:	40014800 	.word	0x40014800
 80059e4:	fffffbff 	.word	0xfffffbff
 80059e8:	fffff7ff 	.word	0xfffff7ff

080059ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	4a31      	ldr	r2, [pc, #196]	@ (8005ac8 <TIM_OC3_SetConfig+0xdc>)
 8005a02:	401a      	ands	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4a2d      	ldr	r2, [pc, #180]	@ (8005acc <TIM_OC3_SetConfig+0xe0>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2203      	movs	r2, #3
 8005a20:	4393      	bics	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	4a27      	ldr	r2, [pc, #156]	@ (8005ad0 <TIM_OC3_SetConfig+0xe4>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	021b      	lsls	r3, r3, #8
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a23      	ldr	r2, [pc, #140]	@ (8005ad4 <TIM_OC3_SetConfig+0xe8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d10d      	bne.n	8005a66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	4a22      	ldr	r2, [pc, #136]	@ (8005ad8 <TIM_OC3_SetConfig+0xec>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	021b      	lsls	r3, r3, #8
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	4a1e      	ldr	r2, [pc, #120]	@ (8005adc <TIM_OC3_SetConfig+0xf0>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a1a      	ldr	r2, [pc, #104]	@ (8005ad4 <TIM_OC3_SetConfig+0xe8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d007      	beq.n	8005a7e <TIM_OC3_SetConfig+0x92>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a1b      	ldr	r2, [pc, #108]	@ (8005ae0 <TIM_OC3_SetConfig+0xf4>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d003      	beq.n	8005a7e <TIM_OC3_SetConfig+0x92>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a1a      	ldr	r2, [pc, #104]	@ (8005ae4 <TIM_OC3_SetConfig+0xf8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d113      	bne.n	8005aa6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	4a19      	ldr	r2, [pc, #100]	@ (8005ae8 <TIM_OC3_SetConfig+0xfc>)
 8005a82:	4013      	ands	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	4a18      	ldr	r2, [pc, #96]	@ (8005aec <TIM_OC3_SetConfig+0x100>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	011b      	lsls	r3, r3, #4
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	621a      	str	r2, [r3, #32]
}
 8005ac0:	46c0      	nop			@ (mov r8, r8)
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	b006      	add	sp, #24
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	fffffeff 	.word	0xfffffeff
 8005acc:	fffeff8f 	.word	0xfffeff8f
 8005ad0:	fffffdff 	.word	0xfffffdff
 8005ad4:	40012c00 	.word	0x40012c00
 8005ad8:	fffff7ff 	.word	0xfffff7ff
 8005adc:	fffffbff 	.word	0xfffffbff
 8005ae0:	40014400 	.word	0x40014400
 8005ae4:	40014800 	.word	0x40014800
 8005ae8:	ffffefff 	.word	0xffffefff
 8005aec:	ffffdfff 	.word	0xffffdfff

08005af0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	4a24      	ldr	r2, [pc, #144]	@ (8005b98 <TIM_OC4_SetConfig+0xa8>)
 8005b06:	401a      	ands	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4a20      	ldr	r2, [pc, #128]	@ (8005b9c <TIM_OC4_SetConfig+0xac>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4a1f      	ldr	r2, [pc, #124]	@ (8005ba0 <TIM_OC4_SetConfig+0xb0>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	021b      	lsls	r3, r3, #8
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	4a1b      	ldr	r2, [pc, #108]	@ (8005ba4 <TIM_OC4_SetConfig+0xb4>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	031b      	lsls	r3, r3, #12
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a17      	ldr	r2, [pc, #92]	@ (8005ba8 <TIM_OC4_SetConfig+0xb8>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d007      	beq.n	8005b60 <TIM_OC4_SetConfig+0x70>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a16      	ldr	r2, [pc, #88]	@ (8005bac <TIM_OC4_SetConfig+0xbc>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d003      	beq.n	8005b60 <TIM_OC4_SetConfig+0x70>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a15      	ldr	r2, [pc, #84]	@ (8005bb0 <TIM_OC4_SetConfig+0xc0>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d109      	bne.n	8005b74 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	4a14      	ldr	r2, [pc, #80]	@ (8005bb4 <TIM_OC4_SetConfig+0xc4>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	019b      	lsls	r3, r3, #6
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	621a      	str	r2, [r3, #32]
}
 8005b8e:	46c0      	nop			@ (mov r8, r8)
 8005b90:	46bd      	mov	sp, r7
 8005b92:	b006      	add	sp, #24
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	46c0      	nop			@ (mov r8, r8)
 8005b98:	ffffefff 	.word	0xffffefff
 8005b9c:	feff8fff 	.word	0xfeff8fff
 8005ba0:	fffffcff 	.word	0xfffffcff
 8005ba4:	ffffdfff 	.word	0xffffdfff
 8005ba8:	40012c00 	.word	0x40012c00
 8005bac:	40014400 	.word	0x40014400
 8005bb0:	40014800 	.word	0x40014800
 8005bb4:	ffffbfff 	.word	0xffffbfff

08005bb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	4a21      	ldr	r2, [pc, #132]	@ (8005c54 <TIM_OC5_SetConfig+0x9c>)
 8005bce:	401a      	ands	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4a1d      	ldr	r2, [pc, #116]	@ (8005c58 <TIM_OC5_SetConfig+0xa0>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	4a19      	ldr	r2, [pc, #100]	@ (8005c5c <TIM_OC5_SetConfig+0xa4>)
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	041b      	lsls	r3, r3, #16
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a15      	ldr	r2, [pc, #84]	@ (8005c60 <TIM_OC5_SetConfig+0xa8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d007      	beq.n	8005c1e <TIM_OC5_SetConfig+0x66>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a14      	ldr	r2, [pc, #80]	@ (8005c64 <TIM_OC5_SetConfig+0xac>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d003      	beq.n	8005c1e <TIM_OC5_SetConfig+0x66>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a13      	ldr	r2, [pc, #76]	@ (8005c68 <TIM_OC5_SetConfig+0xb0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d109      	bne.n	8005c32 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	4a0c      	ldr	r2, [pc, #48]	@ (8005c54 <TIM_OC5_SetConfig+0x9c>)
 8005c22:	4013      	ands	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	621a      	str	r2, [r3, #32]
}
 8005c4c:	46c0      	nop			@ (mov r8, r8)
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	b006      	add	sp, #24
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	fffeffff 	.word	0xfffeffff
 8005c58:	fffeff8f 	.word	0xfffeff8f
 8005c5c:	fffdffff 	.word	0xfffdffff
 8005c60:	40012c00 	.word	0x40012c00
 8005c64:	40014400 	.word	0x40014400
 8005c68:	40014800 	.word	0x40014800

08005c6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	4a22      	ldr	r2, [pc, #136]	@ (8005d0c <TIM_OC6_SetConfig+0xa0>)
 8005c82:	401a      	ands	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4a1e      	ldr	r2, [pc, #120]	@ (8005d10 <TIM_OC6_SetConfig+0xa4>)
 8005c98:	4013      	ands	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	021b      	lsls	r3, r3, #8
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	4a1a      	ldr	r2, [pc, #104]	@ (8005d14 <TIM_OC6_SetConfig+0xa8>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	051b      	lsls	r3, r3, #20
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a16      	ldr	r2, [pc, #88]	@ (8005d18 <TIM_OC6_SetConfig+0xac>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d007      	beq.n	8005cd4 <TIM_OC6_SetConfig+0x68>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a15      	ldr	r2, [pc, #84]	@ (8005d1c <TIM_OC6_SetConfig+0xb0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d003      	beq.n	8005cd4 <TIM_OC6_SetConfig+0x68>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a14      	ldr	r2, [pc, #80]	@ (8005d20 <TIM_OC6_SetConfig+0xb4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d109      	bne.n	8005ce8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	4a13      	ldr	r2, [pc, #76]	@ (8005d24 <TIM_OC6_SetConfig+0xb8>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	029b      	lsls	r3, r3, #10
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	621a      	str	r2, [r3, #32]
}
 8005d02:	46c0      	nop			@ (mov r8, r8)
 8005d04:	46bd      	mov	sp, r7
 8005d06:	b006      	add	sp, #24
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	46c0      	nop			@ (mov r8, r8)
 8005d0c:	ffefffff 	.word	0xffefffff
 8005d10:	feff8fff 	.word	0xfeff8fff
 8005d14:	ffdfffff 	.word	0xffdfffff
 8005d18:	40012c00 	.word	0x40012c00
 8005d1c:	40014400 	.word	0x40014400
 8005d20:	40014800 	.word	0x40014800
 8005d24:	fffbffff 	.word	0xfffbffff

08005d28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	221f      	movs	r2, #31
 8005d38:	4013      	ands	r3, r2
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	409a      	lsls	r2, r3
 8005d3e:	0013      	movs	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	43d2      	mvns	r2, r2
 8005d4a:	401a      	ands	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a1a      	ldr	r2, [r3, #32]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	211f      	movs	r1, #31
 8005d58:	400b      	ands	r3, r1
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	4099      	lsls	r1, r3
 8005d5e:	000b      	movs	r3, r1
 8005d60:	431a      	orrs	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	621a      	str	r2, [r3, #32]
}
 8005d66:	46c0      	nop			@ (mov r8, r8)
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	b006      	add	sp, #24
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	223c      	movs	r2, #60	@ 0x3c
 8005d7e:	5c9b      	ldrb	r3, [r3, r2]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d101      	bne.n	8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d84:	2302      	movs	r3, #2
 8005d86:	e050      	b.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	223c      	movs	r2, #60	@ 0x3c
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	223d      	movs	r2, #61	@ 0x3d
 8005d94:	2102      	movs	r1, #2
 8005d96:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a21      	ldr	r2, [pc, #132]	@ (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d108      	bne.n	8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4a20      	ldr	r2, [pc, #128]	@ (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005db6:	4013      	ands	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2270      	movs	r2, #112	@ 0x70
 8005dc8:	4393      	bics	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a14      	ldr	r2, [pc, #80]	@ (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00a      	beq.n	8005dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	2380      	movs	r3, #128	@ 0x80
 8005dee:	05db      	lsls	r3, r3, #23
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d004      	beq.n	8005dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a10      	ldr	r2, [pc, #64]	@ (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d10c      	bne.n	8005e18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2280      	movs	r2, #128	@ 0x80
 8005e02:	4393      	bics	r3, r2
 8005e04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	223d      	movs	r2, #61	@ 0x3d
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	223c      	movs	r2, #60	@ 0x3c
 8005e24:	2100      	movs	r1, #0
 8005e26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	b004      	add	sp, #16
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	46c0      	nop			@ (mov r8, r8)
 8005e34:	40012c00 	.word	0x40012c00
 8005e38:	ff0fffff 	.word	0xff0fffff
 8005e3c:	40000400 	.word	0x40000400

08005e40 <memset>:
 8005e40:	0003      	movs	r3, r0
 8005e42:	1882      	adds	r2, r0, r2
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d100      	bne.n	8005e4a <memset+0xa>
 8005e48:	4770      	bx	lr
 8005e4a:	7019      	strb	r1, [r3, #0]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	e7f9      	b.n	8005e44 <memset+0x4>

08005e50 <__libc_init_array>:
 8005e50:	b570      	push	{r4, r5, r6, lr}
 8005e52:	2600      	movs	r6, #0
 8005e54:	4c0c      	ldr	r4, [pc, #48]	@ (8005e88 <__libc_init_array+0x38>)
 8005e56:	4d0d      	ldr	r5, [pc, #52]	@ (8005e8c <__libc_init_array+0x3c>)
 8005e58:	1b64      	subs	r4, r4, r5
 8005e5a:	10a4      	asrs	r4, r4, #2
 8005e5c:	42a6      	cmp	r6, r4
 8005e5e:	d109      	bne.n	8005e74 <__libc_init_array+0x24>
 8005e60:	2600      	movs	r6, #0
 8005e62:	f000 f819 	bl	8005e98 <_init>
 8005e66:	4c0a      	ldr	r4, [pc, #40]	@ (8005e90 <__libc_init_array+0x40>)
 8005e68:	4d0a      	ldr	r5, [pc, #40]	@ (8005e94 <__libc_init_array+0x44>)
 8005e6a:	1b64      	subs	r4, r4, r5
 8005e6c:	10a4      	asrs	r4, r4, #2
 8005e6e:	42a6      	cmp	r6, r4
 8005e70:	d105      	bne.n	8005e7e <__libc_init_array+0x2e>
 8005e72:	bd70      	pop	{r4, r5, r6, pc}
 8005e74:	00b3      	lsls	r3, r6, #2
 8005e76:	58eb      	ldr	r3, [r5, r3]
 8005e78:	4798      	blx	r3
 8005e7a:	3601      	adds	r6, #1
 8005e7c:	e7ee      	b.n	8005e5c <__libc_init_array+0xc>
 8005e7e:	00b3      	lsls	r3, r6, #2
 8005e80:	58eb      	ldr	r3, [r5, r3]
 8005e82:	4798      	blx	r3
 8005e84:	3601      	adds	r6, #1
 8005e86:	e7f2      	b.n	8005e6e <__libc_init_array+0x1e>
 8005e88:	08005f7c 	.word	0x08005f7c
 8005e8c:	08005f7c 	.word	0x08005f7c
 8005e90:	08005f80 	.word	0x08005f80
 8005e94:	08005f7c 	.word	0x08005f7c

08005e98 <_init>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	46c0      	nop			@ (mov r8, r8)
 8005e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9e:	bc08      	pop	{r3}
 8005ea0:	469e      	mov	lr, r3
 8005ea2:	4770      	bx	lr

08005ea4 <_fini>:
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	46c0      	nop			@ (mov r8, r8)
 8005ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eaa:	bc08      	pop	{r3}
 8005eac:	469e      	mov	lr, r3
 8005eae:	4770      	bx	lr
