
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006888  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08006944  08006944  00007944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a10  08006a10  00008074  2**0
                  CONTENTS
  4 .ARM          00000000  08006a10  08006a10  00008074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a10  08006a10  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a10  08006a10  00007a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a14  08006a14  00007a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006a18  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000074  08006a8c  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08006a8c  000082f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012eb0  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002baa  00000000  00000000  0001af4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0001daf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e3a  00000000  00000000  0001ed38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001810a  00000000  00000000  0001fb72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001678f  00000000  00000000  00037c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098476  00000000  00000000  0004e40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6881  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004210  00000000  00000000  000e68c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000eaad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800692c 	.word	0x0800692c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	0800692c 	.word	0x0800692c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231e      	movs	r3, #30
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-high hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	899b      	ldrh	r3, [r3, #12]
 8000258:	2201      	movs	r2, #1
 800025a:	0019      	movs	r1, r3
 800025c:	f002 fd55 	bl	8002d0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	899b      	ldrh	r3, [r3, #12]
 800026a:	2200      	movs	r2, #0
 800026c:	0019      	movs	r1, r3
 800026e:	f002 fd4c 	bl	8002d0a <HAL_GPIO_WritePin>

	/*
	 *  Delay for 500 ms using hardware timer
	 */
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f005 fa36 	bl	80056e8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	0018      	movs	r0, r3
 8000282:	f005 f9e5 	bl	8005650 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028e:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	2380      	movs	r3, #128	@ 0x80
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f5      	bcc.n	8000292 <capTouch_Init+0x76>

    // Determines the number of times to try each initialization step
	uint8_t numTries = 3;
 80002a6:	231f      	movs	r3, #31
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2203      	movs	r2, #3
 80002ac:	701a      	strb	r2, [r3, #0]

	// Verify device ID
		uint8_t deviceIDRet = 0x00;
 80002ae:	2317      	movs	r3, #23
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]

		while(numTries != 0) {
 80002b6:	e014      	b.n	80002e2 <capTouch_Init+0xc6>
			halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b8:	251e      	movs	r5, #30
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	2317      	movs	r3, #23
 80002be:	18fa      	adds	r2, r7, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ad 	bl	8000424 <capTouch_ReadDeviceID>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d00b      	beq.n	80002ee <capTouch_Init+0xd2>
				break;

			numTries--;
 80002d6:	211f      	movs	r1, #31
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	3a01      	subs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80002e2:	231f      	movs	r3, #31
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1e5      	bne.n	80002b8 <capTouch_Init+0x9c>
 80002ec:	e000      	b.n	80002f0 <capTouch_Init+0xd4>
				break;
 80002ee:	46c0      	nop			@ (mov r8, r8)
		}
		if(deviceIDRet != DEVICE_ID || numTries == 0) {
 80002f0:	2317      	movs	r3, #23
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80002f8:	d104      	bne.n	8000304 <capTouch_Init+0xe8>
 80002fa:	231f      	movs	r3, #31
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <capTouch_Init+0xec>
			return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e089      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->deviceID = deviceIDRet;
 8000308:	2317      	movs	r3, #23
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	739a      	strb	r2, [r3, #14]

		numTries = 3;
 8000312:	231f      	movs	r3, #31
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	2203      	movs	r2, #3
 8000318:	701a      	strb	r2, [r3, #0]

	// Force Device Recalibration
		while(numTries != 0) {
 800031a:	e019      	b.n	8000350 <capTouch_Init+0x134>
			halRet = capTouch_Recalibrate(capTouch);
 800031c:	231e      	movs	r3, #30
 800031e:	18fc      	adds	r4, r7, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	0018      	movs	r0, r3
 8000324:	f000 f8c0 	bl	80004a8 <capTouch_Recalibrate>
 8000328:	0003      	movs	r3, r0
 800032a:	7023      	strb	r3, [r4, #0]

			// Wait until calibration sequence completes
			while(capTouch_checkCal(capTouch)) {}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f8db 	bl	80004ec <capTouch_checkCal>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d1f9      	bne.n	800032e <capTouch_Init+0x112>

			if (halRet == HAL_OK)
 800033a:	231e      	movs	r3, #30
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00b      	beq.n	800035c <capTouch_Init+0x140>
				break;

			numTries--;
 8000344:	211f      	movs	r1, #31
 8000346:	187b      	adds	r3, r7, r1
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	187b      	adds	r3, r7, r1
 800034c:	3a01      	subs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 8000350:	231f      	movs	r3, #31
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1e0      	bne.n	800031c <capTouch_Init+0x100>
 800035a:	e000      	b.n	800035e <capTouch_Init+0x142>
				break;
 800035c:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 800035e:	231f      	movs	r3, #31
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d101      	bne.n	800036c <capTouch_Init+0x150>
			return 2;
 8000368:	2302      	movs	r3, #2
 800036a:	e057      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 800036c:	231f      	movs	r3, #31
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2203      	movs	r2, #3
 8000372:	701a      	strb	r2, [r3, #0]

	// Get initial reading of channels
		while(numTries != 0) {
 8000374:	e011      	b.n	800039a <capTouch_Init+0x17e>

			halRet = capTouch_readChannels(capTouch);
 8000376:	251e      	movs	r5, #30
 8000378:	197c      	adds	r4, r7, r5
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	0018      	movs	r0, r3
 800037e:	f000 f8f9 	bl	8000574 <capTouch_readChannels>
 8000382:	0003      	movs	r3, r0
 8000384:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 8000386:	197b      	adds	r3, r7, r5
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <capTouch_Init+0x18a>
				break;

			numTries--;
 800038e:	211f      	movs	r1, #31
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	3a01      	subs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 800039a:	231f      	movs	r3, #31
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e8      	bne.n	8000376 <capTouch_Init+0x15a>
 80003a4:	e000      	b.n	80003a8 <capTouch_Init+0x18c>
				break;
 80003a6:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003a8:	231f      	movs	r3, #31
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <capTouch_Init+0x19a>
			return 3;
 80003b2:	2303      	movs	r3, #3
 80003b4:	e032      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 80003b6:	231f      	movs	r3, #31
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2203      	movs	r2, #3
 80003bc:	701a      	strb	r2, [r3, #0]

	// Enable keys based on passed initialization byte
		while(numTries != 0) {
 80003be:	e015      	b.n	80003ec <capTouch_Init+0x1d0>

			halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80003c0:	251e      	movs	r5, #30
 80003c2:	197c      	adds	r4, r7, r5
 80003c4:	2334      	movs	r3, #52	@ 0x34
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f914 	bl	80005fc <capTouch_enableKeys>
 80003d4:	0003      	movs	r3, r0
 80003d6:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00b      	beq.n	80003f8 <capTouch_Init+0x1dc>
				break;

			numTries--;
 80003e0:	211f      	movs	r1, #31
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	3a01      	subs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80003ec:	231f      	movs	r3, #31
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1e4      	bne.n	80003c0 <capTouch_Init+0x1a4>
 80003f6:	e000      	b.n	80003fa <capTouch_Init+0x1de>
				break;
 80003f8:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003fa:	231f      	movs	r3, #31
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <capTouch_Init+0x1ec>
			return 4;
 8000404:	2304      	movs	r3, #4
 8000406:	e009      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->keys = keyEnFlags;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2234      	movs	r2, #52	@ 0x34
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	73da      	strb	r2, [r3, #15]

		numTries = 3;
 8000412:	231f      	movs	r3, #31
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]

	return 0;
 800041a:	2300      	movs	r3, #0

}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	b008      	add	sp, #32
 8000422:	bdb0      	pop	{r4, r5, r7, pc}

08000424 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 800042e:	230e      	movs	r3, #14
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000436:	250f      	movs	r5, #15
 8000438:	197b      	adds	r3, r7, r5
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <capTouch_ReadDeviceID+0x80>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f002 fd69 	bl	8002f30 <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000462:	197b      	adds	r3, r7, r5
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 800046a:	197b      	adds	r3, r7, r5
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	e014      	b.n	800049a <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	250f      	movs	r5, #15
 8000476:	197c      	adds	r4, r7, r5
 8000478:	260e      	movs	r6, #14
 800047a:	19ba      	adds	r2, r7, r6
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2136      	movs	r1, #54	@ 0x36
 8000486:	f002 fe7d 	bl	8003184 <HAL_I2C_Master_Receive>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000496:	197b      	adds	r3, r7, r5
 8000498:	781b      	ldrb	r3, [r3, #0]

}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b005      	add	sp, #20
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	08006944 	.word	0x08006944

080004a8 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b0:	210f      	movs	r1, #15
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 80004b8:	260c      	movs	r6, #12
 80004ba:	19bb      	adds	r3, r7, r6
 80004bc:	22c8      	movs	r2, #200	@ 0xc8
 80004be:	4252      	negs	r2, r2
 80004c0:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	000d      	movs	r5, r1
 80004c8:	187c      	adds	r4, r7, r1
 80004ca:	19ba      	adds	r2, r7, r6
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2302      	movs	r3, #2
 80004d4:	2136      	movs	r1, #54	@ 0x36
 80004d6:	f002 fd2b 	bl	8002f30 <HAL_I2C_Master_Transmit>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]

}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b005      	add	sp, #20
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080004ec <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004f4:	210f      	movs	r1, #15
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80004fc:	230d      	movs	r3, #13
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 8000504:	260c      	movs	r6, #12
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <capTouch_checkCal+0x84>)
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	000d      	movs	r5, r1
 8000514:	187c      	adds	r4, r7, r1
 8000516:	19ba      	adds	r2, r7, r6
 8000518:	2301      	movs	r3, #1
 800051a:	425b      	negs	r3, r3
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2136      	movs	r1, #54	@ 0x36
 8000522:	f002 fd05 	bl	8002f30 <HAL_I2C_Master_Transmit>
 8000526:	0003      	movs	r3, r0
 8000528:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <capTouch_checkCal+0x4c>
		return halRet;
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	e016      	b.n	8000566 <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230f      	movs	r3, #15
 800053e:	18fc      	adds	r4, r7, r3
 8000540:	250d      	movs	r5, #13
 8000542:	197a      	adds	r2, r7, r5
 8000544:	2301      	movs	r3, #1
 8000546:	425b      	negs	r3, r3
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	2136      	movs	r1, #54	@ 0x36
 800054e:	f002 fe19 	bl	8003184 <HAL_I2C_Master_Receive>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000556:	197b      	adds	r3, r7, r5
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	210e      	movs	r1, #14
 800055c:	187b      	adds	r3, r7, r1
 800055e:	09d2      	lsrs	r2, r2, #7
 8000560:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	781b      	ldrb	r3, [r3, #0]

}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b005      	add	sp, #20
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	08006948 	.word	0x08006948

08000574 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800057c:	210f      	movs	r1, #15
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000584:	230e      	movs	r3, #14
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800058c:	260c      	movs	r6, #12
 800058e:	19bb      	adds	r3, r7, r6
 8000590:	4a19      	ldr	r2, [pc, #100]	@ (80005f8 <capTouch_readChannels+0x84>)
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	000d      	movs	r5, r1
 800059c:	187c      	adds	r4, r7, r1
 800059e:	19ba      	adds	r2, r7, r6
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	2136      	movs	r1, #54	@ 0x36
 80005aa:	f002 fcc1 	bl	8002f30 <HAL_I2C_Master_Transmit>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80005b2:	197b      	adds	r3, r7, r5
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <capTouch_readChannels+0x4c>
		return halRet;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e017      	b.n	80005f0 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	250f      	movs	r5, #15
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	260e      	movs	r6, #14
 80005ca:	19ba      	adds	r2, r7, r6
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2136      	movs	r1, #54	@ 0x36
 80005d6:	f002 fdd5 	bl	8003184 <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 80005de:	19bb      	adds	r3, r7, r6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	227f      	movs	r2, #127	@ 0x7f
 80005e4:	4013      	ands	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	741a      	strb	r2, [r3, #16]

	return halRet;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]

}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b005      	add	sp, #20
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	0800694c 	.word	0x0800694c

080005fc <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	b08b      	sub	sp, #44	@ 0x2c
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	000a      	movs	r2, r1
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800060a:	241e      	movs	r4, #30
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000612:	2314      	movs	r3, #20
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	4a39      	ldr	r2, [pc, #228]	@ (80006fc <capTouch_enableKeys+0x100>)
 8000618:	6811      	ldr	r1, [r2, #0]
 800061a:	6019      	str	r1, [r3, #0]
 800061c:	8891      	ldrh	r1, [r2, #4]
 800061e:	8099      	strh	r1, [r3, #4]
 8000620:	7992      	ldrb	r2, [r2, #6]
 8000622:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000624:	260c      	movs	r6, #12
 8000626:	19bb      	adds	r3, r7, r6
 8000628:	4a35      	ldr	r2, [pc, #212]	@ (8000700 <capTouch_enableKeys+0x104>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	6019      	str	r1, [r3, #0]
 800062e:	8891      	ldrh	r1, [r2, #4]
 8000630:	8099      	strh	r1, [r3, #4]
 8000632:	7992      	ldrb	r2, [r2, #6]
 8000634:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	0025      	movs	r5, r4
 800063c:	193c      	adds	r4, r7, r4
 800063e:	19ba      	adds	r2, r7, r6
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	2136      	movs	r1, #54	@ 0x36
 800064a:	f002 fc71 	bl	8002f30 <HAL_I2C_Master_Transmit>
 800064e:	0003      	movs	r3, r0
 8000650:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000652:	197b      	adds	r3, r7, r5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <capTouch_enableKeys+0x64>
		return halRet;
 800065a:	197b      	adds	r3, r7, r5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e049      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	251e      	movs	r5, #30
 8000666:	197c      	adds	r4, r7, r5
 8000668:	2314      	movs	r3, #20
 800066a:	18fa      	adds	r2, r7, r3
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2307      	movs	r3, #7
 8000674:	2136      	movs	r1, #54	@ 0x36
 8000676:	f002 fd85 	bl	8003184 <HAL_I2C_Master_Receive>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800067e:	197b      	adds	r3, r7, r5
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <capTouch_enableKeys+0x90>
		return halRet;
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	e033      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800068c:	231f      	movs	r3, #31
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e01c      	b.n	80006d0 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 8000696:	201f      	movs	r0, #31
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2414      	movs	r4, #20
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	5cd3      	ldrb	r3, [r2, r3]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	7819      	ldrb	r1, [r3, #0]
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4119      	asrs	r1, r3
 80006b0:	000b      	movs	r3, r1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	400b      	ands	r3, r1
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	434a      	muls	r2, r1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 80006c6:	183b      	adds	r3, r7, r0
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	3201      	adds	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	231f      	movs	r3, #31
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d9dd      	bls.n	8000696 <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 80006da:	251e      	movs	r5, #30
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	2314      	movs	r3, #20
 80006e0:	18fa      	adds	r2, r7, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f80c 	bl	8000704 <capTouch_SetAveragingFactor>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]

}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	@ 0x24
 80006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fc:	08006950 	.word	0x08006950
 8000700:	08006958 	.word	0x08006958

08000704 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800070e:	241e      	movs	r4, #30
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000716:	2314      	movs	r3, #20
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	4a5d      	ldr	r2, [pc, #372]	@ (8000890 <capTouch_SetAveragingFactor+0x18c>)
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	6019      	str	r1, [r3, #0]
 8000720:	8891      	ldrh	r1, [r2, #4]
 8000722:	8099      	strh	r1, [r3, #4]
 8000724:	7992      	ldrb	r2, [r2, #6]
 8000726:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000728:	260c      	movs	r6, #12
 800072a:	19bb      	adds	r3, r7, r6
 800072c:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <capTouch_SetAveragingFactor+0x190>)
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	6019      	str	r1, [r3, #0]
 8000732:	8891      	ldrh	r1, [r2, #4]
 8000734:	8099      	strh	r1, [r3, #4]
 8000736:	7992      	ldrb	r2, [r2, #6]
 8000738:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	0025      	movs	r5, r4
 8000740:	193c      	adds	r4, r7, r4
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2136      	movs	r1, #54	@ 0x36
 800074e:	f002 fbef 	bl	8002f30 <HAL_I2C_Master_Transmit>
 8000752:	0003      	movs	r3, r0
 8000754:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000756:	197b      	adds	r3, r7, r5
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 800075e:	197b      	adds	r3, r7, r5
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	e090      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	251e      	movs	r5, #30
 800076a:	197c      	adds	r4, r7, r5
 800076c:	2314      	movs	r3, #20
 800076e:	18fa      	adds	r2, r7, r3
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2307      	movs	r3, #7
 8000778:	2136      	movs	r1, #54	@ 0x36
 800077a:	f002 fd03 	bl	8003184 <HAL_I2C_Master_Receive>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000782:	197b      	adds	r3, r7, r5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e07a      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000790:	2308      	movs	r3, #8
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000798:	231d      	movs	r3, #29
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80007a0:	231f      	movs	r3, #31
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e041      	b.n	800082e <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80007aa:	241f      	movs	r4, #31
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2214      	movs	r2, #20
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	201d      	movs	r0, #29
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	2103      	movs	r1, #3
 80007bc:	400a      	ands	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	251c      	movs	r5, #28
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	1839      	adds	r1, r7, r0
 80007d6:	197a      	adds	r2, r7, r5
 80007d8:	7809      	ldrb	r1, [r1, #0]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	220c      	movs	r2, #12
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	5cd2      	ldrb	r2, [r2, r3]
 80007ea:	2108      	movs	r1, #8
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	251e      	movs	r5, #30
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	187a      	adds	r2, r7, r1
 8000802:	2301      	movs	r3, #1
 8000804:	425b      	negs	r3, r3
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2136      	movs	r1, #54	@ 0x36
 800080c:	f002 fb90 	bl	8002f30 <HAL_I2C_Master_Transmit>
 8000810:	0003      	movs	r3, r0
 8000812:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 800081c:	197b      	adds	r3, r7, r5
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e031      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 8000822:	211f      	movs	r1, #31
 8000824:	187b      	adds	r3, r7, r1
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	3201      	adds	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	231f      	movs	r3, #31
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d9b8      	bls.n	80007aa <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	251e      	movs	r5, #30
 800083e:	197c      	adds	r4, r7, r5
 8000840:	230c      	movs	r3, #12
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2136      	movs	r1, #54	@ 0x36
 800084e:	f002 fb6f 	bl	8002f30 <HAL_I2C_Master_Transmit>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 800085e:	197b      	adds	r3, r7, r5
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e010      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	251e      	movs	r5, #30
 800086a:	197c      	adds	r4, r7, r5
 800086c:	2314      	movs	r3, #20
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2307      	movs	r3, #7
 8000878:	2136      	movs	r1, #54	@ 0x36
 800087a:	f002 fc83 	bl	8003184 <HAL_I2C_Master_Receive>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781b      	ldrb	r3, [r3, #0]

}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	@ 0x24
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	08006950 	.word	0x08006950
 8000894:	08006958 	.word	0x08006958

08000898 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008a2:	231e      	movs	r3, #30
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80008aa:	2314      	movs	r3, #20
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <capTouch_SetDetectionIntegrator+0xdc>)
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	6019      	str	r1, [r3, #0]
 80008b4:	8891      	ldrh	r1, [r2, #4]
 80008b6:	8099      	strh	r1, [r3, #4]
 80008b8:	7992      	ldrb	r2, [r2, #6]
 80008ba:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 80008bc:	2310      	movs	r3, #16
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80008c4:	231f      	movs	r3, #31
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e022      	b.n	8000914 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 80008ce:	251f      	movs	r5, #31
 80008d0:	197b      	adds	r3, r7, r5
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2214      	movs	r2, #20
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	5cd2      	ldrb	r2, [r2, r3]
 80008da:	2110      	movs	r1, #16
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	231e      	movs	r3, #30
 80008f4:	18fc      	adds	r4, r7, r3
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2136      	movs	r1, #54	@ 0x36
 8000902:	f002 fb15 	bl	8002f30 <HAL_I2C_Master_Transmit>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 800090a:	197b      	adds	r3, r7, r5
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	197b      	adds	r3, r7, r5
 8000910:	3201      	adds	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	231f      	movs	r3, #31
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d9d7      	bls.n	80008ce <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800091e:	2608      	movs	r6, #8
 8000920:	19bb      	adds	r3, r7, r6
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <capTouch_SetDetectionIntegrator+0xe0>)
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	6019      	str	r1, [r3, #0]
 8000928:	8891      	ldrh	r1, [r2, #4]
 800092a:	8099      	strh	r1, [r3, #4]
 800092c:	7992      	ldrb	r2, [r2, #6]
 800092e:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	251e      	movs	r5, #30
 8000936:	197c      	adds	r4, r7, r5
 8000938:	2314      	movs	r3, #20
 800093a:	18fa      	adds	r2, r7, r3
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2136      	movs	r1, #54	@ 0x36
 8000946:	f002 faf3 	bl	8002f30 <HAL_I2C_Master_Transmit>
 800094a:	0003      	movs	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	197c      	adds	r4, r7, r5
 8000954:	19ba      	adds	r2, r7, r6
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2307      	movs	r3, #7
 800095e:	2136      	movs	r1, #54	@ 0x36
 8000960:	f002 fc10 	bl	8003184 <HAL_I2C_Master_Receive>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000968:	197b      	adds	r3, r7, r5
 800096a:	781b      	ldrb	r3, [r3, #0]

}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	@ 0x24
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	08006960 	.word	0x08006960
 8000978:	08006950 	.word	0x08006950

0800097c <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


HAL_StatusTypeDef initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b09a      	sub	sp, #104	@ 0x68
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000988:	2567      	movs	r5, #103	@ 0x67
 800098a:	197b      	adds	r3, r7, r5
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 8000990:	243c      	movs	r4, #60	@ 0x3c
 8000992:	193b      	adds	r3, r7, r4
 8000994:	0018      	movs	r0, r3
 8000996:	2328      	movs	r3, #40	@ 0x28
 8000998:	001a      	movs	r2, r3
 800099a:	2100      	movs	r1, #0
 800099c:	f005 ff90 	bl	80068c0 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	781a      	ldrb	r2, [r3, #0]
 80009a4:	0021      	movs	r1, r4
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	789a      	ldrb	r2, [r3, #2]
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	78da      	ldrb	r2, [r3, #3]
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	78da      	ldrb	r2, [r3, #3]
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009d6:	0008      	movs	r0, r1
 80009d8:	183b      	adds	r3, r7, r0
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009de:	183b      	adds	r3, r7, r0
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80009e4:	183b      	adds	r3, r7, r0
 80009e6:	4a19      	ldr	r2, [pc, #100]	@ (8000a4c <initRTCInternalAlarm+0xd0>)
 80009e8:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009ea:	183b      	adds	r3, r7, r0
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009f0:	183b      	adds	r3, r7, r0
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 80009f6:	183b      	adds	r3, r7, r0
 80009f8:	2220      	movs	r2, #32
 80009fa:	2101      	movs	r1, #1
 80009fc:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 80009fe:	0001      	movs	r1, r0
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2280      	movs	r2, #128	@ 0x80
 8000a04:	0052      	lsls	r2, r2, #1
 8000a06:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8000a08:	197c      	adds	r4, r7, r5
 8000a0a:	1879      	adds	r1, r7, r1
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f004 f9a5 	bl	8004d60 <HAL_RTC_SetAlarm_IT>
 8000a16:	0003      	movs	r3, r0
 8000a18:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000a1a:	197b      	adds	r3, r7, r5
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <initRTCInternalAlarm+0xac>
		return halRet;
 8000a22:	197b      	adds	r3, r7, r5
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	e00d      	b.n	8000a44 <initRTCInternalAlarm+0xc8>

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8000a28:	2567      	movs	r5, #103	@ 0x67
 8000a2a:	197c      	adds	r4, r7, r5
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	005a      	lsls	r2, r3, #1
 8000a30:	2314      	movs	r3, #20
 8000a32:	18f9      	adds	r1, r7, r3
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	2300      	movs	r3, #0
 8000a38:	f004 fad2 	bl	8004fe0 <HAL_RTC_GetAlarm>
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	7023      	strb	r3, [r4, #0]
	return halRet;
 8000a40:	197b      	adds	r3, r7, r5
 8000a42:	781b      	ldrb	r3, [r3, #0]

}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b01a      	add	sp, #104	@ 0x68
 8000a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a4c:	80800080 	.word	0x80800080

08000a50 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2200      	movs	r2, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f004 f840 	bl	8004ae8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f004 f928 	bl	8004cc4 <HAL_RTC_GetDate>

}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b004      	add	sp, #16
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	b08d      	sub	sp, #52	@ 0x34
 8000a80:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a82:	f001 fe5d 	bl	8002740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f000 f95f 	bl	8000d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f000 fc11 	bl	80012b0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000a8e:	f000 fa0f 	bl	8000eb0 <MX_RTC_Init>
  MX_I2C1_Init();
 8000a92:	f000 f9cd 	bl	8000e30 <MX_I2C1_Init>
  MX_TIM14_Init();
 8000a96:	f000 fbab 	bl	80011f0 <MX_TIM14_Init>
  MX_TIM2_Init();
 8000a9a:	f000 fb49 	bl	8001130 <MX_TIM2_Init>
  MX_TIM16_Init();
 8000a9e:	f000 fbcd 	bl	800123c <MX_TIM16_Init>
  MX_TIM1_Init();
 8000aa2:	f000 fa99 	bl	8000fd8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // HAL Status handle for error-checking
  HAL_StatusTypeDef halRet = HAL_OK;
 8000aa6:	2517      	movs	r5, #23
 8000aa8:	197b      	adds	r3, r7, r5
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]

  // Set Smooth Calibration Value
  halRet = HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 8000aae:	4b92      	ldr	r3, [pc, #584]	@ (8000cf8 <main+0x27c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	197c      	adds	r4, r7, r5
 8000ab4:	2280      	movs	r2, #128	@ 0x80
 8000ab6:	01d1      	lsls	r1, r2, #7
 8000ab8:	4890      	ldr	r0, [pc, #576]	@ (8000cfc <main+0x280>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	f004 fc85 	bl	80053ca <HAL_RTCEx_SetSmoothCalib>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	7023      	strb	r3, [r4, #0]
    							RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);
  if(halRet != HAL_OK) {
 8000ac4:	197b      	adds	r3, r7, r5
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <main+0x54>
	  // Failure to talk to RTC is a hard failure
	  dispFailure();
 8000acc:	f001 f9fa 	bl	8001ec4 <dispFailure>
  }

  // Init the internal RTC alarm time to track the current time
  halRet = initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 8000ad0:	2517      	movs	r5, #23
 8000ad2:	197c      	adds	r4, r7, r5
 8000ad4:	4a8a      	ldr	r2, [pc, #552]	@ (8000d00 <main+0x284>)
 8000ad6:	498b      	ldr	r1, [pc, #556]	@ (8000d04 <main+0x288>)
 8000ad8:	4b88      	ldr	r3, [pc, #544]	@ (8000cfc <main+0x280>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f7ff ff4e 	bl	800097c <initRTCInternalAlarm>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	7023      	strb	r3, [r4, #0]
  if(halRet != HAL_OK) {
 8000ae4:	197b      	adds	r3, r7, r5
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <main+0x74>
  	  // Failure to initialize RTC alarm is a hard failure
  	  dispFailure();
 8000aec:	f001 f9ea 	bl	8001ec4 <dispFailure>
    }

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000af0:	2380      	movs	r3, #128	@ 0x80
 8000af2:	009c      	lsls	r4, r3, #2
 8000af4:	2380      	movs	r3, #128	@ 0x80
 8000af6:	00dd      	lsls	r5, r3, #3
 8000af8:	2680      	movs	r6, #128	@ 0x80
 8000afa:	2340      	movs	r3, #64	@ 0x40
 8000afc:	469c      	mov	ip, r3
 8000afe:	2380      	movs	r3, #128	@ 0x80
 8000b00:	011a      	lsls	r2, r3, #4
 8000b02:	4b81      	ldr	r3, [pc, #516]	@ (8000d08 <main+0x28c>)
 8000b04:	6819      	ldr	r1, [r3, #0]
 8000b06:	4b81      	ldr	r3, [pc, #516]	@ (8000d0c <main+0x290>)
 8000b08:	6818      	ldr	r0, [r3, #0]
 8000b0a:	4b81      	ldr	r3, [pc, #516]	@ (8000d10 <main+0x294>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	9304      	str	r3, [sp, #16]
 8000b10:	9003      	str	r0, [sp, #12]
 8000b12:	9102      	str	r1, [sp, #8]
 8000b14:	4b7f      	ldr	r3, [pc, #508]	@ (8000d14 <main+0x298>)
 8000b16:	9301      	str	r3, [sp, #4]
 8000b18:	9200      	str	r2, [sp, #0]
 8000b1a:	4663      	mov	r3, ip
 8000b1c:	0032      	movs	r2, r6
 8000b1e:	0029      	movs	r1, r5
 8000b20:	0020      	movs	r0, r4
 8000b22:	f001 fa41 	bl	8001fa8 <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);

    // Set to max brightness
    sevSeg_setIntensity(sevSeg_intensityDuty[2]);
 8000b26:	234b      	movs	r3, #75	@ 0x4b
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f001 fb71 	bl	8002210 <sevSeg_setIntensity>

	halRet = updateAndDisplayTime();
 8000b2e:	2517      	movs	r5, #23
 8000b30:	197c      	adds	r4, r7, r5
 8000b32:	f000 fc9f 	bl	8001474 <updateAndDisplayTime>
 8000b36:	0003      	movs	r3, r0
 8000b38:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000b3a:	197b      	adds	r3, r7, r5
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <main+0xca>
	  // Failure to display current time is a hard failure
	  dispFailure();
 8000b42:	f001 f9bf 	bl	8001ec4 <dispFailure>
    /*
     * Initialize capacitive touch sensor
     */

	// Used to separate return initializations into critical and non-critical errors.
	uint8_t initRet = 0;
 8000b46:	2116      	movs	r1, #22
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]

    initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 8000b4e:	4b6e      	ldr	r3, [pc, #440]	@ (8000d08 <main+0x28c>)
 8000b50:	681d      	ldr	r5, [r3, #0]
 8000b52:	2380      	movs	r3, #128	@ 0x80
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4a70      	ldr	r2, [pc, #448]	@ (8000d18 <main+0x29c>)
 8000b58:	7812      	ldrb	r2, [r2, #0]
 8000b5a:	187c      	adds	r4, r7, r1
 8000b5c:	4e6f      	ldr	r6, [pc, #444]	@ (8000d1c <main+0x2a0>)
 8000b5e:	4970      	ldr	r1, [pc, #448]	@ (8000d20 <main+0x2a4>)
 8000b60:	4870      	ldr	r0, [pc, #448]	@ (8000d24 <main+0x2a8>)
 8000b62:	9201      	str	r2, [sp, #4]
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	0033      	movs	r3, r6
 8000b68:	002a      	movs	r2, r5
 8000b6a:	f7ff fb57 	bl	800021c <capTouch_Init>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	7023      	strb	r3, [r4, #0]
    						&capTouchResetPort, capTouchResetPin, capTouchChannels);
    if( (initRet == 1) || (initRet == 3) || (initRet == 4)) {
 8000b72:	2116      	movs	r1, #22
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d007      	beq.n	8000b8c <main+0x110>
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d003      	beq.n	8000b8c <main+0x110>
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d102      	bne.n	8000b92 <main+0x116>
    	/* Critical Errors:
    	 * 1 = Failure to read correct device ID
    	 * 2 = Failure to read Keys
    	 * 3 = Failure to enable keys
    	 */
    	dispFailure();
 8000b8c:	f001 f99a 	bl	8001ec4 <dispFailure>
 8000b90:	e00d      	b.n	8000bae <main+0x132>
    }
    else if (initRet == 2) {
 8000b92:	2316      	movs	r3, #22
 8000b94:	18fb      	adds	r3, r7, r3
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d102      	bne.n	8000ba2 <main+0x126>
    	/*
    	 * Non-critical Errors:
    	 * 2 = Failure to Recalibrate
    	 */
    	dispFault();
 8000b9c:	f001 f984 	bl	8001ea8 <dispFault>
 8000ba0:	e005      	b.n	8000bae <main+0x132>
    }
    else if(initRet == 0) {
 8000ba2:	2316      	movs	r3, #22
 8000ba4:	18fb      	adds	r3, r7, r3
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d100      	bne.n	8000bae <main+0x132>
    	// initRet = 0 = all is well
    	__NOP();
 8000bac:	46c0      	nop			@ (mov r8, r8)
    }

    // Set averaging factor
    uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 8000bae:	4b5e      	ldr	r3, [pc, #376]	@ (8000d28 <main+0x2ac>)
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	210c      	movs	r1, #12
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	4b5b      	ldr	r3, [pc, #364]	@ (8000d28 <main+0x2ac>)
 8000bba:	781a      	ldrb	r2, [r3, #0]
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	705a      	strb	r2, [r3, #1]
 8000bc0:	4b59      	ldr	r3, [pc, #356]	@ (8000d28 <main+0x2ac>)
 8000bc2:	781a      	ldrb	r2, [r3, #0]
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	709a      	strb	r2, [r3, #2]
 8000bc8:	4b57      	ldr	r3, [pc, #348]	@ (8000d28 <main+0x2ac>)
 8000bca:	781a      	ldrb	r2, [r3, #0]
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	70da      	strb	r2, [r3, #3]
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	711a      	strb	r2, [r3, #4]
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	715a      	strb	r2, [r3, #5]
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2200      	movs	r2, #0
 8000be0:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000be2:	2517      	movs	r5, #23
 8000be4:	197c      	adds	r4, r7, r5
 8000be6:	187a      	adds	r2, r7, r1
 8000be8:	4b4e      	ldr	r3, [pc, #312]	@ (8000d24 <main+0x2a8>)
 8000bea:	0011      	movs	r1, r2
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff fd89 	bl	8000704 <capTouch_SetAveragingFactor>
 8000bf2:	0003      	movs	r3, r0
 8000bf4:	7023      	strb	r3, [r4, #0]

    if(halRet != HAL_OK) {
 8000bf6:	197b      	adds	r3, r7, r5
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <main+0x186>
    	// This is sensitivity-setting and a non-critical error
    	dispFault();
 8000bfe:	f001 f953 	bl	8001ea8 <dispFault>
    }

    // Set detection integration factors
    uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 8000c02:	4b4a      	ldr	r3, [pc, #296]	@ (8000d2c <main+0x2b0>)
 8000c04:	781a      	ldrb	r2, [r3, #0]
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	4b48      	ldr	r3, [pc, #288]	@ (8000d2c <main+0x2b0>)
 8000c0c:	781a      	ldrb	r2, [r3, #0]
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	705a      	strb	r2, [r3, #1]
 8000c12:	4b46      	ldr	r3, [pc, #280]	@ (8000d2c <main+0x2b0>)
 8000c14:	781a      	ldrb	r2, [r3, #0]
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	709a      	strb	r2, [r3, #2]
 8000c1a:	4b44      	ldr	r3, [pc, #272]	@ (8000d2c <main+0x2b0>)
 8000c1c:	781a      	ldrb	r2, [r3, #0]
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	70da      	strb	r2, [r3, #3]
 8000c22:	4b42      	ldr	r3, [pc, #264]	@ (8000d2c <main+0x2b0>)
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	711a      	strb	r2, [r3, #4]
 8000c2a:	4b40      	ldr	r3, [pc, #256]	@ (8000d2c <main+0x2b0>)
 8000c2c:	781a      	ldrb	r2, [r3, #0]
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	715a      	strb	r2, [r3, #5]
 8000c32:	4b3e      	ldr	r3, [pc, #248]	@ (8000d2c <main+0x2b0>)
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 8000c3a:	2517      	movs	r5, #23
 8000c3c:	197c      	adds	r4, r7, r5
 8000c3e:	1d3a      	adds	r2, r7, #4
 8000c40:	4b38      	ldr	r3, [pc, #224]	@ (8000d24 <main+0x2a8>)
 8000c42:	0011      	movs	r1, r2
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff fe27 	bl	8000898 <capTouch_SetDetectionIntegrator>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	7023      	strb	r3, [r4, #0]
    if(halRet != HAL_OK) {
 8000c4e:	197b      	adds	r3, r7, r5
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <main+0x1de>
    	// This is sensitivity-setting and a non-critical error
		dispFault();
 8000c56:	f001 f927 	bl	8001ea8 <dispFault>
    }

    userAlarmToggle = false;			//Default to off
 8000c5a:	4b35      	ldr	r3, [pc, #212]	@ (8000d30 <main+0x2b4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
     * initialize the alarm time to a default value.
     *
     * Else, initialize to whatever is stored in backup registers.
     */

    if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 8000c60:	4b34      	ldr	r3, [pc, #208]	@ (8000d34 <main+0x2b8>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b25      	ldr	r3, [pc, #148]	@ (8000cfc <main+0x280>)
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f004 fc7e 	bl	800556a <HAL_RTCEx_BKUPRead>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d11c      	bne.n	8000cb0 <main+0x234>

    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 8000c76:	4b30      	ldr	r3, [pc, #192]	@ (8000d38 <main+0x2bc>)
 8000c78:	6819      	ldr	r1, [r3, #0]
 8000c7a:	4b20      	ldr	r3, [pc, #128]	@ (8000cfc <main+0x280>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f004 fc56 	bl	8005530 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 8000c84:	4b2d      	ldr	r3, [pc, #180]	@ (8000d3c <main+0x2c0>)
 8000c86:	6819      	ldr	r1, [r3, #0]
 8000c88:	4b1c      	ldr	r3, [pc, #112]	@ (8000cfc <main+0x280>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f004 fc4f 	bl	8005530 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 8000c92:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <main+0x2c4>)
 8000c94:	6819      	ldr	r1, [r3, #0]
 8000c96:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <main+0x280>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f004 fc48 	bl	8005530 <HAL_RTCEx_BKUPWrite>

    	// Write backup register with a non-zero value to signify that it has been initialized before
    	HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8000ca0:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <main+0x2b8>)
 8000ca2:	6819      	ldr	r1, [r3, #0]
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	425a      	negs	r2, r3
 8000ca8:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <main+0x280>)
 8000caa:	0018      	movs	r0, r3
 8000cac:	f004 fc40 	bl	8005530 <HAL_RTCEx_BKUPWrite>

    }

	userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8000cb0:	4b21      	ldr	r3, [pc, #132]	@ (8000d38 <main+0x2bc>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <main+0x280>)
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f004 fc56 	bl	800556a <HAL_RTCEx_BKUPRead>
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b20      	ldr	r3, [pc, #128]	@ (8000d44 <main+0x2c8>)
 8000cc4:	701a      	strb	r2, [r3, #0]
	userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <main+0x2c0>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <main+0x280>)
 8000ccc:	0011      	movs	r1, r2
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f004 fc4b 	bl	800556a <HAL_RTCEx_BKUPRead>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <main+0x2c8>)
 8000cda:	705a      	strb	r2, [r3, #1]
	userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 8000cdc:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <main+0x2c4>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <main+0x280>)
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f004 fc40 	bl	800556a <HAL_RTCEx_BKUPRead>
 8000cea:	0003      	movs	r3, r0
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <main+0x2c8>)
 8000cf0:	70da      	strb	r2, [r3, #3]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	e7fd      	b.n	8000cf2 <main+0x276>
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	2000002c 	.word	0x2000002c
 8000cfc:	2000011c 	.word	0x2000011c
 8000d00:	200000ac 	.word	0x200000ac
 8000d04:	20000098 	.word	0x20000098
 8000d08:	20000044 	.word	0x20000044
 8000d0c:	20000040 	.word	0x20000040
 8000d10:	20000030 	.word	0x20000030
 8000d14:	20000014 	.word	0x20000014
 8000d18:	2000000c 	.word	0x2000000c
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	200000c8 	.word	0x200000c8
 8000d24:	2000027c 	.word	0x2000027c
 8000d28:	2000000d 	.word	0x2000000d
 8000d2c:	2000000e 	.word	0x2000000e
 8000d30:	20000091 	.word	0x20000091
 8000d34:	2000003c 	.word	0x2000003c
 8000d38:	200000c4 	.word	0x200000c4
 8000d3c:	20000034 	.word	0x20000034
 8000d40:	20000038 	.word	0x20000038
 8000d44:	200000b0 	.word	0x200000b0

08000d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b093      	sub	sp, #76	@ 0x4c
 8000d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4e:	2410      	movs	r4, #16
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	0018      	movs	r0, r3
 8000d54:	2338      	movs	r3, #56	@ 0x38
 8000d56:	001a      	movs	r2, r3
 8000d58:	2100      	movs	r1, #0
 8000d5a:	f005 fdb1 	bl	80068c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5e:	003b      	movs	r3, r7
 8000d60:	0018      	movs	r0, r3
 8000d62:	2310      	movs	r3, #16
 8000d64:	001a      	movs	r2, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	f005 fdaa 	bl	80068c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6c:	2380      	movs	r3, #128	@ 0x80
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	0018      	movs	r0, r3
 8000d72:	f002 fe99 	bl	8003aa8 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d76:	f002 fe79 	bl	8003a6c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 8000d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e2c <SystemClock_Config+0xe4>)
 8000d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d7e:	2218      	movs	r2, #24
 8000d80:	4393      	bics	r3, r2
 8000d82:	001a      	movs	r2, r3
 8000d84:	4b29      	ldr	r3, [pc, #164]	@ (8000e2c <SystemClock_Config+0xe4>)
 8000d86:	2108      	movs	r1, #8
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000d8c:	193b      	adds	r3, r7, r4
 8000d8e:	220e      	movs	r2, #14
 8000d90:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d92:	193b      	adds	r3, r7, r4
 8000d94:	2201      	movs	r2, #1
 8000d96:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d98:	193b      	adds	r3, r7, r4
 8000d9a:	2280      	movs	r2, #128	@ 0x80
 8000d9c:	0052      	lsls	r2, r2, #1
 8000d9e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000da0:	0021      	movs	r1, r4
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2240      	movs	r2, #64	@ 0x40
 8000dac:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2201      	movs	r2, #1
 8000db2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2202      	movs	r2, #2
 8000db8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2208      	movs	r2, #8
 8000dca:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2280      	movs	r2, #128	@ 0x80
 8000dd0:	0292      	lsls	r2, r2, #10
 8000dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2280      	movs	r2, #128	@ 0x80
 8000dd8:	0492      	lsls	r2, r2, #18
 8000dda:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2280      	movs	r2, #128	@ 0x80
 8000de0:	0592      	lsls	r2, r2, #22
 8000de2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	0018      	movs	r0, r3
 8000de8:	f002 fe9e 	bl	8003b28 <HAL_RCC_OscConfig>
 8000dec:	1e03      	subs	r3, r0, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000df0:	f001 f8d4 	bl	8001f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df4:	003b      	movs	r3, r7
 8000df6:	2207      	movs	r2, #7
 8000df8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e00:	003b      	movs	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e06:	003b      	movs	r3, r7
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e0c:	003b      	movs	r3, r7
 8000e0e:	2102      	movs	r1, #2
 8000e10:	0018      	movs	r0, r3
 8000e12:	f003 f9a3 	bl	800415c <HAL_RCC_ClockConfig>
 8000e16:	1e03      	subs	r3, r0, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000e1a:	f001 f8bf 	bl	8001f9c <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f003 fca0 	bl	8004764 <HAL_RCCEx_EnableLSCO>
}
 8000e24:	46c0      	nop			@ (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b013      	add	sp, #76	@ 0x4c
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	40021000 	.word	0x40021000

08000e30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e36:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea8 <MX_I2C1_Init+0x78>)
 8000e38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000eac <MX_I2C1_Init+0x7c>)
 8000e3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e40:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e46:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e52:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e58:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f001 ffb9 	bl	8002de4 <HAL_I2C_Init>
 8000e72:	1e03      	subs	r3, r0, #0
 8000e74:	d001      	beq.n	8000e7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e76:	f001 f891 	bl	8001f9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f002 fd5c 	bl	800393c <HAL_I2CEx_ConfigAnalogFilter>
 8000e84:	1e03      	subs	r3, r0, #0
 8000e86:	d001      	beq.n	8000e8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e88:	f001 f888 	bl	8001f9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <MX_I2C1_Init+0x74>)
 8000e8e:	2100      	movs	r1, #0
 8000e90:	0018      	movs	r0, r3
 8000e92:	f002 fd9f 	bl	80039d4 <HAL_I2CEx_ConfigDigitalFilter>
 8000e96:	1e03      	subs	r3, r0, #0
 8000e98:	d001      	beq.n	8000e9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e9a:	f001 f87f 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200000c8 	.word	0x200000c8
 8000ea8:	40005400 	.word	0x40005400
 8000eac:	00602173 	.word	0x00602173

08000eb0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	@ 0x30
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

//  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 8000eb6:	232c      	movs	r3, #44	@ 0x2c
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	2328      	movs	r3, #40	@ 0x28
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	f005 fcfa 	bl	80068c0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ecc:	4b3e      	ldr	r3, [pc, #248]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000ece:	4a3f      	ldr	r2, [pc, #252]	@ (8000fcc <MX_RTC_Init+0x11c>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000ed4:	2240      	movs	r2, #64	@ 0x40
 8000ed6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000ed8:	4b3b      	ldr	r3, [pc, #236]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000eda:	227f      	movs	r2, #127	@ 0x7f
 8000edc:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000ede:	4b3a      	ldr	r3, [pc, #232]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000ee0:	22ff      	movs	r2, #255	@ 0xff
 8000ee2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ee4:	4b38      	ldr	r3, [pc, #224]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000eea:	4b37      	ldr	r3, [pc, #220]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ef0:	4b35      	ldr	r3, [pc, #212]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ef6:	4b34      	ldr	r3, [pc, #208]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000ef8:	2280      	movs	r2, #128	@ 0x80
 8000efa:	05d2      	lsls	r2, r2, #23
 8000efc:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000efe:	4b32      	ldr	r3, [pc, #200]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f04:	4b30      	ldr	r3, [pc, #192]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000f06:	0018      	movs	r0, r3
 8000f08:	f003 fca4 	bl	8004854 <HAL_RTC_Init>
 8000f0c:	1e03      	subs	r3, r0, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 8000f10:	f001 f844 	bl	8001f9c <Error_Handler>
//  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
//  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
//  {
//    Error_Handler();
//  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f14:	212c      	movs	r1, #44	@ 0x2c
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	2201      	movs	r2, #1
 8000f20:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2201      	movs	r2, #1
 8000f26:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f2e:	1879      	adds	r1, r7, r1
 8000f30:	4b25      	ldr	r3, [pc, #148]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	0018      	movs	r0, r3
 8000f36:	f003 fe33 	bl	8004ba0 <HAL_RTC_SetDate>
 8000f3a:	1e03      	subs	r3, r0, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000f3e:	f001 f82d 	bl	8001f9c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	4a18      	ldr	r2, [pc, #96]	@ (8000fd0 <MX_RTC_Init+0x120>)
 8000f70:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2220      	movs	r2, #32
 8000f82:	2101      	movs	r1, #1
 8000f84:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2280      	movs	r2, #128	@ 0x80
 8000f8a:	0052      	lsls	r2, r2, #1
 8000f8c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000f8e:	1d39      	adds	r1, r7, #4
 8000f90:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	0018      	movs	r0, r3
 8000f96:	f003 fee3 	bl	8004d60 <HAL_RTC_SetAlarm_IT>
 8000f9a:	1e03      	subs	r3, r0, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_RTC_Init+0xf2>
  {
    Error_Handler();
 8000f9e:	f000 fffd 	bl	8001f9c <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f004 fa72 	bl	8005490 <HAL_RTCEx_SetCalibrationOutPut>
 8000fac:	1e03      	subs	r3, r0, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_RTC_Init+0x104>
  {
    Error_Handler();
 8000fb0:	f000 fff4 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8000fb4:	4907      	ldr	r1, [pc, #28]	@ (8000fd4 <MX_RTC_Init+0x124>)
 8000fb6:	4b04      	ldr	r3, [pc, #16]	@ (8000fc8 <MX_RTC_Init+0x118>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f003 fd94 	bl	8004ae8 <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 8000fc0:	46c0      	nop			@ (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b00c      	add	sp, #48	@ 0x30
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2000011c 	.word	0x2000011c
 8000fcc:	40002800 	.word	0x40002800
 8000fd0:	80800080 	.word	0x80800080
 8000fd4:	20000098 	.word	0x20000098

08000fd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b098      	sub	sp, #96	@ 0x60
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fde:	2354      	movs	r3, #84	@ 0x54
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	230c      	movs	r3, #12
 8000fe6:	001a      	movs	r2, r3
 8000fe8:	2100      	movs	r1, #0
 8000fea:	f005 fc69 	bl	80068c0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fee:	2338      	movs	r3, #56	@ 0x38
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	231c      	movs	r3, #28
 8000ff6:	001a      	movs	r2, r3
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	f005 fc61 	bl	80068c0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	0018      	movs	r0, r3
 8001002:	2334      	movs	r3, #52	@ 0x34
 8001004:	001a      	movs	r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	f005 fc5a 	bl	80068c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800100c:	4b45      	ldr	r3, [pc, #276]	@ (8001124 <MX_TIM1_Init+0x14c>)
 800100e:	4a46      	ldr	r2, [pc, #280]	@ (8001128 <MX_TIM1_Init+0x150>)
 8001010:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 40000-1;
 8001012:	4b44      	ldr	r3, [pc, #272]	@ (8001124 <MX_TIM1_Init+0x14c>)
 8001014:	4a45      	ldr	r2, [pc, #276]	@ (800112c <MX_TIM1_Init+0x154>)
 8001016:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	4b42      	ldr	r3, [pc, #264]	@ (8001124 <MX_TIM1_Init+0x14c>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800101e:	4b41      	ldr	r3, [pc, #260]	@ (8001124 <MX_TIM1_Init+0x14c>)
 8001020:	2263      	movs	r2, #99	@ 0x63
 8001022:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001024:	4b3f      	ldr	r3, [pc, #252]	@ (8001124 <MX_TIM1_Init+0x14c>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800102a:	4b3e      	ldr	r3, [pc, #248]	@ (8001124 <MX_TIM1_Init+0x14c>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001030:	4b3c      	ldr	r3, [pc, #240]	@ (8001124 <MX_TIM1_Init+0x14c>)
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001036:	4b3b      	ldr	r3, [pc, #236]	@ (8001124 <MX_TIM1_Init+0x14c>)
 8001038:	0018      	movs	r0, r3
 800103a:	f004 fbfd 	bl	8005838 <HAL_TIM_PWM_Init>
 800103e:	1e03      	subs	r3, r0, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001042:	f000 ffab 	bl	8001f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001046:	2154      	movs	r1, #84	@ 0x54
 8001048:	187b      	adds	r3, r7, r1
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2200      	movs	r2, #0
 8001052:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800105a:	187a      	adds	r2, r7, r1
 800105c:	4b31      	ldr	r3, [pc, #196]	@ (8001124 <MX_TIM1_Init+0x14c>)
 800105e:	0011      	movs	r1, r2
 8001060:	0018      	movs	r0, r3
 8001062:	f005 fb11 	bl	8006688 <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	1e03      	subs	r3, r0, #0
 8001068:	d001      	beq.n	800106e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800106a:	f000 ff97 	bl	8001f9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800106e:	2138      	movs	r1, #56	@ 0x38
 8001070:	187b      	adds	r3, r7, r1
 8001072:	2260      	movs	r2, #96	@ 0x60
 8001074:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001076:	187b      	adds	r3, r7, r1
 8001078:	2200      	movs	r2, #0
 800107a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800107c:	187b      	adds	r3, r7, r1
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001082:	187b      	adds	r3, r7, r1
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001088:	187b      	adds	r3, r7, r1
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800108e:	187b      	adds	r3, r7, r1
 8001090:	2200      	movs	r2, #0
 8001092:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2200      	movs	r2, #0
 8001098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800109a:	1879      	adds	r1, r7, r1
 800109c:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <MX_TIM1_Init+0x14c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	0018      	movs	r0, r3
 80010a2:	f004 fe8d 	bl	8005dc0 <HAL_TIM_PWM_ConfigChannel>
 80010a6:	1e03      	subs	r3, r0, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80010aa:	f000 ff77 	bl	8001f9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2280      	movs	r2, #128	@ 0x80
 80010d0:	0192      	lsls	r2, r2, #6
 80010d2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2280      	movs	r2, #128	@ 0x80
 80010ea:	0492      	lsls	r2, r2, #18
 80010ec:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	2200      	movs	r2, #0
 80010f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001100:	1d3a      	adds	r2, r7, #4
 8001102:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <MX_TIM1_Init+0x14c>)
 8001104:	0011      	movs	r1, r2
 8001106:	0018      	movs	r0, r3
 8001108:	f005 fb26 	bl	8006758 <HAL_TIMEx_ConfigBreakDeadTime>
 800110c:	1e03      	subs	r3, r0, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001110:	f000 ff44 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001114:	4b03      	ldr	r3, [pc, #12]	@ (8001124 <MX_TIM1_Init+0x14c>)
 8001116:	0018      	movs	r0, r3
 8001118:	f001 fa22 	bl	8002560 <HAL_TIM_MspPostInit>

}
 800111c:	46c0      	nop			@ (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b018      	add	sp, #96	@ 0x60
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000148 	.word	0x20000148
 8001128:	40012c00 	.word	0x40012c00
 800112c:	00009c3f 	.word	0x00009c3f

08001130 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	@ 0x28
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001136:	231c      	movs	r3, #28
 8001138:	18fb      	adds	r3, r7, r3
 800113a:	0018      	movs	r0, r3
 800113c:	230c      	movs	r3, #12
 800113e:	001a      	movs	r2, r3
 8001140:	2100      	movs	r1, #0
 8001142:	f005 fbbd 	bl	80068c0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001146:	003b      	movs	r3, r7
 8001148:	0018      	movs	r0, r3
 800114a:	231c      	movs	r3, #28
 800114c:	001a      	movs	r2, r3
 800114e:	2100      	movs	r1, #0
 8001150:	f005 fbb6 	bl	80068c0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001154:	4b24      	ldr	r3, [pc, #144]	@ (80011e8 <MX_TIM2_Init+0xb8>)
 8001156:	2280      	movs	r2, #128	@ 0x80
 8001158:	05d2      	lsls	r2, r2, #23
 800115a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 800115c:	4b22      	ldr	r3, [pc, #136]	@ (80011e8 <MX_TIM2_Init+0xb8>)
 800115e:	4a23      	ldr	r2, [pc, #140]	@ (80011ec <MX_TIM2_Init+0xbc>)
 8001160:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001162:	4b21      	ldr	r3, [pc, #132]	@ (80011e8 <MX_TIM2_Init+0xb8>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001168:	4b1f      	ldr	r3, [pc, #124]	@ (80011e8 <MX_TIM2_Init+0xb8>)
 800116a:	2263      	movs	r2, #99	@ 0x63
 800116c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116e:	4b1e      	ldr	r3, [pc, #120]	@ (80011e8 <MX_TIM2_Init+0xb8>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001174:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <MX_TIM2_Init+0xb8>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800117a:	4b1b      	ldr	r3, [pc, #108]	@ (80011e8 <MX_TIM2_Init+0xb8>)
 800117c:	0018      	movs	r0, r3
 800117e:	f004 fb5b 	bl	8005838 <HAL_TIM_PWM_Init>
 8001182:	1e03      	subs	r3, r0, #0
 8001184:	d001      	beq.n	800118a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001186:	f000 ff09 	bl	8001f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118a:	211c      	movs	r1, #28
 800118c:	187b      	adds	r3, r7, r1
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001192:	187b      	adds	r3, r7, r1
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001198:	187a      	adds	r2, r7, r1
 800119a:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <MX_TIM2_Init+0xb8>)
 800119c:	0011      	movs	r1, r2
 800119e:	0018      	movs	r0, r3
 80011a0:	f005 fa72 	bl	8006688 <HAL_TIMEx_MasterConfigSynchronization>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80011a8:	f000 fef8 	bl	8001f9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ac:	003b      	movs	r3, r7
 80011ae:	2260      	movs	r2, #96	@ 0x60
 80011b0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80011b2:	003b      	movs	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b8:	003b      	movs	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011be:	003b      	movs	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011c4:	0039      	movs	r1, r7
 80011c6:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <MX_TIM2_Init+0xb8>)
 80011c8:	2208      	movs	r2, #8
 80011ca:	0018      	movs	r0, r3
 80011cc:	f004 fdf8 	bl	8005dc0 <HAL_TIM_PWM_ConfigChannel>
 80011d0:	1e03      	subs	r3, r0, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80011d4:	f000 fee2 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011d8:	4b03      	ldr	r3, [pc, #12]	@ (80011e8 <MX_TIM2_Init+0xb8>)
 80011da:	0018      	movs	r0, r3
 80011dc:	f001 f9c0 	bl	8002560 <HAL_TIM_MspPostInit>

}
 80011e0:	46c0      	nop			@ (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b00a      	add	sp, #40	@ 0x28
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000194 	.word	0x20000194
 80011ec:	0000031f 	.word	0x0000031f

080011f0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80011f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_TIM14_Init+0x40>)
 80011f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001234 <MX_TIM14_Init+0x44>)
 80011f8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 80011fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001230 <MX_TIM14_Init+0x40>)
 80011fc:	22f4      	movs	r2, #244	@ 0xf4
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <MX_TIM14_Init+0x40>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001208:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <MX_TIM14_Init+0x40>)
 800120a:	4a0b      	ldr	r2, [pc, #44]	@ (8001238 <MX_TIM14_Init+0x48>)
 800120c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <MX_TIM14_Init+0x40>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <MX_TIM14_Init+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800121a:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <MX_TIM14_Init+0x40>)
 800121c:	0018      	movs	r0, r3
 800121e:	f004 f9bf 	bl	80055a0 <HAL_TIM_Base_Init>
 8001222:	1e03      	subs	r3, r0, #0
 8001224:	d001      	beq.n	800122a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001226:	f000 feb9 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200001e0 	.word	0x200001e0
 8001234:	40002000 	.word	0x40002000
 8001238:	0000ffff 	.word	0x0000ffff

0800123c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001240:	4b16      	ldr	r3, [pc, #88]	@ (800129c <MX_TIM16_Init+0x60>)
 8001242:	4a17      	ldr	r2, [pc, #92]	@ (80012a0 <MX_TIM16_Init+0x64>)
 8001244:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = (58595 / 10) - 1;
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <MX_TIM16_Init+0x60>)
 8001248:	4a16      	ldr	r2, [pc, #88]	@ (80012a4 <MX_TIM16_Init+0x68>)
 800124a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b13      	ldr	r3, [pc, #76]	@ (800129c <MX_TIM16_Init+0x60>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001252:	4b12      	ldr	r3, [pc, #72]	@ (800129c <MX_TIM16_Init+0x60>)
 8001254:	4a14      	ldr	r2, [pc, #80]	@ (80012a8 <MX_TIM16_Init+0x6c>)
 8001256:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001258:	4b10      	ldr	r3, [pc, #64]	@ (800129c <MX_TIM16_Init+0x60>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 10;
 800125e:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <MX_TIM16_Init+0x60>)
 8001260:	220a      	movs	r2, #10
 8001262:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001264:	4b0d      	ldr	r3, [pc, #52]	@ (800129c <MX_TIM16_Init+0x60>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800126a:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <MX_TIM16_Init+0x60>)
 800126c:	0018      	movs	r0, r3
 800126e:	f004 f997 	bl	80055a0 <HAL_TIM_Base_Init>
 8001272:	1e03      	subs	r3, r0, #0
 8001274:	d001      	beq.n	800127a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001276:	f000 fe91 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  // Decrease interrupt priority
  HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2101      	movs	r1, #1
 800127e:	2015      	movs	r0, #21
 8001280:	f001 fb90 	bl	80029a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001284:	2015      	movs	r0, #21
 8001286:	f001 fba2 	bl	80029ce <HAL_NVIC_EnableIRQ>

  // Clear SR interrupts
  __HAL_TIM_CLEAR_IT(timerSnooze, TIM_IT_UPDATE);
 800128a:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <MX_TIM16_Init+0x70>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2202      	movs	r2, #2
 8001292:	4252      	negs	r2, r2
 8001294:	611a      	str	r2, [r3, #16]
//	timerSnooze->Instance->RCR |= timerSnooze_RCR;


  /* USER CODE END TIM16_Init 2 */

}
 8001296:	46c0      	nop			@ (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2000022c 	.word	0x2000022c
 80012a0:	40014400 	.word	0x40014400
 80012a4:	000016e2 	.word	0x000016e2
 80012a8:	0000ffff 	.word	0x0000ffff
 80012ac:	20000048 	.word	0x20000048

080012b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b08b      	sub	sp, #44	@ 0x2c
 80012b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	2414      	movs	r4, #20
 80012b8:	193b      	adds	r3, r7, r4
 80012ba:	0018      	movs	r0, r3
 80012bc:	2314      	movs	r3, #20
 80012be:	001a      	movs	r2, r3
 80012c0:	2100      	movs	r1, #0
 80012c2:	f005 fafd 	bl	80068c0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	4b66      	ldr	r3, [pc, #408]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 80012c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012ca:	4b65      	ldr	r3, [pc, #404]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 80012cc:	2104      	movs	r1, #4
 80012ce:	430a      	orrs	r2, r1
 80012d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012d2:	4b63      	ldr	r3, [pc, #396]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 80012d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012d6:	2204      	movs	r2, #4
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	4b60      	ldr	r3, [pc, #384]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 80012e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 80012e4:	2101      	movs	r1, #1
 80012e6:	430a      	orrs	r2, r1
 80012e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80012ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 80012ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ee:	2201      	movs	r2, #1
 80012f0:	4013      	ands	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 80012f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012fa:	4b59      	ldr	r3, [pc, #356]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 80012fc:	2108      	movs	r1, #8
 80012fe:	430a      	orrs	r2, r1
 8001300:	635a      	str	r2, [r3, #52]	@ 0x34
 8001302:	4b57      	ldr	r3, [pc, #348]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 8001304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001306:	2208      	movs	r2, #8
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	4b54      	ldr	r3, [pc, #336]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 8001310:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001312:	4b53      	ldr	r3, [pc, #332]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 8001314:	2102      	movs	r1, #2
 8001316:	430a      	orrs	r2, r1
 8001318:	635a      	str	r2, [r3, #52]	@ 0x34
 800131a:	4b51      	ldr	r3, [pc, #324]	@ (8001460 <MX_GPIO_Init+0x1b0>)
 800131c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800131e:	2202      	movs	r2, #2
 8001320:	4013      	ands	r3, r2
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin
 8001326:	494f      	ldr	r1, [pc, #316]	@ (8001464 <MX_GPIO_Init+0x1b4>)
 8001328:	23a0      	movs	r3, #160	@ 0xa0
 800132a:	05db      	lsls	r3, r3, #23
 800132c:	2200      	movs	r2, #0
 800132e:	0018      	movs	r0, r3
 8001330:	f001 fceb 	bl	8002d0a <HAL_GPIO_WritePin>
                          |ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8001334:	4b4c      	ldr	r3, [pc, #304]	@ (8001468 <MX_GPIO_Init+0x1b8>)
 8001336:	2200      	movs	r2, #0
 8001338:	2180      	movs	r1, #128	@ 0x80
 800133a:	0018      	movs	r0, r3
 800133c:	f001 fce5 	bl	8002d0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_RST_GPIO_Port, CTOUCH_RST_Pin, GPIO_PIN_RESET);
 8001340:	2380      	movs	r3, #128	@ 0x80
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4849      	ldr	r0, [pc, #292]	@ (800146c <MX_GPIO_Init+0x1bc>)
 8001346:	2200      	movs	r2, #0
 8001348:	0019      	movs	r1, r3
 800134a:	f001 fcde 	bl	8002d0a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin SHIFT_MCLR_Pin
                           ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin
 800134e:	193b      	adds	r3, r7, r4
 8001350:	4a44      	ldr	r2, [pc, #272]	@ (8001464 <MX_GPIO_Init+0x1b4>)
 8001352:	601a      	str	r2, [r3, #0]
                          |ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	193b      	adds	r3, r7, r4
 8001356:	2201      	movs	r2, #1
 8001358:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	193b      	adds	r3, r7, r4
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	193b      	adds	r3, r7, r4
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	193a      	adds	r2, r7, r4
 8001368:	23a0      	movs	r3, #160	@ 0xa0
 800136a:	05db      	lsls	r3, r3, #23
 800136c:	0011      	movs	r1, r2
 800136e:	0018      	movs	r0, r3
 8001370:	f001 fb4a 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001374:	193b      	adds	r3, r7, r4
 8001376:	2204      	movs	r2, #4
 8001378:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137a:	193b      	adds	r3, r7, r4
 800137c:	2203      	movs	r2, #3
 800137e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	193b      	adds	r3, r7, r4
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	193a      	adds	r2, r7, r4
 8001388:	23a0      	movs	r3, #160	@ 0xa0
 800138a:	05db      	lsls	r3, r3, #23
 800138c:	0011      	movs	r1, r2
 800138e:	0018      	movs	r0, r3
 8001390:	f001 fb3a 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8001394:	193b      	adds	r3, r7, r4
 8001396:	2280      	movs	r2, #128	@ 0x80
 8001398:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	193b      	adds	r3, r7, r4
 800139c:	2201      	movs	r2, #1
 800139e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	193b      	adds	r3, r7, r4
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	193b      	adds	r3, r7, r4
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 80013ac:	193b      	adds	r3, r7, r4
 80013ae:	4a2e      	ldr	r2, [pc, #184]	@ (8001468 <MX_GPIO_Init+0x1b8>)
 80013b0:	0019      	movs	r1, r3
 80013b2:	0010      	movs	r0, r2
 80013b4:	f001 fb28 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 80013b8:	193b      	adds	r3, r7, r4
 80013ba:	2280      	movs	r2, #128	@ 0x80
 80013bc:	0212      	lsls	r2, r2, #8
 80013be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013c0:	193b      	adds	r3, r7, r4
 80013c2:	2284      	movs	r2, #132	@ 0x84
 80013c4:	0392      	lsls	r2, r2, #14
 80013c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c8:	193b      	adds	r3, r7, r4
 80013ca:	2201      	movs	r2, #1
 80013cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80013ce:	193a      	adds	r2, r7, r4
 80013d0:	23a0      	movs	r3, #160	@ 0xa0
 80013d2:	05db      	lsls	r3, r3, #23
 80013d4:	0011      	movs	r1, r2
 80013d6:	0018      	movs	r0, r3
 80013d8:	f001 fb16 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 80013dc:	0021      	movs	r1, r4
 80013de:	187b      	adds	r3, r7, r1
 80013e0:	220f      	movs	r2, #15
 80013e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	2284      	movs	r2, #132	@ 0x84
 80013e8:	0392      	lsls	r2, r2, #14
 80013ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	2201      	movs	r2, #1
 80013f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f2:	000c      	movs	r4, r1
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001470 <MX_GPIO_Init+0x1c0>)
 80013f8:	0019      	movs	r1, r3
 80013fa:	0010      	movs	r0, r2
 80013fc:	f001 fb04 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_RST_Pin */
  GPIO_InitStruct.Pin = CTOUCH_RST_Pin;
 8001400:	0021      	movs	r1, r4
 8001402:	187b      	adds	r3, r7, r1
 8001404:	2280      	movs	r2, #128	@ 0x80
 8001406:	0052      	lsls	r2, r2, #1
 8001408:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140a:	187b      	adds	r3, r7, r1
 800140c:	2201      	movs	r2, #1
 800140e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	187b      	adds	r3, r7, r1
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	187b      	adds	r3, r7, r1
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 800141c:	187b      	adds	r3, r7, r1
 800141e:	4a13      	ldr	r2, [pc, #76]	@ (800146c <MX_GPIO_Init+0x1bc>)
 8001420:	0019      	movs	r1, r3
 8001422:	0010      	movs	r0, r2
 8001424:	f001 faf0 	bl	8002a08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2100      	movs	r1, #0
 800142c:	2005      	movs	r0, #5
 800142e:	f001 fab9 	bl	80029a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001432:	2005      	movs	r0, #5
 8001434:	f001 facb 	bl	80029ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2100      	movs	r1, #0
 800143c:	2006      	movs	r0, #6
 800143e:	f001 fab1 	bl	80029a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001442:	2006      	movs	r0, #6
 8001444:	f001 fac3 	bl	80029ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2101      	movs	r1, #1
 800144c:	2007      	movs	r0, #7
 800144e:	f001 faa9 	bl	80029a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001452:	2007      	movs	r0, #7
 8001454:	f001 fabb 	bl	80029ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001458:	46c0      	nop			@ (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	b00b      	add	sp, #44	@ 0x2c
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	40021000 	.word	0x40021000
 8001464:	00001e01 	.word	0x00001e01
 8001468:	50000800 	.word	0x50000800
 800146c:	50000400 	.word	0x50000400
 8001470:	50000c00 	.word	0x50000c00

08001474 <updateAndDisplayTime>:
/* USER CODE BEGIN 4 */

/*
 * Pulls updated time from RTC and send new time to user display
 */
HAL_StatusTypeDef updateAndDisplayTime(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8001480:	4a07      	ldr	r2, [pc, #28]	@ (80014a0 <updateAndDisplayTime+0x2c>)
 8001482:	4908      	ldr	r1, [pc, #32]	@ (80014a4 <updateAndDisplayTime+0x30>)
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <updateAndDisplayTime+0x34>)
 8001486:	0018      	movs	r0, r3
 8001488:	f7ff fae2 	bl	8000a50 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 800148c:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <updateAndDisplayTime+0x30>)
 800148e:	0018      	movs	r0, r3
 8001490:	f000 fe0c 	bl	80020ac <sevSeg_updateDigits>

	return halRet;
 8001494:	1dfb      	adds	r3, r7, #7
 8001496:	781b      	ldrb	r3, [r3, #0]

}
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	b002      	add	sp, #8
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200000ac 	.word	0x200000ac
 80014a4:	20000098 	.word	0x20000098
 80014a8:	2000011c 	.word	0x2000011c

080014ac <updateAndDisplayAlarm>:
/*
 * Sends current user alarm time to user display
 * This doesn't pull from the RTC because the RTC alarm is not being used for that
 */

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80014b2:	1dfb      	adds	r3, r7, #7
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 80014b8:	4b04      	ldr	r3, [pc, #16]	@ (80014cc <updateAndDisplayAlarm+0x20>)
 80014ba:	0018      	movs	r0, r3
 80014bc:	f000 fdf6 	bl	80020ac <sevSeg_updateDigits>

	return halRet;
 80014c0:	1dfb      	adds	r3, r7, #7
 80014c2:	781b      	ldrb	r3, [r3, #0]

}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b002      	add	sp, #8
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200000b0 	.word	0x200000b0

080014d0 <HAL_RTC_AlarmAEventCallback>:
 * Occurs every minute increment
 *
 * Pulls alarm time from RTC, increments and sets new alarm time, and updates time.
 * Sets off user alarm if the alarm is enabled.
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b08d      	sub	sp, #52	@ 0x34
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

	  RTC_AlarmTypeDef sAlarm = {0};
 80014d8:	2408      	movs	r4, #8
 80014da:	193b      	adds	r3, r7, r4
 80014dc:	0018      	movs	r0, r3
 80014de:	2328      	movs	r3, #40	@ 0x28
 80014e0:	001a      	movs	r2, r3
 80014e2:	2100      	movs	r1, #0
 80014e4:	f005 f9ec 	bl	80068c0 <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 80014e8:	2380      	movs	r3, #128	@ 0x80
 80014ea:	005a      	lsls	r2, r3, #1
 80014ec:	1939      	adds	r1, r7, r4
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	2300      	movs	r3, #0
 80014f2:	f003 fd75 	bl	8004fe0 <HAL_RTC_GetAlarm>

	  getRTCTime(hrtc, &currTime, &currDate);
 80014f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001574 <HAL_RTC_AlarmAEventCallback+0xa4>)
 80014f8:	491f      	ldr	r1, [pc, #124]	@ (8001578 <HAL_RTC_AlarmAEventCallback+0xa8>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7ff faa7 	bl	8000a50 <getRTCTime>

	  if(currTime.Minutes > 58) {
 8001502:	4b1d      	ldr	r3, [pc, #116]	@ (8001578 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001504:	785b      	ldrb	r3, [r3, #1]
 8001506:	2b3a      	cmp	r3, #58	@ 0x3a
 8001508:	d903      	bls.n	8001512 <HAL_RTC_AlarmAEventCallback+0x42>
		sAlarm.AlarmTime.Minutes = 0;
 800150a:	193b      	adds	r3, r7, r4
 800150c:	2200      	movs	r2, #0
 800150e:	705a      	strb	r2, [r3, #1]
 8001510:	e008      	b.n	8001524 <HAL_RTC_AlarmAEventCallback+0x54>
	  } else {
		sAlarm.AlarmTime.Minutes = currTime.Minutes + 1;
 8001512:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001514:	785b      	ldrb	r3, [r3, #1]
 8001516:	3301      	adds	r3, #1
 8001518:	b2da      	uxtb	r2, r3
 800151a:	2308      	movs	r3, #8
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001520:	e000      	b.n	8001524 <HAL_RTC_AlarmAEventCallback+0x54>

			__NOP();
 8001522:	46c0      	nop			@ (mov r8, r8)
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001524:	2308      	movs	r3, #8
 8001526:	18f9      	adds	r1, r7, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	0018      	movs	r0, r3
 800152e:	f003 fc17 	bl	8004d60 <HAL_RTC_SetAlarm_IT>
 8001532:	1e03      	subs	r3, r0, #0
 8001534:	d1f5      	bne.n	8001522 <HAL_RTC_AlarmAEventCallback+0x52>

		}

	  updateAndDisplayTime();
 8001536:	f7ff ff9d 	bl	8001474 <updateAndDisplayTime>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <HAL_RTC_AlarmAEventCallback+0xac>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d013      	beq.n	800156a <HAL_RTC_AlarmAEventCallback+0x9a>
 8001542:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8001544:	781a      	ldrb	r2, [r3, #0]
 8001546:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d10d      	bne.n	800156a <HAL_RTC_AlarmAEventCallback+0x9a>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 800154e:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8001550:	785a      	ldrb	r2, [r3, #1]
 8001552:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001554:	785b      	ldrb	r3, [r3, #1]
 8001556:	429a      	cmp	r2, r3
 8001558:	d107      	bne.n	800156a <HAL_RTC_AlarmAEventCallback+0x9a>
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <HAL_RTC_AlarmAEventCallback+0xb0>)
 800155c:	78da      	ldrb	r2, [r3, #3]
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001560:	78db      	ldrb	r3, [r3, #3]
 8001562:	429a      	cmp	r2, r3
 8001564:	d101      	bne.n	800156a <HAL_RTC_AlarmAEventCallback+0x9a>
		  userAlarmBeep();
 8001566:	f000 f80d 	bl	8001584 <userAlarmBeep>
	  }


}
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	b00d      	add	sp, #52	@ 0x34
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	46c0      	nop			@ (mov r8, r8)
 8001574:	200000ac 	.word	0x200000ac
 8001578:	20000098 	.word	0x20000098
 800157c:	20000091 	.word	0x20000091
 8001580:	200000b0 	.word	0x200000b0

08001584 <userAlarmBeep>:
 * Functionality depends on whether or not this is the first or second snooze.
 * 		First Snooze: 10-minute timer is started and alarm
 * 		              is beeped again at the end of this 10 minutes.
 * 		Second Snooze: No timer is started and silencing the alarm silences it for good.
 */
void userAlarmBeep() {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 800158a:	4ba2      	ldr	r3, [pc, #648]	@ (8001814 <userAlarmBeep+0x290>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d018      	beq.n	80015c4 <userAlarmBeep+0x40>

			// Stop the timer and
			HAL_TIM_Base_Stop_IT(timerSnooze);
 8001592:	4ba1      	ldr	r3, [pc, #644]	@ (8001818 <userAlarmBeep+0x294>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	0018      	movs	r0, r3
 8001598:	f004 f920 	bl	80057dc <HAL_TIM_Base_Stop_IT>

			// Reset count to 0
			// only bits 0 - 15 should be changed.
			timerSnooze->Instance->CNT &= 0xFFFF0000;
 800159c:	4b9e      	ldr	r3, [pc, #632]	@ (8001818 <userAlarmBeep+0x294>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015a4:	4b9c      	ldr	r3, [pc, #624]	@ (8001818 <userAlarmBeep+0x294>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	0c12      	lsrs	r2, r2, #16
 80015ac:	0412      	lsls	r2, r2, #16
 80015ae:	625a      	str	r2, [r3, #36]	@ 0x24

			// Reset interrupt status register
			timerSnooze->Instance->SR &= 0xFFFC;
 80015b0:	4b99      	ldr	r3, [pc, #612]	@ (8001818 <userAlarmBeep+0x294>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	4b97      	ldr	r3, [pc, #604]	@ (8001818 <userAlarmBeep+0x294>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4997      	ldr	r1, [pc, #604]	@ (800181c <userAlarmBeep+0x298>)
 80015c0:	400a      	ands	r2, r1
 80015c2:	611a      	str	r2, [r3, #16]
//			timerSnooze->Instance->RCR &= 0xFF00;
//			timerSnooze->Instance->RCR |= timerSnooze_RCR;

		}

	HAL_TIM_Base_Stop(timerDelay);
 80015c4:	4b96      	ldr	r3, [pc, #600]	@ (8001820 <userAlarmBeep+0x29c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	0018      	movs	r0, r3
 80015ca:	f004 f88d 	bl	80056e8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 80015ce:	4b94      	ldr	r3, [pc, #592]	@ (8001820 <userAlarmBeep+0x29c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	0018      	movs	r0, r3
 80015d4:	f004 f83c 	bl	8005650 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80015d8:	4b91      	ldr	r3, [pc, #580]	@ (8001820 <userAlarmBeep+0x29c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e0:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 80015e2:	1cfb      	adds	r3, r7, #3
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine whether to toggle high or low brightness
	 */
	uint8_t intenSet;
	if(displayToggle == 0) { 				// If the user has full brightness enabled, toggle full btightness
 80015e8:	4b8e      	ldr	r3, [pc, #568]	@ (8001824 <userAlarmBeep+0x2a0>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d103      	bne.n	80015f8 <userAlarmBeep+0x74>
		intenSet = 2;
 80015f0:	1cbb      	adds	r3, r7, #2
 80015f2:	2202      	movs	r2, #2
 80015f4:	701a      	strb	r2, [r3, #0]
 80015f6:	e002      	b.n	80015fe <userAlarmBeep+0x7a>
	}
	else {									// Else, toggle low brightness
		intenSet = 1;
 80015f8:	1cbb      	adds	r3, r7, #2
 80015fa:	2201      	movs	r2, #1
 80015fc:	701a      	strb	r2, [r3, #0]
	}

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 80015fe:	f7ff ff39 	bl	8001474 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 8001602:	4b87      	ldr	r3, [pc, #540]	@ (8001820 <userAlarmBeep+0x29c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	4a86      	ldr	r2, [pc, #536]	@ (8001828 <userAlarmBeep+0x2a4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d96c      	bls.n	80016ee <userAlarmBeep+0x16a>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink * intenSet]);	// Toggle on/off
 8001614:	1cfb      	adds	r3, r7, #3
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	1cba      	adds	r2, r7, #2
 800161a:	7812      	ldrb	r2, [r2, #0]
 800161c:	4353      	muls	r3, r2
 800161e:	4a83      	ldr	r2, [pc, #524]	@ (800182c <userAlarmBeep+0x2a8>)
 8001620:	5cd3      	ldrb	r3, [r2, r3]
 8001622:	0018      	movs	r0, r3
 8001624:	f000 fdf4 	bl	8002210 <sevSeg_setIntensity>

			if(!displayBlink) {
 8001628:	1cfb      	adds	r3, r7, #3
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2201      	movs	r2, #1
 800162e:	4053      	eors	r3, r2
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d03f      	beq.n	80016b6 <userAlarmBeep+0x132>
				__HAL_TIM_SET_COMPARE(timerBuzzer, tim_BUZZER_CHANNEL, 50);
 8001636:	4b7e      	ldr	r3, [pc, #504]	@ (8001830 <userAlarmBeep+0x2ac>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d105      	bne.n	800164a <userAlarmBeep+0xc6>
 800163e:	4b7d      	ldr	r3, [pc, #500]	@ (8001834 <userAlarmBeep+0x2b0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2232      	movs	r2, #50	@ 0x32
 8001646:	635a      	str	r2, [r3, #52]	@ 0x34
 8001648:	e02c      	b.n	80016a4 <userAlarmBeep+0x120>
 800164a:	4b79      	ldr	r3, [pc, #484]	@ (8001830 <userAlarmBeep+0x2ac>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b04      	cmp	r3, #4
 8001650:	d105      	bne.n	800165e <userAlarmBeep+0xda>
 8001652:	4b78      	ldr	r3, [pc, #480]	@ (8001834 <userAlarmBeep+0x2b0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2332      	movs	r3, #50	@ 0x32
 800165a:	6393      	str	r3, [r2, #56]	@ 0x38
 800165c:	e022      	b.n	80016a4 <userAlarmBeep+0x120>
 800165e:	4b74      	ldr	r3, [pc, #464]	@ (8001830 <userAlarmBeep+0x2ac>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b08      	cmp	r3, #8
 8001664:	d105      	bne.n	8001672 <userAlarmBeep+0xee>
 8001666:	4b73      	ldr	r3, [pc, #460]	@ (8001834 <userAlarmBeep+0x2b0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2332      	movs	r3, #50	@ 0x32
 800166e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001670:	e018      	b.n	80016a4 <userAlarmBeep+0x120>
 8001672:	4b6f      	ldr	r3, [pc, #444]	@ (8001830 <userAlarmBeep+0x2ac>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b0c      	cmp	r3, #12
 8001678:	d105      	bne.n	8001686 <userAlarmBeep+0x102>
 800167a:	4b6e      	ldr	r3, [pc, #440]	@ (8001834 <userAlarmBeep+0x2b0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2332      	movs	r3, #50	@ 0x32
 8001682:	6413      	str	r3, [r2, #64]	@ 0x40
 8001684:	e00e      	b.n	80016a4 <userAlarmBeep+0x120>
 8001686:	4b6a      	ldr	r3, [pc, #424]	@ (8001830 <userAlarmBeep+0x2ac>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b10      	cmp	r3, #16
 800168c:	d105      	bne.n	800169a <userAlarmBeep+0x116>
 800168e:	4b69      	ldr	r3, [pc, #420]	@ (8001834 <userAlarmBeep+0x2b0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2332      	movs	r3, #50	@ 0x32
 8001696:	6593      	str	r3, [r2, #88]	@ 0x58
 8001698:	e004      	b.n	80016a4 <userAlarmBeep+0x120>
 800169a:	4b66      	ldr	r3, [pc, #408]	@ (8001834 <userAlarmBeep+0x2b0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	2332      	movs	r3, #50	@ 0x32
 80016a2:	65d3      	str	r3, [r2, #92]	@ 0x5c
				HAL_TIM_PWM_Start(timerBuzzer, tim_BUZZER_CHANNEL);
 80016a4:	4b63      	ldr	r3, [pc, #396]	@ (8001834 <userAlarmBeep+0x2b0>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b61      	ldr	r3, [pc, #388]	@ (8001830 <userAlarmBeep+0x2ac>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	0019      	movs	r1, r3
 80016ae:	0010      	movs	r0, r2
 80016b0:	f004 f91a 	bl	80058e8 <HAL_TIM_PWM_Start>
 80016b4:	e007      	b.n	80016c6 <userAlarmBeep+0x142>
			}
			else {
				HAL_TIM_PWM_Stop(timerBuzzer, tim_BUZZER_CHANNEL);
 80016b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001834 <userAlarmBeep+0x2b0>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001830 <userAlarmBeep+0x2ac>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	0019      	movs	r1, r3
 80016c0:	0010      	movs	r0, r2
 80016c2:	f004 f9ef 	bl	8005aa4 <HAL_TIM_PWM_Stop>
			}



			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80016c6:	4b56      	ldr	r3, [pc, #344]	@ (8001820 <userAlarmBeep+0x29c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ce:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80016d0:	1cfb      	adds	r3, r7, #3
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	1e5a      	subs	r2, r3, #1
 80016d6:	4193      	sbcs	r3, r2
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2201      	movs	r2, #1
 80016dc:	4053      	eors	r3, r2
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	001a      	movs	r2, r3
 80016e2:	1cfb      	adds	r3, r7, #3
 80016e4:	701a      	strb	r2, [r3, #0]
 80016e6:	781a      	ldrb	r2, [r3, #0]
 80016e8:	2101      	movs	r1, #1
 80016ea:	400a      	ands	r2, r1
 80016ec:	701a      	strb	r2, [r3, #0]

		}


		capTouch_readChannels(&capTouch);
 80016ee:	4b52      	ldr	r3, [pc, #328]	@ (8001838 <userAlarmBeep+0x2b4>)
 80016f0:	0018      	movs	r0, r3
 80016f2:	f7fe ff3f 	bl	8000574 <capTouch_readChannels>

	} while(capTouch.keyStat == 0x00 &&
 80016f6:	4b50      	ldr	r3, [pc, #320]	@ (8001838 <userAlarmBeep+0x2b4>)
 80016f8:	7c1b      	ldrb	r3, [r3, #16]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10f      	bne.n	800171e <userAlarmBeep+0x19a>
			(HAL_GPIO_ReadPin(alarmEnableButtonPort, alarmEnableButtonPin) != GPIO_PIN_RESET));
 80016fe:	4b4f      	ldr	r3, [pc, #316]	@ (800183c <userAlarmBeep+0x2b8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2204      	movs	r2, #4
 8001704:	0011      	movs	r1, r2
 8001706:	0018      	movs	r0, r3
 8001708:	f001 fae2 	bl	8002cd0 <HAL_GPIO_ReadPin>
 800170c:	0003      	movs	r3, r0
 800170e:	0019      	movs	r1, r3
 8001710:	1cbb      	adds	r3, r7, #2
 8001712:	1cba      	adds	r2, r7, #2
 8001714:	7812      	ldrb	r2, [r2, #0]
 8001716:	701a      	strb	r2, [r3, #0]
	} while(capTouch.keyStat == 0x00 &&
 8001718:	2900      	cmp	r1, #0
 800171a:	d000      	beq.n	800171e <userAlarmBeep+0x19a>
 800171c:	e76f      	b.n	80015fe <userAlarmBeep+0x7a>

	/*
	 * Stop blinking, turn off buzzer, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 800171e:	4b40      	ldr	r3, [pc, #256]	@ (8001820 <userAlarmBeep+0x29c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	0018      	movs	r0, r3
 8001724:	f003 ffe0 	bl	80056e8 <HAL_TIM_Base_Stop>

	HAL_TIM_PWM_Stop(timerBuzzer, tim_BUZZER_CHANNEL);
 8001728:	4b42      	ldr	r3, [pc, #264]	@ (8001834 <userAlarmBeep+0x2b0>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b40      	ldr	r3, [pc, #256]	@ (8001830 <userAlarmBeep+0x2ac>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	0019      	movs	r1, r3
 8001732:	0010      	movs	r0, r2
 8001734:	f004 f9b6 	bl	8005aa4 <HAL_TIM_PWM_Stop>

	updateAndDisplayTime();				// Update to current time and display
 8001738:	f7ff fe9c 	bl	8001474 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[intenSet]);	// Turn display back on
 800173c:	1cbb      	adds	r3, r7, #2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4a3a      	ldr	r2, [pc, #232]	@ (800182c <userAlarmBeep+0x2a8>)
 8001742:	5cd3      	ldrb	r3, [r2, r3]
 8001744:	0018      	movs	r0, r3
 8001746:	f000 fd63 	bl	8002210 <sevSeg_setIntensity>
	if(intenSet == 2) {
 800174a:	1cbb      	adds	r3, r7, #2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d103      	bne.n	800175a <userAlarmBeep+0x1d6>
		displayToggle = 0;
 8001752:	4b34      	ldr	r3, [pc, #208]	@ (8001824 <userAlarmBeep+0x2a0>)
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	e002      	b.n	8001760 <userAlarmBeep+0x1dc>
	}
	else {
		displayToggle = 2;
 800175a:	4b32      	ldr	r3, [pc, #200]	@ (8001824 <userAlarmBeep+0x2a0>)
 800175c:	2202      	movs	r2, #2
 800175e:	701a      	strb	r2, [r3, #0]
	}

	// If this is the first snooze,
	if(!secondSnooze) {
 8001760:	4b2c      	ldr	r3, [pc, #176]	@ (8001814 <userAlarmBeep+0x290>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2201      	movs	r2, #1
 8001766:	4053      	eors	r3, r2
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d047      	beq.n	80017fe <userAlarmBeep+0x27a>

		__HAL_TIM_SET_COMPARE(timerBuzzer, tim_BUZZER_CHANNEL, 0);
 800176e:	4b30      	ldr	r3, [pc, #192]	@ (8001830 <userAlarmBeep+0x2ac>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d105      	bne.n	8001782 <userAlarmBeep+0x1fe>
 8001776:	4b2f      	ldr	r3, [pc, #188]	@ (8001834 <userAlarmBeep+0x2b0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2200      	movs	r2, #0
 800177e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001780:	e02c      	b.n	80017dc <userAlarmBeep+0x258>
 8001782:	4b2b      	ldr	r3, [pc, #172]	@ (8001830 <userAlarmBeep+0x2ac>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b04      	cmp	r3, #4
 8001788:	d105      	bne.n	8001796 <userAlarmBeep+0x212>
 800178a:	4b2a      	ldr	r3, [pc, #168]	@ (8001834 <userAlarmBeep+0x2b0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2300      	movs	r3, #0
 8001792:	6393      	str	r3, [r2, #56]	@ 0x38
 8001794:	e022      	b.n	80017dc <userAlarmBeep+0x258>
 8001796:	4b26      	ldr	r3, [pc, #152]	@ (8001830 <userAlarmBeep+0x2ac>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b08      	cmp	r3, #8
 800179c:	d105      	bne.n	80017aa <userAlarmBeep+0x226>
 800179e:	4b25      	ldr	r3, [pc, #148]	@ (8001834 <userAlarmBeep+0x2b0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2300      	movs	r3, #0
 80017a6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80017a8:	e018      	b.n	80017dc <userAlarmBeep+0x258>
 80017aa:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <userAlarmBeep+0x2ac>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b0c      	cmp	r3, #12
 80017b0:	d105      	bne.n	80017be <userAlarmBeep+0x23a>
 80017b2:	4b20      	ldr	r3, [pc, #128]	@ (8001834 <userAlarmBeep+0x2b0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2300      	movs	r3, #0
 80017ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80017bc:	e00e      	b.n	80017dc <userAlarmBeep+0x258>
 80017be:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <userAlarmBeep+0x2ac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b10      	cmp	r3, #16
 80017c4:	d105      	bne.n	80017d2 <userAlarmBeep+0x24e>
 80017c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001834 <userAlarmBeep+0x2b0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	2300      	movs	r3, #0
 80017ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80017d0:	e004      	b.n	80017dc <userAlarmBeep+0x258>
 80017d2:	4b18      	ldr	r3, [pc, #96]	@ (8001834 <userAlarmBeep+0x2b0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2300      	movs	r3, #0
 80017da:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_TIM_PWM_Start(timerBuzzer, tim_BUZZER_CHANNEL);
 80017dc:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <userAlarmBeep+0x2b0>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <userAlarmBeep+0x2ac>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0019      	movs	r1, r3
 80017e6:	0010      	movs	r0, r2
 80017e8:	f004 f87e 	bl	80058e8 <HAL_TIM_PWM_Start>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 80017ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <userAlarmBeep+0x294>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	0018      	movs	r0, r3
 80017f2:	f003 ff9f 	bl	8005734 <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 80017f6:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <userAlarmBeep+0x290>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
		 */
		secondSnooze = false;

	}

}
 80017fc:	e005      	b.n	800180a <userAlarmBeep+0x286>
		snoozeCounter = 0;
 80017fe:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <userAlarmBeep+0x2bc>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
		secondSnooze = false;
 8001804:	4b03      	ldr	r3, [pc, #12]	@ (8001814 <userAlarmBeep+0x290>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
}
 800180a:	46c0      	nop			@ (mov r8, r8)
 800180c:	46bd      	mov	sp, r7
 800180e:	b002      	add	sp, #8
 8001810:	bd80      	pop	{r7, pc}
 8001812:	46c0      	nop			@ (mov r8, r8)
 8001814:	2000027a 	.word	0x2000027a
 8001818:	20000048 	.word	0x20000048
 800181c:	0000fffc 	.word	0x0000fffc
 8001820:	20000044 	.word	0x20000044
 8001824:	20000090 	.word	0x20000090
 8001828:	00007ffe 	.word	0x00007ffe
 800182c:	08006968 	.word	0x08006968
 8001830:	20000094 	.word	0x20000094
 8001834:	2000004c 	.word	0x2000004c
 8001838:	2000027c 	.word	0x2000027c
 800183c:	20000000 	.word	0x20000000
 8001840:	20000278 	.word	0x20000278

08001844 <HAL_GPIO_EXTI_Falling_Callback>:
 * General Falling-Edge EXTI Callback function
 *
 * Internal conditional determines which function to call
 * based on which button was pressed.
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	0002      	movs	r2, r0
 800184c:	1dbb      	adds	r3, r7, #6
 800184e:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8001850:	2208      	movs	r2, #8
 8001852:	1dbb      	adds	r3, r7, #6
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	4293      	cmp	r3, r2
 8001858:	d106      	bne.n	8001868 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 800185a:	230f      	movs	r3, #15
 800185c:	18fc      	adds	r4, r7, r3
 800185e:	f000 f85f 	bl	8001920 <displayButtonISR>
 8001862:	0003      	movs	r3, r0
 8001864:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8001866:	e031      	b.n	80018cc <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8001868:	2204      	movs	r2, #4
 800186a:	1dbb      	adds	r3, r7, #6
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	4293      	cmp	r3, r2
 8001870:	d106      	bne.n	8001880 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 8001872:	230f      	movs	r3, #15
 8001874:	18fc      	adds	r4, r7, r3
 8001876:	f000 f87b 	bl	8001970 <alarmEnableISR>
 800187a:	0003      	movs	r3, r0
 800187c:	7023      	strb	r3, [r4, #0]
}
 800187e:	e025      	b.n	80018cc <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8001880:	2380      	movs	r3, #128	@ 0x80
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	1dba      	adds	r2, r7, #6
 8001886:	8812      	ldrh	r2, [r2, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d106      	bne.n	800189a <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 800188c:	230f      	movs	r3, #15
 800188e:	18fc      	adds	r4, r7, r3
 8001890:	f000 f8ca 	bl	8001a28 <alarmSetISR>
 8001894:	0003      	movs	r3, r0
 8001896:	7023      	strb	r3, [r4, #0]
}
 8001898:	e018      	b.n	80018cc <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 800189a:	2201      	movs	r2, #1
 800189c:	1dbb      	adds	r3, r7, #6
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d106      	bne.n	80018b2 <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 80018a4:	230f      	movs	r3, #15
 80018a6:	18fc      	adds	r4, r7, r3
 80018a8:	f000 f9c0 	bl	8001c2c <hourSetISR>
 80018ac:	0003      	movs	r3, r0
 80018ae:	7023      	strb	r3, [r4, #0]
}
 80018b0:	e00c      	b.n	80018cc <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 80018b2:	2202      	movs	r2, #2
 80018b4:	1dbb      	adds	r3, r7, #6
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d106      	bne.n	80018ca <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 80018bc:	230f      	movs	r3, #15
 80018be:	18fc      	adds	r4, r7, r3
 80018c0:	f000 f9e0 	bl	8001c84 <minuteSetISR>
 80018c4:	0003      	movs	r3, r0
 80018c6:	7023      	strb	r3, [r4, #0]
}
 80018c8:	e000      	b.n	80018cc <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 80018ca:	46c0      	nop			@ (mov r8, r8)
}
 80018cc:	46c0      	nop			@ (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b005      	add	sp, #20
 80018d2:	bd90      	pop	{r4, r7, pc}

080018d4 <HAL_TIM_PeriodElapsedCallback>:
 * Used for second snooze functionality
 *
 * This is entered at the end of a 10-minute snooze, at
 * which point the timer kicks back an interrupt.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

	snoozeCounter++;
 80018dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001914 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	3301      	adds	r3, #1
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80018e6:	701a      	strb	r2, [r3, #0]

	if((htim == timerSnooze) && (secondSnooze == true) && (snoozeCounter == timerSnooze_RCR)) {
 80018e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d10b      	bne.n	800190a <HAL_TIM_PeriodElapsedCallback+0x36>
 80018f2:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d007      	beq.n	800190a <HAL_TIM_PeriodElapsedCallback+0x36>
 80018fa:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	001a      	movs	r2, r3
 8001900:	2364      	movs	r3, #100	@ 0x64
 8001902:	429a      	cmp	r2, r3
 8001904:	d101      	bne.n	800190a <HAL_TIM_PeriodElapsedCallback+0x36>

		userAlarmBeep();
 8001906:	f7ff fe3d 	bl	8001584 <userAlarmBeep>

	}

}
 800190a:	46c0      	nop			@ (mov r8, r8)
 800190c:	46bd      	mov	sp, r7
 800190e:	b002      	add	sp, #8
 8001910:	bd80      	pop	{r7, pc}
 8001912:	46c0      	nop			@ (mov r8, r8)
 8001914:	20000278 	.word	0x20000278
 8001918:	20000048 	.word	0x20000048
 800191c:	2000027a 	.word	0x2000027a

08001920 <displayButtonISR>:

/*
 * Toggles through user time display brightness settings
 */
HAL_StatusTypeDef displayButtonISR(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001926:	1dfb      	adds	r3, r7, #7
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 800192c:	f7ff fda2 	bl	8001474 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8001930:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <displayButtonISR+0x48>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	001a      	movs	r2, r3
 8001936:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <displayButtonISR+0x4c>)
 8001938:	5c9b      	ldrb	r3, [r3, r2]
 800193a:	0018      	movs	r0, r3
 800193c:	f000 fc68 	bl	8002210 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8001940:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <displayButtonISR+0x48>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d903      	bls.n	8001950 <displayButtonISR+0x30>
		displayToggle = 0;
 8001948:	4b07      	ldr	r3, [pc, #28]	@ (8001968 <displayButtonISR+0x48>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
 800194e:	e005      	b.n	800195c <displayButtonISR+0x3c>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <displayButtonISR+0x48>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	3301      	adds	r3, #1
 8001956:	b2da      	uxtb	r2, r3
 8001958:	4b03      	ldr	r3, [pc, #12]	@ (8001968 <displayButtonISR+0x48>)
 800195a:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 800195c:	1dfb      	adds	r3, r7, #7
 800195e:	781b      	ldrb	r3, [r3, #0]

}
 8001960:	0018      	movs	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	b002      	add	sp, #8
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000090 	.word	0x20000090
 800196c:	08006968 	.word	0x08006968

08001970 <alarmEnableISR>:

/*
 * Toggles user alarm enable bool and alarm enable LED.
 */
HAL_StatusTypeDef alarmEnableISR(void) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001976:	1dfb      	adds	r3, r7, #7
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 800197c:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <alarmEnableISR+0xa0>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2201      	movs	r2, #1
 8001982:	4053      	eors	r3, r2
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00b      	beq.n	80019a2 <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 800198a:	4b22      	ldr	r3, [pc, #136]	@ (8001a14 <alarmEnableISR+0xa4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2280      	movs	r2, #128	@ 0x80
 8001990:	0151      	lsls	r1, r2, #5
 8001992:	2201      	movs	r2, #1
 8001994:	0018      	movs	r0, r3
 8001996:	f001 f9b8 	bl	8002d0a <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 800199a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <alarmEnableISR+0xa0>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
 80019a0:	e010      	b.n	80019c4 <alarmEnableISR+0x54>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 80019a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a10 <alarmEnableISR+0xa0>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00b      	beq.n	80019c2 <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 80019aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001a14 <alarmEnableISR+0xa4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2280      	movs	r2, #128	@ 0x80
 80019b0:	0151      	lsls	r1, r2, #5
 80019b2:	2200      	movs	r2, #0
 80019b4:	0018      	movs	r0, r3
 80019b6:	f001 f9a8 	bl	8002d0a <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 80019ba:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <alarmEnableISR+0xa0>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	e000      	b.n	80019c4 <alarmEnableISR+0x54>

	}
	else {
		__NOP();							//Code should never reach here.
 80019c2:	46c0      	nop			@ (mov r8, r8)
	}

	/*
	 * Reset snooze time
	 */
	secondSnooze = false;
 80019c4:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <alarmEnableISR+0xa8>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
	snoozeCounter = 0;
 80019ca:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <alarmEnableISR+0xac>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Stop_IT(timerSnooze);					// Stop snooze timer in case it is going
 80019d0:	4b13      	ldr	r3, [pc, #76]	@ (8001a20 <alarmEnableISR+0xb0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	0018      	movs	r0, r3
 80019d6:	f003 ff01 	bl	80057dc <HAL_TIM_Base_Stop_IT>
	timerSnooze->Instance->CNT &= 0xFFFF0000;
 80019da:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <alarmEnableISR+0xb0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a20 <alarmEnableISR+0xb0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	0c12      	lsrs	r2, r2, #16
 80019ea:	0412      	lsls	r2, r2, #16
 80019ec:	625a      	str	r2, [r3, #36]	@ 0x24
	timerSnooze->Instance->SR &= 0xFFFC;
 80019ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <alarmEnableISR+0xb0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a20 <alarmEnableISR+0xb0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4909      	ldr	r1, [pc, #36]	@ (8001a24 <alarmEnableISR+0xb4>)
 80019fe:	400a      	ands	r2, r1
 8001a00:	611a      	str	r2, [r3, #16]

	return halRet;
 8001a02:	1dfb      	adds	r3, r7, #7
 8001a04:	781b      	ldrb	r3, [r3, #0]

}
 8001a06:	0018      	movs	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b002      	add	sp, #8
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	20000091 	.word	0x20000091
 8001a14:	20000010 	.word	0x20000010
 8001a18:	2000027a 	.word	0x2000027a
 8001a1c:	20000278 	.word	0x20000278
 8001a20:	20000048 	.word	0x20000048
 8001a24:	0000fffc 	.word	0x0000fffc

08001a28 <alarmSetISR>:
 * Delays for 3 seconds, checks if alarm set button is still pressed.
 * If it is, allow user to set the new alarm time
 * and blink display to indicate this
 *
 */
HAL_StatusTypeDef alarmSetISR(void) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001a2e:	003b      	movs	r3, r7
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for 3 seconds to see if alarm set button is still pressed
	 */

	// Delay for 3 * 1s intervals
	for(uint8_t i = 0; i < 3; i++) {
 8001a34:	1dfb      	adds	r3, r7, #7
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
 8001a3a:	e01a      	b.n	8001a72 <alarmSetISR+0x4a>

		HAL_TIM_Base_Stop(timerDelay);
 8001a3c:	4b71      	ldr	r3, [pc, #452]	@ (8001c04 <alarmSetISR+0x1dc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	0018      	movs	r0, r3
 8001a42:	f003 fe51 	bl	80056e8 <HAL_TIM_Base_Stop>
		timerDelay->Instance->CNT = 0;						// Reset timer base
 8001a46:	4b6f      	ldr	r3, [pc, #444]	@ (8001c04 <alarmSetISR+0x1dc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001a50:	4b6c      	ldr	r3, [pc, #432]	@ (8001c04 <alarmSetISR+0x1dc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	0018      	movs	r0, r3
 8001a56:	f003 fdfb 	bl	8005650 <HAL_TIM_Base_Start>
	//	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to

		do {

		} while(__HAL_TIM_GET_COUNTER(timerDelay) < (65535));
 8001a5a:	4b6a      	ldr	r3, [pc, #424]	@ (8001c04 <alarmSetISR+0x1dc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a62:	4a69      	ldr	r2, [pc, #420]	@ (8001c08 <alarmSetISR+0x1e0>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d9f8      	bls.n	8001a5a <alarmSetISR+0x32>
	for(uint8_t i = 0; i < 3; i++) {
 8001a68:	1dfb      	adds	r3, r7, #7
 8001a6a:	781a      	ldrb	r2, [r3, #0]
 8001a6c:	1dfb      	adds	r3, r7, #7
 8001a6e:	3201      	adds	r2, #1
 8001a70:	701a      	strb	r2, [r3, #0]
 8001a72:	1dfb      	adds	r3, r7, #7
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d9e0      	bls.n	8001a3c <alarmSetISR+0x14>
	}

	// If button is still pressed, we are in alarm set mode.
	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 8001a7a:	4b64      	ldr	r3, [pc, #400]	@ (8001c0c <alarmSetISR+0x1e4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2280      	movs	r2, #128	@ 0x80
 8001a80:	0212      	lsls	r2, r2, #8
 8001a82:	0011      	movs	r1, r2
 8001a84:	0018      	movs	r0, r3
 8001a86:	f001 f923 	bl	8002cd0 <HAL_GPIO_ReadPin>
 8001a8a:	1e03      	subs	r3, r0, #0
 8001a8c:	d102      	bne.n	8001a94 <alarmSetISR+0x6c>
		alarmSetMode = true;
 8001a8e:	4b60      	ldr	r3, [pc, #384]	@ (8001c10 <alarmSetISR+0x1e8>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
	 * alarm set process until the button is pressed again
	 */


	// Reset Timer
	HAL_TIM_Base_Stop(timerDelay);
 8001a94:	4b5b      	ldr	r3, [pc, #364]	@ (8001c04 <alarmSetISR+0x1dc>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f003 fe25 	bl	80056e8 <HAL_TIM_Base_Stop>
	timerDelay->Instance->CNT = 0;
 8001a9e:	4b59      	ldr	r3, [pc, #356]	@ (8001c04 <alarmSetISR+0x1dc>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001aa8:	4b56      	ldr	r3, [pc, #344]	@ (8001c04 <alarmSetISR+0x1dc>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f003 fdcf 	bl	8005650 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001ab2:	4b54      	ldr	r3, [pc, #336]	@ (8001c04 <alarmSetISR+0x1dc>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	801a      	strh	r2, [r3, #0]

	bool alarmSetButtonReset = false;
 8001abe:	1cfb      	adds	r3, r7, #3
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {
 8001ac4:	4b52      	ldr	r3, [pc, #328]	@ (8001c10 <alarmSetISR+0x1e8>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d100      	bne.n	8001ace <alarmSetISR+0xa6>
 8001acc:	e090      	b.n	8001bf0 <alarmSetISR+0x1c8>

		// If we were in second snooze mode, kill it.
		secondSnooze = false;
 8001ace:	4b51      	ldr	r3, [pc, #324]	@ (8001c14 <alarmSetISR+0x1ec>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
		snoozeCounter = 0;
 8001ad4:	4b50      	ldr	r3, [pc, #320]	@ (8001c18 <alarmSetISR+0x1f0>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]

		// Stop snooze timer in case it is going
		HAL_TIM_Base_Stop_IT(timerSnooze);
 8001ada:	4b50      	ldr	r3, [pc, #320]	@ (8001c1c <alarmSetISR+0x1f4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f003 fe7c 	bl	80057dc <HAL_TIM_Base_Stop_IT>
		timerSnooze->Instance->CNT &= 0xFFFF0000;
 8001ae4:	4b4d      	ldr	r3, [pc, #308]	@ (8001c1c <alarmSetISR+0x1f4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001aec:	4b4b      	ldr	r3, [pc, #300]	@ (8001c1c <alarmSetISR+0x1f4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	0c12      	lsrs	r2, r2, #16
 8001af4:	0412      	lsls	r2, r2, #16
 8001af6:	625a      	str	r2, [r3, #36]	@ 0x24
		timerSnooze->Instance->SR &= 0xFFFC;
 8001af8:	4b48      	ldr	r3, [pc, #288]	@ (8001c1c <alarmSetISR+0x1f4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	4b46      	ldr	r3, [pc, #280]	@ (8001c1c <alarmSetISR+0x1f4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4946      	ldr	r1, [pc, #280]	@ (8001c20 <alarmSetISR+0x1f8>)
 8001b08:	400a      	ands	r2, r1
 8001b0a:	611a      	str	r2, [r3, #16]

		bool displayBlink = false;
 8001b0c:	1cbb      	adds	r3, r7, #2
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]

		/*
		 * Determine whether to toggle high or low brightness
		 */
		uint8_t intenSet;
		if(displayToggle == 0) { 				// If the user has full brightness enabled, toggle full btightness
 8001b12:	4b44      	ldr	r3, [pc, #272]	@ (8001c24 <alarmSetISR+0x1fc>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d103      	bne.n	8001b22 <alarmSetISR+0xfa>
			intenSet = 2;
 8001b1a:	1c7b      	adds	r3, r7, #1
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	e002      	b.n	8001b28 <alarmSetISR+0x100>
		}
		else {									// Else, toggle low brightness
			intenSet = 1;
 8001b22:	1c7b      	adds	r3, r7, #1
 8001b24:	2201      	movs	r2, #1
 8001b26:	701a      	strb	r2, [r3, #0]
		}

		do {											// while the alarm set button is not held down, blink display.

			// Check to make sure the user has released the set button from the initial hold
			if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_SET) {
 8001b28:	4b38      	ldr	r3, [pc, #224]	@ (8001c0c <alarmSetISR+0x1e4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2280      	movs	r2, #128	@ 0x80
 8001b2e:	0212      	lsls	r2, r2, #8
 8001b30:	0011      	movs	r1, r2
 8001b32:	0018      	movs	r0, r3
 8001b34:	f001 f8cc 	bl	8002cd0 <HAL_GPIO_ReadPin>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d102      	bne.n	8001b44 <alarmSetISR+0x11c>
				alarmSetButtonReset = true;
 8001b3e:	1cfb      	adds	r3, r7, #3
 8001b40:	2201      	movs	r2, #1
 8001b42:	701a      	strb	r2, [r3, #0]
			}

			updateAndDisplayAlarm();
 8001b44:	f7ff fcb2 	bl	80014ac <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 8001b48:	4b2e      	ldr	r3, [pc, #184]	@ (8001c04 <alarmSetISR+0x1dc>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	1ad2      	subs	r2, r2, r3
 8001b56:	2380      	movs	r3, #128	@ 0x80
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d31e      	bcc.n	8001b9c <alarmSetISR+0x174>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink * intenSet]);		// Initialize to whatever duty cycle
 8001b5e:	1cbb      	adds	r3, r7, #2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	1c7a      	adds	r2, r7, #1
 8001b64:	7812      	ldrb	r2, [r2, #0]
 8001b66:	4353      	muls	r3, r2
 8001b68:	4a2f      	ldr	r2, [pc, #188]	@ (8001c28 <alarmSetISR+0x200>)
 8001b6a:	5cd3      	ldrb	r3, [r2, r3]
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f000 fb4f 	bl	8002210 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 8001b72:	4b24      	ldr	r3, [pc, #144]	@ (8001c04 <alarmSetISR+0x1dc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	801a      	strh	r2, [r3, #0]
				displayBlink = !displayBlink;
 8001b7e:	1cbb      	adds	r3, r7, #2
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	1e5a      	subs	r2, r3, #1
 8001b84:	4193      	sbcs	r3, r2
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4053      	eors	r3, r2
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	001a      	movs	r2, r3
 8001b90:	1cbb      	adds	r3, r7, #2
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	2101      	movs	r1, #1
 8001b98:	400a      	ands	r2, r1
 8001b9a:	701a      	strb	r2, [r3, #0]

			}

		}while((HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET)
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <alarmSetISR+0x1e4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2280      	movs	r2, #128	@ 0x80
 8001ba2:	0212      	lsls	r2, r2, #8
 8001ba4:	0011      	movs	r1, r2
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f001 f892 	bl	8002cd0 <HAL_GPIO_ReadPin>
 8001bac:	1e03      	subs	r3, r0, #0
				|| !alarmSetButtonReset);
 8001bae:	d1bb      	bne.n	8001b28 <alarmSetISR+0x100>
 8001bb0:	1cfb      	adds	r3, r7, #3
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4053      	eors	r3, r2
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1b4      	bne.n	8001b28 <alarmSetISR+0x100>

		sevSeg_setIntensity(sevSeg_intensityDuty[intenSet]);			// Turn display back on
 8001bbe:	1c7b      	adds	r3, r7, #1
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	4a19      	ldr	r2, [pc, #100]	@ (8001c28 <alarmSetISR+0x200>)
 8001bc4:	5cd3      	ldrb	r3, [r2, r3]
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f000 fb22 	bl	8002210 <sevSeg_setIntensity>
		if(intenSet == 2) {
 8001bcc:	1c7b      	adds	r3, r7, #1
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d103      	bne.n	8001bdc <alarmSetISR+0x1b4>
			displayToggle = 0;
 8001bd4:	4b13      	ldr	r3, [pc, #76]	@ (8001c24 <alarmSetISR+0x1fc>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	e002      	b.n	8001be2 <alarmSetISR+0x1ba>
		}
		else {
			displayToggle = 2;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	@ (8001c24 <alarmSetISR+0x1fc>)
 8001bde:	2202      	movs	r2, #2
 8001be0:	701a      	strb	r2, [r3, #0]
		}


		HAL_TIM_Base_Stop(timerDelay);
 8001be2:	4b08      	ldr	r3, [pc, #32]	@ (8001c04 <alarmSetISR+0x1dc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	0018      	movs	r0, r3
 8001be8:	f003 fd7e 	bl	80056e8 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8001bec:	f7ff fc42 	bl	8001474 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8001bf0:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <alarmSetISR+0x1e8>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 8001bf6:	003b      	movs	r3, r7
 8001bf8:	781b      	ldrb	r3, [r3, #0]

}
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b002      	add	sp, #8
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	46c0      	nop			@ (mov r8, r8)
 8001c04:	20000044 	.word	0x20000044
 8001c08:	0000fffe 	.word	0x0000fffe
 8001c0c:	20000004 	.word	0x20000004
 8001c10:	20000279 	.word	0x20000279
 8001c14:	2000027a 	.word	0x2000027a
 8001c18:	20000278 	.word	0x20000278
 8001c1c:	20000048 	.word	0x20000048
 8001c20:	0000fffc 	.word	0x0000fffc
 8001c24:	20000090 	.word	0x20000090
 8001c28:	08006968 	.word	0x08006968

08001c2c <hourSetISR>:

/*
 * Increment either user alarm hour value or RTC hour value
 */
HAL_StatusTypeDef hourSetISR(void) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0


	HAL_StatusTypeDef halRet = HAL_OK;
 8001c32:	1dfb      	adds	r3, r7, #7
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001c38:	4b0e      	ldr	r3, [pc, #56]	@ (8001c74 <hourSetISR+0x48>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <hourSetISR+0x1a>

		alarmHourInc();
 8001c40:	f000 f878 	bl	8001d34 <alarmHourInc>
 8001c44:	e00f      	b.n	8001c66 <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 8001c46:	f000 f8a5 	bl	8001d94 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001c4a:	490b      	ldr	r1, [pc, #44]	@ (8001c78 <hourSetISR+0x4c>)
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <hourSetISR+0x50>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	0018      	movs	r0, r3
 8001c52:	f002 fea1 	bl	8004998 <HAL_RTC_SetTime>


		updateAndDisplayTime();
 8001c56:	f7ff fc0d 	bl	8001474 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001c5a:	4a09      	ldr	r2, [pc, #36]	@ (8001c80 <hourSetISR+0x54>)
 8001c5c:	4906      	ldr	r1, [pc, #24]	@ (8001c78 <hourSetISR+0x4c>)
 8001c5e:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <hourSetISR+0x50>)
 8001c60:	0018      	movs	r0, r3
 8001c62:	f7fe fef5 	bl	8000a50 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 8001c66:	1dfb      	adds	r3, r7, #7
 8001c68:	781b      	ldrb	r3, [r3, #0]

}
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b002      	add	sp, #8
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			@ (mov r8, r8)
 8001c74:	20000279 	.word	0x20000279
 8001c78:	20000098 	.word	0x20000098
 8001c7c:	2000011c 	.word	0x2000011c
 8001c80:	200000ac 	.word	0x200000ac

08001c84 <minuteSetISR>:

/*
 * Increment either user alarm minute value or RTC minute value
 */
HAL_StatusTypeDef minuteSetISR(void) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08c      	sub	sp, #48	@ 0x30
 8001c88:	af00      	add	r7, sp, #0


	HAL_StatusTypeDef halRet = HAL_OK;
 8001c8a:	232f      	movs	r3, #47	@ 0x2f
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001c92:	4b24      	ldr	r3, [pc, #144]	@ (8001d24 <minuteSetISR+0xa0>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <minuteSetISR+0x1c>

		alarmMinuteInc();
 8001c9a:	f000 f8bb 	bl	8001e14 <alarmMinuteInc>
 8001c9e:	e03a      	b.n	8001d16 <minuteSetISR+0x92>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 8001ca0:	f000 f8d6 	bl	8001e50 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001ca4:	4920      	ldr	r1, [pc, #128]	@ (8001d28 <minuteSetISR+0xa4>)
 8001ca6:	4b21      	ldr	r3, [pc, #132]	@ (8001d2c <minuteSetISR+0xa8>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	0018      	movs	r0, r3
 8001cac:	f002 fe74 	bl	8004998 <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	2328      	movs	r3, #40	@ 0x28
 8001cb6:	001a      	movs	r2, r3
 8001cb8:	2100      	movs	r1, #0
 8001cba:	f004 fe01 	bl	80068c0 <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8001cbe:	2380      	movs	r3, #128	@ 0x80
 8001cc0:	005a      	lsls	r2, r3, #1
 8001cc2:	1d39      	adds	r1, r7, #4
 8001cc4:	4819      	ldr	r0, [pc, #100]	@ (8001d2c <minuteSetISR+0xa8>)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f003 f98a 	bl	8004fe0 <HAL_RTC_GetAlarm>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001ccc:	4a18      	ldr	r2, [pc, #96]	@ (8001d30 <minuteSetISR+0xac>)
 8001cce:	4916      	ldr	r1, [pc, #88]	@ (8001d28 <minuteSetISR+0xa4>)
 8001cd0:	4b16      	ldr	r3, [pc, #88]	@ (8001d2c <minuteSetISR+0xa8>)
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f7fe febc 	bl	8000a50 <getRTCTime>

		if(currTime.Minutes > 58) {
 8001cd8:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <minuteSetISR+0xa4>)
 8001cda:	785b      	ldrb	r3, [r3, #1]
 8001cdc:	2b3a      	cmp	r3, #58	@ 0x3a
 8001cde:	d903      	bls.n	8001ce8 <minuteSetISR+0x64>
			sAlarm.AlarmTime.Minutes = 0;
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	705a      	strb	r2, [r3, #1]
 8001ce6:	e005      	b.n	8001cf4 <minuteSetISR+0x70>
		} else {
			sAlarm.AlarmTime.Minutes = currTime.Minutes + 1;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <minuteSetISR+0xa4>)
 8001cea:	785b      	ldrb	r3, [r3, #1]
 8001cec:	3301      	adds	r3, #1
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8001cf4:	46c0      	nop			@ (mov r8, r8)
 8001cf6:	1d39      	adds	r1, r7, #4
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <minuteSetISR+0xa8>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f003 f82f 	bl	8004d60 <HAL_RTC_SetAlarm_IT>
 8001d02:	1e03      	subs	r3, r0, #0
 8001d04:	d1f7      	bne.n	8001cf6 <minuteSetISR+0x72>


		updateAndDisplayTime();
 8001d06:	f7ff fbb5 	bl	8001474 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001d0a:	4a09      	ldr	r2, [pc, #36]	@ (8001d30 <minuteSetISR+0xac>)
 8001d0c:	4906      	ldr	r1, [pc, #24]	@ (8001d28 <minuteSetISR+0xa4>)
 8001d0e:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <minuteSetISR+0xa8>)
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7fe fe9d 	bl	8000a50 <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 8001d16:	232f      	movs	r3, #47	@ 0x2f
 8001d18:	18fb      	adds	r3, r7, r3
 8001d1a:	781b      	ldrb	r3, [r3, #0]
}
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b00c      	add	sp, #48	@ 0x30
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000279 	.word	0x20000279
 8001d28:	20000098 	.word	0x20000098
 8001d2c:	2000011c 	.word	0x2000011c
 8001d30:	200000ac 	.word	0x200000ac

08001d34 <alarmHourInc>:

/*
 * Increment user alarm time hour
 */
void alarmHourInc(void) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8001d38:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <alarmHourInc+0x5c>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b0b      	cmp	r3, #11
 8001d3e:	d903      	bls.n	8001d48 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8001d40:	4b13      	ldr	r3, [pc, #76]	@ (8001d90 <alarmHourInc+0x5c>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
 8001d46:	e01e      	b.n	8001d86 <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 8001d48:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <alarmHourInc+0x5c>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b0b      	cmp	r3, #11
 8001d4e:	d10e      	bne.n	8001d6e <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001d50:	4b0f      	ldr	r3, [pc, #60]	@ (8001d90 <alarmHourInc+0x5c>)
 8001d52:	78db      	ldrb	r3, [r3, #3]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d103      	bne.n	8001d60 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001d58:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <alarmHourInc+0x5c>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	70da      	strb	r2, [r3, #3]
 8001d5e:	e002      	b.n	8001d66 <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001d60:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <alarmHourInc+0x5c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 8001d66:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <alarmHourInc+0x5c>)
 8001d68:	220c      	movs	r2, #12
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	e00b      	b.n	8001d86 <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 8001d6e:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <alarmHourInc+0x5c>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b0a      	cmp	r3, #10
 8001d74:	d806      	bhi.n	8001d84 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001d76:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <alarmHourInc+0x5c>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <alarmHourInc+0x5c>)
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	e000      	b.n	8001d86 <alarmHourInc+0x52>
	}
	else {
		__NOP();
 8001d84:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001d86:	f000 f8df 	bl	8001f48 <updateRTCBackupReg>

}
 8001d8a:	46c0      	nop			@ (mov r8, r8)
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	200000b0 	.word	0x200000b0

08001d94 <currHourInc>:

/*
 * Increment current time hour
 */
void currHourInc(void) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001d98:	4a1a      	ldr	r2, [pc, #104]	@ (8001e04 <currHourInc+0x70>)
 8001d9a:	491b      	ldr	r1, [pc, #108]	@ (8001e08 <currHourInc+0x74>)
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e0c <currHourInc+0x78>)
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f7fe fe56 	bl	8000a50 <getRTCTime>

	if(currTime.Hours >= 12) {
 8001da4:	4b18      	ldr	r3, [pc, #96]	@ (8001e08 <currHourInc+0x74>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b0b      	cmp	r3, #11
 8001daa:	d903      	bls.n	8001db4 <currHourInc+0x20>
		currTime.Hours = 1;
 8001dac:	4b16      	ldr	r3, [pc, #88]	@ (8001e08 <currHourInc+0x74>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	e01e      	b.n	8001df2 <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 8001db4:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <currHourInc+0x74>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b0b      	cmp	r3, #11
 8001dba:	d10e      	bne.n	8001dda <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001dbc:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <currHourInc+0x74>)
 8001dbe:	78db      	ldrb	r3, [r3, #3]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d103      	bne.n	8001dcc <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001dc4:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <currHourInc+0x74>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	70da      	strb	r2, [r3, #3]
 8001dca:	e002      	b.n	8001dd2 <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e08 <currHourInc+0x74>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <currHourInc+0x74>)
 8001dd4:	220c      	movs	r2, #12
 8001dd6:	701a      	strb	r2, [r3, #0]
 8001dd8:	e00b      	b.n	8001df2 <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 8001dda:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <currHourInc+0x7c>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b0a      	cmp	r3, #10
 8001de0:	d806      	bhi.n	8001df0 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 8001de2:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <currHourInc+0x74>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	3301      	adds	r3, #1
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4b07      	ldr	r3, [pc, #28]	@ (8001e08 <currHourInc+0x74>)
 8001dec:	701a      	strb	r2, [r3, #0]
 8001dee:	e000      	b.n	8001df2 <currHourInc+0x5e>
	}
	else {
		__NOP();
 8001df0:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001df2:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <currHourInc+0x74>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001df8:	4b03      	ldr	r3, [pc, #12]	@ (8001e08 <currHourInc+0x74>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]

}
 8001dfe:	46c0      	nop			@ (mov r8, r8)
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200000ac 	.word	0x200000ac
 8001e08:	20000098 	.word	0x20000098
 8001e0c:	2000011c 	.word	0x2000011c
 8001e10:	200000b0 	.word	0x200000b0

08001e14 <alarmMinuteInc>:

/*
 * Increment User alarm time minute
 */
void alarmMinuteInc(void) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 8001e18:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <alarmMinuteInc+0x38>)
 8001e1a:	785b      	ldrb	r3, [r3, #1]
 8001e1c:	2b3a      	cmp	r3, #58	@ 0x3a
 8001e1e:	d903      	bls.n	8001e28 <alarmMinuteInc+0x14>
		/*
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		//alarmHourInc();
		userAlarmTime.Minutes = 0;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <alarmMinuteInc+0x38>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	705a      	strb	r2, [r3, #1]
 8001e26:	e00b      	b.n	8001e40 <alarmMinuteInc+0x2c>
	}
	else if(userAlarmTime.Minutes < 59) {
 8001e28:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <alarmMinuteInc+0x38>)
 8001e2a:	785b      	ldrb	r3, [r3, #1]
 8001e2c:	2b3a      	cmp	r3, #58	@ 0x3a
 8001e2e:	d806      	bhi.n	8001e3e <alarmMinuteInc+0x2a>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8001e30:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <alarmMinuteInc+0x38>)
 8001e32:	785b      	ldrb	r3, [r3, #1]
 8001e34:	3301      	adds	r3, #1
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	4b04      	ldr	r3, [pc, #16]	@ (8001e4c <alarmMinuteInc+0x38>)
 8001e3a:	705a      	strb	r2, [r3, #1]
 8001e3c:	e000      	b.n	8001e40 <alarmMinuteInc+0x2c>
	}
	else {
		__NOP();
 8001e3e:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001e40:	f000 f882 	bl	8001f48 <updateRTCBackupReg>

}
 8001e44:	46c0      	nop			@ (mov r8, r8)
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			@ (mov r8, r8)
 8001e4c:	200000b0 	.word	0x200000b0

08001e50 <currMinuteInc>:

/*
 * Increment current time minute
 */
void currMinuteInc(void) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001e54:	4a11      	ldr	r2, [pc, #68]	@ (8001e9c <currMinuteInc+0x4c>)
 8001e56:	4912      	ldr	r1, [pc, #72]	@ (8001ea0 <currMinuteInc+0x50>)
 8001e58:	4b12      	ldr	r3, [pc, #72]	@ (8001ea4 <currMinuteInc+0x54>)
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f7fe fdf8 	bl	8000a50 <getRTCTime>

	if(currTime.Minutes >= 59) {
 8001e60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea0 <currMinuteInc+0x50>)
 8001e62:	785b      	ldrb	r3, [r3, #1]
 8001e64:	2b3a      	cmp	r3, #58	@ 0x3a
 8001e66:	d903      	bls.n	8001e70 <currMinuteInc+0x20>
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		// currHourInc();

		currTime.Minutes = 0;
 8001e68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea0 <currMinuteInc+0x50>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	705a      	strb	r2, [r3, #1]
 8001e6e:	e00b      	b.n	8001e88 <currMinuteInc+0x38>
	}
	else if(currTime.Minutes < 59) {
 8001e70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea0 <currMinuteInc+0x50>)
 8001e72:	785b      	ldrb	r3, [r3, #1]
 8001e74:	2b3a      	cmp	r3, #58	@ 0x3a
 8001e76:	d806      	bhi.n	8001e86 <currMinuteInc+0x36>
		currTime.Minutes = currTime.Minutes + 1;
 8001e78:	4b09      	ldr	r3, [pc, #36]	@ (8001ea0 <currMinuteInc+0x50>)
 8001e7a:	785b      	ldrb	r3, [r3, #1]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	4b07      	ldr	r3, [pc, #28]	@ (8001ea0 <currMinuteInc+0x50>)
 8001e82:	705a      	strb	r2, [r3, #1]
 8001e84:	e000      	b.n	8001e88 <currMinuteInc+0x38>
	}
	else {
		__NOP();
 8001e86:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001e88:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <currMinuteInc+0x50>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001e8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ea0 <currMinuteInc+0x50>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]

}
 8001e94:	46c0      	nop			@ (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			@ (mov r8, r8)
 8001e9c:	200000ac 	.word	0x200000ac
 8001ea0:	20000098 	.word	0x20000098
 8001ea4:	2000011c 	.word	0x2000011c

08001ea8 <dispFault>:

/*
 * Displays a non-critical fault to indicate reduced functionality
 */
void dispFault(void) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
 8001eac:	4b04      	ldr	r3, [pc, #16]	@ (8001ec0 <dispFault+0x18>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f000 ff28 	bl	8002d0a <HAL_GPIO_WritePin>
}
 8001eba:	46c0      	nop			@ (mov r8, r8)
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000028 	.word	0x20000028

08001ec4 <dispFailure>:

/*
 * Displays a critical failure and ceases all operations
 */
void dispFailure(void) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8001eca:	4b1c      	ldr	r3, [pc, #112]	@ (8001f3c <dispFailure+0x78>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f003 fc0a 	bl	80056e8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001ed4:	4b19      	ldr	r3, [pc, #100]	@ (8001f3c <dispFailure+0x78>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f003 fbb9 	bl	8005650 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001ede:	4b17      	ldr	r3, [pc, #92]	@ (8001f3c <dispFailure+0x78>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee6:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001ee8:	1cfb      	adds	r3, r7, #3
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001eee:	4b13      	ldr	r3, [pc, #76]	@ (8001f3c <dispFailure+0x78>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	4a11      	ldr	r2, [pc, #68]	@ (8001f40 <dispFailure+0x7c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d9f6      	bls.n	8001eee <dispFailure+0x2a>

			HAL_GPIO_TogglePin(alarmLEDPort, alarmLEDPin);
 8001f00:	4b10      	ldr	r3, [pc, #64]	@ (8001f44 <dispFailure+0x80>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2280      	movs	r2, #128	@ 0x80
 8001f06:	0152      	lsls	r2, r2, #5
 8001f08:	0011      	movs	r1, r2
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f000 ff1a 	bl	8002d44 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001f10:	4b0a      	ldr	r3, [pc, #40]	@ (8001f3c <dispFailure+0x78>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001f1a:	1cfb      	adds	r3, r7, #3
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	1e5a      	subs	r2, r3, #1
 8001f20:	4193      	sbcs	r3, r2
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2201      	movs	r2, #1
 8001f26:	4053      	eors	r3, r2
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	001a      	movs	r2, r3
 8001f2c:	1cfb      	adds	r3, r7, #3
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	781a      	ldrb	r2, [r3, #0]
 8001f32:	2101      	movs	r1, #1
 8001f34:	400a      	ands	r2, r1
 8001f36:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001f38:	e7d9      	b.n	8001eee <dispFailure+0x2a>
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	20000044 	.word	0x20000044
 8001f40:	00003ffe 	.word	0x00003ffe
 8001f44:	20000010 	.word	0x20000010

08001f48 <updateRTCBackupReg>:
}

/*
 * Updates RTC backup register with user alarm time to be later pulled from in the case of a power outage
 */
void updateRTCBackupReg(void) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <updateRTCBackupReg+0x40>)
 8001f4e:	6819      	ldr	r1, [r3, #0]
 8001f50:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <updateRTCBackupReg+0x44>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	001a      	movs	r2, r3
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <updateRTCBackupReg+0x48>)
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f003 fae9 	bl	8005530 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f94 <updateRTCBackupReg+0x4c>)
 8001f60:	6819      	ldr	r1, [r3, #0]
 8001f62:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <updateRTCBackupReg+0x44>)
 8001f64:	785b      	ldrb	r3, [r3, #1]
 8001f66:	001a      	movs	r2, r3
 8001f68:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <updateRTCBackupReg+0x48>)
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f003 fae0 	bl	8005530 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 8001f70:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <updateRTCBackupReg+0x50>)
 8001f72:	6819      	ldr	r1, [r3, #0]
 8001f74:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <updateRTCBackupReg+0x44>)
 8001f76:	78db      	ldrb	r3, [r3, #3]
 8001f78:	001a      	movs	r2, r3
 8001f7a:	4b05      	ldr	r3, [pc, #20]	@ (8001f90 <updateRTCBackupReg+0x48>)
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f003 fad7 	bl	8005530 <HAL_RTCEx_BKUPWrite>

}
 8001f82:	46c0      	nop			@ (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200000c4 	.word	0x200000c4
 8001f8c:	200000b0 	.word	0x200000b0
 8001f90:	2000011c 	.word	0x2000011c
 8001f94:	20000034 	.word	0x20000034
 8001f98:	20000038 	.word	0x20000038

08001f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa0:	b672      	cpsid	i
}
 8001fa2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fa4:	46c0      	nop			@ (mov r8, r8)
 8001fa6:	e7fd      	b.n	8001fa4 <Error_Handler+0x8>

08001fa8 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8001fa8:	b5b0      	push	{r4, r5, r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	0005      	movs	r5, r0
 8001fb0:	000c      	movs	r4, r1
 8001fb2:	0010      	movs	r0, r2
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	1dbb      	adds	r3, r7, #6
 8001fb8:	1c2a      	adds	r2, r5, #0
 8001fba:	801a      	strh	r2, [r3, #0]
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	1c22      	adds	r2, r4, #0
 8001fc0:	801a      	strh	r2, [r3, #0]
 8001fc2:	1cbb      	adds	r3, r7, #2
 8001fc4:	1c02      	adds	r2, r0, #0
 8001fc6:	801a      	strh	r2, [r3, #0]
 8001fc8:	003b      	movs	r3, r7
 8001fca:	1c0a      	adds	r2, r1, #0
 8001fcc:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001fce:	4b2e      	ldr	r3, [pc, #184]	@ (8002088 <sevSeg_Init+0xe0>)
 8001fd0:	1dba      	adds	r2, r7, #6
 8001fd2:	8812      	ldrh	r2, [r2, #0]
 8001fd4:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8001fd6:	4b2d      	ldr	r3, [pc, #180]	@ (800208c <sevSeg_Init+0xe4>)
 8001fd8:	1d3a      	adds	r2, r7, #4
 8001fda:	8812      	ldrh	r2, [r2, #0]
 8001fdc:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001fde:	4b2c      	ldr	r3, [pc, #176]	@ (8002090 <sevSeg_Init+0xe8>)
 8001fe0:	1cba      	adds	r2, r7, #2
 8001fe2:	8812      	ldrh	r2, [r2, #0]
 8001fe4:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8001fe6:	4b2b      	ldr	r3, [pc, #172]	@ (8002094 <sevSeg_Init+0xec>)
 8001fe8:	003a      	movs	r2, r7
 8001fea:	8812      	ldrh	r2, [r2, #0]
 8001fec:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001fee:	4a2a      	ldr	r2, [pc, #168]	@ (8002098 <sevSeg_Init+0xf0>)
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8001ff8:	4a28      	ldr	r2, [pc, #160]	@ (800209c <sevSeg_Init+0xf4>)
 8001ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ffc:	0010      	movs	r0, r2
 8001ffe:	0019      	movs	r1, r3
 8002000:	234c      	movs	r3, #76	@ 0x4c
 8002002:	001a      	movs	r2, r3
 8002004:	f004 fc88 	bl	8006918 <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8002008:	4b25      	ldr	r3, [pc, #148]	@ (80020a0 <sevSeg_Init+0xf8>)
 800200a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800200c:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	e00b      	b.n	800202c <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800201a:	18d3      	adds	r3, r2, r3
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	4b21      	ldr	r3, [pc, #132]	@ (80020a4 <sevSeg_Init+0xfc>)
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	0092      	lsls	r2, r2, #2
 8002024:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3301      	adds	r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b04      	cmp	r3, #4
 8002030:	ddf0      	ble.n	8002014 <sevSeg_Init+0x6c>
	}

	sevSeg_setIntensity(50);
 8002032:	2032      	movs	r0, #50	@ 0x32
 8002034:	f000 f8ec 	bl	8002210 <sevSeg_setIntensity>
//	}
//
//	HAL_TIM_Base_Stop(htim);

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8002038:	4b1a      	ldr	r3, [pc, #104]	@ (80020a4 <sevSeg_Init+0xfc>)
 800203a:	6918      	ldr	r0, [r3, #16]
 800203c:	4b16      	ldr	r3, [pc, #88]	@ (8002098 <sevSeg_Init+0xf0>)
 800203e:	8819      	ldrh	r1, [r3, #0]
 8002040:	4b19      	ldr	r3, [pc, #100]	@ (80020a8 <sevSeg_Init+0x100>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	001a      	movs	r2, r3
 8002046:	f000 fe60 	bl	8002d0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 800204a:	4b16      	ldr	r3, [pc, #88]	@ (80020a4 <sevSeg_Init+0xfc>)
 800204c:	6918      	ldr	r0, [r3, #16]
 800204e:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <sevSeg_Init+0xf0>)
 8002050:	8819      	ldrh	r1, [r3, #0]
 8002052:	4b15      	ldr	r3, [pc, #84]	@ (80020a8 <sevSeg_Init+0x100>)
 8002054:	785b      	ldrb	r3, [r3, #1]
 8002056:	001a      	movs	r2, r3
 8002058:	f000 fe57 	bl	8002d0a <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 800205c:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <sevSeg_Init+0xfc>)
 800205e:	6898      	ldr	r0, [r3, #8]
 8002060:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <sevSeg_Init+0xe8>)
 8002062:	8819      	ldrh	r1, [r3, #0]
 8002064:	4b10      	ldr	r3, [pc, #64]	@ (80020a8 <sevSeg_Init+0x100>)
 8002066:	785b      	ldrb	r3, [r3, #1]
 8002068:	001a      	movs	r2, r3
 800206a:	f000 fe4e 	bl	8002d0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800206e:	4b0d      	ldr	r3, [pc, #52]	@ (80020a4 <sevSeg_Init+0xfc>)
 8002070:	6898      	ldr	r0, [r3, #8]
 8002072:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <sevSeg_Init+0xe8>)
 8002074:	8819      	ldrh	r1, [r3, #0]
 8002076:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <sevSeg_Init+0x100>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	001a      	movs	r2, r3
 800207c:	f000 fe45 	bl	8002d0a <HAL_GPIO_WritePin>

}
 8002080:	46c0      	nop			@ (mov r8, r8)
 8002082:	46bd      	mov	sp, r7
 8002084:	b004      	add	sp, #16
 8002086:	bdb0      	pop	{r4, r5, r7, pc}
 8002088:	20000290 	.word	0x20000290
 800208c:	20000292 	.word	0x20000292
 8002090:	20000294 	.word	0x20000294
 8002094:	20000296 	.word	0x20000296
 8002098:	20000298 	.word	0x20000298
 800209c:	2000029c 	.word	0x2000029c
 80020a0:	200002e8 	.word	0x200002e8
 80020a4:	20000050 	.word	0x20000050
 80020a8:	20000064 	.word	0x20000064

080020ac <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	210a      	movs	r1, #10
 80020ba:	0018      	movs	r0, r3
 80020bc:	f7fe f822 	bl	8000104 <__udivsi3>
 80020c0:	0003      	movs	r3, r0
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	2408      	movs	r4, #8
 80020c6:	193b      	adds	r3, r7, r4
 80020c8:	701a      	strb	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	210a      	movs	r1, #10
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7fe f89d 	bl	8000210 <__aeabi_uidivmod>
 80020d6:	000b      	movs	r3, r1
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	193b      	adds	r3, r7, r4
 80020dc:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80020e2:	210a      	movs	r1, #10
 80020e4:	0018      	movs	r0, r3
 80020e6:	f7fe f80d 	bl	8000104 <__udivsi3>
 80020ea:	0003      	movs	r3, r0
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	193b      	adds	r3, r7, r4
 80020f0:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80020f6:	210a      	movs	r1, #10
 80020f8:	0018      	movs	r0, r3
 80020fa:	f7fe f889 	bl	8000210 <__aeabi_uidivmod>
 80020fe:	000b      	movs	r3, r1
 8002100:	b2da      	uxtb	r2, r3
 8002102:	193b      	adds	r3, r7, r4
 8002104:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 8002106:	2116      	movs	r1, #22
 8002108:	187b      	adds	r3, r7, r1
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	78db      	ldrb	r3, [r3, #3]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d102      	bne.n	800211c <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 8002116:	187b      	adds	r3, r7, r1
 8002118:	2202      	movs	r2, #2
 800211a:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 800211c:	2300      	movs	r3, #0
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	e04f      	b.n	80021c2 <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 8002122:	2308      	movs	r3, #8
 8002124:	18fa      	adds	r2, r7, r3
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	18d3      	adds	r3, r2, r3
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	0019      	movs	r1, r3
 800212e:	2417      	movs	r4, #23
 8002130:	193b      	adds	r3, r7, r4
 8002132:	4a30      	ldr	r2, [pc, #192]	@ (80021f4 <sevSeg_updateDigits+0x148>)
 8002134:	5c52      	ldrb	r2, [r2, r1]
 8002136:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d110      	bne.n	8002160 <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	210a      	movs	r1, #10
 8002144:	0018      	movs	r0, r3
 8002146:	f7fd ffdd 	bl	8000104 <__udivsi3>
 800214a:	0003      	movs	r3, r0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	001a      	movs	r2, r3
 8002150:	2316      	movs	r3, #22
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	18d2      	adds	r2, r2, r3
 8002158:	193b      	adds	r3, r7, r4
 800215a:	4927      	ldr	r1, [pc, #156]	@ (80021f8 <sevSeg_updateDigits+0x14c>)
 800215c:	5c8a      	ldrb	r2, [r1, r2]
 800215e:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	e027      	b.n	80021b6 <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8002166:	4b25      	ldr	r3, [pc, #148]	@ (80021fc <sevSeg_updateDigits+0x150>)
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	4b25      	ldr	r3, [pc, #148]	@ (8002200 <sevSeg_updateDigits+0x154>)
 800216c:	8819      	ldrh	r1, [r3, #0]
 800216e:	2417      	movs	r4, #23
 8002170:	193b      	adds	r3, r7, r4
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2201      	movs	r2, #1
 8002176:	4013      	ands	r3, r2
 8002178:	4a22      	ldr	r2, [pc, #136]	@ (8002204 <sevSeg_updateDigits+0x158>)
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	001a      	movs	r2, r3
 800217e:	f000 fdc4 	bl	8002d0a <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8002182:	4b1e      	ldr	r3, [pc, #120]	@ (80021fc <sevSeg_updateDigits+0x150>)
 8002184:	6858      	ldr	r0, [r3, #4]
 8002186:	4b20      	ldr	r3, [pc, #128]	@ (8002208 <sevSeg_updateDigits+0x15c>)
 8002188:	8819      	ldrh	r1, [r3, #0]
 800218a:	4b1e      	ldr	r3, [pc, #120]	@ (8002204 <sevSeg_updateDigits+0x158>)
 800218c:	785b      	ldrb	r3, [r3, #1]
 800218e:	001a      	movs	r2, r3
 8002190:	f000 fdbb 	bl	8002d0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8002194:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <sevSeg_updateDigits+0x150>)
 8002196:	6858      	ldr	r0, [r3, #4]
 8002198:	4b1b      	ldr	r3, [pc, #108]	@ (8002208 <sevSeg_updateDigits+0x15c>)
 800219a:	8819      	ldrh	r1, [r3, #0]
 800219c:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <sevSeg_updateDigits+0x158>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	001a      	movs	r2, r3
 80021a2:	f000 fdb2 	bl	8002d0a <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 80021a6:	193b      	adds	r3, r7, r4
 80021a8:	193a      	adds	r2, r7, r4
 80021aa:	7812      	ldrb	r2, [r2, #0]
 80021ac:	0852      	lsrs	r2, r2, #1
 80021ae:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	3301      	adds	r3, #1
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2b07      	cmp	r3, #7
 80021ba:	ddd4      	ble.n	8002166 <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	3301      	adds	r3, #1
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	ddac      	ble.n	8002122 <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80021c8:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <sevSeg_updateDigits+0x150>)
 80021ca:	6898      	ldr	r0, [r3, #8]
 80021cc:	4b0f      	ldr	r3, [pc, #60]	@ (800220c <sevSeg_updateDigits+0x160>)
 80021ce:	8819      	ldrh	r1, [r3, #0]
 80021d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002204 <sevSeg_updateDigits+0x158>)
 80021d2:	785b      	ldrb	r3, [r3, #1]
 80021d4:	001a      	movs	r2, r3
 80021d6:	f000 fd98 	bl	8002d0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80021da:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <sevSeg_updateDigits+0x150>)
 80021dc:	6898      	ldr	r0, [r3, #8]
 80021de:	4b0b      	ldr	r3, [pc, #44]	@ (800220c <sevSeg_updateDigits+0x160>)
 80021e0:	8819      	ldrh	r1, [r3, #0]
 80021e2:	4b08      	ldr	r3, [pc, #32]	@ (8002204 <sevSeg_updateDigits+0x158>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	001a      	movs	r2, r3
 80021e8:	f000 fd8f 	bl	8002d0a <HAL_GPIO_WritePin>

	return;
 80021ec:	46c0      	nop			@ (mov r8, r8)

}
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b007      	add	sp, #28
 80021f2:	bd90      	pop	{r4, r7, pc}
 80021f4:	0800696c 	.word	0x0800696c
 80021f8:	08006978 	.word	0x08006978
 80021fc:	20000050 	.word	0x20000050
 8002200:	20000290 	.word	0x20000290
 8002204:	20000064 	.word	0x20000064
 8002208:	20000292 	.word	0x20000292
 800220c:	20000294 	.word	0x20000294

08002210 <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	0002      	movs	r2, r0
 8002218:	1dbb      	adds	r3, r7, #6
 800221a:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 800221c:	4b20      	ldr	r3, [pc, #128]	@ (80022a0 <sevSeg_setIntensity+0x90>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d105      	bne.n	8002230 <sevSeg_setIntensity+0x20>
 8002224:	4b1f      	ldr	r3, [pc, #124]	@ (80022a4 <sevSeg_setIntensity+0x94>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	1dba      	adds	r2, r7, #6
 800222a:	8812      	ldrh	r2, [r2, #0]
 800222c:	635a      	str	r2, [r3, #52]	@ 0x34
 800222e:	e02c      	b.n	800228a <sevSeg_setIntensity+0x7a>
 8002230:	4b1b      	ldr	r3, [pc, #108]	@ (80022a0 <sevSeg_setIntensity+0x90>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b04      	cmp	r3, #4
 8002236:	d105      	bne.n	8002244 <sevSeg_setIntensity+0x34>
 8002238:	4b1a      	ldr	r3, [pc, #104]	@ (80022a4 <sevSeg_setIntensity+0x94>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	1dbb      	adds	r3, r7, #6
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	6393      	str	r3, [r2, #56]	@ 0x38
 8002242:	e022      	b.n	800228a <sevSeg_setIntensity+0x7a>
 8002244:	4b16      	ldr	r3, [pc, #88]	@ (80022a0 <sevSeg_setIntensity+0x90>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b08      	cmp	r3, #8
 800224a:	d105      	bne.n	8002258 <sevSeg_setIntensity+0x48>
 800224c:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <sevSeg_setIntensity+0x94>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	1dbb      	adds	r3, r7, #6
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002256:	e018      	b.n	800228a <sevSeg_setIntensity+0x7a>
 8002258:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <sevSeg_setIntensity+0x90>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b0c      	cmp	r3, #12
 800225e:	d105      	bne.n	800226c <sevSeg_setIntensity+0x5c>
 8002260:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <sevSeg_setIntensity+0x94>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	1dbb      	adds	r3, r7, #6
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	6413      	str	r3, [r2, #64]	@ 0x40
 800226a:	e00e      	b.n	800228a <sevSeg_setIntensity+0x7a>
 800226c:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <sevSeg_setIntensity+0x90>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b10      	cmp	r3, #16
 8002272:	d105      	bne.n	8002280 <sevSeg_setIntensity+0x70>
 8002274:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <sevSeg_setIntensity+0x94>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	1dbb      	adds	r3, r7, #6
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	6593      	str	r3, [r2, #88]	@ 0x58
 800227e:	e004      	b.n	800228a <sevSeg_setIntensity+0x7a>
 8002280:	4b08      	ldr	r3, [pc, #32]	@ (80022a4 <sevSeg_setIntensity+0x94>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	1dbb      	adds	r3, r7, #6
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 800228a:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <sevSeg_setIntensity+0x90>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <sevSeg_setIntensity+0x94>)
 8002290:	0011      	movs	r1, r2
 8002292:	0018      	movs	r0, r3
 8002294:	f003 fb28 	bl	80058e8 <HAL_TIM_PWM_Start>

}
 8002298:	46c0      	nop			@ (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b002      	add	sp, #8
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	200002e8 	.word	0x200002e8
 80022a4:	2000029c 	.word	0x2000029c

080022a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ae:	4b13      	ldr	r3, [pc, #76]	@ (80022fc <HAL_MspInit+0x54>)
 80022b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022b2:	4b12      	ldr	r3, [pc, #72]	@ (80022fc <HAL_MspInit+0x54>)
 80022b4:	2101      	movs	r1, #1
 80022b6:	430a      	orrs	r2, r1
 80022b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80022ba:	4b10      	ldr	r3, [pc, #64]	@ (80022fc <HAL_MspInit+0x54>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022be:	2201      	movs	r2, #1
 80022c0:	4013      	ands	r3, r2
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	4b0d      	ldr	r3, [pc, #52]	@ (80022fc <HAL_MspInit+0x54>)
 80022c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022ca:	4b0c      	ldr	r3, [pc, #48]	@ (80022fc <HAL_MspInit+0x54>)
 80022cc:	2180      	movs	r1, #128	@ 0x80
 80022ce:	0549      	lsls	r1, r1, #21
 80022d0:	430a      	orrs	r2, r1
 80022d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80022d4:	4b09      	ldr	r3, [pc, #36]	@ (80022fc <HAL_MspInit+0x54>)
 80022d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022d8:	2380      	movs	r3, #128	@ 0x80
 80022da:	055b      	lsls	r3, r3, #21
 80022dc:	4013      	ands	r3, r2
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	2004      	movs	r0, #4
 80022e8:	f000 fb5c 	bl	80029a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80022ec:	2004      	movs	r0, #4
 80022ee:	f000 fb6e 	bl	80029ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b002      	add	sp, #8
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	40021000 	.word	0x40021000

08002300 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b095      	sub	sp, #84	@ 0x54
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	233c      	movs	r3, #60	@ 0x3c
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	0018      	movs	r0, r3
 800230e:	2314      	movs	r3, #20
 8002310:	001a      	movs	r2, r3
 8002312:	2100      	movs	r1, #0
 8002314:	f004 fad4 	bl	80068c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002318:	2414      	movs	r4, #20
 800231a:	193b      	adds	r3, r7, r4
 800231c:	0018      	movs	r0, r3
 800231e:	2328      	movs	r3, #40	@ 0x28
 8002320:	001a      	movs	r2, r3
 8002322:	2100      	movs	r1, #0
 8002324:	f004 facc 	bl	80068c0 <memset>
  if(hi2c->Instance==I2C1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a22      	ldr	r2, [pc, #136]	@ (80023b8 <HAL_I2C_MspInit+0xb8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d13d      	bne.n	80023ae <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002332:	193b      	adds	r3, r7, r4
 8002334:	2220      	movs	r2, #32
 8002336:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002338:	193b      	adds	r3, r7, r4
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800233e:	193b      	adds	r3, r7, r4
 8002340:	0018      	movs	r0, r3
 8002342:	f002 f895 	bl	8004470 <HAL_RCCEx_PeriphCLKConfig>
 8002346:	1e03      	subs	r3, r0, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800234a:	f7ff fe27 	bl	8001f9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800234e:	4b1b      	ldr	r3, [pc, #108]	@ (80023bc <HAL_I2C_MspInit+0xbc>)
 8002350:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002352:	4b1a      	ldr	r3, [pc, #104]	@ (80023bc <HAL_I2C_MspInit+0xbc>)
 8002354:	2102      	movs	r1, #2
 8002356:	430a      	orrs	r2, r1
 8002358:	635a      	str	r2, [r3, #52]	@ 0x34
 800235a:	4b18      	ldr	r3, [pc, #96]	@ (80023bc <HAL_I2C_MspInit+0xbc>)
 800235c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800235e:	2202      	movs	r2, #2
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002366:	213c      	movs	r1, #60	@ 0x3c
 8002368:	187b      	adds	r3, r7, r1
 800236a:	22c0      	movs	r2, #192	@ 0xc0
 800236c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800236e:	187b      	adds	r3, r7, r1
 8002370:	2212      	movs	r2, #18
 8002372:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	187b      	adds	r3, r7, r1
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	187b      	adds	r3, r7, r1
 800237c:	2200      	movs	r2, #0
 800237e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002380:	187b      	adds	r3, r7, r1
 8002382:	2206      	movs	r2, #6
 8002384:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002386:	187b      	adds	r3, r7, r1
 8002388:	4a0d      	ldr	r2, [pc, #52]	@ (80023c0 <HAL_I2C_MspInit+0xc0>)
 800238a:	0019      	movs	r1, r3
 800238c:	0010      	movs	r0, r2
 800238e:	f000 fb3b 	bl	8002a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002392:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <HAL_I2C_MspInit+0xbc>)
 8002394:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002396:	4b09      	ldr	r3, [pc, #36]	@ (80023bc <HAL_I2C_MspInit+0xbc>)
 8002398:	2180      	movs	r1, #128	@ 0x80
 800239a:	0389      	lsls	r1, r1, #14
 800239c:	430a      	orrs	r2, r1
 800239e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023a0:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <HAL_I2C_MspInit+0xbc>)
 80023a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023a4:	2380      	movs	r3, #128	@ 0x80
 80023a6:	039b      	lsls	r3, r3, #14
 80023a8:	4013      	ands	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b015      	add	sp, #84	@ 0x54
 80023b4:	bd90      	pop	{r4, r7, pc}
 80023b6:	46c0      	nop			@ (mov r8, r8)
 80023b8:	40005400 	.word	0x40005400
 80023bc:	40021000 	.word	0x40021000
 80023c0:	50000400 	.word	0x50000400

080023c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80023c4:	b590      	push	{r4, r7, lr}
 80023c6:	b08f      	sub	sp, #60	@ 0x3c
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023cc:	2410      	movs	r4, #16
 80023ce:	193b      	adds	r3, r7, r4
 80023d0:	0018      	movs	r0, r3
 80023d2:	2328      	movs	r3, #40	@ 0x28
 80023d4:	001a      	movs	r2, r3
 80023d6:	2100      	movs	r1, #0
 80023d8:	f004 fa72 	bl	80068c0 <memset>
  if(hrtc->Instance==RTC)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a19      	ldr	r2, [pc, #100]	@ (8002448 <HAL_RTC_MspInit+0x84>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d12c      	bne.n	8002440 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023e6:	193b      	adds	r3, r7, r4
 80023e8:	2280      	movs	r2, #128	@ 0x80
 80023ea:	0292      	lsls	r2, r2, #10
 80023ec:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80023ee:	193b      	adds	r3, r7, r4
 80023f0:	2280      	movs	r2, #128	@ 0x80
 80023f2:	0052      	lsls	r2, r2, #1
 80023f4:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023f6:	193b      	adds	r3, r7, r4
 80023f8:	0018      	movs	r0, r3
 80023fa:	f002 f839 	bl	8004470 <HAL_RCCEx_PeriphCLKConfig>
 80023fe:	1e03      	subs	r3, r0, #0
 8002400:	d001      	beq.n	8002406 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002402:	f7ff fdcb 	bl	8001f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002406:	4b11      	ldr	r3, [pc, #68]	@ (800244c <HAL_RTC_MspInit+0x88>)
 8002408:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800240a:	4b10      	ldr	r3, [pc, #64]	@ (800244c <HAL_RTC_MspInit+0x88>)
 800240c:	2180      	movs	r1, #128	@ 0x80
 800240e:	0209      	lsls	r1, r1, #8
 8002410:	430a      	orrs	r2, r1
 8002412:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002414:	4b0d      	ldr	r3, [pc, #52]	@ (800244c <HAL_RTC_MspInit+0x88>)
 8002416:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002418:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <HAL_RTC_MspInit+0x88>)
 800241a:	2180      	movs	r1, #128	@ 0x80
 800241c:	00c9      	lsls	r1, r1, #3
 800241e:	430a      	orrs	r2, r1
 8002420:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002422:	4b0a      	ldr	r3, [pc, #40]	@ (800244c <HAL_RTC_MspInit+0x88>)
 8002424:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002426:	2380      	movs	r3, #128	@ 0x80
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4013      	ands	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8002430:	2200      	movs	r2, #0
 8002432:	2100      	movs	r1, #0
 8002434:	2002      	movs	r0, #2
 8002436:	f000 fab5 	bl	80029a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800243a:	2002      	movs	r0, #2
 800243c:	f000 fac7 	bl	80029ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002440:	46c0      	nop			@ (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	b00f      	add	sp, #60	@ 0x3c
 8002446:	bd90      	pop	{r4, r7, pc}
 8002448:	40002800 	.word	0x40002800
 800244c:	40021000 	.word	0x40021000

08002450 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002450:	b590      	push	{r4, r7, lr}
 8002452:	b08f      	sub	sp, #60	@ 0x3c
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002458:	2410      	movs	r4, #16
 800245a:	193b      	adds	r3, r7, r4
 800245c:	0018      	movs	r0, r3
 800245e:	2328      	movs	r3, #40	@ 0x28
 8002460:	001a      	movs	r2, r3
 8002462:	2100      	movs	r1, #0
 8002464:	f004 fa2c 	bl	80068c0 <memset>
  if(htim_pwm->Instance==TIM1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1b      	ldr	r2, [pc, #108]	@ (80024dc <HAL_TIM_PWM_MspInit+0x8c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d11d      	bne.n	80024ae <HAL_TIM_PWM_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8002472:	193b      	adds	r3, r7, r4
 8002474:	2280      	movs	r2, #128	@ 0x80
 8002476:	0392      	lsls	r2, r2, #14
 8002478:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800247a:	193b      	adds	r3, r7, r4
 800247c:	2200      	movs	r2, #0
 800247e:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002480:	193b      	adds	r3, r7, r4
 8002482:	0018      	movs	r0, r3
 8002484:	f001 fff4 	bl	8004470 <HAL_RCCEx_PeriphCLKConfig>
 8002488:	1e03      	subs	r3, r0, #0
 800248a:	d001      	beq.n	8002490 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 800248c:	f7ff fd86 	bl	8001f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002490:	4b13      	ldr	r3, [pc, #76]	@ (80024e0 <HAL_TIM_PWM_MspInit+0x90>)
 8002492:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002494:	4b12      	ldr	r3, [pc, #72]	@ (80024e0 <HAL_TIM_PWM_MspInit+0x90>)
 8002496:	2180      	movs	r1, #128	@ 0x80
 8002498:	0109      	lsls	r1, r1, #4
 800249a:	430a      	orrs	r2, r1
 800249c:	641a      	str	r2, [r3, #64]	@ 0x40
 800249e:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <HAL_TIM_PWM_MspInit+0x90>)
 80024a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024a2:	2380      	movs	r3, #128	@ 0x80
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	4013      	ands	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024ac:	e011      	b.n	80024d2 <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	2380      	movs	r3, #128	@ 0x80
 80024b4:	05db      	lsls	r3, r3, #23
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d10b      	bne.n	80024d2 <HAL_TIM_PWM_MspInit+0x82>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ba:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <HAL_TIM_PWM_MspInit+0x90>)
 80024bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024be:	4b08      	ldr	r3, [pc, #32]	@ (80024e0 <HAL_TIM_PWM_MspInit+0x90>)
 80024c0:	2101      	movs	r1, #1
 80024c2:	430a      	orrs	r2, r1
 80024c4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024c6:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <HAL_TIM_PWM_MspInit+0x90>)
 80024c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ca:	2201      	movs	r2, #1
 80024cc:	4013      	ands	r3, r2
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	68bb      	ldr	r3, [r7, #8]
}
 80024d2:	46c0      	nop			@ (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b00f      	add	sp, #60	@ 0x3c
 80024d8:	bd90      	pop	{r4, r7, pc}
 80024da:	46c0      	nop			@ (mov r8, r8)
 80024dc:	40012c00 	.word	0x40012c00
 80024e0:	40021000 	.word	0x40021000

080024e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a18      	ldr	r2, [pc, #96]	@ (8002554 <HAL_TIM_Base_MspInit+0x70>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10e      	bne.n	8002514 <HAL_TIM_Base_MspInit+0x30>
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80024f6:	4b18      	ldr	r3, [pc, #96]	@ (8002558 <HAL_TIM_Base_MspInit+0x74>)
 80024f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024fa:	4b17      	ldr	r3, [pc, #92]	@ (8002558 <HAL_TIM_Base_MspInit+0x74>)
 80024fc:	2180      	movs	r1, #128	@ 0x80
 80024fe:	0209      	lsls	r1, r1, #8
 8002500:	430a      	orrs	r2, r1
 8002502:	641a      	str	r2, [r3, #64]	@ 0x40
 8002504:	4b14      	ldr	r3, [pc, #80]	@ (8002558 <HAL_TIM_Base_MspInit+0x74>)
 8002506:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002508:	2380      	movs	r3, #128	@ 0x80
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	4013      	ands	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002512:	e01a      	b.n	800254a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a10      	ldr	r2, [pc, #64]	@ (800255c <HAL_TIM_Base_MspInit+0x78>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d115      	bne.n	800254a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800251e:	4b0e      	ldr	r3, [pc, #56]	@ (8002558 <HAL_TIM_Base_MspInit+0x74>)
 8002520:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002522:	4b0d      	ldr	r3, [pc, #52]	@ (8002558 <HAL_TIM_Base_MspInit+0x74>)
 8002524:	2180      	movs	r1, #128	@ 0x80
 8002526:	0289      	lsls	r1, r1, #10
 8002528:	430a      	orrs	r2, r1
 800252a:	641a      	str	r2, [r3, #64]	@ 0x40
 800252c:	4b0a      	ldr	r3, [pc, #40]	@ (8002558 <HAL_TIM_Base_MspInit+0x74>)
 800252e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002530:	2380      	movs	r3, #128	@ 0x80
 8002532:	029b      	lsls	r3, r3, #10
 8002534:	4013      	ands	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	2015      	movs	r0, #21
 8002540:	f000 fa30 	bl	80029a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002544:	2015      	movs	r0, #21
 8002546:	f000 fa42 	bl	80029ce <HAL_NVIC_EnableIRQ>
}
 800254a:	46c0      	nop			@ (mov r8, r8)
 800254c:	46bd      	mov	sp, r7
 800254e:	b004      	add	sp, #16
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	40002000 	.word	0x40002000
 8002558:	40021000 	.word	0x40021000
 800255c:	40014400 	.word	0x40014400

08002560 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b08b      	sub	sp, #44	@ 0x2c
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	2414      	movs	r4, #20
 800256a:	193b      	adds	r3, r7, r4
 800256c:	0018      	movs	r0, r3
 800256e:	2314      	movs	r3, #20
 8002570:	001a      	movs	r2, r3
 8002572:	2100      	movs	r1, #0
 8002574:	f004 f9a4 	bl	80068c0 <memset>
  if(htim->Instance==TIM1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a29      	ldr	r2, [pc, #164]	@ (8002624 <HAL_TIM_MspPostInit+0xc4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d124      	bne.n	80025cc <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002582:	4b29      	ldr	r3, [pc, #164]	@ (8002628 <HAL_TIM_MspPostInit+0xc8>)
 8002584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002586:	4b28      	ldr	r3, [pc, #160]	@ (8002628 <HAL_TIM_MspPostInit+0xc8>)
 8002588:	2101      	movs	r1, #1
 800258a:	430a      	orrs	r2, r1
 800258c:	635a      	str	r2, [r3, #52]	@ 0x34
 800258e:	4b26      	ldr	r3, [pc, #152]	@ (8002628 <HAL_TIM_MspPostInit+0xc8>)
 8002590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002592:	2201      	movs	r2, #1
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800259a:	193b      	adds	r3, r7, r4
 800259c:	2280      	movs	r2, #128	@ 0x80
 800259e:	0052      	lsls	r2, r2, #1
 80025a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	0021      	movs	r1, r4
 80025a4:	187b      	adds	r3, r7, r1
 80025a6:	2202      	movs	r2, #2
 80025a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	187b      	adds	r3, r7, r1
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	187b      	adds	r3, r7, r1
 80025b2:	2200      	movs	r2, #0
 80025b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80025b6:	187b      	adds	r3, r7, r1
 80025b8:	2202      	movs	r2, #2
 80025ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025bc:	187a      	adds	r2, r7, r1
 80025be:	23a0      	movs	r3, #160	@ 0xa0
 80025c0:	05db      	lsls	r3, r3, #23
 80025c2:	0011      	movs	r1, r2
 80025c4:	0018      	movs	r0, r3
 80025c6:	f000 fa1f 	bl	8002a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80025ca:	e027      	b.n	800261c <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM2)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	2380      	movs	r3, #128	@ 0x80
 80025d2:	05db      	lsls	r3, r3, #23
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d121      	bne.n	800261c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025d8:	4b13      	ldr	r3, [pc, #76]	@ (8002628 <HAL_TIM_MspPostInit+0xc8>)
 80025da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025dc:	4b12      	ldr	r3, [pc, #72]	@ (8002628 <HAL_TIM_MspPostInit+0xc8>)
 80025de:	2104      	movs	r1, #4
 80025e0:	430a      	orrs	r2, r1
 80025e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80025e4:	4b10      	ldr	r3, [pc, #64]	@ (8002628 <HAL_TIM_MspPostInit+0xc8>)
 80025e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e8:	2204      	movs	r2, #4
 80025ea:	4013      	ands	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 80025f0:	2114      	movs	r1, #20
 80025f2:	187b      	adds	r3, r7, r1
 80025f4:	2240      	movs	r2, #64	@ 0x40
 80025f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	187b      	adds	r3, r7, r1
 80025fa:	2202      	movs	r2, #2
 80025fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	187b      	adds	r3, r7, r1
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	187b      	adds	r3, r7, r1
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800260a:	187b      	adds	r3, r7, r1
 800260c:	2202      	movs	r2, #2
 800260e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 8002610:	187b      	adds	r3, r7, r1
 8002612:	4a06      	ldr	r2, [pc, #24]	@ (800262c <HAL_TIM_MspPostInit+0xcc>)
 8002614:	0019      	movs	r1, r3
 8002616:	0010      	movs	r0, r2
 8002618:	f000 f9f6 	bl	8002a08 <HAL_GPIO_Init>
}
 800261c:	46c0      	nop			@ (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	b00b      	add	sp, #44	@ 0x2c
 8002622:	bd90      	pop	{r4, r7, pc}
 8002624:	40012c00 	.word	0x40012c00
 8002628:	40021000 	.word	0x40021000
 800262c:	50000800 	.word	0x50000800

08002630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002634:	46c0      	nop			@ (mov r8, r8)
 8002636:	e7fd      	b.n	8002634 <NMI_Handler+0x4>

08002638 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800263c:	46c0      	nop			@ (mov r8, r8)
 800263e:	e7fd      	b.n	800263c <HardFault_Handler+0x4>

08002640 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002644:	46c0      	nop			@ (mov r8, r8)
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800264e:	46c0      	nop			@ (mov r8, r8)
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002658:	f000 f8dc 	bl	8002814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800265c:	46c0      	nop			@ (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002668:	4b03      	ldr	r3, [pc, #12]	@ (8002678 <RTC_TAMP_IRQHandler+0x14>)
 800266a:	0018      	movs	r0, r3
 800266c:	f002 fd7e 	bl	800516c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8002670:	46c0      	nop			@ (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	46c0      	nop			@ (mov r8, r8)
 8002678:	2000011c 	.word	0x2000011c

0800267c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002680:	46c0      	nop			@ (mov r8, r8)
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 800268a:	2001      	movs	r0, #1
 800268c:	f000 fb76 	bl	8002d7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 8002690:	2002      	movs	r0, #2
 8002692:	f000 fb73 	bl	8002d7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002696:	46c0      	nop			@ (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 80026a0:	2004      	movs	r0, #4
 80026a2:	f000 fb6b 	bl	8002d7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 80026a6:	2008      	movs	r0, #8
 80026a8:	f000 fb68 	bl	8002d7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80026ac:	46c0      	nop			@ (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 80026b6:	2380      	movs	r3, #128	@ 0x80
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	0018      	movs	r0, r3
 80026bc:	f000 fb5e 	bl	8002d7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80026c0:	46c0      	nop			@ (mov r8, r8)
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80026cc:	4b03      	ldr	r3, [pc, #12]	@ (80026dc <TIM16_IRQHandler+0x14>)
 80026ce:	0018      	movs	r0, r3
 80026d0:	f003 fa6e 	bl	8005bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80026d4:	46c0      	nop			@ (mov r8, r8)
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	46c0      	nop			@ (mov r8, r8)
 80026dc:	2000022c 	.word	0x2000022c

080026e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026e4:	46c0      	nop			@ (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026ec:	480d      	ldr	r0, [pc, #52]	@ (8002724 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026f0:	f7ff fff6 	bl	80026e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026f4:	480c      	ldr	r0, [pc, #48]	@ (8002728 <LoopForever+0x6>)
  ldr r1, =_edata
 80026f6:	490d      	ldr	r1, [pc, #52]	@ (800272c <LoopForever+0xa>)
  ldr r2, =_sidata
 80026f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002730 <LoopForever+0xe>)
  movs r3, #0
 80026fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026fc:	e002      	b.n	8002704 <LoopCopyDataInit>

080026fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002702:	3304      	adds	r3, #4

08002704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002708:	d3f9      	bcc.n	80026fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800270a:	4a0a      	ldr	r2, [pc, #40]	@ (8002734 <LoopForever+0x12>)
  ldr r4, =_ebss
 800270c:	4c0a      	ldr	r4, [pc, #40]	@ (8002738 <LoopForever+0x16>)
  movs r3, #0
 800270e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002710:	e001      	b.n	8002716 <LoopFillZerobss>

08002712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002714:	3204      	adds	r2, #4

08002716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002718:	d3fb      	bcc.n	8002712 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800271a:	f004 f8d9 	bl	80068d0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800271e:	f7fe f9ad 	bl	8000a7c <main>

08002722 <LoopForever>:

LoopForever:
  b LoopForever
 8002722:	e7fe      	b.n	8002722 <LoopForever>
  ldr   r0, =_estack
 8002724:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800272c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002730:	08006a18 	.word	0x08006a18
  ldr r2, =_sbss
 8002734:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002738:	200002f0 	.word	0x200002f0

0800273c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800273c:	e7fe      	b.n	800273c <ADC1_IRQHandler>
	...

08002740 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002746:	1dfb      	adds	r3, r7, #7
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800274c:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <HAL_Init+0x3c>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b0a      	ldr	r3, [pc, #40]	@ (800277c <HAL_Init+0x3c>)
 8002752:	2180      	movs	r1, #128	@ 0x80
 8002754:	0049      	lsls	r1, r1, #1
 8002756:	430a      	orrs	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800275a:	2003      	movs	r0, #3
 800275c:	f000 f810 	bl	8002780 <HAL_InitTick>
 8002760:	1e03      	subs	r3, r0, #0
 8002762:	d003      	beq.n	800276c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002764:	1dfb      	adds	r3, r7, #7
 8002766:	2201      	movs	r2, #1
 8002768:	701a      	strb	r2, [r3, #0]
 800276a:	e001      	b.n	8002770 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800276c:	f7ff fd9c 	bl	80022a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002770:	1dfb      	adds	r3, r7, #7
 8002772:	781b      	ldrb	r3, [r3, #0]
}
 8002774:	0018      	movs	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	b002      	add	sp, #8
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40022000 	.word	0x40022000

08002780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002780:	b590      	push	{r4, r7, lr}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002788:	230f      	movs	r3, #15
 800278a:	18fb      	adds	r3, r7, r3
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002790:	4b1d      	ldr	r3, [pc, #116]	@ (8002808 <HAL_InitTick+0x88>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d02b      	beq.n	80027f0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002798:	4b1c      	ldr	r3, [pc, #112]	@ (800280c <HAL_InitTick+0x8c>)
 800279a:	681c      	ldr	r4, [r3, #0]
 800279c:	4b1a      	ldr	r3, [pc, #104]	@ (8002808 <HAL_InitTick+0x88>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	0019      	movs	r1, r3
 80027a2:	23fa      	movs	r3, #250	@ 0xfa
 80027a4:	0098      	lsls	r0, r3, #2
 80027a6:	f7fd fcad 	bl	8000104 <__udivsi3>
 80027aa:	0003      	movs	r3, r0
 80027ac:	0019      	movs	r1, r3
 80027ae:	0020      	movs	r0, r4
 80027b0:	f7fd fca8 	bl	8000104 <__udivsi3>
 80027b4:	0003      	movs	r3, r0
 80027b6:	0018      	movs	r0, r3
 80027b8:	f000 f919 	bl	80029ee <HAL_SYSTICK_Config>
 80027bc:	1e03      	subs	r3, r0, #0
 80027be:	d112      	bne.n	80027e6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d80a      	bhi.n	80027dc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	2301      	movs	r3, #1
 80027ca:	425b      	negs	r3, r3
 80027cc:	2200      	movs	r2, #0
 80027ce:	0018      	movs	r0, r3
 80027d0:	f000 f8e8 	bl	80029a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002810 <HAL_InitTick+0x90>)
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	e00d      	b.n	80027f8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80027dc:	230f      	movs	r3, #15
 80027de:	18fb      	adds	r3, r7, r3
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]
 80027e4:	e008      	b.n	80027f8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027e6:	230f      	movs	r3, #15
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	e003      	b.n	80027f8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027f0:	230f      	movs	r3, #15
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80027f8:	230f      	movs	r3, #15
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	781b      	ldrb	r3, [r3, #0]
}
 80027fe:	0018      	movs	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	b005      	add	sp, #20
 8002804:	bd90      	pop	{r4, r7, pc}
 8002806:	46c0      	nop			@ (mov r8, r8)
 8002808:	20000070 	.word	0x20000070
 800280c:	20000068 	.word	0x20000068
 8002810:	2000006c 	.word	0x2000006c

08002814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002818:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <HAL_IncTick+0x1c>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	001a      	movs	r2, r3
 800281e:	4b05      	ldr	r3, [pc, #20]	@ (8002834 <HAL_IncTick+0x20>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	18d2      	adds	r2, r2, r3
 8002824:	4b03      	ldr	r3, [pc, #12]	@ (8002834 <HAL_IncTick+0x20>)
 8002826:	601a      	str	r2, [r3, #0]
}
 8002828:	46c0      	nop			@ (mov r8, r8)
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	20000070 	.word	0x20000070
 8002834:	200002ec 	.word	0x200002ec

08002838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  return uwTick;
 800283c:	4b02      	ldr	r3, [pc, #8]	@ (8002848 <HAL_GetTick+0x10>)
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			@ (mov r8, r8)
 8002848:	200002ec 	.word	0x200002ec

0800284c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	0002      	movs	r2, r0
 8002854:	1dfb      	adds	r3, r7, #7
 8002856:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002858:	1dfb      	adds	r3, r7, #7
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b7f      	cmp	r3, #127	@ 0x7f
 800285e:	d809      	bhi.n	8002874 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002860:	1dfb      	adds	r3, r7, #7
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	001a      	movs	r2, r3
 8002866:	231f      	movs	r3, #31
 8002868:	401a      	ands	r2, r3
 800286a:	4b04      	ldr	r3, [pc, #16]	@ (800287c <__NVIC_EnableIRQ+0x30>)
 800286c:	2101      	movs	r1, #1
 800286e:	4091      	lsls	r1, r2
 8002870:	000a      	movs	r2, r1
 8002872:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002874:	46c0      	nop			@ (mov r8, r8)
 8002876:	46bd      	mov	sp, r7
 8002878:	b002      	add	sp, #8
 800287a:	bd80      	pop	{r7, pc}
 800287c:	e000e100 	.word	0xe000e100

08002880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	0002      	movs	r2, r0
 8002888:	6039      	str	r1, [r7, #0]
 800288a:	1dfb      	adds	r3, r7, #7
 800288c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800288e:	1dfb      	adds	r3, r7, #7
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b7f      	cmp	r3, #127	@ 0x7f
 8002894:	d828      	bhi.n	80028e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002896:	4a2f      	ldr	r2, [pc, #188]	@ (8002954 <__NVIC_SetPriority+0xd4>)
 8002898:	1dfb      	adds	r3, r7, #7
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	b25b      	sxtb	r3, r3
 800289e:	089b      	lsrs	r3, r3, #2
 80028a0:	33c0      	adds	r3, #192	@ 0xc0
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	589b      	ldr	r3, [r3, r2]
 80028a6:	1dfa      	adds	r2, r7, #7
 80028a8:	7812      	ldrb	r2, [r2, #0]
 80028aa:	0011      	movs	r1, r2
 80028ac:	2203      	movs	r2, #3
 80028ae:	400a      	ands	r2, r1
 80028b0:	00d2      	lsls	r2, r2, #3
 80028b2:	21ff      	movs	r1, #255	@ 0xff
 80028b4:	4091      	lsls	r1, r2
 80028b6:	000a      	movs	r2, r1
 80028b8:	43d2      	mvns	r2, r2
 80028ba:	401a      	ands	r2, r3
 80028bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	019b      	lsls	r3, r3, #6
 80028c2:	22ff      	movs	r2, #255	@ 0xff
 80028c4:	401a      	ands	r2, r3
 80028c6:	1dfb      	adds	r3, r7, #7
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	0018      	movs	r0, r3
 80028cc:	2303      	movs	r3, #3
 80028ce:	4003      	ands	r3, r0
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028d4:	481f      	ldr	r0, [pc, #124]	@ (8002954 <__NVIC_SetPriority+0xd4>)
 80028d6:	1dfb      	adds	r3, r7, #7
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	b25b      	sxtb	r3, r3
 80028dc:	089b      	lsrs	r3, r3, #2
 80028de:	430a      	orrs	r2, r1
 80028e0:	33c0      	adds	r3, #192	@ 0xc0
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80028e6:	e031      	b.n	800294c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002958 <__NVIC_SetPriority+0xd8>)
 80028ea:	1dfb      	adds	r3, r7, #7
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	0019      	movs	r1, r3
 80028f0:	230f      	movs	r3, #15
 80028f2:	400b      	ands	r3, r1
 80028f4:	3b08      	subs	r3, #8
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	3306      	adds	r3, #6
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	18d3      	adds	r3, r2, r3
 80028fe:	3304      	adds	r3, #4
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	1dfa      	adds	r2, r7, #7
 8002904:	7812      	ldrb	r2, [r2, #0]
 8002906:	0011      	movs	r1, r2
 8002908:	2203      	movs	r2, #3
 800290a:	400a      	ands	r2, r1
 800290c:	00d2      	lsls	r2, r2, #3
 800290e:	21ff      	movs	r1, #255	@ 0xff
 8002910:	4091      	lsls	r1, r2
 8002912:	000a      	movs	r2, r1
 8002914:	43d2      	mvns	r2, r2
 8002916:	401a      	ands	r2, r3
 8002918:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	019b      	lsls	r3, r3, #6
 800291e:	22ff      	movs	r2, #255	@ 0xff
 8002920:	401a      	ands	r2, r3
 8002922:	1dfb      	adds	r3, r7, #7
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	0018      	movs	r0, r3
 8002928:	2303      	movs	r3, #3
 800292a:	4003      	ands	r3, r0
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002930:	4809      	ldr	r0, [pc, #36]	@ (8002958 <__NVIC_SetPriority+0xd8>)
 8002932:	1dfb      	adds	r3, r7, #7
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	001c      	movs	r4, r3
 8002938:	230f      	movs	r3, #15
 800293a:	4023      	ands	r3, r4
 800293c:	3b08      	subs	r3, #8
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	430a      	orrs	r2, r1
 8002942:	3306      	adds	r3, #6
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	18c3      	adds	r3, r0, r3
 8002948:	3304      	adds	r3, #4
 800294a:	601a      	str	r2, [r3, #0]
}
 800294c:	46c0      	nop			@ (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b003      	add	sp, #12
 8002952:	bd90      	pop	{r4, r7, pc}
 8002954:	e000e100 	.word	0xe000e100
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	1e5a      	subs	r2, r3, #1
 8002968:	2380      	movs	r3, #128	@ 0x80
 800296a:	045b      	lsls	r3, r3, #17
 800296c:	429a      	cmp	r2, r3
 800296e:	d301      	bcc.n	8002974 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002970:	2301      	movs	r3, #1
 8002972:	e010      	b.n	8002996 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002974:	4b0a      	ldr	r3, [pc, #40]	@ (80029a0 <SysTick_Config+0x44>)
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	3a01      	subs	r2, #1
 800297a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800297c:	2301      	movs	r3, #1
 800297e:	425b      	negs	r3, r3
 8002980:	2103      	movs	r1, #3
 8002982:	0018      	movs	r0, r3
 8002984:	f7ff ff7c 	bl	8002880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002988:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <SysTick_Config+0x44>)
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800298e:	4b04      	ldr	r3, [pc, #16]	@ (80029a0 <SysTick_Config+0x44>)
 8002990:	2207      	movs	r2, #7
 8002992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002994:	2300      	movs	r3, #0
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b002      	add	sp, #8
 800299c:	bd80      	pop	{r7, pc}
 800299e:	46c0      	nop			@ (mov r8, r8)
 80029a0:	e000e010 	.word	0xe000e010

080029a4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	210f      	movs	r1, #15
 80029b0:	187b      	adds	r3, r7, r1
 80029b2:	1c02      	adds	r2, r0, #0
 80029b4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	187b      	adds	r3, r7, r1
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	b25b      	sxtb	r3, r3
 80029be:	0011      	movs	r1, r2
 80029c0:	0018      	movs	r0, r3
 80029c2:	f7ff ff5d 	bl	8002880 <__NVIC_SetPriority>
}
 80029c6:	46c0      	nop			@ (mov r8, r8)
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b004      	add	sp, #16
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	0002      	movs	r2, r0
 80029d6:	1dfb      	adds	r3, r7, #7
 80029d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029da:	1dfb      	adds	r3, r7, #7
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	b25b      	sxtb	r3, r3
 80029e0:	0018      	movs	r0, r3
 80029e2:	f7ff ff33 	bl	800284c <__NVIC_EnableIRQ>
}
 80029e6:	46c0      	nop			@ (mov r8, r8)
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b002      	add	sp, #8
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	0018      	movs	r0, r3
 80029fa:	f7ff ffaf 	bl	800295c <SysTick_Config>
 80029fe:	0003      	movs	r3, r0
}
 8002a00:	0018      	movs	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b002      	add	sp, #8
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a16:	e147      	b.n	8002ca8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4091      	lsls	r1, r2
 8002a22:	000a      	movs	r2, r1
 8002a24:	4013      	ands	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d100      	bne.n	8002a30 <HAL_GPIO_Init+0x28>
 8002a2e:	e138      	b.n	8002ca2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2203      	movs	r2, #3
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d005      	beq.n	8002a48 <HAL_GPIO_Init+0x40>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2203      	movs	r2, #3
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d130      	bne.n	8002aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	2203      	movs	r2, #3
 8002a54:	409a      	lsls	r2, r3
 8002a56:	0013      	movs	r3, r2
 8002a58:	43da      	mvns	r2, r3
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	0013      	movs	r3, r2
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a7e:	2201      	movs	r2, #1
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	409a      	lsls	r2, r3
 8002a84:	0013      	movs	r3, r2
 8002a86:	43da      	mvns	r2, r3
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	091b      	lsrs	r3, r3, #4
 8002a94:	2201      	movs	r2, #1
 8002a96:	401a      	ands	r2, r3
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	0013      	movs	r3, r2
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2203      	movs	r2, #3
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d017      	beq.n	8002ae6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	0013      	movs	r3, r2
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	0013      	movs	r3, r2
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2203      	movs	r2, #3
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d123      	bne.n	8002b3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	08da      	lsrs	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3208      	adds	r2, #8
 8002afa:	0092      	lsls	r2, r2, #2
 8002afc:	58d3      	ldr	r3, [r2, r3]
 8002afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2207      	movs	r2, #7
 8002b04:	4013      	ands	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	220f      	movs	r2, #15
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	0013      	movs	r3, r2
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4013      	ands	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2107      	movs	r1, #7
 8002b1e:	400b      	ands	r3, r1
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	409a      	lsls	r2, r3
 8002b24:	0013      	movs	r3, r2
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	08da      	lsrs	r2, r3, #3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3208      	adds	r2, #8
 8002b34:	0092      	lsls	r2, r2, #2
 8002b36:	6939      	ldr	r1, [r7, #16]
 8002b38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	2203      	movs	r2, #3
 8002b46:	409a      	lsls	r2, r3
 8002b48:	0013      	movs	r3, r2
 8002b4a:	43da      	mvns	r2, r3
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2203      	movs	r2, #3
 8002b58:	401a      	ands	r2, r3
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	0013      	movs	r3, r2
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	23c0      	movs	r3, #192	@ 0xc0
 8002b74:	029b      	lsls	r3, r3, #10
 8002b76:	4013      	ands	r3, r2
 8002b78:	d100      	bne.n	8002b7c <HAL_GPIO_Init+0x174>
 8002b7a:	e092      	b.n	8002ca2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002b7c:	4a50      	ldr	r2, [pc, #320]	@ (8002cc0 <HAL_GPIO_Init+0x2b8>)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	089b      	lsrs	r3, r3, #2
 8002b82:	3318      	adds	r3, #24
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	589b      	ldr	r3, [r3, r2]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	4013      	ands	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	220f      	movs	r2, #15
 8002b94:	409a      	lsls	r2, r3
 8002b96:	0013      	movs	r3, r2
 8002b98:	43da      	mvns	r2, r3
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	23a0      	movs	r3, #160	@ 0xa0
 8002ba4:	05db      	lsls	r3, r3, #23
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d013      	beq.n	8002bd2 <HAL_GPIO_Init+0x1ca>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a45      	ldr	r2, [pc, #276]	@ (8002cc4 <HAL_GPIO_Init+0x2bc>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d00d      	beq.n	8002bce <HAL_GPIO_Init+0x1c6>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a44      	ldr	r2, [pc, #272]	@ (8002cc8 <HAL_GPIO_Init+0x2c0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d007      	beq.n	8002bca <HAL_GPIO_Init+0x1c2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a43      	ldr	r2, [pc, #268]	@ (8002ccc <HAL_GPIO_Init+0x2c4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d101      	bne.n	8002bc6 <HAL_GPIO_Init+0x1be>
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e006      	b.n	8002bd4 <HAL_GPIO_Init+0x1cc>
 8002bc6:	2305      	movs	r3, #5
 8002bc8:	e004      	b.n	8002bd4 <HAL_GPIO_Init+0x1cc>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e002      	b.n	8002bd4 <HAL_GPIO_Init+0x1cc>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <HAL_GPIO_Init+0x1cc>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	2103      	movs	r1, #3
 8002bd8:	400a      	ands	r2, r1
 8002bda:	00d2      	lsls	r2, r2, #3
 8002bdc:	4093      	lsls	r3, r2
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002be4:	4936      	ldr	r1, [pc, #216]	@ (8002cc0 <HAL_GPIO_Init+0x2b8>)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	089b      	lsrs	r3, r3, #2
 8002bea:	3318      	adds	r3, #24
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bf2:	4b33      	ldr	r3, [pc, #204]	@ (8002cc0 <HAL_GPIO_Init+0x2b8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	2380      	movs	r3, #128	@ 0x80
 8002c08:	035b      	lsls	r3, r3, #13
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c16:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc0 <HAL_GPIO_Init+0x2b8>)
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002c1c:	4b28      	ldr	r3, [pc, #160]	@ (8002cc0 <HAL_GPIO_Init+0x2b8>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	43da      	mvns	r2, r3
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	2380      	movs	r3, #128	@ 0x80
 8002c32:	039b      	lsls	r3, r3, #14
 8002c34:	4013      	ands	r3, r2
 8002c36:	d003      	beq.n	8002c40 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c40:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc0 <HAL_GPIO_Init+0x2b8>)
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c46:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc0 <HAL_GPIO_Init+0x2b8>)
 8002c48:	2384      	movs	r3, #132	@ 0x84
 8002c4a:	58d3      	ldr	r3, [r2, r3]
 8002c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	43da      	mvns	r2, r3
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4013      	ands	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	2380      	movs	r3, #128	@ 0x80
 8002c5e:	029b      	lsls	r3, r3, #10
 8002c60:	4013      	ands	r3, r2
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c6c:	4914      	ldr	r1, [pc, #80]	@ (8002cc0 <HAL_GPIO_Init+0x2b8>)
 8002c6e:	2284      	movs	r2, #132	@ 0x84
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002c74:	4a12      	ldr	r2, [pc, #72]	@ (8002cc0 <HAL_GPIO_Init+0x2b8>)
 8002c76:	2380      	movs	r3, #128	@ 0x80
 8002c78:	58d3      	ldr	r3, [r2, r3]
 8002c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4013      	ands	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	2380      	movs	r3, #128	@ 0x80
 8002c8c:	025b      	lsls	r3, r3, #9
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c9a:	4909      	ldr	r1, [pc, #36]	@ (8002cc0 <HAL_GPIO_Init+0x2b8>)
 8002c9c:	2280      	movs	r2, #128	@ 0x80
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	40da      	lsrs	r2, r3
 8002cb0:	1e13      	subs	r3, r2, #0
 8002cb2:	d000      	beq.n	8002cb6 <HAL_GPIO_Init+0x2ae>
 8002cb4:	e6b0      	b.n	8002a18 <HAL_GPIO_Init+0x10>
  }
}
 8002cb6:	46c0      	nop			@ (mov r8, r8)
 8002cb8:	46c0      	nop			@ (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b006      	add	sp, #24
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021800 	.word	0x40021800
 8002cc4:	50000400 	.word	0x50000400
 8002cc8:	50000800 	.word	0x50000800
 8002ccc:	50000c00 	.word	0x50000c00

08002cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	000a      	movs	r2, r1
 8002cda:	1cbb      	adds	r3, r7, #2
 8002cdc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	1cba      	adds	r2, r7, #2
 8002ce4:	8812      	ldrh	r2, [r2, #0]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d004      	beq.n	8002cf4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002cea:	230f      	movs	r3, #15
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
 8002cf2:	e003      	b.n	8002cfc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cf4:	230f      	movs	r3, #15
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002cfc:	230f      	movs	r3, #15
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	781b      	ldrb	r3, [r3, #0]
}
 8002d02:	0018      	movs	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b004      	add	sp, #16
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	0008      	movs	r0, r1
 8002d14:	0011      	movs	r1, r2
 8002d16:	1cbb      	adds	r3, r7, #2
 8002d18:	1c02      	adds	r2, r0, #0
 8002d1a:	801a      	strh	r2, [r3, #0]
 8002d1c:	1c7b      	adds	r3, r7, #1
 8002d1e:	1c0a      	adds	r2, r1, #0
 8002d20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d22:	1c7b      	adds	r3, r7, #1
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d004      	beq.n	8002d34 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d2a:	1cbb      	adds	r3, r7, #2
 8002d2c:	881a      	ldrh	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d32:	e003      	b.n	8002d3c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d34:	1cbb      	adds	r3, r7, #2
 8002d36:	881a      	ldrh	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d3c:	46c0      	nop			@ (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b002      	add	sp, #8
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	000a      	movs	r2, r1
 8002d4e:	1cbb      	adds	r3, r7, #2
 8002d50:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d58:	1cbb      	adds	r3, r7, #2
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	041a      	lsls	r2, r3, #16
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	1cb9      	adds	r1, r7, #2
 8002d68:	8809      	ldrh	r1, [r1, #0]
 8002d6a:	400b      	ands	r3, r1
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	619a      	str	r2, [r3, #24]
}
 8002d72:	46c0      	nop			@ (mov r8, r8)
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b004      	add	sp, #16
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	0002      	movs	r2, r0
 8002d84:	1dbb      	adds	r3, r7, #6
 8002d86:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002d88:	4b10      	ldr	r3, [pc, #64]	@ (8002dcc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	1dba      	adds	r2, r7, #6
 8002d8e:	8812      	ldrh	r2, [r2, #0]
 8002d90:	4013      	ands	r3, r2
 8002d92:	d008      	beq.n	8002da6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002d94:	4b0d      	ldr	r3, [pc, #52]	@ (8002dcc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002d96:	1dba      	adds	r2, r7, #6
 8002d98:	8812      	ldrh	r2, [r2, #0]
 8002d9a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002d9c:	1dbb      	adds	r3, r7, #6
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	0018      	movs	r0, r3
 8002da2:	f000 f815 	bl	8002dd0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002da6:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	1dba      	adds	r2, r7, #6
 8002dac:	8812      	ldrh	r2, [r2, #0]
 8002dae:	4013      	ands	r3, r2
 8002db0:	d008      	beq.n	8002dc4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002db2:	4b06      	ldr	r3, [pc, #24]	@ (8002dcc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002db4:	1dba      	adds	r2, r7, #6
 8002db6:	8812      	ldrh	r2, [r2, #0]
 8002db8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002dba:	1dbb      	adds	r3, r7, #6
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f7fe fd40 	bl	8001844 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002dc4:	46c0      	nop			@ (mov r8, r8)
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b002      	add	sp, #8
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40021800 	.word	0x40021800

08002dd0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	1dbb      	adds	r3, r7, #6
 8002dda:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002ddc:	46c0      	nop			@ (mov r8, r8)
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b002      	add	sp, #8
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e08f      	b.n	8002f16 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2241      	movs	r2, #65	@ 0x41
 8002dfa:	5c9b      	ldrb	r3, [r3, r2]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d107      	bne.n	8002e12 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2240      	movs	r2, #64	@ 0x40
 8002e06:	2100      	movs	r1, #0
 8002e08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f7ff fa77 	bl	8002300 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2241      	movs	r2, #65	@ 0x41
 8002e16:	2124      	movs	r1, #36	@ 0x24
 8002e18:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	438a      	bics	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	493b      	ldr	r1, [pc, #236]	@ (8002f20 <HAL_I2C_Init+0x13c>)
 8002e34:	400a      	ands	r2, r1
 8002e36:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4938      	ldr	r1, [pc, #224]	@ (8002f24 <HAL_I2C_Init+0x140>)
 8002e44:	400a      	ands	r2, r1
 8002e46:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d108      	bne.n	8002e62 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2180      	movs	r1, #128	@ 0x80
 8002e5a:	0209      	lsls	r1, r1, #8
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	e007      	b.n	8002e72 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2184      	movs	r1, #132	@ 0x84
 8002e6c:	0209      	lsls	r1, r1, #8
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d109      	bne.n	8002e8e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2180      	movs	r1, #128	@ 0x80
 8002e86:	0109      	lsls	r1, r1, #4
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	e007      	b.n	8002e9e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4923      	ldr	r1, [pc, #140]	@ (8002f28 <HAL_I2C_Init+0x144>)
 8002e9a:	400a      	ands	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4920      	ldr	r1, [pc, #128]	@ (8002f2c <HAL_I2C_Init+0x148>)
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	491a      	ldr	r1, [pc, #104]	@ (8002f24 <HAL_I2C_Init+0x140>)
 8002eba:	400a      	ands	r2, r1
 8002ebc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69d9      	ldr	r1, [r3, #28]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1a      	ldr	r2, [r3, #32]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2241      	movs	r2, #65	@ 0x41
 8002f02:	2120      	movs	r1, #32
 8002f04:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2242      	movs	r2, #66	@ 0x42
 8002f10:	2100      	movs	r1, #0
 8002f12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b002      	add	sp, #8
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	f0ffffff 	.word	0xf0ffffff
 8002f24:	ffff7fff 	.word	0xffff7fff
 8002f28:	fffff7ff 	.word	0xfffff7ff
 8002f2c:	02008000 	.word	0x02008000

08002f30 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b089      	sub	sp, #36	@ 0x24
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	0008      	movs	r0, r1
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	230a      	movs	r3, #10
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	1c02      	adds	r2, r0, #0
 8002f44:	801a      	strh	r2, [r3, #0]
 8002f46:	2308      	movs	r3, #8
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	1c0a      	adds	r2, r1, #0
 8002f4c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2241      	movs	r2, #65	@ 0x41
 8002f52:	5c9b      	ldrb	r3, [r3, r2]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d000      	beq.n	8002f5c <HAL_I2C_Master_Transmit+0x2c>
 8002f5a:	e10a      	b.n	8003172 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2240      	movs	r2, #64	@ 0x40
 8002f60:	5c9b      	ldrb	r3, [r3, r2]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_I2C_Master_Transmit+0x3a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e104      	b.n	8003174 <HAL_I2C_Master_Transmit+0x244>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2240      	movs	r2, #64	@ 0x40
 8002f6e:	2101      	movs	r1, #1
 8002f70:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f72:	f7ff fc61 	bl	8002838 <HAL_GetTick>
 8002f76:	0003      	movs	r3, r0
 8002f78:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f7a:	2380      	movs	r3, #128	@ 0x80
 8002f7c:	0219      	lsls	r1, r3, #8
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	2319      	movs	r3, #25
 8002f86:	2201      	movs	r2, #1
 8002f88:	f000 fa26 	bl	80033d8 <I2C_WaitOnFlagUntilTimeout>
 8002f8c:	1e03      	subs	r3, r0, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0ef      	b.n	8003174 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2241      	movs	r2, #65	@ 0x41
 8002f98:	2121      	movs	r1, #33	@ 0x21
 8002f9a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2242      	movs	r2, #66	@ 0x42
 8002fa0:	2110      	movs	r1, #16
 8002fa2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	18ba      	adds	r2, r7, r2
 8002fb6:	8812      	ldrh	r2, [r2, #0]
 8002fb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2bff      	cmp	r3, #255	@ 0xff
 8002fc8:	d906      	bls.n	8002fd8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	22ff      	movs	r2, #255	@ 0xff
 8002fce:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002fd0:	2380      	movs	r3, #128	@ 0x80
 8002fd2:	045b      	lsls	r3, r3, #17
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	e007      	b.n	8002fe8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002fe2:	2380      	movs	r3, #128	@ 0x80
 8002fe4:	049b      	lsls	r3, r3, #18
 8002fe6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d027      	beq.n	8003040 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff4:	781a      	ldrb	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003024:	b2db      	uxtb	r3, r3
 8003026:	3301      	adds	r3, #1
 8003028:	b2da      	uxtb	r2, r3
 800302a:	697c      	ldr	r4, [r7, #20]
 800302c:	230a      	movs	r3, #10
 800302e:	18fb      	adds	r3, r7, r3
 8003030:	8819      	ldrh	r1, [r3, #0]
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	4b51      	ldr	r3, [pc, #324]	@ (800317c <HAL_I2C_Master_Transmit+0x24c>)
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	0023      	movs	r3, r4
 800303a:	f000 fc45 	bl	80038c8 <I2C_TransferConfig>
 800303e:	e06f      	b.n	8003120 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003044:	b2da      	uxtb	r2, r3
 8003046:	697c      	ldr	r4, [r7, #20]
 8003048:	230a      	movs	r3, #10
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	8819      	ldrh	r1, [r3, #0]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	4b4a      	ldr	r3, [pc, #296]	@ (800317c <HAL_I2C_Master_Transmit+0x24c>)
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	0023      	movs	r3, r4
 8003056:	f000 fc37 	bl	80038c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800305a:	e061      	b.n	8003120 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	0018      	movs	r0, r3
 8003064:	f000 fa10 	bl	8003488 <I2C_WaitOnTXISFlagUntilTimeout>
 8003068:	1e03      	subs	r3, r0, #0
 800306a:	d001      	beq.n	8003070 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e081      	b.n	8003174 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003074:	781a      	ldrb	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d03a      	beq.n	8003120 <HAL_I2C_Master_Transmit+0x1f0>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d136      	bne.n	8003120 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	0013      	movs	r3, r2
 80030bc:	2200      	movs	r2, #0
 80030be:	2180      	movs	r1, #128	@ 0x80
 80030c0:	f000 f98a 	bl	80033d8 <I2C_WaitOnFlagUntilTimeout>
 80030c4:	1e03      	subs	r3, r0, #0
 80030c6:	d001      	beq.n	80030cc <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e053      	b.n	8003174 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2bff      	cmp	r3, #255	@ 0xff
 80030d4:	d911      	bls.n	80030fa <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	22ff      	movs	r2, #255	@ 0xff
 80030da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	2380      	movs	r3, #128	@ 0x80
 80030e4:	045c      	lsls	r4, r3, #17
 80030e6:	230a      	movs	r3, #10
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	8819      	ldrh	r1, [r3, #0]
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	2300      	movs	r3, #0
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	0023      	movs	r3, r4
 80030f4:	f000 fbe8 	bl	80038c8 <I2C_TransferConfig>
 80030f8:	e012      	b.n	8003120 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003108:	b2da      	uxtb	r2, r3
 800310a:	2380      	movs	r3, #128	@ 0x80
 800310c:	049c      	lsls	r4, r3, #18
 800310e:	230a      	movs	r3, #10
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	8819      	ldrh	r1, [r3, #0]
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	2300      	movs	r3, #0
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	0023      	movs	r3, r4
 800311c:	f000 fbd4 	bl	80038c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d198      	bne.n	800305c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	0018      	movs	r0, r3
 8003132:	f000 f9ef 	bl	8003514 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003136:	1e03      	subs	r3, r0, #0
 8003138:	d001      	beq.n	800313e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e01a      	b.n	8003174 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2220      	movs	r2, #32
 8003144:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	490b      	ldr	r1, [pc, #44]	@ (8003180 <HAL_I2C_Master_Transmit+0x250>)
 8003152:	400a      	ands	r2, r1
 8003154:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2241      	movs	r2, #65	@ 0x41
 800315a:	2120      	movs	r1, #32
 800315c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2242      	movs	r2, #66	@ 0x42
 8003162:	2100      	movs	r1, #0
 8003164:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2240      	movs	r2, #64	@ 0x40
 800316a:	2100      	movs	r1, #0
 800316c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	e000      	b.n	8003174 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003172:	2302      	movs	r3, #2
  }
}
 8003174:	0018      	movs	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	b007      	add	sp, #28
 800317a:	bd90      	pop	{r4, r7, pc}
 800317c:	80002000 	.word	0x80002000
 8003180:	fe00e800 	.word	0xfe00e800

08003184 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003184:	b590      	push	{r4, r7, lr}
 8003186:	b089      	sub	sp, #36	@ 0x24
 8003188:	af02      	add	r7, sp, #8
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	0008      	movs	r0, r1
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	0019      	movs	r1, r3
 8003192:	230a      	movs	r3, #10
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	1c02      	adds	r2, r0, #0
 8003198:	801a      	strh	r2, [r3, #0]
 800319a:	2308      	movs	r3, #8
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	1c0a      	adds	r2, r1, #0
 80031a0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2241      	movs	r2, #65	@ 0x41
 80031a6:	5c9b      	ldrb	r3, [r3, r2]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d000      	beq.n	80031b0 <HAL_I2C_Master_Receive+0x2c>
 80031ae:	e0e8      	b.n	8003382 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2240      	movs	r2, #64	@ 0x40
 80031b4:	5c9b      	ldrb	r3, [r3, r2]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_I2C_Master_Receive+0x3a>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e0e2      	b.n	8003384 <HAL_I2C_Master_Receive+0x200>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2240      	movs	r2, #64	@ 0x40
 80031c2:	2101      	movs	r1, #1
 80031c4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031c6:	f7ff fb37 	bl	8002838 <HAL_GetTick>
 80031ca:	0003      	movs	r3, r0
 80031cc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031ce:	2380      	movs	r3, #128	@ 0x80
 80031d0:	0219      	lsls	r1, r3, #8
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	2319      	movs	r3, #25
 80031da:	2201      	movs	r2, #1
 80031dc:	f000 f8fc 	bl	80033d8 <I2C_WaitOnFlagUntilTimeout>
 80031e0:	1e03      	subs	r3, r0, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0cd      	b.n	8003384 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2241      	movs	r2, #65	@ 0x41
 80031ec:	2122      	movs	r1, #34	@ 0x22
 80031ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2242      	movs	r2, #66	@ 0x42
 80031f4:	2110      	movs	r1, #16
 80031f6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2208      	movs	r2, #8
 8003208:	18ba      	adds	r2, r7, r2
 800320a:	8812      	ldrh	r2, [r2, #0]
 800320c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	2bff      	cmp	r3, #255	@ 0xff
 800321c:	d911      	bls.n	8003242 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	22ff      	movs	r2, #255	@ 0xff
 8003222:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003228:	b2da      	uxtb	r2, r3
 800322a:	2380      	movs	r3, #128	@ 0x80
 800322c:	045c      	lsls	r4, r3, #17
 800322e:	230a      	movs	r3, #10
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	8819      	ldrh	r1, [r3, #0]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	4b55      	ldr	r3, [pc, #340]	@ (800338c <HAL_I2C_Master_Receive+0x208>)
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	0023      	movs	r3, r4
 800323c:	f000 fb44 	bl	80038c8 <I2C_TransferConfig>
 8003240:	e076      	b.n	8003330 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003250:	b2da      	uxtb	r2, r3
 8003252:	2380      	movs	r3, #128	@ 0x80
 8003254:	049c      	lsls	r4, r3, #18
 8003256:	230a      	movs	r3, #10
 8003258:	18fb      	adds	r3, r7, r3
 800325a:	8819      	ldrh	r1, [r3, #0]
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	4b4b      	ldr	r3, [pc, #300]	@ (800338c <HAL_I2C_Master_Receive+0x208>)
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	0023      	movs	r3, r4
 8003264:	f000 fb30 	bl	80038c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003268:	e062      	b.n	8003330 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	0018      	movs	r0, r3
 8003272:	f000 f993 	bl	800359c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003276:	1e03      	subs	r3, r0, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e082      	b.n	8003384 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d03a      	beq.n	8003330 <HAL_I2C_Master_Receive+0x1ac>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d136      	bne.n	8003330 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	0013      	movs	r3, r2
 80032cc:	2200      	movs	r2, #0
 80032ce:	2180      	movs	r1, #128	@ 0x80
 80032d0:	f000 f882 	bl	80033d8 <I2C_WaitOnFlagUntilTimeout>
 80032d4:	1e03      	subs	r3, r0, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e053      	b.n	8003384 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2bff      	cmp	r3, #255	@ 0xff
 80032e4:	d911      	bls.n	800330a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	22ff      	movs	r2, #255	@ 0xff
 80032ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	2380      	movs	r3, #128	@ 0x80
 80032f4:	045c      	lsls	r4, r3, #17
 80032f6:	230a      	movs	r3, #10
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	8819      	ldrh	r1, [r3, #0]
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	2300      	movs	r3, #0
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	0023      	movs	r3, r4
 8003304:	f000 fae0 	bl	80038c8 <I2C_TransferConfig>
 8003308:	e012      	b.n	8003330 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003318:	b2da      	uxtb	r2, r3
 800331a:	2380      	movs	r3, #128	@ 0x80
 800331c:	049c      	lsls	r4, r3, #18
 800331e:	230a      	movs	r3, #10
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	8819      	ldrh	r1, [r3, #0]
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	2300      	movs	r3, #0
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	0023      	movs	r3, r4
 800332c:	f000 facc 	bl	80038c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d197      	bne.n	800326a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	0018      	movs	r0, r3
 8003342:	f000 f8e7 	bl	8003514 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003346:	1e03      	subs	r3, r0, #0
 8003348:	d001      	beq.n	800334e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e01a      	b.n	8003384 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2220      	movs	r2, #32
 8003354:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	490b      	ldr	r1, [pc, #44]	@ (8003390 <HAL_I2C_Master_Receive+0x20c>)
 8003362:	400a      	ands	r2, r1
 8003364:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2241      	movs	r2, #65	@ 0x41
 800336a:	2120      	movs	r1, #32
 800336c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2242      	movs	r2, #66	@ 0x42
 8003372:	2100      	movs	r1, #0
 8003374:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2240      	movs	r2, #64	@ 0x40
 800337a:	2100      	movs	r1, #0
 800337c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	e000      	b.n	8003384 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003382:	2302      	movs	r3, #2
  }
}
 8003384:	0018      	movs	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	b007      	add	sp, #28
 800338a:	bd90      	pop	{r4, r7, pc}
 800338c:	80002400 	.word	0x80002400
 8003390:	fe00e800 	.word	0xfe00e800

08003394 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2202      	movs	r2, #2
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d103      	bne.n	80033b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2200      	movs	r2, #0
 80033b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	2201      	movs	r2, #1
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d007      	beq.n	80033d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699a      	ldr	r2, [r3, #24]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2101      	movs	r1, #1
 80033cc:	430a      	orrs	r2, r1
 80033ce:	619a      	str	r2, [r3, #24]
  }
}
 80033d0:	46c0      	nop			@ (mov r8, r8)
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b002      	add	sp, #8
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	1dfb      	adds	r3, r7, #7
 80033e6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e8:	e03a      	b.n	8003460 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	6839      	ldr	r1, [r7, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f000 f971 	bl	80036d8 <I2C_IsErrorOccurred>
 80033f6:	1e03      	subs	r3, r0, #0
 80033f8:	d001      	beq.n	80033fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e040      	b.n	8003480 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	3301      	adds	r3, #1
 8003402:	d02d      	beq.n	8003460 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003404:	f7ff fa18 	bl	8002838 <HAL_GetTick>
 8003408:	0002      	movs	r2, r0
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d302      	bcc.n	800341a <I2C_WaitOnFlagUntilTimeout+0x42>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d122      	bne.n	8003460 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	4013      	ands	r3, r2
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	425a      	negs	r2, r3
 800342a:	4153      	adcs	r3, r2
 800342c:	b2db      	uxtb	r3, r3
 800342e:	001a      	movs	r2, r3
 8003430:	1dfb      	adds	r3, r7, #7
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d113      	bne.n	8003460 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343c:	2220      	movs	r2, #32
 800343e:	431a      	orrs	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2241      	movs	r2, #65	@ 0x41
 8003448:	2120      	movs	r1, #32
 800344a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2242      	movs	r2, #66	@ 0x42
 8003450:	2100      	movs	r1, #0
 8003452:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2240      	movs	r2, #64	@ 0x40
 8003458:	2100      	movs	r1, #0
 800345a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e00f      	b.n	8003480 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	4013      	ands	r3, r2
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	425a      	negs	r2, r3
 8003470:	4153      	adcs	r3, r2
 8003472:	b2db      	uxtb	r3, r3
 8003474:	001a      	movs	r2, r3
 8003476:	1dfb      	adds	r3, r7, #7
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d0b5      	beq.n	80033ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	0018      	movs	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	b004      	add	sp, #16
 8003486:	bd80      	pop	{r7, pc}

08003488 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003494:	e032      	b.n	80034fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	0018      	movs	r0, r3
 800349e:	f000 f91b 	bl	80036d8 <I2C_IsErrorOccurred>
 80034a2:	1e03      	subs	r3, r0, #0
 80034a4:	d001      	beq.n	80034aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e030      	b.n	800350c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	3301      	adds	r3, #1
 80034ae:	d025      	beq.n	80034fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b0:	f7ff f9c2 	bl	8002838 <HAL_GetTick>
 80034b4:	0002      	movs	r2, r0
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d302      	bcc.n	80034c6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d11a      	bne.n	80034fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2202      	movs	r2, #2
 80034ce:	4013      	ands	r3, r2
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d013      	beq.n	80034fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d8:	2220      	movs	r2, #32
 80034da:	431a      	orrs	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2241      	movs	r2, #65	@ 0x41
 80034e4:	2120      	movs	r1, #32
 80034e6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2242      	movs	r2, #66	@ 0x42
 80034ec:	2100      	movs	r1, #0
 80034ee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2240      	movs	r2, #64	@ 0x40
 80034f4:	2100      	movs	r1, #0
 80034f6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e007      	b.n	800350c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2202      	movs	r2, #2
 8003504:	4013      	ands	r3, r2
 8003506:	2b02      	cmp	r3, #2
 8003508:	d1c5      	bne.n	8003496 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	0018      	movs	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	b004      	add	sp, #16
 8003512:	bd80      	pop	{r7, pc}

08003514 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003520:	e02f      	b.n	8003582 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	68b9      	ldr	r1, [r7, #8]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	0018      	movs	r0, r3
 800352a:	f000 f8d5 	bl	80036d8 <I2C_IsErrorOccurred>
 800352e:	1e03      	subs	r3, r0, #0
 8003530:	d001      	beq.n	8003536 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e02d      	b.n	8003592 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003536:	f7ff f97f 	bl	8002838 <HAL_GetTick>
 800353a:	0002      	movs	r2, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d11a      	bne.n	8003582 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	2220      	movs	r2, #32
 8003554:	4013      	ands	r3, r2
 8003556:	2b20      	cmp	r3, #32
 8003558:	d013      	beq.n	8003582 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355e:	2220      	movs	r2, #32
 8003560:	431a      	orrs	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2241      	movs	r2, #65	@ 0x41
 800356a:	2120      	movs	r1, #32
 800356c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2242      	movs	r2, #66	@ 0x42
 8003572:	2100      	movs	r1, #0
 8003574:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2240      	movs	r2, #64	@ 0x40
 800357a:	2100      	movs	r1, #0
 800357c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e007      	b.n	8003592 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	2220      	movs	r2, #32
 800358a:	4013      	ands	r3, r2
 800358c:	2b20      	cmp	r3, #32
 800358e:	d1c8      	bne.n	8003522 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	0018      	movs	r0, r3
 8003594:	46bd      	mov	sp, r7
 8003596:	b004      	add	sp, #16
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035a8:	2317      	movs	r3, #23
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80035b0:	e07b      	b.n	80036aa <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	0018      	movs	r0, r3
 80035ba:	f000 f88d 	bl	80036d8 <I2C_IsErrorOccurred>
 80035be:	1e03      	subs	r3, r0, #0
 80035c0:	d003      	beq.n	80035ca <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80035c2:	2317      	movs	r3, #23
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	2201      	movs	r2, #1
 80035c8:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	2220      	movs	r2, #32
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d140      	bne.n	800365a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80035d8:	2117      	movs	r1, #23
 80035da:	187b      	adds	r3, r7, r1
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d13b      	bne.n	800365a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2204      	movs	r2, #4
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d106      	bne.n	80035fe <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80035f8:	187b      	adds	r3, r7, r1
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	2210      	movs	r2, #16
 8003606:	4013      	ands	r3, r2
 8003608:	2b10      	cmp	r3, #16
 800360a:	d123      	bne.n	8003654 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2210      	movs	r2, #16
 8003612:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2204      	movs	r2, #4
 8003618:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2220      	movs	r2, #32
 8003620:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4929      	ldr	r1, [pc, #164]	@ (80036d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800362e:	400a      	ands	r2, r1
 8003630:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2241      	movs	r2, #65	@ 0x41
 8003636:	2120      	movs	r1, #32
 8003638:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2242      	movs	r2, #66	@ 0x42
 800363e:	2100      	movs	r1, #0
 8003640:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2240      	movs	r2, #64	@ 0x40
 8003646:	2100      	movs	r1, #0
 8003648:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800364a:	2317      	movs	r3, #23
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	2201      	movs	r2, #1
 8003650:	701a      	strb	r2, [r3, #0]
 8003652:	e002      	b.n	800365a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800365a:	f7ff f8ed 	bl	8002838 <HAL_GetTick>
 800365e:	0002      	movs	r2, r0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	429a      	cmp	r2, r3
 8003668:	d302      	bcc.n	8003670 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d11c      	bne.n	80036aa <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003670:	2017      	movs	r0, #23
 8003672:	183b      	adds	r3, r7, r0
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d117      	bne.n	80036aa <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2204      	movs	r2, #4
 8003682:	4013      	ands	r3, r2
 8003684:	2b04      	cmp	r3, #4
 8003686:	d010      	beq.n	80036aa <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368c:	2220      	movs	r2, #32
 800368e:	431a      	orrs	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2241      	movs	r2, #65	@ 0x41
 8003698:	2120      	movs	r1, #32
 800369a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2240      	movs	r2, #64	@ 0x40
 80036a0:	2100      	movs	r1, #0
 80036a2:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80036a4:	183b      	adds	r3, r7, r0
 80036a6:	2201      	movs	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	2204      	movs	r2, #4
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d005      	beq.n	80036c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80036b8:	2317      	movs	r3, #23
 80036ba:	18fb      	adds	r3, r7, r3
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d100      	bne.n	80036c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80036c2:	e776      	b.n	80035b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80036c4:	2317      	movs	r3, #23
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	781b      	ldrb	r3, [r3, #0]
}
 80036ca:	0018      	movs	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b006      	add	sp, #24
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	fe00e800 	.word	0xfe00e800

080036d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08a      	sub	sp, #40	@ 0x28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e4:	2327      	movs	r3, #39	@ 0x27
 80036e6:	18fb      	adds	r3, r7, r3
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	2210      	movs	r2, #16
 8003700:	4013      	ands	r3, r2
 8003702:	d100      	bne.n	8003706 <I2C_IsErrorOccurred+0x2e>
 8003704:	e079      	b.n	80037fa <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2210      	movs	r2, #16
 800370c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800370e:	e057      	b.n	80037c0 <I2C_IsErrorOccurred+0xe8>
 8003710:	2227      	movs	r2, #39	@ 0x27
 8003712:	18bb      	adds	r3, r7, r2
 8003714:	18ba      	adds	r2, r7, r2
 8003716:	7812      	ldrb	r2, [r2, #0]
 8003718:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	3301      	adds	r3, #1
 800371e:	d04f      	beq.n	80037c0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003720:	f7ff f88a 	bl	8002838 <HAL_GetTick>
 8003724:	0002      	movs	r2, r0
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	429a      	cmp	r2, r3
 800372e:	d302      	bcc.n	8003736 <I2C_IsErrorOccurred+0x5e>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d144      	bne.n	80037c0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	2380      	movs	r3, #128	@ 0x80
 800373e:	01db      	lsls	r3, r3, #7
 8003740:	4013      	ands	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003744:	2013      	movs	r0, #19
 8003746:	183b      	adds	r3, r7, r0
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	2142      	movs	r1, #66	@ 0x42
 800374c:	5c52      	ldrb	r2, [r2, r1]
 800374e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699a      	ldr	r2, [r3, #24]
 8003756:	2380      	movs	r3, #128	@ 0x80
 8003758:	021b      	lsls	r3, r3, #8
 800375a:	401a      	ands	r2, r3
 800375c:	2380      	movs	r3, #128	@ 0x80
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	429a      	cmp	r2, r3
 8003762:	d126      	bne.n	80037b2 <I2C_IsErrorOccurred+0xda>
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	2380      	movs	r3, #128	@ 0x80
 8003768:	01db      	lsls	r3, r3, #7
 800376a:	429a      	cmp	r2, r3
 800376c:	d021      	beq.n	80037b2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800376e:	183b      	adds	r3, r7, r0
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b20      	cmp	r3, #32
 8003774:	d01d      	beq.n	80037b2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2180      	movs	r1, #128	@ 0x80
 8003782:	01c9      	lsls	r1, r1, #7
 8003784:	430a      	orrs	r2, r1
 8003786:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003788:	f7ff f856 	bl	8002838 <HAL_GetTick>
 800378c:	0003      	movs	r3, r0
 800378e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003790:	e00f      	b.n	80037b2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003792:	f7ff f851 	bl	8002838 <HAL_GetTick>
 8003796:	0002      	movs	r2, r0
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b19      	cmp	r3, #25
 800379e:	d908      	bls.n	80037b2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	2220      	movs	r2, #32
 80037a4:	4313      	orrs	r3, r2
 80037a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80037a8:	2327      	movs	r3, #39	@ 0x27
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	2201      	movs	r2, #1
 80037ae:	701a      	strb	r2, [r3, #0]

              break;
 80037b0:	e006      	b.n	80037c0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	2220      	movs	r2, #32
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d1e8      	bne.n	8003792 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	2220      	movs	r2, #32
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	d004      	beq.n	80037d8 <I2C_IsErrorOccurred+0x100>
 80037ce:	2327      	movs	r3, #39	@ 0x27
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d09b      	beq.n	8003710 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037d8:	2327      	movs	r3, #39	@ 0x27
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2220      	movs	r2, #32
 80037e8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	2204      	movs	r2, #4
 80037ee:	4313      	orrs	r3, r2
 80037f0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037f2:	2327      	movs	r3, #39	@ 0x27
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	2201      	movs	r2, #1
 80037f8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	2380      	movs	r3, #128	@ 0x80
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	4013      	ands	r3, r2
 800380a:	d00c      	beq.n	8003826 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	2201      	movs	r2, #1
 8003810:	4313      	orrs	r3, r2
 8003812:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2280      	movs	r2, #128	@ 0x80
 800381a:	0052      	lsls	r2, r2, #1
 800381c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800381e:	2327      	movs	r3, #39	@ 0x27
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	2201      	movs	r2, #1
 8003824:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	2380      	movs	r3, #128	@ 0x80
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	4013      	ands	r3, r2
 800382e:	d00c      	beq.n	800384a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	2208      	movs	r2, #8
 8003834:	4313      	orrs	r3, r2
 8003836:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2280      	movs	r2, #128	@ 0x80
 800383e:	00d2      	lsls	r2, r2, #3
 8003840:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003842:	2327      	movs	r3, #39	@ 0x27
 8003844:	18fb      	adds	r3, r7, r3
 8003846:	2201      	movs	r2, #1
 8003848:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	2380      	movs	r3, #128	@ 0x80
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4013      	ands	r3, r2
 8003852:	d00c      	beq.n	800386e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	2202      	movs	r2, #2
 8003858:	4313      	orrs	r3, r2
 800385a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2280      	movs	r2, #128	@ 0x80
 8003862:	0092      	lsls	r2, r2, #2
 8003864:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003866:	2327      	movs	r3, #39	@ 0x27
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	2201      	movs	r2, #1
 800386c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800386e:	2327      	movs	r3, #39	@ 0x27
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01d      	beq.n	80038b4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	0018      	movs	r0, r3
 800387c:	f7ff fd8a 	bl	8003394 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	490e      	ldr	r1, [pc, #56]	@ (80038c4 <I2C_IsErrorOccurred+0x1ec>)
 800388c:	400a      	ands	r2, r1
 800388e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	431a      	orrs	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2241      	movs	r2, #65	@ 0x41
 80038a0:	2120      	movs	r1, #32
 80038a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2242      	movs	r2, #66	@ 0x42
 80038a8:	2100      	movs	r1, #0
 80038aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2240      	movs	r2, #64	@ 0x40
 80038b0:	2100      	movs	r1, #0
 80038b2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80038b4:	2327      	movs	r3, #39	@ 0x27
 80038b6:	18fb      	adds	r3, r7, r3
 80038b8:	781b      	ldrb	r3, [r3, #0]
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b00a      	add	sp, #40	@ 0x28
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	fe00e800 	.word	0xfe00e800

080038c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038c8:	b590      	push	{r4, r7, lr}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	0008      	movs	r0, r1
 80038d2:	0011      	movs	r1, r2
 80038d4:	607b      	str	r3, [r7, #4]
 80038d6:	240a      	movs	r4, #10
 80038d8:	193b      	adds	r3, r7, r4
 80038da:	1c02      	adds	r2, r0, #0
 80038dc:	801a      	strh	r2, [r3, #0]
 80038de:	2009      	movs	r0, #9
 80038e0:	183b      	adds	r3, r7, r0
 80038e2:	1c0a      	adds	r2, r1, #0
 80038e4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038e6:	193b      	adds	r3, r7, r4
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	059b      	lsls	r3, r3, #22
 80038ec:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038ee:	183b      	adds	r3, r7, r0
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	0419      	lsls	r1, r3, #16
 80038f4:	23ff      	movs	r3, #255	@ 0xff
 80038f6:	041b      	lsls	r3, r3, #16
 80038f8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038fa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003902:	4313      	orrs	r3, r2
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	085b      	lsrs	r3, r3, #1
 8003908:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003912:	0d51      	lsrs	r1, r2, #21
 8003914:	2280      	movs	r2, #128	@ 0x80
 8003916:	00d2      	lsls	r2, r2, #3
 8003918:	400a      	ands	r2, r1
 800391a:	4907      	ldr	r1, [pc, #28]	@ (8003938 <I2C_TransferConfig+0x70>)
 800391c:	430a      	orrs	r2, r1
 800391e:	43d2      	mvns	r2, r2
 8003920:	401a      	ands	r2, r3
 8003922:	0011      	movs	r1, r2
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800392e:	46c0      	nop			@ (mov r8, r8)
 8003930:	46bd      	mov	sp, r7
 8003932:	b007      	add	sp, #28
 8003934:	bd90      	pop	{r4, r7, pc}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	03ff63ff 	.word	0x03ff63ff

0800393c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2241      	movs	r2, #65	@ 0x41
 800394a:	5c9b      	ldrb	r3, [r3, r2]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b20      	cmp	r3, #32
 8003950:	d138      	bne.n	80039c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2240      	movs	r2, #64	@ 0x40
 8003956:	5c9b      	ldrb	r3, [r3, r2]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800395c:	2302      	movs	r3, #2
 800395e:	e032      	b.n	80039c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2240      	movs	r2, #64	@ 0x40
 8003964:	2101      	movs	r1, #1
 8003966:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2241      	movs	r2, #65	@ 0x41
 800396c:	2124      	movs	r1, #36	@ 0x24
 800396e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2101      	movs	r1, #1
 800397c:	438a      	bics	r2, r1
 800397e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4911      	ldr	r1, [pc, #68]	@ (80039d0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800398c:	400a      	ands	r2, r1
 800398e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6819      	ldr	r1, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2101      	movs	r1, #1
 80039ac:	430a      	orrs	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2241      	movs	r2, #65	@ 0x41
 80039b4:	2120      	movs	r1, #32
 80039b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2240      	movs	r2, #64	@ 0x40
 80039bc:	2100      	movs	r1, #0
 80039be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	e000      	b.n	80039c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039c4:	2302      	movs	r3, #2
  }
}
 80039c6:	0018      	movs	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b002      	add	sp, #8
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	46c0      	nop			@ (mov r8, r8)
 80039d0:	ffffefff 	.word	0xffffefff

080039d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2241      	movs	r2, #65	@ 0x41
 80039e2:	5c9b      	ldrb	r3, [r3, r2]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d139      	bne.n	8003a5e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2240      	movs	r2, #64	@ 0x40
 80039ee:	5c9b      	ldrb	r3, [r3, r2]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e033      	b.n	8003a60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2240      	movs	r2, #64	@ 0x40
 80039fc:	2101      	movs	r1, #1
 80039fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2241      	movs	r2, #65	@ 0x41
 8003a04:	2124      	movs	r1, #36	@ 0x24
 8003a06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2101      	movs	r1, #1
 8003a14:	438a      	bics	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4a11      	ldr	r2, [pc, #68]	@ (8003a68 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2101      	movs	r1, #1
 8003a46:	430a      	orrs	r2, r1
 8003a48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2241      	movs	r2, #65	@ 0x41
 8003a4e:	2120      	movs	r1, #32
 8003a50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2240      	movs	r2, #64	@ 0x40
 8003a56:	2100      	movs	r1, #0
 8003a58:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e000      	b.n	8003a60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a5e:	2302      	movs	r3, #2
  }
}
 8003a60:	0018      	movs	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b004      	add	sp, #16
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	fffff0ff 	.word	0xfffff0ff

08003a6c <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a70:	4b04      	ldr	r3, [pc, #16]	@ (8003a84 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4b03      	ldr	r3, [pc, #12]	@ (8003a84 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003a76:	2180      	movs	r1, #128	@ 0x80
 8003a78:	0049      	lsls	r1, r1, #1
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	601a      	str	r2, [r3, #0]
}
 8003a7e:	46c0      	nop			@ (mov r8, r8)
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40007000 	.word	0x40007000

08003a88 <HAL_PWR_DisableBkUpAccess>:
/**
  * @brief  Disable access to the backup domain
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a8c:	4b04      	ldr	r3, [pc, #16]	@ (8003aa0 <HAL_PWR_DisableBkUpAccess+0x18>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4b03      	ldr	r3, [pc, #12]	@ (8003aa0 <HAL_PWR_DisableBkUpAccess+0x18>)
 8003a92:	4904      	ldr	r1, [pc, #16]	@ (8003aa4 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8003a94:	400a      	ands	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]
}
 8003a98:	46c0      	nop			@ (mov r8, r8)
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	46c0      	nop			@ (mov r8, r8)
 8003aa0:	40007000 	.word	0x40007000
 8003aa4:	fffffeff 	.word	0xfffffeff

08003aa8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003ab0:	4b19      	ldr	r3, [pc, #100]	@ (8003b18 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a19      	ldr	r2, [pc, #100]	@ (8003b1c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	0019      	movs	r1, r3
 8003aba:	4b17      	ldr	r3, [pc, #92]	@ (8003b18 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	2380      	movs	r3, #128	@ 0x80
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d11f      	bne.n	8003b0c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003acc:	4b14      	ldr	r3, [pc, #80]	@ (8003b20 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	0013      	movs	r3, r2
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	189b      	adds	r3, r3, r2
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	4912      	ldr	r1, [pc, #72]	@ (8003b24 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003ada:	0018      	movs	r0, r3
 8003adc:	f7fc fb12 	bl	8000104 <__udivsi3>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ae6:	e008      	b.n	8003afa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	e001      	b.n	8003afa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e009      	b.n	8003b0e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003afa:	4b07      	ldr	r3, [pc, #28]	@ (8003b18 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	2380      	movs	r3, #128	@ 0x80
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	401a      	ands	r2, r3
 8003b04:	2380      	movs	r3, #128	@ 0x80
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d0ed      	beq.n	8003ae8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	0018      	movs	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	b004      	add	sp, #16
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	40007000 	.word	0x40007000
 8003b1c:	fffff9ff 	.word	0xfffff9ff
 8003b20:	20000068 	.word	0x20000068
 8003b24:	000f4240 	.word	0x000f4240

08003b28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e2fe      	b.n	8004138 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	4013      	ands	r3, r2
 8003b42:	d100      	bne.n	8003b46 <HAL_RCC_OscConfig+0x1e>
 8003b44:	e07c      	b.n	8003c40 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b46:	4bc3      	ldr	r3, [pc, #780]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2238      	movs	r2, #56	@ 0x38
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b50:	4bc0      	ldr	r3, [pc, #768]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2203      	movs	r2, #3
 8003b56:	4013      	ands	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b10      	cmp	r3, #16
 8003b5e:	d102      	bne.n	8003b66 <HAL_RCC_OscConfig+0x3e>
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d002      	beq.n	8003b6c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d10b      	bne.n	8003b84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6c:	4bb9      	ldr	r3, [pc, #740]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	2380      	movs	r3, #128	@ 0x80
 8003b72:	029b      	lsls	r3, r3, #10
 8003b74:	4013      	ands	r3, r2
 8003b76:	d062      	beq.n	8003c3e <HAL_RCC_OscConfig+0x116>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d15e      	bne.n	8003c3e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e2d9      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	2380      	movs	r3, #128	@ 0x80
 8003b8a:	025b      	lsls	r3, r3, #9
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d107      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x78>
 8003b90:	4bb0      	ldr	r3, [pc, #704]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4baf      	ldr	r3, [pc, #700]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003b96:	2180      	movs	r1, #128	@ 0x80
 8003b98:	0249      	lsls	r1, r1, #9
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	e020      	b.n	8003be2 <HAL_RCC_OscConfig+0xba>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	23a0      	movs	r3, #160	@ 0xa0
 8003ba6:	02db      	lsls	r3, r3, #11
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d10e      	bne.n	8003bca <HAL_RCC_OscConfig+0xa2>
 8003bac:	4ba9      	ldr	r3, [pc, #676]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4ba8      	ldr	r3, [pc, #672]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003bb2:	2180      	movs	r1, #128	@ 0x80
 8003bb4:	02c9      	lsls	r1, r1, #11
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	4ba6      	ldr	r3, [pc, #664]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	4ba5      	ldr	r3, [pc, #660]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003bc0:	2180      	movs	r1, #128	@ 0x80
 8003bc2:	0249      	lsls	r1, r1, #9
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e00b      	b.n	8003be2 <HAL_RCC_OscConfig+0xba>
 8003bca:	4ba2      	ldr	r3, [pc, #648]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	4ba1      	ldr	r3, [pc, #644]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003bd0:	49a1      	ldr	r1, [pc, #644]	@ (8003e58 <HAL_RCC_OscConfig+0x330>)
 8003bd2:	400a      	ands	r2, r1
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	4b9f      	ldr	r3, [pc, #636]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	4b9e      	ldr	r3, [pc, #632]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003bdc:	499f      	ldr	r1, [pc, #636]	@ (8003e5c <HAL_RCC_OscConfig+0x334>)
 8003bde:	400a      	ands	r2, r1
 8003be0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d014      	beq.n	8003c14 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bea:	f7fe fe25 	bl	8002838 <HAL_GetTick>
 8003bee:	0003      	movs	r3, r0
 8003bf0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf4:	f7fe fe20 	bl	8002838 <HAL_GetTick>
 8003bf8:	0002      	movs	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	@ 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e298      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c06:	4b93      	ldr	r3, [pc, #588]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	2380      	movs	r3, #128	@ 0x80
 8003c0c:	029b      	lsls	r3, r3, #10
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0xcc>
 8003c12:	e015      	b.n	8003c40 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c14:	f7fe fe10 	bl	8002838 <HAL_GetTick>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c1e:	f7fe fe0b 	bl	8002838 <HAL_GetTick>
 8003c22:	0002      	movs	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b64      	cmp	r3, #100	@ 0x64
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e283      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c30:	4b88      	ldr	r3, [pc, #544]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	2380      	movs	r3, #128	@ 0x80
 8003c36:	029b      	lsls	r3, r3, #10
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d1f0      	bne.n	8003c1e <HAL_RCC_OscConfig+0xf6>
 8003c3c:	e000      	b.n	8003c40 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2202      	movs	r2, #2
 8003c46:	4013      	ands	r3, r2
 8003c48:	d100      	bne.n	8003c4c <HAL_RCC_OscConfig+0x124>
 8003c4a:	e099      	b.n	8003d80 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c4c:	4b81      	ldr	r3, [pc, #516]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2238      	movs	r2, #56	@ 0x38
 8003c52:	4013      	ands	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c56:	4b7f      	ldr	r3, [pc, #508]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b10      	cmp	r3, #16
 8003c64:	d102      	bne.n	8003c6c <HAL_RCC_OscConfig+0x144>
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d002      	beq.n	8003c72 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d135      	bne.n	8003cde <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c72:	4b78      	ldr	r3, [pc, #480]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	2380      	movs	r3, #128	@ 0x80
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d005      	beq.n	8003c8a <HAL_RCC_OscConfig+0x162>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e256      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8a:	4b72      	ldr	r3, [pc, #456]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4a74      	ldr	r2, [pc, #464]	@ (8003e60 <HAL_RCC_OscConfig+0x338>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	0019      	movs	r1, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	021a      	lsls	r2, r3, #8
 8003c9a:	4b6e      	ldr	r3, [pc, #440]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d112      	bne.n	8003ccc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ca6:	4b6b      	ldr	r3, [pc, #428]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a6e      	ldr	r2, [pc, #440]	@ (8003e64 <HAL_RCC_OscConfig+0x33c>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	0019      	movs	r1, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	4b67      	ldr	r3, [pc, #412]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003cba:	4b66      	ldr	r3, [pc, #408]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	0adb      	lsrs	r3, r3, #11
 8003cc0:	2207      	movs	r2, #7
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	4a68      	ldr	r2, [pc, #416]	@ (8003e68 <HAL_RCC_OscConfig+0x340>)
 8003cc6:	40da      	lsrs	r2, r3
 8003cc8:	4b68      	ldr	r3, [pc, #416]	@ (8003e6c <HAL_RCC_OscConfig+0x344>)
 8003cca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ccc:	4b68      	ldr	r3, [pc, #416]	@ (8003e70 <HAL_RCC_OscConfig+0x348>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f7fe fd55 	bl	8002780 <HAL_InitTick>
 8003cd6:	1e03      	subs	r3, r0, #0
 8003cd8:	d051      	beq.n	8003d7e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e22c      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d030      	beq.n	8003d48 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ce6:	4b5b      	ldr	r3, [pc, #364]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a5e      	ldr	r2, [pc, #376]	@ (8003e64 <HAL_RCC_OscConfig+0x33c>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	0019      	movs	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	4b57      	ldr	r3, [pc, #348]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003cfa:	4b56      	ldr	r3, [pc, #344]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4b55      	ldr	r3, [pc, #340]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003d00:	2180      	movs	r1, #128	@ 0x80
 8003d02:	0049      	lsls	r1, r1, #1
 8003d04:	430a      	orrs	r2, r1
 8003d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fe fd96 	bl	8002838 <HAL_GetTick>
 8003d0c:	0003      	movs	r3, r0
 8003d0e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d12:	f7fe fd91 	bl	8002838 <HAL_GetTick>
 8003d16:	0002      	movs	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e209      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d24:	4b4b      	ldr	r3, [pc, #300]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	2380      	movs	r3, #128	@ 0x80
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d30:	4b48      	ldr	r3, [pc, #288]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	4a4a      	ldr	r2, [pc, #296]	@ (8003e60 <HAL_RCC_OscConfig+0x338>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	0019      	movs	r1, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	021a      	lsls	r2, r3, #8
 8003d40:	4b44      	ldr	r3, [pc, #272]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
 8003d46:	e01b      	b.n	8003d80 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003d48:	4b42      	ldr	r3, [pc, #264]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	4b41      	ldr	r3, [pc, #260]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003d4e:	4949      	ldr	r1, [pc, #292]	@ (8003e74 <HAL_RCC_OscConfig+0x34c>)
 8003d50:	400a      	ands	r2, r1
 8003d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fe fd70 	bl	8002838 <HAL_GetTick>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d5e:	f7fe fd6b 	bl	8002838 <HAL_GetTick>
 8003d62:	0002      	movs	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e1e3      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d70:	4b38      	ldr	r3, [pc, #224]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	2380      	movs	r3, #128	@ 0x80
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d1f0      	bne.n	8003d5e <HAL_RCC_OscConfig+0x236>
 8003d7c:	e000      	b.n	8003d80 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d7e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2208      	movs	r2, #8
 8003d86:	4013      	ands	r3, r2
 8003d88:	d047      	beq.n	8003e1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003d8a:	4b32      	ldr	r3, [pc, #200]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2238      	movs	r2, #56	@ 0x38
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b18      	cmp	r3, #24
 8003d94:	d10a      	bne.n	8003dac <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003d96:	4b2f      	ldr	r3, [pc, #188]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d03c      	beq.n	8003e1a <HAL_RCC_OscConfig+0x2f2>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d138      	bne.n	8003e1a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e1c5      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d019      	beq.n	8003de8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003db4:	4b27      	ldr	r3, [pc, #156]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003db6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003db8:	4b26      	ldr	r3, [pc, #152]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003dba:	2101      	movs	r1, #1
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fe fd3a 	bl	8002838 <HAL_GetTick>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dca:	f7fe fd35 	bl	8002838 <HAL_GetTick>
 8003dce:	0002      	movs	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e1ad      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003de0:	2202      	movs	r2, #2
 8003de2:	4013      	ands	r3, r2
 8003de4:	d0f1      	beq.n	8003dca <HAL_RCC_OscConfig+0x2a2>
 8003de6:	e018      	b.n	8003e1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003de8:	4b1a      	ldr	r3, [pc, #104]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003dea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003dec:	4b19      	ldr	r3, [pc, #100]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003dee:	2101      	movs	r1, #1
 8003df0:	438a      	bics	r2, r1
 8003df2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7fe fd20 	bl	8002838 <HAL_GetTick>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dfe:	f7fe fd1b 	bl	8002838 <HAL_GetTick>
 8003e02:	0002      	movs	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e193      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e10:	4b10      	ldr	r3, [pc, #64]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e14:	2202      	movs	r2, #2
 8003e16:	4013      	ands	r3, r2
 8003e18:	d1f1      	bne.n	8003dfe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2204      	movs	r2, #4
 8003e20:	4013      	ands	r3, r2
 8003e22:	d100      	bne.n	8003e26 <HAL_RCC_OscConfig+0x2fe>
 8003e24:	e0c6      	b.n	8003fb4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e26:	231f      	movs	r3, #31
 8003e28:	18fb      	adds	r3, r7, r3
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003e2e:	4b09      	ldr	r3, [pc, #36]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2238      	movs	r2, #56	@ 0x38
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b20      	cmp	r3, #32
 8003e38:	d11e      	bne.n	8003e78 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003e3a:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <HAL_RCC_OscConfig+0x32c>)
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3e:	2202      	movs	r2, #2
 8003e40:	4013      	ands	r3, r2
 8003e42:	d100      	bne.n	8003e46 <HAL_RCC_OscConfig+0x31e>
 8003e44:	e0b6      	b.n	8003fb4 <HAL_RCC_OscConfig+0x48c>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d000      	beq.n	8003e50 <HAL_RCC_OscConfig+0x328>
 8003e4e:	e0b1      	b.n	8003fb4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e171      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
 8003e54:	40021000 	.word	0x40021000
 8003e58:	fffeffff 	.word	0xfffeffff
 8003e5c:	fffbffff 	.word	0xfffbffff
 8003e60:	ffff80ff 	.word	0xffff80ff
 8003e64:	ffffc7ff 	.word	0xffffc7ff
 8003e68:	00f42400 	.word	0x00f42400
 8003e6c:	20000068 	.word	0x20000068
 8003e70:	2000006c 	.word	0x2000006c
 8003e74:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e78:	4bb1      	ldr	r3, [pc, #708]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003e7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e7c:	2380      	movs	r3, #128	@ 0x80
 8003e7e:	055b      	lsls	r3, r3, #21
 8003e80:	4013      	ands	r3, r2
 8003e82:	d101      	bne.n	8003e88 <HAL_RCC_OscConfig+0x360>
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <HAL_RCC_OscConfig+0x362>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d011      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003e8e:	4bac      	ldr	r3, [pc, #688]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003e90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e92:	4bab      	ldr	r3, [pc, #684]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003e94:	2180      	movs	r1, #128	@ 0x80
 8003e96:	0549      	lsls	r1, r1, #21
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e9c:	4ba8      	ldr	r3, [pc, #672]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003e9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ea0:	2380      	movs	r3, #128	@ 0x80
 8003ea2:	055b      	lsls	r3, r3, #21
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003eaa:	231f      	movs	r3, #31
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	2201      	movs	r2, #1
 8003eb0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eb2:	4ba4      	ldr	r3, [pc, #656]	@ (8004144 <HAL_RCC_OscConfig+0x61c>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	2380      	movs	r3, #128	@ 0x80
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d11a      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ebe:	4ba1      	ldr	r3, [pc, #644]	@ (8004144 <HAL_RCC_OscConfig+0x61c>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	4ba0      	ldr	r3, [pc, #640]	@ (8004144 <HAL_RCC_OscConfig+0x61c>)
 8003ec4:	2180      	movs	r1, #128	@ 0x80
 8003ec6:	0049      	lsls	r1, r1, #1
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003ecc:	f7fe fcb4 	bl	8002838 <HAL_GetTick>
 8003ed0:	0003      	movs	r3, r0
 8003ed2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed6:	f7fe fcaf 	bl	8002838 <HAL_GetTick>
 8003eda:	0002      	movs	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e127      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ee8:	4b96      	ldr	r3, [pc, #600]	@ (8004144 <HAL_RCC_OscConfig+0x61c>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	2380      	movs	r3, #128	@ 0x80
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d0f0      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d106      	bne.n	8003f0a <HAL_RCC_OscConfig+0x3e2>
 8003efc:	4b90      	ldr	r3, [pc, #576]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003efe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f00:	4b8f      	ldr	r3, [pc, #572]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003f02:	2101      	movs	r1, #1
 8003f04:	430a      	orrs	r2, r1
 8003f06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f08:	e01c      	b.n	8003f44 <HAL_RCC_OscConfig+0x41c>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b05      	cmp	r3, #5
 8003f10:	d10c      	bne.n	8003f2c <HAL_RCC_OscConfig+0x404>
 8003f12:	4b8b      	ldr	r3, [pc, #556]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003f14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f16:	4b8a      	ldr	r3, [pc, #552]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003f18:	2104      	movs	r1, #4
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f1e:	4b88      	ldr	r3, [pc, #544]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003f20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f22:	4b87      	ldr	r3, [pc, #540]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003f24:	2101      	movs	r1, #1
 8003f26:	430a      	orrs	r2, r1
 8003f28:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f2a:	e00b      	b.n	8003f44 <HAL_RCC_OscConfig+0x41c>
 8003f2c:	4b84      	ldr	r3, [pc, #528]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003f2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f30:	4b83      	ldr	r3, [pc, #524]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003f32:	2101      	movs	r1, #1
 8003f34:	438a      	bics	r2, r1
 8003f36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f38:	4b81      	ldr	r3, [pc, #516]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003f3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f3c:	4b80      	ldr	r3, [pc, #512]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003f3e:	2104      	movs	r1, #4
 8003f40:	438a      	bics	r2, r1
 8003f42:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d014      	beq.n	8003f76 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4c:	f7fe fc74 	bl	8002838 <HAL_GetTick>
 8003f50:	0003      	movs	r3, r0
 8003f52:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f54:	e009      	b.n	8003f6a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f56:	f7fe fc6f 	bl	8002838 <HAL_GetTick>
 8003f5a:	0002      	movs	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	4a79      	ldr	r2, [pc, #484]	@ (8004148 <HAL_RCC_OscConfig+0x620>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e0e6      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f6a:	4b75      	ldr	r3, [pc, #468]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6e:	2202      	movs	r2, #2
 8003f70:	4013      	ands	r3, r2
 8003f72:	d0f0      	beq.n	8003f56 <HAL_RCC_OscConfig+0x42e>
 8003f74:	e013      	b.n	8003f9e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f76:	f7fe fc5f 	bl	8002838 <HAL_GetTick>
 8003f7a:	0003      	movs	r3, r0
 8003f7c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f7e:	e009      	b.n	8003f94 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f80:	f7fe fc5a 	bl	8002838 <HAL_GetTick>
 8003f84:	0002      	movs	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	4a6f      	ldr	r2, [pc, #444]	@ (8004148 <HAL_RCC_OscConfig+0x620>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e0d1      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f94:	4b6a      	ldr	r3, [pc, #424]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f98:	2202      	movs	r2, #2
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003f9e:	231f      	movs	r3, #31
 8003fa0:	18fb      	adds	r3, r7, r3
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d105      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003fa8:	4b65      	ldr	r3, [pc, #404]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003faa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fac:	4b64      	ldr	r3, [pc, #400]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003fae:	4967      	ldr	r1, [pc, #412]	@ (800414c <HAL_RCC_OscConfig+0x624>)
 8003fb0:	400a      	ands	r2, r1
 8003fb2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d100      	bne.n	8003fbe <HAL_RCC_OscConfig+0x496>
 8003fbc:	e0bb      	b.n	8004136 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fbe:	4b60      	ldr	r3, [pc, #384]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2238      	movs	r2, #56	@ 0x38
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b10      	cmp	r3, #16
 8003fc8:	d100      	bne.n	8003fcc <HAL_RCC_OscConfig+0x4a4>
 8003fca:	e07b      	b.n	80040c4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d156      	bne.n	8004082 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd4:	4b5a      	ldr	r3, [pc, #360]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4b59      	ldr	r3, [pc, #356]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003fda:	495d      	ldr	r1, [pc, #372]	@ (8004150 <HAL_RCC_OscConfig+0x628>)
 8003fdc:	400a      	ands	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fe fc2a 	bl	8002838 <HAL_GetTick>
 8003fe4:	0003      	movs	r3, r0
 8003fe6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fea:	f7fe fc25 	bl	8002838 <HAL_GetTick>
 8003fee:	0002      	movs	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e09d      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ffc:	4b50      	ldr	r3, [pc, #320]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	2380      	movs	r3, #128	@ 0x80
 8004002:	049b      	lsls	r3, r3, #18
 8004004:	4013      	ands	r3, r2
 8004006:	d1f0      	bne.n	8003fea <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004008:	4b4d      	ldr	r3, [pc, #308]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	4a51      	ldr	r2, [pc, #324]	@ (8004154 <HAL_RCC_OscConfig+0x62c>)
 800400e:	4013      	ands	r3, r2
 8004010:	0019      	movs	r1, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1a      	ldr	r2, [r3, #32]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004034:	431a      	orrs	r2, r3
 8004036:	4b42      	ldr	r3, [pc, #264]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8004038:	430a      	orrs	r2, r1
 800403a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800403c:	4b40      	ldr	r3, [pc, #256]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b3f      	ldr	r3, [pc, #252]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8004042:	2180      	movs	r1, #128	@ 0x80
 8004044:	0449      	lsls	r1, r1, #17
 8004046:	430a      	orrs	r2, r1
 8004048:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800404a:	4b3d      	ldr	r3, [pc, #244]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	4b3c      	ldr	r3, [pc, #240]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8004050:	2180      	movs	r1, #128	@ 0x80
 8004052:	0549      	lsls	r1, r1, #21
 8004054:	430a      	orrs	r2, r1
 8004056:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004058:	f7fe fbee 	bl	8002838 <HAL_GetTick>
 800405c:	0003      	movs	r3, r0
 800405e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004062:	f7fe fbe9 	bl	8002838 <HAL_GetTick>
 8004066:	0002      	movs	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e061      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004074:	4b32      	ldr	r3, [pc, #200]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	2380      	movs	r3, #128	@ 0x80
 800407a:	049b      	lsls	r3, r3, #18
 800407c:	4013      	ands	r3, r2
 800407e:	d0f0      	beq.n	8004062 <HAL_RCC_OscConfig+0x53a>
 8004080:	e059      	b.n	8004136 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004082:	4b2f      	ldr	r3, [pc, #188]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	4b2e      	ldr	r3, [pc, #184]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8004088:	4931      	ldr	r1, [pc, #196]	@ (8004150 <HAL_RCC_OscConfig+0x628>)
 800408a:	400a      	ands	r2, r1
 800408c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408e:	f7fe fbd3 	bl	8002838 <HAL_GetTick>
 8004092:	0003      	movs	r3, r0
 8004094:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004098:	f7fe fbce 	bl	8002838 <HAL_GetTick>
 800409c:	0002      	movs	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e046      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040aa:	4b25      	ldr	r3, [pc, #148]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	2380      	movs	r3, #128	@ 0x80
 80040b0:	049b      	lsls	r3, r3, #18
 80040b2:	4013      	ands	r3, r2
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80040b6:	4b22      	ldr	r3, [pc, #136]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	4b21      	ldr	r3, [pc, #132]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 80040bc:	4926      	ldr	r1, [pc, #152]	@ (8004158 <HAL_RCC_OscConfig+0x630>)
 80040be:	400a      	ands	r2, r1
 80040c0:	60da      	str	r2, [r3, #12]
 80040c2:	e038      	b.n	8004136 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e033      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80040d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2203      	movs	r2, #3
 80040da:	401a      	ands	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d126      	bne.n	8004132 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2270      	movs	r2, #112	@ 0x70
 80040e8:	401a      	ands	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d11f      	bne.n	8004132 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	23fe      	movs	r3, #254	@ 0xfe
 80040f6:	01db      	lsls	r3, r3, #7
 80040f8:	401a      	ands	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004100:	429a      	cmp	r2, r3
 8004102:	d116      	bne.n	8004132 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	23f8      	movs	r3, #248	@ 0xf8
 8004108:	039b      	lsls	r3, r3, #14
 800410a:	401a      	ands	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004110:	429a      	cmp	r2, r3
 8004112:	d10e      	bne.n	8004132 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	23e0      	movs	r3, #224	@ 0xe0
 8004118:	051b      	lsls	r3, r3, #20
 800411a:	401a      	ands	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004120:	429a      	cmp	r2, r3
 8004122:	d106      	bne.n	8004132 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	0f5b      	lsrs	r3, r3, #29
 8004128:	075a      	lsls	r2, r3, #29
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800412e:	429a      	cmp	r2, r3
 8004130:	d001      	beq.n	8004136 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	0018      	movs	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	b008      	add	sp, #32
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40021000 	.word	0x40021000
 8004144:	40007000 	.word	0x40007000
 8004148:	00001388 	.word	0x00001388
 800414c:	efffffff 	.word	0xefffffff
 8004150:	feffffff 	.word	0xfeffffff
 8004154:	11c1808c 	.word	0x11c1808c
 8004158:	eefefffc 	.word	0xeefefffc

0800415c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e0e9      	b.n	8004344 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004170:	4b76      	ldr	r3, [pc, #472]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2207      	movs	r2, #7
 8004176:	4013      	ands	r3, r2
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d91e      	bls.n	80041bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417e:	4b73      	ldr	r3, [pc, #460]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2207      	movs	r2, #7
 8004184:	4393      	bics	r3, r2
 8004186:	0019      	movs	r1, r3
 8004188:	4b70      	ldr	r3, [pc, #448]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004190:	f7fe fb52 	bl	8002838 <HAL_GetTick>
 8004194:	0003      	movs	r3, r0
 8004196:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004198:	e009      	b.n	80041ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800419a:	f7fe fb4d 	bl	8002838 <HAL_GetTick>
 800419e:	0002      	movs	r2, r0
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	4a6a      	ldr	r2, [pc, #424]	@ (8004350 <HAL_RCC_ClockConfig+0x1f4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e0ca      	b.n	8004344 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041ae:	4b67      	ldr	r3, [pc, #412]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2207      	movs	r2, #7
 80041b4:	4013      	ands	r3, r2
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d1ee      	bne.n	800419a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2202      	movs	r2, #2
 80041c2:	4013      	ands	r3, r2
 80041c4:	d015      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2204      	movs	r2, #4
 80041cc:	4013      	ands	r3, r2
 80041ce:	d006      	beq.n	80041de <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80041d0:	4b60      	ldr	r3, [pc, #384]	@ (8004354 <HAL_RCC_ClockConfig+0x1f8>)
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	4b5f      	ldr	r3, [pc, #380]	@ (8004354 <HAL_RCC_ClockConfig+0x1f8>)
 80041d6:	21e0      	movs	r1, #224	@ 0xe0
 80041d8:	01c9      	lsls	r1, r1, #7
 80041da:	430a      	orrs	r2, r1
 80041dc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041de:	4b5d      	ldr	r3, [pc, #372]	@ (8004354 <HAL_RCC_ClockConfig+0x1f8>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	4a5d      	ldr	r2, [pc, #372]	@ (8004358 <HAL_RCC_ClockConfig+0x1fc>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	0019      	movs	r1, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	4b59      	ldr	r3, [pc, #356]	@ (8004354 <HAL_RCC_ClockConfig+0x1f8>)
 80041ee:	430a      	orrs	r2, r1
 80041f0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2201      	movs	r2, #1
 80041f8:	4013      	ands	r3, r2
 80041fa:	d057      	beq.n	80042ac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d107      	bne.n	8004214 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004204:	4b53      	ldr	r3, [pc, #332]	@ (8004354 <HAL_RCC_ClockConfig+0x1f8>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	2380      	movs	r3, #128	@ 0x80
 800420a:	029b      	lsls	r3, r3, #10
 800420c:	4013      	ands	r3, r2
 800420e:	d12b      	bne.n	8004268 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e097      	b.n	8004344 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d107      	bne.n	800422c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800421c:	4b4d      	ldr	r3, [pc, #308]	@ (8004354 <HAL_RCC_ClockConfig+0x1f8>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	2380      	movs	r3, #128	@ 0x80
 8004222:	049b      	lsls	r3, r3, #18
 8004224:	4013      	ands	r3, r2
 8004226:	d11f      	bne.n	8004268 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e08b      	b.n	8004344 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d107      	bne.n	8004244 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004234:	4b47      	ldr	r3, [pc, #284]	@ (8004354 <HAL_RCC_ClockConfig+0x1f8>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	2380      	movs	r3, #128	@ 0x80
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4013      	ands	r3, r2
 800423e:	d113      	bne.n	8004268 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e07f      	b.n	8004344 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b03      	cmp	r3, #3
 800424a:	d106      	bne.n	800425a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800424c:	4b41      	ldr	r3, [pc, #260]	@ (8004354 <HAL_RCC_ClockConfig+0x1f8>)
 800424e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004250:	2202      	movs	r2, #2
 8004252:	4013      	ands	r3, r2
 8004254:	d108      	bne.n	8004268 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e074      	b.n	8004344 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800425a:	4b3e      	ldr	r3, [pc, #248]	@ (8004354 <HAL_RCC_ClockConfig+0x1f8>)
 800425c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425e:	2202      	movs	r2, #2
 8004260:	4013      	ands	r3, r2
 8004262:	d101      	bne.n	8004268 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e06d      	b.n	8004344 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004268:	4b3a      	ldr	r3, [pc, #232]	@ (8004354 <HAL_RCC_ClockConfig+0x1f8>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2207      	movs	r2, #7
 800426e:	4393      	bics	r3, r2
 8004270:	0019      	movs	r1, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	4b37      	ldr	r3, [pc, #220]	@ (8004354 <HAL_RCC_ClockConfig+0x1f8>)
 8004278:	430a      	orrs	r2, r1
 800427a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800427c:	f7fe fadc 	bl	8002838 <HAL_GetTick>
 8004280:	0003      	movs	r3, r0
 8004282:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004284:	e009      	b.n	800429a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004286:	f7fe fad7 	bl	8002838 <HAL_GetTick>
 800428a:	0002      	movs	r2, r0
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	4a2f      	ldr	r2, [pc, #188]	@ (8004350 <HAL_RCC_ClockConfig+0x1f4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e054      	b.n	8004344 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429a:	4b2e      	ldr	r3, [pc, #184]	@ (8004354 <HAL_RCC_ClockConfig+0x1f8>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	2238      	movs	r2, #56	@ 0x38
 80042a0:	401a      	ands	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d1ec      	bne.n	8004286 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042ac:	4b27      	ldr	r3, [pc, #156]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2207      	movs	r2, #7
 80042b2:	4013      	ands	r3, r2
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d21e      	bcs.n	80042f8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ba:	4b24      	ldr	r3, [pc, #144]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2207      	movs	r2, #7
 80042c0:	4393      	bics	r3, r2
 80042c2:	0019      	movs	r1, r3
 80042c4:	4b21      	ldr	r3, [pc, #132]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042cc:	f7fe fab4 	bl	8002838 <HAL_GetTick>
 80042d0:	0003      	movs	r3, r0
 80042d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042d4:	e009      	b.n	80042ea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d6:	f7fe faaf 	bl	8002838 <HAL_GetTick>
 80042da:	0002      	movs	r2, r0
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004350 <HAL_RCC_ClockConfig+0x1f4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e02c      	b.n	8004344 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042ea:	4b18      	ldr	r3, [pc, #96]	@ (800434c <HAL_RCC_ClockConfig+0x1f0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2207      	movs	r2, #7
 80042f0:	4013      	ands	r3, r2
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d1ee      	bne.n	80042d6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2204      	movs	r2, #4
 80042fe:	4013      	ands	r3, r2
 8004300:	d009      	beq.n	8004316 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004302:	4b14      	ldr	r3, [pc, #80]	@ (8004354 <HAL_RCC_ClockConfig+0x1f8>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	4a15      	ldr	r2, [pc, #84]	@ (800435c <HAL_RCC_ClockConfig+0x200>)
 8004308:	4013      	ands	r3, r2
 800430a:	0019      	movs	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	4b10      	ldr	r3, [pc, #64]	@ (8004354 <HAL_RCC_ClockConfig+0x1f8>)
 8004312:	430a      	orrs	r2, r1
 8004314:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004316:	f000 f829 	bl	800436c <HAL_RCC_GetSysClockFreq>
 800431a:	0001      	movs	r1, r0
 800431c:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <HAL_RCC_ClockConfig+0x1f8>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	0a1b      	lsrs	r3, r3, #8
 8004322:	220f      	movs	r2, #15
 8004324:	401a      	ands	r2, r3
 8004326:	4b0e      	ldr	r3, [pc, #56]	@ (8004360 <HAL_RCC_ClockConfig+0x204>)
 8004328:	0092      	lsls	r2, r2, #2
 800432a:	58d3      	ldr	r3, [r2, r3]
 800432c:	221f      	movs	r2, #31
 800432e:	4013      	ands	r3, r2
 8004330:	000a      	movs	r2, r1
 8004332:	40da      	lsrs	r2, r3
 8004334:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <HAL_RCC_ClockConfig+0x208>)
 8004336:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004338:	4b0b      	ldr	r3, [pc, #44]	@ (8004368 <HAL_RCC_ClockConfig+0x20c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	0018      	movs	r0, r3
 800433e:	f7fe fa1f 	bl	8002780 <HAL_InitTick>
 8004342:	0003      	movs	r3, r0
}
 8004344:	0018      	movs	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	b004      	add	sp, #16
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40022000 	.word	0x40022000
 8004350:	00001388 	.word	0x00001388
 8004354:	40021000 	.word	0x40021000
 8004358:	fffff0ff 	.word	0xfffff0ff
 800435c:	ffff8fff 	.word	0xffff8fff
 8004360:	0800697c 	.word	0x0800697c
 8004364:	20000068 	.word	0x20000068
 8004368:	2000006c 	.word	0x2000006c

0800436c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004372:	4b3c      	ldr	r3, [pc, #240]	@ (8004464 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2238      	movs	r2, #56	@ 0x38
 8004378:	4013      	ands	r3, r2
 800437a:	d10f      	bne.n	800439c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800437c:	4b39      	ldr	r3, [pc, #228]	@ (8004464 <HAL_RCC_GetSysClockFreq+0xf8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	0adb      	lsrs	r3, r3, #11
 8004382:	2207      	movs	r2, #7
 8004384:	4013      	ands	r3, r2
 8004386:	2201      	movs	r2, #1
 8004388:	409a      	lsls	r2, r3
 800438a:	0013      	movs	r3, r2
 800438c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800438e:	6839      	ldr	r1, [r7, #0]
 8004390:	4835      	ldr	r0, [pc, #212]	@ (8004468 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004392:	f7fb feb7 	bl	8000104 <__udivsi3>
 8004396:	0003      	movs	r3, r0
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	e05d      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800439c:	4b31      	ldr	r3, [pc, #196]	@ (8004464 <HAL_RCC_GetSysClockFreq+0xf8>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2238      	movs	r2, #56	@ 0x38
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d102      	bne.n	80043ae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043a8:	4b30      	ldr	r3, [pc, #192]	@ (800446c <HAL_RCC_GetSysClockFreq+0x100>)
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	e054      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004464 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2238      	movs	r2, #56	@ 0x38
 80043b4:	4013      	ands	r3, r2
 80043b6:	2b10      	cmp	r3, #16
 80043b8:	d138      	bne.n	800442c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80043ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004464 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2203      	movs	r2, #3
 80043c0:	4013      	ands	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043c4:	4b27      	ldr	r3, [pc, #156]	@ (8004464 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	2207      	movs	r2, #7
 80043cc:	4013      	ands	r3, r2
 80043ce:	3301      	adds	r3, #1
 80043d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d10d      	bne.n	80043f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	4824      	ldr	r0, [pc, #144]	@ (800446c <HAL_RCC_GetSysClockFreq+0x100>)
 80043dc:	f7fb fe92 	bl	8000104 <__udivsi3>
 80043e0:	0003      	movs	r3, r0
 80043e2:	0019      	movs	r1, r3
 80043e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004464 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	0a1b      	lsrs	r3, r3, #8
 80043ea:	227f      	movs	r2, #127	@ 0x7f
 80043ec:	4013      	ands	r3, r2
 80043ee:	434b      	muls	r3, r1
 80043f0:	617b      	str	r3, [r7, #20]
        break;
 80043f2:	e00d      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80043f4:	68b9      	ldr	r1, [r7, #8]
 80043f6:	481c      	ldr	r0, [pc, #112]	@ (8004468 <HAL_RCC_GetSysClockFreq+0xfc>)
 80043f8:	f7fb fe84 	bl	8000104 <__udivsi3>
 80043fc:	0003      	movs	r3, r0
 80043fe:	0019      	movs	r1, r3
 8004400:	4b18      	ldr	r3, [pc, #96]	@ (8004464 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	0a1b      	lsrs	r3, r3, #8
 8004406:	227f      	movs	r2, #127	@ 0x7f
 8004408:	4013      	ands	r3, r2
 800440a:	434b      	muls	r3, r1
 800440c:	617b      	str	r3, [r7, #20]
        break;
 800440e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004410:	4b14      	ldr	r3, [pc, #80]	@ (8004464 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	0f5b      	lsrs	r3, r3, #29
 8004416:	2207      	movs	r2, #7
 8004418:	4013      	ands	r3, r2
 800441a:	3301      	adds	r3, #1
 800441c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	6978      	ldr	r0, [r7, #20]
 8004422:	f7fb fe6f 	bl	8000104 <__udivsi3>
 8004426:	0003      	movs	r3, r0
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	e015      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800442c:	4b0d      	ldr	r3, [pc, #52]	@ (8004464 <HAL_RCC_GetSysClockFreq+0xf8>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2238      	movs	r2, #56	@ 0x38
 8004432:	4013      	ands	r3, r2
 8004434:	2b20      	cmp	r3, #32
 8004436:	d103      	bne.n	8004440 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004438:	2380      	movs	r3, #128	@ 0x80
 800443a:	021b      	lsls	r3, r3, #8
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	e00b      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004440:	4b08      	ldr	r3, [pc, #32]	@ (8004464 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2238      	movs	r2, #56	@ 0x38
 8004446:	4013      	ands	r3, r2
 8004448:	2b18      	cmp	r3, #24
 800444a:	d103      	bne.n	8004454 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800444c:	23fa      	movs	r3, #250	@ 0xfa
 800444e:	01db      	lsls	r3, r3, #7
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	e001      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004458:	693b      	ldr	r3, [r7, #16]
}
 800445a:	0018      	movs	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	b006      	add	sp, #24
 8004460:	bd80      	pop	{r7, pc}
 8004462:	46c0      	nop			@ (mov r8, r8)
 8004464:	40021000 	.word	0x40021000
 8004468:	00f42400 	.word	0x00f42400
 800446c:	007a1200 	.word	0x007a1200

08004470 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004478:	2313      	movs	r3, #19
 800447a:	18fb      	adds	r3, r7, r3
 800447c:	2200      	movs	r2, #0
 800447e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004480:	2312      	movs	r3, #18
 8004482:	18fb      	adds	r3, r7, r3
 8004484:	2200      	movs	r2, #0
 8004486:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	2380      	movs	r3, #128	@ 0x80
 800448e:	029b      	lsls	r3, r3, #10
 8004490:	4013      	ands	r3, r2
 8004492:	d100      	bne.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004494:	e0a3      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004496:	2011      	movs	r0, #17
 8004498:	183b      	adds	r3, r7, r0
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800449e:	4ba5      	ldr	r3, [pc, #660]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044a2:	2380      	movs	r3, #128	@ 0x80
 80044a4:	055b      	lsls	r3, r3, #21
 80044a6:	4013      	ands	r3, r2
 80044a8:	d110      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044aa:	4ba2      	ldr	r3, [pc, #648]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044ae:	4ba1      	ldr	r3, [pc, #644]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044b0:	2180      	movs	r1, #128	@ 0x80
 80044b2:	0549      	lsls	r1, r1, #21
 80044b4:	430a      	orrs	r2, r1
 80044b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80044b8:	4b9e      	ldr	r3, [pc, #632]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044bc:	2380      	movs	r3, #128	@ 0x80
 80044be:	055b      	lsls	r3, r3, #21
 80044c0:	4013      	ands	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]
 80044c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c6:	183b      	adds	r3, r7, r0
 80044c8:	2201      	movs	r2, #1
 80044ca:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044cc:	4b9a      	ldr	r3, [pc, #616]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	4b99      	ldr	r3, [pc, #612]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80044d2:	2180      	movs	r1, #128	@ 0x80
 80044d4:	0049      	lsls	r1, r1, #1
 80044d6:	430a      	orrs	r2, r1
 80044d8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044da:	f7fe f9ad 	bl	8002838 <HAL_GetTick>
 80044de:	0003      	movs	r3, r0
 80044e0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044e2:	e00b      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e4:	f7fe f9a8 	bl	8002838 <HAL_GetTick>
 80044e8:	0002      	movs	r2, r0
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d904      	bls.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80044f2:	2313      	movs	r3, #19
 80044f4:	18fb      	adds	r3, r7, r3
 80044f6:	2203      	movs	r2, #3
 80044f8:	701a      	strb	r2, [r3, #0]
        break;
 80044fa:	e005      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044fc:	4b8e      	ldr	r3, [pc, #568]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	2380      	movs	r3, #128	@ 0x80
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	4013      	ands	r3, r2
 8004506:	d0ed      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004508:	2313      	movs	r3, #19
 800450a:	18fb      	adds	r3, r7, r3
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d154      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004512:	4b88      	ldr	r3, [pc, #544]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004514:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004516:	23c0      	movs	r3, #192	@ 0xc0
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4013      	ands	r3, r2
 800451c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d019      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	429a      	cmp	r2, r3
 800452c:	d014      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800452e:	4b81      	ldr	r3, [pc, #516]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004532:	4a82      	ldr	r2, [pc, #520]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004534:	4013      	ands	r3, r2
 8004536:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004538:	4b7e      	ldr	r3, [pc, #504]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800453a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800453c:	4b7d      	ldr	r3, [pc, #500]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800453e:	2180      	movs	r1, #128	@ 0x80
 8004540:	0249      	lsls	r1, r1, #9
 8004542:	430a      	orrs	r2, r1
 8004544:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004546:	4b7b      	ldr	r3, [pc, #492]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004548:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800454a:	4b7a      	ldr	r3, [pc, #488]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800454c:	497c      	ldr	r1, [pc, #496]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800454e:	400a      	ands	r2, r1
 8004550:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004552:	4b78      	ldr	r3, [pc, #480]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2201      	movs	r2, #1
 800455c:	4013      	ands	r3, r2
 800455e:	d016      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fe f96a 	bl	8002838 <HAL_GetTick>
 8004564:	0003      	movs	r3, r0
 8004566:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004568:	e00c      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fe f965 	bl	8002838 <HAL_GetTick>
 800456e:	0002      	movs	r2, r0
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	4a73      	ldr	r2, [pc, #460]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d904      	bls.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800457a:	2313      	movs	r3, #19
 800457c:	18fb      	adds	r3, r7, r3
 800457e:	2203      	movs	r2, #3
 8004580:	701a      	strb	r2, [r3, #0]
            break;
 8004582:	e004      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004584:	4b6b      	ldr	r3, [pc, #428]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004588:	2202      	movs	r2, #2
 800458a:	4013      	ands	r3, r2
 800458c:	d0ed      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800458e:	2313      	movs	r3, #19
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10a      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004598:	4b66      	ldr	r3, [pc, #408]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800459a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459c:	4a67      	ldr	r2, [pc, #412]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800459e:	4013      	ands	r3, r2
 80045a0:	0019      	movs	r1, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045a6:	4b63      	ldr	r3, [pc, #396]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045a8:	430a      	orrs	r2, r1
 80045aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045ac:	e00c      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045ae:	2312      	movs	r3, #18
 80045b0:	18fb      	adds	r3, r7, r3
 80045b2:	2213      	movs	r2, #19
 80045b4:	18ba      	adds	r2, r7, r2
 80045b6:	7812      	ldrb	r2, [r2, #0]
 80045b8:	701a      	strb	r2, [r3, #0]
 80045ba:	e005      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045bc:	2312      	movs	r3, #18
 80045be:	18fb      	adds	r3, r7, r3
 80045c0:	2213      	movs	r2, #19
 80045c2:	18ba      	adds	r2, r7, r2
 80045c4:	7812      	ldrb	r2, [r2, #0]
 80045c6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045c8:	2311      	movs	r3, #17
 80045ca:	18fb      	adds	r3, r7, r3
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d105      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d2:	4b58      	ldr	r3, [pc, #352]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045d6:	4b57      	ldr	r3, [pc, #348]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045d8:	495b      	ldr	r1, [pc, #364]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80045da:	400a      	ands	r2, r1
 80045dc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2201      	movs	r2, #1
 80045e4:	4013      	ands	r3, r2
 80045e6:	d009      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045e8:	4b52      	ldr	r3, [pc, #328]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ec:	2203      	movs	r2, #3
 80045ee:	4393      	bics	r3, r2
 80045f0:	0019      	movs	r1, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	4b4f      	ldr	r3, [pc, #316]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045f8:	430a      	orrs	r2, r1
 80045fa:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2210      	movs	r2, #16
 8004602:	4013      	ands	r3, r2
 8004604:	d009      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004606:	4b4b      	ldr	r3, [pc, #300]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460a:	4a50      	ldr	r2, [pc, #320]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800460c:	4013      	ands	r3, r2
 800460e:	0019      	movs	r1, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	4b47      	ldr	r3, [pc, #284]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004616:	430a      	orrs	r2, r1
 8004618:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	2380      	movs	r3, #128	@ 0x80
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4013      	ands	r3, r2
 8004624:	d009      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004626:	4b43      	ldr	r3, [pc, #268]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462a:	4a49      	ldr	r2, [pc, #292]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800462c:	4013      	ands	r3, r2
 800462e:	0019      	movs	r1, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	695a      	ldr	r2, [r3, #20]
 8004634:	4b3f      	ldr	r3, [pc, #252]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004636:	430a      	orrs	r2, r1
 8004638:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	2380      	movs	r3, #128	@ 0x80
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4013      	ands	r3, r2
 8004644:	d009      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004646:	4b3b      	ldr	r3, [pc, #236]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464a:	4a42      	ldr	r2, [pc, #264]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800464c:	4013      	ands	r3, r2
 800464e:	0019      	movs	r1, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699a      	ldr	r2, [r3, #24]
 8004654:	4b37      	ldr	r3, [pc, #220]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004656:	430a      	orrs	r2, r1
 8004658:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2220      	movs	r2, #32
 8004660:	4013      	ands	r3, r2
 8004662:	d009      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004664:	4b33      	ldr	r3, [pc, #204]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004668:	4a3b      	ldr	r2, [pc, #236]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800466a:	4013      	ands	r3, r2
 800466c:	0019      	movs	r1, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	4b30      	ldr	r3, [pc, #192]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004674:	430a      	orrs	r2, r1
 8004676:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	2380      	movs	r3, #128	@ 0x80
 800467e:	01db      	lsls	r3, r3, #7
 8004680:	4013      	ands	r3, r2
 8004682:	d015      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004684:	4b2b      	ldr	r3, [pc, #172]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	0899      	lsrs	r1, r3, #2
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	4b28      	ldr	r3, [pc, #160]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004692:	430a      	orrs	r2, r1
 8004694:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69da      	ldr	r2, [r3, #28]
 800469a:	2380      	movs	r3, #128	@ 0x80
 800469c:	05db      	lsls	r3, r3, #23
 800469e:	429a      	cmp	r2, r3
 80046a0:	d106      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80046a2:	4b24      	ldr	r3, [pc, #144]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	4b23      	ldr	r3, [pc, #140]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046a8:	2180      	movs	r1, #128	@ 0x80
 80046aa:	0249      	lsls	r1, r1, #9
 80046ac:	430a      	orrs	r2, r1
 80046ae:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	2380      	movs	r3, #128	@ 0x80
 80046b6:	039b      	lsls	r3, r3, #14
 80046b8:	4013      	ands	r3, r2
 80046ba:	d016      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80046bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c0:	4a26      	ldr	r2, [pc, #152]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	0019      	movs	r1, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1a      	ldr	r2, [r3, #32]
 80046ca:	4b1a      	ldr	r3, [pc, #104]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046cc:	430a      	orrs	r2, r1
 80046ce:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a1a      	ldr	r2, [r3, #32]
 80046d4:	2380      	movs	r3, #128	@ 0x80
 80046d6:	03db      	lsls	r3, r3, #15
 80046d8:	429a      	cmp	r2, r3
 80046da:	d106      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80046dc:	4b15      	ldr	r3, [pc, #84]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	4b14      	ldr	r3, [pc, #80]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046e2:	2180      	movs	r1, #128	@ 0x80
 80046e4:	0449      	lsls	r1, r1, #17
 80046e6:	430a      	orrs	r2, r1
 80046e8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	2380      	movs	r3, #128	@ 0x80
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	4013      	ands	r3, r2
 80046f4:	d016      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80046f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fa:	4a19      	ldr	r2, [pc, #100]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	0019      	movs	r1, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	4b0b      	ldr	r3, [pc, #44]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004706:	430a      	orrs	r2, r1
 8004708:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691a      	ldr	r2, [r3, #16]
 800470e:	2380      	movs	r3, #128	@ 0x80
 8004710:	01db      	lsls	r3, r3, #7
 8004712:	429a      	cmp	r2, r3
 8004714:	d106      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004716:	4b07      	ldr	r3, [pc, #28]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	4b06      	ldr	r3, [pc, #24]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800471c:	2180      	movs	r1, #128	@ 0x80
 800471e:	0249      	lsls	r1, r1, #9
 8004720:	430a      	orrs	r2, r1
 8004722:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004724:	2312      	movs	r3, #18
 8004726:	18fb      	adds	r3, r7, r3
 8004728:	781b      	ldrb	r3, [r3, #0]
}
 800472a:	0018      	movs	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	b006      	add	sp, #24
 8004730:	bd80      	pop	{r7, pc}
 8004732:	46c0      	nop			@ (mov r8, r8)
 8004734:	40021000 	.word	0x40021000
 8004738:	40007000 	.word	0x40007000
 800473c:	fffffcff 	.word	0xfffffcff
 8004740:	fffeffff 	.word	0xfffeffff
 8004744:	00001388 	.word	0x00001388
 8004748:	efffffff 	.word	0xefffffff
 800474c:	fffff3ff 	.word	0xfffff3ff
 8004750:	fff3ffff 	.word	0xfff3ffff
 8004754:	ffcfffff 	.word	0xffcfffff
 8004758:	ffffcfff 	.word	0xffffcfff
 800475c:	ffbfffff 	.word	0xffbfffff
 8004760:	ffff3fff 	.word	0xffff3fff

08004764 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8004764:	b590      	push	{r4, r7, lr}
 8004766:	b08b      	sub	sp, #44	@ 0x2c
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 800476c:	2427      	movs	r4, #39	@ 0x27
 800476e:	193b      	adds	r3, r7, r4
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]
  FlagStatus       backupchanged = RESET;
 8004774:	2326      	movs	r3, #38	@ 0x26
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 800477c:	4b31      	ldr	r3, [pc, #196]	@ (8004844 <HAL_RCCEx_EnableLSCO+0xe0>)
 800477e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004780:	4b30      	ldr	r3, [pc, #192]	@ (8004844 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004782:	2101      	movs	r1, #1
 8004784:	430a      	orrs	r2, r1
 8004786:	635a      	str	r2, [r3, #52]	@ 0x34
 8004788:	4b2e      	ldr	r3, [pc, #184]	@ (8004844 <HAL_RCCEx_EnableLSCO+0xe0>)
 800478a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800478c:	2201      	movs	r2, #1
 800478e:	4013      	ands	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 8004794:	2110      	movs	r1, #16
 8004796:	187b      	adds	r3, r7, r1
 8004798:	2204      	movs	r2, #4
 800479a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800479c:	187b      	adds	r3, r7, r1
 800479e:	2203      	movs	r2, #3
 80047a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047a2:	187b      	adds	r3, r7, r1
 80047a4:	2203      	movs	r2, #3
 80047a6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a8:	187b      	adds	r3, r7, r1
 80047aa:	2200      	movs	r2, #0
 80047ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 80047ae:	187a      	adds	r2, r7, r1
 80047b0:	23a0      	movs	r3, #160	@ 0xa0
 80047b2:	05db      	lsls	r3, r3, #23
 80047b4:	0011      	movs	r1, r2
 80047b6:	0018      	movs	r0, r3
 80047b8:	f7fe f926 	bl	8002a08 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047bc:	4b21      	ldr	r3, [pc, #132]	@ (8004844 <HAL_RCCEx_EnableLSCO+0xe0>)
 80047be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047c0:	2380      	movs	r3, #128	@ 0x80
 80047c2:	055b      	lsls	r3, r3, #21
 80047c4:	4013      	ands	r3, r2
 80047c6:	d110      	bne.n	80047ea <HAL_RCCEx_EnableLSCO+0x86>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004844 <HAL_RCCEx_EnableLSCO+0xe0>)
 80047ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004844 <HAL_RCCEx_EnableLSCO+0xe0>)
 80047ce:	2180      	movs	r1, #128	@ 0x80
 80047d0:	0549      	lsls	r1, r1, #21
 80047d2:	430a      	orrs	r2, r1
 80047d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80047d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004844 <HAL_RCCEx_EnableLSCO+0xe0>)
 80047d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047da:	2380      	movs	r3, #128	@ 0x80
 80047dc:	055b      	lsls	r3, r3, #21
 80047de:	4013      	ands	r3, r2
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 80047e4:	193b      	adds	r3, r7, r4
 80047e6:	2201      	movs	r2, #1
 80047e8:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ea:	4b17      	ldr	r3, [pc, #92]	@ (8004848 <HAL_RCCEx_EnableLSCO+0xe4>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	2380      	movs	r3, #128	@ 0x80
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	4013      	ands	r3, r2
 80047f4:	d105      	bne.n	8004802 <HAL_RCCEx_EnableLSCO+0x9e>
  {
    HAL_PWR_EnableBkUpAccess();
 80047f6:	f7ff f939 	bl	8003a6c <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 80047fa:	2326      	movs	r3, #38	@ 0x26
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	2201      	movs	r2, #1
 8004800:	701a      	strb	r2, [r3, #0]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8004802:	4b10      	ldr	r3, [pc, #64]	@ (8004844 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004806:	4a11      	ldr	r2, [pc, #68]	@ (800484c <HAL_RCCEx_EnableLSCO+0xe8>)
 8004808:	401a      	ands	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	431a      	orrs	r2, r3
 800480e:	4b0d      	ldr	r3, [pc, #52]	@ (8004844 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004810:	2180      	movs	r1, #128	@ 0x80
 8004812:	0449      	lsls	r1, r1, #17
 8004814:	430a      	orrs	r2, r1
 8004816:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (backupchanged == SET)
 8004818:	2326      	movs	r3, #38	@ 0x26
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_RCCEx_EnableLSCO+0xc2>
  {
    HAL_PWR_DisableBkUpAccess();
 8004822:	f7ff f931 	bl	8003a88 <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 8004826:	2327      	movs	r3, #39	@ 0x27
 8004828:	18fb      	adds	r3, r7, r3
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d105      	bne.n	800483c <HAL_RCCEx_EnableLSCO+0xd8>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8004830:	4b04      	ldr	r3, [pc, #16]	@ (8004844 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004832:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004834:	4b03      	ldr	r3, [pc, #12]	@ (8004844 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004836:	4906      	ldr	r1, [pc, #24]	@ (8004850 <HAL_RCCEx_EnableLSCO+0xec>)
 8004838:	400a      	ands	r2, r1
 800483a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800483c:	46c0      	nop			@ (mov r8, r8)
 800483e:	46bd      	mov	sp, r7
 8004840:	b00b      	add	sp, #44	@ 0x2c
 8004842:	bd90      	pop	{r4, r7, pc}
 8004844:	40021000 	.word	0x40021000
 8004848:	40007000 	.word	0x40007000
 800484c:	fcffffff 	.word	0xfcffffff
 8004850:	efffffff 	.word	0xefffffff

08004854 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004854:	b5b0      	push	{r4, r5, r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800485c:	230f      	movs	r3, #15
 800485e:	18fb      	adds	r3, r7, r3
 8004860:	2201      	movs	r2, #1
 8004862:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d100      	bne.n	800486c <HAL_RTC_Init+0x18>
 800486a:	e08c      	b.n	8004986 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2229      	movs	r2, #41	@ 0x29
 8004870:	5c9b      	ldrb	r3, [r3, r2]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10b      	bne.n	8004890 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2228      	movs	r2, #40	@ 0x28
 800487c:	2100      	movs	r1, #0
 800487e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2288      	movs	r2, #136	@ 0x88
 8004884:	0212      	lsls	r2, r2, #8
 8004886:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	0018      	movs	r0, r3
 800488c:	f7fd fd9a 	bl	80023c4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2229      	movs	r2, #41	@ 0x29
 8004894:	2102      	movs	r1, #2
 8004896:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	2210      	movs	r2, #16
 80048a0:	4013      	ands	r3, r2
 80048a2:	2b10      	cmp	r3, #16
 80048a4:	d062      	beq.n	800496c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	22ca      	movs	r2, #202	@ 0xca
 80048ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2253      	movs	r2, #83	@ 0x53
 80048b4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80048b6:	250f      	movs	r5, #15
 80048b8:	197c      	adds	r4, r7, r5
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	0018      	movs	r0, r3
 80048be:	f000 fcb9 	bl	8005234 <RTC_EnterInitMode>
 80048c2:	0003      	movs	r3, r0
 80048c4:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80048c6:	0028      	movs	r0, r5
 80048c8:	183b      	adds	r3, r7, r0
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d12c      	bne.n	800492a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699a      	ldr	r2, [r3, #24]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	492e      	ldr	r1, [pc, #184]	@ (8004994 <HAL_RTC_Init+0x140>)
 80048dc:	400a      	ands	r2, r1
 80048de:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6999      	ldr	r1, [r3, #24]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6912      	ldr	r2, [r2, #16]
 8004906:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6919      	ldr	r1, [r3, #16]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	041a      	lsls	r2, r3, #16
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800491c:	183c      	adds	r4, r7, r0
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	0018      	movs	r0, r3
 8004922:	f000 fcc9 	bl	80052b8 <RTC_ExitInitMode>
 8004926:	0003      	movs	r3, r0
 8004928:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800492a:	230f      	movs	r3, #15
 800492c:	18fb      	adds	r3, r7, r3
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d116      	bne.n	8004962 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	00d2      	lsls	r2, r2, #3
 8004940:	08d2      	lsrs	r2, r2, #3
 8004942:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6999      	ldr	r1, [r3, #24]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	22ff      	movs	r2, #255	@ 0xff
 8004968:	625a      	str	r2, [r3, #36]	@ 0x24
 800496a:	e003      	b.n	8004974 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800496c:	230f      	movs	r3, #15
 800496e:	18fb      	adds	r3, r7, r3
 8004970:	2200      	movs	r2, #0
 8004972:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004974:	230f      	movs	r3, #15
 8004976:	18fb      	adds	r3, r7, r3
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d103      	bne.n	8004986 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2229      	movs	r2, #41	@ 0x29
 8004982:	2101      	movs	r1, #1
 8004984:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004986:	230f      	movs	r3, #15
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	781b      	ldrb	r3, [r3, #0]
}
 800498c:	0018      	movs	r0, r3
 800498e:	46bd      	mov	sp, r7
 8004990:	b004      	add	sp, #16
 8004992:	bdb0      	pop	{r4, r5, r7, pc}
 8004994:	fb8fffbf 	.word	0xfb8fffbf

08004998 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004998:	b5b0      	push	{r4, r5, r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2228      	movs	r2, #40	@ 0x28
 80049a8:	5c9b      	ldrb	r3, [r3, r2]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_RTC_SetTime+0x1a>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e092      	b.n	8004ad8 <HAL_RTC_SetTime+0x140>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2228      	movs	r2, #40	@ 0x28
 80049b6:	2101      	movs	r1, #1
 80049b8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2229      	movs	r2, #41	@ 0x29
 80049be:	2102      	movs	r1, #2
 80049c0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	22ca      	movs	r2, #202	@ 0xca
 80049c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2253      	movs	r2, #83	@ 0x53
 80049d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80049d2:	2513      	movs	r5, #19
 80049d4:	197c      	adds	r4, r7, r5
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	0018      	movs	r0, r3
 80049da:	f000 fc2b 	bl	8005234 <RTC_EnterInitMode>
 80049de:	0003      	movs	r3, r0
 80049e0:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80049e2:	197b      	adds	r3, r7, r5
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d162      	bne.n	8004ab0 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d125      	bne.n	8004a3c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	2240      	movs	r2, #64	@ 0x40
 80049f8:	4013      	ands	r3, r2
 80049fa:	d102      	bne.n	8004a02 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2200      	movs	r2, #0
 8004a00:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	0018      	movs	r0, r3
 8004a08:	f000 fc9a 	bl	8005340 <RTC_ByteToBcd2>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	785b      	ldrb	r3, [r3, #1]
 8004a14:	0018      	movs	r0, r3
 8004a16:	f000 fc93 	bl	8005340 <RTC_ByteToBcd2>
 8004a1a:	0003      	movs	r3, r0
 8004a1c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a1e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	789b      	ldrb	r3, [r3, #2]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f000 fc8b 	bl	8005340 <RTC_ByteToBcd2>
 8004a2a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a2c:	0022      	movs	r2, r4
 8004a2e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	78db      	ldrb	r3, [r3, #3]
 8004a34:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	e017      	b.n	8004a6c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	2240      	movs	r2, #64	@ 0x40
 8004a44:	4013      	ands	r3, r2
 8004a46:	d102      	bne.n	8004a4e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	785b      	ldrb	r3, [r3, #1]
 8004a58:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a5a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a60:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	78db      	ldrb	r3, [r3, #3]
 8004a66:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	491b      	ldr	r1, [pc, #108]	@ (8004ae0 <HAL_RTC_SetTime+0x148>)
 8004a74:	400a      	ands	r2, r1
 8004a76:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4918      	ldr	r1, [pc, #96]	@ (8004ae4 <HAL_RTC_SetTime+0x14c>)
 8004a84:	400a      	ands	r2, r1
 8004a86:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6999      	ldr	r1, [r3, #24]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	431a      	orrs	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004aa0:	2313      	movs	r3, #19
 8004aa2:	18fc      	adds	r4, r7, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f000 fc06 	bl	80052b8 <RTC_ExitInitMode>
 8004aac:	0003      	movs	r3, r0
 8004aae:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	22ff      	movs	r2, #255	@ 0xff
 8004ab6:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8004ab8:	2313      	movs	r3, #19
 8004aba:	18fb      	adds	r3, r7, r3
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d103      	bne.n	8004aca <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2229      	movs	r2, #41	@ 0x29
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2228      	movs	r2, #40	@ 0x28
 8004ace:	2100      	movs	r1, #0
 8004ad0:	5499      	strb	r1, [r3, r2]

  return status;
 8004ad2:	2313      	movs	r3, #19
 8004ad4:	18fb      	adds	r3, r7, r3
 8004ad6:	781b      	ldrb	r3, [r3, #0]
}
 8004ad8:	0018      	movs	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b006      	add	sp, #24
 8004ade:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae0:	007f7f7f 	.word	0x007f7f7f
 8004ae4:	fffbffff 	.word	0xfffbffff

08004ae8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	045b      	lsls	r3, r3, #17
 8004b06:	0c5a      	lsrs	r2, r3, #17
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a22      	ldr	r2, [pc, #136]	@ (8004b9c <HAL_RTC_GetTime+0xb4>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	0c1b      	lsrs	r3, r3, #16
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	223f      	movs	r2, #63	@ 0x3f
 8004b20:	4013      	ands	r3, r2
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	0a1b      	lsrs	r3, r3, #8
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	227f      	movs	r2, #127	@ 0x7f
 8004b30:	4013      	ands	r3, r2
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	227f      	movs	r2, #127	@ 0x7f
 8004b3e:	4013      	ands	r3, r2
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	0d9b      	lsrs	r3, r3, #22
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	4013      	ands	r3, r2
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d11a      	bne.n	8004b92 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	0018      	movs	r0, r3
 8004b62:	f000 fc15 	bl	8005390 <RTC_Bcd2ToByte>
 8004b66:	0003      	movs	r3, r0
 8004b68:	001a      	movs	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	785b      	ldrb	r3, [r3, #1]
 8004b72:	0018      	movs	r0, r3
 8004b74:	f000 fc0c 	bl	8005390 <RTC_Bcd2ToByte>
 8004b78:	0003      	movs	r3, r0
 8004b7a:	001a      	movs	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	789b      	ldrb	r3, [r3, #2]
 8004b84:	0018      	movs	r0, r3
 8004b86:	f000 fc03 	bl	8005390 <RTC_Bcd2ToByte>
 8004b8a:	0003      	movs	r3, r0
 8004b8c:	001a      	movs	r2, r3
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	0018      	movs	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	b006      	add	sp, #24
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	007f7f7f 	.word	0x007f7f7f

08004ba0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ba0:	b5b0      	push	{r4, r5, r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2228      	movs	r2, #40	@ 0x28
 8004bb0:	5c9b      	ldrb	r3, [r3, r2]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d101      	bne.n	8004bba <HAL_RTC_SetDate+0x1a>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e07e      	b.n	8004cb8 <HAL_RTC_SetDate+0x118>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2228      	movs	r2, #40	@ 0x28
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2229      	movs	r2, #41	@ 0x29
 8004bc6:	2102      	movs	r1, #2
 8004bc8:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10e      	bne.n	8004bee <HAL_RTC_SetDate+0x4e>
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	785b      	ldrb	r3, [r3, #1]
 8004bd4:	001a      	movs	r2, r3
 8004bd6:	2310      	movs	r3, #16
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d008      	beq.n	8004bee <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	785b      	ldrb	r3, [r3, #1]
 8004be0:	2210      	movs	r2, #16
 8004be2:	4393      	bics	r3, r2
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	330a      	adds	r3, #10
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d11c      	bne.n	8004c2e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	78db      	ldrb	r3, [r3, #3]
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f000 fba1 	bl	8005340 <RTC_ByteToBcd2>
 8004bfe:	0003      	movs	r3, r0
 8004c00:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	785b      	ldrb	r3, [r3, #1]
 8004c06:	0018      	movs	r0, r3
 8004c08:	f000 fb9a 	bl	8005340 <RTC_ByteToBcd2>
 8004c0c:	0003      	movs	r3, r0
 8004c0e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c10:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	789b      	ldrb	r3, [r3, #2]
 8004c16:	0018      	movs	r0, r3
 8004c18:	f000 fb92 	bl	8005340 <RTC_ByteToBcd2>
 8004c1c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c1e:	0022      	movs	r2, r4
 8004c20:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	e00e      	b.n	8004c4c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	78db      	ldrb	r3, [r3, #3]
 8004c32:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	785b      	ldrb	r3, [r3, #1]
 8004c38:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c3a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004c40:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	22ca      	movs	r2, #202	@ 0xca
 8004c52:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2253      	movs	r2, #83	@ 0x53
 8004c5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c5c:	2513      	movs	r5, #19
 8004c5e:	197c      	adds	r4, r7, r5
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	0018      	movs	r0, r3
 8004c64:	f000 fae6 	bl	8005234 <RTC_EnterInitMode>
 8004c68:	0003      	movs	r3, r0
 8004c6a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004c6c:	0028      	movs	r0, r5
 8004c6e:	183b      	adds	r3, r7, r0
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10c      	bne.n	8004c90 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4910      	ldr	r1, [pc, #64]	@ (8004cc0 <HAL_RTC_SetDate+0x120>)
 8004c7e:	400a      	ands	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c82:	183c      	adds	r4, r7, r0
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	0018      	movs	r0, r3
 8004c88:	f000 fb16 	bl	80052b8 <RTC_ExitInitMode>
 8004c8c:	0003      	movs	r3, r0
 8004c8e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	22ff      	movs	r2, #255	@ 0xff
 8004c96:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004c98:	2313      	movs	r3, #19
 8004c9a:	18fb      	adds	r3, r7, r3
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d103      	bne.n	8004caa <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2229      	movs	r2, #41	@ 0x29
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2228      	movs	r2, #40	@ 0x28
 8004cae:	2100      	movs	r1, #0
 8004cb0:	5499      	strb	r1, [r3, r2]

  return status;
 8004cb2:	2313      	movs	r3, #19
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	781b      	ldrb	r3, [r3, #0]
}
 8004cb8:	0018      	movs	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	b006      	add	sp, #24
 8004cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8004cc0:	00ffff3f 	.word	0x00ffff3f

08004cc4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	4a21      	ldr	r2, [pc, #132]	@ (8004d5c <HAL_RTC_GetDate+0x98>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	0c1b      	lsrs	r3, r3, #16
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	0a1b      	lsrs	r3, r3, #8
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	221f      	movs	r2, #31
 8004cee:	4013      	ands	r3, r2
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	223f      	movs	r2, #63	@ 0x3f
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	0b5b      	lsrs	r3, r3, #13
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2207      	movs	r2, #7
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d11a      	bne.n	8004d50 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	78db      	ldrb	r3, [r3, #3]
 8004d1e:	0018      	movs	r0, r3
 8004d20:	f000 fb36 	bl	8005390 <RTC_Bcd2ToByte>
 8004d24:	0003      	movs	r3, r0
 8004d26:	001a      	movs	r2, r3
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	785b      	ldrb	r3, [r3, #1]
 8004d30:	0018      	movs	r0, r3
 8004d32:	f000 fb2d 	bl	8005390 <RTC_Bcd2ToByte>
 8004d36:	0003      	movs	r3, r0
 8004d38:	001a      	movs	r2, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	789b      	ldrb	r3, [r3, #2]
 8004d42:	0018      	movs	r0, r3
 8004d44:	f000 fb24 	bl	8005390 <RTC_Bcd2ToByte>
 8004d48:	0003      	movs	r3, r0
 8004d4a:	001a      	movs	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	0018      	movs	r0, r3
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b006      	add	sp, #24
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	46c0      	nop			@ (mov r8, r8)
 8004d5c:	00ffff3f 	.word	0x00ffff3f

08004d60 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004d60:	b590      	push	{r4, r7, lr}
 8004d62:	b089      	sub	sp, #36	@ 0x24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2228      	movs	r2, #40	@ 0x28
 8004d70:	5c9b      	ldrb	r3, [r3, r2]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <HAL_RTC_SetAlarm_IT+0x1a>
 8004d76:	2302      	movs	r3, #2
 8004d78:	e127      	b.n	8004fca <HAL_RTC_SetAlarm_IT+0x26a>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2228      	movs	r2, #40	@ 0x28
 8004d7e:	2101      	movs	r1, #1
 8004d80:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2229      	movs	r2, #41	@ 0x29
 8004d86:	2102      	movs	r1, #2
 8004d88:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d136      	bne.n	8004dfe <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2240      	movs	r2, #64	@ 0x40
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d102      	bne.n	8004da2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	0018      	movs	r0, r3
 8004da8:	f000 faca 	bl	8005340 <RTC_ByteToBcd2>
 8004dac:	0003      	movs	r3, r0
 8004dae:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	0018      	movs	r0, r3
 8004db6:	f000 fac3 	bl	8005340 <RTC_ByteToBcd2>
 8004dba:	0003      	movs	r3, r0
 8004dbc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004dbe:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	789b      	ldrb	r3, [r3, #2]
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	f000 fabb 	bl	8005340 <RTC_ByteToBcd2>
 8004dca:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004dcc:	0022      	movs	r2, r4
 8004dce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	78db      	ldrb	r3, [r3, #3]
 8004dd4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	5c9b      	ldrb	r3, [r3, r2]
 8004de0:	0018      	movs	r0, r3
 8004de2:	f000 faad 	bl	8005340 <RTC_ByteToBcd2>
 8004de6:	0003      	movs	r3, r0
 8004de8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004dea:	0022      	movs	r2, r4
 8004dec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004df2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	61fb      	str	r3, [r7, #28]
 8004dfc:	e022      	b.n	8004e44 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	2240      	movs	r2, #64	@ 0x40
 8004e06:	4013      	ands	r3, r2
 8004e08:	d102      	bne.n	8004e10 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	785b      	ldrb	r3, [r3, #1]
 8004e1a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e1c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004e22:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	78db      	ldrb	r3, [r3, #3]
 8004e28:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004e2a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2120      	movs	r1, #32
 8004e30:	5c5b      	ldrb	r3, [r3, r1]
 8004e32:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004e34:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004e3a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e40:	4313      	orrs	r3, r2
 8004e42:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	22ca      	movs	r2, #202	@ 0xca
 8004e56:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2253      	movs	r2, #83	@ 0x53
 8004e5e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e64:	2380      	movs	r3, #128	@ 0x80
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d14c      	bne.n	8004f06 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4957      	ldr	r1, [pc, #348]	@ (8004fd4 <HAL_RTC_SetAlarm_IT+0x274>)
 8004e78:	400a      	ands	r2, r1
 8004e7a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2101      	movs	r1, #1
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004e8c:	f7fd fcd4 	bl	8002838 <HAL_GetTick>
 8004e90:	0003      	movs	r3, r0
 8004e92:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004e94:	e016      	b.n	8004ec4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e96:	f7fd fccf 	bl	8002838 <HAL_GetTick>
 8004e9a:	0002      	movs	r2, r0
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	1ad2      	subs	r2, r2, r3
 8004ea0:	23fa      	movs	r3, #250	@ 0xfa
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d90d      	bls.n	8004ec4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	22ff      	movs	r2, #255	@ 0xff
 8004eae:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2229      	movs	r2, #41	@ 0x29
 8004eb4:	2103      	movs	r1, #3
 8004eb6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2228      	movs	r2, #40	@ 0x28
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e082      	b.n	8004fca <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	4013      	ands	r3, r2
 8004ece:	d0e2      	beq.n	8004e96 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	69fa      	ldr	r2, [r7, #28]
 8004ed6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2180      	movs	r1, #128	@ 0x80
 8004eec:	0049      	lsls	r1, r1, #1
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699a      	ldr	r2, [r3, #24]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2180      	movs	r1, #128	@ 0x80
 8004efe:	0149      	lsls	r1, r1, #5
 8004f00:	430a      	orrs	r2, r1
 8004f02:	619a      	str	r2, [r3, #24]
 8004f04:	e04b      	b.n	8004f9e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	699a      	ldr	r2, [r3, #24]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4931      	ldr	r1, [pc, #196]	@ (8004fd8 <HAL_RTC_SetAlarm_IT+0x278>)
 8004f12:	400a      	ands	r2, r1
 8004f14:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2102      	movs	r1, #2
 8004f22:	430a      	orrs	r2, r1
 8004f24:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004f26:	f7fd fc87 	bl	8002838 <HAL_GetTick>
 8004f2a:	0003      	movs	r3, r0
 8004f2c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004f2e:	e016      	b.n	8004f5e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f30:	f7fd fc82 	bl	8002838 <HAL_GetTick>
 8004f34:	0002      	movs	r2, r0
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	1ad2      	subs	r2, r2, r3
 8004f3a:	23fa      	movs	r3, #250	@ 0xfa
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d90d      	bls.n	8004f5e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	22ff      	movs	r2, #255	@ 0xff
 8004f48:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2229      	movs	r2, #41	@ 0x29
 8004f4e:	2103      	movs	r1, #3
 8004f50:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2228      	movs	r2, #40	@ 0x28
 8004f56:	2100      	movs	r1, #0
 8004f58:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e035      	b.n	8004fca <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	2202      	movs	r2, #2
 8004f66:	4013      	ands	r3, r2
 8004f68:	d0e2      	beq.n	8004f30 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699a      	ldr	r2, [r3, #24]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2180      	movs	r1, #128	@ 0x80
 8004f86:	0089      	lsls	r1, r1, #2
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	699a      	ldr	r2, [r3, #24]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2180      	movs	r1, #128	@ 0x80
 8004f98:	0189      	lsls	r1, r1, #6
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8004fdc <HAL_RTC_SetAlarm_IT+0x27c>)
 8004fa0:	2380      	movs	r3, #128	@ 0x80
 8004fa2:	58d3      	ldr	r3, [r2, r3]
 8004fa4:	490d      	ldr	r1, [pc, #52]	@ (8004fdc <HAL_RTC_SetAlarm_IT+0x27c>)
 8004fa6:	2280      	movs	r2, #128	@ 0x80
 8004fa8:	0312      	lsls	r2, r2, #12
 8004faa:	4313      	orrs	r3, r2
 8004fac:	2280      	movs	r2, #128	@ 0x80
 8004fae:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	22ff      	movs	r2, #255	@ 0xff
 8004fb6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2229      	movs	r2, #41	@ 0x29
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2228      	movs	r2, #40	@ 0x28
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	0018      	movs	r0, r3
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	b009      	add	sp, #36	@ 0x24
 8004fd0:	bd90      	pop	{r4, r7, pc}
 8004fd2:	46c0      	nop			@ (mov r8, r8)
 8004fd4:	fffffeff 	.word	0xfffffeff
 8004fd8:	fffffdff 	.word	0xfffffdff
 8004fdc:	40021800 	.word	0x40021800

08004fe0 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	2380      	movs	r3, #128	@ 0x80
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d144      	bne.n	8005082 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2280      	movs	r2, #128	@ 0x80
 8004ffc:	0052      	lsls	r2, r2, #1
 8004ffe:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500e:	045b      	lsls	r3, r3, #17
 8005010:	0c5b      	lsrs	r3, r3, #17
 8005012:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	0c1b      	lsrs	r3, r3, #16
 8005018:	b2db      	uxtb	r3, r3
 800501a:	223f      	movs	r2, #63	@ 0x3f
 800501c:	4013      	ands	r3, r2
 800501e:	b2da      	uxtb	r2, r3
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	0a1b      	lsrs	r3, r3, #8
 8005028:	b2db      	uxtb	r3, r3
 800502a:	227f      	movs	r2, #127	@ 0x7f
 800502c:	4013      	ands	r3, r2
 800502e:	b2da      	uxtb	r2, r3
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	227f      	movs	r2, #127	@ 0x7f
 800503a:	4013      	ands	r3, r2
 800503c:	b2da      	uxtb	r2, r3
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	0d9b      	lsrs	r3, r3, #22
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2201      	movs	r2, #1
 800504a:	4013      	ands	r3, r2
 800504c:	b2da      	uxtb	r2, r3
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	0e1b      	lsrs	r3, r3, #24
 800505c:	b2db      	uxtb	r3, r3
 800505e:	223f      	movs	r2, #63	@ 0x3f
 8005060:	4013      	ands	r3, r2
 8005062:	b2d9      	uxtb	r1, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2220      	movs	r2, #32
 8005068:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	2380      	movs	r3, #128	@ 0x80
 800506e:	05db      	lsls	r3, r3, #23
 8005070:	401a      	ands	r2, r3
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	4a3b      	ldr	r2, [pc, #236]	@ (8005168 <HAL_RTC_GetAlarm+0x188>)
 800507a:	401a      	ands	r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	615a      	str	r2, [r3, #20]
 8005080:	e043      	b.n	800510a <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2280      	movs	r2, #128	@ 0x80
 8005086:	0092      	lsls	r2, r2, #2
 8005088:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005090:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005098:	045b      	lsls	r3, r3, #17
 800509a:	0c5b      	lsrs	r3, r3, #17
 800509c:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	0c1b      	lsrs	r3, r3, #16
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	223f      	movs	r2, #63	@ 0x3f
 80050a6:	4013      	ands	r3, r2
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	0a1b      	lsrs	r3, r3, #8
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	227f      	movs	r2, #127	@ 0x7f
 80050b6:	4013      	ands	r3, r2
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	227f      	movs	r2, #127	@ 0x7f
 80050c4:	4013      	ands	r3, r2
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	0d9b      	lsrs	r3, r3, #22
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2201      	movs	r2, #1
 80050d4:	4013      	ands	r3, r2
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	0e1b      	lsrs	r3, r3, #24
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	223f      	movs	r2, #63	@ 0x3f
 80050ea:	4013      	ands	r3, r2
 80050ec:	b2d9      	uxtb	r1, r3
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2220      	movs	r2, #32
 80050f2:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	2380      	movs	r3, #128	@ 0x80
 80050f8:	05db      	lsls	r3, r3, #23
 80050fa:	401a      	ands	r2, r3
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	4a19      	ldr	r2, [pc, #100]	@ (8005168 <HAL_RTC_GetAlarm+0x188>)
 8005104:	401a      	ands	r2, r3
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d125      	bne.n	800515c <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	0018      	movs	r0, r3
 8005116:	f000 f93b 	bl	8005390 <RTC_Bcd2ToByte>
 800511a:	0003      	movs	r3, r0
 800511c:	001a      	movs	r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	785b      	ldrb	r3, [r3, #1]
 8005126:	0018      	movs	r0, r3
 8005128:	f000 f932 	bl	8005390 <RTC_Bcd2ToByte>
 800512c:	0003      	movs	r3, r0
 800512e:	001a      	movs	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	789b      	ldrb	r3, [r3, #2]
 8005138:	0018      	movs	r0, r3
 800513a:	f000 f929 	bl	8005390 <RTC_Bcd2ToByte>
 800513e:	0003      	movs	r3, r0
 8005140:	001a      	movs	r2, r3
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2220      	movs	r2, #32
 800514a:	5c9b      	ldrb	r3, [r3, r2]
 800514c:	0018      	movs	r0, r3
 800514e:	f000 f91f 	bl	8005390 <RTC_Bcd2ToByte>
 8005152:	0003      	movs	r3, r0
 8005154:	0019      	movs	r1, r3
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2220      	movs	r2, #32
 800515a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	0018      	movs	r0, r3
 8005160:	46bd      	mov	sp, r7
 8005162:	b006      	add	sp, #24
 8005164:	bd80      	pop	{r7, pc}
 8005166:	46c0      	nop			@ (mov r8, r8)
 8005168:	80808080 	.word	0x80808080

0800516c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699a      	ldr	r2, [r3, #24]
 800517a:	2380      	movs	r3, #128	@ 0x80
 800517c:	015b      	lsls	r3, r3, #5
 800517e:	4013      	ands	r3, r2
 8005180:	d011      	beq.n	80051a6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005188:	2201      	movs	r2, #1
 800518a:	4013      	ands	r3, r2
 800518c:	d00b      	beq.n	80051a6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2101      	movs	r1, #1
 800519a:	430a      	orrs	r2, r1
 800519c:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	0018      	movs	r0, r3
 80051a2:	f7fc f995 	bl	80014d0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	699a      	ldr	r2, [r3, #24]
 80051ac:	2380      	movs	r3, #128	@ 0x80
 80051ae:	019b      	lsls	r3, r3, #6
 80051b0:	4013      	ands	r3, r2
 80051b2:	d011      	beq.n	80051d8 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ba:	2202      	movs	r2, #2
 80051bc:	4013      	ands	r3, r2
 80051be:	d00b      	beq.n	80051d8 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2102      	movs	r1, #2
 80051cc:	430a      	orrs	r2, r1
 80051ce:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	0018      	movs	r0, r3
 80051d4:	f000 f9a4 	bl	8005520 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2229      	movs	r2, #41	@ 0x29
 80051dc:	2101      	movs	r1, #1
 80051de:	5499      	strb	r1, [r3, r2]
}
 80051e0:	46c0      	nop			@ (mov r8, r8)
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b002      	add	sp, #8
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a0e      	ldr	r2, [pc, #56]	@ (8005230 <HAL_RTC_WaitForSynchro+0x48>)
 80051f6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80051f8:	f7fd fb1e 	bl	8002838 <HAL_GetTick>
 80051fc:	0003      	movs	r3, r0
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005200:	e00a      	b.n	8005218 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005202:	f7fd fb19 	bl	8002838 <HAL_GetTick>
 8005206:	0002      	movs	r2, r0
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	1ad2      	subs	r2, r2, r3
 800520c:	23fa      	movs	r3, #250	@ 0xfa
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	429a      	cmp	r2, r3
 8005212:	d901      	bls.n	8005218 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e006      	b.n	8005226 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	4013      	ands	r3, r2
 8005222:	d0ee      	beq.n	8005202 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	0018      	movs	r0, r3
 8005228:	46bd      	mov	sp, r7
 800522a:	b004      	add	sp, #16
 800522c:	bd80      	pop	{r7, pc}
 800522e:	46c0      	nop			@ (mov r8, r8)
 8005230:	0001005f 	.word	0x0001005f

08005234 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800523c:	230f      	movs	r3, #15
 800523e:	18fb      	adds	r3, r7, r3
 8005240:	2200      	movs	r2, #0
 8005242:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	2240      	movs	r2, #64	@ 0x40
 800524c:	4013      	ands	r3, r2
 800524e:	d12c      	bne.n	80052aa <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2180      	movs	r1, #128	@ 0x80
 800525c:	430a      	orrs	r2, r1
 800525e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005260:	f7fd faea 	bl	8002838 <HAL_GetTick>
 8005264:	0003      	movs	r3, r0
 8005266:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005268:	e014      	b.n	8005294 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800526a:	f7fd fae5 	bl	8002838 <HAL_GetTick>
 800526e:	0002      	movs	r2, r0
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	1ad2      	subs	r2, r2, r3
 8005274:	200f      	movs	r0, #15
 8005276:	183b      	adds	r3, r7, r0
 8005278:	1839      	adds	r1, r7, r0
 800527a:	7809      	ldrb	r1, [r1, #0]
 800527c:	7019      	strb	r1, [r3, #0]
 800527e:	23fa      	movs	r3, #250	@ 0xfa
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	429a      	cmp	r2, r3
 8005284:	d906      	bls.n	8005294 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005286:	183b      	adds	r3, r7, r0
 8005288:	2203      	movs	r2, #3
 800528a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2229      	movs	r2, #41	@ 0x29
 8005290:	2103      	movs	r1, #3
 8005292:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	2240      	movs	r2, #64	@ 0x40
 800529c:	4013      	ands	r3, r2
 800529e:	d104      	bne.n	80052aa <RTC_EnterInitMode+0x76>
 80052a0:	230f      	movs	r3, #15
 80052a2:	18fb      	adds	r3, r7, r3
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d1df      	bne.n	800526a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80052aa:	230f      	movs	r3, #15
 80052ac:	18fb      	adds	r3, r7, r3
 80052ae:	781b      	ldrb	r3, [r3, #0]
}
 80052b0:	0018      	movs	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	b004      	add	sp, #16
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80052b8:	b590      	push	{r4, r7, lr}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052c0:	240f      	movs	r4, #15
 80052c2:	193b      	adds	r3, r7, r4
 80052c4:	2200      	movs	r2, #0
 80052c6:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80052c8:	4b1c      	ldr	r3, [pc, #112]	@ (800533c <RTC_ExitInitMode+0x84>)
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	4b1b      	ldr	r3, [pc, #108]	@ (800533c <RTC_ExitInitMode+0x84>)
 80052ce:	2180      	movs	r1, #128	@ 0x80
 80052d0:	438a      	bics	r2, r1
 80052d2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80052d4:	4b19      	ldr	r3, [pc, #100]	@ (800533c <RTC_ExitInitMode+0x84>)
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	2220      	movs	r2, #32
 80052da:	4013      	ands	r3, r2
 80052dc:	d10d      	bne.n	80052fa <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	0018      	movs	r0, r3
 80052e2:	f7ff ff81 	bl	80051e8 <HAL_RTC_WaitForSynchro>
 80052e6:	1e03      	subs	r3, r0, #0
 80052e8:	d021      	beq.n	800532e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2229      	movs	r2, #41	@ 0x29
 80052ee:	2103      	movs	r1, #3
 80052f0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80052f2:	193b      	adds	r3, r7, r4
 80052f4:	2203      	movs	r2, #3
 80052f6:	701a      	strb	r2, [r3, #0]
 80052f8:	e019      	b.n	800532e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80052fa:	4b10      	ldr	r3, [pc, #64]	@ (800533c <RTC_ExitInitMode+0x84>)
 80052fc:	699a      	ldr	r2, [r3, #24]
 80052fe:	4b0f      	ldr	r3, [pc, #60]	@ (800533c <RTC_ExitInitMode+0x84>)
 8005300:	2120      	movs	r1, #32
 8005302:	438a      	bics	r2, r1
 8005304:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	0018      	movs	r0, r3
 800530a:	f7ff ff6d 	bl	80051e8 <HAL_RTC_WaitForSynchro>
 800530e:	1e03      	subs	r3, r0, #0
 8005310:	d007      	beq.n	8005322 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2229      	movs	r2, #41	@ 0x29
 8005316:	2103      	movs	r1, #3
 8005318:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800531a:	230f      	movs	r3, #15
 800531c:	18fb      	adds	r3, r7, r3
 800531e:	2203      	movs	r2, #3
 8005320:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005322:	4b06      	ldr	r3, [pc, #24]	@ (800533c <RTC_ExitInitMode+0x84>)
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	4b05      	ldr	r3, [pc, #20]	@ (800533c <RTC_ExitInitMode+0x84>)
 8005328:	2120      	movs	r1, #32
 800532a:	430a      	orrs	r2, r1
 800532c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800532e:	230f      	movs	r3, #15
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	781b      	ldrb	r3, [r3, #0]
}
 8005334:	0018      	movs	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	b005      	add	sp, #20
 800533a:	bd90      	pop	{r4, r7, pc}
 800533c:	40002800 	.word	0x40002800

08005340 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	0002      	movs	r2, r0
 8005348:	1dfb      	adds	r3, r7, #7
 800534a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005350:	230b      	movs	r3, #11
 8005352:	18fb      	adds	r3, r7, r3
 8005354:	1dfa      	adds	r2, r7, #7
 8005356:	7812      	ldrb	r2, [r2, #0]
 8005358:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800535a:	e008      	b.n	800536e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	3301      	adds	r3, #1
 8005360:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005362:	220b      	movs	r2, #11
 8005364:	18bb      	adds	r3, r7, r2
 8005366:	18ba      	adds	r2, r7, r2
 8005368:	7812      	ldrb	r2, [r2, #0]
 800536a:	3a0a      	subs	r2, #10
 800536c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800536e:	210b      	movs	r1, #11
 8005370:	187b      	adds	r3, r7, r1
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b09      	cmp	r3, #9
 8005376:	d8f1      	bhi.n	800535c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	b2db      	uxtb	r3, r3
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	b2da      	uxtb	r2, r3
 8005380:	187b      	adds	r3, r7, r1
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	4313      	orrs	r3, r2
 8005386:	b2db      	uxtb	r3, r3
}
 8005388:	0018      	movs	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	b004      	add	sp, #16
 800538e:	bd80      	pop	{r7, pc}

08005390 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	0002      	movs	r2, r0
 8005398:	1dfb      	adds	r3, r7, #7
 800539a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800539c:	1dfb      	adds	r3, r7, #7
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	091b      	lsrs	r3, r3, #4
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	001a      	movs	r2, r3
 80053a6:	0013      	movs	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	189b      	adds	r3, r3, r2
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	1dfb      	adds	r3, r7, #7
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	210f      	movs	r1, #15
 80053ba:	400b      	ands	r3, r1
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	18d3      	adds	r3, r2, r3
 80053c0:	b2db      	uxtb	r3, r3
}
 80053c2:	0018      	movs	r0, r3
 80053c4:	46bd      	mov	sp, r7
 80053c6:	b004      	add	sp, #16
 80053c8:	bd80      	pop	{r7, pc}

080053ca <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b086      	sub	sp, #24
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]
 80053d6:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2228      	movs	r2, #40	@ 0x28
 80053dc:	5c9b      	ldrb	r3, [r3, r2]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_RTCEx_SetSmoothCalib+0x1c>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e04f      	b.n	8005486 <HAL_RTCEx_SetSmoothCalib+0xbc>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2228      	movs	r2, #40	@ 0x28
 80053ea:	2101      	movs	r1, #1
 80053ec:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2229      	movs	r2, #41	@ 0x29
 80053f2:	2102      	movs	r1, #2
 80053f4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	22ca      	movs	r2, #202	@ 0xca
 80053fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2253      	movs	r2, #83	@ 0x53
 8005404:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	2380      	movs	r3, #128	@ 0x80
 800540e:	025b      	lsls	r3, r3, #9
 8005410:	4013      	ands	r3, r2
 8005412:	d022      	beq.n	800545a <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8005414:	f7fd fa10 	bl	8002838 <HAL_GetTick>
 8005418:	0003      	movs	r3, r0
 800541a:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 800541c:	e016      	b.n	800544c <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800541e:	f7fd fa0b 	bl	8002838 <HAL_GetTick>
 8005422:	0002      	movs	r2, r0
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	1ad2      	subs	r2, r2, r3
 8005428:	23fa      	movs	r3, #250	@ 0xfa
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	429a      	cmp	r2, r3
 800542e:	d90d      	bls.n	800544c <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	22ff      	movs	r2, #255	@ 0xff
 8005436:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2229      	movs	r2, #41	@ 0x29
 800543c:	2103      	movs	r1, #3
 800543e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2228      	movs	r2, #40	@ 0x28
 8005444:	2100      	movs	r1, #0
 8005446:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e01c      	b.n	8005486 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	2380      	movs	r3, #128	@ 0x80
 8005454:	025b      	lsls	r3, r3, #9
 8005456:	4013      	ands	r3, r2
 8005458:	d1e1      	bne.n	800541e <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	431a      	orrs	r2, r3
 8005460:	0011      	movs	r1, r2
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	22ff      	movs	r2, #255	@ 0xff
 8005472:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2229      	movs	r2, #41	@ 0x29
 8005478:	2101      	movs	r1, #1
 800547a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2228      	movs	r2, #40	@ 0x28
 8005480:	2100      	movs	r1, #0
 8005482:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	0018      	movs	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	b006      	add	sp, #24
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2228      	movs	r2, #40	@ 0x28
 800549e:	5c9b      	ldrb	r3, [r3, r2]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e035      	b.n	8005514 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2228      	movs	r2, #40	@ 0x28
 80054ac:	2101      	movs	r1, #1
 80054ae:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2229      	movs	r2, #41	@ 0x29
 80054b4:	2102      	movs	r1, #2
 80054b6:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	22ca      	movs	r2, #202	@ 0xca
 80054be:	625a      	str	r2, [r3, #36]	@ 0x24
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2253      	movs	r2, #83	@ 0x53
 80054c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4912      	ldr	r1, [pc, #72]	@ (800551c <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 80054d4:	400a      	ands	r2, r1
 80054d6:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6999      	ldr	r1, [r3, #24]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699a      	ldr	r2, [r3, #24]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2180      	movs	r1, #128	@ 0x80
 80054f4:	0409      	lsls	r1, r1, #16
 80054f6:	430a      	orrs	r2, r1
 80054f8:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	22ff      	movs	r2, #255	@ 0xff
 8005500:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2229      	movs	r2, #41	@ 0x29
 8005506:	2101      	movs	r1, #1
 8005508:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2228      	movs	r2, #40	@ 0x28
 800550e:	2100      	movs	r1, #0
 8005510:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	0018      	movs	r0, r3
 8005516:	46bd      	mov	sp, r7
 8005518:	b002      	add	sp, #8
 800551a:	bd80      	pop	{r7, pc}
 800551c:	fff7ffff 	.word	0xfff7ffff

08005520 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005528:	46c0      	nop			@ (mov r8, r8)
 800552a:	46bd      	mov	sp, r7
 800552c:	b002      	add	sp, #8
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	001a      	movs	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	18d3      	adds	r3, r2, r3
 8005548:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	3301      	adds	r3, #1
 800554e:	33ff      	adds	r3, #255	@ 0xff
 8005550:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	18d3      	adds	r3, r2, r3
 800555a:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	601a      	str	r2, [r3, #0]
}
 8005562:	46c0      	nop			@ (mov r8, r8)
 8005564:	46bd      	mov	sp, r7
 8005566:	b006      	add	sp, #24
 8005568:	bd80      	pop	{r7, pc}

0800556a <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	001a      	movs	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	18d3      	adds	r3, r2, r3
 8005580:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3301      	adds	r3, #1
 8005586:	33ff      	adds	r3, #255	@ 0xff
 8005588:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	18d3      	adds	r3, r2, r3
 8005592:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	681b      	ldr	r3, [r3, #0]
}
 8005598:	0018      	movs	r0, r3
 800559a:	46bd      	mov	sp, r7
 800559c:	b004      	add	sp, #16
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e04a      	b.n	8005648 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	223d      	movs	r2, #61	@ 0x3d
 80055b6:	5c9b      	ldrb	r3, [r3, r2]
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d107      	bne.n	80055ce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	223c      	movs	r2, #60	@ 0x3c
 80055c2:	2100      	movs	r1, #0
 80055c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	0018      	movs	r0, r3
 80055ca:	f7fc ff8b 	bl	80024e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	223d      	movs	r2, #61	@ 0x3d
 80055d2:	2102      	movs	r1, #2
 80055d4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	3304      	adds	r3, #4
 80055de:	0019      	movs	r1, r3
 80055e0:	0010      	movs	r0, r2
 80055e2:	f000 fd0d 	bl	8006000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2248      	movs	r2, #72	@ 0x48
 80055ea:	2101      	movs	r1, #1
 80055ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	223e      	movs	r2, #62	@ 0x3e
 80055f2:	2101      	movs	r1, #1
 80055f4:	5499      	strb	r1, [r3, r2]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	223f      	movs	r2, #63	@ 0x3f
 80055fa:	2101      	movs	r1, #1
 80055fc:	5499      	strb	r1, [r3, r2]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2240      	movs	r2, #64	@ 0x40
 8005602:	2101      	movs	r1, #1
 8005604:	5499      	strb	r1, [r3, r2]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2241      	movs	r2, #65	@ 0x41
 800560a:	2101      	movs	r1, #1
 800560c:	5499      	strb	r1, [r3, r2]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2242      	movs	r2, #66	@ 0x42
 8005612:	2101      	movs	r1, #1
 8005614:	5499      	strb	r1, [r3, r2]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2243      	movs	r2, #67	@ 0x43
 800561a:	2101      	movs	r1, #1
 800561c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2244      	movs	r2, #68	@ 0x44
 8005622:	2101      	movs	r1, #1
 8005624:	5499      	strb	r1, [r3, r2]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2245      	movs	r2, #69	@ 0x45
 800562a:	2101      	movs	r1, #1
 800562c:	5499      	strb	r1, [r3, r2]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2246      	movs	r2, #70	@ 0x46
 8005632:	2101      	movs	r1, #1
 8005634:	5499      	strb	r1, [r3, r2]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2247      	movs	r2, #71	@ 0x47
 800563a:	2101      	movs	r1, #1
 800563c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	223d      	movs	r2, #61	@ 0x3d
 8005642:	2101      	movs	r1, #1
 8005644:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	0018      	movs	r0, r3
 800564a:	46bd      	mov	sp, r7
 800564c:	b002      	add	sp, #8
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	223d      	movs	r2, #61	@ 0x3d
 800565c:	5c9b      	ldrb	r3, [r3, r2]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b01      	cmp	r3, #1
 8005662:	d001      	beq.n	8005668 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e035      	b.n	80056d4 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	223d      	movs	r2, #61	@ 0x3d
 800566c:	2102      	movs	r1, #2
 800566e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a19      	ldr	r2, [pc, #100]	@ (80056dc <HAL_TIM_Base_Start+0x8c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00a      	beq.n	8005690 <HAL_TIM_Base_Start+0x40>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	2380      	movs	r3, #128	@ 0x80
 8005680:	05db      	lsls	r3, r3, #23
 8005682:	429a      	cmp	r2, r3
 8005684:	d004      	beq.n	8005690 <HAL_TIM_Base_Start+0x40>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a15      	ldr	r2, [pc, #84]	@ (80056e0 <HAL_TIM_Base_Start+0x90>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d116      	bne.n	80056be <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	4a13      	ldr	r2, [pc, #76]	@ (80056e4 <HAL_TIM_Base_Start+0x94>)
 8005698:	4013      	ands	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b06      	cmp	r3, #6
 80056a0:	d016      	beq.n	80056d0 <HAL_TIM_Base_Start+0x80>
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	2380      	movs	r3, #128	@ 0x80
 80056a6:	025b      	lsls	r3, r3, #9
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d011      	beq.n	80056d0 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2101      	movs	r1, #1
 80056b8:	430a      	orrs	r2, r1
 80056ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056bc:	e008      	b.n	80056d0 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2101      	movs	r1, #1
 80056ca:	430a      	orrs	r2, r1
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	e000      	b.n	80056d2 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	0018      	movs	r0, r3
 80056d6:	46bd      	mov	sp, r7
 80056d8:	b004      	add	sp, #16
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40012c00 	.word	0x40012c00
 80056e0:	40000400 	.word	0x40000400
 80056e4:	00010007 	.word	0x00010007

080056e8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	4a0d      	ldr	r2, [pc, #52]	@ (800572c <HAL_TIM_Base_Stop+0x44>)
 80056f8:	4013      	ands	r3, r2
 80056fa:	d10d      	bne.n	8005718 <HAL_TIM_Base_Stop+0x30>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	4a0b      	ldr	r2, [pc, #44]	@ (8005730 <HAL_TIM_Base_Stop+0x48>)
 8005704:	4013      	ands	r3, r2
 8005706:	d107      	bne.n	8005718 <HAL_TIM_Base_Stop+0x30>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2101      	movs	r1, #1
 8005714:	438a      	bics	r2, r1
 8005716:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	223d      	movs	r2, #61	@ 0x3d
 800571c:	2101      	movs	r1, #1
 800571e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	0018      	movs	r0, r3
 8005724:	46bd      	mov	sp, r7
 8005726:	b002      	add	sp, #8
 8005728:	bd80      	pop	{r7, pc}
 800572a:	46c0      	nop			@ (mov r8, r8)
 800572c:	00001111 	.word	0x00001111
 8005730:	00000444 	.word	0x00000444

08005734 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	223d      	movs	r2, #61	@ 0x3d
 8005740:	5c9b      	ldrb	r3, [r3, r2]
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	d001      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e03d      	b.n	80057c8 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	223d      	movs	r2, #61	@ 0x3d
 8005750:	2102      	movs	r1, #2
 8005752:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2101      	movs	r1, #1
 8005760:	430a      	orrs	r2, r1
 8005762:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a19      	ldr	r2, [pc, #100]	@ (80057d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00a      	beq.n	8005784 <HAL_TIM_Base_Start_IT+0x50>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	2380      	movs	r3, #128	@ 0x80
 8005774:	05db      	lsls	r3, r3, #23
 8005776:	429a      	cmp	r2, r3
 8005778:	d004      	beq.n	8005784 <HAL_TIM_Base_Start_IT+0x50>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a15      	ldr	r2, [pc, #84]	@ (80057d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d116      	bne.n	80057b2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	4a13      	ldr	r2, [pc, #76]	@ (80057d8 <HAL_TIM_Base_Start_IT+0xa4>)
 800578c:	4013      	ands	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b06      	cmp	r3, #6
 8005794:	d016      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x90>
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	2380      	movs	r3, #128	@ 0x80
 800579a:	025b      	lsls	r3, r3, #9
 800579c:	429a      	cmp	r2, r3
 800579e:	d011      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2101      	movs	r1, #1
 80057ac:	430a      	orrs	r2, r1
 80057ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b0:	e008      	b.n	80057c4 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2101      	movs	r1, #1
 80057be:	430a      	orrs	r2, r1
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	e000      	b.n	80057c6 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	0018      	movs	r0, r3
 80057ca:	46bd      	mov	sp, r7
 80057cc:	b004      	add	sp, #16
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	40012c00 	.word	0x40012c00
 80057d4:	40000400 	.word	0x40000400
 80057d8:	00010007 	.word	0x00010007

080057dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2101      	movs	r1, #1
 80057f0:	438a      	bics	r2, r1
 80057f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005830 <HAL_TIM_Base_Stop_IT+0x54>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	d10d      	bne.n	800581c <HAL_TIM_Base_Stop_IT+0x40>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	4a0b      	ldr	r2, [pc, #44]	@ (8005834 <HAL_TIM_Base_Stop_IT+0x58>)
 8005808:	4013      	ands	r3, r2
 800580a:	d107      	bne.n	800581c <HAL_TIM_Base_Stop_IT+0x40>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2101      	movs	r1, #1
 8005818:	438a      	bics	r2, r1
 800581a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	223d      	movs	r2, #61	@ 0x3d
 8005820:	2101      	movs	r1, #1
 8005822:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	0018      	movs	r0, r3
 8005828:	46bd      	mov	sp, r7
 800582a:	b002      	add	sp, #8
 800582c:	bd80      	pop	{r7, pc}
 800582e:	46c0      	nop			@ (mov r8, r8)
 8005830:	00001111 	.word	0x00001111
 8005834:	00000444 	.word	0x00000444

08005838 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e04a      	b.n	80058e0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	223d      	movs	r2, #61	@ 0x3d
 800584e:	5c9b      	ldrb	r3, [r3, r2]
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d107      	bne.n	8005866 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	223c      	movs	r2, #60	@ 0x3c
 800585a:	2100      	movs	r1, #0
 800585c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	0018      	movs	r0, r3
 8005862:	f7fc fdf5 	bl	8002450 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	223d      	movs	r2, #61	@ 0x3d
 800586a:	2102      	movs	r1, #2
 800586c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	3304      	adds	r3, #4
 8005876:	0019      	movs	r1, r3
 8005878:	0010      	movs	r0, r2
 800587a:	f000 fbc1 	bl	8006000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2248      	movs	r2, #72	@ 0x48
 8005882:	2101      	movs	r1, #1
 8005884:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	223e      	movs	r2, #62	@ 0x3e
 800588a:	2101      	movs	r1, #1
 800588c:	5499      	strb	r1, [r3, r2]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	223f      	movs	r2, #63	@ 0x3f
 8005892:	2101      	movs	r1, #1
 8005894:	5499      	strb	r1, [r3, r2]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2240      	movs	r2, #64	@ 0x40
 800589a:	2101      	movs	r1, #1
 800589c:	5499      	strb	r1, [r3, r2]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2241      	movs	r2, #65	@ 0x41
 80058a2:	2101      	movs	r1, #1
 80058a4:	5499      	strb	r1, [r3, r2]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2242      	movs	r2, #66	@ 0x42
 80058aa:	2101      	movs	r1, #1
 80058ac:	5499      	strb	r1, [r3, r2]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2243      	movs	r2, #67	@ 0x43
 80058b2:	2101      	movs	r1, #1
 80058b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2244      	movs	r2, #68	@ 0x44
 80058ba:	2101      	movs	r1, #1
 80058bc:	5499      	strb	r1, [r3, r2]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2245      	movs	r2, #69	@ 0x45
 80058c2:	2101      	movs	r1, #1
 80058c4:	5499      	strb	r1, [r3, r2]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2246      	movs	r2, #70	@ 0x46
 80058ca:	2101      	movs	r1, #1
 80058cc:	5499      	strb	r1, [r3, r2]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2247      	movs	r2, #71	@ 0x47
 80058d2:	2101      	movs	r1, #1
 80058d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	223d      	movs	r2, #61	@ 0x3d
 80058da:	2101      	movs	r1, #1
 80058dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	0018      	movs	r0, r3
 80058e2:	46bd      	mov	sp, r7
 80058e4:	b002      	add	sp, #8
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d108      	bne.n	800590a <HAL_TIM_PWM_Start+0x22>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	223e      	movs	r2, #62	@ 0x3e
 80058fc:	5c9b      	ldrb	r3, [r3, r2]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	3b01      	subs	r3, #1
 8005902:	1e5a      	subs	r2, r3, #1
 8005904:	4193      	sbcs	r3, r2
 8005906:	b2db      	uxtb	r3, r3
 8005908:	e037      	b.n	800597a <HAL_TIM_PWM_Start+0x92>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b04      	cmp	r3, #4
 800590e:	d108      	bne.n	8005922 <HAL_TIM_PWM_Start+0x3a>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	223f      	movs	r2, #63	@ 0x3f
 8005914:	5c9b      	ldrb	r3, [r3, r2]
 8005916:	b2db      	uxtb	r3, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	1e5a      	subs	r2, r3, #1
 800591c:	4193      	sbcs	r3, r2
 800591e:	b2db      	uxtb	r3, r3
 8005920:	e02b      	b.n	800597a <HAL_TIM_PWM_Start+0x92>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b08      	cmp	r3, #8
 8005926:	d108      	bne.n	800593a <HAL_TIM_PWM_Start+0x52>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2240      	movs	r2, #64	@ 0x40
 800592c:	5c9b      	ldrb	r3, [r3, r2]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	3b01      	subs	r3, #1
 8005932:	1e5a      	subs	r2, r3, #1
 8005934:	4193      	sbcs	r3, r2
 8005936:	b2db      	uxtb	r3, r3
 8005938:	e01f      	b.n	800597a <HAL_TIM_PWM_Start+0x92>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b0c      	cmp	r3, #12
 800593e:	d108      	bne.n	8005952 <HAL_TIM_PWM_Start+0x6a>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2241      	movs	r2, #65	@ 0x41
 8005944:	5c9b      	ldrb	r3, [r3, r2]
 8005946:	b2db      	uxtb	r3, r3
 8005948:	3b01      	subs	r3, #1
 800594a:	1e5a      	subs	r2, r3, #1
 800594c:	4193      	sbcs	r3, r2
 800594e:	b2db      	uxtb	r3, r3
 8005950:	e013      	b.n	800597a <HAL_TIM_PWM_Start+0x92>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b10      	cmp	r3, #16
 8005956:	d108      	bne.n	800596a <HAL_TIM_PWM_Start+0x82>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2242      	movs	r2, #66	@ 0x42
 800595c:	5c9b      	ldrb	r3, [r3, r2]
 800595e:	b2db      	uxtb	r3, r3
 8005960:	3b01      	subs	r3, #1
 8005962:	1e5a      	subs	r2, r3, #1
 8005964:	4193      	sbcs	r3, r2
 8005966:	b2db      	uxtb	r3, r3
 8005968:	e007      	b.n	800597a <HAL_TIM_PWM_Start+0x92>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2243      	movs	r2, #67	@ 0x43
 800596e:	5c9b      	ldrb	r3, [r3, r2]
 8005970:	b2db      	uxtb	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	1e5a      	subs	r2, r3, #1
 8005976:	4193      	sbcs	r3, r2
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e081      	b.n	8005a86 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d104      	bne.n	8005992 <HAL_TIM_PWM_Start+0xaa>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	223e      	movs	r2, #62	@ 0x3e
 800598c:	2102      	movs	r1, #2
 800598e:	5499      	strb	r1, [r3, r2]
 8005990:	e023      	b.n	80059da <HAL_TIM_PWM_Start+0xf2>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b04      	cmp	r3, #4
 8005996:	d104      	bne.n	80059a2 <HAL_TIM_PWM_Start+0xba>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	223f      	movs	r2, #63	@ 0x3f
 800599c:	2102      	movs	r1, #2
 800599e:	5499      	strb	r1, [r3, r2]
 80059a0:	e01b      	b.n	80059da <HAL_TIM_PWM_Start+0xf2>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d104      	bne.n	80059b2 <HAL_TIM_PWM_Start+0xca>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2240      	movs	r2, #64	@ 0x40
 80059ac:	2102      	movs	r1, #2
 80059ae:	5499      	strb	r1, [r3, r2]
 80059b0:	e013      	b.n	80059da <HAL_TIM_PWM_Start+0xf2>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b0c      	cmp	r3, #12
 80059b6:	d104      	bne.n	80059c2 <HAL_TIM_PWM_Start+0xda>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2241      	movs	r2, #65	@ 0x41
 80059bc:	2102      	movs	r1, #2
 80059be:	5499      	strb	r1, [r3, r2]
 80059c0:	e00b      	b.n	80059da <HAL_TIM_PWM_Start+0xf2>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b10      	cmp	r3, #16
 80059c6:	d104      	bne.n	80059d2 <HAL_TIM_PWM_Start+0xea>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2242      	movs	r2, #66	@ 0x42
 80059cc:	2102      	movs	r1, #2
 80059ce:	5499      	strb	r1, [r3, r2]
 80059d0:	e003      	b.n	80059da <HAL_TIM_PWM_Start+0xf2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2243      	movs	r2, #67	@ 0x43
 80059d6:	2102      	movs	r1, #2
 80059d8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6839      	ldr	r1, [r7, #0]
 80059e0:	2201      	movs	r2, #1
 80059e2:	0018      	movs	r0, r3
 80059e4:	f000 fe2c 	bl	8006640 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a28      	ldr	r2, [pc, #160]	@ (8005a90 <HAL_TIM_PWM_Start+0x1a8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d009      	beq.n	8005a06 <HAL_TIM_PWM_Start+0x11e>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a27      	ldr	r2, [pc, #156]	@ (8005a94 <HAL_TIM_PWM_Start+0x1ac>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d004      	beq.n	8005a06 <HAL_TIM_PWM_Start+0x11e>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a25      	ldr	r2, [pc, #148]	@ (8005a98 <HAL_TIM_PWM_Start+0x1b0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d101      	bne.n	8005a0a <HAL_TIM_PWM_Start+0x122>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <HAL_TIM_PWM_Start+0x124>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d008      	beq.n	8005a22 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2180      	movs	r1, #128	@ 0x80
 8005a1c:	0209      	lsls	r1, r1, #8
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a1a      	ldr	r2, [pc, #104]	@ (8005a90 <HAL_TIM_PWM_Start+0x1a8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00a      	beq.n	8005a42 <HAL_TIM_PWM_Start+0x15a>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	2380      	movs	r3, #128	@ 0x80
 8005a32:	05db      	lsls	r3, r3, #23
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d004      	beq.n	8005a42 <HAL_TIM_PWM_Start+0x15a>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a17      	ldr	r2, [pc, #92]	@ (8005a9c <HAL_TIM_PWM_Start+0x1b4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d116      	bne.n	8005a70 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	4a15      	ldr	r2, [pc, #84]	@ (8005aa0 <HAL_TIM_PWM_Start+0x1b8>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b06      	cmp	r3, #6
 8005a52:	d016      	beq.n	8005a82 <HAL_TIM_PWM_Start+0x19a>
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	2380      	movs	r3, #128	@ 0x80
 8005a58:	025b      	lsls	r3, r3, #9
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d011      	beq.n	8005a82 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2101      	movs	r1, #1
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6e:	e008      	b.n	8005a82 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	e000      	b.n	8005a84 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a82:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	0018      	movs	r0, r3
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	b004      	add	sp, #16
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	46c0      	nop			@ (mov r8, r8)
 8005a90:	40012c00 	.word	0x40012c00
 8005a94:	40014400 	.word	0x40014400
 8005a98:	40014800 	.word	0x40014800
 8005a9c:	40000400 	.word	0x40000400
 8005aa0:	00010007 	.word	0x00010007

08005aa4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6839      	ldr	r1, [r7, #0]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	f000 fdc2 	bl	8006640 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a35      	ldr	r2, [pc, #212]	@ (8005b98 <HAL_TIM_PWM_Stop+0xf4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d009      	beq.n	8005ada <HAL_TIM_PWM_Stop+0x36>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a34      	ldr	r2, [pc, #208]	@ (8005b9c <HAL_TIM_PWM_Stop+0xf8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d004      	beq.n	8005ada <HAL_TIM_PWM_Stop+0x36>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a32      	ldr	r2, [pc, #200]	@ (8005ba0 <HAL_TIM_PWM_Stop+0xfc>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d101      	bne.n	8005ade <HAL_TIM_PWM_Stop+0x3a>
 8005ada:	2301      	movs	r3, #1
 8005adc:	e000      	b.n	8005ae0 <HAL_TIM_PWM_Stop+0x3c>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d013      	beq.n	8005b0c <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	4a2e      	ldr	r2, [pc, #184]	@ (8005ba4 <HAL_TIM_PWM_Stop+0x100>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	d10d      	bne.n	8005b0c <HAL_TIM_PWM_Stop+0x68>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	4a2c      	ldr	r2, [pc, #176]	@ (8005ba8 <HAL_TIM_PWM_Stop+0x104>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	d107      	bne.n	8005b0c <HAL_TIM_PWM_Stop+0x68>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4929      	ldr	r1, [pc, #164]	@ (8005bac <HAL_TIM_PWM_Stop+0x108>)
 8005b08:	400a      	ands	r2, r1
 8005b0a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	4a24      	ldr	r2, [pc, #144]	@ (8005ba4 <HAL_TIM_PWM_Stop+0x100>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	d10d      	bne.n	8005b34 <HAL_TIM_PWM_Stop+0x90>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	4a22      	ldr	r2, [pc, #136]	@ (8005ba8 <HAL_TIM_PWM_Stop+0x104>)
 8005b20:	4013      	ands	r3, r2
 8005b22:	d107      	bne.n	8005b34 <HAL_TIM_PWM_Stop+0x90>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2101      	movs	r1, #1
 8005b30:	438a      	bics	r2, r1
 8005b32:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d104      	bne.n	8005b44 <HAL_TIM_PWM_Stop+0xa0>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	223e      	movs	r2, #62	@ 0x3e
 8005b3e:	2101      	movs	r1, #1
 8005b40:	5499      	strb	r1, [r3, r2]
 8005b42:	e023      	b.n	8005b8c <HAL_TIM_PWM_Stop+0xe8>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d104      	bne.n	8005b54 <HAL_TIM_PWM_Stop+0xb0>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	223f      	movs	r2, #63	@ 0x3f
 8005b4e:	2101      	movs	r1, #1
 8005b50:	5499      	strb	r1, [r3, r2]
 8005b52:	e01b      	b.n	8005b8c <HAL_TIM_PWM_Stop+0xe8>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b08      	cmp	r3, #8
 8005b58:	d104      	bne.n	8005b64 <HAL_TIM_PWM_Stop+0xc0>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2240      	movs	r2, #64	@ 0x40
 8005b5e:	2101      	movs	r1, #1
 8005b60:	5499      	strb	r1, [r3, r2]
 8005b62:	e013      	b.n	8005b8c <HAL_TIM_PWM_Stop+0xe8>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b0c      	cmp	r3, #12
 8005b68:	d104      	bne.n	8005b74 <HAL_TIM_PWM_Stop+0xd0>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2241      	movs	r2, #65	@ 0x41
 8005b6e:	2101      	movs	r1, #1
 8005b70:	5499      	strb	r1, [r3, r2]
 8005b72:	e00b      	b.n	8005b8c <HAL_TIM_PWM_Stop+0xe8>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2b10      	cmp	r3, #16
 8005b78:	d104      	bne.n	8005b84 <HAL_TIM_PWM_Stop+0xe0>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2242      	movs	r2, #66	@ 0x42
 8005b7e:	2101      	movs	r1, #1
 8005b80:	5499      	strb	r1, [r3, r2]
 8005b82:	e003      	b.n	8005b8c <HAL_TIM_PWM_Stop+0xe8>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2243      	movs	r2, #67	@ 0x43
 8005b88:	2101      	movs	r1, #1
 8005b8a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	0018      	movs	r0, r3
 8005b90:	46bd      	mov	sp, r7
 8005b92:	b002      	add	sp, #8
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	46c0      	nop			@ (mov r8, r8)
 8005b98:	40012c00 	.word	0x40012c00
 8005b9c:	40014400 	.word	0x40014400
 8005ba0:	40014800 	.word	0x40014800
 8005ba4:	00001111 	.word	0x00001111
 8005ba8:	00000444 	.word	0x00000444
 8005bac:	ffff7fff 	.word	0xffff7fff

08005bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	4013      	ands	r3, r2
 8005bce:	d021      	beq.n	8005c14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	d01d      	beq.n	8005c14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2203      	movs	r2, #3
 8005bde:	4252      	negs	r2, r2
 8005be0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	2203      	movs	r2, #3
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d004      	beq.n	8005bfe <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f000 f9ea 	bl	8005fd0 <HAL_TIM_IC_CaptureCallback>
 8005bfc:	e007      	b.n	8005c0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	0018      	movs	r0, r3
 8005c02:	f000 f9dd 	bl	8005fc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f000 f9e9 	bl	8005fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2204      	movs	r2, #4
 8005c18:	4013      	ands	r3, r2
 8005c1a:	d022      	beq.n	8005c62 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2204      	movs	r2, #4
 8005c20:	4013      	ands	r3, r2
 8005c22:	d01e      	beq.n	8005c62 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2205      	movs	r2, #5
 8005c2a:	4252      	negs	r2, r2
 8005c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2202      	movs	r2, #2
 8005c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	23c0      	movs	r3, #192	@ 0xc0
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4013      	ands	r3, r2
 8005c40:	d004      	beq.n	8005c4c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	0018      	movs	r0, r3
 8005c46:	f000 f9c3 	bl	8005fd0 <HAL_TIM_IC_CaptureCallback>
 8005c4a:	e007      	b.n	8005c5c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f000 f9b6 	bl	8005fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	0018      	movs	r0, r3
 8005c58:	f000 f9c2 	bl	8005fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2208      	movs	r2, #8
 8005c66:	4013      	ands	r3, r2
 8005c68:	d021      	beq.n	8005cae <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2208      	movs	r2, #8
 8005c6e:	4013      	ands	r3, r2
 8005c70:	d01d      	beq.n	8005cae <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2209      	movs	r2, #9
 8005c78:	4252      	negs	r2, r2
 8005c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2204      	movs	r2, #4
 8005c80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	2203      	movs	r2, #3
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	d004      	beq.n	8005c98 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	0018      	movs	r0, r3
 8005c92:	f000 f99d 	bl	8005fd0 <HAL_TIM_IC_CaptureCallback>
 8005c96:	e007      	b.n	8005ca8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	f000 f990 	bl	8005fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	f000 f99c 	bl	8005fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2210      	movs	r2, #16
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	d022      	beq.n	8005cfc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2210      	movs	r2, #16
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d01e      	beq.n	8005cfc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2211      	movs	r2, #17
 8005cc4:	4252      	negs	r2, r2
 8005cc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2208      	movs	r2, #8
 8005ccc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69da      	ldr	r2, [r3, #28]
 8005cd4:	23c0      	movs	r3, #192	@ 0xc0
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4013      	ands	r3, r2
 8005cda:	d004      	beq.n	8005ce6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f000 f976 	bl	8005fd0 <HAL_TIM_IC_CaptureCallback>
 8005ce4:	e007      	b.n	8005cf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	0018      	movs	r0, r3
 8005cea:	f000 f969 	bl	8005fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	f000 f975 	bl	8005fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	4013      	ands	r3, r2
 8005d02:	d00c      	beq.n	8005d1e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2201      	movs	r2, #1
 8005d08:	4013      	ands	r3, r2
 8005d0a:	d008      	beq.n	8005d1e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2202      	movs	r2, #2
 8005d12:	4252      	negs	r2, r2
 8005d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f7fb fddb 	bl	80018d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2280      	movs	r2, #128	@ 0x80
 8005d22:	4013      	ands	r3, r2
 8005d24:	d104      	bne.n	8005d30 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	2380      	movs	r3, #128	@ 0x80
 8005d2a:	019b      	lsls	r3, r3, #6
 8005d2c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d2e:	d00b      	beq.n	8005d48 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2280      	movs	r2, #128	@ 0x80
 8005d34:	4013      	ands	r3, r2
 8005d36:	d007      	beq.n	8005d48 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1e      	ldr	r2, [pc, #120]	@ (8005db8 <HAL_TIM_IRQHandler+0x208>)
 8005d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	0018      	movs	r0, r3
 8005d44:	f000 fdac 	bl	80068a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	2380      	movs	r3, #128	@ 0x80
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	4013      	ands	r3, r2
 8005d50:	d00b      	beq.n	8005d6a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2280      	movs	r2, #128	@ 0x80
 8005d56:	4013      	ands	r3, r2
 8005d58:	d007      	beq.n	8005d6a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a17      	ldr	r2, [pc, #92]	@ (8005dbc <HAL_TIM_IRQHandler+0x20c>)
 8005d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	0018      	movs	r0, r3
 8005d66:	f000 fda3 	bl	80068b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2240      	movs	r2, #64	@ 0x40
 8005d6e:	4013      	ands	r3, r2
 8005d70:	d00c      	beq.n	8005d8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2240      	movs	r2, #64	@ 0x40
 8005d76:	4013      	ands	r3, r2
 8005d78:	d008      	beq.n	8005d8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2241      	movs	r2, #65	@ 0x41
 8005d80:	4252      	negs	r2, r2
 8005d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	0018      	movs	r0, r3
 8005d88:	f000 f932 	bl	8005ff0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	4013      	ands	r3, r2
 8005d92:	d00c      	beq.n	8005dae <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2220      	movs	r2, #32
 8005d98:	4013      	ands	r3, r2
 8005d9a:	d008      	beq.n	8005dae <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2221      	movs	r2, #33	@ 0x21
 8005da2:	4252      	negs	r2, r2
 8005da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	0018      	movs	r0, r3
 8005daa:	f000 fd71 	bl	8006890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dae:	46c0      	nop			@ (mov r8, r8)
 8005db0:	46bd      	mov	sp, r7
 8005db2:	b004      	add	sp, #16
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	46c0      	nop			@ (mov r8, r8)
 8005db8:	ffffdf7f 	.word	0xffffdf7f
 8005dbc:	fffffeff 	.word	0xfffffeff

08005dc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dcc:	2317      	movs	r3, #23
 8005dce:	18fb      	adds	r3, r7, r3
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	223c      	movs	r2, #60	@ 0x3c
 8005dd8:	5c9b      	ldrb	r3, [r3, r2]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d101      	bne.n	8005de2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005dde:	2302      	movs	r3, #2
 8005de0:	e0e5      	b.n	8005fae <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	223c      	movs	r2, #60	@ 0x3c
 8005de6:	2101      	movs	r1, #1
 8005de8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b14      	cmp	r3, #20
 8005dee:	d900      	bls.n	8005df2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005df0:	e0d1      	b.n	8005f96 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	009a      	lsls	r2, r3, #2
 8005df6:	4b70      	ldr	r3, [pc, #448]	@ (8005fb8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005df8:	18d3      	adds	r3, r2, r3
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	0011      	movs	r1, r2
 8005e06:	0018      	movs	r0, r3
 8005e08:	f000 f97e 	bl	8006108 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699a      	ldr	r2, [r3, #24]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2108      	movs	r1, #8
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2104      	movs	r1, #4
 8005e28:	438a      	bics	r2, r1
 8005e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6999      	ldr	r1, [r3, #24]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	691a      	ldr	r2, [r3, #16]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	619a      	str	r2, [r3, #24]
      break;
 8005e3e:	e0af      	b.n	8005fa0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	0011      	movs	r1, r2
 8005e48:	0018      	movs	r0, r3
 8005e4a:	f000 f9dd 	bl	8006208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	699a      	ldr	r2, [r3, #24]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2180      	movs	r1, #128	@ 0x80
 8005e5a:	0109      	lsls	r1, r1, #4
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4954      	ldr	r1, [pc, #336]	@ (8005fbc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005e6c:	400a      	ands	r2, r1
 8005e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6999      	ldr	r1, [r3, #24]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	021a      	lsls	r2, r3, #8
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	619a      	str	r2, [r3, #24]
      break;
 8005e84:	e08c      	b.n	8005fa0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	0011      	movs	r1, r2
 8005e8e:	0018      	movs	r0, r3
 8005e90:	f000 fa38 	bl	8006304 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	69da      	ldr	r2, [r3, #28]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2108      	movs	r1, #8
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	69da      	ldr	r2, [r3, #28]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2104      	movs	r1, #4
 8005eb0:	438a      	bics	r2, r1
 8005eb2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	69d9      	ldr	r1, [r3, #28]
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	691a      	ldr	r2, [r3, #16]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	61da      	str	r2, [r3, #28]
      break;
 8005ec6:	e06b      	b.n	8005fa0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	0011      	movs	r1, r2
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	f000 fa99 	bl	8006408 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	69da      	ldr	r2, [r3, #28]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2180      	movs	r1, #128	@ 0x80
 8005ee2:	0109      	lsls	r1, r1, #4
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69da      	ldr	r2, [r3, #28]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4932      	ldr	r1, [pc, #200]	@ (8005fbc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005ef4:	400a      	ands	r2, r1
 8005ef6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	69d9      	ldr	r1, [r3, #28]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	021a      	lsls	r2, r3, #8
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	61da      	str	r2, [r3, #28]
      break;
 8005f0c:	e048      	b.n	8005fa0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	0011      	movs	r1, r2
 8005f16:	0018      	movs	r0, r3
 8005f18:	f000 fada 	bl	80064d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2108      	movs	r1, #8
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2104      	movs	r1, #4
 8005f38:	438a      	bics	r2, r1
 8005f3a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	691a      	ldr	r2, [r3, #16]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005f4e:	e027      	b.n	8005fa0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	0011      	movs	r1, r2
 8005f58:	0018      	movs	r0, r3
 8005f5a:	f000 fb13 	bl	8006584 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2180      	movs	r1, #128	@ 0x80
 8005f6a:	0109      	lsls	r1, r1, #4
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4910      	ldr	r1, [pc, #64]	@ (8005fbc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005f7c:	400a      	ands	r2, r1
 8005f7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	021a      	lsls	r2, r3, #8
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005f94:	e004      	b.n	8005fa0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005f96:	2317      	movs	r3, #23
 8005f98:	18fb      	adds	r3, r7, r3
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	701a      	strb	r2, [r3, #0]
      break;
 8005f9e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	223c      	movs	r2, #60	@ 0x3c
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	5499      	strb	r1, [r3, r2]

  return status;
 8005fa8:	2317      	movs	r3, #23
 8005faa:	18fb      	adds	r3, r7, r3
 8005fac:	781b      	ldrb	r3, [r3, #0]
}
 8005fae:	0018      	movs	r0, r3
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	b006      	add	sp, #24
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	46c0      	nop			@ (mov r8, r8)
 8005fb8:	080069bc 	.word	0x080069bc
 8005fbc:	fffffbff 	.word	0xfffffbff

08005fc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fc8:	46c0      	nop			@ (mov r8, r8)
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b002      	add	sp, #8
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fd8:	46c0      	nop			@ (mov r8, r8)
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	b002      	add	sp, #8
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fe8:	46c0      	nop			@ (mov r8, r8)
 8005fea:	46bd      	mov	sp, r7
 8005fec:	b002      	add	sp, #8
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ff8:	46c0      	nop			@ (mov r8, r8)
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	b002      	add	sp, #8
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a37      	ldr	r2, [pc, #220]	@ (80060f0 <TIM_Base_SetConfig+0xf0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d008      	beq.n	800602a <TIM_Base_SetConfig+0x2a>
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	2380      	movs	r3, #128	@ 0x80
 800601c:	05db      	lsls	r3, r3, #23
 800601e:	429a      	cmp	r2, r3
 8006020:	d003      	beq.n	800602a <TIM_Base_SetConfig+0x2a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a33      	ldr	r2, [pc, #204]	@ (80060f4 <TIM_Base_SetConfig+0xf4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d108      	bne.n	800603c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2270      	movs	r2, #112	@ 0x70
 800602e:	4393      	bics	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	4313      	orrs	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a2c      	ldr	r2, [pc, #176]	@ (80060f0 <TIM_Base_SetConfig+0xf0>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d014      	beq.n	800606e <TIM_Base_SetConfig+0x6e>
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	2380      	movs	r3, #128	@ 0x80
 8006048:	05db      	lsls	r3, r3, #23
 800604a:	429a      	cmp	r2, r3
 800604c:	d00f      	beq.n	800606e <TIM_Base_SetConfig+0x6e>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a28      	ldr	r2, [pc, #160]	@ (80060f4 <TIM_Base_SetConfig+0xf4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00b      	beq.n	800606e <TIM_Base_SetConfig+0x6e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a27      	ldr	r2, [pc, #156]	@ (80060f8 <TIM_Base_SetConfig+0xf8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d007      	beq.n	800606e <TIM_Base_SetConfig+0x6e>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a26      	ldr	r2, [pc, #152]	@ (80060fc <TIM_Base_SetConfig+0xfc>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d003      	beq.n	800606e <TIM_Base_SetConfig+0x6e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a25      	ldr	r2, [pc, #148]	@ (8006100 <TIM_Base_SetConfig+0x100>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d108      	bne.n	8006080 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4a24      	ldr	r2, [pc, #144]	@ (8006104 <TIM_Base_SetConfig+0x104>)
 8006072:	4013      	ands	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4313      	orrs	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2280      	movs	r2, #128	@ 0x80
 8006084:	4393      	bics	r3, r2
 8006086:	001a      	movs	r2, r3
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a11      	ldr	r2, [pc, #68]	@ (80060f0 <TIM_Base_SetConfig+0xf0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d007      	beq.n	80060be <TIM_Base_SetConfig+0xbe>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a12      	ldr	r2, [pc, #72]	@ (80060fc <TIM_Base_SetConfig+0xfc>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d003      	beq.n	80060be <TIM_Base_SetConfig+0xbe>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a11      	ldr	r2, [pc, #68]	@ (8006100 <TIM_Base_SetConfig+0x100>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d103      	bne.n	80060c6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	691a      	ldr	r2, [r3, #16]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	2201      	movs	r2, #1
 80060d2:	4013      	ands	r3, r2
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d106      	bne.n	80060e6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	2201      	movs	r2, #1
 80060de:	4393      	bics	r3, r2
 80060e0:	001a      	movs	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	611a      	str	r2, [r3, #16]
  }
}
 80060e6:	46c0      	nop			@ (mov r8, r8)
 80060e8:	46bd      	mov	sp, r7
 80060ea:	b004      	add	sp, #16
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	46c0      	nop			@ (mov r8, r8)
 80060f0:	40012c00 	.word	0x40012c00
 80060f4:	40000400 	.word	0x40000400
 80060f8:	40002000 	.word	0x40002000
 80060fc:	40014400 	.word	0x40014400
 8006100:	40014800 	.word	0x40014800
 8006104:	fffffcff 	.word	0xfffffcff

08006108 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	2201      	movs	r2, #1
 800611e:	4393      	bics	r3, r2
 8006120:	001a      	movs	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4a2e      	ldr	r2, [pc, #184]	@ (80061f0 <TIM_OC1_SetConfig+0xe8>)
 8006136:	4013      	ands	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2203      	movs	r2, #3
 800613e:	4393      	bics	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4313      	orrs	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2202      	movs	r2, #2
 8006150:	4393      	bics	r3, r2
 8006152:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	4313      	orrs	r3, r2
 800615c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a24      	ldr	r2, [pc, #144]	@ (80061f4 <TIM_OC1_SetConfig+0xec>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d007      	beq.n	8006176 <TIM_OC1_SetConfig+0x6e>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a23      	ldr	r2, [pc, #140]	@ (80061f8 <TIM_OC1_SetConfig+0xf0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d003      	beq.n	8006176 <TIM_OC1_SetConfig+0x6e>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a22      	ldr	r2, [pc, #136]	@ (80061fc <TIM_OC1_SetConfig+0xf4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d10c      	bne.n	8006190 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2208      	movs	r2, #8
 800617a:	4393      	bics	r3, r2
 800617c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2204      	movs	r2, #4
 800618c:	4393      	bics	r3, r2
 800618e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a18      	ldr	r2, [pc, #96]	@ (80061f4 <TIM_OC1_SetConfig+0xec>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d007      	beq.n	80061a8 <TIM_OC1_SetConfig+0xa0>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a17      	ldr	r2, [pc, #92]	@ (80061f8 <TIM_OC1_SetConfig+0xf0>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d003      	beq.n	80061a8 <TIM_OC1_SetConfig+0xa0>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a16      	ldr	r2, [pc, #88]	@ (80061fc <TIM_OC1_SetConfig+0xf4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d111      	bne.n	80061cc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	4a15      	ldr	r2, [pc, #84]	@ (8006200 <TIM_OC1_SetConfig+0xf8>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	4a14      	ldr	r2, [pc, #80]	@ (8006204 <TIM_OC1_SetConfig+0xfc>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	621a      	str	r2, [r3, #32]
}
 80061e6:	46c0      	nop			@ (mov r8, r8)
 80061e8:	46bd      	mov	sp, r7
 80061ea:	b006      	add	sp, #24
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	46c0      	nop			@ (mov r8, r8)
 80061f0:	fffeff8f 	.word	0xfffeff8f
 80061f4:	40012c00 	.word	0x40012c00
 80061f8:	40014400 	.word	0x40014400
 80061fc:	40014800 	.word	0x40014800
 8006200:	fffffeff 	.word	0xfffffeff
 8006204:	fffffdff 	.word	0xfffffdff

08006208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	2210      	movs	r2, #16
 800621e:	4393      	bics	r3, r2
 8006220:	001a      	movs	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4a2c      	ldr	r2, [pc, #176]	@ (80062e8 <TIM_OC2_SetConfig+0xe0>)
 8006236:	4013      	ands	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4a2b      	ldr	r2, [pc, #172]	@ (80062ec <TIM_OC2_SetConfig+0xe4>)
 800623e:	4013      	ands	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	021b      	lsls	r3, r3, #8
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2220      	movs	r2, #32
 8006252:	4393      	bics	r3, r2
 8006254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	4313      	orrs	r3, r2
 8006260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a22      	ldr	r2, [pc, #136]	@ (80062f0 <TIM_OC2_SetConfig+0xe8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d10d      	bne.n	8006286 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2280      	movs	r2, #128	@ 0x80
 800626e:	4393      	bics	r3, r2
 8006270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	011b      	lsls	r3, r3, #4
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	4313      	orrs	r3, r2
 800627c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2240      	movs	r2, #64	@ 0x40
 8006282:	4393      	bics	r3, r2
 8006284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a19      	ldr	r2, [pc, #100]	@ (80062f0 <TIM_OC2_SetConfig+0xe8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d007      	beq.n	800629e <TIM_OC2_SetConfig+0x96>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a18      	ldr	r2, [pc, #96]	@ (80062f4 <TIM_OC2_SetConfig+0xec>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d003      	beq.n	800629e <TIM_OC2_SetConfig+0x96>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a17      	ldr	r2, [pc, #92]	@ (80062f8 <TIM_OC2_SetConfig+0xf0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d113      	bne.n	80062c6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	4a16      	ldr	r2, [pc, #88]	@ (80062fc <TIM_OC2_SetConfig+0xf4>)
 80062a2:	4013      	ands	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	4a15      	ldr	r2, [pc, #84]	@ (8006300 <TIM_OC2_SetConfig+0xf8>)
 80062aa:	4013      	ands	r3, r2
 80062ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	621a      	str	r2, [r3, #32]
}
 80062e0:	46c0      	nop			@ (mov r8, r8)
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b006      	add	sp, #24
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	feff8fff 	.word	0xfeff8fff
 80062ec:	fffffcff 	.word	0xfffffcff
 80062f0:	40012c00 	.word	0x40012c00
 80062f4:	40014400 	.word	0x40014400
 80062f8:	40014800 	.word	0x40014800
 80062fc:	fffffbff 	.word	0xfffffbff
 8006300:	fffff7ff 	.word	0xfffff7ff

08006304 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	4a31      	ldr	r2, [pc, #196]	@ (80063e0 <TIM_OC3_SetConfig+0xdc>)
 800631a:	401a      	ands	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4a2d      	ldr	r2, [pc, #180]	@ (80063e4 <TIM_OC3_SetConfig+0xe0>)
 8006330:	4013      	ands	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2203      	movs	r2, #3
 8006338:	4393      	bics	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	4a27      	ldr	r2, [pc, #156]	@ (80063e8 <TIM_OC3_SetConfig+0xe4>)
 800634a:	4013      	ands	r3, r2
 800634c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	021b      	lsls	r3, r3, #8
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a23      	ldr	r2, [pc, #140]	@ (80063ec <TIM_OC3_SetConfig+0xe8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d10d      	bne.n	800637e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	4a22      	ldr	r2, [pc, #136]	@ (80063f0 <TIM_OC3_SetConfig+0xec>)
 8006366:	4013      	ands	r3, r2
 8006368:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	021b      	lsls	r3, r3, #8
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	4313      	orrs	r3, r2
 8006374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	4a1e      	ldr	r2, [pc, #120]	@ (80063f4 <TIM_OC3_SetConfig+0xf0>)
 800637a:	4013      	ands	r3, r2
 800637c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a1a      	ldr	r2, [pc, #104]	@ (80063ec <TIM_OC3_SetConfig+0xe8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d007      	beq.n	8006396 <TIM_OC3_SetConfig+0x92>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a1b      	ldr	r2, [pc, #108]	@ (80063f8 <TIM_OC3_SetConfig+0xf4>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d003      	beq.n	8006396 <TIM_OC3_SetConfig+0x92>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a1a      	ldr	r2, [pc, #104]	@ (80063fc <TIM_OC3_SetConfig+0xf8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d113      	bne.n	80063be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	4a19      	ldr	r2, [pc, #100]	@ (8006400 <TIM_OC3_SetConfig+0xfc>)
 800639a:	4013      	ands	r3, r2
 800639c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	4a18      	ldr	r2, [pc, #96]	@ (8006404 <TIM_OC3_SetConfig+0x100>)
 80063a2:	4013      	ands	r3, r2
 80063a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	011b      	lsls	r3, r3, #4
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	621a      	str	r2, [r3, #32]
}
 80063d8:	46c0      	nop			@ (mov r8, r8)
 80063da:	46bd      	mov	sp, r7
 80063dc:	b006      	add	sp, #24
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	fffffeff 	.word	0xfffffeff
 80063e4:	fffeff8f 	.word	0xfffeff8f
 80063e8:	fffffdff 	.word	0xfffffdff
 80063ec:	40012c00 	.word	0x40012c00
 80063f0:	fffff7ff 	.word	0xfffff7ff
 80063f4:	fffffbff 	.word	0xfffffbff
 80063f8:	40014400 	.word	0x40014400
 80063fc:	40014800 	.word	0x40014800
 8006400:	ffffefff 	.word	0xffffefff
 8006404:	ffffdfff 	.word	0xffffdfff

08006408 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	4a24      	ldr	r2, [pc, #144]	@ (80064b0 <TIM_OC4_SetConfig+0xa8>)
 800641e:	401a      	ands	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4a20      	ldr	r2, [pc, #128]	@ (80064b4 <TIM_OC4_SetConfig+0xac>)
 8006434:	4013      	ands	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4a1f      	ldr	r2, [pc, #124]	@ (80064b8 <TIM_OC4_SetConfig+0xb0>)
 800643c:	4013      	ands	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	4313      	orrs	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	4a1b      	ldr	r2, [pc, #108]	@ (80064bc <TIM_OC4_SetConfig+0xb4>)
 8006450:	4013      	ands	r3, r2
 8006452:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	031b      	lsls	r3, r3, #12
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	4313      	orrs	r3, r2
 800645e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a17      	ldr	r2, [pc, #92]	@ (80064c0 <TIM_OC4_SetConfig+0xb8>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d007      	beq.n	8006478 <TIM_OC4_SetConfig+0x70>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a16      	ldr	r2, [pc, #88]	@ (80064c4 <TIM_OC4_SetConfig+0xbc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d003      	beq.n	8006478 <TIM_OC4_SetConfig+0x70>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a15      	ldr	r2, [pc, #84]	@ (80064c8 <TIM_OC4_SetConfig+0xc0>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d109      	bne.n	800648c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	4a14      	ldr	r2, [pc, #80]	@ (80064cc <TIM_OC4_SetConfig+0xc4>)
 800647c:	4013      	ands	r3, r2
 800647e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	019b      	lsls	r3, r3, #6
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4313      	orrs	r3, r2
 800648a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	621a      	str	r2, [r3, #32]
}
 80064a6:	46c0      	nop			@ (mov r8, r8)
 80064a8:	46bd      	mov	sp, r7
 80064aa:	b006      	add	sp, #24
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	46c0      	nop			@ (mov r8, r8)
 80064b0:	ffffefff 	.word	0xffffefff
 80064b4:	feff8fff 	.word	0xfeff8fff
 80064b8:	fffffcff 	.word	0xfffffcff
 80064bc:	ffffdfff 	.word	0xffffdfff
 80064c0:	40012c00 	.word	0x40012c00
 80064c4:	40014400 	.word	0x40014400
 80064c8:	40014800 	.word	0x40014800
 80064cc:	ffffbfff 	.word	0xffffbfff

080064d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	4a21      	ldr	r2, [pc, #132]	@ (800656c <TIM_OC5_SetConfig+0x9c>)
 80064e6:	401a      	ands	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	4a1d      	ldr	r2, [pc, #116]	@ (8006570 <TIM_OC5_SetConfig+0xa0>)
 80064fc:	4013      	ands	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	4a19      	ldr	r2, [pc, #100]	@ (8006574 <TIM_OC5_SetConfig+0xa4>)
 800650e:	4013      	ands	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	041b      	lsls	r3, r3, #16
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a15      	ldr	r2, [pc, #84]	@ (8006578 <TIM_OC5_SetConfig+0xa8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d007      	beq.n	8006536 <TIM_OC5_SetConfig+0x66>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a14      	ldr	r2, [pc, #80]	@ (800657c <TIM_OC5_SetConfig+0xac>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d003      	beq.n	8006536 <TIM_OC5_SetConfig+0x66>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a13      	ldr	r2, [pc, #76]	@ (8006580 <TIM_OC5_SetConfig+0xb0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d109      	bne.n	800654a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	4a0c      	ldr	r2, [pc, #48]	@ (800656c <TIM_OC5_SetConfig+0x9c>)
 800653a:	4013      	ands	r3, r2
 800653c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	021b      	lsls	r3, r3, #8
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	4313      	orrs	r3, r2
 8006548:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	621a      	str	r2, [r3, #32]
}
 8006564:	46c0      	nop			@ (mov r8, r8)
 8006566:	46bd      	mov	sp, r7
 8006568:	b006      	add	sp, #24
 800656a:	bd80      	pop	{r7, pc}
 800656c:	fffeffff 	.word	0xfffeffff
 8006570:	fffeff8f 	.word	0xfffeff8f
 8006574:	fffdffff 	.word	0xfffdffff
 8006578:	40012c00 	.word	0x40012c00
 800657c:	40014400 	.word	0x40014400
 8006580:	40014800 	.word	0x40014800

08006584 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	4a22      	ldr	r2, [pc, #136]	@ (8006624 <TIM_OC6_SetConfig+0xa0>)
 800659a:	401a      	ands	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4a1e      	ldr	r2, [pc, #120]	@ (8006628 <TIM_OC6_SetConfig+0xa4>)
 80065b0:	4013      	ands	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	021b      	lsls	r3, r3, #8
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	4313      	orrs	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	4a1a      	ldr	r2, [pc, #104]	@ (800662c <TIM_OC6_SetConfig+0xa8>)
 80065c4:	4013      	ands	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	051b      	lsls	r3, r3, #20
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a16      	ldr	r2, [pc, #88]	@ (8006630 <TIM_OC6_SetConfig+0xac>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d007      	beq.n	80065ec <TIM_OC6_SetConfig+0x68>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a15      	ldr	r2, [pc, #84]	@ (8006634 <TIM_OC6_SetConfig+0xb0>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d003      	beq.n	80065ec <TIM_OC6_SetConfig+0x68>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a14      	ldr	r2, [pc, #80]	@ (8006638 <TIM_OC6_SetConfig+0xb4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d109      	bne.n	8006600 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	4a13      	ldr	r2, [pc, #76]	@ (800663c <TIM_OC6_SetConfig+0xb8>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	029b      	lsls	r3, r3, #10
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	621a      	str	r2, [r3, #32]
}
 800661a:	46c0      	nop			@ (mov r8, r8)
 800661c:	46bd      	mov	sp, r7
 800661e:	b006      	add	sp, #24
 8006620:	bd80      	pop	{r7, pc}
 8006622:	46c0      	nop			@ (mov r8, r8)
 8006624:	ffefffff 	.word	0xffefffff
 8006628:	feff8fff 	.word	0xfeff8fff
 800662c:	ffdfffff 	.word	0xffdfffff
 8006630:	40012c00 	.word	0x40012c00
 8006634:	40014400 	.word	0x40014400
 8006638:	40014800 	.word	0x40014800
 800663c:	fffbffff 	.word	0xfffbffff

08006640 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	221f      	movs	r2, #31
 8006650:	4013      	ands	r3, r2
 8006652:	2201      	movs	r2, #1
 8006654:	409a      	lsls	r2, r3
 8006656:	0013      	movs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	43d2      	mvns	r2, r2
 8006662:	401a      	ands	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a1a      	ldr	r2, [r3, #32]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	211f      	movs	r1, #31
 8006670:	400b      	ands	r3, r1
 8006672:	6879      	ldr	r1, [r7, #4]
 8006674:	4099      	lsls	r1, r3
 8006676:	000b      	movs	r3, r1
 8006678:	431a      	orrs	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	621a      	str	r2, [r3, #32]
}
 800667e:	46c0      	nop			@ (mov r8, r8)
 8006680:	46bd      	mov	sp, r7
 8006682:	b006      	add	sp, #24
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	223c      	movs	r2, #60	@ 0x3c
 8006696:	5c9b      	ldrb	r3, [r3, r2]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800669c:	2302      	movs	r3, #2
 800669e:	e050      	b.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	223c      	movs	r2, #60	@ 0x3c
 80066a4:	2101      	movs	r1, #1
 80066a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	223d      	movs	r2, #61	@ 0x3d
 80066ac:	2102      	movs	r1, #2
 80066ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a21      	ldr	r2, [pc, #132]	@ (800674c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d108      	bne.n	80066dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	4a20      	ldr	r2, [pc, #128]	@ (8006750 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80066ce:	4013      	ands	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	4313      	orrs	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2270      	movs	r2, #112	@ 0x70
 80066e0:	4393      	bics	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a14      	ldr	r2, [pc, #80]	@ (800674c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d00a      	beq.n	8006716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	2380      	movs	r3, #128	@ 0x80
 8006706:	05db      	lsls	r3, r3, #23
 8006708:	429a      	cmp	r2, r3
 800670a:	d004      	beq.n	8006716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a10      	ldr	r2, [pc, #64]	@ (8006754 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d10c      	bne.n	8006730 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2280      	movs	r2, #128	@ 0x80
 800671a:	4393      	bics	r3, r2
 800671c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	4313      	orrs	r3, r2
 8006726:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	223d      	movs	r2, #61	@ 0x3d
 8006734:	2101      	movs	r1, #1
 8006736:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	223c      	movs	r2, #60	@ 0x3c
 800673c:	2100      	movs	r1, #0
 800673e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	0018      	movs	r0, r3
 8006744:	46bd      	mov	sp, r7
 8006746:	b004      	add	sp, #16
 8006748:	bd80      	pop	{r7, pc}
 800674a:	46c0      	nop			@ (mov r8, r8)
 800674c:	40012c00 	.word	0x40012c00
 8006750:	ff0fffff 	.word	0xff0fffff
 8006754:	40000400 	.word	0x40000400

08006758 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	223c      	movs	r2, #60	@ 0x3c
 800676a:	5c9b      	ldrb	r3, [r3, r2]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d101      	bne.n	8006774 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006770:	2302      	movs	r3, #2
 8006772:	e06f      	b.n	8006854 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	223c      	movs	r2, #60	@ 0x3c
 8006778:	2101      	movs	r1, #1
 800677a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	22ff      	movs	r2, #255	@ 0xff
 8006780:	4393      	bics	r3, r2
 8006782:	001a      	movs	r2, r3
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4a33      	ldr	r2, [pc, #204]	@ (800685c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8006790:	401a      	ands	r2, r3
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4a30      	ldr	r2, [pc, #192]	@ (8006860 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800679e:	401a      	ands	r2, r3
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4a2e      	ldr	r2, [pc, #184]	@ (8006864 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80067ac:	401a      	ands	r2, r3
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4a2b      	ldr	r2, [pc, #172]	@ (8006868 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80067ba:	401a      	ands	r2, r3
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4a29      	ldr	r2, [pc, #164]	@ (800686c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80067c8:	401a      	ands	r2, r3
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4a26      	ldr	r2, [pc, #152]	@ (8006870 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80067d6:	401a      	ands	r2, r3
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067dc:	4313      	orrs	r3, r2
 80067de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4a24      	ldr	r2, [pc, #144]	@ (8006874 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80067e4:	401a      	ands	r2, r3
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	041b      	lsls	r3, r3, #16
 80067ec:	4313      	orrs	r3, r2
 80067ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4a21      	ldr	r2, [pc, #132]	@ (8006878 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80067f4:	401a      	ands	r2, r3
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a1e      	ldr	r2, [pc, #120]	@ (800687c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d11c      	bne.n	8006842 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4a1d      	ldr	r2, [pc, #116]	@ (8006880 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800680c:	401a      	ands	r2, r3
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006812:	051b      	lsls	r3, r3, #20
 8006814:	4313      	orrs	r3, r2
 8006816:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4a1a      	ldr	r2, [pc, #104]	@ (8006884 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800681c:	401a      	ands	r2, r3
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4a17      	ldr	r2, [pc, #92]	@ (8006888 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800682a:	401a      	ands	r2, r3
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006830:	4313      	orrs	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4a15      	ldr	r2, [pc, #84]	@ (800688c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006838:	401a      	ands	r2, r3
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	223c      	movs	r2, #60	@ 0x3c
 800684e:	2100      	movs	r1, #0
 8006850:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	0018      	movs	r0, r3
 8006856:	46bd      	mov	sp, r7
 8006858:	b004      	add	sp, #16
 800685a:	bd80      	pop	{r7, pc}
 800685c:	fffffcff 	.word	0xfffffcff
 8006860:	fffffbff 	.word	0xfffffbff
 8006864:	fffff7ff 	.word	0xfffff7ff
 8006868:	ffffefff 	.word	0xffffefff
 800686c:	ffffdfff 	.word	0xffffdfff
 8006870:	ffffbfff 	.word	0xffffbfff
 8006874:	fff0ffff 	.word	0xfff0ffff
 8006878:	efffffff 	.word	0xefffffff
 800687c:	40012c00 	.word	0x40012c00
 8006880:	ff0fffff 	.word	0xff0fffff
 8006884:	feffffff 	.word	0xfeffffff
 8006888:	fdffffff 	.word	0xfdffffff
 800688c:	dfffffff 	.word	0xdfffffff

08006890 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006898:	46c0      	nop			@ (mov r8, r8)
 800689a:	46bd      	mov	sp, r7
 800689c:	b002      	add	sp, #8
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068a8:	46c0      	nop			@ (mov r8, r8)
 80068aa:	46bd      	mov	sp, r7
 80068ac:	b002      	add	sp, #8
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068b8:	46c0      	nop			@ (mov r8, r8)
 80068ba:	46bd      	mov	sp, r7
 80068bc:	b002      	add	sp, #8
 80068be:	bd80      	pop	{r7, pc}

080068c0 <memset>:
 80068c0:	0003      	movs	r3, r0
 80068c2:	1882      	adds	r2, r0, r2
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d100      	bne.n	80068ca <memset+0xa>
 80068c8:	4770      	bx	lr
 80068ca:	7019      	strb	r1, [r3, #0]
 80068cc:	3301      	adds	r3, #1
 80068ce:	e7f9      	b.n	80068c4 <memset+0x4>

080068d0 <__libc_init_array>:
 80068d0:	b570      	push	{r4, r5, r6, lr}
 80068d2:	2600      	movs	r6, #0
 80068d4:	4c0c      	ldr	r4, [pc, #48]	@ (8006908 <__libc_init_array+0x38>)
 80068d6:	4d0d      	ldr	r5, [pc, #52]	@ (800690c <__libc_init_array+0x3c>)
 80068d8:	1b64      	subs	r4, r4, r5
 80068da:	10a4      	asrs	r4, r4, #2
 80068dc:	42a6      	cmp	r6, r4
 80068de:	d109      	bne.n	80068f4 <__libc_init_array+0x24>
 80068e0:	2600      	movs	r6, #0
 80068e2:	f000 f823 	bl	800692c <_init>
 80068e6:	4c0a      	ldr	r4, [pc, #40]	@ (8006910 <__libc_init_array+0x40>)
 80068e8:	4d0a      	ldr	r5, [pc, #40]	@ (8006914 <__libc_init_array+0x44>)
 80068ea:	1b64      	subs	r4, r4, r5
 80068ec:	10a4      	asrs	r4, r4, #2
 80068ee:	42a6      	cmp	r6, r4
 80068f0:	d105      	bne.n	80068fe <__libc_init_array+0x2e>
 80068f2:	bd70      	pop	{r4, r5, r6, pc}
 80068f4:	00b3      	lsls	r3, r6, #2
 80068f6:	58eb      	ldr	r3, [r5, r3]
 80068f8:	4798      	blx	r3
 80068fa:	3601      	adds	r6, #1
 80068fc:	e7ee      	b.n	80068dc <__libc_init_array+0xc>
 80068fe:	00b3      	lsls	r3, r6, #2
 8006900:	58eb      	ldr	r3, [r5, r3]
 8006902:	4798      	blx	r3
 8006904:	3601      	adds	r6, #1
 8006906:	e7f2      	b.n	80068ee <__libc_init_array+0x1e>
 8006908:	08006a10 	.word	0x08006a10
 800690c:	08006a10 	.word	0x08006a10
 8006910:	08006a14 	.word	0x08006a14
 8006914:	08006a10 	.word	0x08006a10

08006918 <memcpy>:
 8006918:	2300      	movs	r3, #0
 800691a:	b510      	push	{r4, lr}
 800691c:	429a      	cmp	r2, r3
 800691e:	d100      	bne.n	8006922 <memcpy+0xa>
 8006920:	bd10      	pop	{r4, pc}
 8006922:	5ccc      	ldrb	r4, [r1, r3]
 8006924:	54c4      	strb	r4, [r0, r3]
 8006926:	3301      	adds	r3, #1
 8006928:	e7f8      	b.n	800691c <memcpy+0x4>
	...

0800692c <_init>:
 800692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692e:	46c0      	nop			@ (mov r8, r8)
 8006930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006932:	bc08      	pop	{r3}
 8006934:	469e      	mov	lr, r3
 8006936:	4770      	bx	lr

08006938 <_fini>:
 8006938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693a:	46c0      	nop			@ (mov r8, r8)
 800693c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800693e:	bc08      	pop	{r3}
 8006940:	469e      	mov	lr, r3
 8006942:	4770      	bx	lr
