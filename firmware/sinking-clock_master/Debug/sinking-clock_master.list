
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005944  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005a00  08005a00  00006a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aa8  08005aa8  00007050  2**0
                  CONTENTS
  4 .ARM          00000000  08005aa8  08005aa8  00007050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005aa8  08005aa8  00007050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aa8  08005aa8  00006aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005aac  08005aac  00006aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08005ab0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000050  08005b00  00007050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08005b00  00007228  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001377c  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d89  00000000  00000000  0001a7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0001d580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f65  00000000  00000000  0001e950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193b0  00000000  00000000  0001f8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180a9  00000000  00000000  00038c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a16aa  00000000  00000000  00050d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f23b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047ec  00000000  00000000  000f23fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000f6be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000050 	.word	0x20000050
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080059e8 	.word	0x080059e8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000054 	.word	0x20000054
 8000100:	080059e8 	.word	0x080059e8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:
 */

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c) {
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	b087      	sub	sp, #28
 8000220:	af02      	add	r7, sp, #8
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000226:	210f      	movs	r1, #15
 8000228:	187b      	adds	r3, r7, r1
 800022a:	2200      	movs	r2, #0
 800022c:	701a      	strb	r2, [r3, #0]

	capTouch->hi2c = hi2c;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	683a      	ldr	r2, [r7, #0]
 8000232:	601a      	str	r2, [r3, #0]

	// Verify device ID
	uint8_t deviceIDRet = 0x00;
 8000234:	260e      	movs	r6, #14
 8000236:	19bb      	adds	r3, r7, r6
 8000238:	2200      	movs	r2, #0
 800023a:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	6818      	ldr	r0, [r3, #0]
 8000240:	000d      	movs	r5, r1
 8000242:	187c      	adds	r4, r7, r1
 8000244:	2301      	movs	r3, #1
 8000246:	425b      	negs	r3, r3
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	2301      	movs	r3, #1
 800024c:	2200      	movs	r2, #0
 800024e:	211b      	movs	r1, #27
 8000250:	f002 fba2 	bl	8002998 <HAL_I2C_Master_Transmit>
 8000254:	0003      	movs	r3, r0
 8000256:	7023      	strb	r3, [r4, #0]
										(uint8_t*)capTouch_DeviceIDReg, 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet, 1, HAL_MAX_DELAY);
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	6818      	ldr	r0, [r3, #0]
 800025c:	197c      	adds	r4, r7, r5
 800025e:	19ba      	adds	r2, r7, r6
 8000260:	2301      	movs	r3, #1
 8000262:	425b      	negs	r3, r3
 8000264:	9300      	str	r3, [sp, #0]
 8000266:	2301      	movs	r3, #1
 8000268:	211b      	movs	r1, #27
 800026a:	f002 fcbf 	bl	8002bec <HAL_I2C_Master_Receive>
 800026e:	0003      	movs	r3, r0
 8000270:	7023      	strb	r3, [r4, #0]

	if(deviceIDRet != DEVICE_ID) {
 8000272:	19bb      	adds	r3, r7, r6
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b2e      	cmp	r3, #46	@ 0x2e
 8000278:	d001      	beq.n	800027e <capTouch_Init+0x62>
		return 1;
 800027a:	2301      	movs	r3, #1
 800027c:	e000      	b.n	8000280 <capTouch_Init+0x64>
	}

	return 0;
 800027e:	2300      	movs	r3, #0

}
 8000280:	0018      	movs	r0, r3
 8000282:	46bd      	mov	sp, r7
 8000284:	b005      	add	sp, #20
 8000286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000288 <getRTCTime>:
				internalAlarm_initTest.AlarmTime.Minutes, internalAlarm_initTest.AlarmTime.Seconds);
	}

}

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000294:	68b9      	ldr	r1, [r7, #8]
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	2200      	movs	r2, #0
 800029a:	0018      	movs	r0, r3
 800029c:	f004 f8d0 	bl	8004440 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 80002a0:	6879      	ldr	r1, [r7, #4]
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	2200      	movs	r2, #0
 80002a6:	0018      	movs	r0, r3
 80002a8:	f004 f9b8 	bl	800461c <HAL_RTC_GetDate>

}
 80002ac:	46c0      	nop			@ (mov r8, r8)
 80002ae:	46bd      	mov	sp, r7
 80002b0:	b004      	add	sp, #16
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	b089      	sub	sp, #36	@ 0x24
 80002b8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ba:	f001 faf7 	bl	80018ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002be:	f000 f851 	bl	8000364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c2:	f000 faa1 	bl	8000808 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002c6:	f000 f8b9 	bl	800043c <MX_ADC1_Init>
  MX_RTC_Init();
 80002ca:	f000 f963 	bl	8000594 <MX_RTC_Init>
  MX_I2C1_Init();
 80002ce:	f000 f921 	bl	8000514 <MX_I2C1_Init>
  MX_TIM14_Init();
 80002d2:	f000 fa73 	bl	80007bc <MX_TIM14_Init>
  MX_TIM2_Init();
 80002d6:	f000 fa11 	bl	80006fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 80002da:	2380      	movs	r3, #128	@ 0x80
 80002dc:	009c      	lsls	r4, r3, #2
 80002de:	2380      	movs	r3, #128	@ 0x80
 80002e0:	00dd      	lsls	r5, r3, #3
 80002e2:	2680      	movs	r6, #128	@ 0x80
 80002e4:	2340      	movs	r3, #64	@ 0x40
 80002e6:	469c      	mov	ip, r3
 80002e8:	2380      	movs	r3, #128	@ 0x80
 80002ea:	011a      	lsls	r2, r3, #4
 80002ec:	4b16      	ldr	r3, [pc, #88]	@ (8000348 <main+0x94>)
 80002ee:	6819      	ldr	r1, [r3, #0]
 80002f0:	4b16      	ldr	r3, [pc, #88]	@ (800034c <main+0x98>)
 80002f2:	6818      	ldr	r0, [r3, #0]
 80002f4:	4b16      	ldr	r3, [pc, #88]	@ (8000350 <main+0x9c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	9304      	str	r3, [sp, #16]
 80002fa:	9003      	str	r0, [sp, #12]
 80002fc:	9102      	str	r1, [sp, #8]
 80002fe:	4b15      	ldr	r3, [pc, #84]	@ (8000354 <main+0xa0>)
 8000300:	9301      	str	r3, [sp, #4]
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	4663      	mov	r3, ip
 8000306:	0032      	movs	r2, r6
 8000308:	0029      	movs	r1, r5
 800030a:	0020      	movs	r0, r4
 800030c:	f000 fec2 	bl	8001094 <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);

	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 8000310:	1dfc      	adds	r4, r7, #7
 8000312:	f000 fb4b 	bl	80009ac <updateAndDisplayTime>
 8000316:	0003      	movs	r3, r0
 8000318:	7023      	strb	r3, [r4, #0]
		//printf("HAL Error - TX current time\n\r");
	} else {
		//printf("Display Updated with current time\n\r");
	}

	userAlarmToggle = false;			//Default to off
 800031a:	4b0f      	ldr	r3, [pc, #60]	@ (8000358 <main+0xa4>)
 800031c:	2200      	movs	r2, #0
 800031e:	701a      	strb	r2, [r3, #0]

    // User alarm default value
    userAlarmTime.Hours = 1;
 8000320:	4b0e      	ldr	r3, [pc, #56]	@ (800035c <main+0xa8>)
 8000322:	2201      	movs	r2, #1
 8000324:	701a      	strb	r2, [r3, #0]
    userAlarmTime.Minutes = 1;
 8000326:	4b0d      	ldr	r3, [pc, #52]	@ (800035c <main+0xa8>)
 8000328:	2201      	movs	r2, #1
 800032a:	705a      	strb	r2, [r3, #1]
    userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800032c:	4b0b      	ldr	r3, [pc, #44]	@ (800035c <main+0xa8>)
 800032e:	2200      	movs	r2, #0
 8000330:	70da      	strb	r2, [r3, #3]

    QT1070 capTouch;
    halRet = capTouch_Init(&capTouch, &hi2c1);
 8000332:	1dfc      	adds	r4, r7, #7
 8000334:	4a0a      	ldr	r2, [pc, #40]	@ (8000360 <main+0xac>)
 8000336:	003b      	movs	r3, r7
 8000338:	0011      	movs	r1, r2
 800033a:	0018      	movs	r0, r3
 800033c:	f7ff ff6e 	bl	800021c <capTouch_Init>
 8000340:	0003      	movs	r3, r0
 8000342:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000344:	46c0      	nop			@ (mov r8, r8)
 8000346:	e7fd      	b.n	8000344 <main+0x90>
 8000348:	20000020 	.word	0x20000020
 800034c:	20000024 	.word	0x20000024
 8000350:	20000028 	.word	0x20000028
 8000354:	2000000c 	.word	0x2000000c
 8000358:	2000006d 	.word	0x2000006d
 800035c:	20000204 	.word	0x20000204
 8000360:	200000d4 	.word	0x200000d4

08000364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b093      	sub	sp, #76	@ 0x4c
 8000368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036a:	2410      	movs	r4, #16
 800036c:	193b      	adds	r3, r7, r4
 800036e:	0018      	movs	r0, r3
 8000370:	2338      	movs	r3, #56	@ 0x38
 8000372:	001a      	movs	r2, r3
 8000374:	2100      	movs	r1, #0
 8000376:	f005 fb0b 	bl	8005990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037a:	003b      	movs	r3, r7
 800037c:	0018      	movs	r0, r3
 800037e:	2310      	movs	r3, #16
 8000380:	001a      	movs	r2, r3
 8000382:	2100      	movs	r1, #0
 8000384:	f005 fb04 	bl	8005990 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000388:	2380      	movs	r3, #128	@ 0x80
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	0018      	movs	r0, r3
 800038e:	f003 f8af 	bl	80034f0 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000392:	f003 f89f 	bl	80034d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000396:	4b28      	ldr	r3, [pc, #160]	@ (8000438 <SystemClock_Config+0xd4>)
 8000398:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800039a:	4b27      	ldr	r3, [pc, #156]	@ (8000438 <SystemClock_Config+0xd4>)
 800039c:	2118      	movs	r1, #24
 800039e:	438a      	bics	r2, r1
 80003a0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80003a2:	193b      	adds	r3, r7, r4
 80003a4:	2206      	movs	r2, #6
 80003a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80003a8:	193b      	adds	r3, r7, r4
 80003aa:	2201      	movs	r2, #1
 80003ac:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ae:	193b      	adds	r3, r7, r4
 80003b0:	2280      	movs	r2, #128	@ 0x80
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003b6:	0021      	movs	r1, r4
 80003b8:	187b      	adds	r3, r7, r1
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2240      	movs	r2, #64	@ 0x40
 80003c2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	2202      	movs	r2, #2
 80003c8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2202      	movs	r2, #2
 80003ce:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2200      	movs	r2, #0
 80003d4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2208      	movs	r2, #8
 80003da:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2280      	movs	r2, #128	@ 0x80
 80003e0:	0292      	lsls	r2, r2, #10
 80003e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2280      	movs	r2, #128	@ 0x80
 80003e8:	0492      	lsls	r2, r2, #18
 80003ea:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2280      	movs	r2, #128	@ 0x80
 80003f0:	0592      	lsls	r2, r2, #22
 80003f2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	0018      	movs	r0, r3
 80003f8:	f003 f8ba 	bl	8003570 <HAL_RCC_OscConfig>
 80003fc:	1e03      	subs	r3, r0, #0
 80003fe:	d001      	beq.n	8000404 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000400:	f000 fe42 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000404:	003b      	movs	r3, r7
 8000406:	2207      	movs	r2, #7
 8000408:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040a:	003b      	movs	r3, r7
 800040c:	2202      	movs	r2, #2
 800040e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000410:	003b      	movs	r3, r7
 8000412:	2200      	movs	r2, #0
 8000414:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000416:	003b      	movs	r3, r7
 8000418:	2200      	movs	r2, #0
 800041a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800041c:	003b      	movs	r3, r7
 800041e:	2102      	movs	r1, #2
 8000420:	0018      	movs	r0, r3
 8000422:	f003 fbbf 	bl	8003ba4 <HAL_RCC_ClockConfig>
 8000426:	1e03      	subs	r3, r0, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800042a:	f000 fe2d 	bl	8001088 <Error_Handler>
  }
}
 800042e:	46c0      	nop			@ (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b013      	add	sp, #76	@ 0x4c
 8000434:	bd90      	pop	{r4, r7, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	40021000 	.word	0x40021000

0800043c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	0018      	movs	r0, r3
 8000446:	230c      	movs	r3, #12
 8000448:	001a      	movs	r2, r3
 800044a:	2100      	movs	r1, #0
 800044c:	f005 faa0 	bl	8005990 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000450:	4b2d      	ldr	r3, [pc, #180]	@ (8000508 <MX_ADC1_Init+0xcc>)
 8000452:	4a2e      	ldr	r2, [pc, #184]	@ (800050c <MX_ADC1_Init+0xd0>)
 8000454:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000456:	4b2c      	ldr	r3, [pc, #176]	@ (8000508 <MX_ADC1_Init+0xcc>)
 8000458:	2280      	movs	r2, #128	@ 0x80
 800045a:	05d2      	lsls	r2, r2, #23
 800045c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800045e:	4b2a      	ldr	r3, [pc, #168]	@ (8000508 <MX_ADC1_Init+0xcc>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000464:	4b28      	ldr	r3, [pc, #160]	@ (8000508 <MX_ADC1_Init+0xcc>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800046a:	4b27      	ldr	r3, [pc, #156]	@ (8000508 <MX_ADC1_Init+0xcc>)
 800046c:	2200      	movs	r2, #0
 800046e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000470:	4b25      	ldr	r3, [pc, #148]	@ (8000508 <MX_ADC1_Init+0xcc>)
 8000472:	2204      	movs	r2, #4
 8000474:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000476:	4b24      	ldr	r3, [pc, #144]	@ (8000508 <MX_ADC1_Init+0xcc>)
 8000478:	2200      	movs	r2, #0
 800047a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800047c:	4b22      	ldr	r3, [pc, #136]	@ (8000508 <MX_ADC1_Init+0xcc>)
 800047e:	2200      	movs	r2, #0
 8000480:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000482:	4b21      	ldr	r3, [pc, #132]	@ (8000508 <MX_ADC1_Init+0xcc>)
 8000484:	2200      	movs	r2, #0
 8000486:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000488:	4b1f      	ldr	r3, [pc, #124]	@ (8000508 <MX_ADC1_Init+0xcc>)
 800048a:	2201      	movs	r2, #1
 800048c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800048e:	4b1e      	ldr	r3, [pc, #120]	@ (8000508 <MX_ADC1_Init+0xcc>)
 8000490:	2220      	movs	r2, #32
 8000492:	2100      	movs	r1, #0
 8000494:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000496:	4b1c      	ldr	r3, [pc, #112]	@ (8000508 <MX_ADC1_Init+0xcc>)
 8000498:	2200      	movs	r2, #0
 800049a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800049c:	4b1a      	ldr	r3, [pc, #104]	@ (8000508 <MX_ADC1_Init+0xcc>)
 800049e:	2200      	movs	r2, #0
 80004a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004a2:	4b19      	ldr	r3, [pc, #100]	@ (8000508 <MX_ADC1_Init+0xcc>)
 80004a4:	222c      	movs	r2, #44	@ 0x2c
 80004a6:	2100      	movs	r1, #0
 80004a8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004aa:	4b17      	ldr	r3, [pc, #92]	@ (8000508 <MX_ADC1_Init+0xcc>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80004b0:	4b15      	ldr	r3, [pc, #84]	@ (8000508 <MX_ADC1_Init+0xcc>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80004b6:	4b14      	ldr	r3, [pc, #80]	@ (8000508 <MX_ADC1_Init+0xcc>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80004bc:	4b12      	ldr	r3, [pc, #72]	@ (8000508 <MX_ADC1_Init+0xcc>)
 80004be:	223c      	movs	r2, #60	@ 0x3c
 80004c0:	2100      	movs	r1, #0
 80004c2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80004c4:	4b10      	ldr	r3, [pc, #64]	@ (8000508 <MX_ADC1_Init+0xcc>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000508 <MX_ADC1_Init+0xcc>)
 80004cc:	0018      	movs	r0, r3
 80004ce:	f001 fb71 	bl	8001bb4 <HAL_ADC_Init>
 80004d2:	1e03      	subs	r3, r0, #0
 80004d4:	d001      	beq.n	80004da <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80004d6:	f000 fdd7 	bl	8001088 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000510 <MX_ADC1_Init+0xd4>)
 80004de:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ec:	1d3a      	adds	r2, r7, #4
 80004ee:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <MX_ADC1_Init+0xcc>)
 80004f0:	0011      	movs	r1, r2
 80004f2:	0018      	movs	r0, r3
 80004f4:	f001 fd06 	bl	8001f04 <HAL_ADC_ConfigChannel>
 80004f8:	1e03      	subs	r3, r0, #0
 80004fa:	d001      	beq.n	8000500 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004fc:	f000 fdc4 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000500:	46c0      	nop			@ (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	b004      	add	sp, #16
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000070 	.word	0x20000070
 800050c:	40012400 	.word	0x40012400
 8000510:	08000004 	.word	0x08000004

08000514 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000518:	4b1b      	ldr	r3, [pc, #108]	@ (8000588 <MX_I2C1_Init+0x74>)
 800051a:	4a1c      	ldr	r2, [pc, #112]	@ (800058c <MX_I2C1_Init+0x78>)
 800051c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800051e:	4b1a      	ldr	r3, [pc, #104]	@ (8000588 <MX_I2C1_Init+0x74>)
 8000520:	4a1b      	ldr	r2, [pc, #108]	@ (8000590 <MX_I2C1_Init+0x7c>)
 8000522:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000524:	4b18      	ldr	r3, [pc, #96]	@ (8000588 <MX_I2C1_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800052a:	4b17      	ldr	r3, [pc, #92]	@ (8000588 <MX_I2C1_Init+0x74>)
 800052c:	2201      	movs	r2, #1
 800052e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000530:	4b15      	ldr	r3, [pc, #84]	@ (8000588 <MX_I2C1_Init+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000536:	4b14      	ldr	r3, [pc, #80]	@ (8000588 <MX_I2C1_Init+0x74>)
 8000538:	2200      	movs	r2, #0
 800053a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800053c:	4b12      	ldr	r3, [pc, #72]	@ (8000588 <MX_I2C1_Init+0x74>)
 800053e:	2200      	movs	r2, #0
 8000540:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000542:	4b11      	ldr	r3, [pc, #68]	@ (8000588 <MX_I2C1_Init+0x74>)
 8000544:	2200      	movs	r2, #0
 8000546:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000548:	4b0f      	ldr	r3, [pc, #60]	@ (8000588 <MX_I2C1_Init+0x74>)
 800054a:	2200      	movs	r2, #0
 800054c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800054e:	4b0e      	ldr	r3, [pc, #56]	@ (8000588 <MX_I2C1_Init+0x74>)
 8000550:	0018      	movs	r0, r3
 8000552:	f002 f97b 	bl	800284c <HAL_I2C_Init>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800055a:	f000 fd95 	bl	8001088 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800055e:	4b0a      	ldr	r3, [pc, #40]	@ (8000588 <MX_I2C1_Init+0x74>)
 8000560:	2100      	movs	r1, #0
 8000562:	0018      	movs	r0, r3
 8000564:	f002 ff1e 	bl	80033a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d001      	beq.n	8000570 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800056c:	f000 fd8c 	bl	8001088 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000570:	4b05      	ldr	r3, [pc, #20]	@ (8000588 <MX_I2C1_Init+0x74>)
 8000572:	2100      	movs	r1, #0
 8000574:	0018      	movs	r0, r3
 8000576:	f002 ff61 	bl	800343c <HAL_I2CEx_ConfigDigitalFilter>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800057e:	f000 fd83 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	200000d4 	.word	0x200000d4
 800058c:	40005400 	.word	0x40005400
 8000590:	10707dbc 	.word	0x10707dbc

08000594 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b090      	sub	sp, #64	@ 0x40
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800059a:	232c      	movs	r3, #44	@ 0x2c
 800059c:	18fb      	adds	r3, r7, r3
 800059e:	0018      	movs	r0, r3
 80005a0:	2314      	movs	r3, #20
 80005a2:	001a      	movs	r2, r3
 80005a4:	2100      	movs	r1, #0
 80005a6:	f005 f9f3 	bl	8005990 <memset>
  RTC_DateTypeDef sDate = {0};
 80005aa:	2328      	movs	r3, #40	@ 0x28
 80005ac:	18fb      	adds	r3, r7, r3
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80005b2:	003b      	movs	r3, r7
 80005b4:	0018      	movs	r0, r3
 80005b6:	2328      	movs	r3, #40	@ 0x28
 80005b8:	001a      	movs	r2, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	f005 f9e8 	bl	8005990 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005c0:	4b4b      	ldr	r3, [pc, #300]	@ (80006f0 <MX_RTC_Init+0x15c>)
 80005c2:	4a4c      	ldr	r2, [pc, #304]	@ (80006f4 <MX_RTC_Init+0x160>)
 80005c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80005c6:	4b4a      	ldr	r3, [pc, #296]	@ (80006f0 <MX_RTC_Init+0x15c>)
 80005c8:	2240      	movs	r2, #64	@ 0x40
 80005ca:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80005cc:	4b48      	ldr	r3, [pc, #288]	@ (80006f0 <MX_RTC_Init+0x15c>)
 80005ce:	227f      	movs	r2, #127	@ 0x7f
 80005d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80005d2:	4b47      	ldr	r3, [pc, #284]	@ (80006f0 <MX_RTC_Init+0x15c>)
 80005d4:	22ff      	movs	r2, #255	@ 0xff
 80005d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80005d8:	4b45      	ldr	r3, [pc, #276]	@ (80006f0 <MX_RTC_Init+0x15c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80005de:	4b44      	ldr	r3, [pc, #272]	@ (80006f0 <MX_RTC_Init+0x15c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80005e4:	4b42      	ldr	r3, [pc, #264]	@ (80006f0 <MX_RTC_Init+0x15c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80005ea:	4b41      	ldr	r3, [pc, #260]	@ (80006f0 <MX_RTC_Init+0x15c>)
 80005ec:	2280      	movs	r2, #128	@ 0x80
 80005ee:	05d2      	lsls	r2, r2, #23
 80005f0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80005f2:	4b3f      	ldr	r3, [pc, #252]	@ (80006f0 <MX_RTC_Init+0x15c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005f8:	4b3d      	ldr	r3, [pc, #244]	@ (80006f0 <MX_RTC_Init+0x15c>)
 80005fa:	0018      	movs	r0, r3
 80005fc:	f003 fdd6 	bl	80041ac <HAL_RTC_Init>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000604:	f000 fd40 	bl	8001088 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000608:	212c      	movs	r1, #44	@ 0x2c
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2201      	movs	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2200      	movs	r2, #0
 8000614:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2200      	movs	r2, #0
 800061a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2200      	movs	r2, #0
 8000626:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000634:	1879      	adds	r1, r7, r1
 8000636:	4b2e      	ldr	r3, [pc, #184]	@ (80006f0 <MX_RTC_Init+0x15c>)
 8000638:	2201      	movs	r2, #1
 800063a:	0018      	movs	r0, r3
 800063c:	f003 fe58 	bl	80042f0 <HAL_RTC_SetTime>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000644:	f000 fd20 	bl	8001088 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000648:	2128      	movs	r1, #40	@ 0x28
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2201      	movs	r2, #1
 800064e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2201      	movs	r2, #1
 8000654:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2201      	movs	r2, #1
 800065a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2200      	movs	r2, #0
 8000660:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000662:	1879      	adds	r1, r7, r1
 8000664:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <MX_RTC_Init+0x15c>)
 8000666:	2201      	movs	r2, #1
 8000668:	0018      	movs	r0, r3
 800066a:	f003 ff45 	bl	80044f8 <HAL_RTC_SetDate>
 800066e:	1e03      	subs	r3, r0, #0
 8000670:	d001      	beq.n	8000676 <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 8000672:	f000 fd09 	bl	8001088 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000676:	003b      	movs	r3, r7
 8000678:	2201      	movs	r2, #1
 800067a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 800067c:	003b      	movs	r3, r7
 800067e:	2201      	movs	r2, #1
 8000680:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000682:	003b      	movs	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000688:	003b      	movs	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800068e:	003b      	movs	r3, r7
 8000690:	2200      	movs	r2, #0
 8000692:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000694:	003b      	movs	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800069a:	003b      	movs	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80006a0:	003b      	movs	r3, r7
 80006a2:	4a15      	ldr	r2, [pc, #84]	@ (80006f8 <MX_RTC_Init+0x164>)
 80006a4:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80006a6:	003b      	movs	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80006ac:	003b      	movs	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80006b2:	003b      	movs	r3, r7
 80006b4:	2220      	movs	r2, #32
 80006b6:	2101      	movs	r1, #1
 80006b8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80006ba:	003b      	movs	r3, r7
 80006bc:	2280      	movs	r2, #128	@ 0x80
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80006c2:	0039      	movs	r1, r7
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <MX_RTC_Init+0x15c>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	0018      	movs	r0, r3
 80006ca:	f003 fff5 	bl	80046b8 <HAL_RTC_SetAlarm_IT>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <MX_RTC_Init+0x142>
  {
    Error_Handler();
 80006d2:	f000 fcd9 	bl	8001088 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_RTC_Init+0x15c>)
 80006d8:	2100      	movs	r1, #0
 80006da:	0018      	movs	r0, r3
 80006dc:	f004 fa5c 	bl	8004b98 <HAL_RTCEx_SetCalibrationOutPut>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d001      	beq.n	80006e8 <MX_RTC_Init+0x154>
  {
    Error_Handler();
 80006e4:	f000 fcd0 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b010      	add	sp, #64	@ 0x40
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000128 	.word	0x20000128
 80006f4:	40002800 	.word	0x40002800
 80006f8:	80800080 	.word	0x80800080

080006fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	@ 0x28
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000702:	231c      	movs	r3, #28
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	0018      	movs	r0, r3
 8000708:	230c      	movs	r3, #12
 800070a:	001a      	movs	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	f005 f93f 	bl	8005990 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000712:	003b      	movs	r3, r7
 8000714:	0018      	movs	r0, r3
 8000716:	231c      	movs	r3, #28
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f005 f938 	bl	8005990 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000720:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <MX_TIM2_Init+0xb8>)
 8000722:	2280      	movs	r2, #128	@ 0x80
 8000724:	05d2      	lsls	r2, r2, #23
 8000726:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8000728:	4b22      	ldr	r3, [pc, #136]	@ (80007b4 <MX_TIM2_Init+0xb8>)
 800072a:	4a23      	ldr	r2, [pc, #140]	@ (80007b8 <MX_TIM2_Init+0xbc>)
 800072c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072e:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <MX_TIM2_Init+0xb8>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000734:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <MX_TIM2_Init+0xb8>)
 8000736:	2263      	movs	r2, #99	@ 0x63
 8000738:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073a:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <MX_TIM2_Init+0xb8>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000740:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <MX_TIM2_Init+0xb8>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000746:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <MX_TIM2_Init+0xb8>)
 8000748:	0018      	movs	r0, r3
 800074a:	f004 fb3f 	bl	8004dcc <HAL_TIM_PWM_Init>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000752:	f000 fc99 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000756:	211c      	movs	r1, #28
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000764:	187a      	adds	r2, r7, r1
 8000766:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <MX_TIM2_Init+0xb8>)
 8000768:	0011      	movs	r1, r2
 800076a:	0018      	movs	r0, r3
 800076c:	f005 f8a8 	bl	80058c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000774:	f000 fc88 	bl	8001088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000778:	003b      	movs	r3, r7
 800077a:	2260      	movs	r2, #96	@ 0x60
 800077c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800077e:	003b      	movs	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000784:	003b      	movs	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078a:	003b      	movs	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000790:	0039      	movs	r1, r7
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <MX_TIM2_Init+0xb8>)
 8000794:	2208      	movs	r2, #8
 8000796:	0018      	movs	r0, r3
 8000798:	f004 fc4e 	bl	8005038 <HAL_TIM_PWM_ConfigChannel>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80007a0:	f000 fc72 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007a4:	4b03      	ldr	r3, [pc, #12]	@ (80007b4 <MX_TIM2_Init+0xb8>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 ffce 	bl	8001748 <HAL_TIM_MspPostInit>

}
 80007ac:	46c0      	nop			@ (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b00a      	add	sp, #40	@ 0x28
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000154 	.word	0x20000154
 80007b8:	0000031f 	.word	0x0000031f

080007bc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80007c0:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_TIM14_Init+0x40>)
 80007c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000800 <MX_TIM14_Init+0x44>)
 80007c4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 80007c6:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <MX_TIM14_Init+0x40>)
 80007c8:	22f4      	movs	r2, #244	@ 0xf4
 80007ca:	0092      	lsls	r2, r2, #2
 80007cc:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <MX_TIM14_Init+0x40>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_TIM14_Init+0x40>)
 80007d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000804 <MX_TIM14_Init+0x48>)
 80007d8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <MX_TIM14_Init+0x40>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_TIM14_Init+0x40>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80007e6:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <MX_TIM14_Init+0x40>)
 80007e8:	0018      	movs	r0, r3
 80007ea:	f004 fa25 	bl	8004c38 <HAL_TIM_Base_Init>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80007f2:	f000 fc49 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200001a0 	.word	0x200001a0
 8000800:	40002000 	.word	0x40002000
 8000804:	0000ffff 	.word	0x0000ffff

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b08b      	sub	sp, #44	@ 0x2c
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	2414      	movs	r4, #20
 8000810:	193b      	adds	r3, r7, r4
 8000812:	0018      	movs	r0, r3
 8000814:	2314      	movs	r3, #20
 8000816:	001a      	movs	r2, r3
 8000818:	2100      	movs	r1, #0
 800081a:	f005 f8b9 	bl	8005990 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b5e      	ldr	r3, [pc, #376]	@ (8000998 <MX_GPIO_Init+0x190>)
 8000820:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000822:	4b5d      	ldr	r3, [pc, #372]	@ (8000998 <MX_GPIO_Init+0x190>)
 8000824:	2104      	movs	r1, #4
 8000826:	430a      	orrs	r2, r1
 8000828:	635a      	str	r2, [r3, #52]	@ 0x34
 800082a:	4b5b      	ldr	r3, [pc, #364]	@ (8000998 <MX_GPIO_Init+0x190>)
 800082c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800082e:	2204      	movs	r2, #4
 8000830:	4013      	ands	r3, r2
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b58      	ldr	r3, [pc, #352]	@ (8000998 <MX_GPIO_Init+0x190>)
 8000838:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800083a:	4b57      	ldr	r3, [pc, #348]	@ (8000998 <MX_GPIO_Init+0x190>)
 800083c:	2101      	movs	r1, #1
 800083e:	430a      	orrs	r2, r1
 8000840:	635a      	str	r2, [r3, #52]	@ 0x34
 8000842:	4b55      	ldr	r3, [pc, #340]	@ (8000998 <MX_GPIO_Init+0x190>)
 8000844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000846:	2201      	movs	r2, #1
 8000848:	4013      	ands	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084e:	4b52      	ldr	r3, [pc, #328]	@ (8000998 <MX_GPIO_Init+0x190>)
 8000850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000852:	4b51      	ldr	r3, [pc, #324]	@ (8000998 <MX_GPIO_Init+0x190>)
 8000854:	2108      	movs	r1, #8
 8000856:	430a      	orrs	r2, r1
 8000858:	635a      	str	r2, [r3, #52]	@ 0x34
 800085a:	4b4f      	ldr	r3, [pc, #316]	@ (8000998 <MX_GPIO_Init+0x190>)
 800085c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800085e:	2208      	movs	r2, #8
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b4c      	ldr	r3, [pc, #304]	@ (8000998 <MX_GPIO_Init+0x190>)
 8000868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800086a:	4b4b      	ldr	r3, [pc, #300]	@ (8000998 <MX_GPIO_Init+0x190>)
 800086c:	2102      	movs	r1, #2
 800086e:	430a      	orrs	r2, r1
 8000870:	635a      	str	r2, [r3, #52]	@ 0x34
 8000872:	4b49      	ldr	r3, [pc, #292]	@ (8000998 <MX_GPIO_Init+0x190>)
 8000874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000876:	2202      	movs	r2, #2
 8000878:	4013      	ands	r3, r2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 800087e:	4947      	ldr	r1, [pc, #284]	@ (800099c <MX_GPIO_Init+0x194>)
 8000880:	23a0      	movs	r3, #160	@ 0xa0
 8000882:	05db      	lsls	r3, r3, #23
 8000884:	2200      	movs	r2, #0
 8000886:	0018      	movs	r0, r3
 8000888:	f001 ff73 	bl	8002772 <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 800088c:	4b44      	ldr	r3, [pc, #272]	@ (80009a0 <MX_GPIO_Init+0x198>)
 800088e:	2200      	movs	r2, #0
 8000890:	2180      	movs	r1, #128	@ 0x80
 8000892:	0018      	movs	r0, r3
 8000894:	f001 ff6d 	bl	8002772 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_EN_GPIO_Port, CTOUCH_EN_Pin, GPIO_PIN_RESET);
 8000898:	2380      	movs	r3, #128	@ 0x80
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4841      	ldr	r0, [pc, #260]	@ (80009a4 <MX_GPIO_Init+0x19c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	0019      	movs	r1, r3
 80008a2:	f001 ff66 	bl	8002772 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin BUZZER_OUT_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin
                           SHIFT_MCLR_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	4a3c      	ldr	r2, [pc, #240]	@ (800099c <MX_GPIO_Init+0x194>)
 80008aa:	601a      	str	r2, [r3, #0]
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	2201      	movs	r2, #1
 80008b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	193a      	adds	r2, r7, r4
 80008c0:	23a0      	movs	r3, #160	@ 0xa0
 80008c2:	05db      	lsls	r3, r3, #23
 80008c4:	0011      	movs	r1, r2
 80008c6:	0018      	movs	r0, r3
 80008c8:	f001 fdd2 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	2280      	movs	r2, #128	@ 0x80
 80008d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	2201      	movs	r2, #1
 80008d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	4a2e      	ldr	r2, [pc, #184]	@ (80009a0 <MX_GPIO_Init+0x198>)
 80008e8:	0019      	movs	r1, r3
 80008ea:	0010      	movs	r0, r2
 80008ec:	f001 fdc0 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	2280      	movs	r2, #128	@ 0x80
 80008f4:	0212      	lsls	r2, r2, #8
 80008f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	2284      	movs	r2, #132	@ 0x84
 80008fc:	0392      	lsls	r2, r2, #14
 80008fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2201      	movs	r2, #1
 8000904:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000906:	193a      	adds	r2, r7, r4
 8000908:	23a0      	movs	r3, #160	@ 0xa0
 800090a:	05db      	lsls	r3, r3, #23
 800090c:	0011      	movs	r1, r2
 800090e:	0018      	movs	r0, r3
 8000910:	f001 fdae 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 8000914:	0021      	movs	r1, r4
 8000916:	187b      	adds	r3, r7, r1
 8000918:	220f      	movs	r2, #15
 800091a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2284      	movs	r2, #132	@ 0x84
 8000920:	0392      	lsls	r2, r2, #14
 8000922:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2201      	movs	r2, #1
 8000928:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092a:	000c      	movs	r4, r1
 800092c:	187b      	adds	r3, r7, r1
 800092e:	4a1e      	ldr	r2, [pc, #120]	@ (80009a8 <MX_GPIO_Init+0x1a0>)
 8000930:	0019      	movs	r1, r3
 8000932:	0010      	movs	r0, r2
 8000934:	f001 fd9c 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_EN_Pin */
  GPIO_InitStruct.Pin = CTOUCH_EN_Pin;
 8000938:	0021      	movs	r1, r4
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	0092      	lsls	r2, r2, #2
 8000940:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2201      	movs	r2, #1
 8000946:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_EN_GPIO_Port, &GPIO_InitStruct);
 8000954:	187b      	adds	r3, r7, r1
 8000956:	4a13      	ldr	r2, [pc, #76]	@ (80009a4 <MX_GPIO_Init+0x19c>)
 8000958:	0019      	movs	r1, r3
 800095a:	0010      	movs	r0, r2
 800095c:	f001 fd88 	bl	8002470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	2005      	movs	r0, #5
 8000966:	f001 fd51 	bl	800240c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800096a:	2005      	movs	r0, #5
 800096c:	f001 fd63 	bl	8002436 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	2006      	movs	r0, #6
 8000976:	f001 fd49 	bl	800240c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800097a:	2006      	movs	r0, #6
 800097c:	f001 fd5b 	bl	8002436 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2101      	movs	r1, #1
 8000984:	2007      	movs	r0, #7
 8000986:	f001 fd41 	bl	800240c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800098a:	2007      	movs	r0, #7
 800098c:	f001 fd53 	bl	8002436 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000990:	46c0      	nop			@ (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	b00b      	add	sp, #44	@ 0x2c
 8000996:	bd90      	pop	{r4, r7, pc}
 8000998:	40021000 	.word	0x40021000
 800099c:	00001f01 	.word	0x00001f01
 80009a0:	50000800 	.word	0x50000800
 80009a4:	50000400 	.word	0x50000400
 80009a8:	50000c00 	.word	0x50000c00

080009ac <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 80009b8:	4a07      	ldr	r2, [pc, #28]	@ (80009d8 <updateAndDisplayTime+0x2c>)
 80009ba:	4908      	ldr	r1, [pc, #32]	@ (80009dc <updateAndDisplayTime+0x30>)
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <updateAndDisplayTime+0x34>)
 80009be:	0018      	movs	r0, r3
 80009c0:	f7ff fc62 	bl	8000288 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 80009c4:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <updateAndDisplayTime+0x30>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 fc7c 	bl	80012c4 <sevSeg_updateDigits>

	return halRet;
 80009cc:	1dfb      	adds	r3, r7, #7
 80009ce:	781b      	ldrb	r3, [r3, #0]

}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b002      	add	sp, #8
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000200 	.word	0x20000200
 80009dc:	200001ec 	.word	0x200001ec
 80009e0:	20000128 	.word	0x20000128

080009e4 <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 80009f0:	4b04      	ldr	r3, [pc, #16]	@ (8000a04 <updateAndDisplayAlarm+0x20>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 fc66 	bl	80012c4 <sevSeg_updateDigits>

	return halRet;
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	781b      	ldrb	r3, [r3, #0]

}
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000204 	.word	0x20000204

08000a08 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08c      	sub	sp, #48	@ 0x30
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]

	  //printf("Enter current time minute increment interrupt\n\r");

	  RTC_AlarmTypeDef sAlarm;
	  getRTCTime(hrtc, &currTime, &currDate);
 8000a10:	4a1e      	ldr	r2, [pc, #120]	@ (8000a8c <HAL_RTC_AlarmAEventCallback+0x84>)
 8000a12:	491f      	ldr	r1, [pc, #124]	@ (8000a90 <HAL_RTC_AlarmAEventCallback+0x88>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	0018      	movs	r0, r3
 8000a18:	f7ff fc36 	bl	8000288 <getRTCTime>

	  if(sAlarm.AlarmTime.Minutes>58) {
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	18bb      	adds	r3, r7, r2
 8000a20:	785b      	ldrb	r3, [r3, #1]
 8000a22:	2b3a      	cmp	r3, #58	@ 0x3a
 8000a24:	d903      	bls.n	8000a2e <HAL_RTC_AlarmAEventCallback+0x26>
		sAlarm.AlarmTime.Minutes=0;
 8000a26:	18bb      	adds	r3, r7, r2
 8000a28:	2200      	movs	r2, #0
 8000a2a:	705a      	strb	r2, [r3, #1]
 8000a2c:	e006      	b.n	8000a3c <HAL_RTC_AlarmAEventCallback+0x34>
		//printf("Reset alarm time\n\r");
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8000a2e:	2108      	movs	r1, #8
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	785b      	ldrb	r3, [r3, #1]
 8000a34:	3301      	adds	r3, #1
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	2308      	movs	r3, #8
 8000a40:	18f9      	adds	r1, r7, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2200      	movs	r2, #0
 8000a46:	0018      	movs	r0, r3
 8000a48:	f003 fe36 	bl	80046b8 <HAL_RTC_SetAlarm_IT>
 8000a4c:	1e03      	subs	r3, r0, #0
 8000a4e:	d1f6      	bne.n	8000a3e <HAL_RTC_AlarmAEventCallback+0x36>

	  updateAndDisplayTime();
 8000a50:	f7ff ffac 	bl	80009ac <updateAndDisplayTime>

	  //printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 8000a54:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d013      	beq.n	8000a84 <HAL_RTC_AlarmAEventCallback+0x7c>
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <HAL_RTC_AlarmAEventCallback+0x88>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d10d      	bne.n	8000a84 <HAL_RTC_AlarmAEventCallback+0x7c>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 8000a68:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000a6a:	785a      	ldrb	r2, [r3, #1]
 8000a6c:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <HAL_RTC_AlarmAEventCallback+0x88>)
 8000a6e:	785b      	ldrb	r3, [r3, #1]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d107      	bne.n	8000a84 <HAL_RTC_AlarmAEventCallback+0x7c>
 8000a74:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000a76:	78da      	ldrb	r2, [r3, #3]
 8000a78:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <HAL_RTC_AlarmAEventCallback+0x88>)
 8000a7a:	78db      	ldrb	r3, [r3, #3]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d101      	bne.n	8000a84 <HAL_RTC_AlarmAEventCallback+0x7c>
		  userAlarmBeep();
 8000a80:	f000 f80c 	bl	8000a9c <userAlarmBeep>
	  }

}
 8000a84:	46c0      	nop			@ (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b00c      	add	sp, #48	@ 0x30
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000200 	.word	0x20000200
 8000a90:	200001ec 	.word	0x200001ec
 8000a94:	2000006d 	.word	0x2000006d
 8000a98:	20000204 	.word	0x20000204

08000a9c <userAlarmBeep>:

void userAlarmBeep() {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8000aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b54 <userAlarmBeep+0xb8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f004 f96a 	bl	8004d80 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8000aac:	4b29      	ldr	r3, [pc, #164]	@ (8000b54 <userAlarmBeep+0xb8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f004 f919 	bl	8004ce8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8000ab6:	4b27      	ldr	r3, [pc, #156]	@ (8000b54 <userAlarmBeep+0xb8>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000abe:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8000ac0:	1cfb      	adds	r3, r7, #3
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8000ac6:	1cbb      	adds	r3, r7, #2
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 8000acc:	f7ff ff6e 	bl	80009ac <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 8000ad0:	4b20      	ldr	r3, [pc, #128]	@ (8000b54 <userAlarmBeep+0xb8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	4a1e      	ldr	r2, [pc, #120]	@ (8000b58 <userAlarmBeep+0xbc>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d926      	bls.n	8000b30 <userAlarmBeep+0x94>

			sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 8000ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <userAlarmBeep+0xc0>)
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b60 <userAlarmBeep+0xc4>)
 8000ae8:	6819      	ldr	r1, [r3, #0]
 8000aea:	1cfb      	adds	r3, r7, #3
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	4a1d      	ldr	r2, [pc, #116]	@ (8000b64 <userAlarmBeep+0xc8>)
 8000af0:	5cd3      	ldrb	r3, [r2, r3]
 8000af2:	001a      	movs	r2, r3
 8000af4:	f000 fc98 	bl	8001428 <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(buzzerPort, buzzerPin);					// Toggle Buzzer
 8000af8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b68 <userAlarmBeep+0xcc>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2280      	movs	r2, #128	@ 0x80
 8000afe:	0052      	lsls	r2, r2, #1
 8000b00:	0011      	movs	r1, r2
 8000b02:	0018      	movs	r0, r3
 8000b04:	f001 fe52 	bl	80027ac <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <userAlarmBeep+0xb8>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b10:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8000b12:	1cfb      	adds	r3, r7, #3
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	1e5a      	subs	r2, r3, #1
 8000b18:	4193      	sbcs	r3, r2
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4053      	eors	r3, r2
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	001a      	movs	r2, r3
 8000b24:	1cfb      	adds	r3, r7, #3
 8000b26:	701a      	strb	r2, [r3, #0]
 8000b28:	781a      	ldrb	r2, [r3, #0]
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	400a      	ands	r2, r1
 8000b2e:	701a      	strb	r2, [r3, #0]

			//printf("Display Blink = %u\n\r", displayBlink);

		}

		i++;		// Get rid of. This is just for testing.
 8000b30:	1cbb      	adds	r3, r7, #2
 8000b32:	781a      	ldrb	r2, [r3, #0]
 8000b34:	1cbb      	adds	r3, r7, #2
 8000b36:	3201      	adds	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]

//	} while(capTouchTrigger(snoozeButtonPin));
	} while(i < 5);
 8000b3a:	1cbb      	adds	r3, r7, #2
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d9c4      	bls.n	8000acc <userAlarmBeep+0x30>

	HAL_TIM_Base_Stop(timerDelay);
 8000b42:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <userAlarmBeep+0xb8>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	0018      	movs	r0, r3
 8000b48:	f004 f91a 	bl	8004d80 <HAL_TIM_Base_Stop>

}
 8000b4c:	46c0      	nop			@ (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b002      	add	sp, #8
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000020 	.word	0x20000020
 8000b58:	00007ffe 	.word	0x00007ffe
 8000b5c:	20000024 	.word	0x20000024
 8000b60:	20000028 	.word	0x20000028
 8000b64:	08005a00 	.word	0x08005a00
 8000b68:	20000008 	.word	0x20000008

08000b6c <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	0002      	movs	r2, r0
 8000b74:	1dbb      	adds	r3, r7, #6
 8000b76:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8000b78:	2208      	movs	r2, #8
 8000b7a:	1dbb      	adds	r3, r7, #6
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d106      	bne.n	8000b90 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 8000b82:	230f      	movs	r3, #15
 8000b84:	18fc      	adds	r4, r7, r3
 8000b86:	f000 f839 	bl	8000bfc <displayButtonISR>
 8000b8a:	0003      	movs	r3, r0
 8000b8c:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8000b8e:	e031      	b.n	8000bf4 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8000b90:	2204      	movs	r2, #4
 8000b92:	1dbb      	adds	r3, r7, #6
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d106      	bne.n	8000ba8 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 8000b9a:	230f      	movs	r3, #15
 8000b9c:	18fc      	adds	r4, r7, r3
 8000b9e:	f000 f85d 	bl	8000c5c <alarmEnableISR>
 8000ba2:	0003      	movs	r3, r0
 8000ba4:	7023      	strb	r3, [r4, #0]
}
 8000ba6:	e025      	b.n	8000bf4 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8000ba8:	2380      	movs	r3, #128	@ 0x80
 8000baa:	021b      	lsls	r3, r3, #8
 8000bac:	1dba      	adds	r2, r7, #6
 8000bae:	8812      	ldrh	r2, [r2, #0]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d106      	bne.n	8000bc2 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	18fc      	adds	r4, r7, r3
 8000bb8:	f000 f884 	bl	8000cc4 <alarmSetISR>
 8000bbc:	0003      	movs	r3, r0
 8000bbe:	7023      	strb	r3, [r4, #0]
}
 8000bc0:	e018      	b.n	8000bf4 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	1dbb      	adds	r3, r7, #6
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d106      	bne.n	8000bda <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 8000bcc:	230f      	movs	r3, #15
 8000bce:	18fc      	adds	r4, r7, r3
 8000bd0:	f000 f954 	bl	8000e7c <hourSetISR>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	7023      	strb	r3, [r4, #0]
}
 8000bd8:	e00c      	b.n	8000bf4 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8000bda:	2202      	movs	r2, #2
 8000bdc:	1dbb      	adds	r3, r7, #6
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d106      	bne.n	8000bf2 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 8000be4:	230f      	movs	r3, #15
 8000be6:	18fc      	adds	r4, r7, r3
 8000be8:	f000 f974 	bl	8000ed4 <minuteSetISR>
 8000bec:	0003      	movs	r3, r0
 8000bee:	7023      	strb	r3, [r4, #0]
}
 8000bf0:	e000      	b.n	8000bf4 <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 8000bf2:	46c0      	nop			@ (mov r8, r8)
}
 8000bf4:	46c0      	nop			@ (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b005      	add	sp, #20
 8000bfa:	bd90      	pop	{r4, r7, pc}

08000bfc <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 8000c08:	f7ff fed0 	bl	80009ac <updateAndDisplayTime>

	sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <displayButtonISR+0x50>)
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <displayButtonISR+0x54>)
 8000c12:	6819      	ldr	r1, [r3, #0]
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <displayButtonISR+0x58>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	001a      	movs	r2, r3
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <displayButtonISR+0x5c>)
 8000c1c:	5c9b      	ldrb	r3, [r3, r2]
 8000c1e:	001a      	movs	r2, r3
 8000c20:	f000 fc02 	bl	8001428 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8000c24:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <displayButtonISR+0x58>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d903      	bls.n	8000c34 <displayButtonISR+0x38>
		displayToggle = 0;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <displayButtonISR+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
 8000c32:	e005      	b.n	8000c40 <displayButtonISR+0x44>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 8000c34:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <displayButtonISR+0x58>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <displayButtonISR+0x58>)
 8000c3e:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8000c40:	1dfb      	adds	r3, r7, #7
 8000c42:	781b      	ldrb	r3, [r3, #0]

}
 8000c44:	0018      	movs	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b002      	add	sp, #8
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000024 	.word	0x20000024
 8000c50:	20000028 	.word	0x20000028
 8000c54:	2000006c 	.word	0x2000006c
 8000c58:	08005a00 	.word	0x08005a00

08000c5c <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8000c68:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <alarmEnableISR+0x60>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4053      	eors	r3, r2
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00b      	beq.n	8000c8e <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 8000c76:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <alarmEnableISR+0x64>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2280      	movs	r2, #128	@ 0x80
 8000c7c:	0151      	lsls	r1, r2, #5
 8000c7e:	2201      	movs	r2, #1
 8000c80:	0018      	movs	r0, r3
 8000c82:	f001 fd76 	bl	8002772 <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 8000c86:	4b0d      	ldr	r3, [pc, #52]	@ (8000cbc <alarmEnableISR+0x60>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	e010      	b.n	8000cb0 <alarmEnableISR+0x54>

		//printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
								//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <alarmEnableISR+0x60>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00b      	beq.n	8000cae <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 8000c96:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <alarmEnableISR+0x64>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2280      	movs	r2, #128	@ 0x80
 8000c9c:	0151      	lsls	r1, r2, #5
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f001 fd66 	bl	8002772 <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 8000ca6:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <alarmEnableISR+0x60>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
 8000cac:	e000      	b.n	8000cb0 <alarmEnableISR+0x54>

		//printf("User alarm disabled.\n\r");
	}
	else {
		__NOP();							//Code should never reach here.
 8000cae:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 8000cb0:	1dfb      	adds	r3, r7, #7
 8000cb2:	781b      	ldrb	r3, [r3, #0]

}
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000006d 	.word	0x2000006d
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
	//printf("Enter user alarm set ISR.\n\r");

	//printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
			//userAlarmTime.Minutes, userAlarmTime.Seconds);

	HAL_StatusTypeDef halRet = HAL_OK;
 8000cca:	1cbb      	adds	r3, r7, #2
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for switch debounce
	 */

	// First wait for button to deactivate again
	while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_SET);
 8000cd0:	46c0      	nop			@ (mov r8, r8)
 8000cd2:	4b64      	ldr	r3, [pc, #400]	@ (8000e64 <alarmSetISR+0x1a0>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2280      	movs	r2, #128	@ 0x80
 8000cd8:	0212      	lsls	r2, r2, #8
 8000cda:	0011      	movs	r1, r2
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f001 fd2b 	bl	8002738 <HAL_GPIO_ReadPin>
 8000ce2:	0003      	movs	r3, r0
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d1f4      	bne.n	8000cd2 <alarmSetISR+0xe>

	// Go through debounce
	HAL_TIM_Base_Stop(timerDelay);
 8000ce8:	4b5f      	ldr	r3, [pc, #380]	@ (8000e68 <alarmSetISR+0x1a4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	0018      	movs	r0, r3
 8000cee:	f004 f847 	bl	8004d80 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8000cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8000e68 <alarmSetISR+0x1a4>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f003 fff6 	bl	8004ce8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8000cfc:	4b5a      	ldr	r3, [pc, #360]	@ (8000e68 <alarmSetISR+0x1a4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d04:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 8));
 8000d06:	4b58      	ldr	r3, [pc, #352]	@ (8000e68 <alarmSetISR+0x1a4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	1ad2      	subs	r2, r2, r3
 8000d12:	2380      	movs	r3, #128	@ 0x80
 8000d14:	019b      	lsls	r3, r3, #6
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d9f5      	bls.n	8000d06 <alarmSetISR+0x42>


	/*
	 *  Poll for 1 second to see if the alarm set button is pressed again
	 */
	HAL_TIM_Base_Stop(timerDelay);
 8000d1a:	4b53      	ldr	r3, [pc, #332]	@ (8000e68 <alarmSetISR+0x1a4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f004 f82e 	bl	8004d80 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8000d24:	4b50      	ldr	r3, [pc, #320]	@ (8000e68 <alarmSetISR+0x1a4>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f003 ffdd 	bl	8004ce8 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8000d2e:	4b4e      	ldr	r3, [pc, #312]	@ (8000e68 <alarmSetISR+0x1a4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d36:	607b      	str	r3, [r7, #4]

	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 8000d38:	e00d      	b.n	8000d56 <alarmSetISR+0x92>

		if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 8000d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e64 <alarmSetISR+0x1a0>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2280      	movs	r2, #128	@ 0x80
 8000d40:	0212      	lsls	r2, r2, #8
 8000d42:	0011      	movs	r1, r2
 8000d44:	0018      	movs	r0, r3
 8000d46:	f001 fcf7 	bl	8002738 <HAL_GPIO_ReadPin>
 8000d4a:	1e03      	subs	r3, r0, #0
 8000d4c:	d103      	bne.n	8000d56 <alarmSetISR+0x92>
			alarmSetMode = true;
 8000d4e:	4b47      	ldr	r3, [pc, #284]	@ (8000e6c <alarmSetISR+0x1a8>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
//			HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
			break;
 8000d54:	e009      	b.n	8000d6a <alarmSetISR+0xa6>
	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 8000d56:	4b44      	ldr	r3, [pc, #272]	@ (8000e68 <alarmSetISR+0x1a4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	1ad2      	subs	r2, r2, r3
 8000d62:	2380      	movs	r3, #128	@ 0x80
 8000d64:	025b      	lsls	r3, r3, #9
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d9e7      	bls.n	8000d3a <alarmSetISR+0x76>
		}

	}

	// Go through debounce once again
	HAL_TIM_Base_Stop(timerDelay);
 8000d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e68 <alarmSetISR+0x1a4>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f004 f806 	bl	8004d80 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8000d74:	4b3c      	ldr	r3, [pc, #240]	@ (8000e68 <alarmSetISR+0x1a4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f003 ffb5 	bl	8004ce8 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8000d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e68 <alarmSetISR+0x1a4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d86:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 4));
 8000d88:	4b37      	ldr	r3, [pc, #220]	@ (8000e68 <alarmSetISR+0x1a4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	1ad2      	subs	r2, r2, r3
 8000d94:	2380      	movs	r3, #128	@ 0x80
 8000d96:	01db      	lsls	r3, r3, #7
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d9f5      	bls.n	8000d88 <alarmSetISR+0xc4>
	/*
	 * Then, if we are in alarm set mode, go through the
	 * alarm set process until the button is pressed again
	 */

	HAL_TIM_Base_Stop(timerDelay);
 8000d9c:	4b32      	ldr	r3, [pc, #200]	@ (8000e68 <alarmSetISR+0x1a4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	0018      	movs	r0, r3
 8000da2:	f003 ffed 	bl	8004d80 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8000da6:	4b30      	ldr	r3, [pc, #192]	@ (8000e68 <alarmSetISR+0x1a4>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	0018      	movs	r0, r3
 8000dac:	f003 ff9c 	bl	8004ce8 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8000db0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e68 <alarmSetISR+0x1a4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000db8:	607b      	str	r3, [r7, #4]

	if(alarmSetMode) {
 8000dba:	4b2c      	ldr	r3, [pc, #176]	@ (8000e6c <alarmSetISR+0x1a8>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d046      	beq.n	8000e50 <alarmSetISR+0x18c>

		bool displayBlink = false;
 8000dc2:	1cfb      	adds	r3, r7, #3
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			updateAndDisplayAlarm();
 8000dc8:	f7ff fe0c 	bl	80009e4 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 8000dcc:	4b26      	ldr	r3, [pc, #152]	@ (8000e68 <alarmSetISR+0x1a4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	1ad2      	subs	r2, r2, r3
 8000dd8:	2380      	movs	r3, #128	@ 0x80
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d31e      	bcc.n	8000e1e <alarmSetISR+0x15a>

//				HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

				sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 8000de0:	4b23      	ldr	r3, [pc, #140]	@ (8000e70 <alarmSetISR+0x1ac>)
 8000de2:	6818      	ldr	r0, [r3, #0]
 8000de4:	4b23      	ldr	r3, [pc, #140]	@ (8000e74 <alarmSetISR+0x1b0>)
 8000de6:	6819      	ldr	r1, [r3, #0]
 8000de8:	1cfb      	adds	r3, r7, #3
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4a22      	ldr	r2, [pc, #136]	@ (8000e78 <alarmSetISR+0x1b4>)
 8000dee:	5cd3      	ldrb	r3, [r2, r3]
 8000df0:	001a      	movs	r2, r3
 8000df2:	f000 fb19 	bl	8001428 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 8000df6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e68 <alarmSetISR+0x1a4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dfe:	607b      	str	r3, [r7, #4]
				displayBlink = !displayBlink;
 8000e00:	1cfb      	adds	r3, r7, #3
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	1e5a      	subs	r2, r3, #1
 8000e06:	4193      	sbcs	r3, r2
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4053      	eors	r3, r2
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	001a      	movs	r2, r3
 8000e12:	1cfb      	adds	r3, r7, #3
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	781a      	ldrb	r2, [r3, #0]
 8000e18:	2101      	movs	r1, #1
 8000e1a:	400a      	ands	r2, r1
 8000e1c:	701a      	strb	r2, [r3, #0]

			}

		}while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET);
 8000e1e:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <alarmSetISR+0x1a0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2280      	movs	r2, #128	@ 0x80
 8000e24:	0212      	lsls	r2, r2, #8
 8000e26:	0011      	movs	r1, r2
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f001 fc85 	bl	8002738 <HAL_GPIO_ReadPin>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d1ca      	bne.n	8000dc8 <alarmSetISR+0x104>

//		HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_RESET);

		sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 8000e32:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <alarmSetISR+0x1ac>)
 8000e34:	6818      	ldr	r0, [r3, #0]
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <alarmSetISR+0x1b0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	225a      	movs	r2, #90	@ 0x5a
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	f000 faf3 	bl	8001428 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 8000e42:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <alarmSetISR+0x1a4>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	0018      	movs	r0, r3
 8000e48:	f003 ff9a 	bl	8004d80 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8000e4c:	f7ff fdae 	bl	80009ac <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <alarmSetISR+0x1a8>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 8000e56:	1cbb      	adds	r3, r7, #2
 8000e58:	781b      	ldrb	r3, [r3, #0]

}
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b002      	add	sp, #8
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	20000000 	.word	0x20000000
 8000e68:	20000020 	.word	0x20000020
 8000e6c:	20000218 	.word	0x20000218
 8000e70:	20000024 	.word	0x20000024
 8000e74:	20000028 	.word	0x20000028
 8000e78:	08005a00 	.word	0x08005a00

08000e7c <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0

//	printf("Entered hour set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);


	HAL_StatusTypeDef halRet = HAL_OK;
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <hourSetISR+0x48>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <hourSetISR+0x1a>

		alarmHourInc();
 8000e90:	f000 f84c 	bl	8000f2c <alarmHourInc>
 8000e94:	e00f      	b.n	8000eb6 <hourSetISR+0x3a>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 8000e96:	f000 f877 	bl	8000f88 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8000e9a:	490b      	ldr	r1, [pc, #44]	@ (8000ec8 <hourSetISR+0x4c>)
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <hourSetISR+0x50>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f003 fa25 	bl	80042f0 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8000ea6:	f7ff fd81 	bl	80009ac <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8000eaa:	4a09      	ldr	r2, [pc, #36]	@ (8000ed0 <hourSetISR+0x54>)
 8000eac:	4906      	ldr	r1, [pc, #24]	@ (8000ec8 <hourSetISR+0x4c>)
 8000eae:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <hourSetISR+0x50>)
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f7ff f9e9 	bl	8000288 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 8000eb6:	1dfb      	adds	r3, r7, #7
 8000eb8:	781b      	ldrb	r3, [r3, #0]

}
 8000eba:	0018      	movs	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b002      	add	sp, #8
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	20000218 	.word	0x20000218
 8000ec8:	200001ec 	.word	0x200001ec
 8000ecc:	20000128 	.word	0x20000128
 8000ed0:	20000200 	.word	0x20000200

08000ed4 <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0

//	printf("Entered minute set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

	HAL_StatusTypeDef halRet = HAL_OK;
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <minuteSetISR+0x48>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d002      	beq.n	8000eee <minuteSetISR+0x1a>

		alarmMinuteInc();
 8000ee8:	f000 f888 	bl	8000ffc <alarmMinuteInc>
 8000eec:	e00f      	b.n	8000f0e <minuteSetISR+0x3a>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 8000eee:	f000 f8a3 	bl	8001038 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8000ef2:	490b      	ldr	r1, [pc, #44]	@ (8000f20 <minuteSetISR+0x4c>)
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <minuteSetISR+0x50>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f003 f9f9 	bl	80042f0 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8000efe:	f7ff fd55 	bl	80009ac <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8000f02:	4a09      	ldr	r2, [pc, #36]	@ (8000f28 <minuteSetISR+0x54>)
 8000f04:	4906      	ldr	r1, [pc, #24]	@ (8000f20 <minuteSetISR+0x4c>)
 8000f06:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <minuteSetISR+0x50>)
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff f9bd 	bl	8000288 <getRTCTime>

		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
}
 8000f12:	0018      	movs	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b002      	add	sp, #8
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			@ (mov r8, r8)
 8000f1c:	20000218 	.word	0x20000218
 8000f20:	200001ec 	.word	0x200001ec
 8000f24:	20000128 	.word	0x20000128
 8000f28:	20000200 	.word	0x20000200

08000f2c <alarmHourInc>:

void alarmHourInc(void) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8000f30:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <alarmHourInc+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b0b      	cmp	r3, #11
 8000f36:	d903      	bls.n	8000f40 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8000f38:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <alarmHourInc+0x58>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 8000f3e:	e01e      	b.n	8000f7e <alarmHourInc+0x52>
	else if(userAlarmTime.Hours == 11) {
 8000f40:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <alarmHourInc+0x58>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b0b      	cmp	r3, #11
 8000f46:	d10e      	bne.n	8000f66 <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8000f48:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <alarmHourInc+0x58>)
 8000f4a:	78db      	ldrb	r3, [r3, #3]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d103      	bne.n	8000f58 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <alarmHourInc+0x58>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	70da      	strb	r2, [r3, #3]
 8000f56:	e002      	b.n	8000f5e <alarmHourInc+0x32>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <alarmHourInc+0x58>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	70da      	strb	r2, [r3, #3]
		userAlarmTime.Hours = 12;
 8000f5e:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <alarmHourInc+0x58>)
 8000f60:	220c      	movs	r2, #12
 8000f62:	701a      	strb	r2, [r3, #0]
}
 8000f64:	e00b      	b.n	8000f7e <alarmHourInc+0x52>
	else if(userAlarmTime.Hours < 11) {
 8000f66:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <alarmHourInc+0x58>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b0a      	cmp	r3, #10
 8000f6c:	d806      	bhi.n	8000f7c <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8000f6e:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <alarmHourInc+0x58>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	3301      	adds	r3, #1
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4b03      	ldr	r3, [pc, #12]	@ (8000f84 <alarmHourInc+0x58>)
 8000f78:	701a      	strb	r2, [r3, #0]
}
 8000f7a:	e000      	b.n	8000f7e <alarmHourInc+0x52>
		__NOP();
 8000f7c:	46c0      	nop			@ (mov r8, r8)
}
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000204 	.word	0x20000204

08000f88 <currHourInc>:

void currHourInc(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8000f8c:	4a17      	ldr	r2, [pc, #92]	@ (8000fec <currHourInc+0x64>)
 8000f8e:	4918      	ldr	r1, [pc, #96]	@ (8000ff0 <currHourInc+0x68>)
 8000f90:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <currHourInc+0x6c>)
 8000f92:	0018      	movs	r0, r3
 8000f94:	f7ff f978 	bl	8000288 <getRTCTime>

	if(currTime.Hours >= 12) {
 8000f98:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <currHourInc+0x68>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b0b      	cmp	r3, #11
 8000f9e:	d903      	bls.n	8000fa8 <currHourInc+0x20>
		currTime.Hours = 1;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <currHourInc+0x68>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 8000fa6:	e01e      	b.n	8000fe6 <currHourInc+0x5e>
	else if(currTime.Hours == 11) {
 8000fa8:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <currHourInc+0x68>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b0b      	cmp	r3, #11
 8000fae:	d10e      	bne.n	8000fce <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <currHourInc+0x68>)
 8000fb2:	78db      	ldrb	r3, [r3, #3]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d103      	bne.n	8000fc0 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff0 <currHourInc+0x68>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	70da      	strb	r2, [r3, #3]
 8000fbe:	e002      	b.n	8000fc6 <currHourInc+0x3e>
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <currHourInc+0x68>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	70da      	strb	r2, [r3, #3]
		currTime.Hours = 12;
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <currHourInc+0x68>)
 8000fc8:	220c      	movs	r2, #12
 8000fca:	701a      	strb	r2, [r3, #0]
}
 8000fcc:	e00b      	b.n	8000fe6 <currHourInc+0x5e>
	else if(userAlarmTime.Hours < 11) {
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <currHourInc+0x70>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b0a      	cmp	r3, #10
 8000fd4:	d806      	bhi.n	8000fe4 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <currHourInc+0x68>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <currHourInc+0x68>)
 8000fe0:	701a      	strb	r2, [r3, #0]
}
 8000fe2:	e000      	b.n	8000fe6 <currHourInc+0x5e>
		__NOP();
 8000fe4:	46c0      	nop			@ (mov r8, r8)
}
 8000fe6:	46c0      	nop			@ (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000200 	.word	0x20000200
 8000ff0:	200001ec 	.word	0x200001ec
 8000ff4:	20000128 	.word	0x20000128
 8000ff8:	20000204 	.word	0x20000204

08000ffc <alarmMinuteInc>:

void alarmMinuteInc(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <alarmMinuteInc+0x38>)
 8001002:	785b      	ldrb	r3, [r3, #1]
 8001004:	2b3a      	cmp	r3, #58	@ 0x3a
 8001006:	d905      	bls.n	8001014 <alarmMinuteInc+0x18>
		alarmHourInc();
 8001008:	f7ff ff90 	bl	8000f2c <alarmHourInc>
		userAlarmTime.Minutes = 0;
 800100c:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <alarmMinuteInc+0x38>)
 800100e:	2200      	movs	r2, #0
 8001010:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 8001012:	e00b      	b.n	800102c <alarmMinuteInc+0x30>
	else if(userAlarmTime.Minutes < 59) {
 8001014:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <alarmMinuteInc+0x38>)
 8001016:	785b      	ldrb	r3, [r3, #1]
 8001018:	2b3a      	cmp	r3, #58	@ 0x3a
 800101a:	d806      	bhi.n	800102a <alarmMinuteInc+0x2e>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 800101c:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <alarmMinuteInc+0x38>)
 800101e:	785b      	ldrb	r3, [r3, #1]
 8001020:	3301      	adds	r3, #1
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b03      	ldr	r3, [pc, #12]	@ (8001034 <alarmMinuteInc+0x38>)
 8001026:	705a      	strb	r2, [r3, #1]
}
 8001028:	e000      	b.n	800102c <alarmMinuteInc+0x30>
		__NOP();
 800102a:	46c0      	nop			@ (mov r8, r8)
}
 800102c:	46c0      	nop			@ (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			@ (mov r8, r8)
 8001034:	20000204 	.word	0x20000204

08001038 <currMinuteInc>:

void currMinuteInc(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 800103c:	4a0f      	ldr	r2, [pc, #60]	@ (800107c <currMinuteInc+0x44>)
 800103e:	4910      	ldr	r1, [pc, #64]	@ (8001080 <currMinuteInc+0x48>)
 8001040:	4b10      	ldr	r3, [pc, #64]	@ (8001084 <currMinuteInc+0x4c>)
 8001042:	0018      	movs	r0, r3
 8001044:	f7ff f920 	bl	8000288 <getRTCTime>

	if(currTime.Minutes >= 59) {
 8001048:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <currMinuteInc+0x48>)
 800104a:	785b      	ldrb	r3, [r3, #1]
 800104c:	2b3a      	cmp	r3, #58	@ 0x3a
 800104e:	d905      	bls.n	800105c <currMinuteInc+0x24>
		currHourInc();
 8001050:	f7ff ff9a 	bl	8000f88 <currHourInc>
		currTime.Minutes = 0;
 8001054:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <currMinuteInc+0x48>)
 8001056:	2200      	movs	r2, #0
 8001058:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 800105a:	e00b      	b.n	8001074 <currMinuteInc+0x3c>
	else if(currTime.Minutes < 59) {
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <currMinuteInc+0x48>)
 800105e:	785b      	ldrb	r3, [r3, #1]
 8001060:	2b3a      	cmp	r3, #58	@ 0x3a
 8001062:	d806      	bhi.n	8001072 <currMinuteInc+0x3a>
		currTime.Minutes = currTime.Minutes + 1;
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <currMinuteInc+0x48>)
 8001066:	785b      	ldrb	r3, [r3, #1]
 8001068:	3301      	adds	r3, #1
 800106a:	b2da      	uxtb	r2, r3
 800106c:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <currMinuteInc+0x48>)
 800106e:	705a      	strb	r2, [r3, #1]
}
 8001070:	e000      	b.n	8001074 <currMinuteInc+0x3c>
		__NOP();
 8001072:	46c0      	nop			@ (mov r8, r8)
}
 8001074:	46c0      	nop			@ (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	20000200 	.word	0x20000200
 8001080:	200001ec 	.word	0x200001ec
 8001084:	20000128 	.word	0x20000128

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001090:	46c0      	nop			@ (mov r8, r8)
 8001092:	e7fd      	b.n	8001090 <Error_Handler+0x8>

08001094 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM,
					uint32_t tim_PWM_CHANNEL) {
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	0005      	movs	r5, r0
 800109c:	000c      	movs	r4, r1
 800109e:	0010      	movs	r0, r2
 80010a0:	0019      	movs	r1, r3
 80010a2:	1dbb      	adds	r3, r7, #6
 80010a4:	1c2a      	adds	r2, r5, #0
 80010a6:	801a      	strh	r2, [r3, #0]
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	1c22      	adds	r2, r4, #0
 80010ac:	801a      	strh	r2, [r3, #0]
 80010ae:	1cbb      	adds	r3, r7, #2
 80010b0:	1c02      	adds	r2, r0, #0
 80010b2:	801a      	strh	r2, [r3, #0]
 80010b4:	003b      	movs	r3, r7
 80010b6:	1c0a      	adds	r2, r1, #0
 80010b8:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 80010ba:	4b7a      	ldr	r3, [pc, #488]	@ (80012a4 <sevSeg_Init+0x210>)
 80010bc:	1dba      	adds	r2, r7, #6
 80010be:	8812      	ldrh	r2, [r2, #0]
 80010c0:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 80010c2:	4b79      	ldr	r3, [pc, #484]	@ (80012a8 <sevSeg_Init+0x214>)
 80010c4:	1d3a      	adds	r2, r7, #4
 80010c6:	8812      	ldrh	r2, [r2, #0]
 80010c8:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 80010ca:	4b78      	ldr	r3, [pc, #480]	@ (80012ac <sevSeg_Init+0x218>)
 80010cc:	1cba      	adds	r2, r7, #2
 80010ce:	8812      	ldrh	r2, [r2, #0]
 80010d0:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 80010d2:	4b77      	ldr	r3, [pc, #476]	@ (80012b0 <sevSeg_Init+0x21c>)
 80010d4:	003a      	movs	r2, r7
 80010d6:	8812      	ldrh	r2, [r2, #0]
 80010d8:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 80010da:	4a76      	ldr	r2, [pc, #472]	@ (80012b4 <sevSeg_Init+0x220>)
 80010dc:	2330      	movs	r3, #48	@ 0x30
 80010de:	18fb      	adds	r3, r7, r3
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	8013      	strh	r3, [r2, #0]

	for(int i = 0; i < 5; i++) {
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	e00b      	b.n	8001102 <sevSeg_Init+0x6e>
		portArray[i] = GPIOPortArray[i];
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010f0:	18d3      	adds	r3, r2, r3
 80010f2:	6819      	ldr	r1, [r3, #0]
 80010f4:	4b70      	ldr	r3, [pc, #448]	@ (80012b8 <sevSeg_Init+0x224>)
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	0092      	lsls	r2, r2, #2
 80010fa:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	3301      	adds	r3, #1
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	2b04      	cmp	r3, #4
 8001106:	ddf0      	ble.n	80010ea <sevSeg_Init+0x56>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001108:	4b6b      	ldr	r3, [pc, #428]	@ (80012b8 <sevSeg_Init+0x224>)
 800110a:	6918      	ldr	r0, [r3, #16]
 800110c:	4b69      	ldr	r3, [pc, #420]	@ (80012b4 <sevSeg_Init+0x220>)
 800110e:	8819      	ldrh	r1, [r3, #0]
 8001110:	4b6a      	ldr	r3, [pc, #424]	@ (80012bc <sevSeg_Init+0x228>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	001a      	movs	r2, r3
 8001116:	f001 fb2c 	bl	8002772 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 800111a:	4b67      	ldr	r3, [pc, #412]	@ (80012b8 <sevSeg_Init+0x224>)
 800111c:	6918      	ldr	r0, [r3, #16]
 800111e:	4b65      	ldr	r3, [pc, #404]	@ (80012b4 <sevSeg_Init+0x220>)
 8001120:	8819      	ldrh	r1, [r3, #0]
 8001122:	4b66      	ldr	r3, [pc, #408]	@ (80012bc <sevSeg_Init+0x228>)
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	001a      	movs	r2, r3
 8001128:	f001 fb23 	bl	8002772 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 800112c:	4b62      	ldr	r3, [pc, #392]	@ (80012b8 <sevSeg_Init+0x224>)
 800112e:	6898      	ldr	r0, [r3, #8]
 8001130:	4b5e      	ldr	r3, [pc, #376]	@ (80012ac <sevSeg_Init+0x218>)
 8001132:	8819      	ldrh	r1, [r3, #0]
 8001134:	4b61      	ldr	r3, [pc, #388]	@ (80012bc <sevSeg_Init+0x228>)
 8001136:	785b      	ldrb	r3, [r3, #1]
 8001138:	001a      	movs	r2, r3
 800113a:	f001 fb1a 	bl	8002772 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800113e:	4b5e      	ldr	r3, [pc, #376]	@ (80012b8 <sevSeg_Init+0x224>)
 8001140:	6898      	ldr	r0, [r3, #8]
 8001142:	4b5a      	ldr	r3, [pc, #360]	@ (80012ac <sevSeg_Init+0x218>)
 8001144:	8819      	ldrh	r1, [r3, #0]
 8001146:	4b5d      	ldr	r3, [pc, #372]	@ (80012bc <sevSeg_Init+0x228>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	001a      	movs	r2, r3
 800114c:	f001 fb11 	bl	8002772 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8001150:	4b59      	ldr	r3, [pc, #356]	@ (80012b8 <sevSeg_Init+0x224>)
 8001152:	68d8      	ldr	r0, [r3, #12]
 8001154:	4b56      	ldr	r3, [pc, #344]	@ (80012b0 <sevSeg_Init+0x21c>)
 8001156:	8819      	ldrh	r1, [r3, #0]
 8001158:	4b58      	ldr	r3, [pc, #352]	@ (80012bc <sevSeg_Init+0x228>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	001a      	movs	r2, r3
 800115e:	f001 fb08 	bl	8002772 <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(htim_PWM, tim_PWM_CHANNEL, 50);
 8001162:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001166:	2232      	movs	r2, #50	@ 0x32
 8001168:	0018      	movs	r0, r3
 800116a:	f000 f95d 	bl	8001428 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 800116e:	2308      	movs	r3, #8
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	4a53      	ldr	r2, [pc, #332]	@ (80012c0 <sevSeg_Init+0x22c>)
 8001174:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	e038      	b.n	80011ee <sevSeg_Init+0x15a>

		sendByte = hofSymb[i];
 800117c:	231b      	movs	r3, #27
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	2208      	movs	r2, #8
 8001182:	18b9      	adds	r1, r7, r2
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	188a      	adds	r2, r1, r2
 8001188:	7812      	ldrb	r2, [r2, #0]
 800118a:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	e027      	b.n	80011e2 <sevSeg_Init+0x14e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001192:	4b49      	ldr	r3, [pc, #292]	@ (80012b8 <sevSeg_Init+0x224>)
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	4b43      	ldr	r3, [pc, #268]	@ (80012a4 <sevSeg_Init+0x210>)
 8001198:	8819      	ldrh	r1, [r3, #0]
 800119a:	241b      	movs	r4, #27
 800119c:	193b      	adds	r3, r7, r4
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2201      	movs	r2, #1
 80011a2:	4013      	ands	r3, r2
 80011a4:	4a45      	ldr	r2, [pc, #276]	@ (80012bc <sevSeg_Init+0x228>)
 80011a6:	5cd3      	ldrb	r3, [r2, r3]
 80011a8:	001a      	movs	r2, r3
 80011aa:	f001 fae2 	bl	8002772 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 80011ae:	4b42      	ldr	r3, [pc, #264]	@ (80012b8 <sevSeg_Init+0x224>)
 80011b0:	6858      	ldr	r0, [r3, #4]
 80011b2:	4b3d      	ldr	r3, [pc, #244]	@ (80012a8 <sevSeg_Init+0x214>)
 80011b4:	8819      	ldrh	r1, [r3, #0]
 80011b6:	4b41      	ldr	r3, [pc, #260]	@ (80012bc <sevSeg_Init+0x228>)
 80011b8:	785b      	ldrb	r3, [r3, #1]
 80011ba:	001a      	movs	r2, r3
 80011bc:	f001 fad9 	bl	8002772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 80011c0:	4b3d      	ldr	r3, [pc, #244]	@ (80012b8 <sevSeg_Init+0x224>)
 80011c2:	6858      	ldr	r0, [r3, #4]
 80011c4:	4b38      	ldr	r3, [pc, #224]	@ (80012a8 <sevSeg_Init+0x214>)
 80011c6:	8819      	ldrh	r1, [r3, #0]
 80011c8:	4b3c      	ldr	r3, [pc, #240]	@ (80012bc <sevSeg_Init+0x228>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	001a      	movs	r2, r3
 80011ce:	f001 fad0 	bl	8002772 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 80011d2:	193b      	adds	r3, r7, r4
 80011d4:	193a      	adds	r2, r7, r4
 80011d6:	7812      	ldrb	r2, [r2, #0]
 80011d8:	0852      	lsrs	r2, r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	3301      	adds	r3, #1
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	2b07      	cmp	r3, #7
 80011e6:	ddd4      	ble.n	8001192 <sevSeg_Init+0xfe>
	for(int i = 0; i <= 3; i++) {
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3301      	adds	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	ddc3      	ble.n	800117c <sevSeg_Init+0xe8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80011f4:	4b30      	ldr	r3, [pc, #192]	@ (80012b8 <sevSeg_Init+0x224>)
 80011f6:	6898      	ldr	r0, [r3, #8]
 80011f8:	4b2c      	ldr	r3, [pc, #176]	@ (80012ac <sevSeg_Init+0x218>)
 80011fa:	8819      	ldrh	r1, [r3, #0]
 80011fc:	4b2f      	ldr	r3, [pc, #188]	@ (80012bc <sevSeg_Init+0x228>)
 80011fe:	785b      	ldrb	r3, [r3, #1]
 8001200:	001a      	movs	r2, r3
 8001202:	f001 fab6 	bl	8002772 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001206:	4b2c      	ldr	r3, [pc, #176]	@ (80012b8 <sevSeg_Init+0x224>)
 8001208:	6898      	ldr	r0, [r3, #8]
 800120a:	4b28      	ldr	r3, [pc, #160]	@ (80012ac <sevSeg_Init+0x218>)
 800120c:	8819      	ldrh	r1, [r3, #0]
 800120e:	4b2b      	ldr	r3, [pc, #172]	@ (80012bc <sevSeg_Init+0x228>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	001a      	movs	r2, r3
 8001214:	f001 faad 	bl	8002772 <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8001218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800121a:	0018      	movs	r0, r3
 800121c:	f003 fdb0 	bl	8004d80 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8001220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001222:	0018      	movs	r0, r3
 8001224:	f003 fd60 	bl	8004ce8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8001228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122e:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 2)){ timerVal = __HAL_TIM_GET_COUNTER(htim); }
 8001230:	e003      	b.n	800123a <sevSeg_Init+0x1a6>
 8001232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	1ad2      	subs	r2, r2, r3
 8001244:	2380      	movs	r3, #128	@ 0x80
 8001246:	021b      	lsls	r3, r3, #8
 8001248:	429a      	cmp	r2, r3
 800124a:	d3f2      	bcc.n	8001232 <sevSeg_Init+0x19e>

	HAL_TIM_Base_Stop(htim);
 800124c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800124e:	0018      	movs	r0, r3
 8001250:	f003 fd96 	bl	8004d80 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001254:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <sevSeg_Init+0x224>)
 8001256:	6918      	ldr	r0, [r3, #16]
 8001258:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <sevSeg_Init+0x220>)
 800125a:	8819      	ldrh	r1, [r3, #0]
 800125c:	4b17      	ldr	r3, [pc, #92]	@ (80012bc <sevSeg_Init+0x228>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	001a      	movs	r2, r3
 8001262:	f001 fa86 	bl	8002772 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001266:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <sevSeg_Init+0x224>)
 8001268:	6918      	ldr	r0, [r3, #16]
 800126a:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <sevSeg_Init+0x220>)
 800126c:	8819      	ldrh	r1, [r3, #0]
 800126e:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <sevSeg_Init+0x228>)
 8001270:	785b      	ldrb	r3, [r3, #1]
 8001272:	001a      	movs	r2, r3
 8001274:	f001 fa7d 	bl	8002772 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001278:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <sevSeg_Init+0x224>)
 800127a:	6898      	ldr	r0, [r3, #8]
 800127c:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <sevSeg_Init+0x218>)
 800127e:	8819      	ldrh	r1, [r3, #0]
 8001280:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <sevSeg_Init+0x228>)
 8001282:	785b      	ldrb	r3, [r3, #1]
 8001284:	001a      	movs	r2, r3
 8001286:	f001 fa74 	bl	8002772 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800128a:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <sevSeg_Init+0x224>)
 800128c:	6898      	ldr	r0, [r3, #8]
 800128e:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <sevSeg_Init+0x218>)
 8001290:	8819      	ldrh	r1, [r3, #0]
 8001292:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <sevSeg_Init+0x228>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	001a      	movs	r2, r3
 8001298:	f001 fa6b 	bl	8002772 <HAL_GPIO_WritePin>

}
 800129c:	46c0      	nop			@ (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b008      	add	sp, #32
 80012a2:	bdb0      	pop	{r4, r5, r7, pc}
 80012a4:	2000021a 	.word	0x2000021a
 80012a8:	2000021c 	.word	0x2000021c
 80012ac:	2000021e 	.word	0x2000021e
 80012b0:	20000220 	.word	0x20000220
 80012b4:	20000222 	.word	0x20000222
 80012b8:	2000002c 	.word	0x2000002c
 80012bc:	20000040 	.word	0x20000040
 80012c0:	471d3700 	.word	0x471d3700

080012c4 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	210a      	movs	r1, #10
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7fe ff16 	bl	8000104 <__udivsi3>
 80012d8:	0003      	movs	r3, r0
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	2408      	movs	r4, #8
 80012de:	193b      	adds	r3, r7, r4
 80012e0:	701a      	strb	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	210a      	movs	r1, #10
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7fe ff91 	bl	8000210 <__aeabi_uidivmod>
 80012ee:	000b      	movs	r3, r1
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	193b      	adds	r3, r7, r4
 80012f4:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80012fa:	210a      	movs	r1, #10
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7fe ff01 	bl	8000104 <__udivsi3>
 8001302:	0003      	movs	r3, r0
 8001304:	b2da      	uxtb	r2, r3
 8001306:	193b      	adds	r3, r7, r4
 8001308:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 800130e:	210a      	movs	r1, #10
 8001310:	0018      	movs	r0, r3
 8001312:	f7fe ff7d 	bl	8000210 <__aeabi_uidivmod>
 8001316:	000b      	movs	r3, r1
 8001318:	b2da      	uxtb	r2, r3
 800131a:	193b      	adds	r3, r7, r4
 800131c:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 800131e:	2116      	movs	r1, #22
 8001320:	187b      	adds	r3, r7, r1
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	78db      	ldrb	r3, [r3, #3]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d102      	bne.n	8001334 <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 800132e:	187b      	adds	r3, r7, r1
 8001330:	2202      	movs	r2, #2
 8001332:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	e04f      	b.n	80013da <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 800133a:	2308      	movs	r3, #8
 800133c:	18fa      	adds	r2, r7, r3
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	18d3      	adds	r3, r2, r3
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	0019      	movs	r1, r3
 8001346:	2417      	movs	r4, #23
 8001348:	193b      	adds	r3, r7, r4
 800134a:	4a30      	ldr	r2, [pc, #192]	@ (800140c <sevSeg_updateDigits+0x148>)
 800134c:	5c52      	ldrb	r2, [r2, r1]
 800134e:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d110      	bne.n	8001378 <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	210a      	movs	r1, #10
 800135c:	0018      	movs	r0, r3
 800135e:	f7fe fed1 	bl	8000104 <__udivsi3>
 8001362:	0003      	movs	r3, r0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	001a      	movs	r2, r3
 8001368:	2316      	movs	r3, #22
 800136a:	18fb      	adds	r3, r7, r3
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	18d2      	adds	r2, r2, r3
 8001370:	193b      	adds	r3, r7, r4
 8001372:	4927      	ldr	r1, [pc, #156]	@ (8001410 <sevSeg_updateDigits+0x14c>)
 8001374:	5c8a      	ldrb	r2, [r1, r2]
 8001376:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	e027      	b.n	80013ce <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 800137e:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <sevSeg_updateDigits+0x150>)
 8001380:	6818      	ldr	r0, [r3, #0]
 8001382:	4b25      	ldr	r3, [pc, #148]	@ (8001418 <sevSeg_updateDigits+0x154>)
 8001384:	8819      	ldrh	r1, [r3, #0]
 8001386:	2417      	movs	r4, #23
 8001388:	193b      	adds	r3, r7, r4
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2201      	movs	r2, #1
 800138e:	4013      	ands	r3, r2
 8001390:	4a22      	ldr	r2, [pc, #136]	@ (800141c <sevSeg_updateDigits+0x158>)
 8001392:	5cd3      	ldrb	r3, [r2, r3]
 8001394:	001a      	movs	r2, r3
 8001396:	f001 f9ec 	bl	8002772 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 800139a:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <sevSeg_updateDigits+0x150>)
 800139c:	6858      	ldr	r0, [r3, #4]
 800139e:	4b20      	ldr	r3, [pc, #128]	@ (8001420 <sevSeg_updateDigits+0x15c>)
 80013a0:	8819      	ldrh	r1, [r3, #0]
 80013a2:	4b1e      	ldr	r3, [pc, #120]	@ (800141c <sevSeg_updateDigits+0x158>)
 80013a4:	785b      	ldrb	r3, [r3, #1]
 80013a6:	001a      	movs	r2, r3
 80013a8:	f001 f9e3 	bl	8002772 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 80013ac:	4b19      	ldr	r3, [pc, #100]	@ (8001414 <sevSeg_updateDigits+0x150>)
 80013ae:	6858      	ldr	r0, [r3, #4]
 80013b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001420 <sevSeg_updateDigits+0x15c>)
 80013b2:	8819      	ldrh	r1, [r3, #0]
 80013b4:	4b19      	ldr	r3, [pc, #100]	@ (800141c <sevSeg_updateDigits+0x158>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	001a      	movs	r2, r3
 80013ba:	f001 f9da 	bl	8002772 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	193a      	adds	r2, r7, r4
 80013c2:	7812      	ldrb	r2, [r2, #0]
 80013c4:	0852      	lsrs	r2, r2, #1
 80013c6:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3301      	adds	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2b07      	cmp	r3, #7
 80013d2:	ddd4      	ble.n	800137e <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	3301      	adds	r3, #1
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	2b03      	cmp	r3, #3
 80013de:	ddac      	ble.n	800133a <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80013e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <sevSeg_updateDigits+0x150>)
 80013e2:	6898      	ldr	r0, [r3, #8]
 80013e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <sevSeg_updateDigits+0x160>)
 80013e6:	8819      	ldrh	r1, [r3, #0]
 80013e8:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <sevSeg_updateDigits+0x158>)
 80013ea:	785b      	ldrb	r3, [r3, #1]
 80013ec:	001a      	movs	r2, r3
 80013ee:	f001 f9c0 	bl	8002772 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80013f2:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <sevSeg_updateDigits+0x150>)
 80013f4:	6898      	ldr	r0, [r3, #8]
 80013f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <sevSeg_updateDigits+0x160>)
 80013f8:	8819      	ldrh	r1, [r3, #0]
 80013fa:	4b08      	ldr	r3, [pc, #32]	@ (800141c <sevSeg_updateDigits+0x158>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	001a      	movs	r2, r3
 8001400:	f001 f9b7 	bl	8002772 <HAL_GPIO_WritePin>

	return;
 8001404:	46c0      	nop			@ (mov r8, r8)

}
 8001406:	46bd      	mov	sp, r7
 8001408:	b007      	add	sp, #28
 800140a:	bd90      	pop	{r4, r7, pc}
 800140c:	08005a04 	.word	0x08005a04
 8001410:	08005a10 	.word	0x08005a10
 8001414:	2000002c 	.word	0x2000002c
 8001418:	2000021a 	.word	0x2000021a
 800141c:	20000040 	.word	0x20000040
 8001420:	2000021c 	.word	0x2000021c
 8001424:	2000021e 	.word	0x2000021e

08001428 <sevSeg_setIntensity>:

void sevSeg_setIntensity(TIM_HandleTypeDef *htim_PWM, uint32_t tim_PWM_CHANNEL, uint16_t dutyCycle) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	1dbb      	adds	r3, r7, #6
 8001434:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(htim_PWM, tim_PWM_CHANNEL, dutyCycle);
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d105      	bne.n	8001448 <sevSeg_setIntensity+0x20>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	1dba      	adds	r2, r7, #6
 8001442:	8812      	ldrh	r2, [r2, #0]
 8001444:	635a      	str	r2, [r3, #52]	@ 0x34
 8001446:	e028      	b.n	800149a <sevSeg_setIntensity+0x72>
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2b04      	cmp	r3, #4
 800144c:	d105      	bne.n	800145a <sevSeg_setIntensity+0x32>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	1dbb      	adds	r3, r7, #6
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	6393      	str	r3, [r2, #56]	@ 0x38
 8001458:	e01f      	b.n	800149a <sevSeg_setIntensity+0x72>
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2b08      	cmp	r3, #8
 800145e:	d105      	bne.n	800146c <sevSeg_setIntensity+0x44>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	1dbb      	adds	r3, r7, #6
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800146a:	e016      	b.n	800149a <sevSeg_setIntensity+0x72>
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b0c      	cmp	r3, #12
 8001470:	d105      	bne.n	800147e <sevSeg_setIntensity+0x56>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	1dbb      	adds	r3, r7, #6
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	6413      	str	r3, [r2, #64]	@ 0x40
 800147c:	e00d      	b.n	800149a <sevSeg_setIntensity+0x72>
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	2b10      	cmp	r3, #16
 8001482:	d105      	bne.n	8001490 <sevSeg_setIntensity+0x68>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	1dbb      	adds	r3, r7, #6
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	6593      	str	r3, [r2, #88]	@ 0x58
 800148e:	e004      	b.n	800149a <sevSeg_setIntensity+0x72>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	1dbb      	adds	r3, r7, #6
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(htim_PWM, tim_PWM_CHANNEL);
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	0011      	movs	r1, r2
 80014a0:	0018      	movs	r0, r3
 80014a2:	f003 fceb 	bl	8004e7c <HAL_TIM_PWM_Start>

}
 80014a6:	46c0      	nop			@ (mov r8, r8)
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b004      	add	sp, #16
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <HAL_MspInit+0x44>)
 80014b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <HAL_MspInit+0x44>)
 80014bc:	2101      	movs	r1, #1
 80014be:	430a      	orrs	r2, r1
 80014c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80014c2:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <HAL_MspInit+0x44>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	2201      	movs	r2, #1
 80014c8:	4013      	ands	r3, r2
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <HAL_MspInit+0x44>)
 80014d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014d2:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <HAL_MspInit+0x44>)
 80014d4:	2180      	movs	r1, #128	@ 0x80
 80014d6:	0549      	lsls	r1, r1, #21
 80014d8:	430a      	orrs	r2, r1
 80014da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014dc:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <HAL_MspInit+0x44>)
 80014de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014e0:	2380      	movs	r3, #128	@ 0x80
 80014e2:	055b      	lsls	r3, r3, #21
 80014e4:	4013      	ands	r3, r2
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	40021000 	.word	0x40021000

080014f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b08b      	sub	sp, #44	@ 0x2c
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	2414      	movs	r4, #20
 8001502:	193b      	adds	r3, r7, r4
 8001504:	0018      	movs	r0, r3
 8001506:	2314      	movs	r3, #20
 8001508:	001a      	movs	r2, r3
 800150a:	2100      	movs	r1, #0
 800150c:	f004 fa40 	bl	8005990 <memset>
  if(hadc->Instance==ADC1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a18      	ldr	r2, [pc, #96]	@ (8001578 <HAL_ADC_MspInit+0x80>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d129      	bne.n	800156e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800151a:	4b18      	ldr	r3, [pc, #96]	@ (800157c <HAL_ADC_MspInit+0x84>)
 800151c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800151e:	4b17      	ldr	r3, [pc, #92]	@ (800157c <HAL_ADC_MspInit+0x84>)
 8001520:	2180      	movs	r1, #128	@ 0x80
 8001522:	0349      	lsls	r1, r1, #13
 8001524:	430a      	orrs	r2, r1
 8001526:	641a      	str	r2, [r3, #64]	@ 0x40
 8001528:	4b14      	ldr	r3, [pc, #80]	@ (800157c <HAL_ADC_MspInit+0x84>)
 800152a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800152c:	2380      	movs	r3, #128	@ 0x80
 800152e:	035b      	lsls	r3, r3, #13
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <HAL_ADC_MspInit+0x84>)
 8001538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <HAL_ADC_MspInit+0x84>)
 800153c:	2101      	movs	r1, #1
 800153e:	430a      	orrs	r2, r1
 8001540:	635a      	str	r2, [r3, #52]	@ 0x34
 8001542:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <HAL_ADC_MspInit+0x84>)
 8001544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001546:	2201      	movs	r2, #1
 8001548:	4013      	ands	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800154e:	193b      	adds	r3, r7, r4
 8001550:	2204      	movs	r2, #4
 8001552:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001554:	193b      	adds	r3, r7, r4
 8001556:	2203      	movs	r2, #3
 8001558:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	193b      	adds	r3, r7, r4
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001560:	193a      	adds	r2, r7, r4
 8001562:	23a0      	movs	r3, #160	@ 0xa0
 8001564:	05db      	lsls	r3, r3, #23
 8001566:	0011      	movs	r1, r2
 8001568:	0018      	movs	r0, r3
 800156a:	f000 ff81 	bl	8002470 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	46bd      	mov	sp, r7
 8001572:	b00b      	add	sp, #44	@ 0x2c
 8001574:	bd90      	pop	{r4, r7, pc}
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	40012400 	.word	0x40012400
 800157c:	40021000 	.word	0x40021000

08001580 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b095      	sub	sp, #84	@ 0x54
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	233c      	movs	r3, #60	@ 0x3c
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	0018      	movs	r0, r3
 800158e:	2314      	movs	r3, #20
 8001590:	001a      	movs	r2, r3
 8001592:	2100      	movs	r1, #0
 8001594:	f004 f9fc 	bl	8005990 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001598:	2414      	movs	r4, #20
 800159a:	193b      	adds	r3, r7, r4
 800159c:	0018      	movs	r0, r3
 800159e:	2328      	movs	r3, #40	@ 0x28
 80015a0:	001a      	movs	r2, r3
 80015a2:	2100      	movs	r1, #0
 80015a4:	f004 f9f4 	bl	8005990 <memset>
  if(hi2c->Instance==I2C1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a22      	ldr	r2, [pc, #136]	@ (8001638 <HAL_I2C_MspInit+0xb8>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d13d      	bne.n	800162e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015b2:	193b      	adds	r3, r7, r4
 80015b4:	2220      	movs	r2, #32
 80015b6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015b8:	193b      	adds	r3, r7, r4
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015be:	193b      	adds	r3, r7, r4
 80015c0:	0018      	movs	r0, r3
 80015c2:	f002 fc79 	bl	8003eb8 <HAL_RCCEx_PeriphCLKConfig>
 80015c6:	1e03      	subs	r3, r0, #0
 80015c8:	d001      	beq.n	80015ce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015ca:	f7ff fd5d 	bl	8001088 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	4b1b      	ldr	r3, [pc, #108]	@ (800163c <HAL_I2C_MspInit+0xbc>)
 80015d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015d2:	4b1a      	ldr	r3, [pc, #104]	@ (800163c <HAL_I2C_MspInit+0xbc>)
 80015d4:	2102      	movs	r1, #2
 80015d6:	430a      	orrs	r2, r1
 80015d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80015da:	4b18      	ldr	r3, [pc, #96]	@ (800163c <HAL_I2C_MspInit+0xbc>)
 80015dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015de:	2202      	movs	r2, #2
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015e6:	213c      	movs	r1, #60	@ 0x3c
 80015e8:	187b      	adds	r3, r7, r1
 80015ea:	22c0      	movs	r2, #192	@ 0xc0
 80015ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ee:	187b      	adds	r3, r7, r1
 80015f0:	2212      	movs	r2, #18
 80015f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	187b      	adds	r3, r7, r1
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001600:	187b      	adds	r3, r7, r1
 8001602:	2206      	movs	r2, #6
 8001604:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	187b      	adds	r3, r7, r1
 8001608:	4a0d      	ldr	r2, [pc, #52]	@ (8001640 <HAL_I2C_MspInit+0xc0>)
 800160a:	0019      	movs	r1, r3
 800160c:	0010      	movs	r0, r2
 800160e:	f000 ff2f 	bl	8002470 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001612:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <HAL_I2C_MspInit+0xbc>)
 8001614:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001616:	4b09      	ldr	r3, [pc, #36]	@ (800163c <HAL_I2C_MspInit+0xbc>)
 8001618:	2180      	movs	r1, #128	@ 0x80
 800161a:	0389      	lsls	r1, r1, #14
 800161c:	430a      	orrs	r2, r1
 800161e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <HAL_I2C_MspInit+0xbc>)
 8001622:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001624:	2380      	movs	r3, #128	@ 0x80
 8001626:	039b      	lsls	r3, r3, #14
 8001628:	4013      	ands	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800162e:	46c0      	nop			@ (mov r8, r8)
 8001630:	46bd      	mov	sp, r7
 8001632:	b015      	add	sp, #84	@ 0x54
 8001634:	bd90      	pop	{r4, r7, pc}
 8001636:	46c0      	nop			@ (mov r8, r8)
 8001638:	40005400 	.word	0x40005400
 800163c:	40021000 	.word	0x40021000
 8001640:	50000400 	.word	0x50000400

08001644 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b08f      	sub	sp, #60	@ 0x3c
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800164c:	2410      	movs	r4, #16
 800164e:	193b      	adds	r3, r7, r4
 8001650:	0018      	movs	r0, r3
 8001652:	2328      	movs	r3, #40	@ 0x28
 8001654:	001a      	movs	r2, r3
 8001656:	2100      	movs	r1, #0
 8001658:	f004 f99a 	bl	8005990 <memset>
  if(hrtc->Instance==RTC)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a19      	ldr	r2, [pc, #100]	@ (80016c8 <HAL_RTC_MspInit+0x84>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d12c      	bne.n	80016c0 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001666:	193b      	adds	r3, r7, r4
 8001668:	2280      	movs	r2, #128	@ 0x80
 800166a:	0292      	lsls	r2, r2, #10
 800166c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800166e:	193b      	adds	r3, r7, r4
 8001670:	2280      	movs	r2, #128	@ 0x80
 8001672:	0052      	lsls	r2, r2, #1
 8001674:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001676:	193b      	adds	r3, r7, r4
 8001678:	0018      	movs	r0, r3
 800167a:	f002 fc1d 	bl	8003eb8 <HAL_RCCEx_PeriphCLKConfig>
 800167e:	1e03      	subs	r3, r0, #0
 8001680:	d001      	beq.n	8001686 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001682:	f7ff fd01 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001686:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <HAL_RTC_MspInit+0x88>)
 8001688:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <HAL_RTC_MspInit+0x88>)
 800168c:	2180      	movs	r1, #128	@ 0x80
 800168e:	0209      	lsls	r1, r1, #8
 8001690:	430a      	orrs	r2, r1
 8001692:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001694:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <HAL_RTC_MspInit+0x88>)
 8001696:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001698:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <HAL_RTC_MspInit+0x88>)
 800169a:	2180      	movs	r1, #128	@ 0x80
 800169c:	00c9      	lsls	r1, r1, #3
 800169e:	430a      	orrs	r2, r1
 80016a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016a2:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <HAL_RTC_MspInit+0x88>)
 80016a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016a6:	2380      	movs	r3, #128	@ 0x80
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4013      	ands	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2100      	movs	r1, #0
 80016b4:	2002      	movs	r0, #2
 80016b6:	f000 fea9 	bl	800240c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80016ba:	2002      	movs	r0, #2
 80016bc:	f000 febb 	bl	8002436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80016c0:	46c0      	nop			@ (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b00f      	add	sp, #60	@ 0x3c
 80016c6:	bd90      	pop	{r4, r7, pc}
 80016c8:	40002800 	.word	0x40002800
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2380      	movs	r3, #128	@ 0x80
 80016de:	05db      	lsls	r3, r3, #23
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d10b      	bne.n	80016fc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016e4:	4b07      	ldr	r3, [pc, #28]	@ (8001704 <HAL_TIM_PWM_MspInit+0x34>)
 80016e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_TIM_PWM_MspInit+0x34>)
 80016ea:	2101      	movs	r1, #1
 80016ec:	430a      	orrs	r2, r1
 80016ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <HAL_TIM_PWM_MspInit+0x34>)
 80016f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016f4:	2201      	movs	r2, #1
 80016f6:	4013      	ands	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016fc:	46c0      	nop			@ (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	b004      	add	sp, #16
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000

08001708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <HAL_TIM_Base_MspInit+0x38>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d10d      	bne.n	8001736 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800171a:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <HAL_TIM_Base_MspInit+0x3c>)
 800171c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800171e:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <HAL_TIM_Base_MspInit+0x3c>)
 8001720:	2180      	movs	r1, #128	@ 0x80
 8001722:	0209      	lsls	r1, r1, #8
 8001724:	430a      	orrs	r2, r1
 8001726:	641a      	str	r2, [r3, #64]	@ 0x40
 8001728:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_TIM_Base_MspInit+0x3c>)
 800172a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800172c:	2380      	movs	r3, #128	@ 0x80
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	4013      	ands	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001736:	46c0      	nop			@ (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	b004      	add	sp, #16
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	40002000 	.word	0x40002000
 8001744:	40021000 	.word	0x40021000

08001748 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b089      	sub	sp, #36	@ 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	240c      	movs	r4, #12
 8001752:	193b      	adds	r3, r7, r4
 8001754:	0018      	movs	r0, r3
 8001756:	2314      	movs	r3, #20
 8001758:	001a      	movs	r2, r3
 800175a:	2100      	movs	r1, #0
 800175c:	f004 f918 	bl	8005990 <memset>
  if(htim->Instance==TIM2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	2380      	movs	r3, #128	@ 0x80
 8001766:	05db      	lsls	r3, r3, #23
 8001768:	429a      	cmp	r2, r3
 800176a:	d121      	bne.n	80017b0 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800176c:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <HAL_TIM_MspPostInit+0x70>)
 800176e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001770:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <HAL_TIM_MspPostInit+0x70>)
 8001772:	2104      	movs	r1, #4
 8001774:	430a      	orrs	r2, r1
 8001776:	635a      	str	r2, [r3, #52]	@ 0x34
 8001778:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <HAL_TIM_MspPostInit+0x70>)
 800177a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800177c:	2204      	movs	r2, #4
 800177e:	4013      	ands	r3, r2
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 8001784:	0021      	movs	r1, r4
 8001786:	187b      	adds	r3, r7, r1
 8001788:	2240      	movs	r2, #64	@ 0x40
 800178a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	187b      	adds	r3, r7, r1
 800178e:	2202      	movs	r2, #2
 8001790:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	187b      	adds	r3, r7, r1
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	187b      	adds	r3, r7, r1
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800179e:	187b      	adds	r3, r7, r1
 80017a0:	2202      	movs	r2, #2
 80017a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	4a05      	ldr	r2, [pc, #20]	@ (80017bc <HAL_TIM_MspPostInit+0x74>)
 80017a8:	0019      	movs	r1, r3
 80017aa:	0010      	movs	r0, r2
 80017ac:	f000 fe60 	bl	8002470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017b0:	46c0      	nop			@ (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b009      	add	sp, #36	@ 0x24
 80017b6:	bd90      	pop	{r4, r7, pc}
 80017b8:	40021000 	.word	0x40021000
 80017bc:	50000800 	.word	0x50000800

080017c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c4:	46c0      	nop			@ (mov r8, r8)
 80017c6:	e7fd      	b.n	80017c4 <NMI_Handler+0x4>

080017c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017cc:	46c0      	nop			@ (mov r8, r8)
 80017ce:	e7fd      	b.n	80017cc <HardFault_Handler+0x4>

080017d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80017d4:	46c0      	nop			@ (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017de:	46c0      	nop			@ (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e8:	f000 f8ca 	bl	8001980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ec:	46c0      	nop			@ (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80017f8:	4b03      	ldr	r3, [pc, #12]	@ (8001808 <RTC_TAMP_IRQHandler+0x14>)
 80017fa:	0018      	movs	r0, r3
 80017fc:	f003 f89c 	bl	8004938 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8001800:	46c0      	nop			@ (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			@ (mov r8, r8)
 8001808:	20000128 	.word	0x20000128

0800180c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 8001810:	2001      	movs	r0, #1
 8001812:	f000 ffe7 	bl	80027e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 8001816:	2002      	movs	r0, #2
 8001818:	f000 ffe4 	bl	80027e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800181c:	46c0      	nop			@ (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 8001826:	2004      	movs	r0, #4
 8001828:	f000 ffdc 	bl	80027e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 800182c:	2008      	movs	r0, #8
 800182e:	f000 ffd9 	bl	80027e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001832:	46c0      	nop			@ (mov r8, r8)
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 800183c:	2380      	movs	r3, #128	@ 0x80
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	0018      	movs	r0, r3
 8001842:	f000 ffcf 	bl	80027e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001846:	46c0      	nop			@ (mov r8, r8)
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001850:	46c0      	nop			@ (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001858:	480d      	ldr	r0, [pc, #52]	@ (8001890 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800185a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800185c:	f7ff fff6 	bl	800184c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001860:	480c      	ldr	r0, [pc, #48]	@ (8001894 <LoopForever+0x6>)
  ldr r1, =_edata
 8001862:	490d      	ldr	r1, [pc, #52]	@ (8001898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001864:	4a0d      	ldr	r2, [pc, #52]	@ (800189c <LoopForever+0xe>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800186c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001876:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001878:	4c0a      	ldr	r4, [pc, #40]	@ (80018a4 <LoopForever+0x16>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001886:	f004 f88b 	bl	80059a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800188a:	f7fe fd13 	bl	80002b4 <main>

0800188e <LoopForever>:

LoopForever:
  b LoopForever
 800188e:	e7fe      	b.n	800188e <LoopForever>
  ldr   r0, =_estack
 8001890:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001898:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 800189c:	08005ab0 	.word	0x08005ab0
  ldr r2, =_sbss
 80018a0:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80018a4:	20000228 	.word	0x20000228

080018a8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018a8:	e7fe      	b.n	80018a8 <ADC1_IRQHandler>
	...

080018ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018b2:	1dfb      	adds	r3, r7, #7
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b8:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <HAL_Init+0x3c>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <HAL_Init+0x3c>)
 80018be:	2180      	movs	r1, #128	@ 0x80
 80018c0:	0049      	lsls	r1, r1, #1
 80018c2:	430a      	orrs	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018c6:	2003      	movs	r0, #3
 80018c8:	f000 f810 	bl	80018ec <HAL_InitTick>
 80018cc:	1e03      	subs	r3, r0, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80018d0:	1dfb      	adds	r3, r7, #7
 80018d2:	2201      	movs	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	e001      	b.n	80018dc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80018d8:	f7ff fdea 	bl	80014b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018dc:	1dfb      	adds	r3, r7, #7
 80018de:	781b      	ldrb	r3, [r3, #0]
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b002      	add	sp, #8
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40022000 	.word	0x40022000

080018ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018f4:	230f      	movs	r3, #15
 80018f6:	18fb      	adds	r3, r7, r3
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80018fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <HAL_InitTick+0x88>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d02b      	beq.n	800195c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001904:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <HAL_InitTick+0x8c>)
 8001906:	681c      	ldr	r4, [r3, #0]
 8001908:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <HAL_InitTick+0x88>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	0019      	movs	r1, r3
 800190e:	23fa      	movs	r3, #250	@ 0xfa
 8001910:	0098      	lsls	r0, r3, #2
 8001912:	f7fe fbf7 	bl	8000104 <__udivsi3>
 8001916:	0003      	movs	r3, r0
 8001918:	0019      	movs	r1, r3
 800191a:	0020      	movs	r0, r4
 800191c:	f7fe fbf2 	bl	8000104 <__udivsi3>
 8001920:	0003      	movs	r3, r0
 8001922:	0018      	movs	r0, r3
 8001924:	f000 fd97 	bl	8002456 <HAL_SYSTICK_Config>
 8001928:	1e03      	subs	r3, r0, #0
 800192a:	d112      	bne.n	8001952 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b03      	cmp	r3, #3
 8001930:	d80a      	bhi.n	8001948 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	2301      	movs	r3, #1
 8001936:	425b      	negs	r3, r3
 8001938:	2200      	movs	r2, #0
 800193a:	0018      	movs	r0, r3
 800193c:	f000 fd66 	bl	800240c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001940:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <HAL_InitTick+0x90>)
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	e00d      	b.n	8001964 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001948:	230f      	movs	r3, #15
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
 8001950:	e008      	b.n	8001964 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001952:	230f      	movs	r3, #15
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	e003      	b.n	8001964 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800195c:	230f      	movs	r3, #15
 800195e:	18fb      	adds	r3, r7, r3
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001964:	230f      	movs	r3, #15
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	781b      	ldrb	r3, [r3, #0]
}
 800196a:	0018      	movs	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	b005      	add	sp, #20
 8001970:	bd90      	pop	{r4, r7, pc}
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	2000004c 	.word	0x2000004c
 8001978:	20000044 	.word	0x20000044
 800197c:	20000048 	.word	0x20000048

08001980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001984:	4b05      	ldr	r3, [pc, #20]	@ (800199c <HAL_IncTick+0x1c>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	001a      	movs	r2, r3
 800198a:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <HAL_IncTick+0x20>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	18d2      	adds	r2, r2, r3
 8001990:	4b03      	ldr	r3, [pc, #12]	@ (80019a0 <HAL_IncTick+0x20>)
 8001992:	601a      	str	r2, [r3, #0]
}
 8001994:	46c0      	nop			@ (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	2000004c 	.word	0x2000004c
 80019a0:	20000224 	.word	0x20000224

080019a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  return uwTick;
 80019a8:	4b02      	ldr	r3, [pc, #8]	@ (80019b4 <HAL_GetTick+0x10>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	0018      	movs	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	46c0      	nop			@ (mov r8, r8)
 80019b4:	20000224 	.word	0x20000224

080019b8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a05      	ldr	r2, [pc, #20]	@ (80019dc <LL_ADC_SetCommonPathInternalCh+0x24>)
 80019c8:	401a      	ands	r2, r3
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	601a      	str	r2, [r3, #0]
}
 80019d2:	46c0      	nop			@ (mov r8, r8)
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b002      	add	sp, #8
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	fe3fffff 	.word	0xfe3fffff

080019e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	23e0      	movs	r3, #224	@ 0xe0
 80019ee:	045b      	lsls	r3, r3, #17
 80019f0:	4013      	ands	r3, r2
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b002      	add	sp, #8
 80019f8:	bd80      	pop	{r7, pc}

080019fa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	2104      	movs	r1, #4
 8001a0e:	400a      	ands	r2, r1
 8001a10:	2107      	movs	r1, #7
 8001a12:	4091      	lsls	r1, r2
 8001a14:	000a      	movs	r2, r1
 8001a16:	43d2      	mvns	r2, r2
 8001a18:	401a      	ands	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2104      	movs	r1, #4
 8001a1e:	400b      	ands	r3, r1
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	4099      	lsls	r1, r3
 8001a24:	000b      	movs	r3, r1
 8001a26:	431a      	orrs	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001a2c:	46c0      	nop			@ (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b004      	add	sp, #16
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	2104      	movs	r1, #4
 8001a46:	400a      	ands	r2, r1
 8001a48:	2107      	movs	r1, #7
 8001a4a:	4091      	lsls	r1, r2
 8001a4c:	000a      	movs	r2, r1
 8001a4e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2104      	movs	r1, #4
 8001a54:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001a56:	40da      	lsrs	r2, r3
 8001a58:	0013      	movs	r3, r2
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b084      	sub	sp, #16
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	211f      	movs	r1, #31
 8001a76:	400a      	ands	r2, r1
 8001a78:	210f      	movs	r1, #15
 8001a7a:	4091      	lsls	r1, r2
 8001a7c:	000a      	movs	r2, r1
 8001a7e:	43d2      	mvns	r2, r2
 8001a80:	401a      	ands	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	0e9b      	lsrs	r3, r3, #26
 8001a86:	210f      	movs	r1, #15
 8001a88:	4019      	ands	r1, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	201f      	movs	r0, #31
 8001a8e:	4003      	ands	r3, r0
 8001a90:	4099      	lsls	r1, r3
 8001a92:	000b      	movs	r3, r1
 8001a94:	431a      	orrs	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a9a:	46c0      	nop			@ (mov r8, r8)
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b004      	add	sp, #16
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	035b      	lsls	r3, r3, #13
 8001ab4:	0b5b      	lsrs	r3, r3, #13
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001abc:	46c0      	nop			@ (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b002      	add	sp, #8
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	0352      	lsls	r2, r2, #13
 8001ad6:	0b52      	lsrs	r2, r2, #13
 8001ad8:	43d2      	mvns	r2, r2
 8001ada:	401a      	ands	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ae0:	46c0      	nop			@ (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	0212      	lsls	r2, r2, #8
 8001afc:	43d2      	mvns	r2, r2
 8001afe:	401a      	ands	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	400b      	ands	r3, r1
 8001b08:	4904      	ldr	r1, [pc, #16]	@ (8001b1c <LL_ADC_SetChannelSamplingTime+0x34>)
 8001b0a:	400b      	ands	r3, r1
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001b12:	46c0      	nop			@ (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b004      	add	sp, #16
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	46c0      	nop			@ (mov r8, r8)
 8001b1c:	07ffff00 	.word	0x07ffff00

08001b20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	4a05      	ldr	r2, [pc, #20]	@ (8001b44 <LL_ADC_EnableInternalRegulator+0x24>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2280      	movs	r2, #128	@ 0x80
 8001b32:	0552      	lsls	r2, r2, #21
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b3a:	46c0      	nop			@ (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b002      	add	sp, #8
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	46c0      	nop			@ (mov r8, r8)
 8001b44:	6fffffe8 	.word	0x6fffffe8

08001b48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	2380      	movs	r3, #128	@ 0x80
 8001b56:	055b      	lsls	r3, r3, #21
 8001b58:	401a      	ands	r2, r3
 8001b5a:	2380      	movs	r3, #128	@ 0x80
 8001b5c:	055b      	lsls	r3, r3, #21
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d101      	bne.n	8001b66 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	0018      	movs	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b002      	add	sp, #8
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <LL_ADC_IsEnabled+0x18>
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <LL_ADC_IsEnabled+0x1a>
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b002      	add	sp, #8
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d101      	bne.n	8001baa <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b002      	add	sp, #8
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bbc:	231f      	movs	r3, #31
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e17f      	b.n	8001eda <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10a      	bne.n	8001bf8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	0018      	movs	r0, r3
 8001be6:	f7ff fc87 	bl	80014f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2254      	movs	r2, #84	@ 0x54
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f7ff ffa3 	bl	8001b48 <LL_ADC_IsInternalRegulatorEnabled>
 8001c02:	1e03      	subs	r3, r0, #0
 8001c04:	d115      	bne.n	8001c32 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f7ff ff88 	bl	8001b20 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c10:	4bb4      	ldr	r3, [pc, #720]	@ (8001ee4 <HAL_ADC_Init+0x330>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	49b4      	ldr	r1, [pc, #720]	@ (8001ee8 <HAL_ADC_Init+0x334>)
 8001c16:	0018      	movs	r0, r3
 8001c18:	f7fe fa74 	bl	8000104 <__udivsi3>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	3301      	adds	r3, #1
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c24:	e002      	b.n	8001c2c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f9      	bne.n	8001c26 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	0018      	movs	r0, r3
 8001c38:	f7ff ff86 	bl	8001b48 <LL_ADC_IsInternalRegulatorEnabled>
 8001c3c:	1e03      	subs	r3, r0, #0
 8001c3e:	d10f      	bne.n	8001c60 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c44:	2210      	movs	r2, #16
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c50:	2201      	movs	r2, #1
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c58:	231f      	movs	r3, #31
 8001c5a:	18fb      	adds	r3, r7, r3
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	0018      	movs	r0, r3
 8001c66:	f7ff ff94 	bl	8001b92 <LL_ADC_REG_IsConversionOngoing>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c72:	2210      	movs	r2, #16
 8001c74:	4013      	ands	r3, r2
 8001c76:	d000      	beq.n	8001c7a <HAL_ADC_Init+0xc6>
 8001c78:	e122      	b.n	8001ec0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d000      	beq.n	8001c82 <HAL_ADC_Init+0xce>
 8001c80:	e11e      	b.n	8001ec0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c86:	4a99      	ldr	r2, [pc, #612]	@ (8001eec <HAL_ADC_Init+0x338>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	0018      	movs	r0, r3
 8001c98:	f7ff ff6a 	bl	8001b70 <LL_ADC_IsEnabled>
 8001c9c:	1e03      	subs	r3, r0, #0
 8001c9e:	d000      	beq.n	8001ca2 <HAL_ADC_Init+0xee>
 8001ca0:	e0ad      	b.n	8001dfe <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	7e1b      	ldrb	r3, [r3, #24]
 8001caa:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001cac:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	7e5b      	ldrb	r3, [r3, #25]
 8001cb2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001cb4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7e9b      	ldrb	r3, [r3, #26]
 8001cba:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001cbc:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <HAL_ADC_Init+0x118>
 8001cc6:	2380      	movs	r3, #128	@ 0x80
 8001cc8:	015b      	lsls	r3, r3, #5
 8001cca:	e000      	b.n	8001cce <HAL_ADC_Init+0x11a>
 8001ccc:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001cce:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001cd4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	da04      	bge.n	8001ce8 <HAL_ADC_Init+0x134>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	085b      	lsrs	r3, r3, #1
 8001ce6:	e001      	b.n	8001cec <HAL_ADC_Init+0x138>
 8001ce8:	2380      	movs	r3, #128	@ 0x80
 8001cea:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001cec:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	212c      	movs	r1, #44	@ 0x2c
 8001cf2:	5c5b      	ldrb	r3, [r3, r1]
 8001cf4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001cf6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2220      	movs	r2, #32
 8001d02:	5c9b      	ldrb	r3, [r3, r2]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d115      	bne.n	8001d34 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	7e9b      	ldrb	r3, [r3, #26]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d105      	bne.n	8001d1c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2280      	movs	r2, #128	@ 0x80
 8001d14:	0252      	lsls	r2, r2, #9
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	e00b      	b.n	8001d34 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d20:	2220      	movs	r2, #32
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00a      	beq.n	8001d52 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d40:	23e0      	movs	r3, #224	@ 0xe0
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4a65      	ldr	r2, [pc, #404]	@ (8001ef0 <HAL_ADC_Init+0x33c>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	0f9b      	lsrs	r3, r3, #30
 8001d6e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001d74:	4313      	orrs	r3, r2
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	223c      	movs	r2, #60	@ 0x3c
 8001d80:	5c9b      	ldrb	r3, [r3, r2]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d111      	bne.n	8001daa <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	0f9b      	lsrs	r3, r3, #30
 8001d8c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001d92:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001d98:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001d9e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	2201      	movs	r2, #1
 8001da6:	4313      	orrs	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	4a50      	ldr	r2, [pc, #320]	@ (8001ef4 <HAL_ADC_Init+0x340>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	0019      	movs	r1, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	23c0      	movs	r3, #192	@ 0xc0
 8001dc6:	061b      	lsls	r3, r3, #24
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d018      	beq.n	8001dfe <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001dd0:	2380      	movs	r3, #128	@ 0x80
 8001dd2:	05db      	lsls	r3, r3, #23
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d012      	beq.n	8001dfe <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001ddc:	2380      	movs	r3, #128	@ 0x80
 8001dde:	061b      	lsls	r3, r3, #24
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d00c      	beq.n	8001dfe <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001de4:	4b44      	ldr	r3, [pc, #272]	@ (8001ef8 <HAL_ADC_Init+0x344>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a44      	ldr	r2, [pc, #272]	@ (8001efc <HAL_ADC_Init+0x348>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	23f0      	movs	r3, #240	@ 0xf0
 8001df4:	039b      	lsls	r3, r3, #14
 8001df6:	401a      	ands	r2, r3
 8001df8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ef8 <HAL_ADC_Init+0x344>)
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e06:	001a      	movs	r2, r3
 8001e08:	2100      	movs	r1, #0
 8001e0a:	f7ff fdf6 	bl	80019fa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e16:	493a      	ldr	r1, [pc, #232]	@ (8001f00 <HAL_ADC_Init+0x34c>)
 8001e18:	001a      	movs	r2, r3
 8001e1a:	f7ff fdee 	bl	80019fa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d109      	bne.n	8001e3a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2110      	movs	r1, #16
 8001e32:	4249      	negs	r1, r1
 8001e34:	430a      	orrs	r2, r1
 8001e36:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e38:	e018      	b.n	8001e6c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691a      	ldr	r2, [r3, #16]
 8001e3e:	2380      	movs	r3, #128	@ 0x80
 8001e40:	039b      	lsls	r3, r3, #14
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d112      	bne.n	8001e6c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	221c      	movs	r2, #28
 8001e56:	4013      	ands	r3, r2
 8001e58:	2210      	movs	r2, #16
 8001e5a:	4252      	negs	r2, r2
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	0011      	movs	r1, r2
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2100      	movs	r1, #0
 8001e72:	0018      	movs	r0, r3
 8001e74:	f7ff fdde 	bl	8001a34 <LL_ADC_GetSamplingTimeCommonChannels>
 8001e78:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d10b      	bne.n	8001e9a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	4393      	bics	r3, r2
 8001e90:	2201      	movs	r2, #1
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001e98:	e01c      	b.n	8001ed4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9e:	2212      	movs	r2, #18
 8001ea0:	4393      	bics	r3, r2
 8001ea2:	2210      	movs	r2, #16
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eae:	2201      	movs	r2, #1
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001eb6:	231f      	movs	r3, #31
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ebe:	e009      	b.n	8001ed4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ecc:	231f      	movs	r3, #31
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001ed4:	231f      	movs	r3, #31
 8001ed6:	18fb      	adds	r3, r7, r3
 8001ed8:	781b      	ldrb	r3, [r3, #0]
}
 8001eda:	0018      	movs	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b008      	add	sp, #32
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			@ (mov r8, r8)
 8001ee4:	20000044 	.word	0x20000044
 8001ee8:	00030d40 	.word	0x00030d40
 8001eec:	fffffefd 	.word	0xfffffefd
 8001ef0:	ffde0201 	.word	0xffde0201
 8001ef4:	1ffffc02 	.word	0x1ffffc02
 8001ef8:	40012708 	.word	0x40012708
 8001efc:	ffc3ffff 	.word	0xffc3ffff
 8001f00:	07ffff04 	.word	0x07ffff04

08001f04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f0e:	2317      	movs	r3, #23
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2254      	movs	r2, #84	@ 0x54
 8001f1e:	5c9b      	ldrb	r3, [r3, r2]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x24>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e1c0      	b.n	80022aa <HAL_ADC_ConfigChannel+0x3a6>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2254      	movs	r2, #84	@ 0x54
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7ff fe2c 	bl	8001b92 <LL_ADC_REG_IsConversionOngoing>
 8001f3a:	1e03      	subs	r3, r0, #0
 8001f3c:	d000      	beq.n	8001f40 <HAL_ADC_ConfigChannel+0x3c>
 8001f3e:	e1a3      	b.n	8002288 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d100      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x46>
 8001f48:	e143      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	2380      	movs	r3, #128	@ 0x80
 8001f50:	061b      	lsls	r3, r3, #24
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d004      	beq.n	8001f60 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f5a:	4ac1      	ldr	r2, [pc, #772]	@ (8002260 <HAL_ADC_ConfigChannel+0x35c>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d108      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	0019      	movs	r1, r3
 8001f6a:	0010      	movs	r0, r2
 8001f6c:	f7ff fd99 	bl	8001aa2 <LL_ADC_REG_SetSequencerChAdd>
 8001f70:	e0c9      	b.n	8002106 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	211f      	movs	r1, #31
 8001f7c:	400b      	ands	r3, r1
 8001f7e:	210f      	movs	r1, #15
 8001f80:	4099      	lsls	r1, r3
 8001f82:	000b      	movs	r3, r1
 8001f84:	43db      	mvns	r3, r3
 8001f86:	4013      	ands	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	035b      	lsls	r3, r3, #13
 8001f90:	0b5b      	lsrs	r3, r3, #13
 8001f92:	d105      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x9c>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	0e9b      	lsrs	r3, r3, #26
 8001f9a:	221f      	movs	r2, #31
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	e098      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1ce>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d000      	beq.n	8001fac <HAL_ADC_ConfigChannel+0xa8>
 8001faa:	e091      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x1cc>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d000      	beq.n	8001fb8 <HAL_ADC_ConfigChannel+0xb4>
 8001fb6:	e089      	b.n	80020cc <HAL_ADC_ConfigChannel+0x1c8>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d000      	beq.n	8001fc4 <HAL_ADC_ConfigChannel+0xc0>
 8001fc2:	e081      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x1c4>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2208      	movs	r2, #8
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d000      	beq.n	8001fd0 <HAL_ADC_ConfigChannel+0xcc>
 8001fce:	e079      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x1c0>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d000      	beq.n	8001fdc <HAL_ADC_ConfigChannel+0xd8>
 8001fda:	e071      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x1bc>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d000      	beq.n	8001fe8 <HAL_ADC_ConfigChannel+0xe4>
 8001fe6:	e069      	b.n	80020bc <HAL_ADC_ConfigChannel+0x1b8>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2240      	movs	r2, #64	@ 0x40
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d000      	beq.n	8001ff4 <HAL_ADC_ConfigChannel+0xf0>
 8001ff2:	e061      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x1b4>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2280      	movs	r2, #128	@ 0x80
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d000      	beq.n	8002000 <HAL_ADC_ConfigChannel+0xfc>
 8001ffe:	e059      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x1b0>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2380      	movs	r3, #128	@ 0x80
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4013      	ands	r3, r2
 800200a:	d151      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x1ac>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2380      	movs	r3, #128	@ 0x80
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4013      	ands	r3, r2
 8002016:	d149      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x1a8>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	@ 0x80
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4013      	ands	r3, r2
 8002022:	d141      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x1a4>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2380      	movs	r3, #128	@ 0x80
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	4013      	ands	r3, r2
 800202e:	d139      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1a0>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	2380      	movs	r3, #128	@ 0x80
 8002036:	015b      	lsls	r3, r3, #5
 8002038:	4013      	ands	r3, r2
 800203a:	d131      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x19c>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	019b      	lsls	r3, r3, #6
 8002044:	4013      	ands	r3, r2
 8002046:	d129      	bne.n	800209c <HAL_ADC_ConfigChannel+0x198>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	2380      	movs	r3, #128	@ 0x80
 800204e:	01db      	lsls	r3, r3, #7
 8002050:	4013      	ands	r3, r2
 8002052:	d121      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x194>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2380      	movs	r3, #128	@ 0x80
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	4013      	ands	r3, r2
 800205e:	d119      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x190>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2380      	movs	r3, #128	@ 0x80
 8002066:	025b      	lsls	r3, r3, #9
 8002068:	4013      	ands	r3, r2
 800206a:	d111      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x18c>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	2380      	movs	r3, #128	@ 0x80
 8002072:	029b      	lsls	r3, r3, #10
 8002074:	4013      	ands	r3, r2
 8002076:	d109      	bne.n	800208c <HAL_ADC_ConfigChannel+0x188>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	2380      	movs	r3, #128	@ 0x80
 800207e:	02db      	lsls	r3, r3, #11
 8002080:	4013      	ands	r3, r2
 8002082:	d001      	beq.n	8002088 <HAL_ADC_ConfigChannel+0x184>
 8002084:	2312      	movs	r3, #18
 8002086:	e024      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1ce>
 8002088:	2300      	movs	r3, #0
 800208a:	e022      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1ce>
 800208c:	2311      	movs	r3, #17
 800208e:	e020      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1ce>
 8002090:	2310      	movs	r3, #16
 8002092:	e01e      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1ce>
 8002094:	230f      	movs	r3, #15
 8002096:	e01c      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1ce>
 8002098:	230e      	movs	r3, #14
 800209a:	e01a      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1ce>
 800209c:	230d      	movs	r3, #13
 800209e:	e018      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1ce>
 80020a0:	230c      	movs	r3, #12
 80020a2:	e016      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1ce>
 80020a4:	230b      	movs	r3, #11
 80020a6:	e014      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1ce>
 80020a8:	230a      	movs	r3, #10
 80020aa:	e012      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1ce>
 80020ac:	2309      	movs	r3, #9
 80020ae:	e010      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1ce>
 80020b0:	2308      	movs	r3, #8
 80020b2:	e00e      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1ce>
 80020b4:	2307      	movs	r3, #7
 80020b6:	e00c      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1ce>
 80020b8:	2306      	movs	r3, #6
 80020ba:	e00a      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1ce>
 80020bc:	2305      	movs	r3, #5
 80020be:	e008      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1ce>
 80020c0:	2304      	movs	r3, #4
 80020c2:	e006      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1ce>
 80020c4:	2303      	movs	r3, #3
 80020c6:	e004      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1ce>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e002      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1ce>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1ce>
 80020d0:	2300      	movs	r3, #0
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	6852      	ldr	r2, [r2, #4]
 80020d6:	201f      	movs	r0, #31
 80020d8:	4002      	ands	r2, r0
 80020da:	4093      	lsls	r3, r2
 80020dc:	000a      	movs	r2, r1
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	089b      	lsrs	r3, r3, #2
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d808      	bhi.n	8002106 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	001a      	movs	r2, r3
 8002102:	f7ff fcae 	bl	8001a62 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	6819      	ldr	r1, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	001a      	movs	r2, r3
 8002114:	f7ff fce8 	bl	8001ae8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	db00      	blt.n	8002122 <HAL_ADC_ConfigChannel+0x21e>
 8002120:	e0bc      	b.n	800229c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002122:	4b50      	ldr	r3, [pc, #320]	@ (8002264 <HAL_ADC_ConfigChannel+0x360>)
 8002124:	0018      	movs	r0, r3
 8002126:	f7ff fc5b 	bl	80019e0 <LL_ADC_GetCommonPathInternalCh>
 800212a:	0003      	movs	r3, r0
 800212c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a4d      	ldr	r2, [pc, #308]	@ (8002268 <HAL_ADC_ConfigChannel+0x364>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d122      	bne.n	800217e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	2380      	movs	r3, #128	@ 0x80
 800213c:	041b      	lsls	r3, r3, #16
 800213e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002140:	d11d      	bne.n	800217e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	2280      	movs	r2, #128	@ 0x80
 8002146:	0412      	lsls	r2, r2, #16
 8002148:	4313      	orrs	r3, r2
 800214a:	4a46      	ldr	r2, [pc, #280]	@ (8002264 <HAL_ADC_ConfigChannel+0x360>)
 800214c:	0019      	movs	r1, r3
 800214e:	0010      	movs	r0, r2
 8002150:	f7ff fc32 	bl	80019b8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002154:	4b45      	ldr	r3, [pc, #276]	@ (800226c <HAL_ADC_ConfigChannel+0x368>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4945      	ldr	r1, [pc, #276]	@ (8002270 <HAL_ADC_ConfigChannel+0x36c>)
 800215a:	0018      	movs	r0, r3
 800215c:	f7fd ffd2 	bl	8000104 <__udivsi3>
 8002160:	0003      	movs	r3, r0
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	0013      	movs	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	189b      	adds	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800216e:	e002      	b.n	8002176 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	3b01      	subs	r3, #1
 8002174:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f9      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800217c:	e08e      	b.n	800229c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a3c      	ldr	r2, [pc, #240]	@ (8002274 <HAL_ADC_ConfigChannel+0x370>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d10e      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	2380      	movs	r3, #128	@ 0x80
 800218c:	045b      	lsls	r3, r3, #17
 800218e:	4013      	ands	r3, r2
 8002190:	d109      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	2280      	movs	r2, #128	@ 0x80
 8002196:	0452      	lsls	r2, r2, #17
 8002198:	4313      	orrs	r3, r2
 800219a:	4a32      	ldr	r2, [pc, #200]	@ (8002264 <HAL_ADC_ConfigChannel+0x360>)
 800219c:	0019      	movs	r1, r3
 800219e:	0010      	movs	r0, r2
 80021a0:	f7ff fc0a 	bl	80019b8 <LL_ADC_SetCommonPathInternalCh>
 80021a4:	e07a      	b.n	800229c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a33      	ldr	r2, [pc, #204]	@ (8002278 <HAL_ADC_ConfigChannel+0x374>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d000      	beq.n	80021b2 <HAL_ADC_ConfigChannel+0x2ae>
 80021b0:	e074      	b.n	800229c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	2380      	movs	r3, #128	@ 0x80
 80021b6:	03db      	lsls	r3, r3, #15
 80021b8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80021ba:	d000      	beq.n	80021be <HAL_ADC_ConfigChannel+0x2ba>
 80021bc:	e06e      	b.n	800229c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2280      	movs	r2, #128	@ 0x80
 80021c2:	03d2      	lsls	r2, r2, #15
 80021c4:	4313      	orrs	r3, r2
 80021c6:	4a27      	ldr	r2, [pc, #156]	@ (8002264 <HAL_ADC_ConfigChannel+0x360>)
 80021c8:	0019      	movs	r1, r3
 80021ca:	0010      	movs	r0, r2
 80021cc:	f7ff fbf4 	bl	80019b8 <LL_ADC_SetCommonPathInternalCh>
 80021d0:	e064      	b.n	800229c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	2380      	movs	r3, #128	@ 0x80
 80021d8:	061b      	lsls	r3, r3, #24
 80021da:	429a      	cmp	r2, r3
 80021dc:	d004      	beq.n	80021e8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80021e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002260 <HAL_ADC_ConfigChannel+0x35c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d107      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0019      	movs	r1, r3
 80021f2:	0010      	movs	r0, r2
 80021f4:	f7ff fc66 	bl	8001ac4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	da4d      	bge.n	800229c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002200:	4b18      	ldr	r3, [pc, #96]	@ (8002264 <HAL_ADC_ConfigChannel+0x360>)
 8002202:	0018      	movs	r0, r3
 8002204:	f7ff fbec 	bl	80019e0 <LL_ADC_GetCommonPathInternalCh>
 8002208:	0003      	movs	r3, r0
 800220a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a15      	ldr	r2, [pc, #84]	@ (8002268 <HAL_ADC_ConfigChannel+0x364>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d108      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4a18      	ldr	r2, [pc, #96]	@ (800227c <HAL_ADC_ConfigChannel+0x378>)
 800221a:	4013      	ands	r3, r2
 800221c:	4a11      	ldr	r2, [pc, #68]	@ (8002264 <HAL_ADC_ConfigChannel+0x360>)
 800221e:	0019      	movs	r1, r3
 8002220:	0010      	movs	r0, r2
 8002222:	f7ff fbc9 	bl	80019b8 <LL_ADC_SetCommonPathInternalCh>
 8002226:	e039      	b.n	800229c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a11      	ldr	r2, [pc, #68]	@ (8002274 <HAL_ADC_ConfigChannel+0x370>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d108      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4a12      	ldr	r2, [pc, #72]	@ (8002280 <HAL_ADC_ConfigChannel+0x37c>)
 8002236:	4013      	ands	r3, r2
 8002238:	4a0a      	ldr	r2, [pc, #40]	@ (8002264 <HAL_ADC_ConfigChannel+0x360>)
 800223a:	0019      	movs	r1, r3
 800223c:	0010      	movs	r0, r2
 800223e:	f7ff fbbb 	bl	80019b8 <LL_ADC_SetCommonPathInternalCh>
 8002242:	e02b      	b.n	800229c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0b      	ldr	r2, [pc, #44]	@ (8002278 <HAL_ADC_ConfigChannel+0x374>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d126      	bne.n	800229c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4a0c      	ldr	r2, [pc, #48]	@ (8002284 <HAL_ADC_ConfigChannel+0x380>)
 8002252:	4013      	ands	r3, r2
 8002254:	4a03      	ldr	r2, [pc, #12]	@ (8002264 <HAL_ADC_ConfigChannel+0x360>)
 8002256:	0019      	movs	r1, r3
 8002258:	0010      	movs	r0, r2
 800225a:	f7ff fbad 	bl	80019b8 <LL_ADC_SetCommonPathInternalCh>
 800225e:	e01d      	b.n	800229c <HAL_ADC_ConfigChannel+0x398>
 8002260:	80000004 	.word	0x80000004
 8002264:	40012708 	.word	0x40012708
 8002268:	b0001000 	.word	0xb0001000
 800226c:	20000044 	.word	0x20000044
 8002270:	00030d40 	.word	0x00030d40
 8002274:	b8004000 	.word	0xb8004000
 8002278:	b4002000 	.word	0xb4002000
 800227c:	ff7fffff 	.word	0xff7fffff
 8002280:	feffffff 	.word	0xfeffffff
 8002284:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228c:	2220      	movs	r2, #32
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002294:	2317      	movs	r3, #23
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2254      	movs	r2, #84	@ 0x54
 80022a0:	2100      	movs	r1, #0
 80022a2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80022a4:	2317      	movs	r3, #23
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	781b      	ldrb	r3, [r3, #0]
}
 80022aa:	0018      	movs	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b006      	add	sp, #24
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			@ (mov r8, r8)

080022b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	0002      	movs	r2, r0
 80022bc:	1dfb      	adds	r3, r7, #7
 80022be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022c0:	1dfb      	adds	r3, r7, #7
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80022c6:	d809      	bhi.n	80022dc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022c8:	1dfb      	adds	r3, r7, #7
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	001a      	movs	r2, r3
 80022ce:	231f      	movs	r3, #31
 80022d0:	401a      	ands	r2, r3
 80022d2:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <__NVIC_EnableIRQ+0x30>)
 80022d4:	2101      	movs	r1, #1
 80022d6:	4091      	lsls	r1, r2
 80022d8:	000a      	movs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80022dc:	46c0      	nop			@ (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b002      	add	sp, #8
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	e000e100 	.word	0xe000e100

080022e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	0002      	movs	r2, r0
 80022f0:	6039      	str	r1, [r7, #0]
 80022f2:	1dfb      	adds	r3, r7, #7
 80022f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022f6:	1dfb      	adds	r3, r7, #7
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80022fc:	d828      	bhi.n	8002350 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022fe:	4a2f      	ldr	r2, [pc, #188]	@ (80023bc <__NVIC_SetPriority+0xd4>)
 8002300:	1dfb      	adds	r3, r7, #7
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	b25b      	sxtb	r3, r3
 8002306:	089b      	lsrs	r3, r3, #2
 8002308:	33c0      	adds	r3, #192	@ 0xc0
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	589b      	ldr	r3, [r3, r2]
 800230e:	1dfa      	adds	r2, r7, #7
 8002310:	7812      	ldrb	r2, [r2, #0]
 8002312:	0011      	movs	r1, r2
 8002314:	2203      	movs	r2, #3
 8002316:	400a      	ands	r2, r1
 8002318:	00d2      	lsls	r2, r2, #3
 800231a:	21ff      	movs	r1, #255	@ 0xff
 800231c:	4091      	lsls	r1, r2
 800231e:	000a      	movs	r2, r1
 8002320:	43d2      	mvns	r2, r2
 8002322:	401a      	ands	r2, r3
 8002324:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	019b      	lsls	r3, r3, #6
 800232a:	22ff      	movs	r2, #255	@ 0xff
 800232c:	401a      	ands	r2, r3
 800232e:	1dfb      	adds	r3, r7, #7
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	0018      	movs	r0, r3
 8002334:	2303      	movs	r3, #3
 8002336:	4003      	ands	r3, r0
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800233c:	481f      	ldr	r0, [pc, #124]	@ (80023bc <__NVIC_SetPriority+0xd4>)
 800233e:	1dfb      	adds	r3, r7, #7
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	b25b      	sxtb	r3, r3
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	430a      	orrs	r2, r1
 8002348:	33c0      	adds	r3, #192	@ 0xc0
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800234e:	e031      	b.n	80023b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002350:	4a1b      	ldr	r2, [pc, #108]	@ (80023c0 <__NVIC_SetPriority+0xd8>)
 8002352:	1dfb      	adds	r3, r7, #7
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	0019      	movs	r1, r3
 8002358:	230f      	movs	r3, #15
 800235a:	400b      	ands	r3, r1
 800235c:	3b08      	subs	r3, #8
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	3306      	adds	r3, #6
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	18d3      	adds	r3, r2, r3
 8002366:	3304      	adds	r3, #4
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	1dfa      	adds	r2, r7, #7
 800236c:	7812      	ldrb	r2, [r2, #0]
 800236e:	0011      	movs	r1, r2
 8002370:	2203      	movs	r2, #3
 8002372:	400a      	ands	r2, r1
 8002374:	00d2      	lsls	r2, r2, #3
 8002376:	21ff      	movs	r1, #255	@ 0xff
 8002378:	4091      	lsls	r1, r2
 800237a:	000a      	movs	r2, r1
 800237c:	43d2      	mvns	r2, r2
 800237e:	401a      	ands	r2, r3
 8002380:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	019b      	lsls	r3, r3, #6
 8002386:	22ff      	movs	r2, #255	@ 0xff
 8002388:	401a      	ands	r2, r3
 800238a:	1dfb      	adds	r3, r7, #7
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	0018      	movs	r0, r3
 8002390:	2303      	movs	r3, #3
 8002392:	4003      	ands	r3, r0
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002398:	4809      	ldr	r0, [pc, #36]	@ (80023c0 <__NVIC_SetPriority+0xd8>)
 800239a:	1dfb      	adds	r3, r7, #7
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	001c      	movs	r4, r3
 80023a0:	230f      	movs	r3, #15
 80023a2:	4023      	ands	r3, r4
 80023a4:	3b08      	subs	r3, #8
 80023a6:	089b      	lsrs	r3, r3, #2
 80023a8:	430a      	orrs	r2, r1
 80023aa:	3306      	adds	r3, #6
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	18c3      	adds	r3, r0, r3
 80023b0:	3304      	adds	r3, #4
 80023b2:	601a      	str	r2, [r3, #0]
}
 80023b4:	46c0      	nop			@ (mov r8, r8)
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b003      	add	sp, #12
 80023ba:	bd90      	pop	{r4, r7, pc}
 80023bc:	e000e100 	.word	0xe000e100
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	1e5a      	subs	r2, r3, #1
 80023d0:	2380      	movs	r3, #128	@ 0x80
 80023d2:	045b      	lsls	r3, r3, #17
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d301      	bcc.n	80023dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d8:	2301      	movs	r3, #1
 80023da:	e010      	b.n	80023fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002408 <SysTick_Config+0x44>)
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	3a01      	subs	r2, #1
 80023e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e4:	2301      	movs	r3, #1
 80023e6:	425b      	negs	r3, r3
 80023e8:	2103      	movs	r1, #3
 80023ea:	0018      	movs	r0, r3
 80023ec:	f7ff ff7c 	bl	80022e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f0:	4b05      	ldr	r3, [pc, #20]	@ (8002408 <SysTick_Config+0x44>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f6:	4b04      	ldr	r3, [pc, #16]	@ (8002408 <SysTick_Config+0x44>)
 80023f8:	2207      	movs	r2, #7
 80023fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	0018      	movs	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	b002      	add	sp, #8
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			@ (mov r8, r8)
 8002408:	e000e010 	.word	0xe000e010

0800240c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	210f      	movs	r1, #15
 8002418:	187b      	adds	r3, r7, r1
 800241a:	1c02      	adds	r2, r0, #0
 800241c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	187b      	adds	r3, r7, r1
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	b25b      	sxtb	r3, r3
 8002426:	0011      	movs	r1, r2
 8002428:	0018      	movs	r0, r3
 800242a:	f7ff ff5d 	bl	80022e8 <__NVIC_SetPriority>
}
 800242e:	46c0      	nop			@ (mov r8, r8)
 8002430:	46bd      	mov	sp, r7
 8002432:	b004      	add	sp, #16
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	0002      	movs	r2, r0
 800243e:	1dfb      	adds	r3, r7, #7
 8002440:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002442:	1dfb      	adds	r3, r7, #7
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	b25b      	sxtb	r3, r3
 8002448:	0018      	movs	r0, r3
 800244a:	f7ff ff33 	bl	80022b4 <__NVIC_EnableIRQ>
}
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	46bd      	mov	sp, r7
 8002452:	b002      	add	sp, #8
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	0018      	movs	r0, r3
 8002462:	f7ff ffaf 	bl	80023c4 <SysTick_Config>
 8002466:	0003      	movs	r3, r0
}
 8002468:	0018      	movs	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	b002      	add	sp, #8
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800247e:	e147      	b.n	8002710 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2101      	movs	r1, #1
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4091      	lsls	r1, r2
 800248a:	000a      	movs	r2, r1
 800248c:	4013      	ands	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d100      	bne.n	8002498 <HAL_GPIO_Init+0x28>
 8002496:	e138      	b.n	800270a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2203      	movs	r2, #3
 800249e:	4013      	ands	r3, r2
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d005      	beq.n	80024b0 <HAL_GPIO_Init+0x40>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2203      	movs	r2, #3
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d130      	bne.n	8002512 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	2203      	movs	r2, #3
 80024bc:	409a      	lsls	r2, r3
 80024be:	0013      	movs	r3, r2
 80024c0:	43da      	mvns	r2, r3
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	409a      	lsls	r2, r3
 80024d2:	0013      	movs	r3, r2
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024e6:	2201      	movs	r2, #1
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	409a      	lsls	r2, r3
 80024ec:	0013      	movs	r3, r2
 80024ee:	43da      	mvns	r2, r3
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	091b      	lsrs	r3, r3, #4
 80024fc:	2201      	movs	r2, #1
 80024fe:	401a      	ands	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	409a      	lsls	r2, r3
 8002504:	0013      	movs	r3, r2
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2203      	movs	r2, #3
 8002518:	4013      	ands	r3, r2
 800251a:	2b03      	cmp	r3, #3
 800251c:	d017      	beq.n	800254e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	2203      	movs	r2, #3
 800252a:	409a      	lsls	r2, r3
 800252c:	0013      	movs	r3, r2
 800252e:	43da      	mvns	r2, r3
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	409a      	lsls	r2, r3
 8002540:	0013      	movs	r3, r2
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2203      	movs	r2, #3
 8002554:	4013      	ands	r3, r2
 8002556:	2b02      	cmp	r3, #2
 8002558:	d123      	bne.n	80025a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	08da      	lsrs	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3208      	adds	r2, #8
 8002562:	0092      	lsls	r2, r2, #2
 8002564:	58d3      	ldr	r3, [r2, r3]
 8002566:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2207      	movs	r2, #7
 800256c:	4013      	ands	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	220f      	movs	r2, #15
 8002572:	409a      	lsls	r2, r3
 8002574:	0013      	movs	r3, r2
 8002576:	43da      	mvns	r2, r3
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2107      	movs	r1, #7
 8002586:	400b      	ands	r3, r1
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	409a      	lsls	r2, r3
 800258c:	0013      	movs	r3, r2
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	08da      	lsrs	r2, r3, #3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3208      	adds	r2, #8
 800259c:	0092      	lsls	r2, r2, #2
 800259e:	6939      	ldr	r1, [r7, #16]
 80025a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	2203      	movs	r2, #3
 80025ae:	409a      	lsls	r2, r3
 80025b0:	0013      	movs	r3, r2
 80025b2:	43da      	mvns	r2, r3
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4013      	ands	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2203      	movs	r2, #3
 80025c0:	401a      	ands	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	409a      	lsls	r2, r3
 80025c8:	0013      	movs	r3, r2
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	23c0      	movs	r3, #192	@ 0xc0
 80025dc:	029b      	lsls	r3, r3, #10
 80025de:	4013      	ands	r3, r2
 80025e0:	d100      	bne.n	80025e4 <HAL_GPIO_Init+0x174>
 80025e2:	e092      	b.n	800270a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80025e4:	4a50      	ldr	r2, [pc, #320]	@ (8002728 <HAL_GPIO_Init+0x2b8>)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	3318      	adds	r3, #24
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	589b      	ldr	r3, [r3, r2]
 80025f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2203      	movs	r2, #3
 80025f6:	4013      	ands	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	220f      	movs	r2, #15
 80025fc:	409a      	lsls	r2, r3
 80025fe:	0013      	movs	r3, r2
 8002600:	43da      	mvns	r2, r3
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	23a0      	movs	r3, #160	@ 0xa0
 800260c:	05db      	lsls	r3, r3, #23
 800260e:	429a      	cmp	r2, r3
 8002610:	d013      	beq.n	800263a <HAL_GPIO_Init+0x1ca>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a45      	ldr	r2, [pc, #276]	@ (800272c <HAL_GPIO_Init+0x2bc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00d      	beq.n	8002636 <HAL_GPIO_Init+0x1c6>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a44      	ldr	r2, [pc, #272]	@ (8002730 <HAL_GPIO_Init+0x2c0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <HAL_GPIO_Init+0x1c2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a43      	ldr	r2, [pc, #268]	@ (8002734 <HAL_GPIO_Init+0x2c4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d101      	bne.n	800262e <HAL_GPIO_Init+0x1be>
 800262a:	2303      	movs	r3, #3
 800262c:	e006      	b.n	800263c <HAL_GPIO_Init+0x1cc>
 800262e:	2305      	movs	r3, #5
 8002630:	e004      	b.n	800263c <HAL_GPIO_Init+0x1cc>
 8002632:	2302      	movs	r3, #2
 8002634:	e002      	b.n	800263c <HAL_GPIO_Init+0x1cc>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <HAL_GPIO_Init+0x1cc>
 800263a:	2300      	movs	r3, #0
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	2103      	movs	r1, #3
 8002640:	400a      	ands	r2, r1
 8002642:	00d2      	lsls	r2, r2, #3
 8002644:	4093      	lsls	r3, r2
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800264c:	4936      	ldr	r1, [pc, #216]	@ (8002728 <HAL_GPIO_Init+0x2b8>)
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	089b      	lsrs	r3, r3, #2
 8002652:	3318      	adds	r3, #24
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800265a:	4b33      	ldr	r3, [pc, #204]	@ (8002728 <HAL_GPIO_Init+0x2b8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	43da      	mvns	r2, r3
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	2380      	movs	r3, #128	@ 0x80
 8002670:	035b      	lsls	r3, r3, #13
 8002672:	4013      	ands	r3, r2
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800267e:	4b2a      	ldr	r3, [pc, #168]	@ (8002728 <HAL_GPIO_Init+0x2b8>)
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002684:	4b28      	ldr	r3, [pc, #160]	@ (8002728 <HAL_GPIO_Init+0x2b8>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	43da      	mvns	r2, r3
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	2380      	movs	r3, #128	@ 0x80
 800269a:	039b      	lsls	r3, r3, #14
 800269c:	4013      	ands	r3, r2
 800269e:	d003      	beq.n	80026a8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002728 <HAL_GPIO_Init+0x2b8>)
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002728 <HAL_GPIO_Init+0x2b8>)
 80026b0:	2384      	movs	r3, #132	@ 0x84
 80026b2:	58d3      	ldr	r3, [r2, r3]
 80026b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	43da      	mvns	r2, r3
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	2380      	movs	r3, #128	@ 0x80
 80026c6:	029b      	lsls	r3, r3, #10
 80026c8:	4013      	ands	r3, r2
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026d4:	4914      	ldr	r1, [pc, #80]	@ (8002728 <HAL_GPIO_Init+0x2b8>)
 80026d6:	2284      	movs	r2, #132	@ 0x84
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80026dc:	4a12      	ldr	r2, [pc, #72]	@ (8002728 <HAL_GPIO_Init+0x2b8>)
 80026de:	2380      	movs	r3, #128	@ 0x80
 80026e0:	58d3      	ldr	r3, [r2, r3]
 80026e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	43da      	mvns	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4013      	ands	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	2380      	movs	r3, #128	@ 0x80
 80026f4:	025b      	lsls	r3, r3, #9
 80026f6:	4013      	ands	r3, r2
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4313      	orrs	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002702:	4909      	ldr	r1, [pc, #36]	@ (8002728 <HAL_GPIO_Init+0x2b8>)
 8002704:	2280      	movs	r2, #128	@ 0x80
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	3301      	adds	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	40da      	lsrs	r2, r3
 8002718:	1e13      	subs	r3, r2, #0
 800271a:	d000      	beq.n	800271e <HAL_GPIO_Init+0x2ae>
 800271c:	e6b0      	b.n	8002480 <HAL_GPIO_Init+0x10>
  }
}
 800271e:	46c0      	nop			@ (mov r8, r8)
 8002720:	46c0      	nop			@ (mov r8, r8)
 8002722:	46bd      	mov	sp, r7
 8002724:	b006      	add	sp, #24
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021800 	.word	0x40021800
 800272c:	50000400 	.word	0x50000400
 8002730:	50000800 	.word	0x50000800
 8002734:	50000c00 	.word	0x50000c00

08002738 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	000a      	movs	r2, r1
 8002742:	1cbb      	adds	r3, r7, #2
 8002744:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	1cba      	adds	r2, r7, #2
 800274c:	8812      	ldrh	r2, [r2, #0]
 800274e:	4013      	ands	r3, r2
 8002750:	d004      	beq.n	800275c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002752:	230f      	movs	r3, #15
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	e003      	b.n	8002764 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800275c:	230f      	movs	r3, #15
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002764:	230f      	movs	r3, #15
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	781b      	ldrb	r3, [r3, #0]
}
 800276a:	0018      	movs	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	b004      	add	sp, #16
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	0008      	movs	r0, r1
 800277c:	0011      	movs	r1, r2
 800277e:	1cbb      	adds	r3, r7, #2
 8002780:	1c02      	adds	r2, r0, #0
 8002782:	801a      	strh	r2, [r3, #0]
 8002784:	1c7b      	adds	r3, r7, #1
 8002786:	1c0a      	adds	r2, r1, #0
 8002788:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800278a:	1c7b      	adds	r3, r7, #1
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d004      	beq.n	800279c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002792:	1cbb      	adds	r3, r7, #2
 8002794:	881a      	ldrh	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800279a:	e003      	b.n	80027a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800279c:	1cbb      	adds	r3, r7, #2
 800279e:	881a      	ldrh	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027a4:	46c0      	nop			@ (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b002      	add	sp, #8
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	000a      	movs	r2, r1
 80027b6:	1cbb      	adds	r3, r7, #2
 80027b8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027c0:	1cbb      	adds	r3, r7, #2
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4013      	ands	r3, r2
 80027c8:	041a      	lsls	r2, r3, #16
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	1cb9      	adds	r1, r7, #2
 80027d0:	8809      	ldrh	r1, [r1, #0]
 80027d2:	400b      	ands	r3, r1
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	619a      	str	r2, [r3, #24]
}
 80027da:	46c0      	nop			@ (mov r8, r8)
 80027dc:	46bd      	mov	sp, r7
 80027de:	b004      	add	sp, #16
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	0002      	movs	r2, r0
 80027ec:	1dbb      	adds	r3, r7, #6
 80027ee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80027f0:	4b10      	ldr	r3, [pc, #64]	@ (8002834 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	1dba      	adds	r2, r7, #6
 80027f6:	8812      	ldrh	r2, [r2, #0]
 80027f8:	4013      	ands	r3, r2
 80027fa:	d008      	beq.n	800280e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80027fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002834 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027fe:	1dba      	adds	r2, r7, #6
 8002800:	8812      	ldrh	r2, [r2, #0]
 8002802:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002804:	1dbb      	adds	r3, r7, #6
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	0018      	movs	r0, r3
 800280a:	f000 f815 	bl	8002838 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800280e:	4b09      	ldr	r3, [pc, #36]	@ (8002834 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	1dba      	adds	r2, r7, #6
 8002814:	8812      	ldrh	r2, [r2, #0]
 8002816:	4013      	ands	r3, r2
 8002818:	d008      	beq.n	800282c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800281a:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800281c:	1dba      	adds	r2, r7, #6
 800281e:	8812      	ldrh	r2, [r2, #0]
 8002820:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002822:	1dbb      	adds	r3, r7, #6
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	0018      	movs	r0, r3
 8002828:	f7fe f9a0 	bl	8000b6c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800282c:	46c0      	nop			@ (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	b002      	add	sp, #8
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021800 	.word	0x40021800

08002838 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	0002      	movs	r2, r0
 8002840:	1dbb      	adds	r3, r7, #6
 8002842:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002844:	46c0      	nop			@ (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b002      	add	sp, #8
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e08f      	b.n	800297e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2241      	movs	r2, #65	@ 0x41
 8002862:	5c9b      	ldrb	r3, [r3, r2]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d107      	bne.n	800287a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2240      	movs	r2, #64	@ 0x40
 800286e:	2100      	movs	r1, #0
 8002870:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	0018      	movs	r0, r3
 8002876:	f7fe fe83 	bl	8001580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2241      	movs	r2, #65	@ 0x41
 800287e:	2124      	movs	r1, #36	@ 0x24
 8002880:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2101      	movs	r1, #1
 800288e:	438a      	bics	r2, r1
 8002890:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	493b      	ldr	r1, [pc, #236]	@ (8002988 <HAL_I2C_Init+0x13c>)
 800289c:	400a      	ands	r2, r1
 800289e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4938      	ldr	r1, [pc, #224]	@ (800298c <HAL_I2C_Init+0x140>)
 80028ac:	400a      	ands	r2, r1
 80028ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d108      	bne.n	80028ca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2180      	movs	r1, #128	@ 0x80
 80028c2:	0209      	lsls	r1, r1, #8
 80028c4:	430a      	orrs	r2, r1
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	e007      	b.n	80028da <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2184      	movs	r1, #132	@ 0x84
 80028d4:	0209      	lsls	r1, r1, #8
 80028d6:	430a      	orrs	r2, r1
 80028d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d109      	bne.n	80028f6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2180      	movs	r1, #128	@ 0x80
 80028ee:	0109      	lsls	r1, r1, #4
 80028f0:	430a      	orrs	r2, r1
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	e007      	b.n	8002906 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4923      	ldr	r1, [pc, #140]	@ (8002990 <HAL_I2C_Init+0x144>)
 8002902:	400a      	ands	r2, r1
 8002904:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4920      	ldr	r1, [pc, #128]	@ (8002994 <HAL_I2C_Init+0x148>)
 8002912:	430a      	orrs	r2, r1
 8002914:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	491a      	ldr	r1, [pc, #104]	@ (800298c <HAL_I2C_Init+0x140>)
 8002922:	400a      	ands	r2, r1
 8002924:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	431a      	orrs	r2, r3
 8002930:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69d9      	ldr	r1, [r3, #28]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1a      	ldr	r2, [r3, #32]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2101      	movs	r1, #1
 800295c:	430a      	orrs	r2, r1
 800295e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2241      	movs	r2, #65	@ 0x41
 800296a:	2120      	movs	r1, #32
 800296c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2242      	movs	r2, #66	@ 0x42
 8002978:	2100      	movs	r1, #0
 800297a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	0018      	movs	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	b002      	add	sp, #8
 8002984:	bd80      	pop	{r7, pc}
 8002986:	46c0      	nop			@ (mov r8, r8)
 8002988:	f0ffffff 	.word	0xf0ffffff
 800298c:	ffff7fff 	.word	0xffff7fff
 8002990:	fffff7ff 	.word	0xfffff7ff
 8002994:	02008000 	.word	0x02008000

08002998 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002998:	b590      	push	{r4, r7, lr}
 800299a:	b089      	sub	sp, #36	@ 0x24
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	0008      	movs	r0, r1
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	0019      	movs	r1, r3
 80029a6:	230a      	movs	r3, #10
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	1c02      	adds	r2, r0, #0
 80029ac:	801a      	strh	r2, [r3, #0]
 80029ae:	2308      	movs	r3, #8
 80029b0:	18fb      	adds	r3, r7, r3
 80029b2:	1c0a      	adds	r2, r1, #0
 80029b4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2241      	movs	r2, #65	@ 0x41
 80029ba:	5c9b      	ldrb	r3, [r3, r2]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b20      	cmp	r3, #32
 80029c0:	d000      	beq.n	80029c4 <HAL_I2C_Master_Transmit+0x2c>
 80029c2:	e10a      	b.n	8002bda <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2240      	movs	r2, #64	@ 0x40
 80029c8:	5c9b      	ldrb	r3, [r3, r2]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_I2C_Master_Transmit+0x3a>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e104      	b.n	8002bdc <HAL_I2C_Master_Transmit+0x244>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2240      	movs	r2, #64	@ 0x40
 80029d6:	2101      	movs	r1, #1
 80029d8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029da:	f7fe ffe3 	bl	80019a4 <HAL_GetTick>
 80029de:	0003      	movs	r3, r0
 80029e0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029e2:	2380      	movs	r3, #128	@ 0x80
 80029e4:	0219      	lsls	r1, r3, #8
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	2319      	movs	r3, #25
 80029ee:	2201      	movs	r2, #1
 80029f0:	f000 fa26 	bl	8002e40 <I2C_WaitOnFlagUntilTimeout>
 80029f4:	1e03      	subs	r3, r0, #0
 80029f6:	d001      	beq.n	80029fc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0ef      	b.n	8002bdc <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2241      	movs	r2, #65	@ 0x41
 8002a00:	2121      	movs	r1, #33	@ 0x21
 8002a02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2242      	movs	r2, #66	@ 0x42
 8002a08:	2110      	movs	r1, #16
 8002a0a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2208      	movs	r2, #8
 8002a1c:	18ba      	adds	r2, r7, r2
 8002a1e:	8812      	ldrh	r2, [r2, #0]
 8002a20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2bff      	cmp	r3, #255	@ 0xff
 8002a30:	d906      	bls.n	8002a40 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	22ff      	movs	r2, #255	@ 0xff
 8002a36:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002a38:	2380      	movs	r3, #128	@ 0x80
 8002a3a:	045b      	lsls	r3, r3, #17
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	e007      	b.n	8002a50 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002a4a:	2380      	movs	r3, #128	@ 0x80
 8002a4c:	049b      	lsls	r3, r3, #18
 8002a4e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d027      	beq.n	8002aa8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	781a      	ldrb	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	697c      	ldr	r4, [r7, #20]
 8002a94:	230a      	movs	r3, #10
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	8819      	ldrh	r1, [r3, #0]
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	4b51      	ldr	r3, [pc, #324]	@ (8002be4 <HAL_I2C_Master_Transmit+0x24c>)
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	0023      	movs	r3, r4
 8002aa2:	f000 fc45 	bl	8003330 <I2C_TransferConfig>
 8002aa6:	e06f      	b.n	8002b88 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	697c      	ldr	r4, [r7, #20]
 8002ab0:	230a      	movs	r3, #10
 8002ab2:	18fb      	adds	r3, r7, r3
 8002ab4:	8819      	ldrh	r1, [r3, #0]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	4b4a      	ldr	r3, [pc, #296]	@ (8002be4 <HAL_I2C_Master_Transmit+0x24c>)
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	0023      	movs	r3, r4
 8002abe:	f000 fc37 	bl	8003330 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002ac2:	e061      	b.n	8002b88 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 fa10 	bl	8002ef0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ad0:	1e03      	subs	r3, r0, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e081      	b.n	8002bdc <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002adc:	781a      	ldrb	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d03a      	beq.n	8002b88 <HAL_I2C_Master_Transmit+0x1f0>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d136      	bne.n	8002b88 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	0013      	movs	r3, r2
 8002b24:	2200      	movs	r2, #0
 8002b26:	2180      	movs	r1, #128	@ 0x80
 8002b28:	f000 f98a 	bl	8002e40 <I2C_WaitOnFlagUntilTimeout>
 8002b2c:	1e03      	subs	r3, r0, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e053      	b.n	8002bdc <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2bff      	cmp	r3, #255	@ 0xff
 8002b3c:	d911      	bls.n	8002b62 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	22ff      	movs	r2, #255	@ 0xff
 8002b42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	2380      	movs	r3, #128	@ 0x80
 8002b4c:	045c      	lsls	r4, r3, #17
 8002b4e:	230a      	movs	r3, #10
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	8819      	ldrh	r1, [r3, #0]
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	2300      	movs	r3, #0
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	0023      	movs	r3, r4
 8002b5c:	f000 fbe8 	bl	8003330 <I2C_TransferConfig>
 8002b60:	e012      	b.n	8002b88 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	2380      	movs	r3, #128	@ 0x80
 8002b74:	049c      	lsls	r4, r3, #18
 8002b76:	230a      	movs	r3, #10
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	8819      	ldrh	r1, [r3, #0]
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	0023      	movs	r3, r4
 8002b84:	f000 fbd4 	bl	8003330 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d198      	bne.n	8002ac4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f000 f9ef 	bl	8002f7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b9e:	1e03      	subs	r3, r0, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e01a      	b.n	8002bdc <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2220      	movs	r2, #32
 8002bac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	490b      	ldr	r1, [pc, #44]	@ (8002be8 <HAL_I2C_Master_Transmit+0x250>)
 8002bba:	400a      	ands	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2241      	movs	r2, #65	@ 0x41
 8002bc2:	2120      	movs	r1, #32
 8002bc4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2242      	movs	r2, #66	@ 0x42
 8002bca:	2100      	movs	r1, #0
 8002bcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2240      	movs	r2, #64	@ 0x40
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e000      	b.n	8002bdc <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002bda:	2302      	movs	r3, #2
  }
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b007      	add	sp, #28
 8002be2:	bd90      	pop	{r4, r7, pc}
 8002be4:	80002000 	.word	0x80002000
 8002be8:	fe00e800 	.word	0xfe00e800

08002bec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b089      	sub	sp, #36	@ 0x24
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	0008      	movs	r0, r1
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	230a      	movs	r3, #10
 8002bfc:	18fb      	adds	r3, r7, r3
 8002bfe:	1c02      	adds	r2, r0, #0
 8002c00:	801a      	strh	r2, [r3, #0]
 8002c02:	2308      	movs	r3, #8
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	1c0a      	adds	r2, r1, #0
 8002c08:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2241      	movs	r2, #65	@ 0x41
 8002c0e:	5c9b      	ldrb	r3, [r3, r2]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d000      	beq.n	8002c18 <HAL_I2C_Master_Receive+0x2c>
 8002c16:	e0e8      	b.n	8002dea <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2240      	movs	r2, #64	@ 0x40
 8002c1c:	5c9b      	ldrb	r3, [r3, r2]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_I2C_Master_Receive+0x3a>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e0e2      	b.n	8002dec <HAL_I2C_Master_Receive+0x200>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2240      	movs	r2, #64	@ 0x40
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c2e:	f7fe feb9 	bl	80019a4 <HAL_GetTick>
 8002c32:	0003      	movs	r3, r0
 8002c34:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c36:	2380      	movs	r3, #128	@ 0x80
 8002c38:	0219      	lsls	r1, r3, #8
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	2319      	movs	r3, #25
 8002c42:	2201      	movs	r2, #1
 8002c44:	f000 f8fc 	bl	8002e40 <I2C_WaitOnFlagUntilTimeout>
 8002c48:	1e03      	subs	r3, r0, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0cd      	b.n	8002dec <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2241      	movs	r2, #65	@ 0x41
 8002c54:	2122      	movs	r1, #34	@ 0x22
 8002c56:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2242      	movs	r2, #66	@ 0x42
 8002c5c:	2110      	movs	r1, #16
 8002c5e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2208      	movs	r2, #8
 8002c70:	18ba      	adds	r2, r7, r2
 8002c72:	8812      	ldrh	r2, [r2, #0]
 8002c74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2bff      	cmp	r3, #255	@ 0xff
 8002c84:	d911      	bls.n	8002caa <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	22ff      	movs	r2, #255	@ 0xff
 8002c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	2380      	movs	r3, #128	@ 0x80
 8002c94:	045c      	lsls	r4, r3, #17
 8002c96:	230a      	movs	r3, #10
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	8819      	ldrh	r1, [r3, #0]
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	4b55      	ldr	r3, [pc, #340]	@ (8002df4 <HAL_I2C_Master_Receive+0x208>)
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	0023      	movs	r3, r4
 8002ca4:	f000 fb44 	bl	8003330 <I2C_TransferConfig>
 8002ca8:	e076      	b.n	8002d98 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	2380      	movs	r3, #128	@ 0x80
 8002cbc:	049c      	lsls	r4, r3, #18
 8002cbe:	230a      	movs	r3, #10
 8002cc0:	18fb      	adds	r3, r7, r3
 8002cc2:	8819      	ldrh	r1, [r3, #0]
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	4b4b      	ldr	r3, [pc, #300]	@ (8002df4 <HAL_I2C_Master_Receive+0x208>)
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	0023      	movs	r3, r4
 8002ccc:	f000 fb30 	bl	8003330 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002cd0:	e062      	b.n	8002d98 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f000 f993 	bl	8003004 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cde:	1e03      	subs	r3, r0, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e082      	b.n	8002dec <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d03a      	beq.n	8002d98 <HAL_I2C_Master_Receive+0x1ac>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d136      	bne.n	8002d98 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	0013      	movs	r3, r2
 8002d34:	2200      	movs	r2, #0
 8002d36:	2180      	movs	r1, #128	@ 0x80
 8002d38:	f000 f882 	bl	8002e40 <I2C_WaitOnFlagUntilTimeout>
 8002d3c:	1e03      	subs	r3, r0, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e053      	b.n	8002dec <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2bff      	cmp	r3, #255	@ 0xff
 8002d4c:	d911      	bls.n	8002d72 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	22ff      	movs	r2, #255	@ 0xff
 8002d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	2380      	movs	r3, #128	@ 0x80
 8002d5c:	045c      	lsls	r4, r3, #17
 8002d5e:	230a      	movs	r3, #10
 8002d60:	18fb      	adds	r3, r7, r3
 8002d62:	8819      	ldrh	r1, [r3, #0]
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	2300      	movs	r3, #0
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	0023      	movs	r3, r4
 8002d6c:	f000 fae0 	bl	8003330 <I2C_TransferConfig>
 8002d70:	e012      	b.n	8002d98 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	2380      	movs	r3, #128	@ 0x80
 8002d84:	049c      	lsls	r4, r3, #18
 8002d86:	230a      	movs	r3, #10
 8002d88:	18fb      	adds	r3, r7, r3
 8002d8a:	8819      	ldrh	r1, [r3, #0]
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	0023      	movs	r3, r4
 8002d94:	f000 facc 	bl	8003330 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d197      	bne.n	8002cd2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f000 f8e7 	bl	8002f7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dae:	1e03      	subs	r3, r0, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e01a      	b.n	8002dec <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	490b      	ldr	r1, [pc, #44]	@ (8002df8 <HAL_I2C_Master_Receive+0x20c>)
 8002dca:	400a      	ands	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2241      	movs	r2, #65	@ 0x41
 8002dd2:	2120      	movs	r1, #32
 8002dd4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2242      	movs	r2, #66	@ 0x42
 8002dda:	2100      	movs	r1, #0
 8002ddc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2240      	movs	r2, #64	@ 0x40
 8002de2:	2100      	movs	r1, #0
 8002de4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	e000      	b.n	8002dec <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002dea:	2302      	movs	r3, #2
  }
}
 8002dec:	0018      	movs	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b007      	add	sp, #28
 8002df2:	bd90      	pop	{r4, r7, pc}
 8002df4:	80002400 	.word	0x80002400
 8002df8:	fe00e800 	.word	0xfe00e800

08002dfc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d103      	bne.n	8002e1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	2201      	movs	r2, #1
 8002e22:	4013      	ands	r3, r2
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d007      	beq.n	8002e38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2101      	movs	r1, #1
 8002e34:	430a      	orrs	r2, r1
 8002e36:	619a      	str	r2, [r3, #24]
  }
}
 8002e38:	46c0      	nop			@ (mov r8, r8)
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b002      	add	sp, #8
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	1dfb      	adds	r3, r7, #7
 8002e4e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e50:	e03a      	b.n	8002ec8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	6839      	ldr	r1, [r7, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f000 f971 	bl	8003140 <I2C_IsErrorOccurred>
 8002e5e:	1e03      	subs	r3, r0, #0
 8002e60:	d001      	beq.n	8002e66 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e040      	b.n	8002ee8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	d02d      	beq.n	8002ec8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6c:	f7fe fd9a 	bl	80019a4 <HAL_GetTick>
 8002e70:	0002      	movs	r2, r0
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d302      	bcc.n	8002e82 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d122      	bne.n	8002ec8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	425a      	negs	r2, r3
 8002e92:	4153      	adcs	r3, r2
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	001a      	movs	r2, r3
 8002e98:	1dfb      	adds	r3, r7, #7
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d113      	bne.n	8002ec8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2241      	movs	r2, #65	@ 0x41
 8002eb0:	2120      	movs	r1, #32
 8002eb2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2242      	movs	r2, #66	@ 0x42
 8002eb8:	2100      	movs	r1, #0
 8002eba:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2240      	movs	r2, #64	@ 0x40
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e00f      	b.n	8002ee8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	425a      	negs	r2, r3
 8002ed8:	4153      	adcs	r3, r2
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	001a      	movs	r2, r3
 8002ede:	1dfb      	adds	r3, r7, #7
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d0b5      	beq.n	8002e52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b004      	add	sp, #16
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002efc:	e032      	b.n	8002f64 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	68b9      	ldr	r1, [r7, #8]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	0018      	movs	r0, r3
 8002f06:	f000 f91b 	bl	8003140 <I2C_IsErrorOccurred>
 8002f0a:	1e03      	subs	r3, r0, #0
 8002f0c:	d001      	beq.n	8002f12 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e030      	b.n	8002f74 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	3301      	adds	r3, #1
 8002f16:	d025      	beq.n	8002f64 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f18:	f7fe fd44 	bl	80019a4 <HAL_GetTick>
 8002f1c:	0002      	movs	r2, r0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d302      	bcc.n	8002f2e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d11a      	bne.n	8002f64 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2202      	movs	r2, #2
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d013      	beq.n	8002f64 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f40:	2220      	movs	r2, #32
 8002f42:	431a      	orrs	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2241      	movs	r2, #65	@ 0x41
 8002f4c:	2120      	movs	r1, #32
 8002f4e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2242      	movs	r2, #66	@ 0x42
 8002f54:	2100      	movs	r1, #0
 8002f56:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2240      	movs	r2, #64	@ 0x40
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e007      	b.n	8002f74 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d1c5      	bne.n	8002efe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	0018      	movs	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b004      	add	sp, #16
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f88:	e02f      	b.n	8002fea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 f8d5 	bl	8003140 <I2C_IsErrorOccurred>
 8002f96:	1e03      	subs	r3, r0, #0
 8002f98:	d001      	beq.n	8002f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e02d      	b.n	8002ffa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9e:	f7fe fd01 	bl	80019a4 <HAL_GetTick>
 8002fa2:	0002      	movs	r2, r0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d11a      	bne.n	8002fea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	d013      	beq.n	8002fea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2241      	movs	r2, #65	@ 0x41
 8002fd2:	2120      	movs	r1, #32
 8002fd4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2242      	movs	r2, #66	@ 0x42
 8002fda:	2100      	movs	r1, #0
 8002fdc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2240      	movs	r2, #64	@ 0x40
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e007      	b.n	8002ffa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d1c8      	bne.n	8002f8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b004      	add	sp, #16
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003010:	2317      	movs	r3, #23
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	2200      	movs	r2, #0
 8003016:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003018:	e07b      	b.n	8003112 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	0018      	movs	r0, r3
 8003022:	f000 f88d 	bl	8003140 <I2C_IsErrorOccurred>
 8003026:	1e03      	subs	r3, r0, #0
 8003028:	d003      	beq.n	8003032 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800302a:	2317      	movs	r3, #23
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	2220      	movs	r2, #32
 800303a:	4013      	ands	r3, r2
 800303c:	2b20      	cmp	r3, #32
 800303e:	d140      	bne.n	80030c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003040:	2117      	movs	r1, #23
 8003042:	187b      	adds	r3, r7, r1
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d13b      	bne.n	80030c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	2204      	movs	r2, #4
 8003052:	4013      	ands	r3, r2
 8003054:	2b04      	cmp	r3, #4
 8003056:	d106      	bne.n	8003066 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003060:	187b      	adds	r3, r7, r1
 8003062:	2200      	movs	r2, #0
 8003064:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	2210      	movs	r2, #16
 800306e:	4013      	ands	r3, r2
 8003070:	2b10      	cmp	r3, #16
 8003072:	d123      	bne.n	80030bc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2210      	movs	r2, #16
 800307a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2204      	movs	r2, #4
 8003080:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2220      	movs	r2, #32
 8003088:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4929      	ldr	r1, [pc, #164]	@ (800313c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8003096:	400a      	ands	r2, r1
 8003098:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2241      	movs	r2, #65	@ 0x41
 800309e:	2120      	movs	r1, #32
 80030a0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2242      	movs	r2, #66	@ 0x42
 80030a6:	2100      	movs	r1, #0
 80030a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2240      	movs	r2, #64	@ 0x40
 80030ae:	2100      	movs	r1, #0
 80030b0:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80030b2:	2317      	movs	r3, #23
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	e002      	b.n	80030c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80030c2:	f7fe fc6f 	bl	80019a4 <HAL_GetTick>
 80030c6:	0002      	movs	r2, r0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d302      	bcc.n	80030d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d11c      	bne.n	8003112 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80030d8:	2017      	movs	r0, #23
 80030da:	183b      	adds	r3, r7, r0
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d117      	bne.n	8003112 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2204      	movs	r2, #4
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d010      	beq.n	8003112 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f4:	2220      	movs	r2, #32
 80030f6:	431a      	orrs	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2241      	movs	r2, #65	@ 0x41
 8003100:	2120      	movs	r1, #32
 8003102:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2240      	movs	r2, #64	@ 0x40
 8003108:	2100      	movs	r1, #0
 800310a:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800310c:	183b      	adds	r3, r7, r0
 800310e:	2201      	movs	r2, #1
 8003110:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	2204      	movs	r2, #4
 800311a:	4013      	ands	r3, r2
 800311c:	2b04      	cmp	r3, #4
 800311e:	d005      	beq.n	800312c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003120:	2317      	movs	r3, #23
 8003122:	18fb      	adds	r3, r7, r3
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d100      	bne.n	800312c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800312a:	e776      	b.n	800301a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 800312c:	2317      	movs	r3, #23
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	781b      	ldrb	r3, [r3, #0]
}
 8003132:	0018      	movs	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	b006      	add	sp, #24
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			@ (mov r8, r8)
 800313c:	fe00e800 	.word	0xfe00e800

08003140 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	@ 0x28
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800314c:	2327      	movs	r3, #39	@ 0x27
 800314e:	18fb      	adds	r3, r7, r3
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	2210      	movs	r2, #16
 8003168:	4013      	ands	r3, r2
 800316a:	d100      	bne.n	800316e <I2C_IsErrorOccurred+0x2e>
 800316c:	e079      	b.n	8003262 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2210      	movs	r2, #16
 8003174:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003176:	e057      	b.n	8003228 <I2C_IsErrorOccurred+0xe8>
 8003178:	2227      	movs	r2, #39	@ 0x27
 800317a:	18bb      	adds	r3, r7, r2
 800317c:	18ba      	adds	r2, r7, r2
 800317e:	7812      	ldrb	r2, [r2, #0]
 8003180:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	3301      	adds	r3, #1
 8003186:	d04f      	beq.n	8003228 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003188:	f7fe fc0c 	bl	80019a4 <HAL_GetTick>
 800318c:	0002      	movs	r2, r0
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	429a      	cmp	r2, r3
 8003196:	d302      	bcc.n	800319e <I2C_IsErrorOccurred+0x5e>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d144      	bne.n	8003228 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	2380      	movs	r3, #128	@ 0x80
 80031a6:	01db      	lsls	r3, r3, #7
 80031a8:	4013      	ands	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80031ac:	2013      	movs	r0, #19
 80031ae:	183b      	adds	r3, r7, r0
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	2142      	movs	r1, #66	@ 0x42
 80031b4:	5c52      	ldrb	r2, [r2, r1]
 80031b6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	2380      	movs	r3, #128	@ 0x80
 80031c0:	021b      	lsls	r3, r3, #8
 80031c2:	401a      	ands	r2, r3
 80031c4:	2380      	movs	r3, #128	@ 0x80
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d126      	bne.n	800321a <I2C_IsErrorOccurred+0xda>
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	2380      	movs	r3, #128	@ 0x80
 80031d0:	01db      	lsls	r3, r3, #7
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d021      	beq.n	800321a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80031d6:	183b      	adds	r3, r7, r0
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b20      	cmp	r3, #32
 80031dc:	d01d      	beq.n	800321a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2180      	movs	r1, #128	@ 0x80
 80031ea:	01c9      	lsls	r1, r1, #7
 80031ec:	430a      	orrs	r2, r1
 80031ee:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031f0:	f7fe fbd8 	bl	80019a4 <HAL_GetTick>
 80031f4:	0003      	movs	r3, r0
 80031f6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031f8:	e00f      	b.n	800321a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031fa:	f7fe fbd3 	bl	80019a4 <HAL_GetTick>
 80031fe:	0002      	movs	r2, r0
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b19      	cmp	r3, #25
 8003206:	d908      	bls.n	800321a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	2220      	movs	r2, #32
 800320c:	4313      	orrs	r3, r2
 800320e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003210:	2327      	movs	r3, #39	@ 0x27
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]

              break;
 8003218:	e006      	b.n	8003228 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	2220      	movs	r2, #32
 8003222:	4013      	ands	r3, r2
 8003224:	2b20      	cmp	r3, #32
 8003226:	d1e8      	bne.n	80031fa <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2220      	movs	r2, #32
 8003230:	4013      	ands	r3, r2
 8003232:	2b20      	cmp	r3, #32
 8003234:	d004      	beq.n	8003240 <I2C_IsErrorOccurred+0x100>
 8003236:	2327      	movs	r3, #39	@ 0x27
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d09b      	beq.n	8003178 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003240:	2327      	movs	r3, #39	@ 0x27
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d103      	bne.n	8003252 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2220      	movs	r2, #32
 8003250:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	2204      	movs	r2, #4
 8003256:	4313      	orrs	r3, r2
 8003258:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800325a:	2327      	movs	r3, #39	@ 0x27
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	2201      	movs	r2, #1
 8003260:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	2380      	movs	r3, #128	@ 0x80
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4013      	ands	r3, r2
 8003272:	d00c      	beq.n	800328e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	2201      	movs	r2, #1
 8003278:	4313      	orrs	r3, r2
 800327a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2280      	movs	r2, #128	@ 0x80
 8003282:	0052      	lsls	r2, r2, #1
 8003284:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003286:	2327      	movs	r3, #39	@ 0x27
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	2201      	movs	r2, #1
 800328c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	2380      	movs	r3, #128	@ 0x80
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4013      	ands	r3, r2
 8003296:	d00c      	beq.n	80032b2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	2208      	movs	r2, #8
 800329c:	4313      	orrs	r3, r2
 800329e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2280      	movs	r2, #128	@ 0x80
 80032a6:	00d2      	lsls	r2, r2, #3
 80032a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032aa:	2327      	movs	r3, #39	@ 0x27
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	2201      	movs	r2, #1
 80032b0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	2380      	movs	r3, #128	@ 0x80
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4013      	ands	r3, r2
 80032ba:	d00c      	beq.n	80032d6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	2202      	movs	r2, #2
 80032c0:	4313      	orrs	r3, r2
 80032c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2280      	movs	r2, #128	@ 0x80
 80032ca:	0092      	lsls	r2, r2, #2
 80032cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032ce:	2327      	movs	r3, #39	@ 0x27
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80032d6:	2327      	movs	r3, #39	@ 0x27
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01d      	beq.n	800331c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	0018      	movs	r0, r3
 80032e4:	f7ff fd8a 	bl	8002dfc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	490e      	ldr	r1, [pc, #56]	@ (800332c <I2C_IsErrorOccurred+0x1ec>)
 80032f4:	400a      	ands	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	431a      	orrs	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2241      	movs	r2, #65	@ 0x41
 8003308:	2120      	movs	r1, #32
 800330a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2242      	movs	r2, #66	@ 0x42
 8003310:	2100      	movs	r1, #0
 8003312:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2240      	movs	r2, #64	@ 0x40
 8003318:	2100      	movs	r1, #0
 800331a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800331c:	2327      	movs	r3, #39	@ 0x27
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	781b      	ldrb	r3, [r3, #0]
}
 8003322:	0018      	movs	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	b00a      	add	sp, #40	@ 0x28
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			@ (mov r8, r8)
 800332c:	fe00e800 	.word	0xfe00e800

08003330 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	0008      	movs	r0, r1
 800333a:	0011      	movs	r1, r2
 800333c:	607b      	str	r3, [r7, #4]
 800333e:	240a      	movs	r4, #10
 8003340:	193b      	adds	r3, r7, r4
 8003342:	1c02      	adds	r2, r0, #0
 8003344:	801a      	strh	r2, [r3, #0]
 8003346:	2009      	movs	r0, #9
 8003348:	183b      	adds	r3, r7, r0
 800334a:	1c0a      	adds	r2, r1, #0
 800334c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800334e:	193b      	adds	r3, r7, r4
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	059b      	lsls	r3, r3, #22
 8003354:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003356:	183b      	adds	r3, r7, r0
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	0419      	lsls	r1, r3, #16
 800335c:	23ff      	movs	r3, #255	@ 0xff
 800335e:	041b      	lsls	r3, r3, #16
 8003360:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003362:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800336a:	4313      	orrs	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	085b      	lsrs	r3, r3, #1
 8003370:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800337a:	0d51      	lsrs	r1, r2, #21
 800337c:	2280      	movs	r2, #128	@ 0x80
 800337e:	00d2      	lsls	r2, r2, #3
 8003380:	400a      	ands	r2, r1
 8003382:	4907      	ldr	r1, [pc, #28]	@ (80033a0 <I2C_TransferConfig+0x70>)
 8003384:	430a      	orrs	r2, r1
 8003386:	43d2      	mvns	r2, r2
 8003388:	401a      	ands	r2, r3
 800338a:	0011      	movs	r1, r2
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003396:	46c0      	nop			@ (mov r8, r8)
 8003398:	46bd      	mov	sp, r7
 800339a:	b007      	add	sp, #28
 800339c:	bd90      	pop	{r4, r7, pc}
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	03ff63ff 	.word	0x03ff63ff

080033a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2241      	movs	r2, #65	@ 0x41
 80033b2:	5c9b      	ldrb	r3, [r3, r2]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	d138      	bne.n	800342c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2240      	movs	r2, #64	@ 0x40
 80033be:	5c9b      	ldrb	r3, [r3, r2]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e032      	b.n	800342e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2240      	movs	r2, #64	@ 0x40
 80033cc:	2101      	movs	r1, #1
 80033ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2241      	movs	r2, #65	@ 0x41
 80033d4:	2124      	movs	r1, #36	@ 0x24
 80033d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2101      	movs	r1, #1
 80033e4:	438a      	bics	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4911      	ldr	r1, [pc, #68]	@ (8003438 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80033f4:	400a      	ands	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6819      	ldr	r1, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2101      	movs	r1, #1
 8003414:	430a      	orrs	r2, r1
 8003416:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2241      	movs	r2, #65	@ 0x41
 800341c:	2120      	movs	r1, #32
 800341e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2240      	movs	r2, #64	@ 0x40
 8003424:	2100      	movs	r1, #0
 8003426:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	e000      	b.n	800342e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800342c:	2302      	movs	r3, #2
  }
}
 800342e:	0018      	movs	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	b002      	add	sp, #8
 8003434:	bd80      	pop	{r7, pc}
 8003436:	46c0      	nop			@ (mov r8, r8)
 8003438:	ffffefff 	.word	0xffffefff

0800343c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2241      	movs	r2, #65	@ 0x41
 800344a:	5c9b      	ldrb	r3, [r3, r2]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b20      	cmp	r3, #32
 8003450:	d139      	bne.n	80034c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2240      	movs	r2, #64	@ 0x40
 8003456:	5c9b      	ldrb	r3, [r3, r2]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800345c:	2302      	movs	r3, #2
 800345e:	e033      	b.n	80034c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2240      	movs	r2, #64	@ 0x40
 8003464:	2101      	movs	r1, #1
 8003466:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2241      	movs	r2, #65	@ 0x41
 800346c:	2124      	movs	r1, #36	@ 0x24
 800346e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2101      	movs	r1, #1
 800347c:	438a      	bics	r2, r1
 800347e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4a11      	ldr	r2, [pc, #68]	@ (80034d0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800348c:	4013      	ands	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2101      	movs	r1, #1
 80034ae:	430a      	orrs	r2, r1
 80034b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2241      	movs	r2, #65	@ 0x41
 80034b6:	2120      	movs	r1, #32
 80034b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2240      	movs	r2, #64	@ 0x40
 80034be:	2100      	movs	r1, #0
 80034c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e000      	b.n	80034c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034c6:	2302      	movs	r3, #2
  }
}
 80034c8:	0018      	movs	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b004      	add	sp, #16
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	fffff0ff 	.word	0xfffff0ff

080034d4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034d8:	4b04      	ldr	r3, [pc, #16]	@ (80034ec <HAL_PWR_EnableBkUpAccess+0x18>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4b03      	ldr	r3, [pc, #12]	@ (80034ec <HAL_PWR_EnableBkUpAccess+0x18>)
 80034de:	2180      	movs	r1, #128	@ 0x80
 80034e0:	0049      	lsls	r1, r1, #1
 80034e2:	430a      	orrs	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]
}
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40007000 	.word	0x40007000

080034f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80034f8:	4b19      	ldr	r3, [pc, #100]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a19      	ldr	r2, [pc, #100]	@ (8003564 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80034fe:	4013      	ands	r3, r2
 8003500:	0019      	movs	r1, r3
 8003502:	4b17      	ldr	r3, [pc, #92]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	430a      	orrs	r2, r1
 8003508:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	2380      	movs	r3, #128	@ 0x80
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	429a      	cmp	r2, r3
 8003512:	d11f      	bne.n	8003554 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003514:	4b14      	ldr	r3, [pc, #80]	@ (8003568 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	0013      	movs	r3, r2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	189b      	adds	r3, r3, r2
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	4912      	ldr	r1, [pc, #72]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003522:	0018      	movs	r0, r3
 8003524:	f7fc fdee 	bl	8000104 <__udivsi3>
 8003528:	0003      	movs	r3, r0
 800352a:	3301      	adds	r3, #1
 800352c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800352e:	e008      	b.n	8003542 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	3b01      	subs	r3, #1
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	e001      	b.n	8003542 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e009      	b.n	8003556 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003542:	4b07      	ldr	r3, [pc, #28]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	2380      	movs	r3, #128	@ 0x80
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	401a      	ands	r2, r3
 800354c:	2380      	movs	r3, #128	@ 0x80
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	429a      	cmp	r2, r3
 8003552:	d0ed      	beq.n	8003530 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	0018      	movs	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	b004      	add	sp, #16
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			@ (mov r8, r8)
 8003560:	40007000 	.word	0x40007000
 8003564:	fffff9ff 	.word	0xfffff9ff
 8003568:	20000044 	.word	0x20000044
 800356c:	000f4240 	.word	0x000f4240

08003570 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e2fe      	b.n	8003b80 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2201      	movs	r2, #1
 8003588:	4013      	ands	r3, r2
 800358a:	d100      	bne.n	800358e <HAL_RCC_OscConfig+0x1e>
 800358c:	e07c      	b.n	8003688 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800358e:	4bc3      	ldr	r3, [pc, #780]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2238      	movs	r2, #56	@ 0x38
 8003594:	4013      	ands	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003598:	4bc0      	ldr	r3, [pc, #768]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2203      	movs	r2, #3
 800359e:	4013      	ands	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	2b10      	cmp	r3, #16
 80035a6:	d102      	bne.n	80035ae <HAL_RCC_OscConfig+0x3e>
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d002      	beq.n	80035b4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d10b      	bne.n	80035cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b4:	4bb9      	ldr	r3, [pc, #740]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	2380      	movs	r3, #128	@ 0x80
 80035ba:	029b      	lsls	r3, r3, #10
 80035bc:	4013      	ands	r3, r2
 80035be:	d062      	beq.n	8003686 <HAL_RCC_OscConfig+0x116>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d15e      	bne.n	8003686 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e2d9      	b.n	8003b80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	2380      	movs	r3, #128	@ 0x80
 80035d2:	025b      	lsls	r3, r3, #9
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d107      	bne.n	80035e8 <HAL_RCC_OscConfig+0x78>
 80035d8:	4bb0      	ldr	r3, [pc, #704]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	4baf      	ldr	r3, [pc, #700]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 80035de:	2180      	movs	r1, #128	@ 0x80
 80035e0:	0249      	lsls	r1, r1, #9
 80035e2:	430a      	orrs	r2, r1
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e020      	b.n	800362a <HAL_RCC_OscConfig+0xba>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	23a0      	movs	r3, #160	@ 0xa0
 80035ee:	02db      	lsls	r3, r3, #11
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d10e      	bne.n	8003612 <HAL_RCC_OscConfig+0xa2>
 80035f4:	4ba9      	ldr	r3, [pc, #676]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4ba8      	ldr	r3, [pc, #672]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 80035fa:	2180      	movs	r1, #128	@ 0x80
 80035fc:	02c9      	lsls	r1, r1, #11
 80035fe:	430a      	orrs	r2, r1
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	4ba6      	ldr	r3, [pc, #664]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	4ba5      	ldr	r3, [pc, #660]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003608:	2180      	movs	r1, #128	@ 0x80
 800360a:	0249      	lsls	r1, r1, #9
 800360c:	430a      	orrs	r2, r1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e00b      	b.n	800362a <HAL_RCC_OscConfig+0xba>
 8003612:	4ba2      	ldr	r3, [pc, #648]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4ba1      	ldr	r3, [pc, #644]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003618:	49a1      	ldr	r1, [pc, #644]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 800361a:	400a      	ands	r2, r1
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	4b9f      	ldr	r3, [pc, #636]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4b9e      	ldr	r3, [pc, #632]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003624:	499f      	ldr	r1, [pc, #636]	@ (80038a4 <HAL_RCC_OscConfig+0x334>)
 8003626:	400a      	ands	r2, r1
 8003628:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d014      	beq.n	800365c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003632:	f7fe f9b7 	bl	80019a4 <HAL_GetTick>
 8003636:	0003      	movs	r3, r0
 8003638:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fe f9b2 	bl	80019a4 <HAL_GetTick>
 8003640:	0002      	movs	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	@ 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e298      	b.n	8003b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364e:	4b93      	ldr	r3, [pc, #588]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	2380      	movs	r3, #128	@ 0x80
 8003654:	029b      	lsls	r3, r3, #10
 8003656:	4013      	ands	r3, r2
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0xcc>
 800365a:	e015      	b.n	8003688 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fe f9a2 	bl	80019a4 <HAL_GetTick>
 8003660:	0003      	movs	r3, r0
 8003662:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003666:	f7fe f99d 	bl	80019a4 <HAL_GetTick>
 800366a:	0002      	movs	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b64      	cmp	r3, #100	@ 0x64
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e283      	b.n	8003b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003678:	4b88      	ldr	r3, [pc, #544]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	2380      	movs	r3, #128	@ 0x80
 800367e:	029b      	lsls	r3, r3, #10
 8003680:	4013      	ands	r3, r2
 8003682:	d1f0      	bne.n	8003666 <HAL_RCC_OscConfig+0xf6>
 8003684:	e000      	b.n	8003688 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003686:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2202      	movs	r2, #2
 800368e:	4013      	ands	r3, r2
 8003690:	d100      	bne.n	8003694 <HAL_RCC_OscConfig+0x124>
 8003692:	e099      	b.n	80037c8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003694:	4b81      	ldr	r3, [pc, #516]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2238      	movs	r2, #56	@ 0x38
 800369a:	4013      	ands	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800369e:	4b7f      	ldr	r3, [pc, #508]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	2203      	movs	r2, #3
 80036a4:	4013      	ands	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b10      	cmp	r3, #16
 80036ac:	d102      	bne.n	80036b4 <HAL_RCC_OscConfig+0x144>
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d002      	beq.n	80036ba <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d135      	bne.n	8003726 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036ba:	4b78      	ldr	r3, [pc, #480]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	2380      	movs	r3, #128	@ 0x80
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4013      	ands	r3, r2
 80036c4:	d005      	beq.n	80036d2 <HAL_RCC_OscConfig+0x162>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e256      	b.n	8003b80 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d2:	4b72      	ldr	r3, [pc, #456]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4a74      	ldr	r2, [pc, #464]	@ (80038a8 <HAL_RCC_OscConfig+0x338>)
 80036d8:	4013      	ands	r3, r2
 80036da:	0019      	movs	r1, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	021a      	lsls	r2, r3, #8
 80036e2:	4b6e      	ldr	r3, [pc, #440]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 80036e4:	430a      	orrs	r2, r1
 80036e6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d112      	bne.n	8003714 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80036ee:	4b6b      	ldr	r3, [pc, #428]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a6e      	ldr	r2, [pc, #440]	@ (80038ac <HAL_RCC_OscConfig+0x33c>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	0019      	movs	r1, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	4b67      	ldr	r3, [pc, #412]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 80036fe:	430a      	orrs	r2, r1
 8003700:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003702:	4b66      	ldr	r3, [pc, #408]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	0adb      	lsrs	r3, r3, #11
 8003708:	2207      	movs	r2, #7
 800370a:	4013      	ands	r3, r2
 800370c:	4a68      	ldr	r2, [pc, #416]	@ (80038b0 <HAL_RCC_OscConfig+0x340>)
 800370e:	40da      	lsrs	r2, r3
 8003710:	4b68      	ldr	r3, [pc, #416]	@ (80038b4 <HAL_RCC_OscConfig+0x344>)
 8003712:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003714:	4b68      	ldr	r3, [pc, #416]	@ (80038b8 <HAL_RCC_OscConfig+0x348>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	0018      	movs	r0, r3
 800371a:	f7fe f8e7 	bl	80018ec <HAL_InitTick>
 800371e:	1e03      	subs	r3, r0, #0
 8003720:	d051      	beq.n	80037c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e22c      	b.n	8003b80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d030      	beq.n	8003790 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800372e:	4b5b      	ldr	r3, [pc, #364]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a5e      	ldr	r2, [pc, #376]	@ (80038ac <HAL_RCC_OscConfig+0x33c>)
 8003734:	4013      	ands	r3, r2
 8003736:	0019      	movs	r1, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	4b57      	ldr	r3, [pc, #348]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 800373e:	430a      	orrs	r2, r1
 8003740:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003742:	4b56      	ldr	r3, [pc, #344]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	4b55      	ldr	r3, [pc, #340]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003748:	2180      	movs	r1, #128	@ 0x80
 800374a:	0049      	lsls	r1, r1, #1
 800374c:	430a      	orrs	r2, r1
 800374e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fe f928 	bl	80019a4 <HAL_GetTick>
 8003754:	0003      	movs	r3, r0
 8003756:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800375a:	f7fe f923 	bl	80019a4 <HAL_GetTick>
 800375e:	0002      	movs	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e209      	b.n	8003b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800376c:	4b4b      	ldr	r3, [pc, #300]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	2380      	movs	r3, #128	@ 0x80
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4013      	ands	r3, r2
 8003776:	d0f0      	beq.n	800375a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003778:	4b48      	ldr	r3, [pc, #288]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4a4a      	ldr	r2, [pc, #296]	@ (80038a8 <HAL_RCC_OscConfig+0x338>)
 800377e:	4013      	ands	r3, r2
 8003780:	0019      	movs	r1, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	021a      	lsls	r2, r3, #8
 8003788:	4b44      	ldr	r3, [pc, #272]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	e01b      	b.n	80037c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003790:	4b42      	ldr	r3, [pc, #264]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	4b41      	ldr	r3, [pc, #260]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003796:	4949      	ldr	r1, [pc, #292]	@ (80038bc <HAL_RCC_OscConfig+0x34c>)
 8003798:	400a      	ands	r2, r1
 800379a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7fe f902 	bl	80019a4 <HAL_GetTick>
 80037a0:	0003      	movs	r3, r0
 80037a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a6:	f7fe f8fd 	bl	80019a4 <HAL_GetTick>
 80037aa:	0002      	movs	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e1e3      	b.n	8003b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037b8:	4b38      	ldr	r3, [pc, #224]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	2380      	movs	r3, #128	@ 0x80
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4013      	ands	r3, r2
 80037c2:	d1f0      	bne.n	80037a6 <HAL_RCC_OscConfig+0x236>
 80037c4:	e000      	b.n	80037c8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037c6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2208      	movs	r2, #8
 80037ce:	4013      	ands	r3, r2
 80037d0:	d047      	beq.n	8003862 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80037d2:	4b32      	ldr	r3, [pc, #200]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	2238      	movs	r2, #56	@ 0x38
 80037d8:	4013      	ands	r3, r2
 80037da:	2b18      	cmp	r3, #24
 80037dc:	d10a      	bne.n	80037f4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80037de:	4b2f      	ldr	r3, [pc, #188]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 80037e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e2:	2202      	movs	r2, #2
 80037e4:	4013      	ands	r3, r2
 80037e6:	d03c      	beq.n	8003862 <HAL_RCC_OscConfig+0x2f2>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d138      	bne.n	8003862 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e1c5      	b.n	8003b80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d019      	beq.n	8003830 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80037fc:	4b27      	ldr	r3, [pc, #156]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 80037fe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003800:	4b26      	ldr	r3, [pc, #152]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003802:	2101      	movs	r1, #1
 8003804:	430a      	orrs	r2, r1
 8003806:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fe f8cc 	bl	80019a4 <HAL_GetTick>
 800380c:	0003      	movs	r3, r0
 800380e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003812:	f7fe f8c7 	bl	80019a4 <HAL_GetTick>
 8003816:	0002      	movs	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e1ad      	b.n	8003b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003824:	4b1d      	ldr	r3, [pc, #116]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003828:	2202      	movs	r2, #2
 800382a:	4013      	ands	r3, r2
 800382c:	d0f1      	beq.n	8003812 <HAL_RCC_OscConfig+0x2a2>
 800382e:	e018      	b.n	8003862 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003830:	4b1a      	ldr	r3, [pc, #104]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003832:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003834:	4b19      	ldr	r3, [pc, #100]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003836:	2101      	movs	r1, #1
 8003838:	438a      	bics	r2, r1
 800383a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fe f8b2 	bl	80019a4 <HAL_GetTick>
 8003840:	0003      	movs	r3, r0
 8003842:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003846:	f7fe f8ad 	bl	80019a4 <HAL_GetTick>
 800384a:	0002      	movs	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e193      	b.n	8003b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003858:	4b10      	ldr	r3, [pc, #64]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 800385a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800385c:	2202      	movs	r2, #2
 800385e:	4013      	ands	r3, r2
 8003860:	d1f1      	bne.n	8003846 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2204      	movs	r2, #4
 8003868:	4013      	ands	r3, r2
 800386a:	d100      	bne.n	800386e <HAL_RCC_OscConfig+0x2fe>
 800386c:	e0c6      	b.n	80039fc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800386e:	231f      	movs	r3, #31
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003876:	4b09      	ldr	r3, [pc, #36]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2238      	movs	r2, #56	@ 0x38
 800387c:	4013      	ands	r3, r2
 800387e:	2b20      	cmp	r3, #32
 8003880:	d11e      	bne.n	80038c0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003882:	4b06      	ldr	r3, [pc, #24]	@ (800389c <HAL_RCC_OscConfig+0x32c>)
 8003884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003886:	2202      	movs	r2, #2
 8003888:	4013      	ands	r3, r2
 800388a:	d100      	bne.n	800388e <HAL_RCC_OscConfig+0x31e>
 800388c:	e0b6      	b.n	80039fc <HAL_RCC_OscConfig+0x48c>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d000      	beq.n	8003898 <HAL_RCC_OscConfig+0x328>
 8003896:	e0b1      	b.n	80039fc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e171      	b.n	8003b80 <HAL_RCC_OscConfig+0x610>
 800389c:	40021000 	.word	0x40021000
 80038a0:	fffeffff 	.word	0xfffeffff
 80038a4:	fffbffff 	.word	0xfffbffff
 80038a8:	ffff80ff 	.word	0xffff80ff
 80038ac:	ffffc7ff 	.word	0xffffc7ff
 80038b0:	00f42400 	.word	0x00f42400
 80038b4:	20000044 	.word	0x20000044
 80038b8:	20000048 	.word	0x20000048
 80038bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038c0:	4bb1      	ldr	r3, [pc, #708]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 80038c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038c4:	2380      	movs	r3, #128	@ 0x80
 80038c6:	055b      	lsls	r3, r3, #21
 80038c8:	4013      	ands	r3, r2
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_OscConfig+0x360>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x362>
 80038d0:	2300      	movs	r3, #0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d011      	beq.n	80038fa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80038d6:	4bac      	ldr	r3, [pc, #688]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 80038d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038da:	4bab      	ldr	r3, [pc, #684]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 80038dc:	2180      	movs	r1, #128	@ 0x80
 80038de:	0549      	lsls	r1, r1, #21
 80038e0:	430a      	orrs	r2, r1
 80038e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80038e4:	4ba8      	ldr	r3, [pc, #672]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 80038e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038e8:	2380      	movs	r3, #128	@ 0x80
 80038ea:	055b      	lsls	r3, r3, #21
 80038ec:	4013      	ands	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80038f2:	231f      	movs	r3, #31
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	2201      	movs	r2, #1
 80038f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038fa:	4ba4      	ldr	r3, [pc, #656]	@ (8003b8c <HAL_RCC_OscConfig+0x61c>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	2380      	movs	r3, #128	@ 0x80
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4013      	ands	r3, r2
 8003904:	d11a      	bne.n	800393c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003906:	4ba1      	ldr	r3, [pc, #644]	@ (8003b8c <HAL_RCC_OscConfig+0x61c>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	4ba0      	ldr	r3, [pc, #640]	@ (8003b8c <HAL_RCC_OscConfig+0x61c>)
 800390c:	2180      	movs	r1, #128	@ 0x80
 800390e:	0049      	lsls	r1, r1, #1
 8003910:	430a      	orrs	r2, r1
 8003912:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003914:	f7fe f846 	bl	80019a4 <HAL_GetTick>
 8003918:	0003      	movs	r3, r0
 800391a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391e:	f7fe f841 	bl	80019a4 <HAL_GetTick>
 8003922:	0002      	movs	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e127      	b.n	8003b80 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003930:	4b96      	ldr	r3, [pc, #600]	@ (8003b8c <HAL_RCC_OscConfig+0x61c>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	2380      	movs	r3, #128	@ 0x80
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4013      	ands	r3, r2
 800393a:	d0f0      	beq.n	800391e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d106      	bne.n	8003952 <HAL_RCC_OscConfig+0x3e2>
 8003944:	4b90      	ldr	r3, [pc, #576]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003946:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003948:	4b8f      	ldr	r3, [pc, #572]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 800394a:	2101      	movs	r1, #1
 800394c:	430a      	orrs	r2, r1
 800394e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003950:	e01c      	b.n	800398c <HAL_RCC_OscConfig+0x41c>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b05      	cmp	r3, #5
 8003958:	d10c      	bne.n	8003974 <HAL_RCC_OscConfig+0x404>
 800395a:	4b8b      	ldr	r3, [pc, #556]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 800395c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800395e:	4b8a      	ldr	r3, [pc, #552]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003960:	2104      	movs	r1, #4
 8003962:	430a      	orrs	r2, r1
 8003964:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003966:	4b88      	ldr	r3, [pc, #544]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003968:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800396a:	4b87      	ldr	r3, [pc, #540]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 800396c:	2101      	movs	r1, #1
 800396e:	430a      	orrs	r2, r1
 8003970:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003972:	e00b      	b.n	800398c <HAL_RCC_OscConfig+0x41c>
 8003974:	4b84      	ldr	r3, [pc, #528]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003976:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003978:	4b83      	ldr	r3, [pc, #524]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 800397a:	2101      	movs	r1, #1
 800397c:	438a      	bics	r2, r1
 800397e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003980:	4b81      	ldr	r3, [pc, #516]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003982:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003984:	4b80      	ldr	r3, [pc, #512]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003986:	2104      	movs	r1, #4
 8003988:	438a      	bics	r2, r1
 800398a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d014      	beq.n	80039be <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003994:	f7fe f806 	bl	80019a4 <HAL_GetTick>
 8003998:	0003      	movs	r3, r0
 800399a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800399c:	e009      	b.n	80039b2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399e:	f7fe f801 	bl	80019a4 <HAL_GetTick>
 80039a2:	0002      	movs	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	4a79      	ldr	r2, [pc, #484]	@ (8003b90 <HAL_RCC_OscConfig+0x620>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e0e6      	b.n	8003b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b2:	4b75      	ldr	r3, [pc, #468]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 80039b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b6:	2202      	movs	r2, #2
 80039b8:	4013      	ands	r3, r2
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x42e>
 80039bc:	e013      	b.n	80039e6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039be:	f7fd fff1 	bl	80019a4 <HAL_GetTick>
 80039c2:	0003      	movs	r3, r0
 80039c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039c6:	e009      	b.n	80039dc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c8:	f7fd ffec 	bl	80019a4 <HAL_GetTick>
 80039cc:	0002      	movs	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	4a6f      	ldr	r2, [pc, #444]	@ (8003b90 <HAL_RCC_OscConfig+0x620>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e0d1      	b.n	8003b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 80039de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e0:	2202      	movs	r2, #2
 80039e2:	4013      	ands	r3, r2
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80039e6:	231f      	movs	r3, #31
 80039e8:	18fb      	adds	r3, r7, r3
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d105      	bne.n	80039fc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80039f0:	4b65      	ldr	r3, [pc, #404]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 80039f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039f4:	4b64      	ldr	r3, [pc, #400]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 80039f6:	4967      	ldr	r1, [pc, #412]	@ (8003b94 <HAL_RCC_OscConfig+0x624>)
 80039f8:	400a      	ands	r2, r1
 80039fa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d100      	bne.n	8003a06 <HAL_RCC_OscConfig+0x496>
 8003a04:	e0bb      	b.n	8003b7e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a06:	4b60      	ldr	r3, [pc, #384]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2238      	movs	r2, #56	@ 0x38
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b10      	cmp	r3, #16
 8003a10:	d100      	bne.n	8003a14 <HAL_RCC_OscConfig+0x4a4>
 8003a12:	e07b      	b.n	8003b0c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d156      	bne.n	8003aca <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1c:	4b5a      	ldr	r3, [pc, #360]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b59      	ldr	r3, [pc, #356]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003a22:	495d      	ldr	r1, [pc, #372]	@ (8003b98 <HAL_RCC_OscConfig+0x628>)
 8003a24:	400a      	ands	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7fd ffbc 	bl	80019a4 <HAL_GetTick>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a32:	f7fd ffb7 	bl	80019a4 <HAL_GetTick>
 8003a36:	0002      	movs	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e09d      	b.n	8003b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a44:	4b50      	ldr	r3, [pc, #320]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	2380      	movs	r3, #128	@ 0x80
 8003a4a:	049b      	lsls	r3, r3, #18
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d1f0      	bne.n	8003a32 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a50:	4b4d      	ldr	r3, [pc, #308]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4a51      	ldr	r2, [pc, #324]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	0019      	movs	r1, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1a      	ldr	r2, [r3, #32]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	4b42      	ldr	r3, [pc, #264]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003a80:	430a      	orrs	r2, r1
 8003a82:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a84:	4b40      	ldr	r3, [pc, #256]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	4b3f      	ldr	r3, [pc, #252]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003a8a:	2180      	movs	r1, #128	@ 0x80
 8003a8c:	0449      	lsls	r1, r1, #17
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003a92:	4b3d      	ldr	r3, [pc, #244]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	4b3c      	ldr	r3, [pc, #240]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003a98:	2180      	movs	r1, #128	@ 0x80
 8003a9a:	0549      	lsls	r1, r1, #21
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fd ff80 	bl	80019a4 <HAL_GetTick>
 8003aa4:	0003      	movs	r3, r0
 8003aa6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aaa:	f7fd ff7b 	bl	80019a4 <HAL_GetTick>
 8003aae:	0002      	movs	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e061      	b.n	8003b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003abc:	4b32      	ldr	r3, [pc, #200]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	2380      	movs	r3, #128	@ 0x80
 8003ac2:	049b      	lsls	r3, r3, #18
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x53a>
 8003ac8:	e059      	b.n	8003b7e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aca:	4b2f      	ldr	r3, [pc, #188]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	4b2e      	ldr	r3, [pc, #184]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003ad0:	4931      	ldr	r1, [pc, #196]	@ (8003b98 <HAL_RCC_OscConfig+0x628>)
 8003ad2:	400a      	ands	r2, r1
 8003ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fd ff65 	bl	80019a4 <HAL_GetTick>
 8003ada:	0003      	movs	r3, r0
 8003adc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae0:	f7fd ff60 	bl	80019a4 <HAL_GetTick>
 8003ae4:	0002      	movs	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e046      	b.n	8003b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003af2:	4b25      	ldr	r3, [pc, #148]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	2380      	movs	r3, #128	@ 0x80
 8003af8:	049b      	lsls	r3, r3, #18
 8003afa:	4013      	ands	r3, r2
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003afe:	4b22      	ldr	r3, [pc, #136]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	4b21      	ldr	r3, [pc, #132]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003b04:	4926      	ldr	r1, [pc, #152]	@ (8003ba0 <HAL_RCC_OscConfig+0x630>)
 8003b06:	400a      	ands	r2, r1
 8003b08:	60da      	str	r2, [r3, #12]
 8003b0a:	e038      	b.n	8003b7e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e033      	b.n	8003b80 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003b18:	4b1b      	ldr	r3, [pc, #108]	@ (8003b88 <HAL_RCC_OscConfig+0x618>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2203      	movs	r2, #3
 8003b22:	401a      	ands	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d126      	bne.n	8003b7a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	2270      	movs	r2, #112	@ 0x70
 8003b30:	401a      	ands	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d11f      	bne.n	8003b7a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	23fe      	movs	r3, #254	@ 0xfe
 8003b3e:	01db      	lsls	r3, r3, #7
 8003b40:	401a      	ands	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b46:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d116      	bne.n	8003b7a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	23f8      	movs	r3, #248	@ 0xf8
 8003b50:	039b      	lsls	r3, r3, #14
 8003b52:	401a      	ands	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d10e      	bne.n	8003b7a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	23e0      	movs	r3, #224	@ 0xe0
 8003b60:	051b      	lsls	r3, r3, #20
 8003b62:	401a      	ands	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	0f5b      	lsrs	r3, r3, #29
 8003b70:	075a      	lsls	r2, r3, #29
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d001      	beq.n	8003b7e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	0018      	movs	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b008      	add	sp, #32
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	40007000 	.word	0x40007000
 8003b90:	00001388 	.word	0x00001388
 8003b94:	efffffff 	.word	0xefffffff
 8003b98:	feffffff 	.word	0xfeffffff
 8003b9c:	11c1808c 	.word	0x11c1808c
 8003ba0:	eefefffc 	.word	0xeefefffc

08003ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0e9      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb8:	4b76      	ldr	r3, [pc, #472]	@ (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2207      	movs	r2, #7
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d91e      	bls.n	8003c04 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc6:	4b73      	ldr	r3, [pc, #460]	@ (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2207      	movs	r2, #7
 8003bcc:	4393      	bics	r3, r2
 8003bce:	0019      	movs	r1, r3
 8003bd0:	4b70      	ldr	r3, [pc, #448]	@ (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003bd8:	f7fd fee4 	bl	80019a4 <HAL_GetTick>
 8003bdc:	0003      	movs	r3, r0
 8003bde:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003be0:	e009      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be2:	f7fd fedf 	bl	80019a4 <HAL_GetTick>
 8003be6:	0002      	movs	r2, r0
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	4a6a      	ldr	r2, [pc, #424]	@ (8003d98 <HAL_RCC_ClockConfig+0x1f4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e0ca      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003bf6:	4b67      	ldr	r3, [pc, #412]	@ (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2207      	movs	r2, #7
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d1ee      	bne.n	8003be2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d015      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2204      	movs	r2, #4
 8003c14:	4013      	ands	r3, r2
 8003c16:	d006      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003c18:	4b60      	ldr	r3, [pc, #384]	@ (8003d9c <HAL_RCC_ClockConfig+0x1f8>)
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	4b5f      	ldr	r3, [pc, #380]	@ (8003d9c <HAL_RCC_ClockConfig+0x1f8>)
 8003c1e:	21e0      	movs	r1, #224	@ 0xe0
 8003c20:	01c9      	lsls	r1, r1, #7
 8003c22:	430a      	orrs	r2, r1
 8003c24:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c26:	4b5d      	ldr	r3, [pc, #372]	@ (8003d9c <HAL_RCC_ClockConfig+0x1f8>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	4a5d      	ldr	r2, [pc, #372]	@ (8003da0 <HAL_RCC_ClockConfig+0x1fc>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	0019      	movs	r1, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	4b59      	ldr	r3, [pc, #356]	@ (8003d9c <HAL_RCC_ClockConfig+0x1f8>)
 8003c36:	430a      	orrs	r2, r1
 8003c38:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	4013      	ands	r3, r2
 8003c42:	d057      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d107      	bne.n	8003c5c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c4c:	4b53      	ldr	r3, [pc, #332]	@ (8003d9c <HAL_RCC_ClockConfig+0x1f8>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	2380      	movs	r3, #128	@ 0x80
 8003c52:	029b      	lsls	r3, r3, #10
 8003c54:	4013      	ands	r3, r2
 8003c56:	d12b      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e097      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d107      	bne.n	8003c74 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c64:	4b4d      	ldr	r3, [pc, #308]	@ (8003d9c <HAL_RCC_ClockConfig+0x1f8>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	2380      	movs	r3, #128	@ 0x80
 8003c6a:	049b      	lsls	r3, r3, #18
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d11f      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e08b      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d107      	bne.n	8003c8c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c7c:	4b47      	ldr	r3, [pc, #284]	@ (8003d9c <HAL_RCC_ClockConfig+0x1f8>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	2380      	movs	r3, #128	@ 0x80
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4013      	ands	r3, r2
 8003c86:	d113      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e07f      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d106      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c94:	4b41      	ldr	r3, [pc, #260]	@ (8003d9c <HAL_RCC_ClockConfig+0x1f8>)
 8003c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c98:	2202      	movs	r2, #2
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d108      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e074      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8003d9c <HAL_RCC_ClockConfig+0x1f8>)
 8003ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d101      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e06d      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8003d9c <HAL_RCC_ClockConfig+0x1f8>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2207      	movs	r2, #7
 8003cb6:	4393      	bics	r3, r2
 8003cb8:	0019      	movs	r1, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	4b37      	ldr	r3, [pc, #220]	@ (8003d9c <HAL_RCC_ClockConfig+0x1f8>)
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc4:	f7fd fe6e 	bl	80019a4 <HAL_GetTick>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ccc:	e009      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cce:	f7fd fe69 	bl	80019a4 <HAL_GetTick>
 8003cd2:	0002      	movs	r2, r0
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	4a2f      	ldr	r2, [pc, #188]	@ (8003d98 <HAL_RCC_ClockConfig+0x1f4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e054      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	4b2e      	ldr	r3, [pc, #184]	@ (8003d9c <HAL_RCC_ClockConfig+0x1f8>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2238      	movs	r2, #56	@ 0x38
 8003ce8:	401a      	ands	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d1ec      	bne.n	8003cce <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf4:	4b27      	ldr	r3, [pc, #156]	@ (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2207      	movs	r2, #7
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d21e      	bcs.n	8003d40 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d02:	4b24      	ldr	r3, [pc, #144]	@ (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2207      	movs	r2, #7
 8003d08:	4393      	bics	r3, r2
 8003d0a:	0019      	movs	r1, r3
 8003d0c:	4b21      	ldr	r3, [pc, #132]	@ (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d14:	f7fd fe46 	bl	80019a4 <HAL_GetTick>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d1c:	e009      	b.n	8003d32 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d1e:	f7fd fe41 	bl	80019a4 <HAL_GetTick>
 8003d22:	0002      	movs	r2, r0
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	4a1b      	ldr	r2, [pc, #108]	@ (8003d98 <HAL_RCC_ClockConfig+0x1f4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e02c      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d32:	4b18      	ldr	r3, [pc, #96]	@ (8003d94 <HAL_RCC_ClockConfig+0x1f0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2207      	movs	r2, #7
 8003d38:	4013      	ands	r3, r2
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d1ee      	bne.n	8003d1e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2204      	movs	r2, #4
 8003d46:	4013      	ands	r3, r2
 8003d48:	d009      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003d4a:	4b14      	ldr	r3, [pc, #80]	@ (8003d9c <HAL_RCC_ClockConfig+0x1f8>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	4a15      	ldr	r2, [pc, #84]	@ (8003da4 <HAL_RCC_ClockConfig+0x200>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	0019      	movs	r1, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	4b10      	ldr	r3, [pc, #64]	@ (8003d9c <HAL_RCC_ClockConfig+0x1f8>)
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003d5e:	f000 f829 	bl	8003db4 <HAL_RCC_GetSysClockFreq>
 8003d62:	0001      	movs	r1, r0
 8003d64:	4b0d      	ldr	r3, [pc, #52]	@ (8003d9c <HAL_RCC_ClockConfig+0x1f8>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	0a1b      	lsrs	r3, r3, #8
 8003d6a:	220f      	movs	r2, #15
 8003d6c:	401a      	ands	r2, r3
 8003d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003da8 <HAL_RCC_ClockConfig+0x204>)
 8003d70:	0092      	lsls	r2, r2, #2
 8003d72:	58d3      	ldr	r3, [r2, r3]
 8003d74:	221f      	movs	r2, #31
 8003d76:	4013      	ands	r3, r2
 8003d78:	000a      	movs	r2, r1
 8003d7a:	40da      	lsrs	r2, r3
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dac <HAL_RCC_ClockConfig+0x208>)
 8003d7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d80:	4b0b      	ldr	r3, [pc, #44]	@ (8003db0 <HAL_RCC_ClockConfig+0x20c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	0018      	movs	r0, r3
 8003d86:	f7fd fdb1 	bl	80018ec <HAL_InitTick>
 8003d8a:	0003      	movs	r3, r0
}
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b004      	add	sp, #16
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40022000 	.word	0x40022000
 8003d98:	00001388 	.word	0x00001388
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	fffff0ff 	.word	0xfffff0ff
 8003da4:	ffff8fff 	.word	0xffff8fff
 8003da8:	08005a14 	.word	0x08005a14
 8003dac:	20000044 	.word	0x20000044
 8003db0:	20000048 	.word	0x20000048

08003db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dba:	4b3c      	ldr	r3, [pc, #240]	@ (8003eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2238      	movs	r2, #56	@ 0x38
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d10f      	bne.n	8003de4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003dc4:	4b39      	ldr	r3, [pc, #228]	@ (8003eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	0adb      	lsrs	r3, r3, #11
 8003dca:	2207      	movs	r2, #7
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2201      	movs	r2, #1
 8003dd0:	409a      	lsls	r2, r3
 8003dd2:	0013      	movs	r3, r2
 8003dd4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003dd6:	6839      	ldr	r1, [r7, #0]
 8003dd8:	4835      	ldr	r0, [pc, #212]	@ (8003eb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003dda:	f7fc f993 	bl	8000104 <__udivsi3>
 8003dde:	0003      	movs	r3, r0
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	e05d      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003de4:	4b31      	ldr	r3, [pc, #196]	@ (8003eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2238      	movs	r2, #56	@ 0x38
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d102      	bne.n	8003df6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003df0:	4b30      	ldr	r3, [pc, #192]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	e054      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003df6:	4b2d      	ldr	r3, [pc, #180]	@ (8003eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2238      	movs	r2, #56	@ 0x38
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b10      	cmp	r3, #16
 8003e00:	d138      	bne.n	8003e74 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003e02:	4b2a      	ldr	r3, [pc, #168]	@ (8003eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	2203      	movs	r2, #3
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e0c:	4b27      	ldr	r3, [pc, #156]	@ (8003eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	2207      	movs	r2, #7
 8003e14:	4013      	ands	r3, r2
 8003e16:	3301      	adds	r3, #1
 8003e18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d10d      	bne.n	8003e3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e20:	68b9      	ldr	r1, [r7, #8]
 8003e22:	4824      	ldr	r0, [pc, #144]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003e24:	f7fc f96e 	bl	8000104 <__udivsi3>
 8003e28:	0003      	movs	r3, r0
 8003e2a:	0019      	movs	r1, r3
 8003e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8003eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	0a1b      	lsrs	r3, r3, #8
 8003e32:	227f      	movs	r2, #127	@ 0x7f
 8003e34:	4013      	ands	r3, r2
 8003e36:	434b      	muls	r3, r1
 8003e38:	617b      	str	r3, [r7, #20]
        break;
 8003e3a:	e00d      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	481c      	ldr	r0, [pc, #112]	@ (8003eb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003e40:	f7fc f960 	bl	8000104 <__udivsi3>
 8003e44:	0003      	movs	r3, r0
 8003e46:	0019      	movs	r1, r3
 8003e48:	4b18      	ldr	r3, [pc, #96]	@ (8003eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	0a1b      	lsrs	r3, r3, #8
 8003e4e:	227f      	movs	r2, #127	@ 0x7f
 8003e50:	4013      	ands	r3, r2
 8003e52:	434b      	muls	r3, r1
 8003e54:	617b      	str	r3, [r7, #20]
        break;
 8003e56:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003e58:	4b14      	ldr	r3, [pc, #80]	@ (8003eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	0f5b      	lsrs	r3, r3, #29
 8003e5e:	2207      	movs	r2, #7
 8003e60:	4013      	ands	r3, r2
 8003e62:	3301      	adds	r3, #1
 8003e64:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	6978      	ldr	r0, [r7, #20]
 8003e6a:	f7fc f94b 	bl	8000104 <__udivsi3>
 8003e6e:	0003      	movs	r3, r0
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	e015      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003e74:	4b0d      	ldr	r3, [pc, #52]	@ (8003eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2238      	movs	r2, #56	@ 0x38
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d103      	bne.n	8003e88 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003e80:	2380      	movs	r3, #128	@ 0x80
 8003e82:	021b      	lsls	r3, r3, #8
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	e00b      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003e88:	4b08      	ldr	r3, [pc, #32]	@ (8003eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2238      	movs	r2, #56	@ 0x38
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b18      	cmp	r3, #24
 8003e92:	d103      	bne.n	8003e9c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003e94:	23fa      	movs	r3, #250	@ 0xfa
 8003e96:	01db      	lsls	r3, r3, #7
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	e001      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ea0:	693b      	ldr	r3, [r7, #16]
}
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b006      	add	sp, #24
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	46c0      	nop			@ (mov r8, r8)
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	00f42400 	.word	0x00f42400
 8003eb4:	007a1200 	.word	0x007a1200

08003eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003ec0:	2313      	movs	r3, #19
 8003ec2:	18fb      	adds	r3, r7, r3
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ec8:	2312      	movs	r3, #18
 8003eca:	18fb      	adds	r3, r7, r3
 8003ecc:	2200      	movs	r2, #0
 8003ece:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	2380      	movs	r3, #128	@ 0x80
 8003ed6:	029b      	lsls	r3, r3, #10
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d100      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003edc:	e0a3      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ede:	2011      	movs	r0, #17
 8003ee0:	183b      	adds	r3, r7, r0
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee6:	4ba5      	ldr	r3, [pc, #660]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ee8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003eea:	2380      	movs	r3, #128	@ 0x80
 8003eec:	055b      	lsls	r3, r3, #21
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d110      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	4ba2      	ldr	r3, [pc, #648]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ef4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ef6:	4ba1      	ldr	r3, [pc, #644]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ef8:	2180      	movs	r1, #128	@ 0x80
 8003efa:	0549      	lsls	r1, r1, #21
 8003efc:	430a      	orrs	r2, r1
 8003efe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f00:	4b9e      	ldr	r3, [pc, #632]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f04:	2380      	movs	r3, #128	@ 0x80
 8003f06:	055b      	lsls	r3, r3, #21
 8003f08:	4013      	ands	r3, r2
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f0e:	183b      	adds	r3, r7, r0
 8003f10:	2201      	movs	r2, #1
 8003f12:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f14:	4b9a      	ldr	r3, [pc, #616]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	4b99      	ldr	r3, [pc, #612]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003f1a:	2180      	movs	r1, #128	@ 0x80
 8003f1c:	0049      	lsls	r1, r1, #1
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f22:	f7fd fd3f 	bl	80019a4 <HAL_GetTick>
 8003f26:	0003      	movs	r3, r0
 8003f28:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f2a:	e00b      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2c:	f7fd fd3a 	bl	80019a4 <HAL_GetTick>
 8003f30:	0002      	movs	r2, r0
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d904      	bls.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003f3a:	2313      	movs	r3, #19
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	2203      	movs	r2, #3
 8003f40:	701a      	strb	r2, [r3, #0]
        break;
 8003f42:	e005      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f44:	4b8e      	ldr	r3, [pc, #568]	@ (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	2380      	movs	r3, #128	@ 0x80
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d0ed      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003f50:	2313      	movs	r3, #19
 8003f52:	18fb      	adds	r3, r7, r3
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d154      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f5a:	4b88      	ldr	r3, [pc, #544]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f5e:	23c0      	movs	r3, #192	@ 0xc0
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4013      	ands	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d019      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d014      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f76:	4b81      	ldr	r3, [pc, #516]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7a:	4a82      	ldr	r2, [pc, #520]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f80:	4b7e      	ldr	r3, [pc, #504]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f84:	4b7d      	ldr	r3, [pc, #500]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f86:	2180      	movs	r1, #128	@ 0x80
 8003f88:	0249      	lsls	r1, r1, #9
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f8e:	4b7b      	ldr	r3, [pc, #492]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f92:	4b7a      	ldr	r3, [pc, #488]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f94:	497c      	ldr	r1, [pc, #496]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003f96:	400a      	ands	r2, r1
 8003f98:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f9a:	4b78      	ldr	r3, [pc, #480]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d016      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fd fcfc 	bl	80019a4 <HAL_GetTick>
 8003fac:	0003      	movs	r3, r0
 8003fae:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fb0:	e00c      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb2:	f7fd fcf7 	bl	80019a4 <HAL_GetTick>
 8003fb6:	0002      	movs	r2, r0
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	4a73      	ldr	r2, [pc, #460]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d904      	bls.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003fc2:	2313      	movs	r3, #19
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	701a      	strb	r2, [r3, #0]
            break;
 8003fca:	e004      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fcc:	4b6b      	ldr	r3, [pc, #428]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d0ed      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003fd6:	2313      	movs	r3, #19
 8003fd8:	18fb      	adds	r3, r7, r3
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10a      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fe0:	4b66      	ldr	r3, [pc, #408]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe4:	4a67      	ldr	r2, [pc, #412]	@ (8004184 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	0019      	movs	r1, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fee:	4b63      	ldr	r3, [pc, #396]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ff4:	e00c      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ff6:	2312      	movs	r3, #18
 8003ff8:	18fb      	adds	r3, r7, r3
 8003ffa:	2213      	movs	r2, #19
 8003ffc:	18ba      	adds	r2, r7, r2
 8003ffe:	7812      	ldrb	r2, [r2, #0]
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	e005      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004004:	2312      	movs	r3, #18
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2213      	movs	r2, #19
 800400a:	18ba      	adds	r2, r7, r2
 800400c:	7812      	ldrb	r2, [r2, #0]
 800400e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004010:	2311      	movs	r3, #17
 8004012:	18fb      	adds	r3, r7, r3
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d105      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800401a:	4b58      	ldr	r3, [pc, #352]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800401c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800401e:	4b57      	ldr	r3, [pc, #348]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004020:	495b      	ldr	r1, [pc, #364]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004022:	400a      	ands	r2, r1
 8004024:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2201      	movs	r2, #1
 800402c:	4013      	ands	r3, r2
 800402e:	d009      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004030:	4b52      	ldr	r3, [pc, #328]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004034:	2203      	movs	r2, #3
 8004036:	4393      	bics	r3, r2
 8004038:	0019      	movs	r1, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	4b4f      	ldr	r3, [pc, #316]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004040:	430a      	orrs	r2, r1
 8004042:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2210      	movs	r2, #16
 800404a:	4013      	ands	r3, r2
 800404c:	d009      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800404e:	4b4b      	ldr	r3, [pc, #300]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004052:	4a50      	ldr	r2, [pc, #320]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004054:	4013      	ands	r3, r2
 8004056:	0019      	movs	r1, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	4b47      	ldr	r3, [pc, #284]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800405e:	430a      	orrs	r2, r1
 8004060:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	2380      	movs	r3, #128	@ 0x80
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4013      	ands	r3, r2
 800406c:	d009      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800406e:	4b43      	ldr	r3, [pc, #268]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004072:	4a49      	ldr	r2, [pc, #292]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004074:	4013      	ands	r3, r2
 8004076:	0019      	movs	r1, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	695a      	ldr	r2, [r3, #20]
 800407c:	4b3f      	ldr	r3, [pc, #252]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800407e:	430a      	orrs	r2, r1
 8004080:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	2380      	movs	r3, #128	@ 0x80
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4013      	ands	r3, r2
 800408c:	d009      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800408e:	4b3b      	ldr	r3, [pc, #236]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004092:	4a42      	ldr	r2, [pc, #264]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004094:	4013      	ands	r3, r2
 8004096:	0019      	movs	r1, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699a      	ldr	r2, [r3, #24]
 800409c:	4b37      	ldr	r3, [pc, #220]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800409e:	430a      	orrs	r2, r1
 80040a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2220      	movs	r2, #32
 80040a8:	4013      	ands	r3, r2
 80040aa:	d009      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040ac:	4b33      	ldr	r3, [pc, #204]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b0:	4a3b      	ldr	r2, [pc, #236]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80040b2:	4013      	ands	r3, r2
 80040b4:	0019      	movs	r1, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	4b30      	ldr	r3, [pc, #192]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040bc:	430a      	orrs	r2, r1
 80040be:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	2380      	movs	r3, #128	@ 0x80
 80040c6:	01db      	lsls	r3, r3, #7
 80040c8:	4013      	ands	r3, r2
 80040ca:	d015      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040cc:	4b2b      	ldr	r3, [pc, #172]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	0899      	lsrs	r1, r3, #2
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69da      	ldr	r2, [r3, #28]
 80040d8:	4b28      	ldr	r3, [pc, #160]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040da:	430a      	orrs	r2, r1
 80040dc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69da      	ldr	r2, [r3, #28]
 80040e2:	2380      	movs	r3, #128	@ 0x80
 80040e4:	05db      	lsls	r3, r3, #23
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d106      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80040ea:	4b24      	ldr	r3, [pc, #144]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	4b23      	ldr	r3, [pc, #140]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040f0:	2180      	movs	r1, #128	@ 0x80
 80040f2:	0249      	lsls	r1, r1, #9
 80040f4:	430a      	orrs	r2, r1
 80040f6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	2380      	movs	r3, #128	@ 0x80
 80040fe:	039b      	lsls	r3, r3, #14
 8004100:	4013      	ands	r3, r2
 8004102:	d016      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004104:	4b1d      	ldr	r3, [pc, #116]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004108:	4a26      	ldr	r2, [pc, #152]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800410a:	4013      	ands	r3, r2
 800410c:	0019      	movs	r1, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1a      	ldr	r2, [r3, #32]
 8004112:	4b1a      	ldr	r3, [pc, #104]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004114:	430a      	orrs	r2, r1
 8004116:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1a      	ldr	r2, [r3, #32]
 800411c:	2380      	movs	r3, #128	@ 0x80
 800411e:	03db      	lsls	r3, r3, #15
 8004120:	429a      	cmp	r2, r3
 8004122:	d106      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004124:	4b15      	ldr	r3, [pc, #84]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	4b14      	ldr	r3, [pc, #80]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800412a:	2180      	movs	r1, #128	@ 0x80
 800412c:	0449      	lsls	r1, r1, #17
 800412e:	430a      	orrs	r2, r1
 8004130:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	2380      	movs	r3, #128	@ 0x80
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	4013      	ands	r3, r2
 800413c:	d016      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800413e:	4b0f      	ldr	r3, [pc, #60]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004142:	4a19      	ldr	r2, [pc, #100]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004144:	4013      	ands	r3, r2
 8004146:	0019      	movs	r1, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	4b0b      	ldr	r3, [pc, #44]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800414e:	430a      	orrs	r2, r1
 8004150:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	2380      	movs	r3, #128	@ 0x80
 8004158:	01db      	lsls	r3, r3, #7
 800415a:	429a      	cmp	r2, r3
 800415c:	d106      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800415e:	4b07      	ldr	r3, [pc, #28]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	4b06      	ldr	r3, [pc, #24]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004164:	2180      	movs	r1, #128	@ 0x80
 8004166:	0249      	lsls	r1, r1, #9
 8004168:	430a      	orrs	r2, r1
 800416a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800416c:	2312      	movs	r3, #18
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	781b      	ldrb	r3, [r3, #0]
}
 8004172:	0018      	movs	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	b006      	add	sp, #24
 8004178:	bd80      	pop	{r7, pc}
 800417a:	46c0      	nop			@ (mov r8, r8)
 800417c:	40021000 	.word	0x40021000
 8004180:	40007000 	.word	0x40007000
 8004184:	fffffcff 	.word	0xfffffcff
 8004188:	fffeffff 	.word	0xfffeffff
 800418c:	00001388 	.word	0x00001388
 8004190:	efffffff 	.word	0xefffffff
 8004194:	fffff3ff 	.word	0xfffff3ff
 8004198:	fff3ffff 	.word	0xfff3ffff
 800419c:	ffcfffff 	.word	0xffcfffff
 80041a0:	ffffcfff 	.word	0xffffcfff
 80041a4:	ffbfffff 	.word	0xffbfffff
 80041a8:	ffff3fff 	.word	0xffff3fff

080041ac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80041ac:	b5b0      	push	{r4, r5, r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80041b4:	230f      	movs	r3, #15
 80041b6:	18fb      	adds	r3, r7, r3
 80041b8:	2201      	movs	r2, #1
 80041ba:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d100      	bne.n	80041c4 <HAL_RTC_Init+0x18>
 80041c2:	e08c      	b.n	80042de <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2229      	movs	r2, #41	@ 0x29
 80041c8:	5c9b      	ldrb	r3, [r3, r2]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10b      	bne.n	80041e8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2228      	movs	r2, #40	@ 0x28
 80041d4:	2100      	movs	r1, #0
 80041d6:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2288      	movs	r2, #136	@ 0x88
 80041dc:	0212      	lsls	r2, r2, #8
 80041de:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	0018      	movs	r0, r3
 80041e4:	f7fd fa2e 	bl	8001644 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2229      	movs	r2, #41	@ 0x29
 80041ec:	2102      	movs	r1, #2
 80041ee:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2210      	movs	r2, #16
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b10      	cmp	r3, #16
 80041fc:	d062      	beq.n	80042c4 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	22ca      	movs	r2, #202	@ 0xca
 8004204:	625a      	str	r2, [r3, #36]	@ 0x24
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2253      	movs	r2, #83	@ 0x53
 800420c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800420e:	250f      	movs	r5, #15
 8004210:	197c      	adds	r4, r7, r5
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	0018      	movs	r0, r3
 8004216:	f000 fbf3 	bl	8004a00 <RTC_EnterInitMode>
 800421a:	0003      	movs	r3, r0
 800421c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800421e:	0028      	movs	r0, r5
 8004220:	183b      	adds	r3, r7, r0
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d12c      	bne.n	8004282 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	492e      	ldr	r1, [pc, #184]	@ (80042ec <HAL_RTC_Init+0x140>)
 8004234:	400a      	ands	r2, r1
 8004236:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6999      	ldr	r1, [r3, #24]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6912      	ldr	r2, [r2, #16]
 800425e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6919      	ldr	r1, [r3, #16]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	041a      	lsls	r2, r3, #16
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004274:	183c      	adds	r4, r7, r0
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	0018      	movs	r0, r3
 800427a:	f000 fc03 	bl	8004a84 <RTC_ExitInitMode>
 800427e:	0003      	movs	r3, r0
 8004280:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004282:	230f      	movs	r3, #15
 8004284:	18fb      	adds	r3, r7, r3
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d116      	bne.n	80042ba <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699a      	ldr	r2, [r3, #24]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	00d2      	lsls	r2, r2, #3
 8004298:	08d2      	lsrs	r2, r2, #3
 800429a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6999      	ldr	r1, [r3, #24]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	22ff      	movs	r2, #255	@ 0xff
 80042c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80042c2:	e003      	b.n	80042cc <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80042c4:	230f      	movs	r3, #15
 80042c6:	18fb      	adds	r3, r7, r3
 80042c8:	2200      	movs	r2, #0
 80042ca:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80042cc:	230f      	movs	r3, #15
 80042ce:	18fb      	adds	r3, r7, r3
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d103      	bne.n	80042de <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2229      	movs	r2, #41	@ 0x29
 80042da:	2101      	movs	r1, #1
 80042dc:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80042de:	230f      	movs	r3, #15
 80042e0:	18fb      	adds	r3, r7, r3
 80042e2:	781b      	ldrb	r3, [r3, #0]
}
 80042e4:	0018      	movs	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b004      	add	sp, #16
 80042ea:	bdb0      	pop	{r4, r5, r7, pc}
 80042ec:	fb8fffbf 	.word	0xfb8fffbf

080042f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80042f0:	b5b0      	push	{r4, r5, r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2228      	movs	r2, #40	@ 0x28
 8004300:	5c9b      	ldrb	r3, [r3, r2]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <HAL_RTC_SetTime+0x1a>
 8004306:	2302      	movs	r3, #2
 8004308:	e092      	b.n	8004430 <HAL_RTC_SetTime+0x140>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2228      	movs	r2, #40	@ 0x28
 800430e:	2101      	movs	r1, #1
 8004310:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2229      	movs	r2, #41	@ 0x29
 8004316:	2102      	movs	r1, #2
 8004318:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	22ca      	movs	r2, #202	@ 0xca
 8004320:	625a      	str	r2, [r3, #36]	@ 0x24
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2253      	movs	r2, #83	@ 0x53
 8004328:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800432a:	2513      	movs	r5, #19
 800432c:	197c      	adds	r4, r7, r5
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	0018      	movs	r0, r3
 8004332:	f000 fb65 	bl	8004a00 <RTC_EnterInitMode>
 8004336:	0003      	movs	r3, r0
 8004338:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800433a:	197b      	adds	r3, r7, r5
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d162      	bne.n	8004408 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d125      	bne.n	8004394 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	2240      	movs	r2, #64	@ 0x40
 8004350:	4013      	ands	r3, r2
 8004352:	d102      	bne.n	800435a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2200      	movs	r2, #0
 8004358:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	0018      	movs	r0, r3
 8004360:	f000 fbd4 	bl	8004b0c <RTC_ByteToBcd2>
 8004364:	0003      	movs	r3, r0
 8004366:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	785b      	ldrb	r3, [r3, #1]
 800436c:	0018      	movs	r0, r3
 800436e:	f000 fbcd 	bl	8004b0c <RTC_ByteToBcd2>
 8004372:	0003      	movs	r3, r0
 8004374:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004376:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	789b      	ldrb	r3, [r3, #2]
 800437c:	0018      	movs	r0, r3
 800437e:	f000 fbc5 	bl	8004b0c <RTC_ByteToBcd2>
 8004382:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004384:	0022      	movs	r2, r4
 8004386:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	78db      	ldrb	r3, [r3, #3]
 800438c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	e017      	b.n	80043c4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2240      	movs	r2, #64	@ 0x40
 800439c:	4013      	ands	r3, r2
 800439e:	d102      	bne.n	80043a6 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2200      	movs	r2, #0
 80043a4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	785b      	ldrb	r3, [r3, #1]
 80043b0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80043b2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80043b8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	78db      	ldrb	r3, [r3, #3]
 80043be:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	491b      	ldr	r1, [pc, #108]	@ (8004438 <HAL_RTC_SetTime+0x148>)
 80043cc:	400a      	ands	r2, r1
 80043ce:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4918      	ldr	r1, [pc, #96]	@ (800443c <HAL_RTC_SetTime+0x14c>)
 80043dc:	400a      	ands	r2, r1
 80043de:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6999      	ldr	r1, [r3, #24]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80043f8:	2313      	movs	r3, #19
 80043fa:	18fc      	adds	r4, r7, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	0018      	movs	r0, r3
 8004400:	f000 fb40 	bl	8004a84 <RTC_ExitInitMode>
 8004404:	0003      	movs	r3, r0
 8004406:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	22ff      	movs	r2, #255	@ 0xff
 800440e:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8004410:	2313      	movs	r3, #19
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d103      	bne.n	8004422 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2229      	movs	r2, #41	@ 0x29
 800441e:	2101      	movs	r1, #1
 8004420:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2228      	movs	r2, #40	@ 0x28
 8004426:	2100      	movs	r1, #0
 8004428:	5499      	strb	r1, [r3, r2]

  return status;
 800442a:	2313      	movs	r3, #19
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	781b      	ldrb	r3, [r3, #0]
}
 8004430:	0018      	movs	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	b006      	add	sp, #24
 8004436:	bdb0      	pop	{r4, r5, r7, pc}
 8004438:	007f7f7f 	.word	0x007f7f7f
 800443c:	fffbffff 	.word	0xfffbffff

08004440 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	045b      	lsls	r3, r3, #17
 800445e:	0c5a      	lsrs	r2, r3, #17
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a22      	ldr	r2, [pc, #136]	@ (80044f4 <HAL_RTC_GetTime+0xb4>)
 800446c:	4013      	ands	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	0c1b      	lsrs	r3, r3, #16
 8004474:	b2db      	uxtb	r3, r3
 8004476:	223f      	movs	r2, #63	@ 0x3f
 8004478:	4013      	ands	r3, r2
 800447a:	b2da      	uxtb	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	0a1b      	lsrs	r3, r3, #8
 8004484:	b2db      	uxtb	r3, r3
 8004486:	227f      	movs	r2, #127	@ 0x7f
 8004488:	4013      	ands	r3, r2
 800448a:	b2da      	uxtb	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	227f      	movs	r2, #127	@ 0x7f
 8004496:	4013      	ands	r3, r2
 8004498:	b2da      	uxtb	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	0d9b      	lsrs	r3, r3, #22
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2201      	movs	r2, #1
 80044a6:	4013      	ands	r3, r2
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d11a      	bne.n	80044ea <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	0018      	movs	r0, r3
 80044ba:	f000 fb4f 	bl	8004b5c <RTC_Bcd2ToByte>
 80044be:	0003      	movs	r3, r0
 80044c0:	001a      	movs	r2, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	785b      	ldrb	r3, [r3, #1]
 80044ca:	0018      	movs	r0, r3
 80044cc:	f000 fb46 	bl	8004b5c <RTC_Bcd2ToByte>
 80044d0:	0003      	movs	r3, r0
 80044d2:	001a      	movs	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	789b      	ldrb	r3, [r3, #2]
 80044dc:	0018      	movs	r0, r3
 80044de:	f000 fb3d 	bl	8004b5c <RTC_Bcd2ToByte>
 80044e2:	0003      	movs	r3, r0
 80044e4:	001a      	movs	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	0018      	movs	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b006      	add	sp, #24
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	007f7f7f 	.word	0x007f7f7f

080044f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80044f8:	b5b0      	push	{r4, r5, r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2228      	movs	r2, #40	@ 0x28
 8004508:	5c9b      	ldrb	r3, [r3, r2]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_RTC_SetDate+0x1a>
 800450e:	2302      	movs	r3, #2
 8004510:	e07e      	b.n	8004610 <HAL_RTC_SetDate+0x118>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2228      	movs	r2, #40	@ 0x28
 8004516:	2101      	movs	r1, #1
 8004518:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2229      	movs	r2, #41	@ 0x29
 800451e:	2102      	movs	r1, #2
 8004520:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10e      	bne.n	8004546 <HAL_RTC_SetDate+0x4e>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	785b      	ldrb	r3, [r3, #1]
 800452c:	001a      	movs	r2, r3
 800452e:	2310      	movs	r3, #16
 8004530:	4013      	ands	r3, r2
 8004532:	d008      	beq.n	8004546 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	785b      	ldrb	r3, [r3, #1]
 8004538:	2210      	movs	r2, #16
 800453a:	4393      	bics	r3, r2
 800453c:	b2db      	uxtb	r3, r3
 800453e:	330a      	adds	r3, #10
 8004540:	b2da      	uxtb	r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d11c      	bne.n	8004586 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	78db      	ldrb	r3, [r3, #3]
 8004550:	0018      	movs	r0, r3
 8004552:	f000 fadb 	bl	8004b0c <RTC_ByteToBcd2>
 8004556:	0003      	movs	r3, r0
 8004558:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	785b      	ldrb	r3, [r3, #1]
 800455e:	0018      	movs	r0, r3
 8004560:	f000 fad4 	bl	8004b0c <RTC_ByteToBcd2>
 8004564:	0003      	movs	r3, r0
 8004566:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004568:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	789b      	ldrb	r3, [r3, #2]
 800456e:	0018      	movs	r0, r3
 8004570:	f000 facc 	bl	8004b0c <RTC_ByteToBcd2>
 8004574:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004576:	0022      	movs	r2, r4
 8004578:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	e00e      	b.n	80045a4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	78db      	ldrb	r3, [r3, #3]
 800458a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	785b      	ldrb	r3, [r3, #1]
 8004590:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004592:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004598:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	22ca      	movs	r2, #202	@ 0xca
 80045aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2253      	movs	r2, #83	@ 0x53
 80045b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80045b4:	2513      	movs	r5, #19
 80045b6:	197c      	adds	r4, r7, r5
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	0018      	movs	r0, r3
 80045bc:	f000 fa20 	bl	8004a00 <RTC_EnterInitMode>
 80045c0:	0003      	movs	r3, r0
 80045c2:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80045c4:	0028      	movs	r0, r5
 80045c6:	183b      	adds	r3, r7, r0
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10c      	bne.n	80045e8 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4910      	ldr	r1, [pc, #64]	@ (8004618 <HAL_RTC_SetDate+0x120>)
 80045d6:	400a      	ands	r2, r1
 80045d8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80045da:	183c      	adds	r4, r7, r0
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	0018      	movs	r0, r3
 80045e0:	f000 fa50 	bl	8004a84 <RTC_ExitInitMode>
 80045e4:	0003      	movs	r3, r0
 80045e6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	22ff      	movs	r2, #255	@ 0xff
 80045ee:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80045f0:	2313      	movs	r3, #19
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d103      	bne.n	8004602 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2229      	movs	r2, #41	@ 0x29
 80045fe:	2101      	movs	r1, #1
 8004600:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2228      	movs	r2, #40	@ 0x28
 8004606:	2100      	movs	r1, #0
 8004608:	5499      	strb	r1, [r3, r2]

  return status;
 800460a:	2313      	movs	r3, #19
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	781b      	ldrb	r3, [r3, #0]
}
 8004610:	0018      	movs	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	b006      	add	sp, #24
 8004616:	bdb0      	pop	{r4, r5, r7, pc}
 8004618:	00ffff3f 	.word	0x00ffff3f

0800461c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	4a21      	ldr	r2, [pc, #132]	@ (80046b4 <HAL_RTC_GetDate+0x98>)
 8004630:	4013      	ands	r3, r2
 8004632:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	0c1b      	lsrs	r3, r3, #16
 8004638:	b2da      	uxtb	r2, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	0a1b      	lsrs	r3, r3, #8
 8004642:	b2db      	uxtb	r3, r3
 8004644:	221f      	movs	r2, #31
 8004646:	4013      	ands	r3, r2
 8004648:	b2da      	uxtb	r2, r3
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	223f      	movs	r2, #63	@ 0x3f
 8004654:	4013      	ands	r3, r2
 8004656:	b2da      	uxtb	r2, r3
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	0b5b      	lsrs	r3, r3, #13
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2207      	movs	r2, #7
 8004664:	4013      	ands	r3, r2
 8004666:	b2da      	uxtb	r2, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d11a      	bne.n	80046a8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	78db      	ldrb	r3, [r3, #3]
 8004676:	0018      	movs	r0, r3
 8004678:	f000 fa70 	bl	8004b5c <RTC_Bcd2ToByte>
 800467c:	0003      	movs	r3, r0
 800467e:	001a      	movs	r2, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	785b      	ldrb	r3, [r3, #1]
 8004688:	0018      	movs	r0, r3
 800468a:	f000 fa67 	bl	8004b5c <RTC_Bcd2ToByte>
 800468e:	0003      	movs	r3, r0
 8004690:	001a      	movs	r2, r3
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	789b      	ldrb	r3, [r3, #2]
 800469a:	0018      	movs	r0, r3
 800469c:	f000 fa5e 	bl	8004b5c <RTC_Bcd2ToByte>
 80046a0:	0003      	movs	r3, r0
 80046a2:	001a      	movs	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	0018      	movs	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b006      	add	sp, #24
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	46c0      	nop			@ (mov r8, r8)
 80046b4:	00ffff3f 	.word	0x00ffff3f

080046b8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b089      	sub	sp, #36	@ 0x24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2228      	movs	r2, #40	@ 0x28
 80046c8:	5c9b      	ldrb	r3, [r3, r2]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_RTC_SetAlarm_IT+0x1a>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e127      	b.n	8004922 <HAL_RTC_SetAlarm_IT+0x26a>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2228      	movs	r2, #40	@ 0x28
 80046d6:	2101      	movs	r1, #1
 80046d8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2229      	movs	r2, #41	@ 0x29
 80046de:	2102      	movs	r1, #2
 80046e0:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d136      	bne.n	8004756 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2240      	movs	r2, #64	@ 0x40
 80046f0:	4013      	ands	r3, r2
 80046f2:	d102      	bne.n	80046fa <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2200      	movs	r2, #0
 80046f8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	0018      	movs	r0, r3
 8004700:	f000 fa04 	bl	8004b0c <RTC_ByteToBcd2>
 8004704:	0003      	movs	r3, r0
 8004706:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	785b      	ldrb	r3, [r3, #1]
 800470c:	0018      	movs	r0, r3
 800470e:	f000 f9fd 	bl	8004b0c <RTC_ByteToBcd2>
 8004712:	0003      	movs	r3, r0
 8004714:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004716:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	789b      	ldrb	r3, [r3, #2]
 800471c:	0018      	movs	r0, r3
 800471e:	f000 f9f5 	bl	8004b0c <RTC_ByteToBcd2>
 8004722:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004724:	0022      	movs	r2, r4
 8004726:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	78db      	ldrb	r3, [r3, #3]
 800472c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800472e:	431a      	orrs	r2, r3
 8004730:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2220      	movs	r2, #32
 8004736:	5c9b      	ldrb	r3, [r3, r2]
 8004738:	0018      	movs	r0, r3
 800473a:	f000 f9e7 	bl	8004b0c <RTC_ByteToBcd2>
 800473e:	0003      	movs	r3, r0
 8004740:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004742:	0022      	movs	r2, r4
 8004744:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800474a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004750:	4313      	orrs	r3, r2
 8004752:	61fb      	str	r3, [r7, #28]
 8004754:	e022      	b.n	800479c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	2240      	movs	r2, #64	@ 0x40
 800475e:	4013      	ands	r3, r2
 8004760:	d102      	bne.n	8004768 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2200      	movs	r2, #0
 8004766:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	785b      	ldrb	r3, [r3, #1]
 8004772:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004774:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800477a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	78db      	ldrb	r3, [r3, #3]
 8004780:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004782:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2120      	movs	r1, #32
 8004788:	5c5b      	ldrb	r3, [r3, r1]
 800478a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800478c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004792:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004798:	4313      	orrs	r3, r2
 800479a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	22ca      	movs	r2, #202	@ 0xca
 80047ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2253      	movs	r2, #83	@ 0x53
 80047b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047bc:	2380      	movs	r3, #128	@ 0x80
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d14c      	bne.n	800485e <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699a      	ldr	r2, [r3, #24]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4957      	ldr	r1, [pc, #348]	@ (800492c <HAL_RTC_SetAlarm_IT+0x274>)
 80047d0:	400a      	ands	r2, r1
 80047d2:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2101      	movs	r1, #1
 80047e0:	430a      	orrs	r2, r1
 80047e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80047e4:	f7fd f8de 	bl	80019a4 <HAL_GetTick>
 80047e8:	0003      	movs	r3, r0
 80047ea:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80047ec:	e016      	b.n	800481c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80047ee:	f7fd f8d9 	bl	80019a4 <HAL_GetTick>
 80047f2:	0002      	movs	r2, r0
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	1ad2      	subs	r2, r2, r3
 80047f8:	23fa      	movs	r3, #250	@ 0xfa
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d90d      	bls.n	800481c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	22ff      	movs	r2, #255	@ 0xff
 8004806:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2229      	movs	r2, #41	@ 0x29
 800480c:	2103      	movs	r1, #3
 800480e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2228      	movs	r2, #40	@ 0x28
 8004814:	2100      	movs	r1, #0
 8004816:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e082      	b.n	8004922 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	4013      	ands	r3, r2
 8004826:	d0e2      	beq.n	80047ee <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699a      	ldr	r2, [r3, #24]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2180      	movs	r1, #128	@ 0x80
 8004844:	0049      	lsls	r1, r1, #1
 8004846:	430a      	orrs	r2, r1
 8004848:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699a      	ldr	r2, [r3, #24]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2180      	movs	r1, #128	@ 0x80
 8004856:	0149      	lsls	r1, r1, #5
 8004858:	430a      	orrs	r2, r1
 800485a:	619a      	str	r2, [r3, #24]
 800485c:	e04b      	b.n	80048f6 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	699a      	ldr	r2, [r3, #24]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4931      	ldr	r1, [pc, #196]	@ (8004930 <HAL_RTC_SetAlarm_IT+0x278>)
 800486a:	400a      	ands	r2, r1
 800486c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2102      	movs	r1, #2
 800487a:	430a      	orrs	r2, r1
 800487c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800487e:	f7fd f891 	bl	80019a4 <HAL_GetTick>
 8004882:	0003      	movs	r3, r0
 8004884:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004886:	e016      	b.n	80048b6 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004888:	f7fd f88c 	bl	80019a4 <HAL_GetTick>
 800488c:	0002      	movs	r2, r0
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	1ad2      	subs	r2, r2, r3
 8004892:	23fa      	movs	r3, #250	@ 0xfa
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	429a      	cmp	r2, r3
 8004898:	d90d      	bls.n	80048b6 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	22ff      	movs	r2, #255	@ 0xff
 80048a0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2229      	movs	r2, #41	@ 0x29
 80048a6:	2103      	movs	r1, #3
 80048a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2228      	movs	r2, #40	@ 0x28
 80048ae:	2100      	movs	r1, #0
 80048b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e035      	b.n	8004922 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	2202      	movs	r2, #2
 80048be:	4013      	ands	r3, r2
 80048c0:	d0e2      	beq.n	8004888 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69fa      	ldr	r2, [r7, #28]
 80048c8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699a      	ldr	r2, [r3, #24]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2180      	movs	r1, #128	@ 0x80
 80048de:	0089      	lsls	r1, r1, #2
 80048e0:	430a      	orrs	r2, r1
 80048e2:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	699a      	ldr	r2, [r3, #24]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2180      	movs	r1, #128	@ 0x80
 80048f0:	0189      	lsls	r1, r1, #6
 80048f2:	430a      	orrs	r2, r1
 80048f4:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80048f6:	4a0f      	ldr	r2, [pc, #60]	@ (8004934 <HAL_RTC_SetAlarm_IT+0x27c>)
 80048f8:	2380      	movs	r3, #128	@ 0x80
 80048fa:	58d3      	ldr	r3, [r2, r3]
 80048fc:	490d      	ldr	r1, [pc, #52]	@ (8004934 <HAL_RTC_SetAlarm_IT+0x27c>)
 80048fe:	2280      	movs	r2, #128	@ 0x80
 8004900:	0312      	lsls	r2, r2, #12
 8004902:	4313      	orrs	r3, r2
 8004904:	2280      	movs	r2, #128	@ 0x80
 8004906:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	22ff      	movs	r2, #255	@ 0xff
 800490e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2229      	movs	r2, #41	@ 0x29
 8004914:	2101      	movs	r1, #1
 8004916:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2228      	movs	r2, #40	@ 0x28
 800491c:	2100      	movs	r1, #0
 800491e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	0018      	movs	r0, r3
 8004924:	46bd      	mov	sp, r7
 8004926:	b009      	add	sp, #36	@ 0x24
 8004928:	bd90      	pop	{r4, r7, pc}
 800492a:	46c0      	nop			@ (mov r8, r8)
 800492c:	fffffeff 	.word	0xfffffeff
 8004930:	fffffdff 	.word	0xfffffdff
 8004934:	40021800 	.word	0x40021800

08004938 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	2380      	movs	r3, #128	@ 0x80
 8004948:	015b      	lsls	r3, r3, #5
 800494a:	4013      	ands	r3, r2
 800494c:	d011      	beq.n	8004972 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004954:	2201      	movs	r2, #1
 8004956:	4013      	ands	r3, r2
 8004958:	d00b      	beq.n	8004972 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2101      	movs	r1, #1
 8004966:	430a      	orrs	r2, r1
 8004968:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	0018      	movs	r0, r3
 800496e:	f7fc f84b 	bl	8000a08 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699a      	ldr	r2, [r3, #24]
 8004978:	2380      	movs	r3, #128	@ 0x80
 800497a:	019b      	lsls	r3, r3, #6
 800497c:	4013      	ands	r3, r2
 800497e:	d011      	beq.n	80049a4 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004986:	2202      	movs	r2, #2
 8004988:	4013      	ands	r3, r2
 800498a:	d00b      	beq.n	80049a4 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2102      	movs	r1, #2
 8004998:	430a      	orrs	r2, r1
 800499a:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	0018      	movs	r0, r3
 80049a0:	f000 f942 	bl	8004c28 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2229      	movs	r2, #41	@ 0x29
 80049a8:	2101      	movs	r1, #1
 80049aa:	5499      	strb	r1, [r3, r2]
}
 80049ac:	46c0      	nop			@ (mov r8, r8)
 80049ae:	46bd      	mov	sp, r7
 80049b0:	b002      	add	sp, #8
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a0e      	ldr	r2, [pc, #56]	@ (80049fc <HAL_RTC_WaitForSynchro+0x48>)
 80049c2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80049c4:	f7fc ffee 	bl	80019a4 <HAL_GetTick>
 80049c8:	0003      	movs	r3, r0
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80049cc:	e00a      	b.n	80049e4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80049ce:	f7fc ffe9 	bl	80019a4 <HAL_GetTick>
 80049d2:	0002      	movs	r2, r0
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	1ad2      	subs	r2, r2, r3
 80049d8:	23fa      	movs	r3, #250	@ 0xfa
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	429a      	cmp	r2, r3
 80049de:	d901      	bls.n	80049e4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e006      	b.n	80049f2 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	4013      	ands	r3, r2
 80049ee:	d0ee      	beq.n	80049ce <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	0018      	movs	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	b004      	add	sp, #16
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	46c0      	nop			@ (mov r8, r8)
 80049fc:	0001005f 	.word	0x0001005f

08004a00 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004a08:	230f      	movs	r3, #15
 8004a0a:	18fb      	adds	r3, r7, r3
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	2240      	movs	r2, #64	@ 0x40
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d12c      	bne.n	8004a76 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2180      	movs	r1, #128	@ 0x80
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004a2c:	f7fc ffba 	bl	80019a4 <HAL_GetTick>
 8004a30:	0003      	movs	r3, r0
 8004a32:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004a34:	e014      	b.n	8004a60 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a36:	f7fc ffb5 	bl	80019a4 <HAL_GetTick>
 8004a3a:	0002      	movs	r2, r0
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	1ad2      	subs	r2, r2, r3
 8004a40:	200f      	movs	r0, #15
 8004a42:	183b      	adds	r3, r7, r0
 8004a44:	1839      	adds	r1, r7, r0
 8004a46:	7809      	ldrb	r1, [r1, #0]
 8004a48:	7019      	strb	r1, [r3, #0]
 8004a4a:	23fa      	movs	r3, #250	@ 0xfa
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d906      	bls.n	8004a60 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004a52:	183b      	adds	r3, r7, r0
 8004a54:	2203      	movs	r2, #3
 8004a56:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2229      	movs	r2, #41	@ 0x29
 8004a5c:	2103      	movs	r1, #3
 8004a5e:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	2240      	movs	r2, #64	@ 0x40
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d104      	bne.n	8004a76 <RTC_EnterInitMode+0x76>
 8004a6c:	230f      	movs	r3, #15
 8004a6e:	18fb      	adds	r3, r7, r3
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d1df      	bne.n	8004a36 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004a76:	230f      	movs	r3, #15
 8004a78:	18fb      	adds	r3, r7, r3
 8004a7a:	781b      	ldrb	r3, [r3, #0]
}
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	b004      	add	sp, #16
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a84:	b590      	push	{r4, r7, lr}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a8c:	240f      	movs	r4, #15
 8004a8e:	193b      	adds	r3, r7, r4
 8004a90:	2200      	movs	r2, #0
 8004a92:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004a94:	4b1c      	ldr	r3, [pc, #112]	@ (8004b08 <RTC_ExitInitMode+0x84>)
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	4b1b      	ldr	r3, [pc, #108]	@ (8004b08 <RTC_ExitInitMode+0x84>)
 8004a9a:	2180      	movs	r1, #128	@ 0x80
 8004a9c:	438a      	bics	r2, r1
 8004a9e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004aa0:	4b19      	ldr	r3, [pc, #100]	@ (8004b08 <RTC_ExitInitMode+0x84>)
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d10d      	bne.n	8004ac6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	0018      	movs	r0, r3
 8004aae:	f7ff ff81 	bl	80049b4 <HAL_RTC_WaitForSynchro>
 8004ab2:	1e03      	subs	r3, r0, #0
 8004ab4:	d021      	beq.n	8004afa <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2229      	movs	r2, #41	@ 0x29
 8004aba:	2103      	movs	r1, #3
 8004abc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004abe:	193b      	adds	r3, r7, r4
 8004ac0:	2203      	movs	r2, #3
 8004ac2:	701a      	strb	r2, [r3, #0]
 8004ac4:	e019      	b.n	8004afa <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004ac6:	4b10      	ldr	r3, [pc, #64]	@ (8004b08 <RTC_ExitInitMode+0x84>)
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	4b0f      	ldr	r3, [pc, #60]	@ (8004b08 <RTC_ExitInitMode+0x84>)
 8004acc:	2120      	movs	r1, #32
 8004ace:	438a      	bics	r2, r1
 8004ad0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f7ff ff6d 	bl	80049b4 <HAL_RTC_WaitForSynchro>
 8004ada:	1e03      	subs	r3, r0, #0
 8004adc:	d007      	beq.n	8004aee <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2229      	movs	r2, #41	@ 0x29
 8004ae2:	2103      	movs	r1, #3
 8004ae4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004ae6:	230f      	movs	r3, #15
 8004ae8:	18fb      	adds	r3, r7, r3
 8004aea:	2203      	movs	r2, #3
 8004aec:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004aee:	4b06      	ldr	r3, [pc, #24]	@ (8004b08 <RTC_ExitInitMode+0x84>)
 8004af0:	699a      	ldr	r2, [r3, #24]
 8004af2:	4b05      	ldr	r3, [pc, #20]	@ (8004b08 <RTC_ExitInitMode+0x84>)
 8004af4:	2120      	movs	r1, #32
 8004af6:	430a      	orrs	r2, r1
 8004af8:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004afa:	230f      	movs	r3, #15
 8004afc:	18fb      	adds	r3, r7, r3
 8004afe:	781b      	ldrb	r3, [r3, #0]
}
 8004b00:	0018      	movs	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	b005      	add	sp, #20
 8004b06:	bd90      	pop	{r4, r7, pc}
 8004b08:	40002800 	.word	0x40002800

08004b0c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	0002      	movs	r2, r0
 8004b14:	1dfb      	adds	r3, r7, #7
 8004b16:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004b1c:	230b      	movs	r3, #11
 8004b1e:	18fb      	adds	r3, r7, r3
 8004b20:	1dfa      	adds	r2, r7, #7
 8004b22:	7812      	ldrb	r2, [r2, #0]
 8004b24:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004b26:	e008      	b.n	8004b3a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004b2e:	220b      	movs	r2, #11
 8004b30:	18bb      	adds	r3, r7, r2
 8004b32:	18ba      	adds	r2, r7, r2
 8004b34:	7812      	ldrb	r2, [r2, #0]
 8004b36:	3a0a      	subs	r2, #10
 8004b38:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004b3a:	210b      	movs	r1, #11
 8004b3c:	187b      	adds	r3, r7, r1
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b09      	cmp	r3, #9
 8004b42:	d8f1      	bhi.n	8004b28 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	187b      	adds	r3, r7, r1
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	b2db      	uxtb	r3, r3
}
 8004b54:	0018      	movs	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	b004      	add	sp, #16
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	0002      	movs	r2, r0
 8004b64:	1dfb      	adds	r3, r7, #7
 8004b66:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004b68:	1dfb      	adds	r3, r7, #7
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	091b      	lsrs	r3, r3, #4
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	001a      	movs	r2, r3
 8004b72:	0013      	movs	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	189b      	adds	r3, r3, r2
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	1dfb      	adds	r3, r7, #7
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	210f      	movs	r1, #15
 8004b86:	400b      	ands	r3, r1
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	18d3      	adds	r3, r2, r3
 8004b8c:	b2db      	uxtb	r3, r3
}
 8004b8e:	0018      	movs	r0, r3
 8004b90:	46bd      	mov	sp, r7
 8004b92:	b004      	add	sp, #16
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2228      	movs	r2, #40	@ 0x28
 8004ba6:	5c9b      	ldrb	r3, [r3, r2]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e035      	b.n	8004c1c <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2228      	movs	r2, #40	@ 0x28
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2229      	movs	r2, #41	@ 0x29
 8004bbc:	2102      	movs	r1, #2
 8004bbe:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	22ca      	movs	r2, #202	@ 0xca
 8004bc6:	625a      	str	r2, [r3, #36]	@ 0x24
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2253      	movs	r2, #83	@ 0x53
 8004bce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699a      	ldr	r2, [r3, #24]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4912      	ldr	r1, [pc, #72]	@ (8004c24 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8004bdc:	400a      	ands	r2, r1
 8004bde:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6999      	ldr	r1, [r3, #24]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2180      	movs	r1, #128	@ 0x80
 8004bfc:	0409      	lsls	r1, r1, #16
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	22ff      	movs	r2, #255	@ 0xff
 8004c08:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2229      	movs	r2, #41	@ 0x29
 8004c0e:	2101      	movs	r1, #1
 8004c10:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2228      	movs	r2, #40	@ 0x28
 8004c16:	2100      	movs	r1, #0
 8004c18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b002      	add	sp, #8
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	fff7ffff 	.word	0xfff7ffff

08004c28 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004c30:	46c0      	nop			@ (mov r8, r8)
 8004c32:	46bd      	mov	sp, r7
 8004c34:	b002      	add	sp, #8
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e04a      	b.n	8004ce0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	223d      	movs	r2, #61	@ 0x3d
 8004c4e:	5c9b      	ldrb	r3, [r3, r2]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d107      	bne.n	8004c66 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	223c      	movs	r2, #60	@ 0x3c
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	0018      	movs	r0, r3
 8004c62:	f7fc fd51 	bl	8001708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	223d      	movs	r2, #61	@ 0x3d
 8004c6a:	2102      	movs	r1, #2
 8004c6c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3304      	adds	r3, #4
 8004c76:	0019      	movs	r1, r3
 8004c78:	0010      	movs	r0, r2
 8004c7a:	f000 fadd 	bl	8005238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2248      	movs	r2, #72	@ 0x48
 8004c82:	2101      	movs	r1, #1
 8004c84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	223e      	movs	r2, #62	@ 0x3e
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	5499      	strb	r1, [r3, r2]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	223f      	movs	r2, #63	@ 0x3f
 8004c92:	2101      	movs	r1, #1
 8004c94:	5499      	strb	r1, [r3, r2]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2240      	movs	r2, #64	@ 0x40
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	5499      	strb	r1, [r3, r2]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2241      	movs	r2, #65	@ 0x41
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	5499      	strb	r1, [r3, r2]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2242      	movs	r2, #66	@ 0x42
 8004caa:	2101      	movs	r1, #1
 8004cac:	5499      	strb	r1, [r3, r2]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2243      	movs	r2, #67	@ 0x43
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2244      	movs	r2, #68	@ 0x44
 8004cba:	2101      	movs	r1, #1
 8004cbc:	5499      	strb	r1, [r3, r2]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2245      	movs	r2, #69	@ 0x45
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	5499      	strb	r1, [r3, r2]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2246      	movs	r2, #70	@ 0x46
 8004cca:	2101      	movs	r1, #1
 8004ccc:	5499      	strb	r1, [r3, r2]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2247      	movs	r2, #71	@ 0x47
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	223d      	movs	r2, #61	@ 0x3d
 8004cda:	2101      	movs	r1, #1
 8004cdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	b002      	add	sp, #8
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	223d      	movs	r2, #61	@ 0x3d
 8004cf4:	5c9b      	ldrb	r3, [r3, r2]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d001      	beq.n	8004d00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e035      	b.n	8004d6c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	223d      	movs	r2, #61	@ 0x3d
 8004d04:	2102      	movs	r1, #2
 8004d06:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a19      	ldr	r2, [pc, #100]	@ (8004d74 <HAL_TIM_Base_Start+0x8c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00a      	beq.n	8004d28 <HAL_TIM_Base_Start+0x40>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	2380      	movs	r3, #128	@ 0x80
 8004d18:	05db      	lsls	r3, r3, #23
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d004      	beq.n	8004d28 <HAL_TIM_Base_Start+0x40>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a15      	ldr	r2, [pc, #84]	@ (8004d78 <HAL_TIM_Base_Start+0x90>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d116      	bne.n	8004d56 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	4a13      	ldr	r2, [pc, #76]	@ (8004d7c <HAL_TIM_Base_Start+0x94>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b06      	cmp	r3, #6
 8004d38:	d016      	beq.n	8004d68 <HAL_TIM_Base_Start+0x80>
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	2380      	movs	r3, #128	@ 0x80
 8004d3e:	025b      	lsls	r3, r3, #9
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d011      	beq.n	8004d68 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2101      	movs	r1, #1
 8004d50:	430a      	orrs	r2, r1
 8004d52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d54:	e008      	b.n	8004d68 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2101      	movs	r1, #1
 8004d62:	430a      	orrs	r2, r1
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e000      	b.n	8004d6a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d68:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	b004      	add	sp, #16
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40012c00 	.word	0x40012c00
 8004d78:	40000400 	.word	0x40000400
 8004d7c:	00010007 	.word	0x00010007

08004d80 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	4a0d      	ldr	r2, [pc, #52]	@ (8004dc4 <HAL_TIM_Base_Stop+0x44>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	d10d      	bne.n	8004db0 <HAL_TIM_Base_Stop+0x30>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	4a0b      	ldr	r2, [pc, #44]	@ (8004dc8 <HAL_TIM_Base_Stop+0x48>)
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	d107      	bne.n	8004db0 <HAL_TIM_Base_Stop+0x30>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2101      	movs	r1, #1
 8004dac:	438a      	bics	r2, r1
 8004dae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	223d      	movs	r2, #61	@ 0x3d
 8004db4:	2101      	movs	r1, #1
 8004db6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	0018      	movs	r0, r3
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	b002      	add	sp, #8
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	46c0      	nop			@ (mov r8, r8)
 8004dc4:	00001111 	.word	0x00001111
 8004dc8:	00000444 	.word	0x00000444

08004dcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e04a      	b.n	8004e74 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	223d      	movs	r2, #61	@ 0x3d
 8004de2:	5c9b      	ldrb	r3, [r3, r2]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d107      	bne.n	8004dfa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	223c      	movs	r2, #60	@ 0x3c
 8004dee:	2100      	movs	r1, #0
 8004df0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7fc fc6b 	bl	80016d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	223d      	movs	r2, #61	@ 0x3d
 8004dfe:	2102      	movs	r1, #2
 8004e00:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	0019      	movs	r1, r3
 8004e0c:	0010      	movs	r0, r2
 8004e0e:	f000 fa13 	bl	8005238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2248      	movs	r2, #72	@ 0x48
 8004e16:	2101      	movs	r1, #1
 8004e18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	223e      	movs	r2, #62	@ 0x3e
 8004e1e:	2101      	movs	r1, #1
 8004e20:	5499      	strb	r1, [r3, r2]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	223f      	movs	r2, #63	@ 0x3f
 8004e26:	2101      	movs	r1, #1
 8004e28:	5499      	strb	r1, [r3, r2]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2240      	movs	r2, #64	@ 0x40
 8004e2e:	2101      	movs	r1, #1
 8004e30:	5499      	strb	r1, [r3, r2]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2241      	movs	r2, #65	@ 0x41
 8004e36:	2101      	movs	r1, #1
 8004e38:	5499      	strb	r1, [r3, r2]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2242      	movs	r2, #66	@ 0x42
 8004e3e:	2101      	movs	r1, #1
 8004e40:	5499      	strb	r1, [r3, r2]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2243      	movs	r2, #67	@ 0x43
 8004e46:	2101      	movs	r1, #1
 8004e48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2244      	movs	r2, #68	@ 0x44
 8004e4e:	2101      	movs	r1, #1
 8004e50:	5499      	strb	r1, [r3, r2]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2245      	movs	r2, #69	@ 0x45
 8004e56:	2101      	movs	r1, #1
 8004e58:	5499      	strb	r1, [r3, r2]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2246      	movs	r2, #70	@ 0x46
 8004e5e:	2101      	movs	r1, #1
 8004e60:	5499      	strb	r1, [r3, r2]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2247      	movs	r2, #71	@ 0x47
 8004e66:	2101      	movs	r1, #1
 8004e68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	223d      	movs	r2, #61	@ 0x3d
 8004e6e:	2101      	movs	r1, #1
 8004e70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	0018      	movs	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b002      	add	sp, #8
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d108      	bne.n	8004e9e <HAL_TIM_PWM_Start+0x22>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	223e      	movs	r2, #62	@ 0x3e
 8004e90:	5c9b      	ldrb	r3, [r3, r2]
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	1e5a      	subs	r2, r3, #1
 8004e98:	4193      	sbcs	r3, r2
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	e037      	b.n	8004f0e <HAL_TIM_PWM_Start+0x92>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d108      	bne.n	8004eb6 <HAL_TIM_PWM_Start+0x3a>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	223f      	movs	r2, #63	@ 0x3f
 8004ea8:	5c9b      	ldrb	r3, [r3, r2]
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	3b01      	subs	r3, #1
 8004eae:	1e5a      	subs	r2, r3, #1
 8004eb0:	4193      	sbcs	r3, r2
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	e02b      	b.n	8004f0e <HAL_TIM_PWM_Start+0x92>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d108      	bne.n	8004ece <HAL_TIM_PWM_Start+0x52>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2240      	movs	r2, #64	@ 0x40
 8004ec0:	5c9b      	ldrb	r3, [r3, r2]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	1e5a      	subs	r2, r3, #1
 8004ec8:	4193      	sbcs	r3, r2
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	e01f      	b.n	8004f0e <HAL_TIM_PWM_Start+0x92>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b0c      	cmp	r3, #12
 8004ed2:	d108      	bne.n	8004ee6 <HAL_TIM_PWM_Start+0x6a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2241      	movs	r2, #65	@ 0x41
 8004ed8:	5c9b      	ldrb	r3, [r3, r2]
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	1e5a      	subs	r2, r3, #1
 8004ee0:	4193      	sbcs	r3, r2
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	e013      	b.n	8004f0e <HAL_TIM_PWM_Start+0x92>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b10      	cmp	r3, #16
 8004eea:	d108      	bne.n	8004efe <HAL_TIM_PWM_Start+0x82>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2242      	movs	r2, #66	@ 0x42
 8004ef0:	5c9b      	ldrb	r3, [r3, r2]
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	1e5a      	subs	r2, r3, #1
 8004ef8:	4193      	sbcs	r3, r2
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	e007      	b.n	8004f0e <HAL_TIM_PWM_Start+0x92>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2243      	movs	r2, #67	@ 0x43
 8004f02:	5c9b      	ldrb	r3, [r3, r2]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	3b01      	subs	r3, #1
 8004f08:	1e5a      	subs	r2, r3, #1
 8004f0a:	4193      	sbcs	r3, r2
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e081      	b.n	800501a <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d104      	bne.n	8004f26 <HAL_TIM_PWM_Start+0xaa>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	223e      	movs	r2, #62	@ 0x3e
 8004f20:	2102      	movs	r1, #2
 8004f22:	5499      	strb	r1, [r3, r2]
 8004f24:	e023      	b.n	8004f6e <HAL_TIM_PWM_Start+0xf2>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d104      	bne.n	8004f36 <HAL_TIM_PWM_Start+0xba>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	223f      	movs	r2, #63	@ 0x3f
 8004f30:	2102      	movs	r1, #2
 8004f32:	5499      	strb	r1, [r3, r2]
 8004f34:	e01b      	b.n	8004f6e <HAL_TIM_PWM_Start+0xf2>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d104      	bne.n	8004f46 <HAL_TIM_PWM_Start+0xca>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2240      	movs	r2, #64	@ 0x40
 8004f40:	2102      	movs	r1, #2
 8004f42:	5499      	strb	r1, [r3, r2]
 8004f44:	e013      	b.n	8004f6e <HAL_TIM_PWM_Start+0xf2>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b0c      	cmp	r3, #12
 8004f4a:	d104      	bne.n	8004f56 <HAL_TIM_PWM_Start+0xda>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2241      	movs	r2, #65	@ 0x41
 8004f50:	2102      	movs	r1, #2
 8004f52:	5499      	strb	r1, [r3, r2]
 8004f54:	e00b      	b.n	8004f6e <HAL_TIM_PWM_Start+0xf2>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b10      	cmp	r3, #16
 8004f5a:	d104      	bne.n	8004f66 <HAL_TIM_PWM_Start+0xea>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2242      	movs	r2, #66	@ 0x42
 8004f60:	2102      	movs	r1, #2
 8004f62:	5499      	strb	r1, [r3, r2]
 8004f64:	e003      	b.n	8004f6e <HAL_TIM_PWM_Start+0xf2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2243      	movs	r2, #67	@ 0x43
 8004f6a:	2102      	movs	r1, #2
 8004f6c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6839      	ldr	r1, [r7, #0]
 8004f74:	2201      	movs	r2, #1
 8004f76:	0018      	movs	r0, r3
 8004f78:	f000 fc7e 	bl	8005878 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a28      	ldr	r2, [pc, #160]	@ (8005024 <HAL_TIM_PWM_Start+0x1a8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d009      	beq.n	8004f9a <HAL_TIM_PWM_Start+0x11e>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a27      	ldr	r2, [pc, #156]	@ (8005028 <HAL_TIM_PWM_Start+0x1ac>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d004      	beq.n	8004f9a <HAL_TIM_PWM_Start+0x11e>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a25      	ldr	r2, [pc, #148]	@ (800502c <HAL_TIM_PWM_Start+0x1b0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d101      	bne.n	8004f9e <HAL_TIM_PWM_Start+0x122>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <HAL_TIM_PWM_Start+0x124>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2180      	movs	r1, #128	@ 0x80
 8004fb0:	0209      	lsls	r1, r1, #8
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a1a      	ldr	r2, [pc, #104]	@ (8005024 <HAL_TIM_PWM_Start+0x1a8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00a      	beq.n	8004fd6 <HAL_TIM_PWM_Start+0x15a>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	2380      	movs	r3, #128	@ 0x80
 8004fc6:	05db      	lsls	r3, r3, #23
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d004      	beq.n	8004fd6 <HAL_TIM_PWM_Start+0x15a>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a17      	ldr	r2, [pc, #92]	@ (8005030 <HAL_TIM_PWM_Start+0x1b4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d116      	bne.n	8005004 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	4a15      	ldr	r2, [pc, #84]	@ (8005034 <HAL_TIM_PWM_Start+0x1b8>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b06      	cmp	r3, #6
 8004fe6:	d016      	beq.n	8005016 <HAL_TIM_PWM_Start+0x19a>
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	2380      	movs	r3, #128	@ 0x80
 8004fec:	025b      	lsls	r3, r3, #9
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d011      	beq.n	8005016 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	430a      	orrs	r2, r1
 8005000:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005002:	e008      	b.n	8005016 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2101      	movs	r1, #1
 8005010:	430a      	orrs	r2, r1
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e000      	b.n	8005018 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005016:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	0018      	movs	r0, r3
 800501c:	46bd      	mov	sp, r7
 800501e:	b004      	add	sp, #16
 8005020:	bd80      	pop	{r7, pc}
 8005022:	46c0      	nop			@ (mov r8, r8)
 8005024:	40012c00 	.word	0x40012c00
 8005028:	40014400 	.word	0x40014400
 800502c:	40014800 	.word	0x40014800
 8005030:	40000400 	.word	0x40000400
 8005034:	00010007 	.word	0x00010007

08005038 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005044:	2317      	movs	r3, #23
 8005046:	18fb      	adds	r3, r7, r3
 8005048:	2200      	movs	r2, #0
 800504a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	223c      	movs	r2, #60	@ 0x3c
 8005050:	5c9b      	ldrb	r3, [r3, r2]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <HAL_TIM_PWM_ConfigChannel+0x22>
 8005056:	2302      	movs	r3, #2
 8005058:	e0e5      	b.n	8005226 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	223c      	movs	r2, #60	@ 0x3c
 800505e:	2101      	movs	r1, #1
 8005060:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b14      	cmp	r3, #20
 8005066:	d900      	bls.n	800506a <HAL_TIM_PWM_ConfigChannel+0x32>
 8005068:	e0d1      	b.n	800520e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	009a      	lsls	r2, r3, #2
 800506e:	4b70      	ldr	r3, [pc, #448]	@ (8005230 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005070:	18d3      	adds	r3, r2, r3
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	0011      	movs	r1, r2
 800507e:	0018      	movs	r0, r3
 8005080:	f000 f95e 	bl	8005340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	699a      	ldr	r2, [r3, #24]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2108      	movs	r1, #8
 8005090:	430a      	orrs	r2, r1
 8005092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2104      	movs	r1, #4
 80050a0:	438a      	bics	r2, r1
 80050a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6999      	ldr	r1, [r3, #24]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	619a      	str	r2, [r3, #24]
      break;
 80050b6:	e0af      	b.n	8005218 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	0011      	movs	r1, r2
 80050c0:	0018      	movs	r0, r3
 80050c2:	f000 f9bd 	bl	8005440 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	699a      	ldr	r2, [r3, #24]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2180      	movs	r1, #128	@ 0x80
 80050d2:	0109      	lsls	r1, r1, #4
 80050d4:	430a      	orrs	r2, r1
 80050d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4954      	ldr	r1, [pc, #336]	@ (8005234 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80050e4:	400a      	ands	r2, r1
 80050e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6999      	ldr	r1, [r3, #24]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	021a      	lsls	r2, r3, #8
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	619a      	str	r2, [r3, #24]
      break;
 80050fc:	e08c      	b.n	8005218 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	0011      	movs	r1, r2
 8005106:	0018      	movs	r0, r3
 8005108:	f000 fa18 	bl	800553c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	69da      	ldr	r2, [r3, #28]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2108      	movs	r1, #8
 8005118:	430a      	orrs	r2, r1
 800511a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69da      	ldr	r2, [r3, #28]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2104      	movs	r1, #4
 8005128:	438a      	bics	r2, r1
 800512a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69d9      	ldr	r1, [r3, #28]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	61da      	str	r2, [r3, #28]
      break;
 800513e:	e06b      	b.n	8005218 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	0011      	movs	r1, r2
 8005148:	0018      	movs	r0, r3
 800514a:	f000 fa79 	bl	8005640 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69da      	ldr	r2, [r3, #28]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2180      	movs	r1, #128	@ 0x80
 800515a:	0109      	lsls	r1, r1, #4
 800515c:	430a      	orrs	r2, r1
 800515e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69da      	ldr	r2, [r3, #28]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4932      	ldr	r1, [pc, #200]	@ (8005234 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800516c:	400a      	ands	r2, r1
 800516e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	69d9      	ldr	r1, [r3, #28]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	021a      	lsls	r2, r3, #8
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	61da      	str	r2, [r3, #28]
      break;
 8005184:	e048      	b.n	8005218 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	0011      	movs	r1, r2
 800518e:	0018      	movs	r0, r3
 8005190:	f000 faba 	bl	8005708 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2108      	movs	r1, #8
 80051a0:	430a      	orrs	r2, r1
 80051a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2104      	movs	r1, #4
 80051b0:	438a      	bics	r2, r1
 80051b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80051c6:	e027      	b.n	8005218 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	0011      	movs	r1, r2
 80051d0:	0018      	movs	r0, r3
 80051d2:	f000 faf3 	bl	80057bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2180      	movs	r1, #128	@ 0x80
 80051e2:	0109      	lsls	r1, r1, #4
 80051e4:	430a      	orrs	r2, r1
 80051e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4910      	ldr	r1, [pc, #64]	@ (8005234 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80051f4:	400a      	ands	r2, r1
 80051f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	021a      	lsls	r2, r3, #8
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800520c:	e004      	b.n	8005218 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800520e:	2317      	movs	r3, #23
 8005210:	18fb      	adds	r3, r7, r3
 8005212:	2201      	movs	r2, #1
 8005214:	701a      	strb	r2, [r3, #0]
      break;
 8005216:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	223c      	movs	r2, #60	@ 0x3c
 800521c:	2100      	movs	r1, #0
 800521e:	5499      	strb	r1, [r3, r2]

  return status;
 8005220:	2317      	movs	r3, #23
 8005222:	18fb      	adds	r3, r7, r3
 8005224:	781b      	ldrb	r3, [r3, #0]
}
 8005226:	0018      	movs	r0, r3
 8005228:	46bd      	mov	sp, r7
 800522a:	b006      	add	sp, #24
 800522c:	bd80      	pop	{r7, pc}
 800522e:	46c0      	nop			@ (mov r8, r8)
 8005230:	08005a54 	.word	0x08005a54
 8005234:	fffffbff 	.word	0xfffffbff

08005238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a37      	ldr	r2, [pc, #220]	@ (8005328 <TIM_Base_SetConfig+0xf0>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d008      	beq.n	8005262 <TIM_Base_SetConfig+0x2a>
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	2380      	movs	r3, #128	@ 0x80
 8005254:	05db      	lsls	r3, r3, #23
 8005256:	429a      	cmp	r2, r3
 8005258:	d003      	beq.n	8005262 <TIM_Base_SetConfig+0x2a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a33      	ldr	r2, [pc, #204]	@ (800532c <TIM_Base_SetConfig+0xf4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d108      	bne.n	8005274 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2270      	movs	r2, #112	@ 0x70
 8005266:	4393      	bics	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	4313      	orrs	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a2c      	ldr	r2, [pc, #176]	@ (8005328 <TIM_Base_SetConfig+0xf0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d014      	beq.n	80052a6 <TIM_Base_SetConfig+0x6e>
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	2380      	movs	r3, #128	@ 0x80
 8005280:	05db      	lsls	r3, r3, #23
 8005282:	429a      	cmp	r2, r3
 8005284:	d00f      	beq.n	80052a6 <TIM_Base_SetConfig+0x6e>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a28      	ldr	r2, [pc, #160]	@ (800532c <TIM_Base_SetConfig+0xf4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00b      	beq.n	80052a6 <TIM_Base_SetConfig+0x6e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a27      	ldr	r2, [pc, #156]	@ (8005330 <TIM_Base_SetConfig+0xf8>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d007      	beq.n	80052a6 <TIM_Base_SetConfig+0x6e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a26      	ldr	r2, [pc, #152]	@ (8005334 <TIM_Base_SetConfig+0xfc>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d003      	beq.n	80052a6 <TIM_Base_SetConfig+0x6e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a25      	ldr	r2, [pc, #148]	@ (8005338 <TIM_Base_SetConfig+0x100>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d108      	bne.n	80052b8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4a24      	ldr	r2, [pc, #144]	@ (800533c <TIM_Base_SetConfig+0x104>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2280      	movs	r2, #128	@ 0x80
 80052bc:	4393      	bics	r3, r2
 80052be:	001a      	movs	r2, r3
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a11      	ldr	r2, [pc, #68]	@ (8005328 <TIM_Base_SetConfig+0xf0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d007      	beq.n	80052f6 <TIM_Base_SetConfig+0xbe>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a12      	ldr	r2, [pc, #72]	@ (8005334 <TIM_Base_SetConfig+0xfc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d003      	beq.n	80052f6 <TIM_Base_SetConfig+0xbe>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a11      	ldr	r2, [pc, #68]	@ (8005338 <TIM_Base_SetConfig+0x100>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d103      	bne.n	80052fe <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	691a      	ldr	r2, [r3, #16]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	2201      	movs	r2, #1
 800530a:	4013      	ands	r3, r2
 800530c:	2b01      	cmp	r3, #1
 800530e:	d106      	bne.n	800531e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	2201      	movs	r2, #1
 8005316:	4393      	bics	r3, r2
 8005318:	001a      	movs	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	611a      	str	r2, [r3, #16]
  }
}
 800531e:	46c0      	nop			@ (mov r8, r8)
 8005320:	46bd      	mov	sp, r7
 8005322:	b004      	add	sp, #16
 8005324:	bd80      	pop	{r7, pc}
 8005326:	46c0      	nop			@ (mov r8, r8)
 8005328:	40012c00 	.word	0x40012c00
 800532c:	40000400 	.word	0x40000400
 8005330:	40002000 	.word	0x40002000
 8005334:	40014400 	.word	0x40014400
 8005338:	40014800 	.word	0x40014800
 800533c:	fffffcff 	.word	0xfffffcff

08005340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	2201      	movs	r2, #1
 8005356:	4393      	bics	r3, r2
 8005358:	001a      	movs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4a2e      	ldr	r2, [pc, #184]	@ (8005428 <TIM_OC1_SetConfig+0xe8>)
 800536e:	4013      	ands	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2203      	movs	r2, #3
 8005376:	4393      	bics	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	4313      	orrs	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	2202      	movs	r2, #2
 8005388:	4393      	bics	r3, r2
 800538a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a24      	ldr	r2, [pc, #144]	@ (800542c <TIM_OC1_SetConfig+0xec>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d007      	beq.n	80053ae <TIM_OC1_SetConfig+0x6e>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a23      	ldr	r2, [pc, #140]	@ (8005430 <TIM_OC1_SetConfig+0xf0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d003      	beq.n	80053ae <TIM_OC1_SetConfig+0x6e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a22      	ldr	r2, [pc, #136]	@ (8005434 <TIM_OC1_SetConfig+0xf4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d10c      	bne.n	80053c8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2208      	movs	r2, #8
 80053b2:	4393      	bics	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4313      	orrs	r3, r2
 80053be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2204      	movs	r2, #4
 80053c4:	4393      	bics	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a18      	ldr	r2, [pc, #96]	@ (800542c <TIM_OC1_SetConfig+0xec>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d007      	beq.n	80053e0 <TIM_OC1_SetConfig+0xa0>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a17      	ldr	r2, [pc, #92]	@ (8005430 <TIM_OC1_SetConfig+0xf0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d003      	beq.n	80053e0 <TIM_OC1_SetConfig+0xa0>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a16      	ldr	r2, [pc, #88]	@ (8005434 <TIM_OC1_SetConfig+0xf4>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d111      	bne.n	8005404 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4a15      	ldr	r2, [pc, #84]	@ (8005438 <TIM_OC1_SetConfig+0xf8>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	4a14      	ldr	r2, [pc, #80]	@ (800543c <TIM_OC1_SetConfig+0xfc>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	621a      	str	r2, [r3, #32]
}
 800541e:	46c0      	nop			@ (mov r8, r8)
 8005420:	46bd      	mov	sp, r7
 8005422:	b006      	add	sp, #24
 8005424:	bd80      	pop	{r7, pc}
 8005426:	46c0      	nop			@ (mov r8, r8)
 8005428:	fffeff8f 	.word	0xfffeff8f
 800542c:	40012c00 	.word	0x40012c00
 8005430:	40014400 	.word	0x40014400
 8005434:	40014800 	.word	0x40014800
 8005438:	fffffeff 	.word	0xfffffeff
 800543c:	fffffdff 	.word	0xfffffdff

08005440 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	2210      	movs	r2, #16
 8005456:	4393      	bics	r3, r2
 8005458:	001a      	movs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4a2c      	ldr	r2, [pc, #176]	@ (8005520 <TIM_OC2_SetConfig+0xe0>)
 800546e:	4013      	ands	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4a2b      	ldr	r2, [pc, #172]	@ (8005524 <TIM_OC2_SetConfig+0xe4>)
 8005476:	4013      	ands	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	021b      	lsls	r3, r3, #8
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2220      	movs	r2, #32
 800548a:	4393      	bics	r3, r2
 800548c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	4313      	orrs	r3, r2
 8005498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a22      	ldr	r2, [pc, #136]	@ (8005528 <TIM_OC2_SetConfig+0xe8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d10d      	bne.n	80054be <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2280      	movs	r2, #128	@ 0x80
 80054a6:	4393      	bics	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2240      	movs	r2, #64	@ 0x40
 80054ba:	4393      	bics	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a19      	ldr	r2, [pc, #100]	@ (8005528 <TIM_OC2_SetConfig+0xe8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d007      	beq.n	80054d6 <TIM_OC2_SetConfig+0x96>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a18      	ldr	r2, [pc, #96]	@ (800552c <TIM_OC2_SetConfig+0xec>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d003      	beq.n	80054d6 <TIM_OC2_SetConfig+0x96>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a17      	ldr	r2, [pc, #92]	@ (8005530 <TIM_OC2_SetConfig+0xf0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d113      	bne.n	80054fe <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	4a16      	ldr	r2, [pc, #88]	@ (8005534 <TIM_OC2_SetConfig+0xf4>)
 80054da:	4013      	ands	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	4a15      	ldr	r2, [pc, #84]	@ (8005538 <TIM_OC2_SetConfig+0xf8>)
 80054e2:	4013      	ands	r3, r2
 80054e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	621a      	str	r2, [r3, #32]
}
 8005518:	46c0      	nop			@ (mov r8, r8)
 800551a:	46bd      	mov	sp, r7
 800551c:	b006      	add	sp, #24
 800551e:	bd80      	pop	{r7, pc}
 8005520:	feff8fff 	.word	0xfeff8fff
 8005524:	fffffcff 	.word	0xfffffcff
 8005528:	40012c00 	.word	0x40012c00
 800552c:	40014400 	.word	0x40014400
 8005530:	40014800 	.word	0x40014800
 8005534:	fffffbff 	.word	0xfffffbff
 8005538:	fffff7ff 	.word	0xfffff7ff

0800553c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	4a31      	ldr	r2, [pc, #196]	@ (8005618 <TIM_OC3_SetConfig+0xdc>)
 8005552:	401a      	ands	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4a2d      	ldr	r2, [pc, #180]	@ (800561c <TIM_OC3_SetConfig+0xe0>)
 8005568:	4013      	ands	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2203      	movs	r2, #3
 8005570:	4393      	bics	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	4a27      	ldr	r2, [pc, #156]	@ (8005620 <TIM_OC3_SetConfig+0xe4>)
 8005582:	4013      	ands	r3, r2
 8005584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a23      	ldr	r2, [pc, #140]	@ (8005624 <TIM_OC3_SetConfig+0xe8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d10d      	bne.n	80055b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	4a22      	ldr	r2, [pc, #136]	@ (8005628 <TIM_OC3_SetConfig+0xec>)
 800559e:	4013      	ands	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	4a1e      	ldr	r2, [pc, #120]	@ (800562c <TIM_OC3_SetConfig+0xf0>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005624 <TIM_OC3_SetConfig+0xe8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d007      	beq.n	80055ce <TIM_OC3_SetConfig+0x92>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005630 <TIM_OC3_SetConfig+0xf4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d003      	beq.n	80055ce <TIM_OC3_SetConfig+0x92>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005634 <TIM_OC3_SetConfig+0xf8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d113      	bne.n	80055f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	4a19      	ldr	r2, [pc, #100]	@ (8005638 <TIM_OC3_SetConfig+0xfc>)
 80055d2:	4013      	ands	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	4a18      	ldr	r2, [pc, #96]	@ (800563c <TIM_OC3_SetConfig+0x100>)
 80055da:	4013      	ands	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	621a      	str	r2, [r3, #32]
}
 8005610:	46c0      	nop			@ (mov r8, r8)
 8005612:	46bd      	mov	sp, r7
 8005614:	b006      	add	sp, #24
 8005616:	bd80      	pop	{r7, pc}
 8005618:	fffffeff 	.word	0xfffffeff
 800561c:	fffeff8f 	.word	0xfffeff8f
 8005620:	fffffdff 	.word	0xfffffdff
 8005624:	40012c00 	.word	0x40012c00
 8005628:	fffff7ff 	.word	0xfffff7ff
 800562c:	fffffbff 	.word	0xfffffbff
 8005630:	40014400 	.word	0x40014400
 8005634:	40014800 	.word	0x40014800
 8005638:	ffffefff 	.word	0xffffefff
 800563c:	ffffdfff 	.word	0xffffdfff

08005640 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	4a24      	ldr	r2, [pc, #144]	@ (80056e8 <TIM_OC4_SetConfig+0xa8>)
 8005656:	401a      	ands	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4a20      	ldr	r2, [pc, #128]	@ (80056ec <TIM_OC4_SetConfig+0xac>)
 800566c:	4013      	ands	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4a1f      	ldr	r2, [pc, #124]	@ (80056f0 <TIM_OC4_SetConfig+0xb0>)
 8005674:	4013      	ands	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	021b      	lsls	r3, r3, #8
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	4313      	orrs	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4a1b      	ldr	r2, [pc, #108]	@ (80056f4 <TIM_OC4_SetConfig+0xb4>)
 8005688:	4013      	ands	r3, r2
 800568a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	031b      	lsls	r3, r3, #12
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a17      	ldr	r2, [pc, #92]	@ (80056f8 <TIM_OC4_SetConfig+0xb8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d007      	beq.n	80056b0 <TIM_OC4_SetConfig+0x70>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a16      	ldr	r2, [pc, #88]	@ (80056fc <TIM_OC4_SetConfig+0xbc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d003      	beq.n	80056b0 <TIM_OC4_SetConfig+0x70>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a15      	ldr	r2, [pc, #84]	@ (8005700 <TIM_OC4_SetConfig+0xc0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d109      	bne.n	80056c4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	4a14      	ldr	r2, [pc, #80]	@ (8005704 <TIM_OC4_SetConfig+0xc4>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	019b      	lsls	r3, r3, #6
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	621a      	str	r2, [r3, #32]
}
 80056de:	46c0      	nop			@ (mov r8, r8)
 80056e0:	46bd      	mov	sp, r7
 80056e2:	b006      	add	sp, #24
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	46c0      	nop			@ (mov r8, r8)
 80056e8:	ffffefff 	.word	0xffffefff
 80056ec:	feff8fff 	.word	0xfeff8fff
 80056f0:	fffffcff 	.word	0xfffffcff
 80056f4:	ffffdfff 	.word	0xffffdfff
 80056f8:	40012c00 	.word	0x40012c00
 80056fc:	40014400 	.word	0x40014400
 8005700:	40014800 	.word	0x40014800
 8005704:	ffffbfff 	.word	0xffffbfff

08005708 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	4a21      	ldr	r2, [pc, #132]	@ (80057a4 <TIM_OC5_SetConfig+0x9c>)
 800571e:	401a      	ands	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4a1d      	ldr	r2, [pc, #116]	@ (80057a8 <TIM_OC5_SetConfig+0xa0>)
 8005734:	4013      	ands	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	4a19      	ldr	r2, [pc, #100]	@ (80057ac <TIM_OC5_SetConfig+0xa4>)
 8005746:	4013      	ands	r3, r2
 8005748:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	041b      	lsls	r3, r3, #16
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a15      	ldr	r2, [pc, #84]	@ (80057b0 <TIM_OC5_SetConfig+0xa8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d007      	beq.n	800576e <TIM_OC5_SetConfig+0x66>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a14      	ldr	r2, [pc, #80]	@ (80057b4 <TIM_OC5_SetConfig+0xac>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d003      	beq.n	800576e <TIM_OC5_SetConfig+0x66>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a13      	ldr	r2, [pc, #76]	@ (80057b8 <TIM_OC5_SetConfig+0xb0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d109      	bne.n	8005782 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	4a0c      	ldr	r2, [pc, #48]	@ (80057a4 <TIM_OC5_SetConfig+0x9c>)
 8005772:	4013      	ands	r3, r2
 8005774:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	021b      	lsls	r3, r3, #8
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	621a      	str	r2, [r3, #32]
}
 800579c:	46c0      	nop			@ (mov r8, r8)
 800579e:	46bd      	mov	sp, r7
 80057a0:	b006      	add	sp, #24
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	fffeffff 	.word	0xfffeffff
 80057a8:	fffeff8f 	.word	0xfffeff8f
 80057ac:	fffdffff 	.word	0xfffdffff
 80057b0:	40012c00 	.word	0x40012c00
 80057b4:	40014400 	.word	0x40014400
 80057b8:	40014800 	.word	0x40014800

080057bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	4a22      	ldr	r2, [pc, #136]	@ (800585c <TIM_OC6_SetConfig+0xa0>)
 80057d2:	401a      	ands	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005860 <TIM_OC6_SetConfig+0xa4>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005864 <TIM_OC6_SetConfig+0xa8>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	051b      	lsls	r3, r3, #20
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	4313      	orrs	r3, r2
 800580a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a16      	ldr	r2, [pc, #88]	@ (8005868 <TIM_OC6_SetConfig+0xac>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d007      	beq.n	8005824 <TIM_OC6_SetConfig+0x68>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a15      	ldr	r2, [pc, #84]	@ (800586c <TIM_OC6_SetConfig+0xb0>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <TIM_OC6_SetConfig+0x68>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a14      	ldr	r2, [pc, #80]	@ (8005870 <TIM_OC6_SetConfig+0xb4>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d109      	bne.n	8005838 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	4a13      	ldr	r2, [pc, #76]	@ (8005874 <TIM_OC6_SetConfig+0xb8>)
 8005828:	4013      	ands	r3, r2
 800582a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	029b      	lsls	r3, r3, #10
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	621a      	str	r2, [r3, #32]
}
 8005852:	46c0      	nop			@ (mov r8, r8)
 8005854:	46bd      	mov	sp, r7
 8005856:	b006      	add	sp, #24
 8005858:	bd80      	pop	{r7, pc}
 800585a:	46c0      	nop			@ (mov r8, r8)
 800585c:	ffefffff 	.word	0xffefffff
 8005860:	feff8fff 	.word	0xfeff8fff
 8005864:	ffdfffff 	.word	0xffdfffff
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40014400 	.word	0x40014400
 8005870:	40014800 	.word	0x40014800
 8005874:	fffbffff 	.word	0xfffbffff

08005878 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	221f      	movs	r2, #31
 8005888:	4013      	ands	r3, r2
 800588a:	2201      	movs	r2, #1
 800588c:	409a      	lsls	r2, r3
 800588e:	0013      	movs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	43d2      	mvns	r2, r2
 800589a:	401a      	ands	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a1a      	ldr	r2, [r3, #32]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	211f      	movs	r1, #31
 80058a8:	400b      	ands	r3, r1
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	4099      	lsls	r1, r3
 80058ae:	000b      	movs	r3, r1
 80058b0:	431a      	orrs	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	621a      	str	r2, [r3, #32]
}
 80058b6:	46c0      	nop			@ (mov r8, r8)
 80058b8:	46bd      	mov	sp, r7
 80058ba:	b006      	add	sp, #24
 80058bc:	bd80      	pop	{r7, pc}
	...

080058c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	223c      	movs	r2, #60	@ 0x3c
 80058ce:	5c9b      	ldrb	r3, [r3, r2]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d101      	bne.n	80058d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058d4:	2302      	movs	r3, #2
 80058d6:	e050      	b.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	223c      	movs	r2, #60	@ 0x3c
 80058dc:	2101      	movs	r1, #1
 80058de:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	223d      	movs	r2, #61	@ 0x3d
 80058e4:	2102      	movs	r1, #2
 80058e6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a21      	ldr	r2, [pc, #132]	@ (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d108      	bne.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4a20      	ldr	r2, [pc, #128]	@ (8005988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005906:	4013      	ands	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4313      	orrs	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2270      	movs	r2, #112	@ 0x70
 8005918:	4393      	bics	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a14      	ldr	r2, [pc, #80]	@ (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00a      	beq.n	800594e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	2380      	movs	r3, #128	@ 0x80
 800593e:	05db      	lsls	r3, r3, #23
 8005940:	429a      	cmp	r2, r3
 8005942:	d004      	beq.n	800594e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a10      	ldr	r2, [pc, #64]	@ (800598c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d10c      	bne.n	8005968 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2280      	movs	r2, #128	@ 0x80
 8005952:	4393      	bics	r3, r2
 8005954:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	4313      	orrs	r3, r2
 800595e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	223d      	movs	r2, #61	@ 0x3d
 800596c:	2101      	movs	r1, #1
 800596e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	223c      	movs	r2, #60	@ 0x3c
 8005974:	2100      	movs	r1, #0
 8005976:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	0018      	movs	r0, r3
 800597c:	46bd      	mov	sp, r7
 800597e:	b004      	add	sp, #16
 8005980:	bd80      	pop	{r7, pc}
 8005982:	46c0      	nop			@ (mov r8, r8)
 8005984:	40012c00 	.word	0x40012c00
 8005988:	ff0fffff 	.word	0xff0fffff
 800598c:	40000400 	.word	0x40000400

08005990 <memset>:
 8005990:	0003      	movs	r3, r0
 8005992:	1882      	adds	r2, r0, r2
 8005994:	4293      	cmp	r3, r2
 8005996:	d100      	bne.n	800599a <memset+0xa>
 8005998:	4770      	bx	lr
 800599a:	7019      	strb	r1, [r3, #0]
 800599c:	3301      	adds	r3, #1
 800599e:	e7f9      	b.n	8005994 <memset+0x4>

080059a0 <__libc_init_array>:
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	2600      	movs	r6, #0
 80059a4:	4c0c      	ldr	r4, [pc, #48]	@ (80059d8 <__libc_init_array+0x38>)
 80059a6:	4d0d      	ldr	r5, [pc, #52]	@ (80059dc <__libc_init_array+0x3c>)
 80059a8:	1b64      	subs	r4, r4, r5
 80059aa:	10a4      	asrs	r4, r4, #2
 80059ac:	42a6      	cmp	r6, r4
 80059ae:	d109      	bne.n	80059c4 <__libc_init_array+0x24>
 80059b0:	2600      	movs	r6, #0
 80059b2:	f000 f819 	bl	80059e8 <_init>
 80059b6:	4c0a      	ldr	r4, [pc, #40]	@ (80059e0 <__libc_init_array+0x40>)
 80059b8:	4d0a      	ldr	r5, [pc, #40]	@ (80059e4 <__libc_init_array+0x44>)
 80059ba:	1b64      	subs	r4, r4, r5
 80059bc:	10a4      	asrs	r4, r4, #2
 80059be:	42a6      	cmp	r6, r4
 80059c0:	d105      	bne.n	80059ce <__libc_init_array+0x2e>
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	00b3      	lsls	r3, r6, #2
 80059c6:	58eb      	ldr	r3, [r5, r3]
 80059c8:	4798      	blx	r3
 80059ca:	3601      	adds	r6, #1
 80059cc:	e7ee      	b.n	80059ac <__libc_init_array+0xc>
 80059ce:	00b3      	lsls	r3, r6, #2
 80059d0:	58eb      	ldr	r3, [r5, r3]
 80059d2:	4798      	blx	r3
 80059d4:	3601      	adds	r6, #1
 80059d6:	e7f2      	b.n	80059be <__libc_init_array+0x1e>
 80059d8:	08005aa8 	.word	0x08005aa8
 80059dc:	08005aa8 	.word	0x08005aa8
 80059e0:	08005aac 	.word	0x08005aac
 80059e4:	08005aa8 	.word	0x08005aa8

080059e8 <_init>:
 80059e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ea:	46c0      	nop			@ (mov r8, r8)
 80059ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ee:	bc08      	pop	{r3}
 80059f0:	469e      	mov	lr, r3
 80059f2:	4770      	bx	lr

080059f4 <_fini>:
 80059f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f6:	46c0      	nop			@ (mov r8, r8)
 80059f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fa:	bc08      	pop	{r3}
 80059fc:	469e      	mov	lr, r3
 80059fe:	4770      	bx	lr
