
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061ec  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080062a8  080062a8  000072a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006374  08006374  00008074  2**0
                  CONTENTS
  4 .ARM          00000000  08006374  08006374  00008074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006374  08006374  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006374  08006374  00007374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006378  08006378  00007378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800637c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000074  080063f0  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080063f0  000082a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ce1  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd0  00000000  00000000  0001ad7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0001d950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2b  00000000  00000000  0001eb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018116  00000000  00000000  0001f9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165b5  00000000  00000000  00037ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098455  00000000  00000000  0004e076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e64cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041d0  00000000  00000000  000e6510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000ea6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006290 	.word	0x08006290

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	08006290 	.word	0x08006290

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	b089      	sub	sp, #36	@ 0x24
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231f      	movs	r3, #31
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	2108      	movs	r1, #8
 800024a:	185b      	adds	r3, r3, r1
 800024c:	19db      	adds	r3, r3, r7
 800024e:	881b      	ldrh	r3, [r3, #0]
 8000250:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-high hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	6818      	ldr	r0, [r3, #0]
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	899b      	ldrh	r3, [r3, #12]
 800025c:	2201      	movs	r2, #1
 800025e:	0019      	movs	r1, r3
 8000260:	f002 fb27 	bl	80028b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	689b      	ldr	r3, [r3, #8]
 8000268:	6818      	ldr	r0, [r3, #0]
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	899b      	ldrh	r3, [r3, #12]
 800026e:	2200      	movs	r2, #0
 8000270:	0019      	movs	r1, r3
 8000272:	f002 fb1e 	bl	80028b2 <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	0018      	movs	r0, r3
 800027c:	f005 f808 	bl	8005290 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	0018      	movs	r0, r3
 8000286:	f004 ffb7 	bl	80051f8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000292:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000294:	46c0      	nop			@ (mov r8, r8)
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029e:	69bb      	ldr	r3, [r7, #24]
 80002a0:	1ad2      	subs	r2, r2, r3
 80002a2:	2380      	movs	r3, #128	@ 0x80
 80002a4:	021b      	lsls	r3, r3, #8
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d3f5      	bcc.n	8000296 <capTouch_Init+0x7a>

	// Verify device ID
	uint8_t deviceIDRet = 0x00;
 80002aa:	2517      	movs	r5, #23
 80002ac:	197b      	adds	r3, r7, r5
 80002ae:	2200      	movs	r2, #0
 80002b0:	701a      	strb	r2, [r3, #0]
	halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b2:	261f      	movs	r6, #31
 80002b4:	19bc      	adds	r4, r7, r6
 80002b6:	197a      	adds	r2, r7, r5
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	0011      	movs	r1, r2
 80002bc:	0018      	movs	r0, r3
 80002be:	f000 f855 	bl	800036c <capTouch_ReadDeviceID>
 80002c2:	0003      	movs	r3, r0
 80002c4:	7023      	strb	r3, [r4, #0]

	if(deviceIDRet != DEVICE_ID || halRet != HAL_OK) {
 80002c6:	197b      	adds	r3, r7, r5
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80002cc:	d103      	bne.n	80002d6 <capTouch_Init+0xba>
 80002ce:	19bb      	adds	r3, r7, r6
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <capTouch_Init+0xbe>
		return 1;
 80002d6:	2301      	movs	r3, #1
 80002d8:	e043      	b.n	8000362 <capTouch_Init+0x146>
	}

	capTouch->deviceID = deviceIDRet;
 80002da:	2317      	movs	r3, #23
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	781a      	ldrb	r2, [r3, #0]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	739a      	strb	r2, [r3, #14]

	// Force Device Recalibration
	halRet = capTouch_Recalibrate(capTouch);
 80002e4:	251f      	movs	r5, #31
 80002e6:	197c      	adds	r4, r7, r5
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 f880 	bl	80003f0 <capTouch_Recalibrate>
 80002f0:	0003      	movs	r3, r0
 80002f2:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 80002f4:	197b      	adds	r3, r7, r5
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <capTouch_Init+0xe4>
		return 2;
 80002fc:	2302      	movs	r3, #2
 80002fe:	e030      	b.n	8000362 <capTouch_Init+0x146>
	}

	// Wait until calibration sequence completes
	while(capTouch_checkCal(capTouch)) {}
 8000300:	46c0      	nop			@ (mov r8, r8)
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	0018      	movs	r0, r3
 8000306:	f000 f895 	bl	8000434 <capTouch_checkCal>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d1f9      	bne.n	8000302 <capTouch_Init+0xe6>

	// Get initial reading of channels
	halRet = capTouch_readChannels(capTouch);
 800030e:	251f      	movs	r5, #31
 8000310:	197c      	adds	r4, r7, r5
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	0018      	movs	r0, r3
 8000316:	f000 f8d1 	bl	80004bc <capTouch_readChannels>
 800031a:	0003      	movs	r3, r0
 800031c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 800031e:	197b      	adds	r3, r7, r5
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <capTouch_Init+0x10e>
		return 3;
 8000326:	2303      	movs	r3, #3
 8000328:	e01b      	b.n	8000362 <capTouch_Init+0x146>
	}

	halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 800032a:	251f      	movs	r5, #31
 800032c:	197c      	adds	r4, r7, r5
 800032e:	2334      	movs	r3, #52	@ 0x34
 8000330:	2208      	movs	r2, #8
 8000332:	189b      	adds	r3, r3, r2
 8000334:	19db      	adds	r3, r3, r7
 8000336:	781a      	ldrb	r2, [r3, #0]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	0011      	movs	r1, r2
 800033c:	0018      	movs	r0, r3
 800033e:	f000 f901 	bl	8000544 <capTouch_enableKeys>
 8000342:	0003      	movs	r3, r0
 8000344:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000346:	197b      	adds	r3, r7, r5
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <capTouch_Init+0x136>
		return 4;
 800034e:	2304      	movs	r3, #4
 8000350:	e007      	b.n	8000362 <capTouch_Init+0x146>
	}
	capTouch->keys = keyEnFlags;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	2234      	movs	r2, #52	@ 0x34
 8000356:	2108      	movs	r1, #8
 8000358:	1852      	adds	r2, r2, r1
 800035a:	19d2      	adds	r2, r2, r7
 800035c:	7812      	ldrb	r2, [r2, #0]
 800035e:	73da      	strb	r2, [r3, #15]

	return 0;
 8000360:	2300      	movs	r3, #0

}
 8000362:	0018      	movs	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	b009      	add	sp, #36	@ 0x24
 8000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800036c <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 800036c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036e:	b087      	sub	sp, #28
 8000370:	af02      	add	r7, sp, #8
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 8000376:	230e      	movs	r3, #14
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800037e:	250f      	movs	r5, #15
 8000380:	197b      	adds	r3, r7, r5
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 8000386:	210c      	movs	r1, #12
 8000388:	187b      	adds	r3, r7, r1
 800038a:	4a18      	ldr	r2, [pc, #96]	@ (80003ec <capTouch_ReadDeviceID+0x80>)
 800038c:	7812      	ldrb	r2, [r2, #0]
 800038e:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	6818      	ldr	r0, [r3, #0]
 8000394:	197c      	adds	r4, r7, r5
 8000396:	187a      	adds	r2, r7, r1
 8000398:	2301      	movs	r3, #1
 800039a:	425b      	negs	r3, r3
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	2301      	movs	r3, #1
 80003a0:	2136      	movs	r1, #54	@ 0x36
 80003a2:	f002 fb99 	bl	8002ad8 <HAL_I2C_Master_Transmit>
 80003a6:	0003      	movs	r3, r0
 80003a8:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80003aa:	197b      	adds	r3, r7, r5
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d002      	beq.n	80003b8 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 80003b2:	197b      	adds	r3, r7, r5
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	e014      	b.n	80003e2 <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6818      	ldr	r0, [r3, #0]
 80003bc:	250f      	movs	r5, #15
 80003be:	197c      	adds	r4, r7, r5
 80003c0:	260e      	movs	r6, #14
 80003c2:	19ba      	adds	r2, r7, r6
 80003c4:	2301      	movs	r3, #1
 80003c6:	425b      	negs	r3, r3
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	2301      	movs	r3, #1
 80003cc:	2136      	movs	r1, #54	@ 0x36
 80003ce:	f002 fcad 	bl	8002d2c <HAL_I2C_Master_Receive>
 80003d2:	0003      	movs	r3, r0
 80003d4:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 80003d6:	19bb      	adds	r3, r7, r6
 80003d8:	781a      	ldrb	r2, [r3, #0]
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	701a      	strb	r2, [r3, #0]

	return halRet;
 80003de:	197b      	adds	r3, r7, r5
 80003e0:	781b      	ldrb	r3, [r3, #0]

}
 80003e2:	0018      	movs	r0, r3
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b005      	add	sp, #20
 80003e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ea:	46c0      	nop			@ (mov r8, r8)
 80003ec:	080062a8 	.word	0x080062a8

080003f0 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80003f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f2:	b087      	sub	sp, #28
 80003f4:	af02      	add	r7, sp, #8
 80003f6:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80003f8:	210f      	movs	r1, #15
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2200      	movs	r2, #0
 80003fe:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 8000400:	260c      	movs	r6, #12
 8000402:	19bb      	adds	r3, r7, r6
 8000404:	22c8      	movs	r2, #200	@ 0xc8
 8000406:	4252      	negs	r2, r2
 8000408:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	6818      	ldr	r0, [r3, #0]
 800040e:	000d      	movs	r5, r1
 8000410:	187c      	adds	r4, r7, r1
 8000412:	19ba      	adds	r2, r7, r6
 8000414:	2301      	movs	r3, #1
 8000416:	425b      	negs	r3, r3
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2302      	movs	r3, #2
 800041c:	2136      	movs	r1, #54	@ 0x36
 800041e:	f002 fb5b 	bl	8002ad8 <HAL_I2C_Master_Transmit>
 8000422:	0003      	movs	r3, r0
 8000424:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 8000426:	197b      	adds	r3, r7, r5
 8000428:	781b      	ldrb	r3, [r3, #0]

}
 800042a:	0018      	movs	r0, r3
 800042c:	46bd      	mov	sp, r7
 800042e:	b005      	add	sp, #20
 8000430:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000434 <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	b087      	sub	sp, #28
 8000438:	af02      	add	r7, sp, #8
 800043a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800043c:	210f      	movs	r1, #15
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 8000444:	230d      	movs	r3, #13
 8000446:	18fb      	adds	r3, r7, r3
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 800044c:	260c      	movs	r6, #12
 800044e:	19bb      	adds	r3, r7, r6
 8000450:	4a19      	ldr	r2, [pc, #100]	@ (80004b8 <capTouch_checkCal+0x84>)
 8000452:	7812      	ldrb	r2, [r2, #0]
 8000454:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	000d      	movs	r5, r1
 800045c:	187c      	adds	r4, r7, r1
 800045e:	19ba      	adds	r2, r7, r6
 8000460:	2301      	movs	r3, #1
 8000462:	425b      	negs	r3, r3
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	2301      	movs	r3, #1
 8000468:	2136      	movs	r1, #54	@ 0x36
 800046a:	f002 fb35 	bl	8002ad8 <HAL_I2C_Master_Transmit>
 800046e:	0003      	movs	r3, r0
 8000470:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000472:	197b      	adds	r3, r7, r5
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d002      	beq.n	8000480 <capTouch_checkCal+0x4c>
		return halRet;
 800047a:	197b      	adds	r3, r7, r5
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	e016      	b.n	80004ae <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6818      	ldr	r0, [r3, #0]
 8000484:	230f      	movs	r3, #15
 8000486:	18fc      	adds	r4, r7, r3
 8000488:	250d      	movs	r5, #13
 800048a:	197a      	adds	r2, r7, r5
 800048c:	2301      	movs	r3, #1
 800048e:	425b      	negs	r3, r3
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	2301      	movs	r3, #1
 8000494:	2136      	movs	r1, #54	@ 0x36
 8000496:	f002 fc49 	bl	8002d2c <HAL_I2C_Master_Receive>
 800049a:	0003      	movs	r3, r0
 800049c:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 800049e:	197b      	adds	r3, r7, r5
 80004a0:	781a      	ldrb	r2, [r3, #0]
 80004a2:	210e      	movs	r1, #14
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	09d2      	lsrs	r2, r2, #7
 80004a8:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	781b      	ldrb	r3, [r3, #0]

}
 80004ae:	0018      	movs	r0, r3
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b005      	add	sp, #20
 80004b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	080062ac 	.word	0x080062ac

080004bc <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	b087      	sub	sp, #28
 80004c0:	af02      	add	r7, sp, #8
 80004c2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004c4:	210f      	movs	r1, #15
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 80004cc:	230e      	movs	r3, #14
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	2200      	movs	r2, #0
 80004d2:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 80004d4:	260c      	movs	r6, #12
 80004d6:	19bb      	adds	r3, r7, r6
 80004d8:	4a19      	ldr	r2, [pc, #100]	@ (8000540 <capTouch_readChannels+0x84>)
 80004da:	7812      	ldrb	r2, [r2, #0]
 80004dc:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6818      	ldr	r0, [r3, #0]
 80004e2:	000d      	movs	r5, r1
 80004e4:	187c      	adds	r4, r7, r1
 80004e6:	19ba      	adds	r2, r7, r6
 80004e8:	2301      	movs	r3, #1
 80004ea:	425b      	negs	r3, r3
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	2136      	movs	r1, #54	@ 0x36
 80004f2:	f002 faf1 	bl	8002ad8 <HAL_I2C_Master_Transmit>
 80004f6:	0003      	movs	r3, r0
 80004f8:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80004fa:	197b      	adds	r3, r7, r5
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d002      	beq.n	8000508 <capTouch_readChannels+0x4c>
		return halRet;
 8000502:	197b      	adds	r3, r7, r5
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	e017      	b.n	8000538 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6818      	ldr	r0, [r3, #0]
 800050c:	250f      	movs	r5, #15
 800050e:	197c      	adds	r4, r7, r5
 8000510:	260e      	movs	r6, #14
 8000512:	19ba      	adds	r2, r7, r6
 8000514:	2301      	movs	r3, #1
 8000516:	425b      	negs	r3, r3
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	2136      	movs	r1, #54	@ 0x36
 800051e:	f002 fc05 	bl	8002d2c <HAL_I2C_Master_Receive>
 8000522:	0003      	movs	r3, r0
 8000524:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 8000526:	19bb      	adds	r3, r7, r6
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	227f      	movs	r2, #127	@ 0x7f
 800052c:	4013      	ands	r3, r2
 800052e:	b2da      	uxtb	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	741a      	strb	r2, [r3, #16]

	return halRet;
 8000534:	197b      	adds	r3, r7, r5
 8000536:	781b      	ldrb	r3, [r3, #0]

}
 8000538:	0018      	movs	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	b005      	add	sp, #20
 800053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000540:	080062b0 	.word	0x080062b0

08000544 <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	b08b      	sub	sp, #44	@ 0x2c
 8000548:	af02      	add	r7, sp, #8
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	000a      	movs	r2, r1
 800054e:	1cfb      	adds	r3, r7, #3
 8000550:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000552:	241e      	movs	r4, #30
 8000554:	193b      	adds	r3, r7, r4
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800055a:	2314      	movs	r3, #20
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	4a39      	ldr	r2, [pc, #228]	@ (8000644 <capTouch_enableKeys+0x100>)
 8000560:	6811      	ldr	r1, [r2, #0]
 8000562:	6019      	str	r1, [r3, #0]
 8000564:	8891      	ldrh	r1, [r2, #4]
 8000566:	8099      	strh	r1, [r3, #4]
 8000568:	7992      	ldrb	r2, [r2, #6]
 800056a:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 800056c:	260c      	movs	r6, #12
 800056e:	19bb      	adds	r3, r7, r6
 8000570:	4a35      	ldr	r2, [pc, #212]	@ (8000648 <capTouch_enableKeys+0x104>)
 8000572:	6811      	ldr	r1, [r2, #0]
 8000574:	6019      	str	r1, [r3, #0]
 8000576:	8891      	ldrh	r1, [r2, #4]
 8000578:	8099      	strh	r1, [r3, #4]
 800057a:	7992      	ldrb	r2, [r2, #6]
 800057c:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6818      	ldr	r0, [r3, #0]
 8000582:	0025      	movs	r5, r4
 8000584:	193c      	adds	r4, r7, r4
 8000586:	19ba      	adds	r2, r7, r6
 8000588:	2301      	movs	r3, #1
 800058a:	425b      	negs	r3, r3
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	2136      	movs	r1, #54	@ 0x36
 8000592:	f002 faa1 	bl	8002ad8 <HAL_I2C_Master_Transmit>
 8000596:	0003      	movs	r3, r0
 8000598:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800059a:	197b      	adds	r3, r7, r5
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d002      	beq.n	80005a8 <capTouch_enableKeys+0x64>
		return halRet;
 80005a2:	197b      	adds	r3, r7, r5
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	e049      	b.n	800063c <capTouch_enableKeys+0xf8>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6818      	ldr	r0, [r3, #0]
 80005ac:	251e      	movs	r5, #30
 80005ae:	197c      	adds	r4, r7, r5
 80005b0:	2314      	movs	r3, #20
 80005b2:	18fa      	adds	r2, r7, r3
 80005b4:	2301      	movs	r3, #1
 80005b6:	425b      	negs	r3, r3
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2307      	movs	r3, #7
 80005bc:	2136      	movs	r1, #54	@ 0x36
 80005be:	f002 fbb5 	bl	8002d2c <HAL_I2C_Master_Receive>
 80005c2:	0003      	movs	r3, r0
 80005c4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80005c6:	197b      	adds	r3, r7, r5
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <capTouch_enableKeys+0x90>
		return halRet;
 80005ce:	197b      	adds	r3, r7, r5
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	e033      	b.n	800063c <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80005d4:	231f      	movs	r3, #31
 80005d6:	18fb      	adds	r3, r7, r3
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e01c      	b.n	8000618 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 80005de:	201f      	movs	r0, #31
 80005e0:	183b      	adds	r3, r7, r0
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2414      	movs	r4, #20
 80005e6:	193a      	adds	r2, r7, r4
 80005e8:	5cd3      	ldrb	r3, [r2, r3]
 80005ea:	089b      	lsrs	r3, r3, #2
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	1cfb      	adds	r3, r7, #3
 80005f0:	7819      	ldrb	r1, [r3, #0]
 80005f2:	183b      	adds	r3, r7, r0
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	4119      	asrs	r1, r3
 80005f8:	000b      	movs	r3, r1
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2101      	movs	r1, #1
 80005fe:	400b      	ands	r3, r1
 8000600:	b2d9      	uxtb	r1, r3
 8000602:	183b      	adds	r3, r7, r0
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	434a      	muls	r2, r1
 8000608:	b2d1      	uxtb	r1, r2
 800060a:	193a      	adds	r2, r7, r4
 800060c:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 800060e:	183b      	adds	r3, r7, r0
 8000610:	781a      	ldrb	r2, [r3, #0]
 8000612:	183b      	adds	r3, r7, r0
 8000614:	3201      	adds	r2, #1
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	231f      	movs	r3, #31
 800061a:	18fb      	adds	r3, r7, r3
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b06      	cmp	r3, #6
 8000620:	d9dd      	bls.n	80005de <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 8000622:	251e      	movs	r5, #30
 8000624:	197c      	adds	r4, r7, r5
 8000626:	2314      	movs	r3, #20
 8000628:	18fa      	adds	r2, r7, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f000 f80c 	bl	800064c <capTouch_SetAveragingFactor>
 8000634:	0003      	movs	r3, r0
 8000636:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000638:	197b      	adds	r3, r7, r5
 800063a:	781b      	ldrb	r3, [r3, #0]

}
 800063c:	0018      	movs	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	b009      	add	sp, #36	@ 0x24
 8000642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000644:	080062b4 	.word	0x080062b4
 8000648:	080062bc 	.word	0x080062bc

0800064c <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 800064c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064e:	b08b      	sub	sp, #44	@ 0x2c
 8000650:	af02      	add	r7, sp, #8
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000656:	241e      	movs	r4, #30
 8000658:	193b      	adds	r3, r7, r4
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800065e:	2314      	movs	r3, #20
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	4a5d      	ldr	r2, [pc, #372]	@ (80007d8 <capTouch_SetAveragingFactor+0x18c>)
 8000664:	6811      	ldr	r1, [r2, #0]
 8000666:	6019      	str	r1, [r3, #0]
 8000668:	8891      	ldrh	r1, [r2, #4]
 800066a:	8099      	strh	r1, [r3, #4]
 800066c:	7992      	ldrb	r2, [r2, #6]
 800066e:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000670:	260c      	movs	r6, #12
 8000672:	19bb      	adds	r3, r7, r6
 8000674:	4a59      	ldr	r2, [pc, #356]	@ (80007dc <capTouch_SetAveragingFactor+0x190>)
 8000676:	6811      	ldr	r1, [r2, #0]
 8000678:	6019      	str	r1, [r3, #0]
 800067a:	8891      	ldrh	r1, [r2, #4]
 800067c:	8099      	strh	r1, [r3, #4]
 800067e:	7992      	ldrb	r2, [r2, #6]
 8000680:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6818      	ldr	r0, [r3, #0]
 8000686:	0025      	movs	r5, r4
 8000688:	193c      	adds	r4, r7, r4
 800068a:	19ba      	adds	r2, r7, r6
 800068c:	2301      	movs	r3, #1
 800068e:	425b      	negs	r3, r3
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	2136      	movs	r1, #54	@ 0x36
 8000696:	f002 fa1f 	bl	8002ad8 <HAL_I2C_Master_Transmit>
 800069a:	0003      	movs	r3, r0
 800069c:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800069e:	197b      	adds	r3, r7, r5
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d002      	beq.n	80006ac <capTouch_SetAveragingFactor+0x60>
		return halRet;
 80006a6:	197b      	adds	r3, r7, r5
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	e090      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6818      	ldr	r0, [r3, #0]
 80006b0:	251e      	movs	r5, #30
 80006b2:	197c      	adds	r4, r7, r5
 80006b4:	2314      	movs	r3, #20
 80006b6:	18fa      	adds	r2, r7, r3
 80006b8:	2301      	movs	r3, #1
 80006ba:	425b      	negs	r3, r3
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2307      	movs	r3, #7
 80006c0:	2136      	movs	r1, #54	@ 0x36
 80006c2:	f002 fb33 	bl	8002d2c <HAL_I2C_Master_Receive>
 80006c6:	0003      	movs	r3, r0
 80006c8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80006ca:	197b      	adds	r3, r7, r5
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d002      	beq.n	80006d8 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 80006d2:	197b      	adds	r3, r7, r5
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	e07a      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 80006d8:	2308      	movs	r3, #8
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	2200      	movs	r2, #0
 80006de:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 80006e0:	231d      	movs	r3, #29
 80006e2:	18fb      	adds	r3, r7, r3
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80006e8:	231f      	movs	r3, #31
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
 80006f0:	e041      	b.n	8000776 <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80006f2:	241f      	movs	r4, #31
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2214      	movs	r2, #20
 80006fa:	18ba      	adds	r2, r7, r2
 80006fc:	5cd2      	ldrb	r2, [r2, r3]
 80006fe:	201d      	movs	r0, #29
 8000700:	183b      	adds	r3, r7, r0
 8000702:	2103      	movs	r1, #3
 8000704:	400a      	ands	r2, r1
 8000706:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 8000708:	193b      	adds	r3, r7, r4
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	18d3      	adds	r3, r2, r3
 8000710:	781a      	ldrb	r2, [r3, #0]
 8000712:	251c      	movs	r5, #28
 8000714:	197b      	adds	r3, r7, r5
 8000716:	0092      	lsls	r2, r2, #2
 8000718:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 800071a:	183b      	adds	r3, r7, r0
 800071c:	1839      	adds	r1, r7, r0
 800071e:	197a      	adds	r2, r7, r5
 8000720:	7809      	ldrb	r1, [r1, #0]
 8000722:	7812      	ldrb	r2, [r2, #0]
 8000724:	430a      	orrs	r2, r1
 8000726:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 8000728:	193b      	adds	r3, r7, r4
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	220c      	movs	r2, #12
 800072e:	18ba      	adds	r2, r7, r2
 8000730:	5cd2      	ldrb	r2, [r2, r3]
 8000732:	2108      	movs	r1, #8
 8000734:	187b      	adds	r3, r7, r1
 8000736:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	183a      	adds	r2, r7, r0
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6818      	ldr	r0, [r3, #0]
 8000744:	251e      	movs	r5, #30
 8000746:	197c      	adds	r4, r7, r5
 8000748:	187a      	adds	r2, r7, r1
 800074a:	2301      	movs	r3, #1
 800074c:	425b      	negs	r3, r3
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2302      	movs	r3, #2
 8000752:	2136      	movs	r1, #54	@ 0x36
 8000754:	f002 f9c0 	bl	8002ad8 <HAL_I2C_Master_Transmit>
 8000758:	0003      	movs	r3, r0
 800075a:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 800075c:	197b      	adds	r3, r7, r5
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 8000764:	197b      	adds	r3, r7, r5
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	e031      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 800076a:	211f      	movs	r1, #31
 800076c:	187b      	adds	r3, r7, r1
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	187b      	adds	r3, r7, r1
 8000772:	3201      	adds	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	231f      	movs	r3, #31
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b06      	cmp	r3, #6
 800077e:	d9b8      	bls.n	80006f2 <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	251e      	movs	r5, #30
 8000786:	197c      	adds	r4, r7, r5
 8000788:	230c      	movs	r3, #12
 800078a:	18fa      	adds	r2, r7, r3
 800078c:	2301      	movs	r3, #1
 800078e:	425b      	negs	r3, r3
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	2136      	movs	r1, #54	@ 0x36
 8000796:	f002 f99f 	bl	8002ad8 <HAL_I2C_Master_Transmit>
 800079a:	0003      	movs	r3, r0
 800079c:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800079e:	197b      	adds	r3, r7, r5
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <capTouch_SetAveragingFactor+0x160>
		return halRet;
 80007a6:	197b      	adds	r3, r7, r5
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	e010      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	251e      	movs	r5, #30
 80007b2:	197c      	adds	r4, r7, r5
 80007b4:	2314      	movs	r3, #20
 80007b6:	18fa      	adds	r2, r7, r3
 80007b8:	2301      	movs	r3, #1
 80007ba:	425b      	negs	r3, r3
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2307      	movs	r3, #7
 80007c0:	2136      	movs	r1, #54	@ 0x36
 80007c2:	f002 fab3 	bl	8002d2c <HAL_I2C_Master_Receive>
 80007c6:	0003      	movs	r3, r0
 80007c8:	7023      	strb	r3, [r4, #0]

	return halRet;
 80007ca:	197b      	adds	r3, r7, r5
 80007cc:	781b      	ldrb	r3, [r3, #0]

}
 80007ce:	0018      	movs	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b009      	add	sp, #36	@ 0x24
 80007d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	080062b4 	.word	0x080062b4
 80007dc:	080062bc 	.word	0x080062bc

080007e0 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 80007e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e2:	b08b      	sub	sp, #44	@ 0x2c
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80007ea:	231e      	movs	r3, #30
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80007f2:	2314      	movs	r3, #20
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	4a31      	ldr	r2, [pc, #196]	@ (80008bc <capTouch_SetDetectionIntegrator+0xdc>)
 80007f8:	6811      	ldr	r1, [r2, #0]
 80007fa:	6019      	str	r1, [r3, #0]
 80007fc:	8891      	ldrh	r1, [r2, #4]
 80007fe:	8099      	strh	r1, [r3, #4]
 8000800:	7992      	ldrb	r2, [r2, #6]
 8000802:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 8000804:	2310      	movs	r3, #16
 8000806:	18fb      	adds	r3, r7, r3
 8000808:	2200      	movs	r2, #0
 800080a:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800080c:	231f      	movs	r3, #31
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
 8000814:	e022      	b.n	800085c <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 8000816:	251f      	movs	r5, #31
 8000818:	197b      	adds	r3, r7, r5
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2214      	movs	r2, #20
 800081e:	18ba      	adds	r2, r7, r2
 8000820:	5cd2      	ldrb	r2, [r2, r3]
 8000822:	2110      	movs	r1, #16
 8000824:	187b      	adds	r3, r7, r1
 8000826:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 8000828:	197b      	adds	r3, r7, r5
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	18d3      	adds	r3, r2, r3
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	187b      	adds	r3, r7, r1
 8000834:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6818      	ldr	r0, [r3, #0]
 800083a:	231e      	movs	r3, #30
 800083c:	18fc      	adds	r4, r7, r3
 800083e:	187a      	adds	r2, r7, r1
 8000840:	2301      	movs	r3, #1
 8000842:	425b      	negs	r3, r3
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2302      	movs	r3, #2
 8000848:	2136      	movs	r1, #54	@ 0x36
 800084a:	f002 f945 	bl	8002ad8 <HAL_I2C_Master_Transmit>
 800084e:	0003      	movs	r3, r0
 8000850:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 8000852:	197b      	adds	r3, r7, r5
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	197b      	adds	r3, r7, r5
 8000858:	3201      	adds	r2, #1
 800085a:	701a      	strb	r2, [r3, #0]
 800085c:	231f      	movs	r3, #31
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b06      	cmp	r3, #6
 8000864:	d9d7      	bls.n	8000816 <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000866:	2608      	movs	r6, #8
 8000868:	19bb      	adds	r3, r7, r6
 800086a:	4a15      	ldr	r2, [pc, #84]	@ (80008c0 <capTouch_SetDetectionIntegrator+0xe0>)
 800086c:	6811      	ldr	r1, [r2, #0]
 800086e:	6019      	str	r1, [r3, #0]
 8000870:	8891      	ldrh	r1, [r2, #4]
 8000872:	8099      	strh	r1, [r3, #4]
 8000874:	7992      	ldrb	r2, [r2, #6]
 8000876:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	251e      	movs	r5, #30
 800087e:	197c      	adds	r4, r7, r5
 8000880:	2314      	movs	r3, #20
 8000882:	18fa      	adds	r2, r7, r3
 8000884:	2301      	movs	r3, #1
 8000886:	425b      	negs	r3, r3
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2301      	movs	r3, #1
 800088c:	2136      	movs	r1, #54	@ 0x36
 800088e:	f002 f923 	bl	8002ad8 <HAL_I2C_Master_Transmit>
 8000892:	0003      	movs	r3, r0
 8000894:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6818      	ldr	r0, [r3, #0]
 800089a:	197c      	adds	r4, r7, r5
 800089c:	19ba      	adds	r2, r7, r6
 800089e:	2301      	movs	r3, #1
 80008a0:	425b      	negs	r3, r3
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2307      	movs	r3, #7
 80008a6:	2136      	movs	r1, #54	@ 0x36
 80008a8:	f002 fa40 	bl	8002d2c <HAL_I2C_Master_Receive>
 80008ac:	0003      	movs	r3, r0
 80008ae:	7023      	strb	r3, [r4, #0]

	return halRet;
 80008b0:	197b      	adds	r3, r7, r5
 80008b2:	781b      	ldrb	r3, [r3, #0]

}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b009      	add	sp, #36	@ 0x24
 80008ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008bc:	080062c4 	.word	0x080062c4
 80008c0:	080062b4 	.word	0x080062b4

080008c4 <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


void initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b099      	sub	sp, #100	@ 0x64
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 80008d0:	2438      	movs	r4, #56	@ 0x38
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	0018      	movs	r0, r3
 80008d6:	2328      	movs	r3, #40	@ 0x28
 80008d8:	001a      	movs	r2, r3
 80008da:	2100      	movs	r1, #0
 80008dc:	f005 fca2 	bl	8006224 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	0021      	movs	r1, r4
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	785b      	ldrb	r3, [r3, #1]
 80008ee:	3301      	adds	r3, #1
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	789a      	ldrb	r2, [r3, #2]
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	685a      	ldr	r2, [r3, #4]
 8000902:	187b      	adds	r3, r7, r1
 8000904:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	78da      	ldrb	r2, [r3, #3]
 800090a:	187b      	adds	r3, r7, r1
 800090c:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	78da      	ldrb	r2, [r3, #3]
 8000912:	187b      	adds	r3, r7, r1
 8000914:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000916:	0008      	movs	r0, r1
 8000918:	183b      	adds	r3, r7, r0
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800091e:	183b      	adds	r3, r7, r0
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000924:	183b      	adds	r3, r7, r0
 8000926:	4a11      	ldr	r2, [pc, #68]	@ (800096c <initRTCInternalAlarm+0xa8>)
 8000928:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800092a:	183b      	adds	r3, r7, r0
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000930:	183b      	adds	r3, r7, r0
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 8000936:	183b      	adds	r3, r7, r0
 8000938:	2220      	movs	r2, #32
 800093a:	2101      	movs	r1, #1
 800093c:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 800093e:	0001      	movs	r1, r0
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2280      	movs	r2, #128	@ 0x80
 8000944:	0052      	lsls	r2, r2, #1
 8000946:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8000948:	1879      	adds	r1, r7, r1
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	2200      	movs	r2, #0
 800094e:	0018      	movs	r0, r3
 8000950:	f003 ffda 	bl	8004908 <HAL_RTC_SetAlarm_IT>

	RTC_AlarmTypeDef internalAlarm_initTest;
	HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8000954:	2380      	movs	r3, #128	@ 0x80
 8000956:	005a      	lsls	r2, r3, #1
 8000958:	2310      	movs	r3, #16
 800095a:	18f9      	adds	r1, r7, r3
 800095c:	68f8      	ldr	r0, [r7, #12]
 800095e:	2300      	movs	r3, #0
 8000960:	f004 f912 	bl	8004b88 <HAL_RTC_GetAlarm>


}
 8000964:	46c0      	nop			@ (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b019      	add	sp, #100	@ 0x64
 800096a:	bd90      	pop	{r4, r7, pc}
 800096c:	80800080 	.word	0x80800080

08000970 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2200      	movs	r2, #0
 8000982:	0018      	movs	r0, r3
 8000984:	f003 fe84 	bl	8004690 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2200      	movs	r2, #0
 800098e:	0018      	movs	r0, r3
 8000990:	f003 ff6c 	bl	800486c <HAL_RTC_GetDate>

}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b004      	add	sp, #16
 800099a:	bd80      	pop	{r7, pc}

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800099e:	b08d      	sub	sp, #52	@ 0x34
 80009a0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a2:	f001 fca1 	bl	80022e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a6:	f000 f925 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009aa:	f000 fb39 	bl	8001020 <MX_GPIO_Init>
  MX_RTC_Init();
 80009ae:	f000 f9d5 	bl	8000d5c <MX_RTC_Init>
  MX_I2C1_Init();
 80009b2:	f000 f993 	bl	8000cdc <MX_I2C1_Init>
  MX_TIM14_Init();
 80009b6:	f000 fac5 	bl	8000f44 <MX_TIM14_Init>
  MX_TIM2_Init();
 80009ba:	f000 fa63 	bl	8000e84 <MX_TIM2_Init>
  MX_TIM16_Init();
 80009be:	f000 fae7 	bl	8000f90 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // Set Smooth Calibration Value

  HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 80009c2:	4b78      	ldr	r3, [pc, #480]	@ (8000ba4 <main+0x208>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2280      	movs	r2, #128	@ 0x80
 80009c8:	01d1      	lsls	r1, r2, #7
 80009ca:	4877      	ldr	r0, [pc, #476]	@ (8000ba8 <main+0x20c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	f004 fad0 	bl	8004f72 <HAL_RTCEx_SetSmoothCalib>
    							RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);

  uint8_t initRet = 0;
 80009d2:	2317      	movs	r3, #23
 80009d4:	18fb      	adds	r3, r7, r3
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]

  // Init the internal RTC alarm time to track the current time
  initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 80009da:	4a74      	ldr	r2, [pc, #464]	@ (8000bac <main+0x210>)
 80009dc:	4974      	ldr	r1, [pc, #464]	@ (8000bb0 <main+0x214>)
 80009de:	4b72      	ldr	r3, [pc, #456]	@ (8000ba8 <main+0x20c>)
 80009e0:	0018      	movs	r0, r3
 80009e2:	f7ff ff6f 	bl	80008c4 <initRTCInternalAlarm>

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 80009e6:	2380      	movs	r3, #128	@ 0x80
 80009e8:	009c      	lsls	r4, r3, #2
 80009ea:	2380      	movs	r3, #128	@ 0x80
 80009ec:	00dd      	lsls	r5, r3, #3
 80009ee:	2680      	movs	r6, #128	@ 0x80
 80009f0:	2240      	movs	r2, #64	@ 0x40
 80009f2:	4694      	mov	ip, r2
 80009f4:	2380      	movs	r3, #128	@ 0x80
 80009f6:	011a      	lsls	r2, r3, #4
 80009f8:	4b6e      	ldr	r3, [pc, #440]	@ (8000bb4 <main+0x218>)
 80009fa:	6819      	ldr	r1, [r3, #0]
 80009fc:	4b6e      	ldr	r3, [pc, #440]	@ (8000bb8 <main+0x21c>)
 80009fe:	6818      	ldr	r0, [r3, #0]
 8000a00:	4b6e      	ldr	r3, [pc, #440]	@ (8000bbc <main+0x220>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	9304      	str	r3, [sp, #16]
 8000a06:	9003      	str	r0, [sp, #12]
 8000a08:	9102      	str	r1, [sp, #8]
 8000a0a:	4b6d      	ldr	r3, [pc, #436]	@ (8000bc0 <main+0x224>)
 8000a0c:	9301      	str	r3, [sp, #4]
 8000a0e:	9200      	str	r2, [sp, #0]
 8000a10:	4663      	mov	r3, ip
 8000a12:	0032      	movs	r2, r6
 8000a14:	0029      	movs	r1, r5
 8000a16:	0020      	movs	r0, r4
 8000a18:	f001 f856 	bl	8001ac8 <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);


	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 8000a1c:	2216      	movs	r2, #22
 8000a1e:	18bc      	adds	r4, r7, r2
 8000a20:	f000 fbe0 	bl	80011e4 <updateAndDisplayTime>
 8000a24:	0003      	movs	r3, r0
 8000a26:	7023      	strb	r3, [r4, #0]

    /*
     * Initialize capacitive touch sensor
     */

    initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 8000a28:	4b62      	ldr	r3, [pc, #392]	@ (8000bb4 <main+0x218>)
 8000a2a:	681d      	ldr	r5, [r3, #0]
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4a64      	ldr	r2, [pc, #400]	@ (8000bc4 <main+0x228>)
 8000a32:	7812      	ldrb	r2, [r2, #0]
 8000a34:	2117      	movs	r1, #23
 8000a36:	187c      	adds	r4, r7, r1
 8000a38:	4e63      	ldr	r6, [pc, #396]	@ (8000bc8 <main+0x22c>)
 8000a3a:	4964      	ldr	r1, [pc, #400]	@ (8000bcc <main+0x230>)
 8000a3c:	4864      	ldr	r0, [pc, #400]	@ (8000bd0 <main+0x234>)
 8000a3e:	9201      	str	r2, [sp, #4]
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	0033      	movs	r3, r6
 8000a44:	002a      	movs	r2, r5
 8000a46:	f7ff fbe9 	bl	800021c <capTouch_Init>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	7023      	strb	r3, [r4, #0]
    						&capTouchResetPort, capTouchResetPin, capTouchChannels);

    if(initRet != 0) {
 8000a4e:	2117      	movs	r1, #23
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <main+0xc0>
    	dispError();
 8000a58:	f000 ffc4 	bl	80019e4 <dispError>
    }

    // Max. out averaging factor
    uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 8000a5c:	4b5d      	ldr	r3, [pc, #372]	@ (8000bd4 <main+0x238>)
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	210c      	movs	r1, #12
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	4b5b      	ldr	r3, [pc, #364]	@ (8000bd4 <main+0x238>)
 8000a68:	781a      	ldrb	r2, [r3, #0]
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	705a      	strb	r2, [r3, #1]
 8000a6e:	4b59      	ldr	r3, [pc, #356]	@ (8000bd4 <main+0x238>)
 8000a70:	781a      	ldrb	r2, [r3, #0]
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	709a      	strb	r2, [r3, #2]
 8000a76:	4b57      	ldr	r3, [pc, #348]	@ (8000bd4 <main+0x238>)
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	70da      	strb	r2, [r3, #3]
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2200      	movs	r2, #0
 8000a82:	711a      	strb	r2, [r3, #4]
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2200      	movs	r2, #0
 8000a88:	715a      	strb	r2, [r3, #5]
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000a90:	2516      	movs	r5, #22
 8000a92:	197c      	adds	r4, r7, r5
 8000a94:	187a      	adds	r2, r7, r1
 8000a96:	4b4e      	ldr	r3, [pc, #312]	@ (8000bd0 <main+0x234>)
 8000a98:	0011      	movs	r1, r2
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f7ff fdd6 	bl	800064c <capTouch_SetAveragingFactor>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	7023      	strb	r3, [r4, #0]

    if(halRet != HAL_OK) {
 8000aa4:	197b      	adds	r3, r7, r5
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <main+0x114>
    	dispError();
 8000aac:	f000 ff9a 	bl	80019e4 <dispError>
    }

    // Set detection integration factors
    uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 8000ab0:	4b49      	ldr	r3, [pc, #292]	@ (8000bd8 <main+0x23c>)
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	701a      	strb	r2, [r3, #0]
 8000ab8:	4b47      	ldr	r3, [pc, #284]	@ (8000bd8 <main+0x23c>)
 8000aba:	781a      	ldrb	r2, [r3, #0]
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	705a      	strb	r2, [r3, #1]
 8000ac0:	4b45      	ldr	r3, [pc, #276]	@ (8000bd8 <main+0x23c>)
 8000ac2:	781a      	ldrb	r2, [r3, #0]
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	709a      	strb	r2, [r3, #2]
 8000ac8:	4b43      	ldr	r3, [pc, #268]	@ (8000bd8 <main+0x23c>)
 8000aca:	781a      	ldrb	r2, [r3, #0]
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	70da      	strb	r2, [r3, #3]
 8000ad0:	4b41      	ldr	r3, [pc, #260]	@ (8000bd8 <main+0x23c>)
 8000ad2:	781a      	ldrb	r2, [r3, #0]
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	711a      	strb	r2, [r3, #4]
 8000ad8:	4b3f      	ldr	r3, [pc, #252]	@ (8000bd8 <main+0x23c>)
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	715a      	strb	r2, [r3, #5]
 8000ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8000bd8 <main+0x23c>)
 8000ae2:	781a      	ldrb	r2, [r3, #0]
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 8000ae8:	2516      	movs	r5, #22
 8000aea:	197c      	adds	r4, r7, r5
 8000aec:	1d3a      	adds	r2, r7, #4
 8000aee:	4b38      	ldr	r3, [pc, #224]	@ (8000bd0 <main+0x234>)
 8000af0:	0011      	movs	r1, r2
 8000af2:	0018      	movs	r0, r3
 8000af4:	f7ff fe74 	bl	80007e0 <capTouch_SetDetectionIntegrator>
 8000af8:	0003      	movs	r3, r0
 8000afa:	7023      	strb	r3, [r4, #0]
    if(halRet != HAL_OK) {
 8000afc:	197b      	adds	r3, r7, r5
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <main+0x16c>
    	dispError();
 8000b04:	f000 ff6e 	bl	80019e4 <dispError>
    }

    userAlarmToggle = false;			//Default to off
 8000b08:	4b34      	ldr	r3, [pc, #208]	@ (8000bdc <main+0x240>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
     *
     * Else, initialize to whatever is stored in backup registers.
     */
//    j

    if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 8000b0e:	4b34      	ldr	r3, [pc, #208]	@ (8000be0 <main+0x244>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	4b25      	ldr	r3, [pc, #148]	@ (8000ba8 <main+0x20c>)
 8000b14:	0011      	movs	r1, r2
 8000b16:	0018      	movs	r0, r3
 8000b18:	f004 fafb 	bl	8005112 <HAL_RTCEx_BKUPRead>
 8000b1c:	0003      	movs	r3, r0
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d11c      	bne.n	8000b5e <main+0x1c2>

    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 8000b24:	4b2f      	ldr	r3, [pc, #188]	@ (8000be4 <main+0x248>)
 8000b26:	6819      	ldr	r1, [r3, #0]
 8000b28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <main+0x20c>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f004 fad3 	bl	80050d8 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 8000b32:	4b2d      	ldr	r3, [pc, #180]	@ (8000be8 <main+0x24c>)
 8000b34:	6819      	ldr	r1, [r3, #0]
 8000b36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba8 <main+0x20c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f004 facc 	bl	80050d8 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 8000b40:	4b2a      	ldr	r3, [pc, #168]	@ (8000bec <main+0x250>)
 8000b42:	6819      	ldr	r1, [r3, #0]
 8000b44:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <main+0x20c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f004 fac5 	bl	80050d8 <HAL_RTCEx_BKUPWrite>

    	// Write backup register with a non-zero value to signify that it has been initialized before
    	HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8000b4e:	4b24      	ldr	r3, [pc, #144]	@ (8000be0 <main+0x244>)
 8000b50:	6819      	ldr	r1, [r3, #0]
 8000b52:	2301      	movs	r3, #1
 8000b54:	425a      	negs	r2, r3
 8000b56:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <main+0x20c>)
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f004 fabd 	bl	80050d8 <HAL_RTCEx_BKUPWrite>

    }

	userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8000b5e:	4b21      	ldr	r3, [pc, #132]	@ (8000be4 <main+0x248>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <main+0x20c>)
 8000b64:	0011      	movs	r1, r2
 8000b66:	0018      	movs	r0, r3
 8000b68:	f004 fad3 	bl	8005112 <HAL_RTCEx_BKUPRead>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf0 <main+0x254>)
 8000b72:	701a      	strb	r2, [r3, #0]
	userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 8000b74:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <main+0x24c>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <main+0x20c>)
 8000b7a:	0011      	movs	r1, r2
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f004 fac8 	bl	8005112 <HAL_RTCEx_BKUPRead>
 8000b82:	0003      	movs	r3, r0
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <main+0x254>)
 8000b88:	705a      	strb	r2, [r3, #1]
	userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 8000b8a:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <main+0x250>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <main+0x20c>)
 8000b90:	0011      	movs	r1, r2
 8000b92:	0018      	movs	r0, r3
 8000b94:	f004 fabd 	bl	8005112 <HAL_RTCEx_BKUPRead>
 8000b98:	0003      	movs	r3, r0
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <main+0x254>)
 8000b9e:	70da      	strb	r2, [r3, #3]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ba0:	46c0      	nop			@ (mov r8, r8)
 8000ba2:	e7fd      	b.n	8000ba0 <main+0x204>
 8000ba4:	20000030 	.word	0x20000030
 8000ba8:	20000118 	.word	0x20000118
 8000bac:	200000a8 	.word	0x200000a8
 8000bb0:	20000094 	.word	0x20000094
 8000bb4:	20000048 	.word	0x20000048
 8000bb8:	20000044 	.word	0x20000044
 8000bbc:	20000034 	.word	0x20000034
 8000bc0:	20000018 	.word	0x20000018
 8000bc4:	2000000c 	.word	0x2000000c
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	200000c4 	.word	0x200000c4
 8000bd0:	2000022c 	.word	0x2000022c
 8000bd4:	2000000d 	.word	0x2000000d
 8000bd8:	2000000e 	.word	0x2000000e
 8000bdc:	20000091 	.word	0x20000091
 8000be0:	20000040 	.word	0x20000040
 8000be4:	200000c0 	.word	0x200000c0
 8000be8:	20000038 	.word	0x20000038
 8000bec:	2000003c 	.word	0x2000003c
 8000bf0:	200000ac 	.word	0x200000ac

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b093      	sub	sp, #76	@ 0x4c
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	2410      	movs	r4, #16
 8000bfc:	193b      	adds	r3, r7, r4
 8000bfe:	0018      	movs	r0, r3
 8000c00:	2338      	movs	r3, #56	@ 0x38
 8000c02:	001a      	movs	r2, r3
 8000c04:	2100      	movs	r1, #0
 8000c06:	f005 fb0d 	bl	8006224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	2310      	movs	r3, #16
 8000c10:	001a      	movs	r2, r3
 8000c12:	2100      	movs	r1, #0
 8000c14:	f005 fb06 	bl	8006224 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c18:	2380      	movs	r3, #128	@ 0x80
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f002 fd17 	bl	8003650 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c22:	f002 fcf7 	bl	8003614 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 8000c26:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd8 <SystemClock_Config+0xe4>)
 8000c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c2a:	2218      	movs	r2, #24
 8000c2c:	4393      	bics	r3, r2
 8000c2e:	001a      	movs	r2, r3
 8000c30:	4b29      	ldr	r3, [pc, #164]	@ (8000cd8 <SystemClock_Config+0xe4>)
 8000c32:	2108      	movs	r1, #8
 8000c34:	430a      	orrs	r2, r1
 8000c36:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	220e      	movs	r2, #14
 8000c3c:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	2201      	movs	r2, #1
 8000c42:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	2280      	movs	r2, #128	@ 0x80
 8000c48:	0052      	lsls	r2, r2, #1
 8000c4a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000c4c:	0021      	movs	r1, r4
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2240      	movs	r2, #64	@ 0x40
 8000c58:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2202      	movs	r2, #2
 8000c64:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2202      	movs	r2, #2
 8000c6a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	2208      	movs	r2, #8
 8000c76:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	2280      	movs	r2, #128	@ 0x80
 8000c7c:	0292      	lsls	r2, r2, #10
 8000c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2280      	movs	r2, #128	@ 0x80
 8000c84:	0492      	lsls	r2, r2, #18
 8000c86:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	2280      	movs	r2, #128	@ 0x80
 8000c8c:	0592      	lsls	r2, r2, #22
 8000c8e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	0018      	movs	r0, r3
 8000c94:	f002 fd1c 	bl	80036d0 <HAL_RCC_OscConfig>
 8000c98:	1e03      	subs	r3, r0, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c9c:	f000 ff0e 	bl	8001abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca0:	003b      	movs	r3, r7
 8000ca2:	2207      	movs	r2, #7
 8000ca4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca6:	003b      	movs	r3, r7
 8000ca8:	2202      	movs	r2, #2
 8000caa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cac:	003b      	movs	r3, r7
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cb2:	003b      	movs	r3, r7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cb8:	003b      	movs	r3, r7
 8000cba:	2102      	movs	r1, #2
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f003 f821 	bl	8003d04 <HAL_RCC_ClockConfig>
 8000cc2:	1e03      	subs	r3, r0, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000cc6:	f000 fef9 	bl	8001abc <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f003 fb1e 	bl	800430c <HAL_RCCEx_EnableLSCO>
}
 8000cd0:	46c0      	nop			@ (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b013      	add	sp, #76	@ 0x4c
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	40021000 	.word	0x40021000

08000cdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d54 <MX_I2C1_Init+0x78>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d58 <MX_I2C1_Init+0x7c>)
 8000cea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f001 fe37 	bl	800298c <HAL_I2C_Init>
 8000d1e:	1e03      	subs	r3, r0, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d22:	f000 fecb 	bl	8001abc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d26:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f002 fbda 	bl	80034e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d001      	beq.n	8000d38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d34:	f000 fec2 	bl	8001abc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d38:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f002 fc1d 	bl	800357c <HAL_I2CEx_ConfigDigitalFilter>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d001      	beq.n	8000d4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d46:	f000 feb9 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200000c4 	.word	0x200000c4
 8000d54:	40005400 	.word	0x40005400
 8000d58:	00602173 	.word	0x00602173

08000d5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	@ 0x30
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_DateTypeDef sDate = {0};
 8000d62:	232c      	movs	r3, #44	@ 0x2c
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	2328      	movs	r3, #40	@ 0x28
 8000d70:	001a      	movs	r2, r3
 8000d72:	2100      	movs	r1, #0
 8000d74:	f005 fa56 	bl	8006224 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d78:	4b3e      	ldr	r3, [pc, #248]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d7a:	4a3f      	ldr	r2, [pc, #252]	@ (8000e78 <MX_RTC_Init+0x11c>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d80:	2240      	movs	r2, #64	@ 0x40
 8000d82:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000d84:	4b3b      	ldr	r3, [pc, #236]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d86:	227f      	movs	r2, #127	@ 0x7f
 8000d88:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d8c:	22ff      	movs	r2, #255	@ 0xff
 8000d8e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d90:	4b38      	ldr	r3, [pc, #224]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d96:	4b37      	ldr	r3, [pc, #220]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d9c:	4b35      	ldr	r3, [pc, #212]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000da2:	4b34      	ldr	r3, [pc, #208]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000da4:	2280      	movs	r2, #128	@ 0x80
 8000da6:	05d2      	lsls	r2, r2, #23
 8000da8:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000daa:	4b32      	ldr	r3, [pc, #200]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000db0:	4b30      	ldr	r3, [pc, #192]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000db2:	0018      	movs	r0, r3
 8000db4:	f003 fb22 	bl	80043fc <HAL_RTC_Init>
 8000db8:	1e03      	subs	r3, r0, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 8000dbc:	f000 fe7e 	bl	8001abc <Error_Handler>
//  {
//    Error_Handler();
//  }


  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000dc0:	212c      	movs	r1, #44	@ 0x2c
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2201      	movs	r2, #1
 8000dcc:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000dda:	1879      	adds	r1, r7, r1
 8000ddc:	4b25      	ldr	r3, [pc, #148]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	0018      	movs	r0, r3
 8000de2:	f003 fcb1 	bl	8004748 <HAL_RTC_SetDate>
 8000de6:	1e03      	subs	r3, r0, #0
 8000de8:	d001      	beq.n	8000dee <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000dea:	f000 fe67 	bl	8001abc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2201      	movs	r2, #1
 8000df8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	4a18      	ldr	r2, [pc, #96]	@ (8000e7c <MX_RTC_Init+0x120>)
 8000e1c:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2220      	movs	r2, #32
 8000e2e:	2101      	movs	r1, #1
 8000e30:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2280      	movs	r2, #128	@ 0x80
 8000e36:	0052      	lsls	r2, r2, #1
 8000e38:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e3a:	1d39      	adds	r1, r7, #4
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	0018      	movs	r0, r3
 8000e42:	f003 fd61 	bl	8004908 <HAL_RTC_SetAlarm_IT>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d001      	beq.n	8000e4e <MX_RTC_Init+0xf2>
  {
    Error_Handler();
 8000e4a:	f000 fe37 	bl	8001abc <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000e4e:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000e50:	2100      	movs	r1, #0
 8000e52:	0018      	movs	r0, r3
 8000e54:	f004 f8f0 	bl	8005038 <HAL_RTCEx_SetCalibrationOutPut>
 8000e58:	1e03      	subs	r3, r0, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_RTC_Init+0x104>
  {
    Error_Handler();
 8000e5c:	f000 fe2e 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8000e60:	4907      	ldr	r1, [pc, #28]	@ (8000e80 <MX_RTC_Init+0x124>)
 8000e62:	4b04      	ldr	r3, [pc, #16]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	0018      	movs	r0, r3
 8000e68:	f003 fc12 	bl	8004690 <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 8000e6c:	46c0      	nop			@ (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b00c      	add	sp, #48	@ 0x30
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000118 	.word	0x20000118
 8000e78:	40002800 	.word	0x40002800
 8000e7c:	80800080 	.word	0x80800080
 8000e80:	20000094 	.word	0x20000094

08000e84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	@ 0x28
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8a:	231c      	movs	r3, #28
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	0018      	movs	r0, r3
 8000e90:	230c      	movs	r3, #12
 8000e92:	001a      	movs	r2, r3
 8000e94:	2100      	movs	r1, #0
 8000e96:	f005 f9c5 	bl	8006224 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e9a:	003b      	movs	r3, r7
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	231c      	movs	r3, #28
 8000ea0:	001a      	movs	r2, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	f005 f9be 	bl	8006224 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ea8:	4b24      	ldr	r3, [pc, #144]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000eaa:	2280      	movs	r2, #128	@ 0x80
 8000eac:	05d2      	lsls	r2, r2, #23
 8000eae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8000eb0:	4b22      	ldr	r3, [pc, #136]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000eb2:	4a23      	ldr	r2, [pc, #140]	@ (8000f40 <MX_TIM2_Init+0xbc>)
 8000eb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b21      	ldr	r3, [pc, #132]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000ebe:	2263      	movs	r2, #99	@ 0x63
 8000ec0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ece:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f004 fa85 	bl	80053e0 <HAL_TIM_PWM_Init>
 8000ed6:	1e03      	subs	r3, r0, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000eda:	f000 fdef 	bl	8001abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ede:	211c      	movs	r1, #28
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eec:	187a      	adds	r2, r7, r1
 8000eee:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000ef0:	0011      	movs	r1, r2
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f005 f916 	bl	8006124 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef8:	1e03      	subs	r3, r0, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000efc:	f000 fdde 	bl	8001abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f00:	003b      	movs	r3, r7
 8000f02:	2260      	movs	r2, #96	@ 0x60
 8000f04:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f06:	003b      	movs	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0c:	003b      	movs	r3, r7
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f12:	003b      	movs	r3, r7
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f18:	0039      	movs	r1, r7
 8000f1a:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000f1c:	2208      	movs	r2, #8
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f004 fc9c 	bl	800585c <HAL_TIM_PWM_ConfigChannel>
 8000f24:	1e03      	subs	r3, r0, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000f28:	f000 fdc8 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f2c:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f001 f916 	bl	8002160 <HAL_TIM_MspPostInit>

}
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b00a      	add	sp, #40	@ 0x28
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000144 	.word	0x20000144
 8000f40:	0000031f 	.word	0x0000031f

08000f44 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f88 <MX_TIM14_Init+0x44>)
 8000f4c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f50:	22f4      	movs	r2, #244	@ 0xf4
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f8c <MX_TIM14_Init+0x48>)
 8000f60:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f62:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f6e:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f70:	0018      	movs	r0, r3
 8000f72:	f004 f8e9 	bl	8005148 <HAL_TIM_Base_Init>
 8000f76:	1e03      	subs	r3, r0, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000f7a:	f000 fd9f 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000190 	.word	0x20000190
 8000f88:	40002000 	.word	0x40002000
 8000f8c:	0000ffff 	.word	0x0000ffff

08000f90 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000f94:	4b1d      	ldr	r3, [pc, #116]	@ (800100c <MX_TIM16_Init+0x7c>)
 8000f96:	4a1e      	ldr	r2, [pc, #120]	@ (8001010 <MX_TIM16_Init+0x80>)
 8000f98:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = (58595 / 10) - 1;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <MX_TIM16_Init+0x7c>)
 8000f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001014 <MX_TIM16_Init+0x84>)
 8000f9e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <MX_TIM16_Init+0x7c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000fa6:	4b19      	ldr	r3, [pc, #100]	@ (800100c <MX_TIM16_Init+0x7c>)
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8001018 <MX_TIM16_Init+0x88>)
 8000faa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fac:	4b17      	ldr	r3, [pc, #92]	@ (800100c <MX_TIM16_Init+0x7c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = timerSnooze_RCR;
 8000fb2:	2264      	movs	r2, #100	@ 0x64
 8000fb4:	4b15      	ldr	r3, [pc, #84]	@ (800100c <MX_TIM16_Init+0x7c>)
 8000fb6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	@ (800100c <MX_TIM16_Init+0x7c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000fbe:	4b13      	ldr	r3, [pc, #76]	@ (800100c <MX_TIM16_Init+0x7c>)
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f004 f8c1 	bl	8005148 <HAL_TIM_Base_Init>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000fca:	f000 fd77 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  // Clear SR interrupts
  __HAL_TIM_CLEAR_IT(timerSnooze, TIM_IT_UPDATE);
 8000fce:	4b13      	ldr	r3, [pc, #76]	@ (800101c <MX_TIM16_Init+0x8c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	4252      	negs	r2, r2
 8000fd8:	611a      	str	r2, [r3, #16]

  // Re-write RCR with 10
	timerSnooze->Instance->RCR &= 0xFF00;
 8000fda:	4b10      	ldr	r3, [pc, #64]	@ (800101c <MX_TIM16_Init+0x8c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <MX_TIM16_Init+0x8c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	22ff      	movs	r2, #255	@ 0xff
 8000fea:	0212      	lsls	r2, r2, #8
 8000fec:	400a      	ands	r2, r1
 8000fee:	631a      	str	r2, [r3, #48]	@ 0x30
	timerSnooze->Instance->RCR |= timerSnooze_RCR;
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <MX_TIM16_Init+0x8c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ff8:	2164      	movs	r1, #100	@ 0x64
 8000ffa:	4b08      	ldr	r3, [pc, #32]	@ (800101c <MX_TIM16_Init+0x8c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	430a      	orrs	r2, r1
 8001002:	631a      	str	r2, [r3, #48]	@ 0x30


  /* USER CODE END TIM16_Init 2 */

}
 8001004:	46c0      	nop			@ (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	200001dc 	.word	0x200001dc
 8001010:	40014400 	.word	0x40014400
 8001014:	000016e2 	.word	0x000016e2
 8001018:	0000ffff 	.word	0x0000ffff
 800101c:	2000004c 	.word	0x2000004c

08001020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b08b      	sub	sp, #44	@ 0x2c
 8001024:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	2414      	movs	r4, #20
 8001028:	193b      	adds	r3, r7, r4
 800102a:	0018      	movs	r0, r3
 800102c:	2314      	movs	r3, #20
 800102e:	001a      	movs	r2, r3
 8001030:	2100      	movs	r1, #0
 8001032:	f005 f8f7 	bl	8006224 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	4b66      	ldr	r3, [pc, #408]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 8001038:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800103a:	4b65      	ldr	r3, [pc, #404]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 800103c:	2104      	movs	r1, #4
 800103e:	430a      	orrs	r2, r1
 8001040:	635a      	str	r2, [r3, #52]	@ 0x34
 8001042:	4b63      	ldr	r3, [pc, #396]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 8001044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001046:	2204      	movs	r2, #4
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	4b60      	ldr	r3, [pc, #384]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 8001050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001052:	4b5f      	ldr	r3, [pc, #380]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 8001054:	2101      	movs	r1, #1
 8001056:	430a      	orrs	r2, r1
 8001058:	635a      	str	r2, [r3, #52]	@ 0x34
 800105a:	4b5d      	ldr	r3, [pc, #372]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 800105c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800105e:	2201      	movs	r2, #1
 8001060:	4013      	ands	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001066:	4b5a      	ldr	r3, [pc, #360]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 8001068:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800106a:	4b59      	ldr	r3, [pc, #356]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 800106c:	2108      	movs	r1, #8
 800106e:	430a      	orrs	r2, r1
 8001070:	635a      	str	r2, [r3, #52]	@ 0x34
 8001072:	4b57      	ldr	r3, [pc, #348]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 8001074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001076:	2208      	movs	r2, #8
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	4b54      	ldr	r3, [pc, #336]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 8001080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001082:	4b53      	ldr	r3, [pc, #332]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 8001084:	2102      	movs	r1, #2
 8001086:	430a      	orrs	r2, r1
 8001088:	635a      	str	r2, [r3, #52]	@ 0x34
 800108a:	4b51      	ldr	r3, [pc, #324]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 800108c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800108e:	2202      	movs	r2, #2
 8001090:	4013      	ands	r3, r2
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8001096:	494f      	ldr	r1, [pc, #316]	@ (80011d4 <MX_GPIO_Init+0x1b4>)
 8001098:	23a0      	movs	r3, #160	@ 0xa0
 800109a:	05db      	lsls	r3, r3, #23
 800109c:	2200      	movs	r2, #0
 800109e:	0018      	movs	r0, r3
 80010a0:	f001 fc07 	bl	80028b2 <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 80010a4:	4b4c      	ldr	r3, [pc, #304]	@ (80011d8 <MX_GPIO_Init+0x1b8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0018      	movs	r0, r3
 80010ac:	f001 fc01 	bl	80028b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_RST_GPIO_Port, CTOUCH_RST_Pin, GPIO_PIN_RESET);
 80010b0:	2380      	movs	r3, #128	@ 0x80
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4849      	ldr	r0, [pc, #292]	@ (80011dc <MX_GPIO_Init+0x1bc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	0019      	movs	r1, r3
 80010ba:	f001 fbfa 	bl	80028b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin BUZZER_OUT_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin
                           SHIFT_MCLR_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 80010be:	193b      	adds	r3, r7, r4
 80010c0:	4a44      	ldr	r2, [pc, #272]	@ (80011d4 <MX_GPIO_Init+0x1b4>)
 80010c2:	601a      	str	r2, [r3, #0]
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	193b      	adds	r3, r7, r4
 80010c6:	2201      	movs	r2, #1
 80010c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	193b      	adds	r3, r7, r4
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	193b      	adds	r3, r7, r4
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	193a      	adds	r2, r7, r4
 80010d8:	23a0      	movs	r3, #160	@ 0xa0
 80010da:	05db      	lsls	r3, r3, #23
 80010dc:	0011      	movs	r1, r2
 80010de:	0018      	movs	r0, r3
 80010e0:	f001 fa66 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	2204      	movs	r2, #4
 80010e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ea:	193b      	adds	r3, r7, r4
 80010ec:	2203      	movs	r2, #3
 80010ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	193b      	adds	r3, r7, r4
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	193a      	adds	r2, r7, r4
 80010f8:	23a0      	movs	r3, #160	@ 0xa0
 80010fa:	05db      	lsls	r3, r3, #23
 80010fc:	0011      	movs	r1, r2
 80010fe:	0018      	movs	r0, r3
 8001100:	f001 fa56 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8001104:	193b      	adds	r3, r7, r4
 8001106:	2280      	movs	r2, #128	@ 0x80
 8001108:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	193b      	adds	r3, r7, r4
 800110c:	2201      	movs	r2, #1
 800110e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	193b      	adds	r3, r7, r4
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	193b      	adds	r3, r7, r4
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 800111c:	193b      	adds	r3, r7, r4
 800111e:	4a2e      	ldr	r2, [pc, #184]	@ (80011d8 <MX_GPIO_Init+0x1b8>)
 8001120:	0019      	movs	r1, r3
 8001122:	0010      	movs	r0, r2
 8001124:	f001 fa44 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 8001128:	193b      	adds	r3, r7, r4
 800112a:	2280      	movs	r2, #128	@ 0x80
 800112c:	0212      	lsls	r2, r2, #8
 800112e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001130:	193b      	adds	r3, r7, r4
 8001132:	2284      	movs	r2, #132	@ 0x84
 8001134:	0392      	lsls	r2, r2, #14
 8001136:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001138:	193b      	adds	r3, r7, r4
 800113a:	2201      	movs	r2, #1
 800113c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800113e:	193a      	adds	r2, r7, r4
 8001140:	23a0      	movs	r3, #160	@ 0xa0
 8001142:	05db      	lsls	r3, r3, #23
 8001144:	0011      	movs	r1, r2
 8001146:	0018      	movs	r0, r3
 8001148:	f001 fa32 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 800114c:	0021      	movs	r1, r4
 800114e:	187b      	adds	r3, r7, r1
 8001150:	220f      	movs	r2, #15
 8001152:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001154:	187b      	adds	r3, r7, r1
 8001156:	2284      	movs	r2, #132	@ 0x84
 8001158:	0392      	lsls	r2, r2, #14
 800115a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115c:	187b      	adds	r3, r7, r1
 800115e:	2201      	movs	r2, #1
 8001160:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001162:	000c      	movs	r4, r1
 8001164:	187b      	adds	r3, r7, r1
 8001166:	4a1e      	ldr	r2, [pc, #120]	@ (80011e0 <MX_GPIO_Init+0x1c0>)
 8001168:	0019      	movs	r1, r3
 800116a:	0010      	movs	r0, r2
 800116c:	f001 fa20 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_RST_Pin */
  GPIO_InitStruct.Pin = CTOUCH_RST_Pin;
 8001170:	0021      	movs	r1, r4
 8001172:	187b      	adds	r3, r7, r1
 8001174:	2280      	movs	r2, #128	@ 0x80
 8001176:	0052      	lsls	r2, r2, #1
 8001178:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	187b      	adds	r3, r7, r1
 800117c:	2201      	movs	r2, #1
 800117e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	187b      	adds	r3, r7, r1
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 800118c:	187b      	adds	r3, r7, r1
 800118e:	4a13      	ldr	r2, [pc, #76]	@ (80011dc <MX_GPIO_Init+0x1bc>)
 8001190:	0019      	movs	r1, r3
 8001192:	0010      	movs	r0, r2
 8001194:	f001 fa0c 	bl	80025b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	2005      	movs	r0, #5
 800119e:	f001 f9d5 	bl	800254c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80011a2:	2005      	movs	r0, #5
 80011a4:	f001 f9e7 	bl	8002576 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	2006      	movs	r0, #6
 80011ae:	f001 f9cd 	bl	800254c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80011b2:	2006      	movs	r0, #6
 80011b4:	f001 f9df 	bl	8002576 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2101      	movs	r1, #1
 80011bc:	2007      	movs	r0, #7
 80011be:	f001 f9c5 	bl	800254c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80011c2:	2007      	movs	r0, #7
 80011c4:	f001 f9d7 	bl	8002576 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011c8:	46c0      	nop			@ (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b00b      	add	sp, #44	@ 0x2c
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	40021000 	.word	0x40021000
 80011d4:	00001f01 	.word	0x00001f01
 80011d8:	50000800 	.word	0x50000800
 80011dc:	50000400 	.word	0x50000400
 80011e0:	50000c00 	.word	0x50000c00

080011e4 <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 80011f0:	4a07      	ldr	r2, [pc, #28]	@ (8001210 <updateAndDisplayTime+0x2c>)
 80011f2:	4908      	ldr	r1, [pc, #32]	@ (8001214 <updateAndDisplayTime+0x30>)
 80011f4:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <updateAndDisplayTime+0x34>)
 80011f6:	0018      	movs	r0, r3
 80011f8:	f7ff fbba 	bl	8000970 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <updateAndDisplayTime+0x30>)
 80011fe:	0018      	movs	r0, r3
 8001200:	f000 fd82 	bl	8001d08 <sevSeg_updateDigits>

	return halRet;
 8001204:	1dfb      	adds	r3, r7, #7
 8001206:	781b      	ldrb	r3, [r3, #0]

}
 8001208:	0018      	movs	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	b002      	add	sp, #8
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200000a8 	.word	0x200000a8
 8001214:	20000094 	.word	0x20000094
 8001218:	20000118 	.word	0x20000118

0800121c <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 8001228:	4b04      	ldr	r3, [pc, #16]	@ (800123c <updateAndDisplayAlarm+0x20>)
 800122a:	0018      	movs	r0, r3
 800122c:	f000 fd6c 	bl	8001d08 <sevSeg_updateDigits>

	return halRet;
 8001230:	1dfb      	adds	r3, r7, #7
 8001232:	781b      	ldrb	r3, [r3, #0]

}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	b002      	add	sp, #8
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200000ac 	.word	0x200000ac

08001240 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b08d      	sub	sp, #52	@ 0x34
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

	  //printf("Enter current time minute increment interrupt\n\r");

	  RTC_AlarmTypeDef sAlarm = {0};
 8001248:	2408      	movs	r4, #8
 800124a:	193b      	adds	r3, r7, r4
 800124c:	0018      	movs	r0, r3
 800124e:	2328      	movs	r3, #40	@ 0x28
 8001250:	001a      	movs	r2, r3
 8001252:	2100      	movs	r1, #0
 8001254:	f004 ffe6 	bl	8006224 <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8001258:	2380      	movs	r3, #128	@ 0x80
 800125a:	005a      	lsls	r2, r3, #1
 800125c:	1939      	adds	r1, r7, r4
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	2300      	movs	r3, #0
 8001262:	f003 fc91 	bl	8004b88 <HAL_RTC_GetAlarm>


	  if(sAlarm.AlarmTime.Minutes>58) {
 8001266:	193b      	adds	r3, r7, r4
 8001268:	785b      	ldrb	r3, [r3, #1]
 800126a:	2b3a      	cmp	r3, #58	@ 0x3a
 800126c:	d903      	bls.n	8001276 <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 800126e:	193b      	adds	r3, r7, r4
 8001270:	2200      	movs	r2, #0
 8001272:	705a      	strb	r2, [r3, #1]
 8001274:	e006      	b.n	8001284 <HAL_RTC_AlarmAEventCallback+0x44>
		//printf("Reset alarm time\n\r");
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8001276:	2108      	movs	r1, #8
 8001278:	187b      	adds	r3, r7, r1
 800127a:	785b      	ldrb	r3, [r3, #1]
 800127c:	3301      	adds	r3, #1
 800127e:	b2da      	uxtb	r2, r3
 8001280:	187b      	adds	r3, r7, r1
 8001282:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001284:	46c0      	nop			@ (mov r8, r8)
 8001286:	2308      	movs	r3, #8
 8001288:	18f9      	adds	r1, r7, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	0018      	movs	r0, r3
 8001290:	f003 fb3a 	bl	8004908 <HAL_RTC_SetAlarm_IT>
 8001294:	1e03      	subs	r3, r0, #0
 8001296:	d1f6      	bne.n	8001286 <HAL_RTC_AlarmAEventCallback+0x46>
//			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
		}

	  updateAndDisplayTime();
 8001298:	f7ff ffa4 	bl	80011e4 <updateAndDisplayTime>

	  //printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 800129c:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <HAL_RTC_AlarmAEventCallback+0x94>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d013      	beq.n	80012cc <HAL_RTC_AlarmAEventCallback+0x8c>
 80012a4:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <HAL_RTC_AlarmAEventCallback+0x98>)
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <HAL_RTC_AlarmAEventCallback+0x9c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d10d      	bne.n	80012cc <HAL_RTC_AlarmAEventCallback+0x8c>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <HAL_RTC_AlarmAEventCallback+0x98>)
 80012b2:	785a      	ldrb	r2, [r3, #1]
 80012b4:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <HAL_RTC_AlarmAEventCallback+0x9c>)
 80012b6:	785b      	ldrb	r3, [r3, #1]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d107      	bne.n	80012cc <HAL_RTC_AlarmAEventCallback+0x8c>
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <HAL_RTC_AlarmAEventCallback+0x98>)
 80012be:	78da      	ldrb	r2, [r3, #3]
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_RTC_AlarmAEventCallback+0x9c>)
 80012c2:	78db      	ldrb	r3, [r3, #3]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d101      	bne.n	80012cc <HAL_RTC_AlarmAEventCallback+0x8c>
		  userAlarmBeep();
 80012c8:	f000 f80a 	bl	80012e0 <userAlarmBeep>
	  }


}
 80012cc:	46c0      	nop			@ (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b00d      	add	sp, #52	@ 0x34
 80012d2:	bd90      	pop	{r4, r7, pc}
 80012d4:	20000091 	.word	0x20000091
 80012d8:	200000ac 	.word	0x200000ac
 80012dc:	20000094 	.word	0x20000094

080012e0 <userAlarmBeep>:

void userAlarmBeep() {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 80012e6:	4b56      	ldr	r3, [pc, #344]	@ (8001440 <userAlarmBeep+0x160>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d02d      	beq.n	800134a <userAlarmBeep+0x6a>

			// Stop the timer and
			HAL_TIM_Base_Stop_IT(timerSnooze);
 80012ee:	4b55      	ldr	r3, [pc, #340]	@ (8001444 <userAlarmBeep+0x164>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	0018      	movs	r0, r3
 80012f4:	f004 f846 	bl	8005384 <HAL_TIM_Base_Stop_IT>

			// Reset count to 0
			// only bits 0 - 15 should be changed.
			timerSnooze->Instance->CNT &= 0xFFFF0000;
 80012f8:	4b52      	ldr	r3, [pc, #328]	@ (8001444 <userAlarmBeep+0x164>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001300:	4b50      	ldr	r3, [pc, #320]	@ (8001444 <userAlarmBeep+0x164>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	0c12      	lsrs	r2, r2, #16
 8001308:	0412      	lsls	r2, r2, #16
 800130a:	625a      	str	r2, [r3, #36]	@ 0x24

			// Reset interrupt status register
			timerSnooze->Instance->SR &= 0xFFFC;
 800130c:	4b4d      	ldr	r3, [pc, #308]	@ (8001444 <userAlarmBeep+0x164>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	4b4b      	ldr	r3, [pc, #300]	@ (8001444 <userAlarmBeep+0x164>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	494b      	ldr	r1, [pc, #300]	@ (8001448 <userAlarmBeep+0x168>)
 800131c:	400a      	ands	r2, r1
 800131e:	611a      	str	r2, [r3, #16]

			// Re-write RCR with 10
			timerSnooze->Instance->RCR &= 0xFF00;
 8001320:	4b48      	ldr	r3, [pc, #288]	@ (8001444 <userAlarmBeep+0x164>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001328:	4b46      	ldr	r3, [pc, #280]	@ (8001444 <userAlarmBeep+0x164>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	22ff      	movs	r2, #255	@ 0xff
 8001330:	0212      	lsls	r2, r2, #8
 8001332:	400a      	ands	r2, r1
 8001334:	631a      	str	r2, [r3, #48]	@ 0x30
			timerSnooze->Instance->RCR |= timerSnooze_RCR;
 8001336:	4b43      	ldr	r3, [pc, #268]	@ (8001444 <userAlarmBeep+0x164>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800133e:	2164      	movs	r1, #100	@ 0x64
 8001340:	4b40      	ldr	r3, [pc, #256]	@ (8001444 <userAlarmBeep+0x164>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	631a      	str	r2, [r3, #48]	@ 0x30

		}

	HAL_TIM_Base_Stop(timerDelay);
 800134a:	4b40      	ldr	r3, [pc, #256]	@ (800144c <userAlarmBeep+0x16c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	0018      	movs	r0, r3
 8001350:	f003 ff9e 	bl	8005290 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001354:	4b3d      	ldr	r3, [pc, #244]	@ (800144c <userAlarmBeep+0x16c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	0018      	movs	r0, r3
 800135a:	f003 ff4d 	bl	80051f8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 800135e:	4b3b      	ldr	r3, [pc, #236]	@ (800144c <userAlarmBeep+0x16c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001366:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001368:	1cfb      	adds	r3, r7, #3
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 800136e:	f7ff ff39 	bl	80011e4 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 8001372:	4b36      	ldr	r3, [pc, #216]	@ (800144c <userAlarmBeep+0x16c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	4a34      	ldr	r2, [pc, #208]	@ (8001450 <userAlarmBeep+0x170>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d922      	bls.n	80013ca <userAlarmBeep+0xea>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 8001384:	1cfb      	adds	r3, r7, #3
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4a32      	ldr	r2, [pc, #200]	@ (8001454 <userAlarmBeep+0x174>)
 800138a:	5cd3      	ldrb	r3, [r2, r3]
 800138c:	0018      	movs	r0, r3
 800138e:	f000 fd6d 	bl	8001e6c <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(buzzerPort, buzzerPin);					// Toggle Buzzer
 8001392:	4b31      	ldr	r3, [pc, #196]	@ (8001458 <userAlarmBeep+0x178>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2280      	movs	r2, #128	@ 0x80
 8001398:	0052      	lsls	r2, r2, #1
 800139a:	0011      	movs	r1, r2
 800139c:	0018      	movs	r0, r3
 800139e:	f001 faa5 	bl	80028ec <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80013a2:	4b2a      	ldr	r3, [pc, #168]	@ (800144c <userAlarmBeep+0x16c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013aa:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80013ac:	1cfb      	adds	r3, r7, #3
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	1e5a      	subs	r2, r3, #1
 80013b2:	4193      	sbcs	r3, r2
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2201      	movs	r2, #1
 80013b8:	4053      	eors	r3, r2
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	001a      	movs	r2, r3
 80013be:	1cfb      	adds	r3, r7, #3
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	781a      	ldrb	r2, [r3, #0]
 80013c4:	2101      	movs	r1, #1
 80013c6:	400a      	ands	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]

		}


		capTouch_readChannels(&capTouch);
 80013ca:	4b24      	ldr	r3, [pc, #144]	@ (800145c <userAlarmBeep+0x17c>)
 80013cc:	0018      	movs	r0, r3
 80013ce:	f7ff f875 	bl	80004bc <capTouch_readChannels>
//		HAL_StatusTypeDef halRet = capTouch_readChannels(&capTouch);
//		if(halRet != HAL_OK)
//			dispError();

	} while(capTouch.keyStat == 0x00 &&
 80013d2:	4b22      	ldr	r3, [pc, #136]	@ (800145c <userAlarmBeep+0x17c>)
 80013d4:	7c1b      	ldrb	r3, [r3, #16]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d108      	bne.n	80013ec <userAlarmBeep+0x10c>
			(HAL_GPIO_ReadPin(alarmEnableButtonPort, alarmEnableButtonPin) != GPIO_PIN_RESET));
 80013da:	4b21      	ldr	r3, [pc, #132]	@ (8001460 <userAlarmBeep+0x180>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2204      	movs	r2, #4
 80013e0:	0011      	movs	r1, r2
 80013e2:	0018      	movs	r0, r3
 80013e4:	f001 fa48 	bl	8002878 <HAL_GPIO_ReadPin>
 80013e8:	1e03      	subs	r3, r0, #0
	} while(capTouch.keyStat == 0x00 &&
 80013ea:	d1c0      	bne.n	800136e <userAlarmBeep+0x8e>

	/*
	 * Stop blinking, turn off buzzer, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 80013ec:	4b17      	ldr	r3, [pc, #92]	@ (800144c <userAlarmBeep+0x16c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	0018      	movs	r0, r3
 80013f2:	f003 ff4d 	bl	8005290 <HAL_TIM_Base_Stop>
	HAL_GPIO_WritePin(buzzerPort, buzzerPin, GPIO_PIN_RESET);
 80013f6:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <userAlarmBeep+0x178>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	0051      	lsls	r1, r2, #1
 80013fe:	2200      	movs	r2, #0
 8001400:	0018      	movs	r0, r3
 8001402:	f001 fa56 	bl	80028b2 <HAL_GPIO_WritePin>
	updateAndDisplayTime();				// Update to current time and display
 8001406:	f7ff feed 	bl	80011e4 <updateAndDisplayTime>
	sevSeg_setIntensity(sevSeg_intensityDuty[1]);	// Toggle 0% to 50% duty cycle
 800140a:	235a      	movs	r3, #90	@ 0x5a
 800140c:	0018      	movs	r0, r3
 800140e:	f000 fd2d 	bl	8001e6c <sevSeg_setIntensity>

	// If this is the first snooze,
	if(!secondSnooze) {
 8001412:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <userAlarmBeep+0x160>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2201      	movs	r2, #1
 8001418:	4053      	eors	r3, r2
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d008      	beq.n	8001432 <userAlarmBeep+0x152>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <userAlarmBeep+0x164>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	0018      	movs	r0, r3
 8001426:	f003 ff59 	bl	80052dc <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 800142a:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <userAlarmBeep+0x160>)
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
		 * in the top conditional, the secondSnooze is always true;
		 */
		secondSnooze = false;

	}
}
 8001430:	e002      	b.n	8001438 <userAlarmBeep+0x158>
		secondSnooze = false;
 8001432:	4b03      	ldr	r3, [pc, #12]	@ (8001440 <userAlarmBeep+0x160>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
}
 8001438:	46c0      	nop			@ (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	b002      	add	sp, #8
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000229 	.word	0x20000229
 8001444:	2000004c 	.word	0x2000004c
 8001448:	0000fffc 	.word	0x0000fffc
 800144c:	20000048 	.word	0x20000048
 8001450:	00007ffe 	.word	0x00007ffe
 8001454:	080062cc 	.word	0x080062cc
 8001458:	20000014 	.word	0x20000014
 800145c:	2000022c 	.word	0x2000022c
 8001460:	20000000 	.word	0x20000000

08001464 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	0002      	movs	r2, r0
 800146c:	1dbb      	adds	r3, r7, #6
 800146e:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8001470:	2208      	movs	r2, #8
 8001472:	1dbb      	adds	r3, r7, #6
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	4293      	cmp	r3, r2
 8001478:	d106      	bne.n	8001488 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 800147a:	230f      	movs	r3, #15
 800147c:	18fc      	adds	r4, r7, r3
 800147e:	f000 f851 	bl	8001524 <displayButtonISR>
 8001482:	0003      	movs	r3, r0
 8001484:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8001486:	e031      	b.n	80014ec <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8001488:	2204      	movs	r2, #4
 800148a:	1dbb      	adds	r3, r7, #6
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	4293      	cmp	r3, r2
 8001490:	d106      	bne.n	80014a0 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 8001492:	230f      	movs	r3, #15
 8001494:	18fc      	adds	r4, r7, r3
 8001496:	f000 f86d 	bl	8001574 <alarmEnableISR>
 800149a:	0003      	movs	r3, r0
 800149c:	7023      	strb	r3, [r4, #0]
}
 800149e:	e025      	b.n	80014ec <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 80014a0:	2380      	movs	r3, #128	@ 0x80
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	1dba      	adds	r2, r7, #6
 80014a6:	8812      	ldrh	r2, [r2, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d106      	bne.n	80014ba <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 80014ac:	230f      	movs	r3, #15
 80014ae:	18fc      	adds	r4, r7, r3
 80014b0:	f000 f89a 	bl	80015e8 <alarmSetISR>
 80014b4:	0003      	movs	r3, r0
 80014b6:	7023      	strb	r3, [r4, #0]
}
 80014b8:	e018      	b.n	80014ec <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 80014ba:	2201      	movs	r2, #1
 80014bc:	1dbb      	adds	r3, r7, #6
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d106      	bne.n	80014d2 <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 80014c4:	230f      	movs	r3, #15
 80014c6:	18fc      	adds	r4, r7, r3
 80014c8:	f000 f94a 	bl	8001760 <hourSetISR>
 80014cc:	0003      	movs	r3, r0
 80014ce:	7023      	strb	r3, [r4, #0]
}
 80014d0:	e00c      	b.n	80014ec <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 80014d2:	2202      	movs	r2, #2
 80014d4:	1dbb      	adds	r3, r7, #6
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	4293      	cmp	r3, r2
 80014da:	d106      	bne.n	80014ea <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 80014dc:	230f      	movs	r3, #15
 80014de:	18fc      	adds	r4, r7, r3
 80014e0:	f000 f96a 	bl	80017b8 <minuteSetISR>
 80014e4:	0003      	movs	r3, r0
 80014e6:	7023      	strb	r3, [r4, #0]
}
 80014e8:	e000      	b.n	80014ec <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 80014ea:	46c0      	nop			@ (mov r8, r8)
}
 80014ec:	46c0      	nop			@ (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b005      	add	sp, #20
 80014f2:	bd90      	pop	{r4, r7, pc}

080014f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

	if((htim == timerSnooze) && (secondSnooze == true)) {
 80014fc:	4b07      	ldr	r3, [pc, #28]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0x28>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	429a      	cmp	r2, r3
 8001504:	d105      	bne.n	8001512 <HAL_TIM_PeriodElapsedCallback+0x1e>
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_TIM_PeriodElapsedCallback+0x1e>

//		HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

		userAlarmBeep();
 800150e:	f7ff fee7 	bl	80012e0 <userAlarmBeep>

	}

}
 8001512:	46c0      	nop			@ (mov r8, r8)
 8001514:	46bd      	mov	sp, r7
 8001516:	b002      	add	sp, #8
 8001518:	bd80      	pop	{r7, pc}
 800151a:	46c0      	nop			@ (mov r8, r8)
 800151c:	2000004c 	.word	0x2000004c
 8001520:	20000229 	.word	0x20000229

08001524 <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 800152a:	1dfb      	adds	r3, r7, #7
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 8001530:	f7ff fe58 	bl	80011e4 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8001534:	4b0d      	ldr	r3, [pc, #52]	@ (800156c <displayButtonISR+0x48>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	001a      	movs	r2, r3
 800153a:	4b0d      	ldr	r3, [pc, #52]	@ (8001570 <displayButtonISR+0x4c>)
 800153c:	5c9b      	ldrb	r3, [r3, r2]
 800153e:	0018      	movs	r0, r3
 8001540:	f000 fc94 	bl	8001e6c <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <displayButtonISR+0x48>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d903      	bls.n	8001554 <displayButtonISR+0x30>
		displayToggle = 0;
 800154c:	4b07      	ldr	r3, [pc, #28]	@ (800156c <displayButtonISR+0x48>)
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
 8001552:	e005      	b.n	8001560 <displayButtonISR+0x3c>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <displayButtonISR+0x48>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	b2da      	uxtb	r2, r3
 800155c:	4b03      	ldr	r3, [pc, #12]	@ (800156c <displayButtonISR+0x48>)
 800155e:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8001560:	1dfb      	adds	r3, r7, #7
 8001562:	781b      	ldrb	r3, [r3, #0]

}
 8001564:	0018      	movs	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	b002      	add	sp, #8
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000090 	.word	0x20000090
 8001570:	080062cc 	.word	0x080062cc

08001574 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 800157a:	1dfb      	adds	r3, r7, #7
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8001580:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <alarmEnableISR+0x68>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2201      	movs	r2, #1
 8001586:	4053      	eors	r3, r2
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00b      	beq.n	80015a6 <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 800158e:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <alarmEnableISR+0x6c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2280      	movs	r2, #128	@ 0x80
 8001594:	0151      	lsls	r1, r2, #5
 8001596:	2201      	movs	r2, #1
 8001598:	0018      	movs	r0, r3
 800159a:	f001 f98a 	bl	80028b2 <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 800159e:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <alarmEnableISR+0x68>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]
 80015a4:	e010      	b.n	80015c8 <alarmEnableISR+0x54>

		//printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
								//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 80015a6:	4b0d      	ldr	r3, [pc, #52]	@ (80015dc <alarmEnableISR+0x68>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00b      	beq.n	80015c6 <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <alarmEnableISR+0x6c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2280      	movs	r2, #128	@ 0x80
 80015b4:	0151      	lsls	r1, r2, #5
 80015b6:	2200      	movs	r2, #0
 80015b8:	0018      	movs	r0, r3
 80015ba:	f001 f97a 	bl	80028b2 <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 80015be:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <alarmEnableISR+0x68>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
 80015c4:	e000      	b.n	80015c8 <alarmEnableISR+0x54>

		//printf("User alarm disabled.\n\r");
	}
	else {
		__NOP();							//Code should never reach here.
 80015c6:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset snooze time
	secondSnooze = false;
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <alarmEnableISR+0x70>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]

	return halRet;
 80015ce:	1dfb      	adds	r3, r7, #7
 80015d0:	781b      	ldrb	r3, [r3, #0]

}
 80015d2:	0018      	movs	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b002      	add	sp, #8
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	46c0      	nop			@ (mov r8, r8)
 80015dc:	20000091 	.word	0x20000091
 80015e0:	20000010 	.word	0x20000010
 80015e4:	20000229 	.word	0x20000229

080015e8 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80015ee:	1c7b      	adds	r3, r7, #1
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for 3 seconds to see if alarm set button is still pressed
	 */

	// Delay for 3 * 1s intervals
	for(uint8_t i = 0; i < 3; i++) {
 80015f4:	1dfb      	adds	r3, r7, #7
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	e01a      	b.n	8001632 <alarmSetISR+0x4a>

		HAL_TIM_Base_Stop(timerDelay);
 80015fc:	4b53      	ldr	r3, [pc, #332]	@ (800174c <alarmSetISR+0x164>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	0018      	movs	r0, r3
 8001602:	f003 fe45 	bl	8005290 <HAL_TIM_Base_Stop>
		timerDelay->Instance->CNT = 0;						// Reset timer base
 8001606:	4b51      	ldr	r3, [pc, #324]	@ (800174c <alarmSetISR+0x164>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2200      	movs	r2, #0
 800160e:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001610:	4b4e      	ldr	r3, [pc, #312]	@ (800174c <alarmSetISR+0x164>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	0018      	movs	r0, r3
 8001616:	f003 fdef 	bl	80051f8 <HAL_TIM_Base_Start>
	//	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to

		do {

		} while(__HAL_TIM_GET_COUNTER(timerDelay) < (65535));
 800161a:	4b4c      	ldr	r3, [pc, #304]	@ (800174c <alarmSetISR+0x164>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001622:	4a4b      	ldr	r2, [pc, #300]	@ (8001750 <alarmSetISR+0x168>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d9f8      	bls.n	800161a <alarmSetISR+0x32>
	for(uint8_t i = 0; i < 3; i++) {
 8001628:	1dfb      	adds	r3, r7, #7
 800162a:	781a      	ldrb	r2, [r3, #0]
 800162c:	1dfb      	adds	r3, r7, #7
 800162e:	3201      	adds	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d9e0      	bls.n	80015fc <alarmSetISR+0x14>
	}

	// If button is still pressed, we are in alarm set mode.
	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 800163a:	4b46      	ldr	r3, [pc, #280]	@ (8001754 <alarmSetISR+0x16c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2280      	movs	r2, #128	@ 0x80
 8001640:	0212      	lsls	r2, r2, #8
 8001642:	0011      	movs	r1, r2
 8001644:	0018      	movs	r0, r3
 8001646:	f001 f917 	bl	8002878 <HAL_GPIO_ReadPin>
 800164a:	1e03      	subs	r3, r0, #0
 800164c:	d102      	bne.n	8001654 <alarmSetISR+0x6c>
		alarmSetMode = true;
 800164e:	4b42      	ldr	r3, [pc, #264]	@ (8001758 <alarmSetISR+0x170>)
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
//	do {
//
//	} while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET);

	// Reset Timer
	HAL_TIM_Base_Stop(timerDelay);
 8001654:	4b3d      	ldr	r3, [pc, #244]	@ (800174c <alarmSetISR+0x164>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	0018      	movs	r0, r3
 800165a:	f003 fe19 	bl	8005290 <HAL_TIM_Base_Stop>
	timerDelay->Instance->CNT = 0;
 800165e:	4b3b      	ldr	r3, [pc, #236]	@ (800174c <alarmSetISR+0x164>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2200      	movs	r2, #0
 8001666:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001668:	4b38      	ldr	r3, [pc, #224]	@ (800174c <alarmSetISR+0x164>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	0018      	movs	r0, r3
 800166e:	f003 fdc3 	bl	80051f8 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001672:	4b36      	ldr	r3, [pc, #216]	@ (800174c <alarmSetISR+0x164>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	801a      	strh	r2, [r3, #0]

	bool alarmSetButtonReset = false;
 800167e:	1cfb      	adds	r3, r7, #3
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {
 8001684:	4b34      	ldr	r3, [pc, #208]	@ (8001758 <alarmSetISR+0x170>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d055      	beq.n	8001738 <alarmSetISR+0x150>

		bool displayBlink = false;
 800168c:	1cbb      	adds	r3, r7, #2
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			// Check to make sure the user has released the set button from the initial hold
			if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_SET) {
 8001692:	4b30      	ldr	r3, [pc, #192]	@ (8001754 <alarmSetISR+0x16c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2280      	movs	r2, #128	@ 0x80
 8001698:	0212      	lsls	r2, r2, #8
 800169a:	0011      	movs	r1, r2
 800169c:	0018      	movs	r0, r3
 800169e:	f001 f8eb 	bl	8002878 <HAL_GPIO_ReadPin>
 80016a2:	0003      	movs	r3, r0
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d102      	bne.n	80016ae <alarmSetISR+0xc6>
				alarmSetButtonReset = true;
 80016a8:	1cfb      	adds	r3, r7, #3
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
			}

			updateAndDisplayAlarm();
 80016ae:	f7ff fdb5 	bl	800121c <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 80016b2:	4b26      	ldr	r3, [pc, #152]	@ (800174c <alarmSetISR+0x164>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	1ad2      	subs	r2, r2, r3
 80016c0:	2380      	movs	r3, #128	@ 0x80
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d31b      	bcc.n	8001700 <alarmSetISR+0x118>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 80016c8:	1cbb      	adds	r3, r7, #2
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4a23      	ldr	r2, [pc, #140]	@ (800175c <alarmSetISR+0x174>)
 80016ce:	5cd3      	ldrb	r3, [r2, r3]
 80016d0:	0018      	movs	r0, r3
 80016d2:	f000 fbcb 	bl	8001e6c <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 80016d6:	4b1d      	ldr	r3, [pc, #116]	@ (800174c <alarmSetISR+0x164>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	801a      	strh	r2, [r3, #0]
				displayBlink = !displayBlink;
 80016e2:	1cbb      	adds	r3, r7, #2
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	1e5a      	subs	r2, r3, #1
 80016e8:	4193      	sbcs	r3, r2
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2201      	movs	r2, #1
 80016ee:	4053      	eors	r3, r2
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	001a      	movs	r2, r3
 80016f4:	1cbb      	adds	r3, r7, #2
 80016f6:	701a      	strb	r2, [r3, #0]
 80016f8:	781a      	ldrb	r2, [r3, #0]
 80016fa:	2101      	movs	r1, #1
 80016fc:	400a      	ands	r2, r1
 80016fe:	701a      	strb	r2, [r3, #0]

			}

		}while((HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET)
 8001700:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <alarmSetISR+0x16c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2280      	movs	r2, #128	@ 0x80
 8001706:	0212      	lsls	r2, r2, #8
 8001708:	0011      	movs	r1, r2
 800170a:	0018      	movs	r0, r3
 800170c:	f001 f8b4 	bl	8002878 <HAL_GPIO_ReadPin>
 8001710:	1e03      	subs	r3, r0, #0
				|| !alarmSetButtonReset);
 8001712:	d1be      	bne.n	8001692 <alarmSetISR+0xaa>
 8001714:	1cfb      	adds	r3, r7, #3
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2201      	movs	r2, #1
 800171a:	4053      	eors	r3, r2
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1b7      	bne.n	8001692 <alarmSetISR+0xaa>

//		HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_RESET);

		sevSeg_setIntensity(sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 8001722:	235a      	movs	r3, #90	@ 0x5a
 8001724:	0018      	movs	r0, r3
 8001726:	f000 fba1 	bl	8001e6c <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 800172a:	4b08      	ldr	r3, [pc, #32]	@ (800174c <alarmSetISR+0x164>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	0018      	movs	r0, r3
 8001730:	f003 fdae 	bl	8005290 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8001734:	f7ff fd56 	bl	80011e4 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8001738:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <alarmSetISR+0x170>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 800173e:	1c7b      	adds	r3, r7, #1
 8001740:	781b      	ldrb	r3, [r3, #0]

}
 8001742:	0018      	movs	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	b002      	add	sp, #8
 8001748:	bd80      	pop	{r7, pc}
 800174a:	46c0      	nop			@ (mov r8, r8)
 800174c:	20000048 	.word	0x20000048
 8001750:	0000fffe 	.word	0x0000fffe
 8001754:	20000004 	.word	0x20000004
 8001758:	20000228 	.word	0x20000228
 800175c:	080062cc 	.word	0x080062cc

08001760 <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0


	HAL_StatusTypeDef halRet = HAL_OK;
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 800176c:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <hourSetISR+0x48>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <hourSetISR+0x1a>

		alarmHourInc();
 8001774:	f000 f87c 	bl	8001870 <alarmHourInc>
 8001778:	e00f      	b.n	800179a <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 800177a:	f000 f8a9 	bl	80018d0 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 800177e:	490b      	ldr	r1, [pc, #44]	@ (80017ac <hourSetISR+0x4c>)
 8001780:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <hourSetISR+0x50>)
 8001782:	2200      	movs	r2, #0
 8001784:	0018      	movs	r0, r3
 8001786:	f002 fedb 	bl	8004540 <HAL_RTC_SetTime>


		updateAndDisplayTime();
 800178a:	f7ff fd2b 	bl	80011e4 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 800178e:	4a09      	ldr	r2, [pc, #36]	@ (80017b4 <hourSetISR+0x54>)
 8001790:	4906      	ldr	r1, [pc, #24]	@ (80017ac <hourSetISR+0x4c>)
 8001792:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <hourSetISR+0x50>)
 8001794:	0018      	movs	r0, r3
 8001796:	f7ff f8eb 	bl	8000970 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 800179a:	1dfb      	adds	r3, r7, #7
 800179c:	781b      	ldrb	r3, [r3, #0]

}
 800179e:	0018      	movs	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b002      	add	sp, #8
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	46c0      	nop			@ (mov r8, r8)
 80017a8:	20000228 	.word	0x20000228
 80017ac:	20000094 	.word	0x20000094
 80017b0:	20000118 	.word	0x20000118
 80017b4:	200000a8 	.word	0x200000a8

080017b8 <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	@ 0x30
 80017bc:	af00      	add	r7, sp, #0


	HAL_StatusTypeDef halRet = HAL_OK;
 80017be:	232f      	movs	r3, #47	@ 0x2f
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80017c6:	4b25      	ldr	r3, [pc, #148]	@ (800185c <minuteSetISR+0xa4>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d002      	beq.n	80017d4 <minuteSetISR+0x1c>

		alarmMinuteInc();
 80017ce:	f000 f8bf 	bl	8001950 <alarmMinuteInc>
 80017d2:	e03b      	b.n	800184c <minuteSetISR+0x94>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 80017d4:	f000 f8da 	bl	800198c <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80017d8:	4921      	ldr	r1, [pc, #132]	@ (8001860 <minuteSetISR+0xa8>)
 80017da:	4b22      	ldr	r3, [pc, #136]	@ (8001864 <minuteSetISR+0xac>)
 80017dc:	2200      	movs	r2, #0
 80017de:	0018      	movs	r0, r3
 80017e0:	f002 feae 	bl	8004540 <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	0018      	movs	r0, r3
 80017e8:	2328      	movs	r3, #40	@ 0x28
 80017ea:	001a      	movs	r2, r3
 80017ec:	2100      	movs	r1, #0
 80017ee:	f004 fd19 	bl	8006224 <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 80017f2:	2380      	movs	r3, #128	@ 0x80
 80017f4:	005a      	lsls	r2, r3, #1
 80017f6:	1d39      	adds	r1, r7, #4
 80017f8:	481a      	ldr	r0, [pc, #104]	@ (8001864 <minuteSetISR+0xac>)
 80017fa:	2300      	movs	r3, #0
 80017fc:	f003 f9c4 	bl	8004b88 <HAL_RTC_GetAlarm>

		if(sAlarm.AlarmTime.Minutes>58) {
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	785b      	ldrb	r3, [r3, #1]
 8001804:	2b3a      	cmp	r3, #58	@ 0x3a
 8001806:	d903      	bls.n	8001810 <minuteSetISR+0x58>
			sAlarm.AlarmTime.Minutes=0;
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	2200      	movs	r2, #0
 800180c:	705a      	strb	r2, [r3, #1]
 800180e:	e00d      	b.n	800182c <minuteSetISR+0x74>
			//printf("Reset alarm time\n\r");
		} else {
			sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	785b      	ldrb	r3, [r3, #1]
 8001814:	3301      	adds	r3, #1
 8001816:	b2da      	uxtb	r2, r3
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 800181c:	e006      	b.n	800182c <minuteSetISR+0x74>
			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 800181e:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <minuteSetISR+0xb0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2201      	movs	r2, #1
 8001824:	0011      	movs	r1, r2
 8001826:	0018      	movs	r0, r3
 8001828:	f001 f860 	bl	80028ec <HAL_GPIO_TogglePin>
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 800182c:	1d39      	adds	r1, r7, #4
 800182e:	4b0d      	ldr	r3, [pc, #52]	@ (8001864 <minuteSetISR+0xac>)
 8001830:	2200      	movs	r2, #0
 8001832:	0018      	movs	r0, r3
 8001834:	f003 f868 	bl	8004908 <HAL_RTC_SetAlarm_IT>
 8001838:	1e03      	subs	r3, r0, #0
 800183a:	d1f0      	bne.n	800181e <minuteSetISR+0x66>
		}


		updateAndDisplayTime();
 800183c:	f7ff fcd2 	bl	80011e4 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001840:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <minuteSetISR+0xb4>)
 8001842:	4907      	ldr	r1, [pc, #28]	@ (8001860 <minuteSetISR+0xa8>)
 8001844:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <minuteSetISR+0xac>)
 8001846:	0018      	movs	r0, r3
 8001848:	f7ff f892 	bl	8000970 <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 800184c:	232f      	movs	r3, #47	@ 0x2f
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	781b      	ldrb	r3, [r3, #0]
}
 8001852:	0018      	movs	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	b00c      	add	sp, #48	@ 0x30
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			@ (mov r8, r8)
 800185c:	20000228 	.word	0x20000228
 8001860:	20000094 	.word	0x20000094
 8001864:	20000118 	.word	0x20000118
 8001868:	2000002c 	.word	0x2000002c
 800186c:	200000a8 	.word	0x200000a8

08001870 <alarmHourInc>:

void alarmHourInc(void) {
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8001874:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <alarmHourInc+0x5c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b0b      	cmp	r3, #11
 800187a:	d903      	bls.n	8001884 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 800187c:	4b13      	ldr	r3, [pc, #76]	@ (80018cc <alarmHourInc+0x5c>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e01e      	b.n	80018c2 <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <alarmHourInc+0x5c>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b0b      	cmp	r3, #11
 800188a:	d10e      	bne.n	80018aa <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800188c:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <alarmHourInc+0x5c>)
 800188e:	78db      	ldrb	r3, [r3, #3]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d103      	bne.n	800189c <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001894:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <alarmHourInc+0x5c>)
 8001896:	2201      	movs	r2, #1
 8001898:	70da      	strb	r2, [r3, #3]
 800189a:	e002      	b.n	80018a2 <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800189c:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <alarmHourInc+0x5c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 80018a2:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <alarmHourInc+0x5c>)
 80018a4:	220c      	movs	r2, #12
 80018a6:	701a      	strb	r2, [r3, #0]
 80018a8:	e00b      	b.n	80018c2 <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 80018aa:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <alarmHourInc+0x5c>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b0a      	cmp	r3, #10
 80018b0:	d806      	bhi.n	80018c0 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <alarmHourInc+0x5c>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <alarmHourInc+0x5c>)
 80018bc:	701a      	strb	r2, [r3, #0]
 80018be:	e000      	b.n	80018c2 <alarmHourInc+0x52>
	}
	else {
		__NOP();
 80018c0:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 80018c2:	f000 f8d1 	bl	8001a68 <updateRTCBackupReg>

}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200000ac 	.word	0x200000ac

080018d0 <currHourInc>:

void currHourInc(void) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 80018d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001940 <currHourInc+0x70>)
 80018d6:	491b      	ldr	r1, [pc, #108]	@ (8001944 <currHourInc+0x74>)
 80018d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <currHourInc+0x78>)
 80018da:	0018      	movs	r0, r3
 80018dc:	f7ff f848 	bl	8000970 <getRTCTime>

	if(currTime.Hours >= 12) {
 80018e0:	4b18      	ldr	r3, [pc, #96]	@ (8001944 <currHourInc+0x74>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b0b      	cmp	r3, #11
 80018e6:	d903      	bls.n	80018f0 <currHourInc+0x20>
		currTime.Hours = 1;
 80018e8:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <currHourInc+0x74>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
 80018ee:	e01e      	b.n	800192e <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 80018f0:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <currHourInc+0x74>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b0b      	cmp	r3, #11
 80018f6:	d10e      	bne.n	8001916 <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <currHourInc+0x74>)
 80018fa:	78db      	ldrb	r3, [r3, #3]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d103      	bne.n	8001908 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001900:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <currHourInc+0x74>)
 8001902:	2201      	movs	r2, #1
 8001904:	70da      	strb	r2, [r3, #3]
 8001906:	e002      	b.n	800190e <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001908:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <currHourInc+0x74>)
 800190a:	2200      	movs	r2, #0
 800190c:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 800190e:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <currHourInc+0x74>)
 8001910:	220c      	movs	r2, #12
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	e00b      	b.n	800192e <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 8001916:	4b0d      	ldr	r3, [pc, #52]	@ (800194c <currHourInc+0x7c>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b0a      	cmp	r3, #10
 800191c:	d806      	bhi.n	800192c <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <currHourInc+0x74>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	3301      	adds	r3, #1
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b07      	ldr	r3, [pc, #28]	@ (8001944 <currHourInc+0x74>)
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	e000      	b.n	800192e <currHourInc+0x5e>
	}
	else {
		__NOP();
 800192c:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 800192e:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <currHourInc+0x74>)
 8001930:	2200      	movs	r2, #0
 8001932:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001934:	4b03      	ldr	r3, [pc, #12]	@ (8001944 <currHourInc+0x74>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]

}
 800193a:	46c0      	nop			@ (mov r8, r8)
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200000a8 	.word	0x200000a8
 8001944:	20000094 	.word	0x20000094
 8001948:	20000118 	.word	0x20000118
 800194c:	200000ac 	.word	0x200000ac

08001950 <alarmMinuteInc>:

void alarmMinuteInc(void) {
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 8001954:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <alarmMinuteInc+0x38>)
 8001956:	785b      	ldrb	r3, [r3, #1]
 8001958:	2b3a      	cmp	r3, #58	@ 0x3a
 800195a:	d903      	bls.n	8001964 <alarmMinuteInc+0x14>
		/*
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		//alarmHourInc();
		userAlarmTime.Minutes = 0;
 800195c:	4b0a      	ldr	r3, [pc, #40]	@ (8001988 <alarmMinuteInc+0x38>)
 800195e:	2200      	movs	r2, #0
 8001960:	705a      	strb	r2, [r3, #1]
 8001962:	e00b      	b.n	800197c <alarmMinuteInc+0x2c>
	}
	else if(userAlarmTime.Minutes < 59) {
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <alarmMinuteInc+0x38>)
 8001966:	785b      	ldrb	r3, [r3, #1]
 8001968:	2b3a      	cmp	r3, #58	@ 0x3a
 800196a:	d806      	bhi.n	800197a <alarmMinuteInc+0x2a>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <alarmMinuteInc+0x38>)
 800196e:	785b      	ldrb	r3, [r3, #1]
 8001970:	3301      	adds	r3, #1
 8001972:	b2da      	uxtb	r2, r3
 8001974:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <alarmMinuteInc+0x38>)
 8001976:	705a      	strb	r2, [r3, #1]
 8001978:	e000      	b.n	800197c <alarmMinuteInc+0x2c>
	}
	else {
		__NOP();
 800197a:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 800197c:	f000 f874 	bl	8001a68 <updateRTCBackupReg>

}
 8001980:	46c0      	nop			@ (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			@ (mov r8, r8)
 8001988:	200000ac 	.word	0x200000ac

0800198c <currMinuteInc>:

void currMinuteInc(void) {
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001990:	4a11      	ldr	r2, [pc, #68]	@ (80019d8 <currMinuteInc+0x4c>)
 8001992:	4912      	ldr	r1, [pc, #72]	@ (80019dc <currMinuteInc+0x50>)
 8001994:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <currMinuteInc+0x54>)
 8001996:	0018      	movs	r0, r3
 8001998:	f7fe ffea 	bl	8000970 <getRTCTime>

	if(currTime.Minutes >= 59) {
 800199c:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <currMinuteInc+0x50>)
 800199e:	785b      	ldrb	r3, [r3, #1]
 80019a0:	2b3a      	cmp	r3, #58	@ 0x3a
 80019a2:	d903      	bls.n	80019ac <currMinuteInc+0x20>
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		// currHourInc();

		currTime.Minutes = 0;
 80019a4:	4b0d      	ldr	r3, [pc, #52]	@ (80019dc <currMinuteInc+0x50>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	705a      	strb	r2, [r3, #1]
 80019aa:	e00b      	b.n	80019c4 <currMinuteInc+0x38>
	}
	else if(currTime.Minutes < 59) {
 80019ac:	4b0b      	ldr	r3, [pc, #44]	@ (80019dc <currMinuteInc+0x50>)
 80019ae:	785b      	ldrb	r3, [r3, #1]
 80019b0:	2b3a      	cmp	r3, #58	@ 0x3a
 80019b2:	d806      	bhi.n	80019c2 <currMinuteInc+0x36>
		currTime.Minutes = currTime.Minutes + 1;
 80019b4:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <currMinuteInc+0x50>)
 80019b6:	785b      	ldrb	r3, [r3, #1]
 80019b8:	3301      	adds	r3, #1
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <currMinuteInc+0x50>)
 80019be:	705a      	strb	r2, [r3, #1]
 80019c0:	e000      	b.n	80019c4 <currMinuteInc+0x38>
	}
	else {
		__NOP();
 80019c2:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 80019c4:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <currMinuteInc+0x50>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 80019ca:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <currMinuteInc+0x50>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]

}
 80019d0:	46c0      	nop			@ (mov r8, r8)
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	46c0      	nop			@ (mov r8, r8)
 80019d8:	200000a8 	.word	0x200000a8
 80019dc:	20000094 	.word	0x20000094
 80019e0:	20000118 	.word	0x20000118

080019e4 <dispError>:


void dispError(void) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 80019ea:	4b1c      	ldr	r3, [pc, #112]	@ (8001a5c <dispError+0x78>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	0018      	movs	r0, r3
 80019f0:	f003 fc4e 	bl	8005290 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 80019f4:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <dispError+0x78>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	0018      	movs	r0, r3
 80019fa:	f003 fbfd 	bl	80051f8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80019fe:	4b17      	ldr	r3, [pc, #92]	@ (8001a5c <dispError+0x78>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a06:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001a08:	1cfb      	adds	r3, r7, #3
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001a0e:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <dispError+0x78>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	4a11      	ldr	r2, [pc, #68]	@ (8001a60 <dispError+0x7c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d9f6      	bls.n	8001a0e <dispError+0x2a>

			HAL_GPIO_TogglePin(alarmLEDPort, alarmLEDPin);
 8001a20:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <dispError+0x80>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2280      	movs	r2, #128	@ 0x80
 8001a26:	0152      	lsls	r2, r2, #5
 8001a28:	0011      	movs	r1, r2
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f000 ff5e 	bl	80028ec <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001a30:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <dispError+0x78>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a38:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001a3a:	1cfb      	adds	r3, r7, #3
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	1e5a      	subs	r2, r3, #1
 8001a40:	4193      	sbcs	r3, r2
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2201      	movs	r2, #1
 8001a46:	4053      	eors	r3, r2
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	001a      	movs	r2, r3
 8001a4c:	1cfb      	adds	r3, r7, #3
 8001a4e:	701a      	strb	r2, [r3, #0]
 8001a50:	781a      	ldrb	r2, [r3, #0]
 8001a52:	2101      	movs	r1, #1
 8001a54:	400a      	ands	r2, r1
 8001a56:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001a58:	e7d9      	b.n	8001a0e <dispError+0x2a>
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	20000048 	.word	0x20000048
 8001a60:	00003ffe 	.word	0x00003ffe
 8001a64:	20000010 	.word	0x20000010

08001a68 <updateRTCBackupReg>:
	} while(1);

}


void updateRTCBackupReg(void) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <updateRTCBackupReg+0x40>)
 8001a6e:	6819      	ldr	r1, [r3, #0]
 8001a70:	4b0e      	ldr	r3, [pc, #56]	@ (8001aac <updateRTCBackupReg+0x44>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	001a      	movs	r2, r3
 8001a76:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <updateRTCBackupReg+0x48>)
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f003 fb2d 	bl	80050d8 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab4 <updateRTCBackupReg+0x4c>)
 8001a80:	6819      	ldr	r1, [r3, #0]
 8001a82:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <updateRTCBackupReg+0x44>)
 8001a84:	785b      	ldrb	r3, [r3, #1]
 8001a86:	001a      	movs	r2, r3
 8001a88:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <updateRTCBackupReg+0x48>)
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f003 fb24 	bl	80050d8 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 8001a90:	4b09      	ldr	r3, [pc, #36]	@ (8001ab8 <updateRTCBackupReg+0x50>)
 8001a92:	6819      	ldr	r1, [r3, #0]
 8001a94:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <updateRTCBackupReg+0x44>)
 8001a96:	78db      	ldrb	r3, [r3, #3]
 8001a98:	001a      	movs	r2, r3
 8001a9a:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <updateRTCBackupReg+0x48>)
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f003 fb1b 	bl	80050d8 <HAL_RTCEx_BKUPWrite>

}
 8001aa2:	46c0      	nop			@ (mov r8, r8)
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	200000c0 	.word	0x200000c0
 8001aac:	200000ac 	.word	0x200000ac
 8001ab0:	20000118 	.word	0x20000118
 8001ab4:	20000038 	.word	0x20000038
 8001ab8:	2000003c 	.word	0x2000003c

08001abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac0:	b672      	cpsid	i
}
 8001ac2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac4:	46c0      	nop			@ (mov r8, r8)
 8001ac6:	e7fd      	b.n	8001ac4 <Error_Handler+0x8>

08001ac8 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	0005      	movs	r5, r0
 8001ad0:	000c      	movs	r4, r1
 8001ad2:	0010      	movs	r0, r2
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	1dbb      	adds	r3, r7, #6
 8001ad8:	1c2a      	adds	r2, r5, #0
 8001ada:	801a      	strh	r2, [r3, #0]
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	1c22      	adds	r2, r4, #0
 8001ae0:	801a      	strh	r2, [r3, #0]
 8001ae2:	1cbb      	adds	r3, r7, #2
 8001ae4:	1c02      	adds	r2, r0, #0
 8001ae6:	801a      	strh	r2, [r3, #0]
 8001ae8:	003b      	movs	r3, r7
 8001aea:	1c0a      	adds	r2, r1, #0
 8001aec:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001aee:	4b7c      	ldr	r3, [pc, #496]	@ (8001ce0 <sevSeg_Init+0x218>)
 8001af0:	1dba      	adds	r2, r7, #6
 8001af2:	8812      	ldrh	r2, [r2, #0]
 8001af4:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8001af6:	4b7b      	ldr	r3, [pc, #492]	@ (8001ce4 <sevSeg_Init+0x21c>)
 8001af8:	1d3a      	adds	r2, r7, #4
 8001afa:	8812      	ldrh	r2, [r2, #0]
 8001afc:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001afe:	4b7a      	ldr	r3, [pc, #488]	@ (8001ce8 <sevSeg_Init+0x220>)
 8001b00:	1cba      	adds	r2, r7, #2
 8001b02:	8812      	ldrh	r2, [r2, #0]
 8001b04:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8001b06:	4b79      	ldr	r3, [pc, #484]	@ (8001cec <sevSeg_Init+0x224>)
 8001b08:	003a      	movs	r2, r7
 8001b0a:	8812      	ldrh	r2, [r2, #0]
 8001b0c:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001b0e:	4a78      	ldr	r2, [pc, #480]	@ (8001cf0 <sevSeg_Init+0x228>)
 8001b10:	2330      	movs	r3, #48	@ 0x30
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8001b18:	4a76      	ldr	r2, [pc, #472]	@ (8001cf4 <sevSeg_Init+0x22c>)
 8001b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b1c:	0010      	movs	r0, r2
 8001b1e:	0019      	movs	r1, r3
 8001b20:	234c      	movs	r3, #76	@ 0x4c
 8001b22:	001a      	movs	r2, r3
 8001b24:	f004 fbaa 	bl	800627c <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8001b28:	4b73      	ldr	r3, [pc, #460]	@ (8001cf8 <sevSeg_Init+0x230>)
 8001b2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001b2c:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	e00b      	b.n	8001b4c <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b3a:	18d3      	adds	r3, r2, r3
 8001b3c:	6819      	ldr	r1, [r3, #0]
 8001b3e:	4b6f      	ldr	r3, [pc, #444]	@ (8001cfc <sevSeg_Init+0x234>)
 8001b40:	69fa      	ldr	r2, [r7, #28]
 8001b42:	0092      	lsls	r2, r2, #2
 8001b44:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	ddf0      	ble.n	8001b34 <sevSeg_Init+0x6c>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001b52:	4b6a      	ldr	r3, [pc, #424]	@ (8001cfc <sevSeg_Init+0x234>)
 8001b54:	6918      	ldr	r0, [r3, #16]
 8001b56:	4b66      	ldr	r3, [pc, #408]	@ (8001cf0 <sevSeg_Init+0x228>)
 8001b58:	8819      	ldrh	r1, [r3, #0]
 8001b5a:	4b69      	ldr	r3, [pc, #420]	@ (8001d00 <sevSeg_Init+0x238>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	001a      	movs	r2, r3
 8001b60:	f000 fea7 	bl	80028b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001b64:	4b65      	ldr	r3, [pc, #404]	@ (8001cfc <sevSeg_Init+0x234>)
 8001b66:	6918      	ldr	r0, [r3, #16]
 8001b68:	4b61      	ldr	r3, [pc, #388]	@ (8001cf0 <sevSeg_Init+0x228>)
 8001b6a:	8819      	ldrh	r1, [r3, #0]
 8001b6c:	4b64      	ldr	r3, [pc, #400]	@ (8001d00 <sevSeg_Init+0x238>)
 8001b6e:	785b      	ldrb	r3, [r3, #1]
 8001b70:	001a      	movs	r2, r3
 8001b72:	f000 fe9e 	bl	80028b2 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001b76:	4b61      	ldr	r3, [pc, #388]	@ (8001cfc <sevSeg_Init+0x234>)
 8001b78:	6898      	ldr	r0, [r3, #8]
 8001b7a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ce8 <sevSeg_Init+0x220>)
 8001b7c:	8819      	ldrh	r1, [r3, #0]
 8001b7e:	4b60      	ldr	r3, [pc, #384]	@ (8001d00 <sevSeg_Init+0x238>)
 8001b80:	785b      	ldrb	r3, [r3, #1]
 8001b82:	001a      	movs	r2, r3
 8001b84:	f000 fe95 	bl	80028b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001b88:	4b5c      	ldr	r3, [pc, #368]	@ (8001cfc <sevSeg_Init+0x234>)
 8001b8a:	6898      	ldr	r0, [r3, #8]
 8001b8c:	4b56      	ldr	r3, [pc, #344]	@ (8001ce8 <sevSeg_Init+0x220>)
 8001b8e:	8819      	ldrh	r1, [r3, #0]
 8001b90:	4b5b      	ldr	r3, [pc, #364]	@ (8001d00 <sevSeg_Init+0x238>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	001a      	movs	r2, r3
 8001b96:	f000 fe8c 	bl	80028b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8001b9a:	4b58      	ldr	r3, [pc, #352]	@ (8001cfc <sevSeg_Init+0x234>)
 8001b9c:	68d8      	ldr	r0, [r3, #12]
 8001b9e:	4b53      	ldr	r3, [pc, #332]	@ (8001cec <sevSeg_Init+0x224>)
 8001ba0:	8819      	ldrh	r1, [r3, #0]
 8001ba2:	4b57      	ldr	r3, [pc, #348]	@ (8001d00 <sevSeg_Init+0x238>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	f000 fe83 	bl	80028b2 <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(50);
 8001bac:	2032      	movs	r0, #50	@ 0x32
 8001bae:	f000 f95d 	bl	8001e6c <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8001bb2:	2308      	movs	r3, #8
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	4a53      	ldr	r2, [pc, #332]	@ (8001d04 <sevSeg_Init+0x23c>)
 8001bb8:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e038      	b.n	8001c32 <sevSeg_Init+0x16a>

		sendByte = hofSymb[i];
 8001bc0:	231b      	movs	r3, #27
 8001bc2:	18fb      	adds	r3, r7, r3
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	18b9      	adds	r1, r7, r2
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	188a      	adds	r2, r1, r2
 8001bcc:	7812      	ldrb	r2, [r2, #0]
 8001bce:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	e027      	b.n	8001c26 <sevSeg_Init+0x15e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001bd6:	4b49      	ldr	r3, [pc, #292]	@ (8001cfc <sevSeg_Init+0x234>)
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	4b41      	ldr	r3, [pc, #260]	@ (8001ce0 <sevSeg_Init+0x218>)
 8001bdc:	8819      	ldrh	r1, [r3, #0]
 8001bde:	241b      	movs	r4, #27
 8001be0:	193b      	adds	r3, r7, r4
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2201      	movs	r2, #1
 8001be6:	4013      	ands	r3, r2
 8001be8:	4a45      	ldr	r2, [pc, #276]	@ (8001d00 <sevSeg_Init+0x238>)
 8001bea:	5cd3      	ldrb	r3, [r2, r3]
 8001bec:	001a      	movs	r2, r3
 8001bee:	f000 fe60 	bl	80028b2 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001bf2:	4b42      	ldr	r3, [pc, #264]	@ (8001cfc <sevSeg_Init+0x234>)
 8001bf4:	6858      	ldr	r0, [r3, #4]
 8001bf6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce4 <sevSeg_Init+0x21c>)
 8001bf8:	8819      	ldrh	r1, [r3, #0]
 8001bfa:	4b41      	ldr	r3, [pc, #260]	@ (8001d00 <sevSeg_Init+0x238>)
 8001bfc:	785b      	ldrb	r3, [r3, #1]
 8001bfe:	001a      	movs	r2, r3
 8001c00:	f000 fe57 	bl	80028b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001c04:	4b3d      	ldr	r3, [pc, #244]	@ (8001cfc <sevSeg_Init+0x234>)
 8001c06:	6858      	ldr	r0, [r3, #4]
 8001c08:	4b36      	ldr	r3, [pc, #216]	@ (8001ce4 <sevSeg_Init+0x21c>)
 8001c0a:	8819      	ldrh	r1, [r3, #0]
 8001c0c:	4b3c      	ldr	r3, [pc, #240]	@ (8001d00 <sevSeg_Init+0x238>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	001a      	movs	r2, r3
 8001c12:	f000 fe4e 	bl	80028b2 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001c16:	193b      	adds	r3, r7, r4
 8001c18:	193a      	adds	r2, r7, r4
 8001c1a:	7812      	ldrb	r2, [r2, #0]
 8001c1c:	0852      	lsrs	r2, r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	3301      	adds	r3, #1
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b07      	cmp	r3, #7
 8001c2a:	ddd4      	ble.n	8001bd6 <sevSeg_Init+0x10e>
	for(int i = 0; i <= 3; i++) {
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	ddc3      	ble.n	8001bc0 <sevSeg_Init+0xf8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001c38:	4b30      	ldr	r3, [pc, #192]	@ (8001cfc <sevSeg_Init+0x234>)
 8001c3a:	6898      	ldr	r0, [r3, #8]
 8001c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce8 <sevSeg_Init+0x220>)
 8001c3e:	8819      	ldrh	r1, [r3, #0]
 8001c40:	4b2f      	ldr	r3, [pc, #188]	@ (8001d00 <sevSeg_Init+0x238>)
 8001c42:	785b      	ldrb	r3, [r3, #1]
 8001c44:	001a      	movs	r2, r3
 8001c46:	f000 fe34 	bl	80028b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001cfc <sevSeg_Init+0x234>)
 8001c4c:	6898      	ldr	r0, [r3, #8]
 8001c4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ce8 <sevSeg_Init+0x220>)
 8001c50:	8819      	ldrh	r1, [r3, #0]
 8001c52:	4b2b      	ldr	r3, [pc, #172]	@ (8001d00 <sevSeg_Init+0x238>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	001a      	movs	r2, r3
 8001c58:	f000 fe2b 	bl	80028b2 <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8001c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f003 fb16 	bl	8005290 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8001c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c66:	0018      	movs	r0, r3
 8001c68:	f003 fac6 	bl	80051f8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8001c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8001c74:	46c0      	nop			@ (mov r8, r8)
 8001c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1ad2      	subs	r2, r2, r3
 8001c80:	2380      	movs	r3, #128	@ 0x80
 8001c82:	01db      	lsls	r3, r3, #7
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d3f6      	bcc.n	8001c76 <sevSeg_Init+0x1ae>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8001c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f003 fb00 	bl	8005290 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001c90:	4b1a      	ldr	r3, [pc, #104]	@ (8001cfc <sevSeg_Init+0x234>)
 8001c92:	6918      	ldr	r0, [r3, #16]
 8001c94:	4b16      	ldr	r3, [pc, #88]	@ (8001cf0 <sevSeg_Init+0x228>)
 8001c96:	8819      	ldrh	r1, [r3, #0]
 8001c98:	4b19      	ldr	r3, [pc, #100]	@ (8001d00 <sevSeg_Init+0x238>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	001a      	movs	r2, r3
 8001c9e:	f000 fe08 	bl	80028b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001ca2:	4b16      	ldr	r3, [pc, #88]	@ (8001cfc <sevSeg_Init+0x234>)
 8001ca4:	6918      	ldr	r0, [r3, #16]
 8001ca6:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <sevSeg_Init+0x228>)
 8001ca8:	8819      	ldrh	r1, [r3, #0]
 8001caa:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <sevSeg_Init+0x238>)
 8001cac:	785b      	ldrb	r3, [r3, #1]
 8001cae:	001a      	movs	r2, r3
 8001cb0:	f000 fdff 	bl	80028b2 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001cb4:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <sevSeg_Init+0x234>)
 8001cb6:	6898      	ldr	r0, [r3, #8]
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <sevSeg_Init+0x220>)
 8001cba:	8819      	ldrh	r1, [r3, #0]
 8001cbc:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <sevSeg_Init+0x238>)
 8001cbe:	785b      	ldrb	r3, [r3, #1]
 8001cc0:	001a      	movs	r2, r3
 8001cc2:	f000 fdf6 	bl	80028b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cfc <sevSeg_Init+0x234>)
 8001cc8:	6898      	ldr	r0, [r3, #8]
 8001cca:	4b07      	ldr	r3, [pc, #28]	@ (8001ce8 <sevSeg_Init+0x220>)
 8001ccc:	8819      	ldrh	r1, [r3, #0]
 8001cce:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <sevSeg_Init+0x238>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	001a      	movs	r2, r3
 8001cd4:	f000 fded 	bl	80028b2 <HAL_GPIO_WritePin>

}
 8001cd8:	46c0      	nop			@ (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b008      	add	sp, #32
 8001cde:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce0:	20000240 	.word	0x20000240
 8001ce4:	20000242 	.word	0x20000242
 8001ce8:	20000244 	.word	0x20000244
 8001cec:	20000246 	.word	0x20000246
 8001cf0:	20000248 	.word	0x20000248
 8001cf4:	2000024c 	.word	0x2000024c
 8001cf8:	20000298 	.word	0x20000298
 8001cfc:	20000050 	.word	0x20000050
 8001d00:	20000064 	.word	0x20000064
 8001d04:	471d3700 	.word	0x471d3700

08001d08 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	210a      	movs	r1, #10
 8001d16:	0018      	movs	r0, r3
 8001d18:	f7fe f9f4 	bl	8000104 <__udivsi3>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	2408      	movs	r4, #8
 8001d22:	193b      	adds	r3, r7, r4
 8001d24:	701a      	strb	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	210a      	movs	r1, #10
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f7fe fa6f 	bl	8000210 <__aeabi_uidivmod>
 8001d32:	000b      	movs	r3, r1
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	193b      	adds	r3, r7, r4
 8001d38:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001d3e:	210a      	movs	r1, #10
 8001d40:	0018      	movs	r0, r3
 8001d42:	f7fe f9df 	bl	8000104 <__udivsi3>
 8001d46:	0003      	movs	r3, r0
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	193b      	adds	r3, r7, r4
 8001d4c:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001d52:	210a      	movs	r1, #10
 8001d54:	0018      	movs	r0, r3
 8001d56:	f7fe fa5b 	bl	8000210 <__aeabi_uidivmod>
 8001d5a:	000b      	movs	r3, r1
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	193b      	adds	r3, r7, r4
 8001d60:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 8001d62:	2116      	movs	r1, #22
 8001d64:	187b      	adds	r3, r7, r1
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	78db      	ldrb	r3, [r3, #3]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d102      	bne.n	8001d78 <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 8001d72:	187b      	adds	r3, r7, r1
 8001d74:	2202      	movs	r2, #2
 8001d76:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	e04f      	b.n	8001e1e <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 8001d7e:	2308      	movs	r3, #8
 8001d80:	18fa      	adds	r2, r7, r3
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	18d3      	adds	r3, r2, r3
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	0019      	movs	r1, r3
 8001d8a:	2417      	movs	r4, #23
 8001d8c:	193b      	adds	r3, r7, r4
 8001d8e:	4a30      	ldr	r2, [pc, #192]	@ (8001e50 <sevSeg_updateDigits+0x148>)
 8001d90:	5c52      	ldrb	r2, [r2, r1]
 8001d92:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d110      	bne.n	8001dbc <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	210a      	movs	r1, #10
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7fe f9af 	bl	8000104 <__udivsi3>
 8001da6:	0003      	movs	r3, r0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	001a      	movs	r2, r3
 8001dac:	2316      	movs	r3, #22
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	18d2      	adds	r2, r2, r3
 8001db4:	193b      	adds	r3, r7, r4
 8001db6:	4927      	ldr	r1, [pc, #156]	@ (8001e54 <sevSeg_updateDigits+0x14c>)
 8001db8:	5c8a      	ldrb	r2, [r1, r2]
 8001dba:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	e027      	b.n	8001e12 <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001dc2:	4b25      	ldr	r3, [pc, #148]	@ (8001e58 <sevSeg_updateDigits+0x150>)
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	4b25      	ldr	r3, [pc, #148]	@ (8001e5c <sevSeg_updateDigits+0x154>)
 8001dc8:	8819      	ldrh	r1, [r3, #0]
 8001dca:	2417      	movs	r4, #23
 8001dcc:	193b      	adds	r3, r7, r4
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	4a22      	ldr	r2, [pc, #136]	@ (8001e60 <sevSeg_updateDigits+0x158>)
 8001dd6:	5cd3      	ldrb	r3, [r2, r3]
 8001dd8:	001a      	movs	r2, r3
 8001dda:	f000 fd6a 	bl	80028b2 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001dde:	4b1e      	ldr	r3, [pc, #120]	@ (8001e58 <sevSeg_updateDigits+0x150>)
 8001de0:	6858      	ldr	r0, [r3, #4]
 8001de2:	4b20      	ldr	r3, [pc, #128]	@ (8001e64 <sevSeg_updateDigits+0x15c>)
 8001de4:	8819      	ldrh	r1, [r3, #0]
 8001de6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e60 <sevSeg_updateDigits+0x158>)
 8001de8:	785b      	ldrb	r3, [r3, #1]
 8001dea:	001a      	movs	r2, r3
 8001dec:	f000 fd61 	bl	80028b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001df0:	4b19      	ldr	r3, [pc, #100]	@ (8001e58 <sevSeg_updateDigits+0x150>)
 8001df2:	6858      	ldr	r0, [r3, #4]
 8001df4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <sevSeg_updateDigits+0x15c>)
 8001df6:	8819      	ldrh	r1, [r3, #0]
 8001df8:	4b19      	ldr	r3, [pc, #100]	@ (8001e60 <sevSeg_updateDigits+0x158>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	001a      	movs	r2, r3
 8001dfe:	f000 fd58 	bl	80028b2 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001e02:	193b      	adds	r3, r7, r4
 8001e04:	193a      	adds	r2, r7, r4
 8001e06:	7812      	ldrb	r2, [r2, #0]
 8001e08:	0852      	lsrs	r2, r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b07      	cmp	r3, #7
 8001e16:	ddd4      	ble.n	8001dc2 <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	ddac      	ble.n	8001d7e <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001e24:	4b0c      	ldr	r3, [pc, #48]	@ (8001e58 <sevSeg_updateDigits+0x150>)
 8001e26:	6898      	ldr	r0, [r3, #8]
 8001e28:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <sevSeg_updateDigits+0x160>)
 8001e2a:	8819      	ldrh	r1, [r3, #0]
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <sevSeg_updateDigits+0x158>)
 8001e2e:	785b      	ldrb	r3, [r3, #1]
 8001e30:	001a      	movs	r2, r3
 8001e32:	f000 fd3e 	bl	80028b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001e36:	4b08      	ldr	r3, [pc, #32]	@ (8001e58 <sevSeg_updateDigits+0x150>)
 8001e38:	6898      	ldr	r0, [r3, #8]
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <sevSeg_updateDigits+0x160>)
 8001e3c:	8819      	ldrh	r1, [r3, #0]
 8001e3e:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <sevSeg_updateDigits+0x158>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	001a      	movs	r2, r3
 8001e44:	f000 fd35 	bl	80028b2 <HAL_GPIO_WritePin>

	return;
 8001e48:	46c0      	nop			@ (mov r8, r8)

}
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b007      	add	sp, #28
 8001e4e:	bd90      	pop	{r4, r7, pc}
 8001e50:	080062d0 	.word	0x080062d0
 8001e54:	080062dc 	.word	0x080062dc
 8001e58:	20000050 	.word	0x20000050
 8001e5c:	20000240 	.word	0x20000240
 8001e60:	20000064 	.word	0x20000064
 8001e64:	20000242 	.word	0x20000242
 8001e68:	20000244 	.word	0x20000244

08001e6c <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	0002      	movs	r2, r0
 8001e74:	1dbb      	adds	r3, r7, #6
 8001e76:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 8001e78:	4b20      	ldr	r3, [pc, #128]	@ (8001efc <sevSeg_setIntensity+0x90>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <sevSeg_setIntensity+0x20>
 8001e80:	4b1f      	ldr	r3, [pc, #124]	@ (8001f00 <sevSeg_setIntensity+0x94>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	1dba      	adds	r2, r7, #6
 8001e86:	8812      	ldrh	r2, [r2, #0]
 8001e88:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e8a:	e02c      	b.n	8001ee6 <sevSeg_setIntensity+0x7a>
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <sevSeg_setIntensity+0x90>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d105      	bne.n	8001ea0 <sevSeg_setIntensity+0x34>
 8001e94:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <sevSeg_setIntensity+0x94>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	1dbb      	adds	r3, r7, #6
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	6393      	str	r3, [r2, #56]	@ 0x38
 8001e9e:	e022      	b.n	8001ee6 <sevSeg_setIntensity+0x7a>
 8001ea0:	4b16      	ldr	r3, [pc, #88]	@ (8001efc <sevSeg_setIntensity+0x90>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d105      	bne.n	8001eb4 <sevSeg_setIntensity+0x48>
 8001ea8:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <sevSeg_setIntensity+0x94>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	1dbb      	adds	r3, r7, #6
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001eb2:	e018      	b.n	8001ee6 <sevSeg_setIntensity+0x7a>
 8001eb4:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <sevSeg_setIntensity+0x90>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b0c      	cmp	r3, #12
 8001eba:	d105      	bne.n	8001ec8 <sevSeg_setIntensity+0x5c>
 8001ebc:	4b10      	ldr	r3, [pc, #64]	@ (8001f00 <sevSeg_setIntensity+0x94>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	1dbb      	adds	r3, r7, #6
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ec6:	e00e      	b.n	8001ee6 <sevSeg_setIntensity+0x7a>
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <sevSeg_setIntensity+0x90>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b10      	cmp	r3, #16
 8001ece:	d105      	bne.n	8001edc <sevSeg_setIntensity+0x70>
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <sevSeg_setIntensity+0x94>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	1dbb      	adds	r3, r7, #6
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eda:	e004      	b.n	8001ee6 <sevSeg_setIntensity+0x7a>
 8001edc:	4b08      	ldr	r3, [pc, #32]	@ (8001f00 <sevSeg_setIntensity+0x94>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	1dbb      	adds	r3, r7, #6
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 8001ee6:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <sevSeg_setIntensity+0x90>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <sevSeg_setIntensity+0x94>)
 8001eec:	0011      	movs	r1, r2
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f003 face 	bl	8005490 <HAL_TIM_PWM_Start>

}
 8001ef4:	46c0      	nop			@ (mov r8, r8)
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b002      	add	sp, #8
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000298 	.word	0x20000298
 8001f00:	2000024c 	.word	0x2000024c

08001f04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0a:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <HAL_MspInit+0x54>)
 8001f0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f0e:	4b12      	ldr	r3, [pc, #72]	@ (8001f58 <HAL_MspInit+0x54>)
 8001f10:	2101      	movs	r1, #1
 8001f12:	430a      	orrs	r2, r1
 8001f14:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <HAL_MspInit+0x54>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <HAL_MspInit+0x54>)
 8001f24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <HAL_MspInit+0x54>)
 8001f28:	2180      	movs	r1, #128	@ 0x80
 8001f2a:	0549      	lsls	r1, r1, #21
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f30:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <HAL_MspInit+0x54>)
 8001f32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f34:	2380      	movs	r3, #128	@ 0x80
 8001f36:	055b      	lsls	r3, r3, #21
 8001f38:	4013      	ands	r3, r2
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	2004      	movs	r0, #4
 8001f44:	f000 fb02 	bl	800254c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001f48:	2004      	movs	r0, #4
 8001f4a:	f000 fb14 	bl	8002576 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b002      	add	sp, #8
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	40021000 	.word	0x40021000

08001f5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b095      	sub	sp, #84	@ 0x54
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	233c      	movs	r3, #60	@ 0x3c
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	0018      	movs	r0, r3
 8001f6a:	2314      	movs	r3, #20
 8001f6c:	001a      	movs	r2, r3
 8001f6e:	2100      	movs	r1, #0
 8001f70:	f004 f958 	bl	8006224 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f74:	2414      	movs	r4, #20
 8001f76:	193b      	adds	r3, r7, r4
 8001f78:	0018      	movs	r0, r3
 8001f7a:	2328      	movs	r3, #40	@ 0x28
 8001f7c:	001a      	movs	r2, r3
 8001f7e:	2100      	movs	r1, #0
 8001f80:	f004 f950 	bl	8006224 <memset>
  if(hi2c->Instance==I2C1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a22      	ldr	r2, [pc, #136]	@ (8002014 <HAL_I2C_MspInit+0xb8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d13d      	bne.n	800200a <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f8e:	193b      	adds	r3, r7, r4
 8001f90:	2220      	movs	r2, #32
 8001f92:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f94:	193b      	adds	r3, r7, r4
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f9a:	193b      	adds	r3, r7, r4
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f002 f83b 	bl	8004018 <HAL_RCCEx_PeriphCLKConfig>
 8001fa2:	1e03      	subs	r3, r0, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001fa6:	f7ff fd89 	bl	8001abc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001faa:	4b1b      	ldr	r3, [pc, #108]	@ (8002018 <HAL_I2C_MspInit+0xbc>)
 8001fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fae:	4b1a      	ldr	r3, [pc, #104]	@ (8002018 <HAL_I2C_MspInit+0xbc>)
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fb6:	4b18      	ldr	r3, [pc, #96]	@ (8002018 <HAL_I2C_MspInit+0xbc>)
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fba:	2202      	movs	r2, #2
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fc2:	213c      	movs	r1, #60	@ 0x3c
 8001fc4:	187b      	adds	r3, r7, r1
 8001fc6:	22c0      	movs	r2, #192	@ 0xc0
 8001fc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fca:	187b      	adds	r3, r7, r1
 8001fcc:	2212      	movs	r2, #18
 8001fce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	187b      	adds	r3, r7, r1
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	187b      	adds	r3, r7, r1
 8001fd8:	2200      	movs	r2, #0
 8001fda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	2206      	movs	r2, #6
 8001fe0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe2:	187b      	adds	r3, r7, r1
 8001fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800201c <HAL_I2C_MspInit+0xc0>)
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	0010      	movs	r0, r2
 8001fea:	f000 fae1 	bl	80025b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fee:	4b0a      	ldr	r3, [pc, #40]	@ (8002018 <HAL_I2C_MspInit+0xbc>)
 8001ff0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ff2:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <HAL_I2C_MspInit+0xbc>)
 8001ff4:	2180      	movs	r1, #128	@ 0x80
 8001ff6:	0389      	lsls	r1, r1, #14
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ffc:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <HAL_I2C_MspInit+0xbc>)
 8001ffe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002000:	2380      	movs	r3, #128	@ 0x80
 8002002:	039b      	lsls	r3, r3, #14
 8002004:	4013      	ands	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800200a:	46c0      	nop			@ (mov r8, r8)
 800200c:	46bd      	mov	sp, r7
 800200e:	b015      	add	sp, #84	@ 0x54
 8002010:	bd90      	pop	{r4, r7, pc}
 8002012:	46c0      	nop			@ (mov r8, r8)
 8002014:	40005400 	.word	0x40005400
 8002018:	40021000 	.word	0x40021000
 800201c:	50000400 	.word	0x50000400

08002020 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b08f      	sub	sp, #60	@ 0x3c
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002028:	2410      	movs	r4, #16
 800202a:	193b      	adds	r3, r7, r4
 800202c:	0018      	movs	r0, r3
 800202e:	2328      	movs	r3, #40	@ 0x28
 8002030:	001a      	movs	r2, r3
 8002032:	2100      	movs	r1, #0
 8002034:	f004 f8f6 	bl	8006224 <memset>
  if(hrtc->Instance==RTC)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a19      	ldr	r2, [pc, #100]	@ (80020a4 <HAL_RTC_MspInit+0x84>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d12c      	bne.n	800209c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002042:	193b      	adds	r3, r7, r4
 8002044:	2280      	movs	r2, #128	@ 0x80
 8002046:	0292      	lsls	r2, r2, #10
 8002048:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800204a:	193b      	adds	r3, r7, r4
 800204c:	2280      	movs	r2, #128	@ 0x80
 800204e:	0052      	lsls	r2, r2, #1
 8002050:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002052:	193b      	adds	r3, r7, r4
 8002054:	0018      	movs	r0, r3
 8002056:	f001 ffdf 	bl	8004018 <HAL_RCCEx_PeriphCLKConfig>
 800205a:	1e03      	subs	r3, r0, #0
 800205c:	d001      	beq.n	8002062 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800205e:	f7ff fd2d 	bl	8001abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002062:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <HAL_RTC_MspInit+0x88>)
 8002064:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002066:	4b10      	ldr	r3, [pc, #64]	@ (80020a8 <HAL_RTC_MspInit+0x88>)
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0209      	lsls	r1, r1, #8
 800206c:	430a      	orrs	r2, r1
 800206e:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002070:	4b0d      	ldr	r3, [pc, #52]	@ (80020a8 <HAL_RTC_MspInit+0x88>)
 8002072:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <HAL_RTC_MspInit+0x88>)
 8002076:	2180      	movs	r1, #128	@ 0x80
 8002078:	00c9      	lsls	r1, r1, #3
 800207a:	430a      	orrs	r2, r1
 800207c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800207e:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <HAL_RTC_MspInit+0x88>)
 8002080:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002082:	2380      	movs	r3, #128	@ 0x80
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4013      	ands	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800208c:	2200      	movs	r2, #0
 800208e:	2100      	movs	r1, #0
 8002090:	2002      	movs	r0, #2
 8002092:	f000 fa5b 	bl	800254c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8002096:	2002      	movs	r0, #2
 8002098:	f000 fa6d 	bl	8002576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800209c:	46c0      	nop			@ (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	b00f      	add	sp, #60	@ 0x3c
 80020a2:	bd90      	pop	{r4, r7, pc}
 80020a4:	40002800 	.word	0x40002800
 80020a8:	40021000 	.word	0x40021000

080020ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2380      	movs	r3, #128	@ 0x80
 80020ba:	05db      	lsls	r3, r3, #23
 80020bc:	429a      	cmp	r2, r3
 80020be:	d10b      	bne.n	80020d8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020c0:	4b07      	ldr	r3, [pc, #28]	@ (80020e0 <HAL_TIM_PWM_MspInit+0x34>)
 80020c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020c4:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <HAL_TIM_PWM_MspInit+0x34>)
 80020c6:	2101      	movs	r1, #1
 80020c8:	430a      	orrs	r2, r1
 80020ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020cc:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <HAL_TIM_PWM_MspInit+0x34>)
 80020ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020d0:	2201      	movs	r2, #1
 80020d2:	4013      	ands	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020d8:	46c0      	nop			@ (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	b004      	add	sp, #16
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000

080020e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a18      	ldr	r2, [pc, #96]	@ (8002154 <HAL_TIM_Base_MspInit+0x70>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d10e      	bne.n	8002114 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80020f6:	4b18      	ldr	r3, [pc, #96]	@ (8002158 <HAL_TIM_Base_MspInit+0x74>)
 80020f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020fa:	4b17      	ldr	r3, [pc, #92]	@ (8002158 <HAL_TIM_Base_MspInit+0x74>)
 80020fc:	2180      	movs	r1, #128	@ 0x80
 80020fe:	0209      	lsls	r1, r1, #8
 8002100:	430a      	orrs	r2, r1
 8002102:	641a      	str	r2, [r3, #64]	@ 0x40
 8002104:	4b14      	ldr	r3, [pc, #80]	@ (8002158 <HAL_TIM_Base_MspInit+0x74>)
 8002106:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002108:	2380      	movs	r3, #128	@ 0x80
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	4013      	ands	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002112:	e01a      	b.n	800214a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a10      	ldr	r2, [pc, #64]	@ (800215c <HAL_TIM_Base_MspInit+0x78>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d115      	bne.n	800214a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800211e:	4b0e      	ldr	r3, [pc, #56]	@ (8002158 <HAL_TIM_Base_MspInit+0x74>)
 8002120:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002122:	4b0d      	ldr	r3, [pc, #52]	@ (8002158 <HAL_TIM_Base_MspInit+0x74>)
 8002124:	2180      	movs	r1, #128	@ 0x80
 8002126:	0289      	lsls	r1, r1, #10
 8002128:	430a      	orrs	r2, r1
 800212a:	641a      	str	r2, [r3, #64]	@ 0x40
 800212c:	4b0a      	ldr	r3, [pc, #40]	@ (8002158 <HAL_TIM_Base_MspInit+0x74>)
 800212e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002130:	2380      	movs	r3, #128	@ 0x80
 8002132:	029b      	lsls	r3, r3, #10
 8002134:	4013      	ands	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	2015      	movs	r0, #21
 8002140:	f000 fa04 	bl	800254c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002144:	2015      	movs	r0, #21
 8002146:	f000 fa16 	bl	8002576 <HAL_NVIC_EnableIRQ>
}
 800214a:	46c0      	nop			@ (mov r8, r8)
 800214c:	46bd      	mov	sp, r7
 800214e:	b004      	add	sp, #16
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			@ (mov r8, r8)
 8002154:	40002000 	.word	0x40002000
 8002158:	40021000 	.word	0x40021000
 800215c:	40014400 	.word	0x40014400

08002160 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002160:	b590      	push	{r4, r7, lr}
 8002162:	b089      	sub	sp, #36	@ 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	240c      	movs	r4, #12
 800216a:	193b      	adds	r3, r7, r4
 800216c:	0018      	movs	r0, r3
 800216e:	2314      	movs	r3, #20
 8002170:	001a      	movs	r2, r3
 8002172:	2100      	movs	r1, #0
 8002174:	f004 f856 	bl	8006224 <memset>
  if(htim->Instance==TIM2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	2380      	movs	r3, #128	@ 0x80
 800217e:	05db      	lsls	r3, r3, #23
 8002180:	429a      	cmp	r2, r3
 8002182:	d121      	bne.n	80021c8 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002184:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <HAL_TIM_MspPostInit+0x70>)
 8002186:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002188:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <HAL_TIM_MspPostInit+0x70>)
 800218a:	2104      	movs	r1, #4
 800218c:	430a      	orrs	r2, r1
 800218e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002190:	4b0f      	ldr	r3, [pc, #60]	@ (80021d0 <HAL_TIM_MspPostInit+0x70>)
 8002192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002194:	2204      	movs	r2, #4
 8002196:	4013      	ands	r3, r2
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 800219c:	0021      	movs	r1, r4
 800219e:	187b      	adds	r3, r7, r1
 80021a0:	2240      	movs	r2, #64	@ 0x40
 80021a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	187b      	adds	r3, r7, r1
 80021a6:	2202      	movs	r2, #2
 80021a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	187b      	adds	r3, r7, r1
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	187b      	adds	r3, r7, r1
 80021b2:	2200      	movs	r2, #0
 80021b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80021b6:	187b      	adds	r3, r7, r1
 80021b8:	2202      	movs	r2, #2
 80021ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 80021bc:	187b      	adds	r3, r7, r1
 80021be:	4a05      	ldr	r2, [pc, #20]	@ (80021d4 <HAL_TIM_MspPostInit+0x74>)
 80021c0:	0019      	movs	r1, r3
 80021c2:	0010      	movs	r0, r2
 80021c4:	f000 f9f4 	bl	80025b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021c8:	46c0      	nop			@ (mov r8, r8)
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b009      	add	sp, #36	@ 0x24
 80021ce:	bd90      	pop	{r4, r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	50000800 	.word	0x50000800

080021d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021dc:	46c0      	nop			@ (mov r8, r8)
 80021de:	e7fd      	b.n	80021dc <NMI_Handler+0x4>

080021e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e4:	46c0      	nop			@ (mov r8, r8)
 80021e6:	e7fd      	b.n	80021e4 <HardFault_Handler+0x4>

080021e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80021ec:	46c0      	nop			@ (mov r8, r8)
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f6:	46c0      	nop			@ (mov r8, r8)
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002200:	f000 f8dc 	bl	80023bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002204:	46c0      	nop			@ (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002210:	4b03      	ldr	r3, [pc, #12]	@ (8002220 <RTC_TAMP_IRQHandler+0x14>)
 8002212:	0018      	movs	r0, r3
 8002214:	f002 fd7e 	bl	8004d14 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8002218:	46c0      	nop			@ (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	20000118 	.word	0x20000118

08002224 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002228:	46c0      	nop			@ (mov r8, r8)
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 8002232:	2001      	movs	r0, #1
 8002234:	f000 fb76 	bl	8002924 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 8002238:	2002      	movs	r0, #2
 800223a:	f000 fb73 	bl	8002924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800223e:	46c0      	nop			@ (mov r8, r8)
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 8002248:	2004      	movs	r0, #4
 800224a:	f000 fb6b 	bl	8002924 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 800224e:	2008      	movs	r0, #8
 8002250:	f000 fb68 	bl	8002924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002254:	46c0      	nop			@ (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 800225e:	2380      	movs	r3, #128	@ 0x80
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	0018      	movs	r0, r3
 8002264:	f000 fb5e 	bl	8002924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002268:	46c0      	nop			@ (mov r8, r8)
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002274:	4b03      	ldr	r3, [pc, #12]	@ (8002284 <TIM16_IRQHandler+0x14>)
 8002276:	0018      	movs	r0, r3
 8002278:	f003 f9e8 	bl	800564c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800227c:	46c0      	nop			@ (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			@ (mov r8, r8)
 8002284:	200001dc 	.word	0x200001dc

08002288 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800228c:	46c0      	nop			@ (mov r8, r8)
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002294:	480d      	ldr	r0, [pc, #52]	@ (80022cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002296:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002298:	f7ff fff6 	bl	8002288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800229c:	480c      	ldr	r0, [pc, #48]	@ (80022d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800229e:	490d      	ldr	r1, [pc, #52]	@ (80022d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022a0:	4a0d      	ldr	r2, [pc, #52]	@ (80022d8 <LoopForever+0xe>)
  movs r3, #0
 80022a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a4:	e002      	b.n	80022ac <LoopCopyDataInit>

080022a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022aa:	3304      	adds	r3, #4

080022ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b0:	d3f9      	bcc.n	80022a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b2:	4a0a      	ldr	r2, [pc, #40]	@ (80022dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80022b4:	4c0a      	ldr	r4, [pc, #40]	@ (80022e0 <LoopForever+0x16>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b8:	e001      	b.n	80022be <LoopFillZerobss>

080022ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022bc:	3204      	adds	r2, #4

080022be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c0:	d3fb      	bcc.n	80022ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80022c2:	f003 ffb7 	bl	8006234 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80022c6:	f7fe fb69 	bl	800099c <main>

080022ca <LoopForever>:

LoopForever:
  b LoopForever
 80022ca:	e7fe      	b.n	80022ca <LoopForever>
  ldr   r0, =_estack
 80022cc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80022d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80022d8:	0800637c 	.word	0x0800637c
  ldr r2, =_sbss
 80022dc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80022e0:	200002a0 	.word	0x200002a0

080022e4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022e4:	e7fe      	b.n	80022e4 <ADC1_IRQHandler>
	...

080022e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022ee:	1dfb      	adds	r3, r7, #7
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002324 <HAL_Init+0x3c>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002324 <HAL_Init+0x3c>)
 80022fa:	2180      	movs	r1, #128	@ 0x80
 80022fc:	0049      	lsls	r1, r1, #1
 80022fe:	430a      	orrs	r2, r1
 8002300:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002302:	2003      	movs	r0, #3
 8002304:	f000 f810 	bl	8002328 <HAL_InitTick>
 8002308:	1e03      	subs	r3, r0, #0
 800230a:	d003      	beq.n	8002314 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800230c:	1dfb      	adds	r3, r7, #7
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
 8002312:	e001      	b.n	8002318 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002314:	f7ff fdf6 	bl	8001f04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002318:	1dfb      	adds	r3, r7, #7
 800231a:	781b      	ldrb	r3, [r3, #0]
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b002      	add	sp, #8
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40022000 	.word	0x40022000

08002328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002330:	230f      	movs	r3, #15
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002338:	4b1d      	ldr	r3, [pc, #116]	@ (80023b0 <HAL_InitTick+0x88>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d02b      	beq.n	8002398 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002340:	4b1c      	ldr	r3, [pc, #112]	@ (80023b4 <HAL_InitTick+0x8c>)
 8002342:	681c      	ldr	r4, [r3, #0]
 8002344:	4b1a      	ldr	r3, [pc, #104]	@ (80023b0 <HAL_InitTick+0x88>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	0019      	movs	r1, r3
 800234a:	23fa      	movs	r3, #250	@ 0xfa
 800234c:	0098      	lsls	r0, r3, #2
 800234e:	f7fd fed9 	bl	8000104 <__udivsi3>
 8002352:	0003      	movs	r3, r0
 8002354:	0019      	movs	r1, r3
 8002356:	0020      	movs	r0, r4
 8002358:	f7fd fed4 	bl	8000104 <__udivsi3>
 800235c:	0003      	movs	r3, r0
 800235e:	0018      	movs	r0, r3
 8002360:	f000 f919 	bl	8002596 <HAL_SYSTICK_Config>
 8002364:	1e03      	subs	r3, r0, #0
 8002366:	d112      	bne.n	800238e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b03      	cmp	r3, #3
 800236c:	d80a      	bhi.n	8002384 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	2301      	movs	r3, #1
 8002372:	425b      	negs	r3, r3
 8002374:	2200      	movs	r2, #0
 8002376:	0018      	movs	r0, r3
 8002378:	f000 f8e8 	bl	800254c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800237c:	4b0e      	ldr	r3, [pc, #56]	@ (80023b8 <HAL_InitTick+0x90>)
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	e00d      	b.n	80023a0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002384:	230f      	movs	r3, #15
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]
 800238c:	e008      	b.n	80023a0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800238e:	230f      	movs	r3, #15
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
 8002396:	e003      	b.n	80023a0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002398:	230f      	movs	r3, #15
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	2201      	movs	r2, #1
 800239e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80023a0:	230f      	movs	r3, #15
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	781b      	ldrb	r3, [r3, #0]
}
 80023a6:	0018      	movs	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b005      	add	sp, #20
 80023ac:	bd90      	pop	{r4, r7, pc}
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	20000070 	.word	0x20000070
 80023b4:	20000068 	.word	0x20000068
 80023b8:	2000006c 	.word	0x2000006c

080023bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023c0:	4b05      	ldr	r3, [pc, #20]	@ (80023d8 <HAL_IncTick+0x1c>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	001a      	movs	r2, r3
 80023c6:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <HAL_IncTick+0x20>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	18d2      	adds	r2, r2, r3
 80023cc:	4b03      	ldr	r3, [pc, #12]	@ (80023dc <HAL_IncTick+0x20>)
 80023ce:	601a      	str	r2, [r3, #0]
}
 80023d0:	46c0      	nop			@ (mov r8, r8)
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	46c0      	nop			@ (mov r8, r8)
 80023d8:	20000070 	.word	0x20000070
 80023dc:	2000029c 	.word	0x2000029c

080023e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  return uwTick;
 80023e4:	4b02      	ldr	r3, [pc, #8]	@ (80023f0 <HAL_GetTick+0x10>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	0018      	movs	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	46c0      	nop			@ (mov r8, r8)
 80023f0:	2000029c 	.word	0x2000029c

080023f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	0002      	movs	r2, r0
 80023fc:	1dfb      	adds	r3, r7, #7
 80023fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002400:	1dfb      	adds	r3, r7, #7
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b7f      	cmp	r3, #127	@ 0x7f
 8002406:	d809      	bhi.n	800241c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002408:	1dfb      	adds	r3, r7, #7
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	001a      	movs	r2, r3
 800240e:	231f      	movs	r3, #31
 8002410:	401a      	ands	r2, r3
 8002412:	4b04      	ldr	r3, [pc, #16]	@ (8002424 <__NVIC_EnableIRQ+0x30>)
 8002414:	2101      	movs	r1, #1
 8002416:	4091      	lsls	r1, r2
 8002418:	000a      	movs	r2, r1
 800241a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800241c:	46c0      	nop			@ (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b002      	add	sp, #8
 8002422:	bd80      	pop	{r7, pc}
 8002424:	e000e100 	.word	0xe000e100

08002428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	0002      	movs	r2, r0
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	1dfb      	adds	r3, r7, #7
 8002434:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002436:	1dfb      	adds	r3, r7, #7
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b7f      	cmp	r3, #127	@ 0x7f
 800243c:	d828      	bhi.n	8002490 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800243e:	4a2f      	ldr	r2, [pc, #188]	@ (80024fc <__NVIC_SetPriority+0xd4>)
 8002440:	1dfb      	adds	r3, r7, #7
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	b25b      	sxtb	r3, r3
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	33c0      	adds	r3, #192	@ 0xc0
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	589b      	ldr	r3, [r3, r2]
 800244e:	1dfa      	adds	r2, r7, #7
 8002450:	7812      	ldrb	r2, [r2, #0]
 8002452:	0011      	movs	r1, r2
 8002454:	2203      	movs	r2, #3
 8002456:	400a      	ands	r2, r1
 8002458:	00d2      	lsls	r2, r2, #3
 800245a:	21ff      	movs	r1, #255	@ 0xff
 800245c:	4091      	lsls	r1, r2
 800245e:	000a      	movs	r2, r1
 8002460:	43d2      	mvns	r2, r2
 8002462:	401a      	ands	r2, r3
 8002464:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	019b      	lsls	r3, r3, #6
 800246a:	22ff      	movs	r2, #255	@ 0xff
 800246c:	401a      	ands	r2, r3
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	0018      	movs	r0, r3
 8002474:	2303      	movs	r3, #3
 8002476:	4003      	ands	r3, r0
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800247c:	481f      	ldr	r0, [pc, #124]	@ (80024fc <__NVIC_SetPriority+0xd4>)
 800247e:	1dfb      	adds	r3, r7, #7
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	b25b      	sxtb	r3, r3
 8002484:	089b      	lsrs	r3, r3, #2
 8002486:	430a      	orrs	r2, r1
 8002488:	33c0      	adds	r3, #192	@ 0xc0
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800248e:	e031      	b.n	80024f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002490:	4a1b      	ldr	r2, [pc, #108]	@ (8002500 <__NVIC_SetPriority+0xd8>)
 8002492:	1dfb      	adds	r3, r7, #7
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	0019      	movs	r1, r3
 8002498:	230f      	movs	r3, #15
 800249a:	400b      	ands	r3, r1
 800249c:	3b08      	subs	r3, #8
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3306      	adds	r3, #6
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	18d3      	adds	r3, r2, r3
 80024a6:	3304      	adds	r3, #4
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	1dfa      	adds	r2, r7, #7
 80024ac:	7812      	ldrb	r2, [r2, #0]
 80024ae:	0011      	movs	r1, r2
 80024b0:	2203      	movs	r2, #3
 80024b2:	400a      	ands	r2, r1
 80024b4:	00d2      	lsls	r2, r2, #3
 80024b6:	21ff      	movs	r1, #255	@ 0xff
 80024b8:	4091      	lsls	r1, r2
 80024ba:	000a      	movs	r2, r1
 80024bc:	43d2      	mvns	r2, r2
 80024be:	401a      	ands	r2, r3
 80024c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	019b      	lsls	r3, r3, #6
 80024c6:	22ff      	movs	r2, #255	@ 0xff
 80024c8:	401a      	ands	r2, r3
 80024ca:	1dfb      	adds	r3, r7, #7
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	0018      	movs	r0, r3
 80024d0:	2303      	movs	r3, #3
 80024d2:	4003      	ands	r3, r0
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024d8:	4809      	ldr	r0, [pc, #36]	@ (8002500 <__NVIC_SetPriority+0xd8>)
 80024da:	1dfb      	adds	r3, r7, #7
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	001c      	movs	r4, r3
 80024e0:	230f      	movs	r3, #15
 80024e2:	4023      	ands	r3, r4
 80024e4:	3b08      	subs	r3, #8
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	430a      	orrs	r2, r1
 80024ea:	3306      	adds	r3, #6
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	18c3      	adds	r3, r0, r3
 80024f0:	3304      	adds	r3, #4
 80024f2:	601a      	str	r2, [r3, #0]
}
 80024f4:	46c0      	nop			@ (mov r8, r8)
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b003      	add	sp, #12
 80024fa:	bd90      	pop	{r4, r7, pc}
 80024fc:	e000e100 	.word	0xe000e100
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	1e5a      	subs	r2, r3, #1
 8002510:	2380      	movs	r3, #128	@ 0x80
 8002512:	045b      	lsls	r3, r3, #17
 8002514:	429a      	cmp	r2, r3
 8002516:	d301      	bcc.n	800251c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002518:	2301      	movs	r3, #1
 800251a:	e010      	b.n	800253e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251c:	4b0a      	ldr	r3, [pc, #40]	@ (8002548 <SysTick_Config+0x44>)
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	3a01      	subs	r2, #1
 8002522:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002524:	2301      	movs	r3, #1
 8002526:	425b      	negs	r3, r3
 8002528:	2103      	movs	r1, #3
 800252a:	0018      	movs	r0, r3
 800252c:	f7ff ff7c 	bl	8002428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002530:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <SysTick_Config+0x44>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002536:	4b04      	ldr	r3, [pc, #16]	@ (8002548 <SysTick_Config+0x44>)
 8002538:	2207      	movs	r2, #7
 800253a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800253c:	2300      	movs	r3, #0
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b002      	add	sp, #8
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	e000e010 	.word	0xe000e010

0800254c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	210f      	movs	r1, #15
 8002558:	187b      	adds	r3, r7, r1
 800255a:	1c02      	adds	r2, r0, #0
 800255c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	187b      	adds	r3, r7, r1
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	b25b      	sxtb	r3, r3
 8002566:	0011      	movs	r1, r2
 8002568:	0018      	movs	r0, r3
 800256a:	f7ff ff5d 	bl	8002428 <__NVIC_SetPriority>
}
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	b004      	add	sp, #16
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	0002      	movs	r2, r0
 800257e:	1dfb      	adds	r3, r7, #7
 8002580:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002582:	1dfb      	adds	r3, r7, #7
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	b25b      	sxtb	r3, r3
 8002588:	0018      	movs	r0, r3
 800258a:	f7ff ff33 	bl	80023f4 <__NVIC_EnableIRQ>
}
 800258e:	46c0      	nop			@ (mov r8, r8)
 8002590:	46bd      	mov	sp, r7
 8002592:	b002      	add	sp, #8
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7ff ffaf 	bl	8002504 <SysTick_Config>
 80025a6:	0003      	movs	r3, r0
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b002      	add	sp, #8
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025be:	e147      	b.n	8002850 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2101      	movs	r1, #1
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	4091      	lsls	r1, r2
 80025ca:	000a      	movs	r2, r1
 80025cc:	4013      	ands	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d100      	bne.n	80025d8 <HAL_GPIO_Init+0x28>
 80025d6:	e138      	b.n	800284a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2203      	movs	r2, #3
 80025de:	4013      	ands	r3, r2
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d005      	beq.n	80025f0 <HAL_GPIO_Init+0x40>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2203      	movs	r2, #3
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d130      	bne.n	8002652 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	2203      	movs	r2, #3
 80025fc:	409a      	lsls	r2, r3
 80025fe:	0013      	movs	r3, r2
 8002600:	43da      	mvns	r2, r3
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	409a      	lsls	r2, r3
 8002612:	0013      	movs	r3, r2
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002626:	2201      	movs	r2, #1
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	409a      	lsls	r2, r3
 800262c:	0013      	movs	r3, r2
 800262e:	43da      	mvns	r2, r3
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	091b      	lsrs	r3, r3, #4
 800263c:	2201      	movs	r2, #1
 800263e:	401a      	ands	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	409a      	lsls	r2, r3
 8002644:	0013      	movs	r3, r2
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2203      	movs	r2, #3
 8002658:	4013      	ands	r3, r2
 800265a:	2b03      	cmp	r3, #3
 800265c:	d017      	beq.n	800268e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	2203      	movs	r2, #3
 800266a:	409a      	lsls	r2, r3
 800266c:	0013      	movs	r3, r2
 800266e:	43da      	mvns	r2, r3
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	409a      	lsls	r2, r3
 8002680:	0013      	movs	r3, r2
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2203      	movs	r2, #3
 8002694:	4013      	ands	r3, r2
 8002696:	2b02      	cmp	r3, #2
 8002698:	d123      	bne.n	80026e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	08da      	lsrs	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3208      	adds	r2, #8
 80026a2:	0092      	lsls	r2, r2, #2
 80026a4:	58d3      	ldr	r3, [r2, r3]
 80026a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2207      	movs	r2, #7
 80026ac:	4013      	ands	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	220f      	movs	r2, #15
 80026b2:	409a      	lsls	r2, r3
 80026b4:	0013      	movs	r3, r2
 80026b6:	43da      	mvns	r2, r3
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4013      	ands	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2107      	movs	r1, #7
 80026c6:	400b      	ands	r3, r1
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	409a      	lsls	r2, r3
 80026cc:	0013      	movs	r3, r2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	08da      	lsrs	r2, r3, #3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3208      	adds	r2, #8
 80026dc:	0092      	lsls	r2, r2, #2
 80026de:	6939      	ldr	r1, [r7, #16]
 80026e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	2203      	movs	r2, #3
 80026ee:	409a      	lsls	r2, r3
 80026f0:	0013      	movs	r3, r2
 80026f2:	43da      	mvns	r2, r3
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2203      	movs	r2, #3
 8002700:	401a      	ands	r2, r3
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	409a      	lsls	r2, r3
 8002708:	0013      	movs	r3, r2
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	23c0      	movs	r3, #192	@ 0xc0
 800271c:	029b      	lsls	r3, r3, #10
 800271e:	4013      	ands	r3, r2
 8002720:	d100      	bne.n	8002724 <HAL_GPIO_Init+0x174>
 8002722:	e092      	b.n	800284a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002724:	4a50      	ldr	r2, [pc, #320]	@ (8002868 <HAL_GPIO_Init+0x2b8>)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3318      	adds	r3, #24
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	589b      	ldr	r3, [r3, r2]
 8002730:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2203      	movs	r2, #3
 8002736:	4013      	ands	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	220f      	movs	r2, #15
 800273c:	409a      	lsls	r2, r3
 800273e:	0013      	movs	r3, r2
 8002740:	43da      	mvns	r2, r3
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4013      	ands	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	23a0      	movs	r3, #160	@ 0xa0
 800274c:	05db      	lsls	r3, r3, #23
 800274e:	429a      	cmp	r2, r3
 8002750:	d013      	beq.n	800277a <HAL_GPIO_Init+0x1ca>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a45      	ldr	r2, [pc, #276]	@ (800286c <HAL_GPIO_Init+0x2bc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00d      	beq.n	8002776 <HAL_GPIO_Init+0x1c6>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a44      	ldr	r2, [pc, #272]	@ (8002870 <HAL_GPIO_Init+0x2c0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d007      	beq.n	8002772 <HAL_GPIO_Init+0x1c2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a43      	ldr	r2, [pc, #268]	@ (8002874 <HAL_GPIO_Init+0x2c4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d101      	bne.n	800276e <HAL_GPIO_Init+0x1be>
 800276a:	2303      	movs	r3, #3
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x1cc>
 800276e:	2305      	movs	r3, #5
 8002770:	e004      	b.n	800277c <HAL_GPIO_Init+0x1cc>
 8002772:	2302      	movs	r3, #2
 8002774:	e002      	b.n	800277c <HAL_GPIO_Init+0x1cc>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_GPIO_Init+0x1cc>
 800277a:	2300      	movs	r3, #0
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	2103      	movs	r1, #3
 8002780:	400a      	ands	r2, r1
 8002782:	00d2      	lsls	r2, r2, #3
 8002784:	4093      	lsls	r3, r2
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800278c:	4936      	ldr	r1, [pc, #216]	@ (8002868 <HAL_GPIO_Init+0x2b8>)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	3318      	adds	r3, #24
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800279a:	4b33      	ldr	r3, [pc, #204]	@ (8002868 <HAL_GPIO_Init+0x2b8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	43da      	mvns	r2, r3
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	2380      	movs	r3, #128	@ 0x80
 80027b0:	035b      	lsls	r3, r3, #13
 80027b2:	4013      	ands	r3, r2
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027be:	4b2a      	ldr	r3, [pc, #168]	@ (8002868 <HAL_GPIO_Init+0x2b8>)
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80027c4:	4b28      	ldr	r3, [pc, #160]	@ (8002868 <HAL_GPIO_Init+0x2b8>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43da      	mvns	r2, r3
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	2380      	movs	r3, #128	@ 0x80
 80027da:	039b      	lsls	r3, r3, #14
 80027dc:	4013      	ands	r3, r2
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002868 <HAL_GPIO_Init+0x2b8>)
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002868 <HAL_GPIO_Init+0x2b8>)
 80027f0:	2384      	movs	r3, #132	@ 0x84
 80027f2:	58d3      	ldr	r3, [r2, r3]
 80027f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	43da      	mvns	r2, r3
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4013      	ands	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	2380      	movs	r3, #128	@ 0x80
 8002806:	029b      	lsls	r3, r3, #10
 8002808:	4013      	ands	r3, r2
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002814:	4914      	ldr	r1, [pc, #80]	@ (8002868 <HAL_GPIO_Init+0x2b8>)
 8002816:	2284      	movs	r2, #132	@ 0x84
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800281c:	4a12      	ldr	r2, [pc, #72]	@ (8002868 <HAL_GPIO_Init+0x2b8>)
 800281e:	2380      	movs	r3, #128	@ 0x80
 8002820:	58d3      	ldr	r3, [r2, r3]
 8002822:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	43da      	mvns	r2, r3
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4013      	ands	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	2380      	movs	r3, #128	@ 0x80
 8002834:	025b      	lsls	r3, r3, #9
 8002836:	4013      	ands	r3, r2
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002842:	4909      	ldr	r1, [pc, #36]	@ (8002868 <HAL_GPIO_Init+0x2b8>)
 8002844:	2280      	movs	r2, #128	@ 0x80
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	3301      	adds	r3, #1
 800284e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	40da      	lsrs	r2, r3
 8002858:	1e13      	subs	r3, r2, #0
 800285a:	d000      	beq.n	800285e <HAL_GPIO_Init+0x2ae>
 800285c:	e6b0      	b.n	80025c0 <HAL_GPIO_Init+0x10>
  }
}
 800285e:	46c0      	nop			@ (mov r8, r8)
 8002860:	46c0      	nop			@ (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	b006      	add	sp, #24
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40021800 	.word	0x40021800
 800286c:	50000400 	.word	0x50000400
 8002870:	50000800 	.word	0x50000800
 8002874:	50000c00 	.word	0x50000c00

08002878 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	000a      	movs	r2, r1
 8002882:	1cbb      	adds	r3, r7, #2
 8002884:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	1cba      	adds	r2, r7, #2
 800288c:	8812      	ldrh	r2, [r2, #0]
 800288e:	4013      	ands	r3, r2
 8002890:	d004      	beq.n	800289c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002892:	230f      	movs	r3, #15
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
 800289a:	e003      	b.n	80028a4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800289c:	230f      	movs	r3, #15
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80028a4:	230f      	movs	r3, #15
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	781b      	ldrb	r3, [r3, #0]
}
 80028aa:	0018      	movs	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b004      	add	sp, #16
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	0008      	movs	r0, r1
 80028bc:	0011      	movs	r1, r2
 80028be:	1cbb      	adds	r3, r7, #2
 80028c0:	1c02      	adds	r2, r0, #0
 80028c2:	801a      	strh	r2, [r3, #0]
 80028c4:	1c7b      	adds	r3, r7, #1
 80028c6:	1c0a      	adds	r2, r1, #0
 80028c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028ca:	1c7b      	adds	r3, r7, #1
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d004      	beq.n	80028dc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028d2:	1cbb      	adds	r3, r7, #2
 80028d4:	881a      	ldrh	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028da:	e003      	b.n	80028e4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028dc:	1cbb      	adds	r3, r7, #2
 80028de:	881a      	ldrh	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028e4:	46c0      	nop			@ (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b002      	add	sp, #8
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	000a      	movs	r2, r1
 80028f6:	1cbb      	adds	r3, r7, #2
 80028f8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002900:	1cbb      	adds	r3, r7, #2
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4013      	ands	r3, r2
 8002908:	041a      	lsls	r2, r3, #16
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	43db      	mvns	r3, r3
 800290e:	1cb9      	adds	r1, r7, #2
 8002910:	8809      	ldrh	r1, [r1, #0]
 8002912:	400b      	ands	r3, r1
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	619a      	str	r2, [r3, #24]
}
 800291a:	46c0      	nop			@ (mov r8, r8)
 800291c:	46bd      	mov	sp, r7
 800291e:	b004      	add	sp, #16
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	0002      	movs	r2, r0
 800292c:	1dbb      	adds	r3, r7, #6
 800292e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002930:	4b10      	ldr	r3, [pc, #64]	@ (8002974 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	1dba      	adds	r2, r7, #6
 8002936:	8812      	ldrh	r2, [r2, #0]
 8002938:	4013      	ands	r3, r2
 800293a:	d008      	beq.n	800294e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800293c:	4b0d      	ldr	r3, [pc, #52]	@ (8002974 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800293e:	1dba      	adds	r2, r7, #6
 8002940:	8812      	ldrh	r2, [r2, #0]
 8002942:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002944:	1dbb      	adds	r3, r7, #6
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	0018      	movs	r0, r3
 800294a:	f000 f815 	bl	8002978 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800294e:	4b09      	ldr	r3, [pc, #36]	@ (8002974 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	1dba      	adds	r2, r7, #6
 8002954:	8812      	ldrh	r2, [r2, #0]
 8002956:	4013      	ands	r3, r2
 8002958:	d008      	beq.n	800296c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800295a:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800295c:	1dba      	adds	r2, r7, #6
 800295e:	8812      	ldrh	r2, [r2, #0]
 8002960:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002962:	1dbb      	adds	r3, r7, #6
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	0018      	movs	r0, r3
 8002968:	f7fe fd7c 	bl	8001464 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800296c:	46c0      	nop			@ (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b002      	add	sp, #8
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40021800 	.word	0x40021800

08002978 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	0002      	movs	r2, r0
 8002980:	1dbb      	adds	r3, r7, #6
 8002982:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002984:	46c0      	nop			@ (mov r8, r8)
 8002986:	46bd      	mov	sp, r7
 8002988:	b002      	add	sp, #8
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e08f      	b.n	8002abe <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2241      	movs	r2, #65	@ 0x41
 80029a2:	5c9b      	ldrb	r3, [r3, r2]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d107      	bne.n	80029ba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2240      	movs	r2, #64	@ 0x40
 80029ae:	2100      	movs	r1, #0
 80029b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	0018      	movs	r0, r3
 80029b6:	f7ff fad1 	bl	8001f5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2241      	movs	r2, #65	@ 0x41
 80029be:	2124      	movs	r1, #36	@ 0x24
 80029c0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2101      	movs	r1, #1
 80029ce:	438a      	bics	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	493b      	ldr	r1, [pc, #236]	@ (8002ac8 <HAL_I2C_Init+0x13c>)
 80029dc:	400a      	ands	r2, r1
 80029de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4938      	ldr	r1, [pc, #224]	@ (8002acc <HAL_I2C_Init+0x140>)
 80029ec:	400a      	ands	r2, r1
 80029ee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d108      	bne.n	8002a0a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2180      	movs	r1, #128	@ 0x80
 8002a02:	0209      	lsls	r1, r1, #8
 8002a04:	430a      	orrs	r2, r1
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	e007      	b.n	8002a1a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2184      	movs	r1, #132	@ 0x84
 8002a14:	0209      	lsls	r1, r1, #8
 8002a16:	430a      	orrs	r2, r1
 8002a18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d109      	bne.n	8002a36 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2180      	movs	r1, #128	@ 0x80
 8002a2e:	0109      	lsls	r1, r1, #4
 8002a30:	430a      	orrs	r2, r1
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	e007      	b.n	8002a46 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4923      	ldr	r1, [pc, #140]	@ (8002ad0 <HAL_I2C_Init+0x144>)
 8002a42:	400a      	ands	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4920      	ldr	r1, [pc, #128]	@ (8002ad4 <HAL_I2C_Init+0x148>)
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	491a      	ldr	r1, [pc, #104]	@ (8002acc <HAL_I2C_Init+0x140>)
 8002a62:	400a      	ands	r2, r1
 8002a64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69d9      	ldr	r1, [r3, #28]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1a      	ldr	r2, [r3, #32]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2241      	movs	r2, #65	@ 0x41
 8002aaa:	2120      	movs	r1, #32
 8002aac:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2242      	movs	r2, #66	@ 0x42
 8002ab8:	2100      	movs	r1, #0
 8002aba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b002      	add	sp, #8
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			@ (mov r8, r8)
 8002ac8:	f0ffffff 	.word	0xf0ffffff
 8002acc:	ffff7fff 	.word	0xffff7fff
 8002ad0:	fffff7ff 	.word	0xfffff7ff
 8002ad4:	02008000 	.word	0x02008000

08002ad8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ad8:	b590      	push	{r4, r7, lr}
 8002ada:	b089      	sub	sp, #36	@ 0x24
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	0008      	movs	r0, r1
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	0019      	movs	r1, r3
 8002ae6:	230a      	movs	r3, #10
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	1c02      	adds	r2, r0, #0
 8002aec:	801a      	strh	r2, [r3, #0]
 8002aee:	2308      	movs	r3, #8
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	1c0a      	adds	r2, r1, #0
 8002af4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2241      	movs	r2, #65	@ 0x41
 8002afa:	5c9b      	ldrb	r3, [r3, r2]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	d000      	beq.n	8002b04 <HAL_I2C_Master_Transmit+0x2c>
 8002b02:	e10a      	b.n	8002d1a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2240      	movs	r2, #64	@ 0x40
 8002b08:	5c9b      	ldrb	r3, [r3, r2]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_I2C_Master_Transmit+0x3a>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e104      	b.n	8002d1c <HAL_I2C_Master_Transmit+0x244>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2240      	movs	r2, #64	@ 0x40
 8002b16:	2101      	movs	r1, #1
 8002b18:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b1a:	f7ff fc61 	bl	80023e0 <HAL_GetTick>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b22:	2380      	movs	r3, #128	@ 0x80
 8002b24:	0219      	lsls	r1, r3, #8
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	2319      	movs	r3, #25
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f000 fa26 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002b34:	1e03      	subs	r3, r0, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0ef      	b.n	8002d1c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2241      	movs	r2, #65	@ 0x41
 8002b40:	2121      	movs	r1, #33	@ 0x21
 8002b42:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2242      	movs	r2, #66	@ 0x42
 8002b48:	2110      	movs	r1, #16
 8002b4a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2208      	movs	r2, #8
 8002b5c:	18ba      	adds	r2, r7, r2
 8002b5e:	8812      	ldrh	r2, [r2, #0]
 8002b60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2bff      	cmp	r3, #255	@ 0xff
 8002b70:	d906      	bls.n	8002b80 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	22ff      	movs	r2, #255	@ 0xff
 8002b76:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002b78:	2380      	movs	r3, #128	@ 0x80
 8002b7a:	045b      	lsls	r3, r3, #17
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	e007      	b.n	8002b90 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002b8a:	2380      	movs	r3, #128	@ 0x80
 8002b8c:	049b      	lsls	r3, r3, #18
 8002b8e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d027      	beq.n	8002be8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	781a      	ldrb	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	697c      	ldr	r4, [r7, #20]
 8002bd4:	230a      	movs	r3, #10
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	8819      	ldrh	r1, [r3, #0]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	4b51      	ldr	r3, [pc, #324]	@ (8002d24 <HAL_I2C_Master_Transmit+0x24c>)
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	0023      	movs	r3, r4
 8002be2:	f000 fc45 	bl	8003470 <I2C_TransferConfig>
 8002be6:	e06f      	b.n	8002cc8 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	697c      	ldr	r4, [r7, #20]
 8002bf0:	230a      	movs	r3, #10
 8002bf2:	18fb      	adds	r3, r7, r3
 8002bf4:	8819      	ldrh	r1, [r3, #0]
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	4b4a      	ldr	r3, [pc, #296]	@ (8002d24 <HAL_I2C_Master_Transmit+0x24c>)
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	0023      	movs	r3, r4
 8002bfe:	f000 fc37 	bl	8003470 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002c02:	e061      	b.n	8002cc8 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f000 fa10 	bl	8003030 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c10:	1e03      	subs	r3, r0, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e081      	b.n	8002d1c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	781a      	ldrb	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d03a      	beq.n	8002cc8 <HAL_I2C_Master_Transmit+0x1f0>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d136      	bne.n	8002cc8 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	0013      	movs	r3, r2
 8002c64:	2200      	movs	r2, #0
 8002c66:	2180      	movs	r1, #128	@ 0x80
 8002c68:	f000 f98a 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002c6c:	1e03      	subs	r3, r0, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e053      	b.n	8002d1c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2bff      	cmp	r3, #255	@ 0xff
 8002c7c:	d911      	bls.n	8002ca2 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	22ff      	movs	r2, #255	@ 0xff
 8002c82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	2380      	movs	r3, #128	@ 0x80
 8002c8c:	045c      	lsls	r4, r3, #17
 8002c8e:	230a      	movs	r3, #10
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	8819      	ldrh	r1, [r3, #0]
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	2300      	movs	r3, #0
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	0023      	movs	r3, r4
 8002c9c:	f000 fbe8 	bl	8003470 <I2C_TransferConfig>
 8002ca0:	e012      	b.n	8002cc8 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	2380      	movs	r3, #128	@ 0x80
 8002cb4:	049c      	lsls	r4, r3, #18
 8002cb6:	230a      	movs	r3, #10
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	8819      	ldrh	r1, [r3, #0]
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	0023      	movs	r3, r4
 8002cc4:	f000 fbd4 	bl	8003470 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d198      	bne.n	8002c04 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f000 f9ef 	bl	80030bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cde:	1e03      	subs	r3, r0, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e01a      	b.n	8002d1c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2220      	movs	r2, #32
 8002cec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	490b      	ldr	r1, [pc, #44]	@ (8002d28 <HAL_I2C_Master_Transmit+0x250>)
 8002cfa:	400a      	ands	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2241      	movs	r2, #65	@ 0x41
 8002d02:	2120      	movs	r1, #32
 8002d04:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2242      	movs	r2, #66	@ 0x42
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2240      	movs	r2, #64	@ 0x40
 8002d12:	2100      	movs	r1, #0
 8002d14:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e000      	b.n	8002d1c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002d1a:	2302      	movs	r3, #2
  }
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b007      	add	sp, #28
 8002d22:	bd90      	pop	{r4, r7, pc}
 8002d24:	80002000 	.word	0x80002000
 8002d28:	fe00e800 	.word	0xfe00e800

08002d2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b089      	sub	sp, #36	@ 0x24
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	0008      	movs	r0, r1
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	0019      	movs	r1, r3
 8002d3a:	230a      	movs	r3, #10
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	1c02      	adds	r2, r0, #0
 8002d40:	801a      	strh	r2, [r3, #0]
 8002d42:	2308      	movs	r3, #8
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	1c0a      	adds	r2, r1, #0
 8002d48:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2241      	movs	r2, #65	@ 0x41
 8002d4e:	5c9b      	ldrb	r3, [r3, r2]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b20      	cmp	r3, #32
 8002d54:	d000      	beq.n	8002d58 <HAL_I2C_Master_Receive+0x2c>
 8002d56:	e0e8      	b.n	8002f2a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2240      	movs	r2, #64	@ 0x40
 8002d5c:	5c9b      	ldrb	r3, [r3, r2]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_I2C_Master_Receive+0x3a>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e0e2      	b.n	8002f2c <HAL_I2C_Master_Receive+0x200>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2240      	movs	r2, #64	@ 0x40
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d6e:	f7ff fb37 	bl	80023e0 <HAL_GetTick>
 8002d72:	0003      	movs	r3, r0
 8002d74:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d76:	2380      	movs	r3, #128	@ 0x80
 8002d78:	0219      	lsls	r1, r3, #8
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	2319      	movs	r3, #25
 8002d82:	2201      	movs	r2, #1
 8002d84:	f000 f8fc 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002d88:	1e03      	subs	r3, r0, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0cd      	b.n	8002f2c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2241      	movs	r2, #65	@ 0x41
 8002d94:	2122      	movs	r1, #34	@ 0x22
 8002d96:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2242      	movs	r2, #66	@ 0x42
 8002d9c:	2110      	movs	r1, #16
 8002d9e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2208      	movs	r2, #8
 8002db0:	18ba      	adds	r2, r7, r2
 8002db2:	8812      	ldrh	r2, [r2, #0]
 8002db4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2bff      	cmp	r3, #255	@ 0xff
 8002dc4:	d911      	bls.n	8002dea <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	22ff      	movs	r2, #255	@ 0xff
 8002dca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	2380      	movs	r3, #128	@ 0x80
 8002dd4:	045c      	lsls	r4, r3, #17
 8002dd6:	230a      	movs	r3, #10
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	8819      	ldrh	r1, [r3, #0]
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	4b55      	ldr	r3, [pc, #340]	@ (8002f34 <HAL_I2C_Master_Receive+0x208>)
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	0023      	movs	r3, r4
 8002de4:	f000 fb44 	bl	8003470 <I2C_TransferConfig>
 8002de8:	e076      	b.n	8002ed8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	2380      	movs	r3, #128	@ 0x80
 8002dfc:	049c      	lsls	r4, r3, #18
 8002dfe:	230a      	movs	r3, #10
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	8819      	ldrh	r1, [r3, #0]
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	4b4b      	ldr	r3, [pc, #300]	@ (8002f34 <HAL_I2C_Master_Receive+0x208>)
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	0023      	movs	r3, r4
 8002e0c:	f000 fb30 	bl	8003470 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002e10:	e062      	b.n	8002ed8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f000 f993 	bl	8003144 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e1e:	1e03      	subs	r3, r0, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e082      	b.n	8002f2c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d03a      	beq.n	8002ed8 <HAL_I2C_Master_Receive+0x1ac>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d136      	bne.n	8002ed8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	0013      	movs	r3, r2
 8002e74:	2200      	movs	r2, #0
 8002e76:	2180      	movs	r1, #128	@ 0x80
 8002e78:	f000 f882 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002e7c:	1e03      	subs	r3, r0, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e053      	b.n	8002f2c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2bff      	cmp	r3, #255	@ 0xff
 8002e8c:	d911      	bls.n	8002eb2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	22ff      	movs	r2, #255	@ 0xff
 8002e92:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	2380      	movs	r3, #128	@ 0x80
 8002e9c:	045c      	lsls	r4, r3, #17
 8002e9e:	230a      	movs	r3, #10
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	8819      	ldrh	r1, [r3, #0]
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	0023      	movs	r3, r4
 8002eac:	f000 fae0 	bl	8003470 <I2C_TransferConfig>
 8002eb0:	e012      	b.n	8002ed8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	2380      	movs	r3, #128	@ 0x80
 8002ec4:	049c      	lsls	r4, r3, #18
 8002ec6:	230a      	movs	r3, #10
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	8819      	ldrh	r1, [r3, #0]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	0023      	movs	r3, r4
 8002ed4:	f000 facc 	bl	8003470 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d197      	bne.n	8002e12 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f000 f8e7 	bl	80030bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002eee:	1e03      	subs	r3, r0, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e01a      	b.n	8002f2c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2220      	movs	r2, #32
 8002efc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	490b      	ldr	r1, [pc, #44]	@ (8002f38 <HAL_I2C_Master_Receive+0x20c>)
 8002f0a:	400a      	ands	r2, r1
 8002f0c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2241      	movs	r2, #65	@ 0x41
 8002f12:	2120      	movs	r1, #32
 8002f14:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2242      	movs	r2, #66	@ 0x42
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2240      	movs	r2, #64	@ 0x40
 8002f22:	2100      	movs	r1, #0
 8002f24:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e000      	b.n	8002f2c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002f2a:	2302      	movs	r3, #2
  }
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b007      	add	sp, #28
 8002f32:	bd90      	pop	{r4, r7, pc}
 8002f34:	80002400 	.word	0x80002400
 8002f38:	fe00e800 	.word	0xfe00e800

08002f3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d103      	bne.n	8002f5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2200      	movs	r2, #0
 8002f58:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	2201      	movs	r2, #1
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d007      	beq.n	8002f78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2101      	movs	r1, #1
 8002f74:	430a      	orrs	r2, r1
 8002f76:	619a      	str	r2, [r3, #24]
  }
}
 8002f78:	46c0      	nop			@ (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b002      	add	sp, #8
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	1dfb      	adds	r3, r7, #7
 8002f8e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f90:	e03a      	b.n	8003008 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	6839      	ldr	r1, [r7, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f000 f971 	bl	8003280 <I2C_IsErrorOccurred>
 8002f9e:	1e03      	subs	r3, r0, #0
 8002fa0:	d001      	beq.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e040      	b.n	8003028 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	d02d      	beq.n	8003008 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fac:	f7ff fa18 	bl	80023e0 <HAL_GetTick>
 8002fb0:	0002      	movs	r2, r0
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d302      	bcc.n	8002fc2 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d122      	bne.n	8003008 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	425a      	negs	r2, r3
 8002fd2:	4153      	adcs	r3, r2
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	001a      	movs	r2, r3
 8002fd8:	1dfb      	adds	r3, r7, #7
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d113      	bne.n	8003008 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2241      	movs	r2, #65	@ 0x41
 8002ff0:	2120      	movs	r1, #32
 8002ff2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2242      	movs	r2, #66	@ 0x42
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2240      	movs	r2, #64	@ 0x40
 8003000:	2100      	movs	r1, #0
 8003002:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e00f      	b.n	8003028 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	4013      	ands	r3, r2
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	425a      	negs	r2, r3
 8003018:	4153      	adcs	r3, r2
 800301a:	b2db      	uxtb	r3, r3
 800301c:	001a      	movs	r2, r3
 800301e:	1dfb      	adds	r3, r7, #7
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d0b5      	beq.n	8002f92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	0018      	movs	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	b004      	add	sp, #16
 800302e:	bd80      	pop	{r7, pc}

08003030 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800303c:	e032      	b.n	80030a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	0018      	movs	r0, r3
 8003046:	f000 f91b 	bl	8003280 <I2C_IsErrorOccurred>
 800304a:	1e03      	subs	r3, r0, #0
 800304c:	d001      	beq.n	8003052 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e030      	b.n	80030b4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	3301      	adds	r3, #1
 8003056:	d025      	beq.n	80030a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003058:	f7ff f9c2 	bl	80023e0 <HAL_GetTick>
 800305c:	0002      	movs	r2, r0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	429a      	cmp	r2, r3
 8003066:	d302      	bcc.n	800306e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d11a      	bne.n	80030a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	2202      	movs	r2, #2
 8003076:	4013      	ands	r3, r2
 8003078:	2b02      	cmp	r3, #2
 800307a:	d013      	beq.n	80030a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003080:	2220      	movs	r2, #32
 8003082:	431a      	orrs	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2241      	movs	r2, #65	@ 0x41
 800308c:	2120      	movs	r1, #32
 800308e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2242      	movs	r2, #66	@ 0x42
 8003094:	2100      	movs	r1, #0
 8003096:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2240      	movs	r2, #64	@ 0x40
 800309c:	2100      	movs	r1, #0
 800309e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e007      	b.n	80030b4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2202      	movs	r2, #2
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d1c5      	bne.n	800303e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	0018      	movs	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b004      	add	sp, #16
 80030ba:	bd80      	pop	{r7, pc}

080030bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030c8:	e02f      	b.n	800312a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	0018      	movs	r0, r3
 80030d2:	f000 f8d5 	bl	8003280 <I2C_IsErrorOccurred>
 80030d6:	1e03      	subs	r3, r0, #0
 80030d8:	d001      	beq.n	80030de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e02d      	b.n	800313a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030de:	f7ff f97f 	bl	80023e0 <HAL_GetTick>
 80030e2:	0002      	movs	r2, r0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d302      	bcc.n	80030f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d11a      	bne.n	800312a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2220      	movs	r2, #32
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d013      	beq.n	800312a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003106:	2220      	movs	r2, #32
 8003108:	431a      	orrs	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2241      	movs	r2, #65	@ 0x41
 8003112:	2120      	movs	r1, #32
 8003114:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2242      	movs	r2, #66	@ 0x42
 800311a:	2100      	movs	r1, #0
 800311c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2240      	movs	r2, #64	@ 0x40
 8003122:	2100      	movs	r1, #0
 8003124:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e007      	b.n	800313a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	2220      	movs	r2, #32
 8003132:	4013      	ands	r3, r2
 8003134:	2b20      	cmp	r3, #32
 8003136:	d1c8      	bne.n	80030ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	0018      	movs	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	b004      	add	sp, #16
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003150:	2317      	movs	r3, #23
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003158:	e07b      	b.n	8003252 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	0018      	movs	r0, r3
 8003162:	f000 f88d 	bl	8003280 <I2C_IsErrorOccurred>
 8003166:	1e03      	subs	r3, r0, #0
 8003168:	d003      	beq.n	8003172 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800316a:	2317      	movs	r3, #23
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	2201      	movs	r2, #1
 8003170:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2220      	movs	r2, #32
 800317a:	4013      	ands	r3, r2
 800317c:	2b20      	cmp	r3, #32
 800317e:	d140      	bne.n	8003202 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003180:	2117      	movs	r1, #23
 8003182:	187b      	adds	r3, r7, r1
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d13b      	bne.n	8003202 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	2204      	movs	r2, #4
 8003192:	4013      	ands	r3, r2
 8003194:	2b04      	cmp	r3, #4
 8003196:	d106      	bne.n	80031a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80031a0:	187b      	adds	r3, r7, r1
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	2210      	movs	r2, #16
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	d123      	bne.n	80031fc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2210      	movs	r2, #16
 80031ba:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2204      	movs	r2, #4
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2220      	movs	r2, #32
 80031c8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4929      	ldr	r1, [pc, #164]	@ (800327c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80031d6:	400a      	ands	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2241      	movs	r2, #65	@ 0x41
 80031de:	2120      	movs	r1, #32
 80031e0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2242      	movs	r2, #66	@ 0x42
 80031e6:	2100      	movs	r1, #0
 80031e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2240      	movs	r2, #64	@ 0x40
 80031ee:	2100      	movs	r1, #0
 80031f0:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80031f2:	2317      	movs	r3, #23
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	2201      	movs	r2, #1
 80031f8:	701a      	strb	r2, [r3, #0]
 80031fa:	e002      	b.n	8003202 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003202:	f7ff f8ed 	bl	80023e0 <HAL_GetTick>
 8003206:	0002      	movs	r2, r0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	429a      	cmp	r2, r3
 8003210:	d302      	bcc.n	8003218 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d11c      	bne.n	8003252 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003218:	2017      	movs	r0, #23
 800321a:	183b      	adds	r3, r7, r0
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d117      	bne.n	8003252 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	2204      	movs	r2, #4
 800322a:	4013      	ands	r3, r2
 800322c:	2b04      	cmp	r3, #4
 800322e:	d010      	beq.n	8003252 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003234:	2220      	movs	r2, #32
 8003236:	431a      	orrs	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2241      	movs	r2, #65	@ 0x41
 8003240:	2120      	movs	r1, #32
 8003242:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2240      	movs	r2, #64	@ 0x40
 8003248:	2100      	movs	r1, #0
 800324a:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800324c:	183b      	adds	r3, r7, r0
 800324e:	2201      	movs	r2, #1
 8003250:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	2204      	movs	r2, #4
 800325a:	4013      	ands	r3, r2
 800325c:	2b04      	cmp	r3, #4
 800325e:	d005      	beq.n	800326c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003260:	2317      	movs	r3, #23
 8003262:	18fb      	adds	r3, r7, r3
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d100      	bne.n	800326c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800326a:	e776      	b.n	800315a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 800326c:	2317      	movs	r3, #23
 800326e:	18fb      	adds	r3, r7, r3
 8003270:	781b      	ldrb	r3, [r3, #0]
}
 8003272:	0018      	movs	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	b006      	add	sp, #24
 8003278:	bd80      	pop	{r7, pc}
 800327a:	46c0      	nop			@ (mov r8, r8)
 800327c:	fe00e800 	.word	0xfe00e800

08003280 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08a      	sub	sp, #40	@ 0x28
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800328c:	2327      	movs	r3, #39	@ 0x27
 800328e:	18fb      	adds	r3, r7, r3
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	2210      	movs	r2, #16
 80032a8:	4013      	ands	r3, r2
 80032aa:	d100      	bne.n	80032ae <I2C_IsErrorOccurred+0x2e>
 80032ac:	e079      	b.n	80033a2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2210      	movs	r2, #16
 80032b4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032b6:	e057      	b.n	8003368 <I2C_IsErrorOccurred+0xe8>
 80032b8:	2227      	movs	r2, #39	@ 0x27
 80032ba:	18bb      	adds	r3, r7, r2
 80032bc:	18ba      	adds	r2, r7, r2
 80032be:	7812      	ldrb	r2, [r2, #0]
 80032c0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	3301      	adds	r3, #1
 80032c6:	d04f      	beq.n	8003368 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032c8:	f7ff f88a 	bl	80023e0 <HAL_GetTick>
 80032cc:	0002      	movs	r2, r0
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d302      	bcc.n	80032de <I2C_IsErrorOccurred+0x5e>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d144      	bne.n	8003368 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	2380      	movs	r3, #128	@ 0x80
 80032e6:	01db      	lsls	r3, r3, #7
 80032e8:	4013      	ands	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80032ec:	2013      	movs	r0, #19
 80032ee:	183b      	adds	r3, r7, r0
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	2142      	movs	r1, #66	@ 0x42
 80032f4:	5c52      	ldrb	r2, [r2, r1]
 80032f6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	2380      	movs	r3, #128	@ 0x80
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	401a      	ands	r2, r3
 8003304:	2380      	movs	r3, #128	@ 0x80
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	429a      	cmp	r2, r3
 800330a:	d126      	bne.n	800335a <I2C_IsErrorOccurred+0xda>
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	2380      	movs	r3, #128	@ 0x80
 8003310:	01db      	lsls	r3, r3, #7
 8003312:	429a      	cmp	r2, r3
 8003314:	d021      	beq.n	800335a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003316:	183b      	adds	r3, r7, r0
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b20      	cmp	r3, #32
 800331c:	d01d      	beq.n	800335a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2180      	movs	r1, #128	@ 0x80
 800332a:	01c9      	lsls	r1, r1, #7
 800332c:	430a      	orrs	r2, r1
 800332e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003330:	f7ff f856 	bl	80023e0 <HAL_GetTick>
 8003334:	0003      	movs	r3, r0
 8003336:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003338:	e00f      	b.n	800335a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800333a:	f7ff f851 	bl	80023e0 <HAL_GetTick>
 800333e:	0002      	movs	r2, r0
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b19      	cmp	r3, #25
 8003346:	d908      	bls.n	800335a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	2220      	movs	r2, #32
 800334c:	4313      	orrs	r3, r2
 800334e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003350:	2327      	movs	r3, #39	@ 0x27
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]

              break;
 8003358:	e006      	b.n	8003368 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2220      	movs	r2, #32
 8003362:	4013      	ands	r3, r2
 8003364:	2b20      	cmp	r3, #32
 8003366:	d1e8      	bne.n	800333a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2220      	movs	r2, #32
 8003370:	4013      	ands	r3, r2
 8003372:	2b20      	cmp	r3, #32
 8003374:	d004      	beq.n	8003380 <I2C_IsErrorOccurred+0x100>
 8003376:	2327      	movs	r3, #39	@ 0x27
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d09b      	beq.n	80032b8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003380:	2327      	movs	r3, #39	@ 0x27
 8003382:	18fb      	adds	r3, r7, r3
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d103      	bne.n	8003392 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2220      	movs	r2, #32
 8003390:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	2204      	movs	r2, #4
 8003396:	4313      	orrs	r3, r2
 8003398:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800339a:	2327      	movs	r3, #39	@ 0x27
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	2201      	movs	r2, #1
 80033a0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	2380      	movs	r3, #128	@ 0x80
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4013      	ands	r3, r2
 80033b2:	d00c      	beq.n	80033ce <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	2201      	movs	r2, #1
 80033b8:	4313      	orrs	r3, r2
 80033ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2280      	movs	r2, #128	@ 0x80
 80033c2:	0052      	lsls	r2, r2, #1
 80033c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033c6:	2327      	movs	r3, #39	@ 0x27
 80033c8:	18fb      	adds	r3, r7, r3
 80033ca:	2201      	movs	r2, #1
 80033cc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	2380      	movs	r3, #128	@ 0x80
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4013      	ands	r3, r2
 80033d6:	d00c      	beq.n	80033f2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	2208      	movs	r2, #8
 80033dc:	4313      	orrs	r3, r2
 80033de:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2280      	movs	r2, #128	@ 0x80
 80033e6:	00d2      	lsls	r2, r2, #3
 80033e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033ea:	2327      	movs	r3, #39	@ 0x27
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	2201      	movs	r2, #1
 80033f0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	2380      	movs	r3, #128	@ 0x80
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4013      	ands	r3, r2
 80033fa:	d00c      	beq.n	8003416 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	2202      	movs	r2, #2
 8003400:	4313      	orrs	r3, r2
 8003402:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2280      	movs	r2, #128	@ 0x80
 800340a:	0092      	lsls	r2, r2, #2
 800340c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800340e:	2327      	movs	r3, #39	@ 0x27
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	2201      	movs	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003416:	2327      	movs	r3, #39	@ 0x27
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01d      	beq.n	800345c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	0018      	movs	r0, r3
 8003424:	f7ff fd8a 	bl	8002f3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	490e      	ldr	r1, [pc, #56]	@ (800346c <I2C_IsErrorOccurred+0x1ec>)
 8003434:	400a      	ands	r2, r1
 8003436:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	431a      	orrs	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2241      	movs	r2, #65	@ 0x41
 8003448:	2120      	movs	r1, #32
 800344a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2242      	movs	r2, #66	@ 0x42
 8003450:	2100      	movs	r1, #0
 8003452:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2240      	movs	r2, #64	@ 0x40
 8003458:	2100      	movs	r1, #0
 800345a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800345c:	2327      	movs	r3, #39	@ 0x27
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	781b      	ldrb	r3, [r3, #0]
}
 8003462:	0018      	movs	r0, r3
 8003464:	46bd      	mov	sp, r7
 8003466:	b00a      	add	sp, #40	@ 0x28
 8003468:	bd80      	pop	{r7, pc}
 800346a:	46c0      	nop			@ (mov r8, r8)
 800346c:	fe00e800 	.word	0xfe00e800

08003470 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003470:	b590      	push	{r4, r7, lr}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	0008      	movs	r0, r1
 800347a:	0011      	movs	r1, r2
 800347c:	607b      	str	r3, [r7, #4]
 800347e:	240a      	movs	r4, #10
 8003480:	193b      	adds	r3, r7, r4
 8003482:	1c02      	adds	r2, r0, #0
 8003484:	801a      	strh	r2, [r3, #0]
 8003486:	2009      	movs	r0, #9
 8003488:	183b      	adds	r3, r7, r0
 800348a:	1c0a      	adds	r2, r1, #0
 800348c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800348e:	193b      	adds	r3, r7, r4
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	059b      	lsls	r3, r3, #22
 8003494:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003496:	183b      	adds	r3, r7, r0
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	0419      	lsls	r1, r3, #16
 800349c:	23ff      	movs	r3, #255	@ 0xff
 800349e:	041b      	lsls	r3, r3, #16
 80034a0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034a2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034aa:	4313      	orrs	r3, r2
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	085b      	lsrs	r3, r3, #1
 80034b0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034ba:	0d51      	lsrs	r1, r2, #21
 80034bc:	2280      	movs	r2, #128	@ 0x80
 80034be:	00d2      	lsls	r2, r2, #3
 80034c0:	400a      	ands	r2, r1
 80034c2:	4907      	ldr	r1, [pc, #28]	@ (80034e0 <I2C_TransferConfig+0x70>)
 80034c4:	430a      	orrs	r2, r1
 80034c6:	43d2      	mvns	r2, r2
 80034c8:	401a      	ands	r2, r3
 80034ca:	0011      	movs	r1, r2
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80034d6:	46c0      	nop			@ (mov r8, r8)
 80034d8:	46bd      	mov	sp, r7
 80034da:	b007      	add	sp, #28
 80034dc:	bd90      	pop	{r4, r7, pc}
 80034de:	46c0      	nop			@ (mov r8, r8)
 80034e0:	03ff63ff 	.word	0x03ff63ff

080034e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2241      	movs	r2, #65	@ 0x41
 80034f2:	5c9b      	ldrb	r3, [r3, r2]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	d138      	bne.n	800356c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2240      	movs	r2, #64	@ 0x40
 80034fe:	5c9b      	ldrb	r3, [r3, r2]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003504:	2302      	movs	r3, #2
 8003506:	e032      	b.n	800356e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2240      	movs	r2, #64	@ 0x40
 800350c:	2101      	movs	r1, #1
 800350e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2241      	movs	r2, #65	@ 0x41
 8003514:	2124      	movs	r1, #36	@ 0x24
 8003516:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2101      	movs	r1, #1
 8003524:	438a      	bics	r2, r1
 8003526:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4911      	ldr	r1, [pc, #68]	@ (8003578 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003534:	400a      	ands	r2, r1
 8003536:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6819      	ldr	r1, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2101      	movs	r1, #1
 8003554:	430a      	orrs	r2, r1
 8003556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2241      	movs	r2, #65	@ 0x41
 800355c:	2120      	movs	r1, #32
 800355e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2240      	movs	r2, #64	@ 0x40
 8003564:	2100      	movs	r1, #0
 8003566:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	e000      	b.n	800356e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800356c:	2302      	movs	r3, #2
  }
}
 800356e:	0018      	movs	r0, r3
 8003570:	46bd      	mov	sp, r7
 8003572:	b002      	add	sp, #8
 8003574:	bd80      	pop	{r7, pc}
 8003576:	46c0      	nop			@ (mov r8, r8)
 8003578:	ffffefff 	.word	0xffffefff

0800357c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2241      	movs	r2, #65	@ 0x41
 800358a:	5c9b      	ldrb	r3, [r3, r2]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b20      	cmp	r3, #32
 8003590:	d139      	bne.n	8003606 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2240      	movs	r2, #64	@ 0x40
 8003596:	5c9b      	ldrb	r3, [r3, r2]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800359c:	2302      	movs	r3, #2
 800359e:	e033      	b.n	8003608 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2240      	movs	r2, #64	@ 0x40
 80035a4:	2101      	movs	r1, #1
 80035a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2241      	movs	r2, #65	@ 0x41
 80035ac:	2124      	movs	r1, #36	@ 0x24
 80035ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2101      	movs	r1, #1
 80035bc:	438a      	bics	r2, r1
 80035be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4a11      	ldr	r2, [pc, #68]	@ (8003610 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2101      	movs	r1, #1
 80035ee:	430a      	orrs	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2241      	movs	r2, #65	@ 0x41
 80035f6:	2120      	movs	r1, #32
 80035f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2240      	movs	r2, #64	@ 0x40
 80035fe:	2100      	movs	r1, #0
 8003600:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	e000      	b.n	8003608 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003606:	2302      	movs	r3, #2
  }
}
 8003608:	0018      	movs	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	b004      	add	sp, #16
 800360e:	bd80      	pop	{r7, pc}
 8003610:	fffff0ff 	.word	0xfffff0ff

08003614 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003618:	4b04      	ldr	r3, [pc, #16]	@ (800362c <HAL_PWR_EnableBkUpAccess+0x18>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	4b03      	ldr	r3, [pc, #12]	@ (800362c <HAL_PWR_EnableBkUpAccess+0x18>)
 800361e:	2180      	movs	r1, #128	@ 0x80
 8003620:	0049      	lsls	r1, r1, #1
 8003622:	430a      	orrs	r2, r1
 8003624:	601a      	str	r2, [r3, #0]
}
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40007000 	.word	0x40007000

08003630 <HAL_PWR_DisableBkUpAccess>:
/**
  * @brief  Disable access to the backup domain
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8003634:	4b04      	ldr	r3, [pc, #16]	@ (8003648 <HAL_PWR_DisableBkUpAccess+0x18>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4b03      	ldr	r3, [pc, #12]	@ (8003648 <HAL_PWR_DisableBkUpAccess+0x18>)
 800363a:	4904      	ldr	r1, [pc, #16]	@ (800364c <HAL_PWR_DisableBkUpAccess+0x1c>)
 800363c:	400a      	ands	r2, r1
 800363e:	601a      	str	r2, [r3, #0]
}
 8003640:	46c0      	nop			@ (mov r8, r8)
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	46c0      	nop			@ (mov r8, r8)
 8003648:	40007000 	.word	0x40007000
 800364c:	fffffeff 	.word	0xfffffeff

08003650 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003658:	4b19      	ldr	r3, [pc, #100]	@ (80036c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a19      	ldr	r2, [pc, #100]	@ (80036c4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800365e:	4013      	ands	r3, r2
 8003660:	0019      	movs	r1, r3
 8003662:	4b17      	ldr	r3, [pc, #92]	@ (80036c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	430a      	orrs	r2, r1
 8003668:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	2380      	movs	r3, #128	@ 0x80
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	429a      	cmp	r2, r3
 8003672:	d11f      	bne.n	80036b4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003674:	4b14      	ldr	r3, [pc, #80]	@ (80036c8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	0013      	movs	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	189b      	adds	r3, r3, r2
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	4912      	ldr	r1, [pc, #72]	@ (80036cc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003682:	0018      	movs	r0, r3
 8003684:	f7fc fd3e 	bl	8000104 <__udivsi3>
 8003688:	0003      	movs	r3, r0
 800368a:	3301      	adds	r3, #1
 800368c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800368e:	e008      	b.n	80036a2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3b01      	subs	r3, #1
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	e001      	b.n	80036a2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e009      	b.n	80036b6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036a2:	4b07      	ldr	r3, [pc, #28]	@ (80036c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80036a4:	695a      	ldr	r2, [r3, #20]
 80036a6:	2380      	movs	r3, #128	@ 0x80
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	401a      	ands	r2, r3
 80036ac:	2380      	movs	r3, #128	@ 0x80
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d0ed      	beq.n	8003690 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	0018      	movs	r0, r3
 80036b8:	46bd      	mov	sp, r7
 80036ba:	b004      	add	sp, #16
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	46c0      	nop			@ (mov r8, r8)
 80036c0:	40007000 	.word	0x40007000
 80036c4:	fffff9ff 	.word	0xfffff9ff
 80036c8:	20000068 	.word	0x20000068
 80036cc:	000f4240 	.word	0x000f4240

080036d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e2fe      	b.n	8003ce0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2201      	movs	r2, #1
 80036e8:	4013      	ands	r3, r2
 80036ea:	d100      	bne.n	80036ee <HAL_RCC_OscConfig+0x1e>
 80036ec:	e07c      	b.n	80037e8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ee:	4bc3      	ldr	r3, [pc, #780]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2238      	movs	r2, #56	@ 0x38
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036f8:	4bc0      	ldr	r3, [pc, #768]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	2203      	movs	r2, #3
 80036fe:	4013      	ands	r3, r2
 8003700:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	2b10      	cmp	r3, #16
 8003706:	d102      	bne.n	800370e <HAL_RCC_OscConfig+0x3e>
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2b03      	cmp	r3, #3
 800370c:	d002      	beq.n	8003714 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	2b08      	cmp	r3, #8
 8003712:	d10b      	bne.n	800372c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003714:	4bb9      	ldr	r3, [pc, #740]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	2380      	movs	r3, #128	@ 0x80
 800371a:	029b      	lsls	r3, r3, #10
 800371c:	4013      	ands	r3, r2
 800371e:	d062      	beq.n	80037e6 <HAL_RCC_OscConfig+0x116>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d15e      	bne.n	80037e6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e2d9      	b.n	8003ce0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	2380      	movs	r3, #128	@ 0x80
 8003732:	025b      	lsls	r3, r3, #9
 8003734:	429a      	cmp	r2, r3
 8003736:	d107      	bne.n	8003748 <HAL_RCC_OscConfig+0x78>
 8003738:	4bb0      	ldr	r3, [pc, #704]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	4baf      	ldr	r3, [pc, #700]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 800373e:	2180      	movs	r1, #128	@ 0x80
 8003740:	0249      	lsls	r1, r1, #9
 8003742:	430a      	orrs	r2, r1
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	e020      	b.n	800378a <HAL_RCC_OscConfig+0xba>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	23a0      	movs	r3, #160	@ 0xa0
 800374e:	02db      	lsls	r3, r3, #11
 8003750:	429a      	cmp	r2, r3
 8003752:	d10e      	bne.n	8003772 <HAL_RCC_OscConfig+0xa2>
 8003754:	4ba9      	ldr	r3, [pc, #676]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4ba8      	ldr	r3, [pc, #672]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 800375a:	2180      	movs	r1, #128	@ 0x80
 800375c:	02c9      	lsls	r1, r1, #11
 800375e:	430a      	orrs	r2, r1
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	4ba6      	ldr	r3, [pc, #664]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4ba5      	ldr	r3, [pc, #660]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 8003768:	2180      	movs	r1, #128	@ 0x80
 800376a:	0249      	lsls	r1, r1, #9
 800376c:	430a      	orrs	r2, r1
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	e00b      	b.n	800378a <HAL_RCC_OscConfig+0xba>
 8003772:	4ba2      	ldr	r3, [pc, #648]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	4ba1      	ldr	r3, [pc, #644]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 8003778:	49a1      	ldr	r1, [pc, #644]	@ (8003a00 <HAL_RCC_OscConfig+0x330>)
 800377a:	400a      	ands	r2, r1
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	4b9f      	ldr	r3, [pc, #636]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4b9e      	ldr	r3, [pc, #632]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 8003784:	499f      	ldr	r1, [pc, #636]	@ (8003a04 <HAL_RCC_OscConfig+0x334>)
 8003786:	400a      	ands	r2, r1
 8003788:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d014      	beq.n	80037bc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003792:	f7fe fe25 	bl	80023e0 <HAL_GetTick>
 8003796:	0003      	movs	r3, r0
 8003798:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800379c:	f7fe fe20 	bl	80023e0 <HAL_GetTick>
 80037a0:	0002      	movs	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b64      	cmp	r3, #100	@ 0x64
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e298      	b.n	8003ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ae:	4b93      	ldr	r3, [pc, #588]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	2380      	movs	r3, #128	@ 0x80
 80037b4:	029b      	lsls	r3, r3, #10
 80037b6:	4013      	ands	r3, r2
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0xcc>
 80037ba:	e015      	b.n	80037e8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037bc:	f7fe fe10 	bl	80023e0 <HAL_GetTick>
 80037c0:	0003      	movs	r3, r0
 80037c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c6:	f7fe fe0b 	bl	80023e0 <HAL_GetTick>
 80037ca:	0002      	movs	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b64      	cmp	r3, #100	@ 0x64
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e283      	b.n	8003ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037d8:	4b88      	ldr	r3, [pc, #544]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	2380      	movs	r3, #128	@ 0x80
 80037de:	029b      	lsls	r3, r3, #10
 80037e0:	4013      	ands	r3, r2
 80037e2:	d1f0      	bne.n	80037c6 <HAL_RCC_OscConfig+0xf6>
 80037e4:	e000      	b.n	80037e8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2202      	movs	r2, #2
 80037ee:	4013      	ands	r3, r2
 80037f0:	d100      	bne.n	80037f4 <HAL_RCC_OscConfig+0x124>
 80037f2:	e099      	b.n	8003928 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037f4:	4b81      	ldr	r3, [pc, #516]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2238      	movs	r2, #56	@ 0x38
 80037fa:	4013      	ands	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037fe:	4b7f      	ldr	r3, [pc, #508]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	2203      	movs	r2, #3
 8003804:	4013      	ands	r3, r2
 8003806:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	2b10      	cmp	r3, #16
 800380c:	d102      	bne.n	8003814 <HAL_RCC_OscConfig+0x144>
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d002      	beq.n	800381a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d135      	bne.n	8003886 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800381a:	4b78      	ldr	r3, [pc, #480]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	2380      	movs	r3, #128	@ 0x80
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4013      	ands	r3, r2
 8003824:	d005      	beq.n	8003832 <HAL_RCC_OscConfig+0x162>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e256      	b.n	8003ce0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003832:	4b72      	ldr	r3, [pc, #456]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4a74      	ldr	r2, [pc, #464]	@ (8003a08 <HAL_RCC_OscConfig+0x338>)
 8003838:	4013      	ands	r3, r2
 800383a:	0019      	movs	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	021a      	lsls	r2, r3, #8
 8003842:	4b6e      	ldr	r3, [pc, #440]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d112      	bne.n	8003874 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800384e:	4b6b      	ldr	r3, [pc, #428]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a6e      	ldr	r2, [pc, #440]	@ (8003a0c <HAL_RCC_OscConfig+0x33c>)
 8003854:	4013      	ands	r3, r2
 8003856:	0019      	movs	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	4b67      	ldr	r3, [pc, #412]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 800385e:	430a      	orrs	r2, r1
 8003860:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003862:	4b66      	ldr	r3, [pc, #408]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	0adb      	lsrs	r3, r3, #11
 8003868:	2207      	movs	r2, #7
 800386a:	4013      	ands	r3, r2
 800386c:	4a68      	ldr	r2, [pc, #416]	@ (8003a10 <HAL_RCC_OscConfig+0x340>)
 800386e:	40da      	lsrs	r2, r3
 8003870:	4b68      	ldr	r3, [pc, #416]	@ (8003a14 <HAL_RCC_OscConfig+0x344>)
 8003872:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003874:	4b68      	ldr	r3, [pc, #416]	@ (8003a18 <HAL_RCC_OscConfig+0x348>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	0018      	movs	r0, r3
 800387a:	f7fe fd55 	bl	8002328 <HAL_InitTick>
 800387e:	1e03      	subs	r3, r0, #0
 8003880:	d051      	beq.n	8003926 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e22c      	b.n	8003ce0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d030      	beq.n	80038f0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800388e:	4b5b      	ldr	r3, [pc, #364]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a5e      	ldr	r2, [pc, #376]	@ (8003a0c <HAL_RCC_OscConfig+0x33c>)
 8003894:	4013      	ands	r3, r2
 8003896:	0019      	movs	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	4b57      	ldr	r3, [pc, #348]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 800389e:	430a      	orrs	r2, r1
 80038a0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80038a2:	4b56      	ldr	r3, [pc, #344]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	4b55      	ldr	r3, [pc, #340]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 80038a8:	2180      	movs	r1, #128	@ 0x80
 80038aa:	0049      	lsls	r1, r1, #1
 80038ac:	430a      	orrs	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fe fd96 	bl	80023e0 <HAL_GetTick>
 80038b4:	0003      	movs	r3, r0
 80038b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ba:	f7fe fd91 	bl	80023e0 <HAL_GetTick>
 80038be:	0002      	movs	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e209      	b.n	8003ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038cc:	4b4b      	ldr	r3, [pc, #300]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	2380      	movs	r3, #128	@ 0x80
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4013      	ands	r3, r2
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d8:	4b48      	ldr	r3, [pc, #288]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003a08 <HAL_RCC_OscConfig+0x338>)
 80038de:	4013      	ands	r3, r2
 80038e0:	0019      	movs	r1, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	021a      	lsls	r2, r3, #8
 80038e8:	4b44      	ldr	r3, [pc, #272]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	e01b      	b.n	8003928 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80038f0:	4b42      	ldr	r3, [pc, #264]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4b41      	ldr	r3, [pc, #260]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 80038f6:	4949      	ldr	r1, [pc, #292]	@ (8003a1c <HAL_RCC_OscConfig+0x34c>)
 80038f8:	400a      	ands	r2, r1
 80038fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fe fd70 	bl	80023e0 <HAL_GetTick>
 8003900:	0003      	movs	r3, r0
 8003902:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003906:	f7fe fd6b 	bl	80023e0 <HAL_GetTick>
 800390a:	0002      	movs	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e1e3      	b.n	8003ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003918:	4b38      	ldr	r3, [pc, #224]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	2380      	movs	r3, #128	@ 0x80
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4013      	ands	r3, r2
 8003922:	d1f0      	bne.n	8003906 <HAL_RCC_OscConfig+0x236>
 8003924:	e000      	b.n	8003928 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003926:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2208      	movs	r2, #8
 800392e:	4013      	ands	r3, r2
 8003930:	d047      	beq.n	80039c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003932:	4b32      	ldr	r3, [pc, #200]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2238      	movs	r2, #56	@ 0x38
 8003938:	4013      	ands	r3, r2
 800393a:	2b18      	cmp	r3, #24
 800393c:	d10a      	bne.n	8003954 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800393e:	4b2f      	ldr	r3, [pc, #188]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 8003940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003942:	2202      	movs	r2, #2
 8003944:	4013      	ands	r3, r2
 8003946:	d03c      	beq.n	80039c2 <HAL_RCC_OscConfig+0x2f2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d138      	bne.n	80039c2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e1c5      	b.n	8003ce0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d019      	beq.n	8003990 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800395c:	4b27      	ldr	r3, [pc, #156]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 800395e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003960:	4b26      	ldr	r3, [pc, #152]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 8003962:	2101      	movs	r1, #1
 8003964:	430a      	orrs	r2, r1
 8003966:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fe fd3a 	bl	80023e0 <HAL_GetTick>
 800396c:	0003      	movs	r3, r0
 800396e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003972:	f7fe fd35 	bl	80023e0 <HAL_GetTick>
 8003976:	0002      	movs	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e1ad      	b.n	8003ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003984:	4b1d      	ldr	r3, [pc, #116]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 8003986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003988:	2202      	movs	r2, #2
 800398a:	4013      	ands	r3, r2
 800398c:	d0f1      	beq.n	8003972 <HAL_RCC_OscConfig+0x2a2>
 800398e:	e018      	b.n	80039c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003990:	4b1a      	ldr	r3, [pc, #104]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 8003992:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003994:	4b19      	ldr	r3, [pc, #100]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 8003996:	2101      	movs	r1, #1
 8003998:	438a      	bics	r2, r1
 800399a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fe fd20 	bl	80023e0 <HAL_GetTick>
 80039a0:	0003      	movs	r3, r0
 80039a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039a6:	f7fe fd1b 	bl	80023e0 <HAL_GetTick>
 80039aa:	0002      	movs	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e193      	b.n	8003ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039b8:	4b10      	ldr	r3, [pc, #64]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 80039ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039bc:	2202      	movs	r2, #2
 80039be:	4013      	ands	r3, r2
 80039c0:	d1f1      	bne.n	80039a6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2204      	movs	r2, #4
 80039c8:	4013      	ands	r3, r2
 80039ca:	d100      	bne.n	80039ce <HAL_RCC_OscConfig+0x2fe>
 80039cc:	e0c6      	b.n	8003b5c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ce:	231f      	movs	r3, #31
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80039d6:	4b09      	ldr	r3, [pc, #36]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2238      	movs	r2, #56	@ 0x38
 80039dc:	4013      	ands	r3, r2
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d11e      	bne.n	8003a20 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80039e2:	4b06      	ldr	r3, [pc, #24]	@ (80039fc <HAL_RCC_OscConfig+0x32c>)
 80039e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e6:	2202      	movs	r2, #2
 80039e8:	4013      	ands	r3, r2
 80039ea:	d100      	bne.n	80039ee <HAL_RCC_OscConfig+0x31e>
 80039ec:	e0b6      	b.n	8003b5c <HAL_RCC_OscConfig+0x48c>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d000      	beq.n	80039f8 <HAL_RCC_OscConfig+0x328>
 80039f6:	e0b1      	b.n	8003b5c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e171      	b.n	8003ce0 <HAL_RCC_OscConfig+0x610>
 80039fc:	40021000 	.word	0x40021000
 8003a00:	fffeffff 	.word	0xfffeffff
 8003a04:	fffbffff 	.word	0xfffbffff
 8003a08:	ffff80ff 	.word	0xffff80ff
 8003a0c:	ffffc7ff 	.word	0xffffc7ff
 8003a10:	00f42400 	.word	0x00f42400
 8003a14:	20000068 	.word	0x20000068
 8003a18:	2000006c 	.word	0x2000006c
 8003a1c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a20:	4bb1      	ldr	r3, [pc, #708]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003a22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a24:	2380      	movs	r3, #128	@ 0x80
 8003a26:	055b      	lsls	r3, r3, #21
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_OscConfig+0x360>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <HAL_RCC_OscConfig+0x362>
 8003a30:	2300      	movs	r3, #0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d011      	beq.n	8003a5a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003a36:	4bac      	ldr	r3, [pc, #688]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003a38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a3a:	4bab      	ldr	r3, [pc, #684]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003a3c:	2180      	movs	r1, #128	@ 0x80
 8003a3e:	0549      	lsls	r1, r1, #21
 8003a40:	430a      	orrs	r2, r1
 8003a42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003a44:	4ba8      	ldr	r3, [pc, #672]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a48:	2380      	movs	r3, #128	@ 0x80
 8003a4a:	055b      	lsls	r3, r3, #21
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003a52:	231f      	movs	r3, #31
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a5a:	4ba4      	ldr	r3, [pc, #656]	@ (8003cec <HAL_RCC_OscConfig+0x61c>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	2380      	movs	r3, #128	@ 0x80
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	4013      	ands	r3, r2
 8003a64:	d11a      	bne.n	8003a9c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a66:	4ba1      	ldr	r3, [pc, #644]	@ (8003cec <HAL_RCC_OscConfig+0x61c>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4ba0      	ldr	r3, [pc, #640]	@ (8003cec <HAL_RCC_OscConfig+0x61c>)
 8003a6c:	2180      	movs	r1, #128	@ 0x80
 8003a6e:	0049      	lsls	r1, r1, #1
 8003a70:	430a      	orrs	r2, r1
 8003a72:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003a74:	f7fe fcb4 	bl	80023e0 <HAL_GetTick>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7e:	f7fe fcaf 	bl	80023e0 <HAL_GetTick>
 8003a82:	0002      	movs	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e127      	b.n	8003ce0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a90:	4b96      	ldr	r3, [pc, #600]	@ (8003cec <HAL_RCC_OscConfig+0x61c>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	2380      	movs	r3, #128	@ 0x80
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	4013      	ands	r3, r2
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d106      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x3e2>
 8003aa4:	4b90      	ldr	r3, [pc, #576]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003aa6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003aa8:	4b8f      	ldr	r3, [pc, #572]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003aaa:	2101      	movs	r1, #1
 8003aac:	430a      	orrs	r2, r1
 8003aae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ab0:	e01c      	b.n	8003aec <HAL_RCC_OscConfig+0x41c>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	2b05      	cmp	r3, #5
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x404>
 8003aba:	4b8b      	ldr	r3, [pc, #556]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003abc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003abe:	4b8a      	ldr	r3, [pc, #552]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003ac0:	2104      	movs	r1, #4
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ac6:	4b88      	ldr	r3, [pc, #544]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003ac8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003aca:	4b87      	ldr	r3, [pc, #540]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003acc:	2101      	movs	r1, #1
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ad2:	e00b      	b.n	8003aec <HAL_RCC_OscConfig+0x41c>
 8003ad4:	4b84      	ldr	r3, [pc, #528]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003ad6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ad8:	4b83      	ldr	r3, [pc, #524]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003ada:	2101      	movs	r1, #1
 8003adc:	438a      	bics	r2, r1
 8003ade:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ae0:	4b81      	ldr	r3, [pc, #516]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003ae2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ae4:	4b80      	ldr	r3, [pc, #512]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003ae6:	2104      	movs	r1, #4
 8003ae8:	438a      	bics	r2, r1
 8003aea:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d014      	beq.n	8003b1e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af4:	f7fe fc74 	bl	80023e0 <HAL_GetTick>
 8003af8:	0003      	movs	r3, r0
 8003afa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003afc:	e009      	b.n	8003b12 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afe:	f7fe fc6f 	bl	80023e0 <HAL_GetTick>
 8003b02:	0002      	movs	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	4a79      	ldr	r2, [pc, #484]	@ (8003cf0 <HAL_RCC_OscConfig+0x620>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e0e6      	b.n	8003ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b12:	4b75      	ldr	r3, [pc, #468]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b16:	2202      	movs	r2, #2
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x42e>
 8003b1c:	e013      	b.n	8003b46 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1e:	f7fe fc5f 	bl	80023e0 <HAL_GetTick>
 8003b22:	0003      	movs	r3, r0
 8003b24:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b26:	e009      	b.n	8003b3c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b28:	f7fe fc5a 	bl	80023e0 <HAL_GetTick>
 8003b2c:	0002      	movs	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	4a6f      	ldr	r2, [pc, #444]	@ (8003cf0 <HAL_RCC_OscConfig+0x620>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e0d1      	b.n	8003ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b3c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b40:	2202      	movs	r2, #2
 8003b42:	4013      	ands	r3, r2
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003b46:	231f      	movs	r3, #31
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d105      	bne.n	8003b5c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003b50:	4b65      	ldr	r3, [pc, #404]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003b52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b54:	4b64      	ldr	r3, [pc, #400]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003b56:	4967      	ldr	r1, [pc, #412]	@ (8003cf4 <HAL_RCC_OscConfig+0x624>)
 8003b58:	400a      	ands	r2, r1
 8003b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d100      	bne.n	8003b66 <HAL_RCC_OscConfig+0x496>
 8003b64:	e0bb      	b.n	8003cde <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b66:	4b60      	ldr	r3, [pc, #384]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2238      	movs	r2, #56	@ 0x38
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b10      	cmp	r3, #16
 8003b70:	d100      	bne.n	8003b74 <HAL_RCC_OscConfig+0x4a4>
 8003b72:	e07b      	b.n	8003c6c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d156      	bne.n	8003c2a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7c:	4b5a      	ldr	r3, [pc, #360]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4b59      	ldr	r3, [pc, #356]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003b82:	495d      	ldr	r1, [pc, #372]	@ (8003cf8 <HAL_RCC_OscConfig+0x628>)
 8003b84:	400a      	ands	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fe fc2a 	bl	80023e0 <HAL_GetTick>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b92:	f7fe fc25 	bl	80023e0 <HAL_GetTick>
 8003b96:	0002      	movs	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e09d      	b.n	8003ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ba4:	4b50      	ldr	r3, [pc, #320]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	2380      	movs	r3, #128	@ 0x80
 8003baa:	049b      	lsls	r3, r3, #18
 8003bac:	4013      	ands	r3, r2
 8003bae:	d1f0      	bne.n	8003b92 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bb0:	4b4d      	ldr	r3, [pc, #308]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4a51      	ldr	r2, [pc, #324]	@ (8003cfc <HAL_RCC_OscConfig+0x62c>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	0019      	movs	r1, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1a      	ldr	r2, [r3, #32]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc8:	021b      	lsls	r3, r3, #8
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	4b42      	ldr	r3, [pc, #264]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003be0:	430a      	orrs	r2, r1
 8003be2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be4:	4b40      	ldr	r3, [pc, #256]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003bea:	2180      	movs	r1, #128	@ 0x80
 8003bec:	0449      	lsls	r1, r1, #17
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003bf2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	4b3c      	ldr	r3, [pc, #240]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003bf8:	2180      	movs	r1, #128	@ 0x80
 8003bfa:	0549      	lsls	r1, r1, #21
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fe fbee 	bl	80023e0 <HAL_GetTick>
 8003c04:	0003      	movs	r3, r0
 8003c06:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0a:	f7fe fbe9 	bl	80023e0 <HAL_GetTick>
 8003c0e:	0002      	movs	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e061      	b.n	8003ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1c:	4b32      	ldr	r3, [pc, #200]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	2380      	movs	r3, #128	@ 0x80
 8003c22:	049b      	lsls	r3, r3, #18
 8003c24:	4013      	ands	r3, r2
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x53a>
 8003c28:	e059      	b.n	8003cde <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003c30:	4931      	ldr	r1, [pc, #196]	@ (8003cf8 <HAL_RCC_OscConfig+0x628>)
 8003c32:	400a      	ands	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c36:	f7fe fbd3 	bl	80023e0 <HAL_GetTick>
 8003c3a:	0003      	movs	r3, r0
 8003c3c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c40:	f7fe fbce 	bl	80023e0 <HAL_GetTick>
 8003c44:	0002      	movs	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e046      	b.n	8003ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c52:	4b25      	ldr	r3, [pc, #148]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	2380      	movs	r3, #128	@ 0x80
 8003c58:	049b      	lsls	r3, r3, #18
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003c5e:	4b22      	ldr	r3, [pc, #136]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	4b21      	ldr	r3, [pc, #132]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003c64:	4926      	ldr	r1, [pc, #152]	@ (8003d00 <HAL_RCC_OscConfig+0x630>)
 8003c66:	400a      	ands	r2, r1
 8003c68:	60da      	str	r2, [r3, #12]
 8003c6a:	e038      	b.n	8003cde <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e033      	b.n	8003ce0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003c78:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce8 <HAL_RCC_OscConfig+0x618>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2203      	movs	r2, #3
 8003c82:	401a      	ands	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d126      	bne.n	8003cda <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2270      	movs	r2, #112	@ 0x70
 8003c90:	401a      	ands	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d11f      	bne.n	8003cda <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	23fe      	movs	r3, #254	@ 0xfe
 8003c9e:	01db      	lsls	r3, r3, #7
 8003ca0:	401a      	ands	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d116      	bne.n	8003cda <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	23f8      	movs	r3, #248	@ 0xf8
 8003cb0:	039b      	lsls	r3, r3, #14
 8003cb2:	401a      	ands	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d10e      	bne.n	8003cda <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	23e0      	movs	r3, #224	@ 0xe0
 8003cc0:	051b      	lsls	r3, r3, #20
 8003cc2:	401a      	ands	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d106      	bne.n	8003cda <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	0f5b      	lsrs	r3, r3, #29
 8003cd0:	075a      	lsls	r2, r3, #29
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d001      	beq.n	8003cde <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	b008      	add	sp, #32
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40007000 	.word	0x40007000
 8003cf0:	00001388 	.word	0x00001388
 8003cf4:	efffffff 	.word	0xefffffff
 8003cf8:	feffffff 	.word	0xfeffffff
 8003cfc:	11c1808c 	.word	0x11c1808c
 8003d00:	eefefffc 	.word	0xeefefffc

08003d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0e9      	b.n	8003eec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d18:	4b76      	ldr	r3, [pc, #472]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2207      	movs	r2, #7
 8003d1e:	4013      	ands	r3, r2
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d91e      	bls.n	8003d64 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d26:	4b73      	ldr	r3, [pc, #460]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2207      	movs	r2, #7
 8003d2c:	4393      	bics	r3, r2
 8003d2e:	0019      	movs	r1, r3
 8003d30:	4b70      	ldr	r3, [pc, #448]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d38:	f7fe fb52 	bl	80023e0 <HAL_GetTick>
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d40:	e009      	b.n	8003d56 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d42:	f7fe fb4d 	bl	80023e0 <HAL_GetTick>
 8003d46:	0002      	movs	r2, r0
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	4a6a      	ldr	r2, [pc, #424]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1f4>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e0ca      	b.n	8003eec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d56:	4b67      	ldr	r3, [pc, #412]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2207      	movs	r2, #7
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d1ee      	bne.n	8003d42 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d015      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2204      	movs	r2, #4
 8003d74:	4013      	ands	r3, r2
 8003d76:	d006      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003d78:	4b60      	ldr	r3, [pc, #384]	@ (8003efc <HAL_RCC_ClockConfig+0x1f8>)
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	4b5f      	ldr	r3, [pc, #380]	@ (8003efc <HAL_RCC_ClockConfig+0x1f8>)
 8003d7e:	21e0      	movs	r1, #224	@ 0xe0
 8003d80:	01c9      	lsls	r1, r1, #7
 8003d82:	430a      	orrs	r2, r1
 8003d84:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d86:	4b5d      	ldr	r3, [pc, #372]	@ (8003efc <HAL_RCC_ClockConfig+0x1f8>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	4a5d      	ldr	r2, [pc, #372]	@ (8003f00 <HAL_RCC_ClockConfig+0x1fc>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	0019      	movs	r1, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	4b59      	ldr	r3, [pc, #356]	@ (8003efc <HAL_RCC_ClockConfig+0x1f8>)
 8003d96:	430a      	orrs	r2, r1
 8003d98:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	4013      	ands	r3, r2
 8003da2:	d057      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d107      	bne.n	8003dbc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dac:	4b53      	ldr	r3, [pc, #332]	@ (8003efc <HAL_RCC_ClockConfig+0x1f8>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	2380      	movs	r3, #128	@ 0x80
 8003db2:	029b      	lsls	r3, r3, #10
 8003db4:	4013      	ands	r3, r2
 8003db6:	d12b      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e097      	b.n	8003eec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d107      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8003efc <HAL_RCC_ClockConfig+0x1f8>)
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	2380      	movs	r3, #128	@ 0x80
 8003dca:	049b      	lsls	r3, r3, #18
 8003dcc:	4013      	ands	r3, r2
 8003dce:	d11f      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e08b      	b.n	8003eec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d107      	bne.n	8003dec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ddc:	4b47      	ldr	r3, [pc, #284]	@ (8003efc <HAL_RCC_ClockConfig+0x1f8>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	2380      	movs	r3, #128	@ 0x80
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4013      	ands	r3, r2
 8003de6:	d113      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e07f      	b.n	8003eec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d106      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003df4:	4b41      	ldr	r3, [pc, #260]	@ (8003efc <HAL_RCC_ClockConfig+0x1f8>)
 8003df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df8:	2202      	movs	r2, #2
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d108      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e074      	b.n	8003eec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e02:	4b3e      	ldr	r3, [pc, #248]	@ (8003efc <HAL_RCC_ClockConfig+0x1f8>)
 8003e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e06:	2202      	movs	r2, #2
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d101      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e06d      	b.n	8003eec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e10:	4b3a      	ldr	r3, [pc, #232]	@ (8003efc <HAL_RCC_ClockConfig+0x1f8>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	2207      	movs	r2, #7
 8003e16:	4393      	bics	r3, r2
 8003e18:	0019      	movs	r1, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	4b37      	ldr	r3, [pc, #220]	@ (8003efc <HAL_RCC_ClockConfig+0x1f8>)
 8003e20:	430a      	orrs	r2, r1
 8003e22:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e24:	f7fe fadc 	bl	80023e0 <HAL_GetTick>
 8003e28:	0003      	movs	r3, r0
 8003e2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2c:	e009      	b.n	8003e42 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e2e:	f7fe fad7 	bl	80023e0 <HAL_GetTick>
 8003e32:	0002      	movs	r2, r0
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	4a2f      	ldr	r2, [pc, #188]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1f4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e054      	b.n	8003eec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e42:	4b2e      	ldr	r3, [pc, #184]	@ (8003efc <HAL_RCC_ClockConfig+0x1f8>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	2238      	movs	r2, #56	@ 0x38
 8003e48:	401a      	ands	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d1ec      	bne.n	8003e2e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e54:	4b27      	ldr	r3, [pc, #156]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2207      	movs	r2, #7
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d21e      	bcs.n	8003ea0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e62:	4b24      	ldr	r3, [pc, #144]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2207      	movs	r2, #7
 8003e68:	4393      	bics	r3, r2
 8003e6a:	0019      	movs	r1, r3
 8003e6c:	4b21      	ldr	r3, [pc, #132]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e74:	f7fe fab4 	bl	80023e0 <HAL_GetTick>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e7c:	e009      	b.n	8003e92 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e7e:	f7fe faaf 	bl	80023e0 <HAL_GetTick>
 8003e82:	0002      	movs	r2, r0
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	4a1b      	ldr	r2, [pc, #108]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1f4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e02c      	b.n	8003eec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e92:	4b18      	ldr	r3, [pc, #96]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2207      	movs	r2, #7
 8003e98:	4013      	ands	r3, r2
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d1ee      	bne.n	8003e7e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2204      	movs	r2, #4
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	d009      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003eaa:	4b14      	ldr	r3, [pc, #80]	@ (8003efc <HAL_RCC_ClockConfig+0x1f8>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	4a15      	ldr	r2, [pc, #84]	@ (8003f04 <HAL_RCC_ClockConfig+0x200>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	4b10      	ldr	r3, [pc, #64]	@ (8003efc <HAL_RCC_ClockConfig+0x1f8>)
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003ebe:	f000 f829 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 8003ec2:	0001      	movs	r1, r0
 8003ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8003efc <HAL_RCC_ClockConfig+0x1f8>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	0a1b      	lsrs	r3, r3, #8
 8003eca:	220f      	movs	r2, #15
 8003ecc:	401a      	ands	r2, r3
 8003ece:	4b0e      	ldr	r3, [pc, #56]	@ (8003f08 <HAL_RCC_ClockConfig+0x204>)
 8003ed0:	0092      	lsls	r2, r2, #2
 8003ed2:	58d3      	ldr	r3, [r2, r3]
 8003ed4:	221f      	movs	r2, #31
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	000a      	movs	r2, r1
 8003eda:	40da      	lsrs	r2, r3
 8003edc:	4b0b      	ldr	r3, [pc, #44]	@ (8003f0c <HAL_RCC_ClockConfig+0x208>)
 8003ede:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f10 <HAL_RCC_ClockConfig+0x20c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f7fe fa1f 	bl	8002328 <HAL_InitTick>
 8003eea:	0003      	movs	r3, r0
}
 8003eec:	0018      	movs	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b004      	add	sp, #16
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40022000 	.word	0x40022000
 8003ef8:	00001388 	.word	0x00001388
 8003efc:	40021000 	.word	0x40021000
 8003f00:	fffff0ff 	.word	0xfffff0ff
 8003f04:	ffff8fff 	.word	0xffff8fff
 8003f08:	080062e0 	.word	0x080062e0
 8003f0c:	20000068 	.word	0x20000068
 8003f10:	2000006c 	.word	0x2000006c

08003f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f1a:	4b3c      	ldr	r3, [pc, #240]	@ (800400c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2238      	movs	r2, #56	@ 0x38
 8003f20:	4013      	ands	r3, r2
 8003f22:	d10f      	bne.n	8003f44 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003f24:	4b39      	ldr	r3, [pc, #228]	@ (800400c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	0adb      	lsrs	r3, r3, #11
 8003f2a:	2207      	movs	r2, #7
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2201      	movs	r2, #1
 8003f30:	409a      	lsls	r2, r3
 8003f32:	0013      	movs	r3, r2
 8003f34:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003f36:	6839      	ldr	r1, [r7, #0]
 8003f38:	4835      	ldr	r0, [pc, #212]	@ (8004010 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003f3a:	f7fc f8e3 	bl	8000104 <__udivsi3>
 8003f3e:	0003      	movs	r3, r0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	e05d      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f44:	4b31      	ldr	r3, [pc, #196]	@ (800400c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2238      	movs	r2, #56	@ 0x38
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d102      	bne.n	8003f56 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f50:	4b30      	ldr	r3, [pc, #192]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x100>)
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	e054      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f56:	4b2d      	ldr	r3, [pc, #180]	@ (800400c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2238      	movs	r2, #56	@ 0x38
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	2b10      	cmp	r3, #16
 8003f60:	d138      	bne.n	8003fd4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003f62:	4b2a      	ldr	r3, [pc, #168]	@ (800400c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	2203      	movs	r2, #3
 8003f68:	4013      	ands	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f6c:	4b27      	ldr	r3, [pc, #156]	@ (800400c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	091b      	lsrs	r3, r3, #4
 8003f72:	2207      	movs	r2, #7
 8003f74:	4013      	ands	r3, r2
 8003f76:	3301      	adds	r3, #1
 8003f78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d10d      	bne.n	8003f9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	4824      	ldr	r0, [pc, #144]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x100>)
 8003f84:	f7fc f8be 	bl	8000104 <__udivsi3>
 8003f88:	0003      	movs	r3, r0
 8003f8a:	0019      	movs	r1, r3
 8003f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800400c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	0a1b      	lsrs	r3, r3, #8
 8003f92:	227f      	movs	r2, #127	@ 0x7f
 8003f94:	4013      	ands	r3, r2
 8003f96:	434b      	muls	r3, r1
 8003f98:	617b      	str	r3, [r7, #20]
        break;
 8003f9a:	e00d      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003f9c:	68b9      	ldr	r1, [r7, #8]
 8003f9e:	481c      	ldr	r0, [pc, #112]	@ (8004010 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003fa0:	f7fc f8b0 	bl	8000104 <__udivsi3>
 8003fa4:	0003      	movs	r3, r0
 8003fa6:	0019      	movs	r1, r3
 8003fa8:	4b18      	ldr	r3, [pc, #96]	@ (800400c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	0a1b      	lsrs	r3, r3, #8
 8003fae:	227f      	movs	r2, #127	@ 0x7f
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	434b      	muls	r3, r1
 8003fb4:	617b      	str	r3, [r7, #20]
        break;
 8003fb6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003fb8:	4b14      	ldr	r3, [pc, #80]	@ (800400c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	0f5b      	lsrs	r3, r3, #29
 8003fbe:	2207      	movs	r2, #7
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	6978      	ldr	r0, [r7, #20]
 8003fca:	f7fc f89b 	bl	8000104 <__udivsi3>
 8003fce:	0003      	movs	r3, r0
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	e015      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800400c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	2238      	movs	r2, #56	@ 0x38
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d103      	bne.n	8003fe8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003fe0:	2380      	movs	r3, #128	@ 0x80
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	e00b      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003fe8:	4b08      	ldr	r3, [pc, #32]	@ (800400c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2238      	movs	r2, #56	@ 0x38
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b18      	cmp	r3, #24
 8003ff2:	d103      	bne.n	8003ffc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003ff4:	23fa      	movs	r3, #250	@ 0xfa
 8003ff6:	01db      	lsls	r3, r3, #7
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	e001      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004000:	693b      	ldr	r3, [r7, #16]
}
 8004002:	0018      	movs	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	b006      	add	sp, #24
 8004008:	bd80      	pop	{r7, pc}
 800400a:	46c0      	nop			@ (mov r8, r8)
 800400c:	40021000 	.word	0x40021000
 8004010:	00f42400 	.word	0x00f42400
 8004014:	007a1200 	.word	0x007a1200

08004018 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004020:	2313      	movs	r3, #19
 8004022:	18fb      	adds	r3, r7, r3
 8004024:	2200      	movs	r2, #0
 8004026:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004028:	2312      	movs	r3, #18
 800402a:	18fb      	adds	r3, r7, r3
 800402c:	2200      	movs	r2, #0
 800402e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	2380      	movs	r3, #128	@ 0x80
 8004036:	029b      	lsls	r3, r3, #10
 8004038:	4013      	ands	r3, r2
 800403a:	d100      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800403c:	e0a3      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800403e:	2011      	movs	r0, #17
 8004040:	183b      	adds	r3, r7, r0
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004046:	4ba5      	ldr	r3, [pc, #660]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004048:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800404a:	2380      	movs	r3, #128	@ 0x80
 800404c:	055b      	lsls	r3, r3, #21
 800404e:	4013      	ands	r3, r2
 8004050:	d110      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004052:	4ba2      	ldr	r3, [pc, #648]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004054:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004056:	4ba1      	ldr	r3, [pc, #644]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004058:	2180      	movs	r1, #128	@ 0x80
 800405a:	0549      	lsls	r1, r1, #21
 800405c:	430a      	orrs	r2, r1
 800405e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004060:	4b9e      	ldr	r3, [pc, #632]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004062:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004064:	2380      	movs	r3, #128	@ 0x80
 8004066:	055b      	lsls	r3, r3, #21
 8004068:	4013      	ands	r3, r2
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800406e:	183b      	adds	r3, r7, r0
 8004070:	2201      	movs	r2, #1
 8004072:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004074:	4b9a      	ldr	r3, [pc, #616]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4b99      	ldr	r3, [pc, #612]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800407a:	2180      	movs	r1, #128	@ 0x80
 800407c:	0049      	lsls	r1, r1, #1
 800407e:	430a      	orrs	r2, r1
 8004080:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004082:	f7fe f9ad 	bl	80023e0 <HAL_GetTick>
 8004086:	0003      	movs	r3, r0
 8004088:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800408a:	e00b      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408c:	f7fe f9a8 	bl	80023e0 <HAL_GetTick>
 8004090:	0002      	movs	r2, r0
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d904      	bls.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800409a:	2313      	movs	r3, #19
 800409c:	18fb      	adds	r3, r7, r3
 800409e:	2203      	movs	r2, #3
 80040a0:	701a      	strb	r2, [r3, #0]
        break;
 80040a2:	e005      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040a4:	4b8e      	ldr	r3, [pc, #568]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	2380      	movs	r3, #128	@ 0x80
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	4013      	ands	r3, r2
 80040ae:	d0ed      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80040b0:	2313      	movs	r3, #19
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d154      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040ba:	4b88      	ldr	r3, [pc, #544]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80040be:	23c0      	movs	r3, #192	@ 0xc0
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4013      	ands	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d019      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d014      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040d6:	4b81      	ldr	r3, [pc, #516]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040da:	4a82      	ldr	r2, [pc, #520]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80040dc:	4013      	ands	r3, r2
 80040de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040e0:	4b7e      	ldr	r3, [pc, #504]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80040e4:	4b7d      	ldr	r3, [pc, #500]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040e6:	2180      	movs	r1, #128	@ 0x80
 80040e8:	0249      	lsls	r1, r1, #9
 80040ea:	430a      	orrs	r2, r1
 80040ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040ee:	4b7b      	ldr	r3, [pc, #492]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80040f2:	4b7a      	ldr	r3, [pc, #488]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040f4:	497c      	ldr	r1, [pc, #496]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80040f6:	400a      	ands	r2, r1
 80040f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040fa:	4b78      	ldr	r3, [pc, #480]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2201      	movs	r2, #1
 8004104:	4013      	ands	r3, r2
 8004106:	d016      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fe f96a 	bl	80023e0 <HAL_GetTick>
 800410c:	0003      	movs	r3, r0
 800410e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004110:	e00c      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004112:	f7fe f965 	bl	80023e0 <HAL_GetTick>
 8004116:	0002      	movs	r2, r0
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	4a73      	ldr	r2, [pc, #460]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d904      	bls.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004122:	2313      	movs	r3, #19
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	2203      	movs	r2, #3
 8004128:	701a      	strb	r2, [r3, #0]
            break;
 800412a:	e004      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800412c:	4b6b      	ldr	r3, [pc, #428]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800412e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004130:	2202      	movs	r2, #2
 8004132:	4013      	ands	r3, r2
 8004134:	d0ed      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004136:	2313      	movs	r3, #19
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004140:	4b66      	ldr	r3, [pc, #408]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004144:	4a67      	ldr	r2, [pc, #412]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004146:	4013      	ands	r3, r2
 8004148:	0019      	movs	r1, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800414e:	4b63      	ldr	r3, [pc, #396]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004150:	430a      	orrs	r2, r1
 8004152:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004154:	e00c      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004156:	2312      	movs	r3, #18
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	2213      	movs	r2, #19
 800415c:	18ba      	adds	r2, r7, r2
 800415e:	7812      	ldrb	r2, [r2, #0]
 8004160:	701a      	strb	r2, [r3, #0]
 8004162:	e005      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004164:	2312      	movs	r3, #18
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	2213      	movs	r2, #19
 800416a:	18ba      	adds	r2, r7, r2
 800416c:	7812      	ldrb	r2, [r2, #0]
 800416e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004170:	2311      	movs	r3, #17
 8004172:	18fb      	adds	r3, r7, r3
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d105      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800417a:	4b58      	ldr	r3, [pc, #352]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800417c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800417e:	4b57      	ldr	r3, [pc, #348]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004180:	495b      	ldr	r1, [pc, #364]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004182:	400a      	ands	r2, r1
 8004184:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2201      	movs	r2, #1
 800418c:	4013      	ands	r3, r2
 800418e:	d009      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004190:	4b52      	ldr	r3, [pc, #328]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004194:	2203      	movs	r2, #3
 8004196:	4393      	bics	r3, r2
 8004198:	0019      	movs	r1, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	4b4f      	ldr	r3, [pc, #316]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041a0:	430a      	orrs	r2, r1
 80041a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2210      	movs	r2, #16
 80041aa:	4013      	ands	r3, r2
 80041ac:	d009      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041ae:	4b4b      	ldr	r3, [pc, #300]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b2:	4a50      	ldr	r2, [pc, #320]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	0019      	movs	r1, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	4b47      	ldr	r3, [pc, #284]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041be:	430a      	orrs	r2, r1
 80041c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	2380      	movs	r3, #128	@ 0x80
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4013      	ands	r3, r2
 80041cc:	d009      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ce:	4b43      	ldr	r3, [pc, #268]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d2:	4a49      	ldr	r2, [pc, #292]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	0019      	movs	r1, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	695a      	ldr	r2, [r3, #20]
 80041dc:	4b3f      	ldr	r3, [pc, #252]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041de:	430a      	orrs	r2, r1
 80041e0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	2380      	movs	r3, #128	@ 0x80
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4013      	ands	r3, r2
 80041ec:	d009      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041ee:	4b3b      	ldr	r3, [pc, #236]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f2:	4a42      	ldr	r2, [pc, #264]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	0019      	movs	r1, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699a      	ldr	r2, [r3, #24]
 80041fc:	4b37      	ldr	r3, [pc, #220]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041fe:	430a      	orrs	r2, r1
 8004200:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2220      	movs	r2, #32
 8004208:	4013      	ands	r3, r2
 800420a:	d009      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800420c:	4b33      	ldr	r3, [pc, #204]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800420e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004210:	4a3b      	ldr	r2, [pc, #236]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004212:	4013      	ands	r3, r2
 8004214:	0019      	movs	r1, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	4b30      	ldr	r3, [pc, #192]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800421c:	430a      	orrs	r2, r1
 800421e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	2380      	movs	r3, #128	@ 0x80
 8004226:	01db      	lsls	r3, r3, #7
 8004228:	4013      	ands	r3, r2
 800422a:	d015      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800422c:	4b2b      	ldr	r3, [pc, #172]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800422e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	0899      	lsrs	r1, r3, #2
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	4b28      	ldr	r3, [pc, #160]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800423a:	430a      	orrs	r2, r1
 800423c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69da      	ldr	r2, [r3, #28]
 8004242:	2380      	movs	r3, #128	@ 0x80
 8004244:	05db      	lsls	r3, r3, #23
 8004246:	429a      	cmp	r2, r3
 8004248:	d106      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800424a:	4b24      	ldr	r3, [pc, #144]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	4b23      	ldr	r3, [pc, #140]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004250:	2180      	movs	r1, #128	@ 0x80
 8004252:	0249      	lsls	r1, r1, #9
 8004254:	430a      	orrs	r2, r1
 8004256:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	2380      	movs	r3, #128	@ 0x80
 800425e:	039b      	lsls	r3, r3, #14
 8004260:	4013      	ands	r3, r2
 8004262:	d016      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004264:	4b1d      	ldr	r3, [pc, #116]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004268:	4a26      	ldr	r2, [pc, #152]	@ (8004304 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800426a:	4013      	ands	r3, r2
 800426c:	0019      	movs	r1, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1a      	ldr	r2, [r3, #32]
 8004272:	4b1a      	ldr	r3, [pc, #104]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004274:	430a      	orrs	r2, r1
 8004276:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a1a      	ldr	r2, [r3, #32]
 800427c:	2380      	movs	r3, #128	@ 0x80
 800427e:	03db      	lsls	r3, r3, #15
 8004280:	429a      	cmp	r2, r3
 8004282:	d106      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004284:	4b15      	ldr	r3, [pc, #84]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004286:	68da      	ldr	r2, [r3, #12]
 8004288:	4b14      	ldr	r3, [pc, #80]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800428a:	2180      	movs	r1, #128	@ 0x80
 800428c:	0449      	lsls	r1, r1, #17
 800428e:	430a      	orrs	r2, r1
 8004290:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	2380      	movs	r3, #128	@ 0x80
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	4013      	ands	r3, r2
 800429c:	d016      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800429e:	4b0f      	ldr	r3, [pc, #60]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a2:	4a19      	ldr	r2, [pc, #100]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	0019      	movs	r1, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042ae:	430a      	orrs	r2, r1
 80042b0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	2380      	movs	r3, #128	@ 0x80
 80042b8:	01db      	lsls	r3, r3, #7
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d106      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80042be:	4b07      	ldr	r3, [pc, #28]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	4b06      	ldr	r3, [pc, #24]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042c4:	2180      	movs	r1, #128	@ 0x80
 80042c6:	0249      	lsls	r1, r1, #9
 80042c8:	430a      	orrs	r2, r1
 80042ca:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80042cc:	2312      	movs	r3, #18
 80042ce:	18fb      	adds	r3, r7, r3
 80042d0:	781b      	ldrb	r3, [r3, #0]
}
 80042d2:	0018      	movs	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b006      	add	sp, #24
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	40021000 	.word	0x40021000
 80042e0:	40007000 	.word	0x40007000
 80042e4:	fffffcff 	.word	0xfffffcff
 80042e8:	fffeffff 	.word	0xfffeffff
 80042ec:	00001388 	.word	0x00001388
 80042f0:	efffffff 	.word	0xefffffff
 80042f4:	fffff3ff 	.word	0xfffff3ff
 80042f8:	fff3ffff 	.word	0xfff3ffff
 80042fc:	ffcfffff 	.word	0xffcfffff
 8004300:	ffffcfff 	.word	0xffffcfff
 8004304:	ffbfffff 	.word	0xffbfffff
 8004308:	ffff3fff 	.word	0xffff3fff

0800430c <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 800430c:	b590      	push	{r4, r7, lr}
 800430e:	b08b      	sub	sp, #44	@ 0x2c
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8004314:	2427      	movs	r4, #39	@ 0x27
 8004316:	193b      	adds	r3, r7, r4
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
  FlagStatus       backupchanged = RESET;
 800431c:	2326      	movs	r3, #38	@ 0x26
 800431e:	18fb      	adds	r3, r7, r3
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 8004324:	4b31      	ldr	r3, [pc, #196]	@ (80043ec <HAL_RCCEx_EnableLSCO+0xe0>)
 8004326:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004328:	4b30      	ldr	r3, [pc, #192]	@ (80043ec <HAL_RCCEx_EnableLSCO+0xe0>)
 800432a:	2101      	movs	r1, #1
 800432c:	430a      	orrs	r2, r1
 800432e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004330:	4b2e      	ldr	r3, [pc, #184]	@ (80043ec <HAL_RCCEx_EnableLSCO+0xe0>)
 8004332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004334:	2201      	movs	r2, #1
 8004336:	4013      	ands	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 800433c:	2110      	movs	r1, #16
 800433e:	187b      	adds	r3, r7, r1
 8004340:	2204      	movs	r2, #4
 8004342:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004344:	187b      	adds	r3, r7, r1
 8004346:	2203      	movs	r2, #3
 8004348:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800434a:	187b      	adds	r3, r7, r1
 800434c:	2203      	movs	r2, #3
 800434e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004350:	187b      	adds	r3, r7, r1
 8004352:	2200      	movs	r2, #0
 8004354:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 8004356:	187a      	adds	r2, r7, r1
 8004358:	23a0      	movs	r3, #160	@ 0xa0
 800435a:	05db      	lsls	r3, r3, #23
 800435c:	0011      	movs	r1, r2
 800435e:	0018      	movs	r0, r3
 8004360:	f7fe f926 	bl	80025b0 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004364:	4b21      	ldr	r3, [pc, #132]	@ (80043ec <HAL_RCCEx_EnableLSCO+0xe0>)
 8004366:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004368:	2380      	movs	r3, #128	@ 0x80
 800436a:	055b      	lsls	r3, r3, #21
 800436c:	4013      	ands	r3, r2
 800436e:	d110      	bne.n	8004392 <HAL_RCCEx_EnableLSCO+0x86>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004370:	4b1e      	ldr	r3, [pc, #120]	@ (80043ec <HAL_RCCEx_EnableLSCO+0xe0>)
 8004372:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004374:	4b1d      	ldr	r3, [pc, #116]	@ (80043ec <HAL_RCCEx_EnableLSCO+0xe0>)
 8004376:	2180      	movs	r1, #128	@ 0x80
 8004378:	0549      	lsls	r1, r1, #21
 800437a:	430a      	orrs	r2, r1
 800437c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800437e:	4b1b      	ldr	r3, [pc, #108]	@ (80043ec <HAL_RCCEx_EnableLSCO+0xe0>)
 8004380:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004382:	2380      	movs	r3, #128	@ 0x80
 8004384:	055b      	lsls	r3, r3, #21
 8004386:	4013      	ands	r3, r2
 8004388:	60bb      	str	r3, [r7, #8]
 800438a:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 800438c:	193b      	adds	r3, r7, r4
 800438e:	2201      	movs	r2, #1
 8004390:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004392:	4b17      	ldr	r3, [pc, #92]	@ (80043f0 <HAL_RCCEx_EnableLSCO+0xe4>)
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	2380      	movs	r3, #128	@ 0x80
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	4013      	ands	r3, r2
 800439c:	d105      	bne.n	80043aa <HAL_RCCEx_EnableLSCO+0x9e>
  {
    HAL_PWR_EnableBkUpAccess();
 800439e:	f7ff f939 	bl	8003614 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 80043a2:	2326      	movs	r3, #38	@ 0x26
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	2201      	movs	r2, #1
 80043a8:	701a      	strb	r2, [r3, #0]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 80043aa:	4b10      	ldr	r3, [pc, #64]	@ (80043ec <HAL_RCCEx_EnableLSCO+0xe0>)
 80043ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ae:	4a11      	ldr	r2, [pc, #68]	@ (80043f4 <HAL_RCCEx_EnableLSCO+0xe8>)
 80043b0:	401a      	ands	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	431a      	orrs	r2, r3
 80043b6:	4b0d      	ldr	r3, [pc, #52]	@ (80043ec <HAL_RCCEx_EnableLSCO+0xe0>)
 80043b8:	2180      	movs	r1, #128	@ 0x80
 80043ba:	0449      	lsls	r1, r1, #17
 80043bc:	430a      	orrs	r2, r1
 80043be:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (backupchanged == SET)
 80043c0:	2326      	movs	r3, #38	@ 0x26
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_RCCEx_EnableLSCO+0xc2>
  {
    HAL_PWR_DisableBkUpAccess();
 80043ca:	f7ff f931 	bl	8003630 <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 80043ce:	2327      	movs	r3, #39	@ 0x27
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d105      	bne.n	80043e4 <HAL_RCCEx_EnableLSCO+0xd8>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 80043d8:	4b04      	ldr	r3, [pc, #16]	@ (80043ec <HAL_RCCEx_EnableLSCO+0xe0>)
 80043da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043dc:	4b03      	ldr	r3, [pc, #12]	@ (80043ec <HAL_RCCEx_EnableLSCO+0xe0>)
 80043de:	4906      	ldr	r1, [pc, #24]	@ (80043f8 <HAL_RCCEx_EnableLSCO+0xec>)
 80043e0:	400a      	ands	r2, r1
 80043e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80043e4:	46c0      	nop			@ (mov r8, r8)
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b00b      	add	sp, #44	@ 0x2c
 80043ea:	bd90      	pop	{r4, r7, pc}
 80043ec:	40021000 	.word	0x40021000
 80043f0:	40007000 	.word	0x40007000
 80043f4:	fcffffff 	.word	0xfcffffff
 80043f8:	efffffff 	.word	0xefffffff

080043fc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043fc:	b5b0      	push	{r4, r5, r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004404:	230f      	movs	r3, #15
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	2201      	movs	r2, #1
 800440a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d100      	bne.n	8004414 <HAL_RTC_Init+0x18>
 8004412:	e08c      	b.n	800452e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2229      	movs	r2, #41	@ 0x29
 8004418:	5c9b      	ldrb	r3, [r3, r2]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10b      	bne.n	8004438 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2228      	movs	r2, #40	@ 0x28
 8004424:	2100      	movs	r1, #0
 8004426:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2288      	movs	r2, #136	@ 0x88
 800442c:	0212      	lsls	r2, r2, #8
 800442e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	0018      	movs	r0, r3
 8004434:	f7fd fdf4 	bl	8002020 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2229      	movs	r2, #41	@ 0x29
 800443c:	2102      	movs	r1, #2
 800443e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	2210      	movs	r2, #16
 8004448:	4013      	ands	r3, r2
 800444a:	2b10      	cmp	r3, #16
 800444c:	d062      	beq.n	8004514 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	22ca      	movs	r2, #202	@ 0xca
 8004454:	625a      	str	r2, [r3, #36]	@ 0x24
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2253      	movs	r2, #83	@ 0x53
 800445c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800445e:	250f      	movs	r5, #15
 8004460:	197c      	adds	r4, r7, r5
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	0018      	movs	r0, r3
 8004466:	f000 fcb9 	bl	8004ddc <RTC_EnterInitMode>
 800446a:	0003      	movs	r3, r0
 800446c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800446e:	0028      	movs	r0, r5
 8004470:	183b      	adds	r3, r7, r0
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d12c      	bne.n	80044d2 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699a      	ldr	r2, [r3, #24]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	492e      	ldr	r1, [pc, #184]	@ (800453c <HAL_RTC_Init+0x140>)
 8004484:	400a      	ands	r2, r1
 8004486:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6999      	ldr	r1, [r3, #24]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6912      	ldr	r2, [r2, #16]
 80044ae:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6919      	ldr	r1, [r3, #16]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	041a      	lsls	r2, r3, #16
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80044c4:	183c      	adds	r4, r7, r0
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	0018      	movs	r0, r3
 80044ca:	f000 fcc9 	bl	8004e60 <RTC_ExitInitMode>
 80044ce:	0003      	movs	r3, r0
 80044d0:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80044d2:	230f      	movs	r3, #15
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d116      	bne.n	800450a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699a      	ldr	r2, [r3, #24]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	00d2      	lsls	r2, r2, #3
 80044e8:	08d2      	lsrs	r2, r2, #3
 80044ea:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6999      	ldr	r1, [r3, #24]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	22ff      	movs	r2, #255	@ 0xff
 8004510:	625a      	str	r2, [r3, #36]	@ 0x24
 8004512:	e003      	b.n	800451c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004514:	230f      	movs	r3, #15
 8004516:	18fb      	adds	r3, r7, r3
 8004518:	2200      	movs	r2, #0
 800451a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800451c:	230f      	movs	r3, #15
 800451e:	18fb      	adds	r3, r7, r3
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d103      	bne.n	800452e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2229      	movs	r2, #41	@ 0x29
 800452a:	2101      	movs	r1, #1
 800452c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800452e:	230f      	movs	r3, #15
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	781b      	ldrb	r3, [r3, #0]
}
 8004534:	0018      	movs	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	b004      	add	sp, #16
 800453a:	bdb0      	pop	{r4, r5, r7, pc}
 800453c:	fb8fffbf 	.word	0xfb8fffbf

08004540 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004540:	b5b0      	push	{r4, r5, r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2228      	movs	r2, #40	@ 0x28
 8004550:	5c9b      	ldrb	r3, [r3, r2]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_RTC_SetTime+0x1a>
 8004556:	2302      	movs	r3, #2
 8004558:	e092      	b.n	8004680 <HAL_RTC_SetTime+0x140>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2228      	movs	r2, #40	@ 0x28
 800455e:	2101      	movs	r1, #1
 8004560:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2229      	movs	r2, #41	@ 0x29
 8004566:	2102      	movs	r1, #2
 8004568:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	22ca      	movs	r2, #202	@ 0xca
 8004570:	625a      	str	r2, [r3, #36]	@ 0x24
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2253      	movs	r2, #83	@ 0x53
 8004578:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800457a:	2513      	movs	r5, #19
 800457c:	197c      	adds	r4, r7, r5
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	0018      	movs	r0, r3
 8004582:	f000 fc2b 	bl	8004ddc <RTC_EnterInitMode>
 8004586:	0003      	movs	r3, r0
 8004588:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800458a:	197b      	adds	r3, r7, r5
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d162      	bne.n	8004658 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d125      	bne.n	80045e4 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2240      	movs	r2, #64	@ 0x40
 80045a0:	4013      	ands	r3, r2
 80045a2:	d102      	bne.n	80045aa <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2200      	movs	r2, #0
 80045a8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	0018      	movs	r0, r3
 80045b0:	f000 fc9a 	bl	8004ee8 <RTC_ByteToBcd2>
 80045b4:	0003      	movs	r3, r0
 80045b6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	785b      	ldrb	r3, [r3, #1]
 80045bc:	0018      	movs	r0, r3
 80045be:	f000 fc93 	bl	8004ee8 <RTC_ByteToBcd2>
 80045c2:	0003      	movs	r3, r0
 80045c4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045c6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	789b      	ldrb	r3, [r3, #2]
 80045cc:	0018      	movs	r0, r3
 80045ce:	f000 fc8b 	bl	8004ee8 <RTC_ByteToBcd2>
 80045d2:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045d4:	0022      	movs	r2, r4
 80045d6:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	78db      	ldrb	r3, [r3, #3]
 80045dc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	e017      	b.n	8004614 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2240      	movs	r2, #64	@ 0x40
 80045ec:	4013      	ands	r3, r2
 80045ee:	d102      	bne.n	80045f6 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2200      	movs	r2, #0
 80045f4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	785b      	ldrb	r3, [r3, #1]
 8004600:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004602:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004608:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	78db      	ldrb	r3, [r3, #3]
 800460e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	491b      	ldr	r1, [pc, #108]	@ (8004688 <HAL_RTC_SetTime+0x148>)
 800461c:	400a      	ands	r2, r1
 800461e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699a      	ldr	r2, [r3, #24]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4918      	ldr	r1, [pc, #96]	@ (800468c <HAL_RTC_SetTime+0x14c>)
 800462c:	400a      	ands	r2, r1
 800462e:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6999      	ldr	r1, [r3, #24]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	431a      	orrs	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004648:	2313      	movs	r3, #19
 800464a:	18fc      	adds	r4, r7, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	0018      	movs	r0, r3
 8004650:	f000 fc06 	bl	8004e60 <RTC_ExitInitMode>
 8004654:	0003      	movs	r3, r0
 8004656:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	22ff      	movs	r2, #255	@ 0xff
 800465e:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8004660:	2313      	movs	r3, #19
 8004662:	18fb      	adds	r3, r7, r3
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d103      	bne.n	8004672 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2229      	movs	r2, #41	@ 0x29
 800466e:	2101      	movs	r1, #1
 8004670:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2228      	movs	r2, #40	@ 0x28
 8004676:	2100      	movs	r1, #0
 8004678:	5499      	strb	r1, [r3, r2]

  return status;
 800467a:	2313      	movs	r3, #19
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	781b      	ldrb	r3, [r3, #0]
}
 8004680:	0018      	movs	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	b006      	add	sp, #24
 8004686:	bdb0      	pop	{r4, r5, r7, pc}
 8004688:	007f7f7f 	.word	0x007f7f7f
 800468c:	fffbffff 	.word	0xfffbffff

08004690 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	045b      	lsls	r3, r3, #17
 80046ae:	0c5a      	lsrs	r2, r3, #17
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a22      	ldr	r2, [pc, #136]	@ (8004744 <HAL_RTC_GetTime+0xb4>)
 80046bc:	4013      	ands	r3, r2
 80046be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	0c1b      	lsrs	r3, r3, #16
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	223f      	movs	r2, #63	@ 0x3f
 80046c8:	4013      	ands	r3, r2
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	0a1b      	lsrs	r3, r3, #8
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	227f      	movs	r2, #127	@ 0x7f
 80046d8:	4013      	ands	r3, r2
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	227f      	movs	r2, #127	@ 0x7f
 80046e6:	4013      	ands	r3, r2
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	0d9b      	lsrs	r3, r3, #22
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2201      	movs	r2, #1
 80046f6:	4013      	ands	r3, r2
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d11a      	bne.n	800473a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	0018      	movs	r0, r3
 800470a:	f000 fc15 	bl	8004f38 <RTC_Bcd2ToByte>
 800470e:	0003      	movs	r3, r0
 8004710:	001a      	movs	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	785b      	ldrb	r3, [r3, #1]
 800471a:	0018      	movs	r0, r3
 800471c:	f000 fc0c 	bl	8004f38 <RTC_Bcd2ToByte>
 8004720:	0003      	movs	r3, r0
 8004722:	001a      	movs	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	789b      	ldrb	r3, [r3, #2]
 800472c:	0018      	movs	r0, r3
 800472e:	f000 fc03 	bl	8004f38 <RTC_Bcd2ToByte>
 8004732:	0003      	movs	r3, r0
 8004734:	001a      	movs	r2, r3
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	0018      	movs	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	b006      	add	sp, #24
 8004742:	bd80      	pop	{r7, pc}
 8004744:	007f7f7f 	.word	0x007f7f7f

08004748 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004748:	b5b0      	push	{r4, r5, r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2228      	movs	r2, #40	@ 0x28
 8004758:	5c9b      	ldrb	r3, [r3, r2]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_RTC_SetDate+0x1a>
 800475e:	2302      	movs	r3, #2
 8004760:	e07e      	b.n	8004860 <HAL_RTC_SetDate+0x118>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2228      	movs	r2, #40	@ 0x28
 8004766:	2101      	movs	r1, #1
 8004768:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2229      	movs	r2, #41	@ 0x29
 800476e:	2102      	movs	r1, #2
 8004770:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10e      	bne.n	8004796 <HAL_RTC_SetDate+0x4e>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	785b      	ldrb	r3, [r3, #1]
 800477c:	001a      	movs	r2, r3
 800477e:	2310      	movs	r3, #16
 8004780:	4013      	ands	r3, r2
 8004782:	d008      	beq.n	8004796 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	785b      	ldrb	r3, [r3, #1]
 8004788:	2210      	movs	r2, #16
 800478a:	4393      	bics	r3, r2
 800478c:	b2db      	uxtb	r3, r3
 800478e:	330a      	adds	r3, #10
 8004790:	b2da      	uxtb	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d11c      	bne.n	80047d6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	78db      	ldrb	r3, [r3, #3]
 80047a0:	0018      	movs	r0, r3
 80047a2:	f000 fba1 	bl	8004ee8 <RTC_ByteToBcd2>
 80047a6:	0003      	movs	r3, r0
 80047a8:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	785b      	ldrb	r3, [r3, #1]
 80047ae:	0018      	movs	r0, r3
 80047b0:	f000 fb9a 	bl	8004ee8 <RTC_ByteToBcd2>
 80047b4:	0003      	movs	r3, r0
 80047b6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80047b8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	789b      	ldrb	r3, [r3, #2]
 80047be:	0018      	movs	r0, r3
 80047c0:	f000 fb92 	bl	8004ee8 <RTC_ByteToBcd2>
 80047c4:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80047c6:	0022      	movs	r2, r4
 80047c8:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80047d0:	4313      	orrs	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	e00e      	b.n	80047f4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	78db      	ldrb	r3, [r3, #3]
 80047da:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	785b      	ldrb	r3, [r3, #1]
 80047e0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80047e2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80047e8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80047f0:	4313      	orrs	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	22ca      	movs	r2, #202	@ 0xca
 80047fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2253      	movs	r2, #83	@ 0x53
 8004802:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004804:	2513      	movs	r5, #19
 8004806:	197c      	adds	r4, r7, r5
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	0018      	movs	r0, r3
 800480c:	f000 fae6 	bl	8004ddc <RTC_EnterInitMode>
 8004810:	0003      	movs	r3, r0
 8004812:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004814:	0028      	movs	r0, r5
 8004816:	183b      	adds	r3, r7, r0
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10c      	bne.n	8004838 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4910      	ldr	r1, [pc, #64]	@ (8004868 <HAL_RTC_SetDate+0x120>)
 8004826:	400a      	ands	r2, r1
 8004828:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800482a:	183c      	adds	r4, r7, r0
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	0018      	movs	r0, r3
 8004830:	f000 fb16 	bl	8004e60 <RTC_ExitInitMode>
 8004834:	0003      	movs	r3, r0
 8004836:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	22ff      	movs	r2, #255	@ 0xff
 800483e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004840:	2313      	movs	r3, #19
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d103      	bne.n	8004852 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2229      	movs	r2, #41	@ 0x29
 800484e:	2101      	movs	r1, #1
 8004850:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2228      	movs	r2, #40	@ 0x28
 8004856:	2100      	movs	r1, #0
 8004858:	5499      	strb	r1, [r3, r2]

  return status;
 800485a:	2313      	movs	r3, #19
 800485c:	18fb      	adds	r3, r7, r3
 800485e:	781b      	ldrb	r3, [r3, #0]
}
 8004860:	0018      	movs	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	b006      	add	sp, #24
 8004866:	bdb0      	pop	{r4, r5, r7, pc}
 8004868:	00ffff3f 	.word	0x00ffff3f

0800486c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4a21      	ldr	r2, [pc, #132]	@ (8004904 <HAL_RTC_GetDate+0x98>)
 8004880:	4013      	ands	r3, r2
 8004882:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	0c1b      	lsrs	r3, r3, #16
 8004888:	b2da      	uxtb	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	0a1b      	lsrs	r3, r3, #8
 8004892:	b2db      	uxtb	r3, r3
 8004894:	221f      	movs	r2, #31
 8004896:	4013      	ands	r3, r2
 8004898:	b2da      	uxtb	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	223f      	movs	r2, #63	@ 0x3f
 80048a4:	4013      	ands	r3, r2
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	0b5b      	lsrs	r3, r3, #13
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2207      	movs	r2, #7
 80048b4:	4013      	ands	r3, r2
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d11a      	bne.n	80048f8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	78db      	ldrb	r3, [r3, #3]
 80048c6:	0018      	movs	r0, r3
 80048c8:	f000 fb36 	bl	8004f38 <RTC_Bcd2ToByte>
 80048cc:	0003      	movs	r3, r0
 80048ce:	001a      	movs	r2, r3
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	785b      	ldrb	r3, [r3, #1]
 80048d8:	0018      	movs	r0, r3
 80048da:	f000 fb2d 	bl	8004f38 <RTC_Bcd2ToByte>
 80048de:	0003      	movs	r3, r0
 80048e0:	001a      	movs	r2, r3
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	789b      	ldrb	r3, [r3, #2]
 80048ea:	0018      	movs	r0, r3
 80048ec:	f000 fb24 	bl	8004f38 <RTC_Bcd2ToByte>
 80048f0:	0003      	movs	r3, r0
 80048f2:	001a      	movs	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	0018      	movs	r0, r3
 80048fc:	46bd      	mov	sp, r7
 80048fe:	b006      	add	sp, #24
 8004900:	bd80      	pop	{r7, pc}
 8004902:	46c0      	nop			@ (mov r8, r8)
 8004904:	00ffff3f 	.word	0x00ffff3f

08004908 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004908:	b590      	push	{r4, r7, lr}
 800490a:	b089      	sub	sp, #36	@ 0x24
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2228      	movs	r2, #40	@ 0x28
 8004918:	5c9b      	ldrb	r3, [r3, r2]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d101      	bne.n	8004922 <HAL_RTC_SetAlarm_IT+0x1a>
 800491e:	2302      	movs	r3, #2
 8004920:	e127      	b.n	8004b72 <HAL_RTC_SetAlarm_IT+0x26a>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2228      	movs	r2, #40	@ 0x28
 8004926:	2101      	movs	r1, #1
 8004928:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2229      	movs	r2, #41	@ 0x29
 800492e:	2102      	movs	r1, #2
 8004930:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d136      	bne.n	80049a6 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2240      	movs	r2, #64	@ 0x40
 8004940:	4013      	ands	r3, r2
 8004942:	d102      	bne.n	800494a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2200      	movs	r2, #0
 8004948:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	0018      	movs	r0, r3
 8004950:	f000 faca 	bl	8004ee8 <RTC_ByteToBcd2>
 8004954:	0003      	movs	r3, r0
 8004956:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	785b      	ldrb	r3, [r3, #1]
 800495c:	0018      	movs	r0, r3
 800495e:	f000 fac3 	bl	8004ee8 <RTC_ByteToBcd2>
 8004962:	0003      	movs	r3, r0
 8004964:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004966:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	789b      	ldrb	r3, [r3, #2]
 800496c:	0018      	movs	r0, r3
 800496e:	f000 fabb 	bl	8004ee8 <RTC_ByteToBcd2>
 8004972:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004974:	0022      	movs	r2, r4
 8004976:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	78db      	ldrb	r3, [r3, #3]
 800497c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800497e:	431a      	orrs	r2, r3
 8004980:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2220      	movs	r2, #32
 8004986:	5c9b      	ldrb	r3, [r3, r2]
 8004988:	0018      	movs	r0, r3
 800498a:	f000 faad 	bl	8004ee8 <RTC_ByteToBcd2>
 800498e:	0003      	movs	r3, r0
 8004990:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004992:	0022      	movs	r2, r4
 8004994:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800499a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80049a0:	4313      	orrs	r3, r2
 80049a2:	61fb      	str	r3, [r7, #28]
 80049a4:	e022      	b.n	80049ec <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2240      	movs	r2, #64	@ 0x40
 80049ae:	4013      	ands	r3, r2
 80049b0:	d102      	bne.n	80049b8 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2200      	movs	r2, #0
 80049b6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	785b      	ldrb	r3, [r3, #1]
 80049c2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80049c4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80049ca:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	78db      	ldrb	r3, [r3, #3]
 80049d0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80049d2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2120      	movs	r1, #32
 80049d8:	5c5b      	ldrb	r3, [r3, r1]
 80049da:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80049dc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80049e2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	22ca      	movs	r2, #202	@ 0xca
 80049fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2253      	movs	r2, #83	@ 0x53
 8004a06:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a0c:	2380      	movs	r3, #128	@ 0x80
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d14c      	bne.n	8004aae <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4957      	ldr	r1, [pc, #348]	@ (8004b7c <HAL_RTC_SetAlarm_IT+0x274>)
 8004a20:	400a      	ands	r2, r1
 8004a22:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2101      	movs	r1, #1
 8004a30:	430a      	orrs	r2, r1
 8004a32:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004a34:	f7fd fcd4 	bl	80023e0 <HAL_GetTick>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004a3c:	e016      	b.n	8004a6c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a3e:	f7fd fccf 	bl	80023e0 <HAL_GetTick>
 8004a42:	0002      	movs	r2, r0
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	1ad2      	subs	r2, r2, r3
 8004a48:	23fa      	movs	r3, #250	@ 0xfa
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d90d      	bls.n	8004a6c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	22ff      	movs	r2, #255	@ 0xff
 8004a56:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2229      	movs	r2, #41	@ 0x29
 8004a5c:	2103      	movs	r1, #3
 8004a5e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2228      	movs	r2, #40	@ 0x28
 8004a64:	2100      	movs	r1, #0
 8004a66:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e082      	b.n	8004b72 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2201      	movs	r2, #1
 8004a74:	4013      	ands	r3, r2
 8004a76:	d0e2      	beq.n	8004a3e <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	69fa      	ldr	r2, [r7, #28]
 8004a7e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2180      	movs	r1, #128	@ 0x80
 8004a94:	0049      	lsls	r1, r1, #1
 8004a96:	430a      	orrs	r2, r1
 8004a98:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699a      	ldr	r2, [r3, #24]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2180      	movs	r1, #128	@ 0x80
 8004aa6:	0149      	lsls	r1, r1, #5
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	619a      	str	r2, [r3, #24]
 8004aac:	e04b      	b.n	8004b46 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699a      	ldr	r2, [r3, #24]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4931      	ldr	r1, [pc, #196]	@ (8004b80 <HAL_RTC_SetAlarm_IT+0x278>)
 8004aba:	400a      	ands	r2, r1
 8004abc:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2102      	movs	r1, #2
 8004aca:	430a      	orrs	r2, r1
 8004acc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004ace:	f7fd fc87 	bl	80023e0 <HAL_GetTick>
 8004ad2:	0003      	movs	r3, r0
 8004ad4:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004ad6:	e016      	b.n	8004b06 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004ad8:	f7fd fc82 	bl	80023e0 <HAL_GetTick>
 8004adc:	0002      	movs	r2, r0
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	1ad2      	subs	r2, r2, r3
 8004ae2:	23fa      	movs	r3, #250	@ 0xfa
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d90d      	bls.n	8004b06 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	22ff      	movs	r2, #255	@ 0xff
 8004af0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2229      	movs	r2, #41	@ 0x29
 8004af6:	2103      	movs	r1, #3
 8004af8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2228      	movs	r2, #40	@ 0x28
 8004afe:	2100      	movs	r1, #0
 8004b00:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e035      	b.n	8004b72 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d0e2      	beq.n	8004ad8 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69fa      	ldr	r2, [r7, #28]
 8004b18:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699a      	ldr	r2, [r3, #24]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2180      	movs	r1, #128	@ 0x80
 8004b2e:	0089      	lsls	r1, r1, #2
 8004b30:	430a      	orrs	r2, r1
 8004b32:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2180      	movs	r1, #128	@ 0x80
 8004b40:	0189      	lsls	r1, r1, #6
 8004b42:	430a      	orrs	r2, r1
 8004b44:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004b46:	4a0f      	ldr	r2, [pc, #60]	@ (8004b84 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004b48:	2380      	movs	r3, #128	@ 0x80
 8004b4a:	58d3      	ldr	r3, [r2, r3]
 8004b4c:	490d      	ldr	r1, [pc, #52]	@ (8004b84 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004b4e:	2280      	movs	r2, #128	@ 0x80
 8004b50:	0312      	lsls	r2, r2, #12
 8004b52:	4313      	orrs	r3, r2
 8004b54:	2280      	movs	r2, #128	@ 0x80
 8004b56:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	22ff      	movs	r2, #255	@ 0xff
 8004b5e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2229      	movs	r2, #41	@ 0x29
 8004b64:	2101      	movs	r1, #1
 8004b66:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2228      	movs	r2, #40	@ 0x28
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	0018      	movs	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b009      	add	sp, #36	@ 0x24
 8004b78:	bd90      	pop	{r4, r7, pc}
 8004b7a:	46c0      	nop			@ (mov r8, r8)
 8004b7c:	fffffeff 	.word	0xfffffeff
 8004b80:	fffffdff 	.word	0xfffffdff
 8004b84:	40021800 	.word	0x40021800

08004b88 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	2380      	movs	r3, #128	@ 0x80
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d144      	bne.n	8004c2a <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2280      	movs	r2, #128	@ 0x80
 8004ba4:	0052      	lsls	r2, r2, #1
 8004ba6:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bae:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb6:	045b      	lsls	r3, r3, #17
 8004bb8:	0c5b      	lsrs	r3, r3, #17
 8004bba:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	0c1b      	lsrs	r3, r3, #16
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	223f      	movs	r2, #63	@ 0x3f
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	0a1b      	lsrs	r3, r3, #8
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	227f      	movs	r2, #127	@ 0x7f
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	227f      	movs	r2, #127	@ 0x7f
 8004be2:	4013      	ands	r3, r2
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	0d9b      	lsrs	r3, r3, #22
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	0e1b      	lsrs	r3, r3, #24
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	223f      	movs	r2, #63	@ 0x3f
 8004c08:	4013      	ands	r3, r2
 8004c0a:	b2d9      	uxtb	r1, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	2380      	movs	r3, #128	@ 0x80
 8004c16:	05db      	lsls	r3, r3, #23
 8004c18:	401a      	ands	r2, r3
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	4a3b      	ldr	r2, [pc, #236]	@ (8004d10 <HAL_RTC_GetAlarm+0x188>)
 8004c22:	401a      	ands	r2, r3
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	615a      	str	r2, [r3, #20]
 8004c28:	e043      	b.n	8004cb2 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2280      	movs	r2, #128	@ 0x80
 8004c2e:	0092      	lsls	r2, r2, #2
 8004c30:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c38:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c40:	045b      	lsls	r3, r3, #17
 8004c42:	0c5b      	lsrs	r3, r3, #17
 8004c44:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	0c1b      	lsrs	r3, r3, #16
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	223f      	movs	r2, #63	@ 0x3f
 8004c4e:	4013      	ands	r3, r2
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	0a1b      	lsrs	r3, r3, #8
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	227f      	movs	r2, #127	@ 0x7f
 8004c5e:	4013      	ands	r3, r2
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	227f      	movs	r2, #127	@ 0x7f
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	0d9b      	lsrs	r3, r3, #22
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	0e1b      	lsrs	r3, r3, #24
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	223f      	movs	r2, #63	@ 0x3f
 8004c92:	4013      	ands	r3, r2
 8004c94:	b2d9      	uxtb	r1, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	2380      	movs	r3, #128	@ 0x80
 8004ca0:	05db      	lsls	r3, r3, #23
 8004ca2:	401a      	ands	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	4a19      	ldr	r2, [pc, #100]	@ (8004d10 <HAL_RTC_GetAlarm+0x188>)
 8004cac:	401a      	ands	r2, r3
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d125      	bne.n	8004d04 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f000 f93b 	bl	8004f38 <RTC_Bcd2ToByte>
 8004cc2:	0003      	movs	r3, r0
 8004cc4:	001a      	movs	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	785b      	ldrb	r3, [r3, #1]
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f000 f932 	bl	8004f38 <RTC_Bcd2ToByte>
 8004cd4:	0003      	movs	r3, r0
 8004cd6:	001a      	movs	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	789b      	ldrb	r3, [r3, #2]
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f000 f929 	bl	8004f38 <RTC_Bcd2ToByte>
 8004ce6:	0003      	movs	r3, r0
 8004ce8:	001a      	movs	r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	5c9b      	ldrb	r3, [r3, r2]
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f000 f91f 	bl	8004f38 <RTC_Bcd2ToByte>
 8004cfa:	0003      	movs	r3, r0
 8004cfc:	0019      	movs	r1, r3
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2220      	movs	r2, #32
 8004d02:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	0018      	movs	r0, r3
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	b006      	add	sp, #24
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	46c0      	nop			@ (mov r8, r8)
 8004d10:	80808080 	.word	0x80808080

08004d14 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699a      	ldr	r2, [r3, #24]
 8004d22:	2380      	movs	r3, #128	@ 0x80
 8004d24:	015b      	lsls	r3, r3, #5
 8004d26:	4013      	ands	r3, r2
 8004d28:	d011      	beq.n	8004d4e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d30:	2201      	movs	r2, #1
 8004d32:	4013      	ands	r3, r2
 8004d34:	d00b      	beq.n	8004d4e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2101      	movs	r1, #1
 8004d42:	430a      	orrs	r2, r1
 8004d44:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f7fc fa79 	bl	8001240 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699a      	ldr	r2, [r3, #24]
 8004d54:	2380      	movs	r3, #128	@ 0x80
 8004d56:	019b      	lsls	r3, r3, #6
 8004d58:	4013      	ands	r3, r2
 8004d5a:	d011      	beq.n	8004d80 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d62:	2202      	movs	r2, #2
 8004d64:	4013      	ands	r3, r2
 8004d66:	d00b      	beq.n	8004d80 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2102      	movs	r1, #2
 8004d74:	430a      	orrs	r2, r1
 8004d76:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f000 f9a4 	bl	80050c8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2229      	movs	r2, #41	@ 0x29
 8004d84:	2101      	movs	r1, #1
 8004d86:	5499      	strb	r1, [r3, r2]
}
 8004d88:	46c0      	nop			@ (mov r8, r8)
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	b002      	add	sp, #8
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd8 <HAL_RTC_WaitForSynchro+0x48>)
 8004d9e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004da0:	f7fd fb1e 	bl	80023e0 <HAL_GetTick>
 8004da4:	0003      	movs	r3, r0
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004da8:	e00a      	b.n	8004dc0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004daa:	f7fd fb19 	bl	80023e0 <HAL_GetTick>
 8004dae:	0002      	movs	r2, r0
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	1ad2      	subs	r2, r2, r3
 8004db4:	23fa      	movs	r3, #250	@ 0xfa
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d901      	bls.n	8004dc0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e006      	b.n	8004dce <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	4013      	ands	r3, r2
 8004dca:	d0ee      	beq.n	8004daa <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	0018      	movs	r0, r3
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	b004      	add	sp, #16
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	46c0      	nop			@ (mov r8, r8)
 8004dd8:	0001005f 	.word	0x0001005f

08004ddc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004de4:	230f      	movs	r3, #15
 8004de6:	18fb      	adds	r3, r7, r3
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	2240      	movs	r2, #64	@ 0x40
 8004df4:	4013      	ands	r3, r2
 8004df6:	d12c      	bne.n	8004e52 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2180      	movs	r1, #128	@ 0x80
 8004e04:	430a      	orrs	r2, r1
 8004e06:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004e08:	f7fd faea 	bl	80023e0 <HAL_GetTick>
 8004e0c:	0003      	movs	r3, r0
 8004e0e:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004e10:	e014      	b.n	8004e3c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e12:	f7fd fae5 	bl	80023e0 <HAL_GetTick>
 8004e16:	0002      	movs	r2, r0
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	1ad2      	subs	r2, r2, r3
 8004e1c:	200f      	movs	r0, #15
 8004e1e:	183b      	adds	r3, r7, r0
 8004e20:	1839      	adds	r1, r7, r0
 8004e22:	7809      	ldrb	r1, [r1, #0]
 8004e24:	7019      	strb	r1, [r3, #0]
 8004e26:	23fa      	movs	r3, #250	@ 0xfa
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d906      	bls.n	8004e3c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004e2e:	183b      	adds	r3, r7, r0
 8004e30:	2203      	movs	r2, #3
 8004e32:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2229      	movs	r2, #41	@ 0x29
 8004e38:	2103      	movs	r1, #3
 8004e3a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	2240      	movs	r2, #64	@ 0x40
 8004e44:	4013      	ands	r3, r2
 8004e46:	d104      	bne.n	8004e52 <RTC_EnterInitMode+0x76>
 8004e48:	230f      	movs	r3, #15
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d1df      	bne.n	8004e12 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004e52:	230f      	movs	r3, #15
 8004e54:	18fb      	adds	r3, r7, r3
 8004e56:	781b      	ldrb	r3, [r3, #0]
}
 8004e58:	0018      	movs	r0, r3
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	b004      	add	sp, #16
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e60:	b590      	push	{r4, r7, lr}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e68:	240f      	movs	r4, #15
 8004e6a:	193b      	adds	r3, r7, r4
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004e70:	4b1c      	ldr	r3, [pc, #112]	@ (8004ee4 <RTC_ExitInitMode+0x84>)
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee4 <RTC_ExitInitMode+0x84>)
 8004e76:	2180      	movs	r1, #128	@ 0x80
 8004e78:	438a      	bics	r2, r1
 8004e7a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004e7c:	4b19      	ldr	r3, [pc, #100]	@ (8004ee4 <RTC_ExitInitMode+0x84>)
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	2220      	movs	r2, #32
 8004e82:	4013      	ands	r3, r2
 8004e84:	d10d      	bne.n	8004ea2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f7ff ff81 	bl	8004d90 <HAL_RTC_WaitForSynchro>
 8004e8e:	1e03      	subs	r3, r0, #0
 8004e90:	d021      	beq.n	8004ed6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2229      	movs	r2, #41	@ 0x29
 8004e96:	2103      	movs	r1, #3
 8004e98:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004e9a:	193b      	adds	r3, r7, r4
 8004e9c:	2203      	movs	r2, #3
 8004e9e:	701a      	strb	r2, [r3, #0]
 8004ea0:	e019      	b.n	8004ed6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004ea2:	4b10      	ldr	r3, [pc, #64]	@ (8004ee4 <RTC_ExitInitMode+0x84>)
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ee4 <RTC_ExitInitMode+0x84>)
 8004ea8:	2120      	movs	r1, #32
 8004eaa:	438a      	bics	r2, r1
 8004eac:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	f7ff ff6d 	bl	8004d90 <HAL_RTC_WaitForSynchro>
 8004eb6:	1e03      	subs	r3, r0, #0
 8004eb8:	d007      	beq.n	8004eca <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2229      	movs	r2, #41	@ 0x29
 8004ebe:	2103      	movs	r1, #3
 8004ec0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004ec2:	230f      	movs	r3, #15
 8004ec4:	18fb      	adds	r3, r7, r3
 8004ec6:	2203      	movs	r2, #3
 8004ec8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004eca:	4b06      	ldr	r3, [pc, #24]	@ (8004ee4 <RTC_ExitInitMode+0x84>)
 8004ecc:	699a      	ldr	r2, [r3, #24]
 8004ece:	4b05      	ldr	r3, [pc, #20]	@ (8004ee4 <RTC_ExitInitMode+0x84>)
 8004ed0:	2120      	movs	r1, #32
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004ed6:	230f      	movs	r3, #15
 8004ed8:	18fb      	adds	r3, r7, r3
 8004eda:	781b      	ldrb	r3, [r3, #0]
}
 8004edc:	0018      	movs	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	b005      	add	sp, #20
 8004ee2:	bd90      	pop	{r4, r7, pc}
 8004ee4:	40002800 	.word	0x40002800

08004ee8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	0002      	movs	r2, r0
 8004ef0:	1dfb      	adds	r3, r7, #7
 8004ef2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004ef8:	230b      	movs	r3, #11
 8004efa:	18fb      	adds	r3, r7, r3
 8004efc:	1dfa      	adds	r2, r7, #7
 8004efe:	7812      	ldrb	r2, [r2, #0]
 8004f00:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004f02:	e008      	b.n	8004f16 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3301      	adds	r3, #1
 8004f08:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004f0a:	220b      	movs	r2, #11
 8004f0c:	18bb      	adds	r3, r7, r2
 8004f0e:	18ba      	adds	r2, r7, r2
 8004f10:	7812      	ldrb	r2, [r2, #0]
 8004f12:	3a0a      	subs	r2, #10
 8004f14:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004f16:	210b      	movs	r1, #11
 8004f18:	187b      	adds	r3, r7, r1
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b09      	cmp	r3, #9
 8004f1e:	d8f1      	bhi.n	8004f04 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	187b      	adds	r3, r7, r1
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	b2db      	uxtb	r3, r3
}
 8004f30:	0018      	movs	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b004      	add	sp, #16
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	0002      	movs	r2, r0
 8004f40:	1dfb      	adds	r3, r7, #7
 8004f42:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004f44:	1dfb      	adds	r3, r7, #7
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	091b      	lsrs	r3, r3, #4
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	001a      	movs	r2, r3
 8004f4e:	0013      	movs	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	189b      	adds	r3, r3, r2
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	1dfb      	adds	r3, r7, #7
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	210f      	movs	r1, #15
 8004f62:	400b      	ands	r3, r1
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	18d3      	adds	r3, r2, r3
 8004f68:	b2db      	uxtb	r3, r3
}
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	b004      	add	sp, #16
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b086      	sub	sp, #24
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	60f8      	str	r0, [r7, #12]
 8004f7a:	60b9      	str	r1, [r7, #8]
 8004f7c:	607a      	str	r2, [r7, #4]
 8004f7e:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2228      	movs	r2, #40	@ 0x28
 8004f84:	5c9b      	ldrb	r3, [r3, r2]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d101      	bne.n	8004f8e <HAL_RTCEx_SetSmoothCalib+0x1c>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e04f      	b.n	800502e <HAL_RTCEx_SetSmoothCalib+0xbc>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2228      	movs	r2, #40	@ 0x28
 8004f92:	2101      	movs	r1, #1
 8004f94:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2229      	movs	r2, #41	@ 0x29
 8004f9a:	2102      	movs	r1, #2
 8004f9c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	22ca      	movs	r2, #202	@ 0xca
 8004fa4:	625a      	str	r2, [r3, #36]	@ 0x24
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2253      	movs	r2, #83	@ 0x53
 8004fac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	2380      	movs	r3, #128	@ 0x80
 8004fb6:	025b      	lsls	r3, r3, #9
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d022      	beq.n	8005002 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8004fbc:	f7fd fa10 	bl	80023e0 <HAL_GetTick>
 8004fc0:	0003      	movs	r3, r0
 8004fc2:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8004fc4:	e016      	b.n	8004ff4 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004fc6:	f7fd fa0b 	bl	80023e0 <HAL_GetTick>
 8004fca:	0002      	movs	r2, r0
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	1ad2      	subs	r2, r2, r3
 8004fd0:	23fa      	movs	r3, #250	@ 0xfa
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d90d      	bls.n	8004ff4 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	22ff      	movs	r2, #255	@ 0xff
 8004fde:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2229      	movs	r2, #41	@ 0x29
 8004fe4:	2103      	movs	r1, #3
 8004fe6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2228      	movs	r2, #40	@ 0x28
 8004fec:	2100      	movs	r1, #0
 8004fee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e01c      	b.n	800502e <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	2380      	movs	r3, #128	@ 0x80
 8004ffc:	025b      	lsls	r3, r3, #9
 8004ffe:	4013      	ands	r3, r2
 8005000:	d1e1      	bne.n	8004fc6 <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	431a      	orrs	r2, r3
 8005008:	0011      	movs	r1, r2
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	22ff      	movs	r2, #255	@ 0xff
 800501a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2229      	movs	r2, #41	@ 0x29
 8005020:	2101      	movs	r1, #1
 8005022:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2228      	movs	r2, #40	@ 0x28
 8005028:	2100      	movs	r1, #0
 800502a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	0018      	movs	r0, r3
 8005030:	46bd      	mov	sp, r7
 8005032:	b006      	add	sp, #24
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2228      	movs	r2, #40	@ 0x28
 8005046:	5c9b      	ldrb	r3, [r3, r2]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 800504c:	2302      	movs	r3, #2
 800504e:	e035      	b.n	80050bc <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2228      	movs	r2, #40	@ 0x28
 8005054:	2101      	movs	r1, #1
 8005056:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2229      	movs	r2, #41	@ 0x29
 800505c:	2102      	movs	r1, #2
 800505e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	22ca      	movs	r2, #202	@ 0xca
 8005066:	625a      	str	r2, [r3, #36]	@ 0x24
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2253      	movs	r2, #83	@ 0x53
 800506e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699a      	ldr	r2, [r3, #24]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4912      	ldr	r1, [pc, #72]	@ (80050c4 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 800507c:	400a      	ands	r2, r1
 800507e:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6999      	ldr	r1, [r3, #24]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2180      	movs	r1, #128	@ 0x80
 800509c:	0409      	lsls	r1, r1, #16
 800509e:	430a      	orrs	r2, r1
 80050a0:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	22ff      	movs	r2, #255	@ 0xff
 80050a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2229      	movs	r2, #41	@ 0x29
 80050ae:	2101      	movs	r1, #1
 80050b0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2228      	movs	r2, #40	@ 0x28
 80050b6:	2100      	movs	r1, #0
 80050b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	0018      	movs	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	b002      	add	sp, #8
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	fff7ffff 	.word	0xfff7ffff

080050c8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80050d0:	46c0      	nop			@ (mov r8, r8)
 80050d2:	46bd      	mov	sp, r7
 80050d4:	b002      	add	sp, #8
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	001a      	movs	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	18d3      	adds	r3, r2, r3
 80050f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	3301      	adds	r3, #1
 80050f6:	33ff      	adds	r3, #255	@ 0xff
 80050f8:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	18d3      	adds	r3, r2, r3
 8005102:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	601a      	str	r2, [r3, #0]
}
 800510a:	46c0      	nop			@ (mov r8, r8)
 800510c:	46bd      	mov	sp, r7
 800510e:	b006      	add	sp, #24
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	001a      	movs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	18d3      	adds	r3, r2, r3
 8005128:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3301      	adds	r3, #1
 800512e:	33ff      	adds	r3, #255	@ 0xff
 8005130:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	18d3      	adds	r3, r2, r3
 800513a:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	681b      	ldr	r3, [r3, #0]
}
 8005140:	0018      	movs	r0, r3
 8005142:	46bd      	mov	sp, r7
 8005144:	b004      	add	sp, #16
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e04a      	b.n	80051f0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	223d      	movs	r2, #61	@ 0x3d
 800515e:	5c9b      	ldrb	r3, [r3, r2]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d107      	bne.n	8005176 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	223c      	movs	r2, #60	@ 0x3c
 800516a:	2100      	movs	r1, #0
 800516c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	0018      	movs	r0, r3
 8005172:	f7fc ffb7 	bl	80020e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	223d      	movs	r2, #61	@ 0x3d
 800517a:	2102      	movs	r1, #2
 800517c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3304      	adds	r3, #4
 8005186:	0019      	movs	r1, r3
 8005188:	0010      	movs	r0, r2
 800518a:	f000 fc87 	bl	8005a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2248      	movs	r2, #72	@ 0x48
 8005192:	2101      	movs	r1, #1
 8005194:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	223e      	movs	r2, #62	@ 0x3e
 800519a:	2101      	movs	r1, #1
 800519c:	5499      	strb	r1, [r3, r2]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	223f      	movs	r2, #63	@ 0x3f
 80051a2:	2101      	movs	r1, #1
 80051a4:	5499      	strb	r1, [r3, r2]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2240      	movs	r2, #64	@ 0x40
 80051aa:	2101      	movs	r1, #1
 80051ac:	5499      	strb	r1, [r3, r2]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2241      	movs	r2, #65	@ 0x41
 80051b2:	2101      	movs	r1, #1
 80051b4:	5499      	strb	r1, [r3, r2]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2242      	movs	r2, #66	@ 0x42
 80051ba:	2101      	movs	r1, #1
 80051bc:	5499      	strb	r1, [r3, r2]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2243      	movs	r2, #67	@ 0x43
 80051c2:	2101      	movs	r1, #1
 80051c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2244      	movs	r2, #68	@ 0x44
 80051ca:	2101      	movs	r1, #1
 80051cc:	5499      	strb	r1, [r3, r2]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2245      	movs	r2, #69	@ 0x45
 80051d2:	2101      	movs	r1, #1
 80051d4:	5499      	strb	r1, [r3, r2]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2246      	movs	r2, #70	@ 0x46
 80051da:	2101      	movs	r1, #1
 80051dc:	5499      	strb	r1, [r3, r2]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2247      	movs	r2, #71	@ 0x47
 80051e2:	2101      	movs	r1, #1
 80051e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	223d      	movs	r2, #61	@ 0x3d
 80051ea:	2101      	movs	r1, #1
 80051ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	0018      	movs	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	b002      	add	sp, #8
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	223d      	movs	r2, #61	@ 0x3d
 8005204:	5c9b      	ldrb	r3, [r3, r2]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b01      	cmp	r3, #1
 800520a:	d001      	beq.n	8005210 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e035      	b.n	800527c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	223d      	movs	r2, #61	@ 0x3d
 8005214:	2102      	movs	r1, #2
 8005216:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a19      	ldr	r2, [pc, #100]	@ (8005284 <HAL_TIM_Base_Start+0x8c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00a      	beq.n	8005238 <HAL_TIM_Base_Start+0x40>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	2380      	movs	r3, #128	@ 0x80
 8005228:	05db      	lsls	r3, r3, #23
 800522a:	429a      	cmp	r2, r3
 800522c:	d004      	beq.n	8005238 <HAL_TIM_Base_Start+0x40>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a15      	ldr	r2, [pc, #84]	@ (8005288 <HAL_TIM_Base_Start+0x90>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d116      	bne.n	8005266 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	4a13      	ldr	r2, [pc, #76]	@ (800528c <HAL_TIM_Base_Start+0x94>)
 8005240:	4013      	ands	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b06      	cmp	r3, #6
 8005248:	d016      	beq.n	8005278 <HAL_TIM_Base_Start+0x80>
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	2380      	movs	r3, #128	@ 0x80
 800524e:	025b      	lsls	r3, r3, #9
 8005250:	429a      	cmp	r2, r3
 8005252:	d011      	beq.n	8005278 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2101      	movs	r1, #1
 8005260:	430a      	orrs	r2, r1
 8005262:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005264:	e008      	b.n	8005278 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2101      	movs	r1, #1
 8005272:	430a      	orrs	r2, r1
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	e000      	b.n	800527a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005278:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	0018      	movs	r0, r3
 800527e:	46bd      	mov	sp, r7
 8005280:	b004      	add	sp, #16
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40012c00 	.word	0x40012c00
 8005288:	40000400 	.word	0x40000400
 800528c:	00010007 	.word	0x00010007

08005290 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	4a0d      	ldr	r2, [pc, #52]	@ (80052d4 <HAL_TIM_Base_Stop+0x44>)
 80052a0:	4013      	ands	r3, r2
 80052a2:	d10d      	bne.n	80052c0 <HAL_TIM_Base_Stop+0x30>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	4a0b      	ldr	r2, [pc, #44]	@ (80052d8 <HAL_TIM_Base_Stop+0x48>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	d107      	bne.n	80052c0 <HAL_TIM_Base_Stop+0x30>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2101      	movs	r1, #1
 80052bc:	438a      	bics	r2, r1
 80052be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	223d      	movs	r2, #61	@ 0x3d
 80052c4:	2101      	movs	r1, #1
 80052c6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	0018      	movs	r0, r3
 80052cc:	46bd      	mov	sp, r7
 80052ce:	b002      	add	sp, #8
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	46c0      	nop			@ (mov r8, r8)
 80052d4:	00001111 	.word	0x00001111
 80052d8:	00000444 	.word	0x00000444

080052dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	223d      	movs	r2, #61	@ 0x3d
 80052e8:	5c9b      	ldrb	r3, [r3, r2]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d001      	beq.n	80052f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e03d      	b.n	8005370 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	223d      	movs	r2, #61	@ 0x3d
 80052f8:	2102      	movs	r1, #2
 80052fa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2101      	movs	r1, #1
 8005308:	430a      	orrs	r2, r1
 800530a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a19      	ldr	r2, [pc, #100]	@ (8005378 <HAL_TIM_Base_Start_IT+0x9c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00a      	beq.n	800532c <HAL_TIM_Base_Start_IT+0x50>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	2380      	movs	r3, #128	@ 0x80
 800531c:	05db      	lsls	r3, r3, #23
 800531e:	429a      	cmp	r2, r3
 8005320:	d004      	beq.n	800532c <HAL_TIM_Base_Start_IT+0x50>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a15      	ldr	r2, [pc, #84]	@ (800537c <HAL_TIM_Base_Start_IT+0xa0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d116      	bne.n	800535a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	4a13      	ldr	r2, [pc, #76]	@ (8005380 <HAL_TIM_Base_Start_IT+0xa4>)
 8005334:	4013      	ands	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b06      	cmp	r3, #6
 800533c:	d016      	beq.n	800536c <HAL_TIM_Base_Start_IT+0x90>
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	2380      	movs	r3, #128	@ 0x80
 8005342:	025b      	lsls	r3, r3, #9
 8005344:	429a      	cmp	r2, r3
 8005346:	d011      	beq.n	800536c <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2101      	movs	r1, #1
 8005354:	430a      	orrs	r2, r1
 8005356:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005358:	e008      	b.n	800536c <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2101      	movs	r1, #1
 8005366:	430a      	orrs	r2, r1
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e000      	b.n	800536e <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	0018      	movs	r0, r3
 8005372:	46bd      	mov	sp, r7
 8005374:	b004      	add	sp, #16
 8005376:	bd80      	pop	{r7, pc}
 8005378:	40012c00 	.word	0x40012c00
 800537c:	40000400 	.word	0x40000400
 8005380:	00010007 	.word	0x00010007

08005384 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2101      	movs	r1, #1
 8005398:	438a      	bics	r2, r1
 800539a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	4a0d      	ldr	r2, [pc, #52]	@ (80053d8 <HAL_TIM_Base_Stop_IT+0x54>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	d10d      	bne.n	80053c4 <HAL_TIM_Base_Stop_IT+0x40>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	4a0b      	ldr	r2, [pc, #44]	@ (80053dc <HAL_TIM_Base_Stop_IT+0x58>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	d107      	bne.n	80053c4 <HAL_TIM_Base_Stop_IT+0x40>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2101      	movs	r1, #1
 80053c0:	438a      	bics	r2, r1
 80053c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	223d      	movs	r2, #61	@ 0x3d
 80053c8:	2101      	movs	r1, #1
 80053ca:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	0018      	movs	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	b002      	add	sp, #8
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	46c0      	nop			@ (mov r8, r8)
 80053d8:	00001111 	.word	0x00001111
 80053dc:	00000444 	.word	0x00000444

080053e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e04a      	b.n	8005488 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	223d      	movs	r2, #61	@ 0x3d
 80053f6:	5c9b      	ldrb	r3, [r3, r2]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d107      	bne.n	800540e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	223c      	movs	r2, #60	@ 0x3c
 8005402:	2100      	movs	r1, #0
 8005404:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	0018      	movs	r0, r3
 800540a:	f7fc fe4f 	bl	80020ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	223d      	movs	r2, #61	@ 0x3d
 8005412:	2102      	movs	r1, #2
 8005414:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3304      	adds	r3, #4
 800541e:	0019      	movs	r1, r3
 8005420:	0010      	movs	r0, r2
 8005422:	f000 fb3b 	bl	8005a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2248      	movs	r2, #72	@ 0x48
 800542a:	2101      	movs	r1, #1
 800542c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	223e      	movs	r2, #62	@ 0x3e
 8005432:	2101      	movs	r1, #1
 8005434:	5499      	strb	r1, [r3, r2]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	223f      	movs	r2, #63	@ 0x3f
 800543a:	2101      	movs	r1, #1
 800543c:	5499      	strb	r1, [r3, r2]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2240      	movs	r2, #64	@ 0x40
 8005442:	2101      	movs	r1, #1
 8005444:	5499      	strb	r1, [r3, r2]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2241      	movs	r2, #65	@ 0x41
 800544a:	2101      	movs	r1, #1
 800544c:	5499      	strb	r1, [r3, r2]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2242      	movs	r2, #66	@ 0x42
 8005452:	2101      	movs	r1, #1
 8005454:	5499      	strb	r1, [r3, r2]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2243      	movs	r2, #67	@ 0x43
 800545a:	2101      	movs	r1, #1
 800545c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2244      	movs	r2, #68	@ 0x44
 8005462:	2101      	movs	r1, #1
 8005464:	5499      	strb	r1, [r3, r2]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2245      	movs	r2, #69	@ 0x45
 800546a:	2101      	movs	r1, #1
 800546c:	5499      	strb	r1, [r3, r2]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2246      	movs	r2, #70	@ 0x46
 8005472:	2101      	movs	r1, #1
 8005474:	5499      	strb	r1, [r3, r2]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2247      	movs	r2, #71	@ 0x47
 800547a:	2101      	movs	r1, #1
 800547c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	223d      	movs	r2, #61	@ 0x3d
 8005482:	2101      	movs	r1, #1
 8005484:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	0018      	movs	r0, r3
 800548a:	46bd      	mov	sp, r7
 800548c:	b002      	add	sp, #8
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d108      	bne.n	80054b2 <HAL_TIM_PWM_Start+0x22>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	223e      	movs	r2, #62	@ 0x3e
 80054a4:	5c9b      	ldrb	r3, [r3, r2]
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	1e5a      	subs	r2, r3, #1
 80054ac:	4193      	sbcs	r3, r2
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	e037      	b.n	8005522 <HAL_TIM_PWM_Start+0x92>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d108      	bne.n	80054ca <HAL_TIM_PWM_Start+0x3a>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	223f      	movs	r2, #63	@ 0x3f
 80054bc:	5c9b      	ldrb	r3, [r3, r2]
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	3b01      	subs	r3, #1
 80054c2:	1e5a      	subs	r2, r3, #1
 80054c4:	4193      	sbcs	r3, r2
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	e02b      	b.n	8005522 <HAL_TIM_PWM_Start+0x92>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d108      	bne.n	80054e2 <HAL_TIM_PWM_Start+0x52>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2240      	movs	r2, #64	@ 0x40
 80054d4:	5c9b      	ldrb	r3, [r3, r2]
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	1e5a      	subs	r2, r3, #1
 80054dc:	4193      	sbcs	r3, r2
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	e01f      	b.n	8005522 <HAL_TIM_PWM_Start+0x92>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b0c      	cmp	r3, #12
 80054e6:	d108      	bne.n	80054fa <HAL_TIM_PWM_Start+0x6a>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2241      	movs	r2, #65	@ 0x41
 80054ec:	5c9b      	ldrb	r3, [r3, r2]
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	3b01      	subs	r3, #1
 80054f2:	1e5a      	subs	r2, r3, #1
 80054f4:	4193      	sbcs	r3, r2
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	e013      	b.n	8005522 <HAL_TIM_PWM_Start+0x92>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b10      	cmp	r3, #16
 80054fe:	d108      	bne.n	8005512 <HAL_TIM_PWM_Start+0x82>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2242      	movs	r2, #66	@ 0x42
 8005504:	5c9b      	ldrb	r3, [r3, r2]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	3b01      	subs	r3, #1
 800550a:	1e5a      	subs	r2, r3, #1
 800550c:	4193      	sbcs	r3, r2
 800550e:	b2db      	uxtb	r3, r3
 8005510:	e007      	b.n	8005522 <HAL_TIM_PWM_Start+0x92>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2243      	movs	r2, #67	@ 0x43
 8005516:	5c9b      	ldrb	r3, [r3, r2]
 8005518:	b2db      	uxtb	r3, r3
 800551a:	3b01      	subs	r3, #1
 800551c:	1e5a      	subs	r2, r3, #1
 800551e:	4193      	sbcs	r3, r2
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e081      	b.n	800562e <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d104      	bne.n	800553a <HAL_TIM_PWM_Start+0xaa>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	223e      	movs	r2, #62	@ 0x3e
 8005534:	2102      	movs	r1, #2
 8005536:	5499      	strb	r1, [r3, r2]
 8005538:	e023      	b.n	8005582 <HAL_TIM_PWM_Start+0xf2>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b04      	cmp	r3, #4
 800553e:	d104      	bne.n	800554a <HAL_TIM_PWM_Start+0xba>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	223f      	movs	r2, #63	@ 0x3f
 8005544:	2102      	movs	r1, #2
 8005546:	5499      	strb	r1, [r3, r2]
 8005548:	e01b      	b.n	8005582 <HAL_TIM_PWM_Start+0xf2>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b08      	cmp	r3, #8
 800554e:	d104      	bne.n	800555a <HAL_TIM_PWM_Start+0xca>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2240      	movs	r2, #64	@ 0x40
 8005554:	2102      	movs	r1, #2
 8005556:	5499      	strb	r1, [r3, r2]
 8005558:	e013      	b.n	8005582 <HAL_TIM_PWM_Start+0xf2>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b0c      	cmp	r3, #12
 800555e:	d104      	bne.n	800556a <HAL_TIM_PWM_Start+0xda>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2241      	movs	r2, #65	@ 0x41
 8005564:	2102      	movs	r1, #2
 8005566:	5499      	strb	r1, [r3, r2]
 8005568:	e00b      	b.n	8005582 <HAL_TIM_PWM_Start+0xf2>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b10      	cmp	r3, #16
 800556e:	d104      	bne.n	800557a <HAL_TIM_PWM_Start+0xea>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2242      	movs	r2, #66	@ 0x42
 8005574:	2102      	movs	r1, #2
 8005576:	5499      	strb	r1, [r3, r2]
 8005578:	e003      	b.n	8005582 <HAL_TIM_PWM_Start+0xf2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2243      	movs	r2, #67	@ 0x43
 800557e:	2102      	movs	r1, #2
 8005580:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6839      	ldr	r1, [r7, #0]
 8005588:	2201      	movs	r2, #1
 800558a:	0018      	movs	r0, r3
 800558c:	f000 fda6 	bl	80060dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a28      	ldr	r2, [pc, #160]	@ (8005638 <HAL_TIM_PWM_Start+0x1a8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d009      	beq.n	80055ae <HAL_TIM_PWM_Start+0x11e>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a27      	ldr	r2, [pc, #156]	@ (800563c <HAL_TIM_PWM_Start+0x1ac>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d004      	beq.n	80055ae <HAL_TIM_PWM_Start+0x11e>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a25      	ldr	r2, [pc, #148]	@ (8005640 <HAL_TIM_PWM_Start+0x1b0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d101      	bne.n	80055b2 <HAL_TIM_PWM_Start+0x122>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <HAL_TIM_PWM_Start+0x124>
 80055b2:	2300      	movs	r3, #0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d008      	beq.n	80055ca <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2180      	movs	r1, #128	@ 0x80
 80055c4:	0209      	lsls	r1, r1, #8
 80055c6:	430a      	orrs	r2, r1
 80055c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005638 <HAL_TIM_PWM_Start+0x1a8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00a      	beq.n	80055ea <HAL_TIM_PWM_Start+0x15a>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	2380      	movs	r3, #128	@ 0x80
 80055da:	05db      	lsls	r3, r3, #23
 80055dc:	429a      	cmp	r2, r3
 80055de:	d004      	beq.n	80055ea <HAL_TIM_PWM_Start+0x15a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a17      	ldr	r2, [pc, #92]	@ (8005644 <HAL_TIM_PWM_Start+0x1b4>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d116      	bne.n	8005618 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	4a15      	ldr	r2, [pc, #84]	@ (8005648 <HAL_TIM_PWM_Start+0x1b8>)
 80055f2:	4013      	ands	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b06      	cmp	r3, #6
 80055fa:	d016      	beq.n	800562a <HAL_TIM_PWM_Start+0x19a>
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	2380      	movs	r3, #128	@ 0x80
 8005600:	025b      	lsls	r3, r3, #9
 8005602:	429a      	cmp	r2, r3
 8005604:	d011      	beq.n	800562a <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2101      	movs	r1, #1
 8005612:	430a      	orrs	r2, r1
 8005614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005616:	e008      	b.n	800562a <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2101      	movs	r1, #1
 8005624:	430a      	orrs	r2, r1
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	e000      	b.n	800562c <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800562a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	0018      	movs	r0, r3
 8005630:	46bd      	mov	sp, r7
 8005632:	b004      	add	sp, #16
 8005634:	bd80      	pop	{r7, pc}
 8005636:	46c0      	nop			@ (mov r8, r8)
 8005638:	40012c00 	.word	0x40012c00
 800563c:	40014400 	.word	0x40014400
 8005640:	40014800 	.word	0x40014800
 8005644:	40000400 	.word	0x40000400
 8005648:	00010007 	.word	0x00010007

0800564c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2202      	movs	r2, #2
 8005668:	4013      	ands	r3, r2
 800566a:	d021      	beq.n	80056b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2202      	movs	r2, #2
 8005670:	4013      	ands	r3, r2
 8005672:	d01d      	beq.n	80056b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2203      	movs	r2, #3
 800567a:	4252      	negs	r2, r2
 800567c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	2203      	movs	r2, #3
 800568c:	4013      	ands	r3, r2
 800568e:	d004      	beq.n	800569a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	0018      	movs	r0, r3
 8005694:	f000 f9ea 	bl	8005a6c <HAL_TIM_IC_CaptureCallback>
 8005698:	e007      	b.n	80056aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	0018      	movs	r0, r3
 800569e:	f000 f9dd 	bl	8005a5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	0018      	movs	r0, r3
 80056a6:	f000 f9e9 	bl	8005a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2204      	movs	r2, #4
 80056b4:	4013      	ands	r3, r2
 80056b6:	d022      	beq.n	80056fe <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2204      	movs	r2, #4
 80056bc:	4013      	ands	r3, r2
 80056be:	d01e      	beq.n	80056fe <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2205      	movs	r2, #5
 80056c6:	4252      	negs	r2, r2
 80056c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2202      	movs	r2, #2
 80056ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	23c0      	movs	r3, #192	@ 0xc0
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4013      	ands	r3, r2
 80056dc:	d004      	beq.n	80056e8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	0018      	movs	r0, r3
 80056e2:	f000 f9c3 	bl	8005a6c <HAL_TIM_IC_CaptureCallback>
 80056e6:	e007      	b.n	80056f8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	0018      	movs	r0, r3
 80056ec:	f000 f9b6 	bl	8005a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	0018      	movs	r0, r3
 80056f4:	f000 f9c2 	bl	8005a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2208      	movs	r2, #8
 8005702:	4013      	ands	r3, r2
 8005704:	d021      	beq.n	800574a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2208      	movs	r2, #8
 800570a:	4013      	ands	r3, r2
 800570c:	d01d      	beq.n	800574a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2209      	movs	r2, #9
 8005714:	4252      	negs	r2, r2
 8005716:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2204      	movs	r2, #4
 800571c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	2203      	movs	r2, #3
 8005726:	4013      	ands	r3, r2
 8005728:	d004      	beq.n	8005734 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	0018      	movs	r0, r3
 800572e:	f000 f99d 	bl	8005a6c <HAL_TIM_IC_CaptureCallback>
 8005732:	e007      	b.n	8005744 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	0018      	movs	r0, r3
 8005738:	f000 f990 	bl	8005a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	0018      	movs	r0, r3
 8005740:	f000 f99c 	bl	8005a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2210      	movs	r2, #16
 800574e:	4013      	ands	r3, r2
 8005750:	d022      	beq.n	8005798 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2210      	movs	r2, #16
 8005756:	4013      	ands	r3, r2
 8005758:	d01e      	beq.n	8005798 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2211      	movs	r2, #17
 8005760:	4252      	negs	r2, r2
 8005762:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2208      	movs	r2, #8
 8005768:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69da      	ldr	r2, [r3, #28]
 8005770:	23c0      	movs	r3, #192	@ 0xc0
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4013      	ands	r3, r2
 8005776:	d004      	beq.n	8005782 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	0018      	movs	r0, r3
 800577c:	f000 f976 	bl	8005a6c <HAL_TIM_IC_CaptureCallback>
 8005780:	e007      	b.n	8005792 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	0018      	movs	r0, r3
 8005786:	f000 f969 	bl	8005a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	0018      	movs	r0, r3
 800578e:	f000 f975 	bl	8005a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2201      	movs	r2, #1
 800579c:	4013      	ands	r3, r2
 800579e:	d00c      	beq.n	80057ba <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2201      	movs	r2, #1
 80057a4:	4013      	ands	r3, r2
 80057a6:	d008      	beq.n	80057ba <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2202      	movs	r2, #2
 80057ae:	4252      	negs	r2, r2
 80057b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	0018      	movs	r0, r3
 80057b6:	f7fb fe9d 	bl	80014f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2280      	movs	r2, #128	@ 0x80
 80057be:	4013      	ands	r3, r2
 80057c0:	d104      	bne.n	80057cc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	2380      	movs	r3, #128	@ 0x80
 80057c6:	019b      	lsls	r3, r3, #6
 80057c8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057ca:	d00b      	beq.n	80057e4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2280      	movs	r2, #128	@ 0x80
 80057d0:	4013      	ands	r3, r2
 80057d2:	d007      	beq.n	80057e4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005854 <HAL_TIM_IRQHandler+0x208>)
 80057da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	0018      	movs	r0, r3
 80057e0:	f000 fd10 	bl	8006204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	2380      	movs	r3, #128	@ 0x80
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	4013      	ands	r3, r2
 80057ec:	d00b      	beq.n	8005806 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2280      	movs	r2, #128	@ 0x80
 80057f2:	4013      	ands	r3, r2
 80057f4:	d007      	beq.n	8005806 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a17      	ldr	r2, [pc, #92]	@ (8005858 <HAL_TIM_IRQHandler+0x20c>)
 80057fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	0018      	movs	r0, r3
 8005802:	f000 fd07 	bl	8006214 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2240      	movs	r2, #64	@ 0x40
 800580a:	4013      	ands	r3, r2
 800580c:	d00c      	beq.n	8005828 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2240      	movs	r2, #64	@ 0x40
 8005812:	4013      	ands	r3, r2
 8005814:	d008      	beq.n	8005828 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2241      	movs	r2, #65	@ 0x41
 800581c:	4252      	negs	r2, r2
 800581e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	0018      	movs	r0, r3
 8005824:	f000 f932 	bl	8005a8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2220      	movs	r2, #32
 800582c:	4013      	ands	r3, r2
 800582e:	d00c      	beq.n	800584a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2220      	movs	r2, #32
 8005834:	4013      	ands	r3, r2
 8005836:	d008      	beq.n	800584a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2221      	movs	r2, #33	@ 0x21
 800583e:	4252      	negs	r2, r2
 8005840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	0018      	movs	r0, r3
 8005846:	f000 fcd5 	bl	80061f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800584a:	46c0      	nop			@ (mov r8, r8)
 800584c:	46bd      	mov	sp, r7
 800584e:	b004      	add	sp, #16
 8005850:	bd80      	pop	{r7, pc}
 8005852:	46c0      	nop			@ (mov r8, r8)
 8005854:	ffffdf7f 	.word	0xffffdf7f
 8005858:	fffffeff 	.word	0xfffffeff

0800585c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005868:	2317      	movs	r3, #23
 800586a:	18fb      	adds	r3, r7, r3
 800586c:	2200      	movs	r2, #0
 800586e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	223c      	movs	r2, #60	@ 0x3c
 8005874:	5c9b      	ldrb	r3, [r3, r2]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d101      	bne.n	800587e <HAL_TIM_PWM_ConfigChannel+0x22>
 800587a:	2302      	movs	r3, #2
 800587c:	e0e5      	b.n	8005a4a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	223c      	movs	r2, #60	@ 0x3c
 8005882:	2101      	movs	r1, #1
 8005884:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b14      	cmp	r3, #20
 800588a:	d900      	bls.n	800588e <HAL_TIM_PWM_ConfigChannel+0x32>
 800588c:	e0d1      	b.n	8005a32 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	009a      	lsls	r2, r3, #2
 8005892:	4b70      	ldr	r3, [pc, #448]	@ (8005a54 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005894:	18d3      	adds	r3, r2, r3
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	0011      	movs	r1, r2
 80058a2:	0018      	movs	r0, r3
 80058a4:	f000 f97e 	bl	8005ba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2108      	movs	r1, #8
 80058b4:	430a      	orrs	r2, r1
 80058b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2104      	movs	r1, #4
 80058c4:	438a      	bics	r2, r1
 80058c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6999      	ldr	r1, [r3, #24]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	619a      	str	r2, [r3, #24]
      break;
 80058da:	e0af      	b.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	0011      	movs	r1, r2
 80058e4:	0018      	movs	r0, r3
 80058e6:	f000 f9dd 	bl	8005ca4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	699a      	ldr	r2, [r3, #24]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2180      	movs	r1, #128	@ 0x80
 80058f6:	0109      	lsls	r1, r1, #4
 80058f8:	430a      	orrs	r2, r1
 80058fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	699a      	ldr	r2, [r3, #24]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4954      	ldr	r1, [pc, #336]	@ (8005a58 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005908:	400a      	ands	r2, r1
 800590a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6999      	ldr	r1, [r3, #24]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	021a      	lsls	r2, r3, #8
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	619a      	str	r2, [r3, #24]
      break;
 8005920:	e08c      	b.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	0011      	movs	r1, r2
 800592a:	0018      	movs	r0, r3
 800592c:	f000 fa38 	bl	8005da0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69da      	ldr	r2, [r3, #28]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2108      	movs	r1, #8
 800593c:	430a      	orrs	r2, r1
 800593e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	69da      	ldr	r2, [r3, #28]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2104      	movs	r1, #4
 800594c:	438a      	bics	r2, r1
 800594e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	69d9      	ldr	r1, [r3, #28]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	691a      	ldr	r2, [r3, #16]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	61da      	str	r2, [r3, #28]
      break;
 8005962:	e06b      	b.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	0011      	movs	r1, r2
 800596c:	0018      	movs	r0, r3
 800596e:	f000 fa99 	bl	8005ea4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2180      	movs	r1, #128	@ 0x80
 800597e:	0109      	lsls	r1, r1, #4
 8005980:	430a      	orrs	r2, r1
 8005982:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69da      	ldr	r2, [r3, #28]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4932      	ldr	r1, [pc, #200]	@ (8005a58 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005990:	400a      	ands	r2, r1
 8005992:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	69d9      	ldr	r1, [r3, #28]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	021a      	lsls	r2, r3, #8
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	61da      	str	r2, [r3, #28]
      break;
 80059a8:	e048      	b.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	0011      	movs	r1, r2
 80059b2:	0018      	movs	r0, r3
 80059b4:	f000 fada 	bl	8005f6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2108      	movs	r1, #8
 80059c4:	430a      	orrs	r2, r1
 80059c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2104      	movs	r1, #4
 80059d4:	438a      	bics	r2, r1
 80059d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	691a      	ldr	r2, [r3, #16]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80059ea:	e027      	b.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	0011      	movs	r1, r2
 80059f4:	0018      	movs	r0, r3
 80059f6:	f000 fb13 	bl	8006020 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2180      	movs	r1, #128	@ 0x80
 8005a06:	0109      	lsls	r1, r1, #4
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4910      	ldr	r1, [pc, #64]	@ (8005a58 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005a18:	400a      	ands	r2, r1
 8005a1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	021a      	lsls	r2, r3, #8
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005a30:	e004      	b.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005a32:	2317      	movs	r3, #23
 8005a34:	18fb      	adds	r3, r7, r3
 8005a36:	2201      	movs	r2, #1
 8005a38:	701a      	strb	r2, [r3, #0]
      break;
 8005a3a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	223c      	movs	r2, #60	@ 0x3c
 8005a40:	2100      	movs	r1, #0
 8005a42:	5499      	strb	r1, [r3, r2]

  return status;
 8005a44:	2317      	movs	r3, #23
 8005a46:	18fb      	adds	r3, r7, r3
 8005a48:	781b      	ldrb	r3, [r3, #0]
}
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	b006      	add	sp, #24
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	46c0      	nop			@ (mov r8, r8)
 8005a54:	08006320 	.word	0x08006320
 8005a58:	fffffbff 	.word	0xfffffbff

08005a5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a64:	46c0      	nop			@ (mov r8, r8)
 8005a66:	46bd      	mov	sp, r7
 8005a68:	b002      	add	sp, #8
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a74:	46c0      	nop			@ (mov r8, r8)
 8005a76:	46bd      	mov	sp, r7
 8005a78:	b002      	add	sp, #8
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a84:	46c0      	nop			@ (mov r8, r8)
 8005a86:	46bd      	mov	sp, r7
 8005a88:	b002      	add	sp, #8
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a94:	46c0      	nop			@ (mov r8, r8)
 8005a96:	46bd      	mov	sp, r7
 8005a98:	b002      	add	sp, #8
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a37      	ldr	r2, [pc, #220]	@ (8005b8c <TIM_Base_SetConfig+0xf0>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d008      	beq.n	8005ac6 <TIM_Base_SetConfig+0x2a>
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	2380      	movs	r3, #128	@ 0x80
 8005ab8:	05db      	lsls	r3, r3, #23
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d003      	beq.n	8005ac6 <TIM_Base_SetConfig+0x2a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a33      	ldr	r2, [pc, #204]	@ (8005b90 <TIM_Base_SetConfig+0xf4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d108      	bne.n	8005ad8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2270      	movs	r2, #112	@ 0x70
 8005aca:	4393      	bics	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a2c      	ldr	r2, [pc, #176]	@ (8005b8c <TIM_Base_SetConfig+0xf0>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d014      	beq.n	8005b0a <TIM_Base_SetConfig+0x6e>
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	2380      	movs	r3, #128	@ 0x80
 8005ae4:	05db      	lsls	r3, r3, #23
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d00f      	beq.n	8005b0a <TIM_Base_SetConfig+0x6e>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a28      	ldr	r2, [pc, #160]	@ (8005b90 <TIM_Base_SetConfig+0xf4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00b      	beq.n	8005b0a <TIM_Base_SetConfig+0x6e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a27      	ldr	r2, [pc, #156]	@ (8005b94 <TIM_Base_SetConfig+0xf8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d007      	beq.n	8005b0a <TIM_Base_SetConfig+0x6e>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a26      	ldr	r2, [pc, #152]	@ (8005b98 <TIM_Base_SetConfig+0xfc>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d003      	beq.n	8005b0a <TIM_Base_SetConfig+0x6e>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a25      	ldr	r2, [pc, #148]	@ (8005b9c <TIM_Base_SetConfig+0x100>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d108      	bne.n	8005b1c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	4a24      	ldr	r2, [pc, #144]	@ (8005ba0 <TIM_Base_SetConfig+0x104>)
 8005b0e:	4013      	ands	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2280      	movs	r2, #128	@ 0x80
 8005b20:	4393      	bics	r3, r2
 8005b22:	001a      	movs	r2, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	689a      	ldr	r2, [r3, #8]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a11      	ldr	r2, [pc, #68]	@ (8005b8c <TIM_Base_SetConfig+0xf0>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d007      	beq.n	8005b5a <TIM_Base_SetConfig+0xbe>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a12      	ldr	r2, [pc, #72]	@ (8005b98 <TIM_Base_SetConfig+0xfc>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d003      	beq.n	8005b5a <TIM_Base_SetConfig+0xbe>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a11      	ldr	r2, [pc, #68]	@ (8005b9c <TIM_Base_SetConfig+0x100>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d103      	bne.n	8005b62 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	691a      	ldr	r2, [r3, #16]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d106      	bne.n	8005b82 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	4393      	bics	r3, r2
 8005b7c:	001a      	movs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	611a      	str	r2, [r3, #16]
  }
}
 8005b82:	46c0      	nop			@ (mov r8, r8)
 8005b84:	46bd      	mov	sp, r7
 8005b86:	b004      	add	sp, #16
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	46c0      	nop			@ (mov r8, r8)
 8005b8c:	40012c00 	.word	0x40012c00
 8005b90:	40000400 	.word	0x40000400
 8005b94:	40002000 	.word	0x40002000
 8005b98:	40014400 	.word	0x40014400
 8005b9c:	40014800 	.word	0x40014800
 8005ba0:	fffffcff 	.word	0xfffffcff

08005ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	4393      	bics	r3, r2
 8005bbc:	001a      	movs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4a2e      	ldr	r2, [pc, #184]	@ (8005c8c <TIM_OC1_SetConfig+0xe8>)
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2203      	movs	r2, #3
 8005bda:	4393      	bics	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2202      	movs	r2, #2
 8005bec:	4393      	bics	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a24      	ldr	r2, [pc, #144]	@ (8005c90 <TIM_OC1_SetConfig+0xec>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d007      	beq.n	8005c12 <TIM_OC1_SetConfig+0x6e>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a23      	ldr	r2, [pc, #140]	@ (8005c94 <TIM_OC1_SetConfig+0xf0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d003      	beq.n	8005c12 <TIM_OC1_SetConfig+0x6e>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a22      	ldr	r2, [pc, #136]	@ (8005c98 <TIM_OC1_SetConfig+0xf4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d10c      	bne.n	8005c2c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2208      	movs	r2, #8
 8005c16:	4393      	bics	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2204      	movs	r2, #4
 8005c28:	4393      	bics	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a18      	ldr	r2, [pc, #96]	@ (8005c90 <TIM_OC1_SetConfig+0xec>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d007      	beq.n	8005c44 <TIM_OC1_SetConfig+0xa0>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a17      	ldr	r2, [pc, #92]	@ (8005c94 <TIM_OC1_SetConfig+0xf0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d003      	beq.n	8005c44 <TIM_OC1_SetConfig+0xa0>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a16      	ldr	r2, [pc, #88]	@ (8005c98 <TIM_OC1_SetConfig+0xf4>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d111      	bne.n	8005c68 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	4a15      	ldr	r2, [pc, #84]	@ (8005c9c <TIM_OC1_SetConfig+0xf8>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	4a14      	ldr	r2, [pc, #80]	@ (8005ca0 <TIM_OC1_SetConfig+0xfc>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	621a      	str	r2, [r3, #32]
}
 8005c82:	46c0      	nop			@ (mov r8, r8)
 8005c84:	46bd      	mov	sp, r7
 8005c86:	b006      	add	sp, #24
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	46c0      	nop			@ (mov r8, r8)
 8005c8c:	fffeff8f 	.word	0xfffeff8f
 8005c90:	40012c00 	.word	0x40012c00
 8005c94:	40014400 	.word	0x40014400
 8005c98:	40014800 	.word	0x40014800
 8005c9c:	fffffeff 	.word	0xfffffeff
 8005ca0:	fffffdff 	.word	0xfffffdff

08005ca4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	2210      	movs	r2, #16
 8005cba:	4393      	bics	r3, r2
 8005cbc:	001a      	movs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4a2c      	ldr	r2, [pc, #176]	@ (8005d84 <TIM_OC2_SetConfig+0xe0>)
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8005d88 <TIM_OC2_SetConfig+0xe4>)
 8005cda:	4013      	ands	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	021b      	lsls	r3, r3, #8
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2220      	movs	r2, #32
 8005cee:	4393      	bics	r3, r2
 8005cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a22      	ldr	r2, [pc, #136]	@ (8005d8c <TIM_OC2_SetConfig+0xe8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d10d      	bne.n	8005d22 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2280      	movs	r2, #128	@ 0x80
 8005d0a:	4393      	bics	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2240      	movs	r2, #64	@ 0x40
 8005d1e:	4393      	bics	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a19      	ldr	r2, [pc, #100]	@ (8005d8c <TIM_OC2_SetConfig+0xe8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d007      	beq.n	8005d3a <TIM_OC2_SetConfig+0x96>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a18      	ldr	r2, [pc, #96]	@ (8005d90 <TIM_OC2_SetConfig+0xec>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d003      	beq.n	8005d3a <TIM_OC2_SetConfig+0x96>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a17      	ldr	r2, [pc, #92]	@ (8005d94 <TIM_OC2_SetConfig+0xf0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d113      	bne.n	8005d62 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	4a16      	ldr	r2, [pc, #88]	@ (8005d98 <TIM_OC2_SetConfig+0xf4>)
 8005d3e:	4013      	ands	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4a15      	ldr	r2, [pc, #84]	@ (8005d9c <TIM_OC2_SetConfig+0xf8>)
 8005d46:	4013      	ands	r3, r2
 8005d48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	621a      	str	r2, [r3, #32]
}
 8005d7c:	46c0      	nop			@ (mov r8, r8)
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	b006      	add	sp, #24
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	feff8fff 	.word	0xfeff8fff
 8005d88:	fffffcff 	.word	0xfffffcff
 8005d8c:	40012c00 	.word	0x40012c00
 8005d90:	40014400 	.word	0x40014400
 8005d94:	40014800 	.word	0x40014800
 8005d98:	fffffbff 	.word	0xfffffbff
 8005d9c:	fffff7ff 	.word	0xfffff7ff

08005da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	4a31      	ldr	r2, [pc, #196]	@ (8005e7c <TIM_OC3_SetConfig+0xdc>)
 8005db6:	401a      	ands	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4a2d      	ldr	r2, [pc, #180]	@ (8005e80 <TIM_OC3_SetConfig+0xe0>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2203      	movs	r2, #3
 8005dd4:	4393      	bics	r3, r2
 8005dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	4a27      	ldr	r2, [pc, #156]	@ (8005e84 <TIM_OC3_SetConfig+0xe4>)
 8005de6:	4013      	ands	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a23      	ldr	r2, [pc, #140]	@ (8005e88 <TIM_OC3_SetConfig+0xe8>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d10d      	bne.n	8005e1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	4a22      	ldr	r2, [pc, #136]	@ (8005e8c <TIM_OC3_SetConfig+0xec>)
 8005e02:	4013      	ands	r3, r2
 8005e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	021b      	lsls	r3, r3, #8
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	4a1e      	ldr	r2, [pc, #120]	@ (8005e90 <TIM_OC3_SetConfig+0xf0>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8005e88 <TIM_OC3_SetConfig+0xe8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d007      	beq.n	8005e32 <TIM_OC3_SetConfig+0x92>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a1b      	ldr	r2, [pc, #108]	@ (8005e94 <TIM_OC3_SetConfig+0xf4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d003      	beq.n	8005e32 <TIM_OC3_SetConfig+0x92>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005e98 <TIM_OC3_SetConfig+0xf8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d113      	bne.n	8005e5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	4a19      	ldr	r2, [pc, #100]	@ (8005e9c <TIM_OC3_SetConfig+0xfc>)
 8005e36:	4013      	ands	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	4a18      	ldr	r2, [pc, #96]	@ (8005ea0 <TIM_OC3_SetConfig+0x100>)
 8005e3e:	4013      	ands	r3, r2
 8005e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	621a      	str	r2, [r3, #32]
}
 8005e74:	46c0      	nop			@ (mov r8, r8)
 8005e76:	46bd      	mov	sp, r7
 8005e78:	b006      	add	sp, #24
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	fffffeff 	.word	0xfffffeff
 8005e80:	fffeff8f 	.word	0xfffeff8f
 8005e84:	fffffdff 	.word	0xfffffdff
 8005e88:	40012c00 	.word	0x40012c00
 8005e8c:	fffff7ff 	.word	0xfffff7ff
 8005e90:	fffffbff 	.word	0xfffffbff
 8005e94:	40014400 	.word	0x40014400
 8005e98:	40014800 	.word	0x40014800
 8005e9c:	ffffefff 	.word	0xffffefff
 8005ea0:	ffffdfff 	.word	0xffffdfff

08005ea4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	4a24      	ldr	r2, [pc, #144]	@ (8005f4c <TIM_OC4_SetConfig+0xa8>)
 8005eba:	401a      	ands	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4a20      	ldr	r2, [pc, #128]	@ (8005f50 <TIM_OC4_SetConfig+0xac>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8005f54 <TIM_OC4_SetConfig+0xb0>)
 8005ed8:	4013      	ands	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	021b      	lsls	r3, r3, #8
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	4a1b      	ldr	r2, [pc, #108]	@ (8005f58 <TIM_OC4_SetConfig+0xb4>)
 8005eec:	4013      	ands	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	031b      	lsls	r3, r3, #12
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a17      	ldr	r2, [pc, #92]	@ (8005f5c <TIM_OC4_SetConfig+0xb8>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d007      	beq.n	8005f14 <TIM_OC4_SetConfig+0x70>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a16      	ldr	r2, [pc, #88]	@ (8005f60 <TIM_OC4_SetConfig+0xbc>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d003      	beq.n	8005f14 <TIM_OC4_SetConfig+0x70>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a15      	ldr	r2, [pc, #84]	@ (8005f64 <TIM_OC4_SetConfig+0xc0>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d109      	bne.n	8005f28 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	4a14      	ldr	r2, [pc, #80]	@ (8005f68 <TIM_OC4_SetConfig+0xc4>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	019b      	lsls	r3, r3, #6
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	621a      	str	r2, [r3, #32]
}
 8005f42:	46c0      	nop			@ (mov r8, r8)
 8005f44:	46bd      	mov	sp, r7
 8005f46:	b006      	add	sp, #24
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	46c0      	nop			@ (mov r8, r8)
 8005f4c:	ffffefff 	.word	0xffffefff
 8005f50:	feff8fff 	.word	0xfeff8fff
 8005f54:	fffffcff 	.word	0xfffffcff
 8005f58:	ffffdfff 	.word	0xffffdfff
 8005f5c:	40012c00 	.word	0x40012c00
 8005f60:	40014400 	.word	0x40014400
 8005f64:	40014800 	.word	0x40014800
 8005f68:	ffffbfff 	.word	0xffffbfff

08005f6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	4a21      	ldr	r2, [pc, #132]	@ (8006008 <TIM_OC5_SetConfig+0x9c>)
 8005f82:	401a      	ands	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4a1d      	ldr	r2, [pc, #116]	@ (800600c <TIM_OC5_SetConfig+0xa0>)
 8005f98:	4013      	ands	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	4a19      	ldr	r2, [pc, #100]	@ (8006010 <TIM_OC5_SetConfig+0xa4>)
 8005faa:	4013      	ands	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	041b      	lsls	r3, r3, #16
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a15      	ldr	r2, [pc, #84]	@ (8006014 <TIM_OC5_SetConfig+0xa8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d007      	beq.n	8005fd2 <TIM_OC5_SetConfig+0x66>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a14      	ldr	r2, [pc, #80]	@ (8006018 <TIM_OC5_SetConfig+0xac>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d003      	beq.n	8005fd2 <TIM_OC5_SetConfig+0x66>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a13      	ldr	r2, [pc, #76]	@ (800601c <TIM_OC5_SetConfig+0xb0>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d109      	bne.n	8005fe6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8006008 <TIM_OC5_SetConfig+0x9c>)
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	021b      	lsls	r3, r3, #8
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	621a      	str	r2, [r3, #32]
}
 8006000:	46c0      	nop			@ (mov r8, r8)
 8006002:	46bd      	mov	sp, r7
 8006004:	b006      	add	sp, #24
 8006006:	bd80      	pop	{r7, pc}
 8006008:	fffeffff 	.word	0xfffeffff
 800600c:	fffeff8f 	.word	0xfffeff8f
 8006010:	fffdffff 	.word	0xfffdffff
 8006014:	40012c00 	.word	0x40012c00
 8006018:	40014400 	.word	0x40014400
 800601c:	40014800 	.word	0x40014800

08006020 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	4a22      	ldr	r2, [pc, #136]	@ (80060c0 <TIM_OC6_SetConfig+0xa0>)
 8006036:	401a      	ands	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4a1e      	ldr	r2, [pc, #120]	@ (80060c4 <TIM_OC6_SetConfig+0xa4>)
 800604c:	4013      	ands	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	021b      	lsls	r3, r3, #8
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	4a1a      	ldr	r2, [pc, #104]	@ (80060c8 <TIM_OC6_SetConfig+0xa8>)
 8006060:	4013      	ands	r3, r2
 8006062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	051b      	lsls	r3, r3, #20
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	4313      	orrs	r3, r2
 800606e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a16      	ldr	r2, [pc, #88]	@ (80060cc <TIM_OC6_SetConfig+0xac>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d007      	beq.n	8006088 <TIM_OC6_SetConfig+0x68>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a15      	ldr	r2, [pc, #84]	@ (80060d0 <TIM_OC6_SetConfig+0xb0>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d003      	beq.n	8006088 <TIM_OC6_SetConfig+0x68>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a14      	ldr	r2, [pc, #80]	@ (80060d4 <TIM_OC6_SetConfig+0xb4>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d109      	bne.n	800609c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	4a13      	ldr	r2, [pc, #76]	@ (80060d8 <TIM_OC6_SetConfig+0xb8>)
 800608c:	4013      	ands	r3, r2
 800608e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	029b      	lsls	r3, r3, #10
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	621a      	str	r2, [r3, #32]
}
 80060b6:	46c0      	nop			@ (mov r8, r8)
 80060b8:	46bd      	mov	sp, r7
 80060ba:	b006      	add	sp, #24
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	46c0      	nop			@ (mov r8, r8)
 80060c0:	ffefffff 	.word	0xffefffff
 80060c4:	feff8fff 	.word	0xfeff8fff
 80060c8:	ffdfffff 	.word	0xffdfffff
 80060cc:	40012c00 	.word	0x40012c00
 80060d0:	40014400 	.word	0x40014400
 80060d4:	40014800 	.word	0x40014800
 80060d8:	fffbffff 	.word	0xfffbffff

080060dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	221f      	movs	r2, #31
 80060ec:	4013      	ands	r3, r2
 80060ee:	2201      	movs	r2, #1
 80060f0:	409a      	lsls	r2, r3
 80060f2:	0013      	movs	r3, r2
 80060f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	43d2      	mvns	r2, r2
 80060fe:	401a      	ands	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a1a      	ldr	r2, [r3, #32]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	211f      	movs	r1, #31
 800610c:	400b      	ands	r3, r1
 800610e:	6879      	ldr	r1, [r7, #4]
 8006110:	4099      	lsls	r1, r3
 8006112:	000b      	movs	r3, r1
 8006114:	431a      	orrs	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	621a      	str	r2, [r3, #32]
}
 800611a:	46c0      	nop			@ (mov r8, r8)
 800611c:	46bd      	mov	sp, r7
 800611e:	b006      	add	sp, #24
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	223c      	movs	r2, #60	@ 0x3c
 8006132:	5c9b      	ldrb	r3, [r3, r2]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d101      	bne.n	800613c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006138:	2302      	movs	r3, #2
 800613a:	e050      	b.n	80061de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	223c      	movs	r2, #60	@ 0x3c
 8006140:	2101      	movs	r1, #1
 8006142:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	223d      	movs	r2, #61	@ 0x3d
 8006148:	2102      	movs	r1, #2
 800614a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a21      	ldr	r2, [pc, #132]	@ (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d108      	bne.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4a20      	ldr	r2, [pc, #128]	@ (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800616a:	4013      	ands	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	4313      	orrs	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2270      	movs	r2, #112	@ 0x70
 800617c:	4393      	bics	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a14      	ldr	r2, [pc, #80]	@ (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d00a      	beq.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	2380      	movs	r3, #128	@ 0x80
 80061a2:	05db      	lsls	r3, r3, #23
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d004      	beq.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a10      	ldr	r2, [pc, #64]	@ (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d10c      	bne.n	80061cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2280      	movs	r2, #128	@ 0x80
 80061b6:	4393      	bics	r3, r2
 80061b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	223d      	movs	r2, #61	@ 0x3d
 80061d0:	2101      	movs	r1, #1
 80061d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	223c      	movs	r2, #60	@ 0x3c
 80061d8:	2100      	movs	r1, #0
 80061da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	0018      	movs	r0, r3
 80061e0:	46bd      	mov	sp, r7
 80061e2:	b004      	add	sp, #16
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	46c0      	nop			@ (mov r8, r8)
 80061e8:	40012c00 	.word	0x40012c00
 80061ec:	ff0fffff 	.word	0xff0fffff
 80061f0:	40000400 	.word	0x40000400

080061f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061fc:	46c0      	nop			@ (mov r8, r8)
 80061fe:	46bd      	mov	sp, r7
 8006200:	b002      	add	sp, #8
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800620c:	46c0      	nop			@ (mov r8, r8)
 800620e:	46bd      	mov	sp, r7
 8006210:	b002      	add	sp, #8
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800621c:	46c0      	nop			@ (mov r8, r8)
 800621e:	46bd      	mov	sp, r7
 8006220:	b002      	add	sp, #8
 8006222:	bd80      	pop	{r7, pc}

08006224 <memset>:
 8006224:	0003      	movs	r3, r0
 8006226:	1882      	adds	r2, r0, r2
 8006228:	4293      	cmp	r3, r2
 800622a:	d100      	bne.n	800622e <memset+0xa>
 800622c:	4770      	bx	lr
 800622e:	7019      	strb	r1, [r3, #0]
 8006230:	3301      	adds	r3, #1
 8006232:	e7f9      	b.n	8006228 <memset+0x4>

08006234 <__libc_init_array>:
 8006234:	b570      	push	{r4, r5, r6, lr}
 8006236:	2600      	movs	r6, #0
 8006238:	4c0c      	ldr	r4, [pc, #48]	@ (800626c <__libc_init_array+0x38>)
 800623a:	4d0d      	ldr	r5, [pc, #52]	@ (8006270 <__libc_init_array+0x3c>)
 800623c:	1b64      	subs	r4, r4, r5
 800623e:	10a4      	asrs	r4, r4, #2
 8006240:	42a6      	cmp	r6, r4
 8006242:	d109      	bne.n	8006258 <__libc_init_array+0x24>
 8006244:	2600      	movs	r6, #0
 8006246:	f000 f823 	bl	8006290 <_init>
 800624a:	4c0a      	ldr	r4, [pc, #40]	@ (8006274 <__libc_init_array+0x40>)
 800624c:	4d0a      	ldr	r5, [pc, #40]	@ (8006278 <__libc_init_array+0x44>)
 800624e:	1b64      	subs	r4, r4, r5
 8006250:	10a4      	asrs	r4, r4, #2
 8006252:	42a6      	cmp	r6, r4
 8006254:	d105      	bne.n	8006262 <__libc_init_array+0x2e>
 8006256:	bd70      	pop	{r4, r5, r6, pc}
 8006258:	00b3      	lsls	r3, r6, #2
 800625a:	58eb      	ldr	r3, [r5, r3]
 800625c:	4798      	blx	r3
 800625e:	3601      	adds	r6, #1
 8006260:	e7ee      	b.n	8006240 <__libc_init_array+0xc>
 8006262:	00b3      	lsls	r3, r6, #2
 8006264:	58eb      	ldr	r3, [r5, r3]
 8006266:	4798      	blx	r3
 8006268:	3601      	adds	r6, #1
 800626a:	e7f2      	b.n	8006252 <__libc_init_array+0x1e>
 800626c:	08006374 	.word	0x08006374
 8006270:	08006374 	.word	0x08006374
 8006274:	08006378 	.word	0x08006378
 8006278:	08006374 	.word	0x08006374

0800627c <memcpy>:
 800627c:	2300      	movs	r3, #0
 800627e:	b510      	push	{r4, lr}
 8006280:	429a      	cmp	r2, r3
 8006282:	d100      	bne.n	8006286 <memcpy+0xa>
 8006284:	bd10      	pop	{r4, pc}
 8006286:	5ccc      	ldrb	r4, [r1, r3]
 8006288:	54c4      	strb	r4, [r0, r3]
 800628a:	3301      	adds	r3, #1
 800628c:	e7f8      	b.n	8006280 <memcpy+0x4>
	...

08006290 <_init>:
 8006290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006292:	46c0      	nop			@ (mov r8, r8)
 8006294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006296:	bc08      	pop	{r3}
 8006298:	469e      	mov	lr, r3
 800629a:	4770      	bx	lr

0800629c <_fini>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	46c0      	nop			@ (mov r8, r8)
 80062a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a2:	bc08      	pop	{r3}
 80062a4:	469e      	mov	lr, r3
 80062a6:	4770      	bx	lr
