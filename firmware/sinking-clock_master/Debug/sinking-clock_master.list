
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061f4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  080062b0  080062b0  000072b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800671c  0800671c  000080a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800671c  0800671c  000080a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800671c  0800671c  000080a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800671c  0800671c  0000771c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006720  08006720  00007720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08006724  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  200000a8  080067cc  000080a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  080067cc  000083d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013dcb  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e8b  00000000  00000000  0001be9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  0001ed28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fce  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f2e  00000000  00000000  00021156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186e9  00000000  00000000  0003b084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a325b  00000000  00000000  0005376d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f69c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000514c  00000000  00000000  000f6a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000fbb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000a8 	.word	0x200000a8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006298 	.word	0x08006298

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000ac 	.word	0x200000ac
 8000100:	08006298 	.word	0x08006298

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <getRTCTime>:
				internalAlarm_initTest.AlarmTime.Minutes, internalAlarm_initTest.AlarmTime.Seconds);
	}

}

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 800023c:	68b9      	ldr	r1, [r7, #8]
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	2200      	movs	r2, #0
 8000242:	0018      	movs	r0, r3
 8000244:	f003 fcd6 	bl	8003bf4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000248:	6879      	ldr	r1, [r7, #4]
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	2200      	movs	r2, #0
 800024e:	0018      	movs	r0, r3
 8000250:	f003 fdbe 	bl	8003dd0 <HAL_RTC_GetDate>

}
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	b004      	add	sp, #16
 800025a:	bd80      	pop	{r7, pc}

0800025c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	b087      	sub	sp, #28
 8000260:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000262:	f001 fc03 	bl	8001a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000266:	f000 f851 	bl	800030c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026a:	f000 fa9b 	bl	80007a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800026e:	f000 f8b9 	bl	80003e4 <MX_ADC1_Init>
  MX_RTC_Init();
 8000272:	f000 f963 	bl	800053c <MX_RTC_Init>
  MX_I2C1_Init();
 8000276:	f000 f921 	bl	80004bc <MX_I2C1_Init>
  MX_TIM14_Init();
 800027a:	f000 fa6d 	bl	8000758 <MX_TIM14_Init>
  MX_TIM2_Init();
 800027e:	f000 fa0b 	bl	8000698 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000282:	2380      	movs	r3, #128	@ 0x80
 8000284:	0098      	lsls	r0, r3, #2
 8000286:	2380      	movs	r3, #128	@ 0x80
 8000288:	00dc      	lsls	r4, r3, #3
 800028a:	2580      	movs	r5, #128	@ 0x80
 800028c:	2640      	movs	r6, #64	@ 0x40
 800028e:	2380      	movs	r3, #128	@ 0x80
 8000290:	011a      	lsls	r2, r3, #4
 8000292:	4b17      	ldr	r3, [pc, #92]	@ (80002f0 <main+0x94>)
 8000294:	6819      	ldr	r1, [r3, #0]
 8000296:	4b17      	ldr	r3, [pc, #92]	@ (80002f4 <main+0x98>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	9303      	str	r3, [sp, #12]
 800029c:	9102      	str	r1, [sp, #8]
 800029e:	4b16      	ldr	r3, [pc, #88]	@ (80002f8 <main+0x9c>)
 80002a0:	9301      	str	r3, [sp, #4]
 80002a2:	9200      	str	r2, [sp, #0]
 80002a4:	0033      	movs	r3, r6
 80002a6:	002a      	movs	r2, r5
 80002a8:	0021      	movs	r1, r4
 80002aa:	f000 ff51 	bl	8001150 <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM);

	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 80002ae:	1dfc      	adds	r4, r7, #7
 80002b0:	f000 fb4a 	bl	8000948 <updateAndDisplayTime>
 80002b4:	0003      	movs	r3, r0
 80002b6:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 80002b8:	1dfb      	adds	r3, r7, #7
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d004      	beq.n	80002ca <main+0x6e>
		printf("HAL Error - TX current time\n\r");
 80002c0:	4b0e      	ldr	r3, [pc, #56]	@ (80002fc <main+0xa0>)
 80002c2:	0018      	movs	r0, r3
 80002c4:	f005 f94a 	bl	800555c <iprintf>
 80002c8:	e003      	b.n	80002d2 <main+0x76>
	} else {
		printf("Display Updated with current time\n\r");
 80002ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000300 <main+0xa4>)
 80002cc:	0018      	movs	r0, r3
 80002ce:	f005 f945 	bl	800555c <iprintf>
	}

	userAlarmToggle = false;			//Default to off
 80002d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <main+0xa8>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]

    // User alarm default value
    userAlarmTime.Hours = 1;
 80002d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000308 <main+0xac>)
 80002da:	2201      	movs	r2, #1
 80002dc:	701a      	strb	r2, [r3, #0]
    userAlarmTime.Minutes = 1;
 80002de:	4b0a      	ldr	r3, [pc, #40]	@ (8000308 <main+0xac>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	705a      	strb	r2, [r3, #1]
    userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80002e4:	4b08      	ldr	r3, [pc, #32]	@ (8000308 <main+0xac>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	70da      	strb	r2, [r3, #3]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80002ea:	46c0      	nop			@ (mov r8, r8)
 80002ec:	e7fd      	b.n	80002ea <main+0x8e>
 80002ee:	46c0      	nop			@ (mov r8, r8)
 80002f0:	20000020 	.word	0x20000020
 80002f4:	20000024 	.word	0x20000024
 80002f8:	2000000c 	.word	0x2000000c
 80002fc:	080062b0 	.word	0x080062b0
 8000300:	080062d0 	.word	0x080062d0
 8000304:	200000c5 	.word	0x200000c5
 8000308:	2000025c 	.word	0x2000025c

0800030c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800030c:	b590      	push	{r4, r7, lr}
 800030e:	b093      	sub	sp, #76	@ 0x4c
 8000310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000312:	2410      	movs	r4, #16
 8000314:	193b      	adds	r3, r7, r4
 8000316:	0018      	movs	r0, r3
 8000318:	2338      	movs	r3, #56	@ 0x38
 800031a:	001a      	movs	r2, r3
 800031c:	2100      	movs	r1, #0
 800031e:	f005 f979 	bl	8005614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000322:	003b      	movs	r3, r7
 8000324:	0018      	movs	r0, r3
 8000326:	2310      	movs	r3, #16
 8000328:	001a      	movs	r2, r3
 800032a:	2100      	movs	r1, #0
 800032c:	f005 f972 	bl	8005614 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000330:	2380      	movs	r3, #128	@ 0x80
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	0018      	movs	r0, r3
 8000336:	f002 fcb5 	bl	8002ca4 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800033a:	f002 fca5 	bl	8002c88 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800033e:	4b28      	ldr	r3, [pc, #160]	@ (80003e0 <SystemClock_Config+0xd4>)
 8000340:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000342:	4b27      	ldr	r3, [pc, #156]	@ (80003e0 <SystemClock_Config+0xd4>)
 8000344:	2118      	movs	r1, #24
 8000346:	438a      	bics	r2, r1
 8000348:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800034a:	193b      	adds	r3, r7, r4
 800034c:	2206      	movs	r2, #6
 800034e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000350:	193b      	adds	r3, r7, r4
 8000352:	2201      	movs	r2, #1
 8000354:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000356:	193b      	adds	r3, r7, r4
 8000358:	2280      	movs	r2, #128	@ 0x80
 800035a:	0052      	lsls	r2, r2, #1
 800035c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800035e:	0021      	movs	r1, r4
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2200      	movs	r2, #0
 8000364:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2240      	movs	r2, #64	@ 0x40
 800036a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2202      	movs	r2, #2
 8000370:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2202      	movs	r2, #2
 8000376:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2200      	movs	r2, #0
 800037c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800037e:	187b      	adds	r3, r7, r1
 8000380:	2208      	movs	r2, #8
 8000382:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000384:	187b      	adds	r3, r7, r1
 8000386:	2280      	movs	r2, #128	@ 0x80
 8000388:	0292      	lsls	r2, r2, #10
 800038a:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2280      	movs	r2, #128	@ 0x80
 8000390:	0492      	lsls	r2, r2, #18
 8000392:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000394:	187b      	adds	r3, r7, r1
 8000396:	2280      	movs	r2, #128	@ 0x80
 8000398:	0592      	lsls	r2, r2, #22
 800039a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039c:	187b      	adds	r3, r7, r1
 800039e:	0018      	movs	r0, r3
 80003a0:	f002 fcc0 	bl	8002d24 <HAL_RCC_OscConfig>
 80003a4:	1e03      	subs	r3, r0, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80003a8:	f000 fecc 	bl	8001144 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ac:	003b      	movs	r3, r7
 80003ae:	2207      	movs	r2, #7
 80003b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b2:	003b      	movs	r3, r7
 80003b4:	2202      	movs	r2, #2
 80003b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b8:	003b      	movs	r3, r7
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003be:	003b      	movs	r3, r7
 80003c0:	2200      	movs	r2, #0
 80003c2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003c4:	003b      	movs	r3, r7
 80003c6:	2102      	movs	r1, #2
 80003c8:	0018      	movs	r0, r3
 80003ca:	f002 ffc5 	bl	8003358 <HAL_RCC_ClockConfig>
 80003ce:	1e03      	subs	r3, r0, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80003d2:	f000 feb7 	bl	8001144 <Error_Handler>
  }
}
 80003d6:	46c0      	nop			@ (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b013      	add	sp, #76	@ 0x4c
 80003dc:	bd90      	pop	{r4, r7, pc}
 80003de:	46c0      	nop			@ (mov r8, r8)
 80003e0:	40021000 	.word	0x40021000

080003e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	0018      	movs	r0, r3
 80003ee:	230c      	movs	r3, #12
 80003f0:	001a      	movs	r2, r3
 80003f2:	2100      	movs	r1, #0
 80003f4:	f005 f90e 	bl	8005614 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80003f8:	4b2d      	ldr	r3, [pc, #180]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 80003fa:	4a2e      	ldr	r2, [pc, #184]	@ (80004b4 <MX_ADC1_Init+0xd0>)
 80003fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80003fe:	4b2c      	ldr	r3, [pc, #176]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 8000400:	2280      	movs	r2, #128	@ 0x80
 8000402:	05d2      	lsls	r2, r2, #23
 8000404:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000406:	4b2a      	ldr	r3, [pc, #168]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800040c:	4b28      	ldr	r3, [pc, #160]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000412:	4b27      	ldr	r3, [pc, #156]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000418:	4b25      	ldr	r3, [pc, #148]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 800041a:	2204      	movs	r2, #4
 800041c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800041e:	4b24      	ldr	r3, [pc, #144]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 8000420:	2200      	movs	r2, #0
 8000422:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000424:	4b22      	ldr	r3, [pc, #136]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 8000426:	2200      	movs	r2, #0
 8000428:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800042a:	4b21      	ldr	r3, [pc, #132]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 800042c:	2200      	movs	r2, #0
 800042e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000430:	4b1f      	ldr	r3, [pc, #124]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 8000432:	2201      	movs	r2, #1
 8000434:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000436:	4b1e      	ldr	r3, [pc, #120]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 8000438:	2220      	movs	r2, #32
 800043a:	2100      	movs	r1, #0
 800043c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800043e:	4b1c      	ldr	r3, [pc, #112]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 8000440:	2200      	movs	r2, #0
 8000442:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000444:	4b1a      	ldr	r3, [pc, #104]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 8000446:	2200      	movs	r2, #0
 8000448:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800044a:	4b19      	ldr	r3, [pc, #100]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 800044c:	222c      	movs	r2, #44	@ 0x2c
 800044e:	2100      	movs	r1, #0
 8000450:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000452:	4b17      	ldr	r3, [pc, #92]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 8000454:	2200      	movs	r2, #0
 8000456:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000458:	4b15      	ldr	r3, [pc, #84]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 800045a:	2200      	movs	r2, #0
 800045c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800045e:	4b14      	ldr	r3, [pc, #80]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 8000460:	2200      	movs	r2, #0
 8000462:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000464:	4b12      	ldr	r3, [pc, #72]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 8000466:	223c      	movs	r2, #60	@ 0x3c
 8000468:	2100      	movs	r1, #0
 800046a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800046c:	4b10      	ldr	r3, [pc, #64]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 800046e:	2200      	movs	r2, #0
 8000470:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000472:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 8000474:	0018      	movs	r0, r3
 8000476:	f001 fc7d 	bl	8001d74 <HAL_ADC_Init>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800047e:	f000 fe61 	bl	8001144 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	4a0c      	ldr	r2, [pc, #48]	@ (80004b8 <MX_ADC1_Init+0xd4>)
 8000486:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000494:	1d3a      	adds	r2, r7, #4
 8000496:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <MX_ADC1_Init+0xcc>)
 8000498:	0011      	movs	r1, r2
 800049a:	0018      	movs	r0, r3
 800049c:	f001 fe12 	bl	80020c4 <HAL_ADC_ConfigChannel>
 80004a0:	1e03      	subs	r3, r0, #0
 80004a2:	d001      	beq.n	80004a8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004a4:	f000 fe4e 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004a8:	46c0      	nop			@ (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b004      	add	sp, #16
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	200000c8 	.word	0x200000c8
 80004b4:	40012400 	.word	0x40012400
 80004b8:	08000004 	.word	0x08000004

080004bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000530 <MX_I2C1_Init+0x74>)
 80004c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000534 <MX_I2C1_Init+0x78>)
 80004c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80004c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000530 <MX_I2C1_Init+0x74>)
 80004c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000538 <MX_I2C1_Init+0x7c>)
 80004ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004cc:	4b18      	ldr	r3, [pc, #96]	@ (8000530 <MX_I2C1_Init+0x74>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004d2:	4b17      	ldr	r3, [pc, #92]	@ (8000530 <MX_I2C1_Init+0x74>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004d8:	4b15      	ldr	r3, [pc, #84]	@ (8000530 <MX_I2C1_Init+0x74>)
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004de:	4b14      	ldr	r3, [pc, #80]	@ (8000530 <MX_I2C1_Init+0x74>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004e4:	4b12      	ldr	r3, [pc, #72]	@ (8000530 <MX_I2C1_Init+0x74>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ea:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <MX_I2C1_Init+0x74>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <MX_I2C1_Init+0x74>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000530 <MX_I2C1_Init+0x74>)
 80004f8:	0018      	movs	r0, r3
 80004fa:	f002 fa87 	bl	8002a0c <HAL_I2C_Init>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000502:	f000 fe1f 	bl	8001144 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000506:	4b0a      	ldr	r3, [pc, #40]	@ (8000530 <MX_I2C1_Init+0x74>)
 8000508:	2100      	movs	r1, #0
 800050a:	0018      	movs	r0, r3
 800050c:	f002 fb24 	bl	8002b58 <HAL_I2CEx_ConfigAnalogFilter>
 8000510:	1e03      	subs	r3, r0, #0
 8000512:	d001      	beq.n	8000518 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000514:	f000 fe16 	bl	8001144 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000518:	4b05      	ldr	r3, [pc, #20]	@ (8000530 <MX_I2C1_Init+0x74>)
 800051a:	2100      	movs	r1, #0
 800051c:	0018      	movs	r0, r3
 800051e:	f002 fb67 	bl	8002bf0 <HAL_I2CEx_ConfigDigitalFilter>
 8000522:	1e03      	subs	r3, r0, #0
 8000524:	d001      	beq.n	800052a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000526:	f000 fe0d 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	2000012c 	.word	0x2000012c
 8000534:	40005400 	.word	0x40005400
 8000538:	10707dbc 	.word	0x10707dbc

0800053c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b090      	sub	sp, #64	@ 0x40
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000542:	232c      	movs	r3, #44	@ 0x2c
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	0018      	movs	r0, r3
 8000548:	2314      	movs	r3, #20
 800054a:	001a      	movs	r2, r3
 800054c:	2100      	movs	r1, #0
 800054e:	f005 f861 	bl	8005614 <memset>
  RTC_DateTypeDef sDate = {0};
 8000552:	2328      	movs	r3, #40	@ 0x28
 8000554:	18fb      	adds	r3, r7, r3
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800055a:	003b      	movs	r3, r7
 800055c:	0018      	movs	r0, r3
 800055e:	2328      	movs	r3, #40	@ 0x28
 8000560:	001a      	movs	r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	f005 f856 	bl	8005614 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000568:	4b48      	ldr	r3, [pc, #288]	@ (800068c <MX_RTC_Init+0x150>)
 800056a:	4a49      	ldr	r2, [pc, #292]	@ (8000690 <MX_RTC_Init+0x154>)
 800056c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800056e:	4b47      	ldr	r3, [pc, #284]	@ (800068c <MX_RTC_Init+0x150>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000574:	4b45      	ldr	r3, [pc, #276]	@ (800068c <MX_RTC_Init+0x150>)
 8000576:	227f      	movs	r2, #127	@ 0x7f
 8000578:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800057a:	4b44      	ldr	r3, [pc, #272]	@ (800068c <MX_RTC_Init+0x150>)
 800057c:	22ff      	movs	r2, #255	@ 0xff
 800057e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000580:	4b42      	ldr	r3, [pc, #264]	@ (800068c <MX_RTC_Init+0x150>)
 8000582:	2200      	movs	r2, #0
 8000584:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000586:	4b41      	ldr	r3, [pc, #260]	@ (800068c <MX_RTC_Init+0x150>)
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800058c:	4b3f      	ldr	r3, [pc, #252]	@ (800068c <MX_RTC_Init+0x150>)
 800058e:	2200      	movs	r2, #0
 8000590:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000592:	4b3e      	ldr	r3, [pc, #248]	@ (800068c <MX_RTC_Init+0x150>)
 8000594:	2280      	movs	r2, #128	@ 0x80
 8000596:	05d2      	lsls	r2, r2, #23
 8000598:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800059a:	4b3c      	ldr	r3, [pc, #240]	@ (800068c <MX_RTC_Init+0x150>)
 800059c:	2200      	movs	r2, #0
 800059e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005a0:	4b3a      	ldr	r3, [pc, #232]	@ (800068c <MX_RTC_Init+0x150>)
 80005a2:	0018      	movs	r0, r3
 80005a4:	f003 f9dc 	bl	8003960 <HAL_RTC_Init>
 80005a8:	1e03      	subs	r3, r0, #0
 80005aa:	d001      	beq.n	80005b0 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80005ac:	f000 fdca 	bl	8001144 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80005b0:	212c      	movs	r1, #44	@ 0x2c
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2200      	movs	r2, #0
 80005bc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2200      	movs	r2, #0
 80005c2:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2200      	movs	r2, #0
 80005c8:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80005d6:	1879      	adds	r1, r7, r1
 80005d8:	4b2c      	ldr	r3, [pc, #176]	@ (800068c <MX_RTC_Init+0x150>)
 80005da:	2201      	movs	r2, #1
 80005dc:	0018      	movs	r0, r3
 80005de:	f003 fa61 	bl	8003aa4 <HAL_RTC_SetTime>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80005e6:	f000 fdad 	bl	8001144 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80005ea:	2128      	movs	r1, #40	@ 0x28
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2201      	movs	r2, #1
 80005f6:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2201      	movs	r2, #1
 80005fc:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000604:	1879      	adds	r1, r7, r1
 8000606:	4b21      	ldr	r3, [pc, #132]	@ (800068c <MX_RTC_Init+0x150>)
 8000608:	2201      	movs	r2, #1
 800060a:	0018      	movs	r0, r3
 800060c:	f003 fb4e 	bl	8003cac <HAL_RTC_SetDate>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8000614:	f000 fd96 	bl	8001144 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000618:	003b      	movs	r3, r7
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 800061e:	003b      	movs	r3, r7
 8000620:	2201      	movs	r2, #1
 8000622:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000624:	003b      	movs	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800062a:	003b      	movs	r3, r7
 800062c:	2200      	movs	r2, #0
 800062e:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000630:	003b      	movs	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000636:	003b      	movs	r3, r7
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 800063c:	003b      	movs	r3, r7
 800063e:	4a15      	ldr	r2, [pc, #84]	@ (8000694 <MX_RTC_Init+0x158>)
 8000640:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000642:	003b      	movs	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000648:	003b      	movs	r3, r7
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800064e:	003b      	movs	r3, r7
 8000650:	2220      	movs	r2, #32
 8000652:	2101      	movs	r1, #1
 8000654:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000656:	003b      	movs	r3, r7
 8000658:	2280      	movs	r2, #128	@ 0x80
 800065a:	0052      	lsls	r2, r2, #1
 800065c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800065e:	0039      	movs	r1, r7
 8000660:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <MX_RTC_Init+0x150>)
 8000662:	2201      	movs	r2, #1
 8000664:	0018      	movs	r0, r3
 8000666:	f003 fc01 	bl	8003e6c <HAL_RTC_SetAlarm_IT>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 800066e:	f000 fd69 	bl	8001144 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000672:	4b06      	ldr	r3, [pc, #24]	@ (800068c <MX_RTC_Init+0x150>)
 8000674:	2100      	movs	r1, #0
 8000676:	0018      	movs	r0, r3
 8000678:	f003 fe68 	bl	800434c <HAL_RTCEx_SetCalibrationOutPut>
 800067c:	1e03      	subs	r3, r0, #0
 800067e:	d001      	beq.n	8000684 <MX_RTC_Init+0x148>
  {
    Error_Handler();
 8000680:	f000 fd60 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000684:	46c0      	nop			@ (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b010      	add	sp, #64	@ 0x40
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000180 	.word	0x20000180
 8000690:	40002800 	.word	0x40002800
 8000694:	80800080 	.word	0x80800080

08000698 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	@ 0x28
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069e:	231c      	movs	r3, #28
 80006a0:	18fb      	adds	r3, r7, r3
 80006a2:	0018      	movs	r0, r3
 80006a4:	230c      	movs	r3, #12
 80006a6:	001a      	movs	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	f004 ffb3 	bl	8005614 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ae:	003b      	movs	r3, r7
 80006b0:	0018      	movs	r0, r3
 80006b2:	231c      	movs	r3, #28
 80006b4:	001a      	movs	r2, r3
 80006b6:	2100      	movs	r1, #0
 80006b8:	f004 ffac 	bl	8005614 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006bc:	4b25      	ldr	r3, [pc, #148]	@ (8000754 <MX_TIM2_Init+0xbc>)
 80006be:	2280      	movs	r2, #128	@ 0x80
 80006c0:	05d2      	lsls	r2, r2, #23
 80006c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006c4:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <MX_TIM2_Init+0xbc>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ca:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <MX_TIM2_Init+0xbc>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80006d0:	4b20      	ldr	r3, [pc, #128]	@ (8000754 <MX_TIM2_Init+0xbc>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	4252      	negs	r2, r2
 80006d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <MX_TIM2_Init+0xbc>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <MX_TIM2_Init+0xbc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <MX_TIM2_Init+0xbc>)
 80006e6:	0018      	movs	r0, r3
 80006e8:	f003 ff4a 	bl	8004580 <HAL_TIM_PWM_Init>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80006f0:	f000 fd28 	bl	8001144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f4:	211c      	movs	r1, #28
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000702:	187a      	adds	r2, r7, r1
 8000704:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <MX_TIM2_Init+0xbc>)
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f004 fde3 	bl	80052d4 <HAL_TIMEx_MasterConfigSynchronization>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000712:	f000 fd17 	bl	8001144 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000716:	003b      	movs	r3, r7
 8000718:	2260      	movs	r2, #96	@ 0x60
 800071a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800071c:	003b      	movs	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000722:	003b      	movs	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000728:	003b      	movs	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800072e:	0039      	movs	r1, r7
 8000730:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <MX_TIM2_Init+0xbc>)
 8000732:	2208      	movs	r2, #8
 8000734:	0018      	movs	r0, r3
 8000736:	f004 f961 	bl	80049fc <HAL_TIM_PWM_ConfigChannel>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800073e:	f000 fd01 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000742:	4b04      	ldr	r3, [pc, #16]	@ (8000754 <MX_TIM2_Init+0xbc>)
 8000744:	0018      	movs	r0, r3
 8000746:	f001 f837 	bl	80017b8 <HAL_TIM_MspPostInit>

}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b00a      	add	sp, #40	@ 0x28
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	200001ac 	.word	0x200001ac

08000758 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800075c:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_TIM14_Init+0x40>)
 800075e:	4a0f      	ldr	r2, [pc, #60]	@ (800079c <MX_TIM14_Init+0x44>)
 8000760:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000762:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <MX_TIM14_Init+0x40>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000768:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_TIM14_Init+0x40>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800076e:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_TIM14_Init+0x40>)
 8000770:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <MX_TIM14_Init+0x48>)
 8000772:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_TIM14_Init+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077a:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <MX_TIM14_Init+0x40>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <MX_TIM14_Init+0x40>)
 8000782:	0018      	movs	r0, r3
 8000784:	f003 fe32 	bl	80043ec <HAL_TIM_Base_Init>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800078c:	f000 fcda 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000790:	46c0      	nop			@ (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	200001f8 	.word	0x200001f8
 800079c:	40002000 	.word	0x40002000
 80007a0:	0000ffff 	.word	0x0000ffff

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b08b      	sub	sp, #44	@ 0x2c
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	2414      	movs	r4, #20
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	0018      	movs	r0, r3
 80007b0:	2314      	movs	r3, #20
 80007b2:	001a      	movs	r2, r3
 80007b4:	2100      	movs	r1, #0
 80007b6:	f004 ff2d 	bl	8005614 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	4b5e      	ldr	r3, [pc, #376]	@ (8000934 <MX_GPIO_Init+0x190>)
 80007bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007be:	4b5d      	ldr	r3, [pc, #372]	@ (8000934 <MX_GPIO_Init+0x190>)
 80007c0:	2104      	movs	r1, #4
 80007c2:	430a      	orrs	r2, r1
 80007c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80007c6:	4b5b      	ldr	r3, [pc, #364]	@ (8000934 <MX_GPIO_Init+0x190>)
 80007c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007ca:	2204      	movs	r2, #4
 80007cc:	4013      	ands	r3, r2
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b58      	ldr	r3, [pc, #352]	@ (8000934 <MX_GPIO_Init+0x190>)
 80007d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007d6:	4b57      	ldr	r3, [pc, #348]	@ (8000934 <MX_GPIO_Init+0x190>)
 80007d8:	2101      	movs	r1, #1
 80007da:	430a      	orrs	r2, r1
 80007dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80007de:	4b55      	ldr	r3, [pc, #340]	@ (8000934 <MX_GPIO_Init+0x190>)
 80007e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007e2:	2201      	movs	r2, #1
 80007e4:	4013      	ands	r3, r2
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	4b52      	ldr	r3, [pc, #328]	@ (8000934 <MX_GPIO_Init+0x190>)
 80007ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007ee:	4b51      	ldr	r3, [pc, #324]	@ (8000934 <MX_GPIO_Init+0x190>)
 80007f0:	2108      	movs	r1, #8
 80007f2:	430a      	orrs	r2, r1
 80007f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80007f6:	4b4f      	ldr	r3, [pc, #316]	@ (8000934 <MX_GPIO_Init+0x190>)
 80007f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007fa:	2208      	movs	r2, #8
 80007fc:	4013      	ands	r3, r2
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	4b4c      	ldr	r3, [pc, #304]	@ (8000934 <MX_GPIO_Init+0x190>)
 8000804:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000806:	4b4b      	ldr	r3, [pc, #300]	@ (8000934 <MX_GPIO_Init+0x190>)
 8000808:	2102      	movs	r1, #2
 800080a:	430a      	orrs	r2, r1
 800080c:	635a      	str	r2, [r3, #52]	@ 0x34
 800080e:	4b49      	ldr	r3, [pc, #292]	@ (8000934 <MX_GPIO_Init+0x190>)
 8000810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000812:	2202      	movs	r2, #2
 8000814:	4013      	ands	r3, r2
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 800081a:	4947      	ldr	r1, [pc, #284]	@ (8000938 <MX_GPIO_Init+0x194>)
 800081c:	23a0      	movs	r3, #160	@ 0xa0
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	2200      	movs	r2, #0
 8000822:	0018      	movs	r0, r3
 8000824:	f002 f885 	bl	8002932 <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8000828:	4b44      	ldr	r3, [pc, #272]	@ (800093c <MX_GPIO_Init+0x198>)
 800082a:	2200      	movs	r2, #0
 800082c:	2180      	movs	r1, #128	@ 0x80
 800082e:	0018      	movs	r0, r3
 8000830:	f002 f87f 	bl	8002932 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_EN_GPIO_Port, CTOUCH_EN_Pin, GPIO_PIN_RESET);
 8000834:	2380      	movs	r3, #128	@ 0x80
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4841      	ldr	r0, [pc, #260]	@ (8000940 <MX_GPIO_Init+0x19c>)
 800083a:	2200      	movs	r2, #0
 800083c:	0019      	movs	r1, r3
 800083e:	f002 f878 	bl	8002932 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin BUZZER_OUT_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin
                           SHIFT_MCLR_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8000842:	193b      	adds	r3, r7, r4
 8000844:	4a3c      	ldr	r2, [pc, #240]	@ (8000938 <MX_GPIO_Init+0x194>)
 8000846:	601a      	str	r2, [r3, #0]
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2201      	movs	r2, #1
 800084c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	193a      	adds	r2, r7, r4
 800085c:	23a0      	movs	r3, #160	@ 0xa0
 800085e:	05db      	lsls	r3, r3, #23
 8000860:	0011      	movs	r1, r2
 8000862:	0018      	movs	r0, r3
 8000864:	f001 fee4 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8000868:	193b      	adds	r3, r7, r4
 800086a:	2280      	movs	r2, #128	@ 0x80
 800086c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2201      	movs	r2, #1
 8000872:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	193b      	adds	r3, r7, r4
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	193b      	adds	r3, r7, r4
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 8000880:	193b      	adds	r3, r7, r4
 8000882:	4a2e      	ldr	r2, [pc, #184]	@ (800093c <MX_GPIO_Init+0x198>)
 8000884:	0019      	movs	r1, r3
 8000886:	0010      	movs	r0, r2
 8000888:	f001 fed2 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 800088c:	193b      	adds	r3, r7, r4
 800088e:	2280      	movs	r2, #128	@ 0x80
 8000890:	0212      	lsls	r2, r2, #8
 8000892:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2284      	movs	r2, #132	@ 0x84
 8000898:	0392      	lsls	r2, r2, #14
 800089a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089c:	193b      	adds	r3, r7, r4
 800089e:	2201      	movs	r2, #1
 80008a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008a2:	193a      	adds	r2, r7, r4
 80008a4:	23a0      	movs	r3, #160	@ 0xa0
 80008a6:	05db      	lsls	r3, r3, #23
 80008a8:	0011      	movs	r1, r2
 80008aa:	0018      	movs	r0, r3
 80008ac:	f001 fec0 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 80008b0:	0021      	movs	r1, r4
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	220f      	movs	r2, #15
 80008b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2284      	movs	r2, #132	@ 0x84
 80008bc:	0392      	lsls	r2, r2, #14
 80008be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2201      	movs	r2, #1
 80008c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c6:	000c      	movs	r4, r1
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000944 <MX_GPIO_Init+0x1a0>)
 80008cc:	0019      	movs	r1, r3
 80008ce:	0010      	movs	r0, r2
 80008d0:	f001 feae 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_EN_Pin */
  GPIO_InitStruct.Pin = CTOUCH_EN_Pin;
 80008d4:	0021      	movs	r1, r4
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2280      	movs	r2, #128	@ 0x80
 80008da:	0092      	lsls	r2, r2, #2
 80008dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2201      	movs	r2, #1
 80008e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_EN_GPIO_Port, &GPIO_InitStruct);
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	4a13      	ldr	r2, [pc, #76]	@ (8000940 <MX_GPIO_Init+0x19c>)
 80008f4:	0019      	movs	r1, r3
 80008f6:	0010      	movs	r0, r2
 80008f8:	f001 fe9a 	bl	8002630 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2100      	movs	r1, #0
 8000900:	2005      	movs	r0, #5
 8000902:	f001 fe63 	bl	80025cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000906:	2005      	movs	r0, #5
 8000908:	f001 fe75 	bl	80025f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2100      	movs	r1, #0
 8000910:	2006      	movs	r0, #6
 8000912:	f001 fe5b 	bl	80025cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000916:	2006      	movs	r0, #6
 8000918:	f001 fe6d 	bl	80025f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2100      	movs	r1, #0
 8000920:	2007      	movs	r0, #7
 8000922:	f001 fe53 	bl	80025cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000926:	2007      	movs	r0, #7
 8000928:	f001 fe65 	bl	80025f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800092c:	46c0      	nop			@ (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b00b      	add	sp, #44	@ 0x2c
 8000932:	bd90      	pop	{r4, r7, pc}
 8000934:	40021000 	.word	0x40021000
 8000938:	00001f01 	.word	0x00001f01
 800093c:	50000800 	.word	0x50000800
 8000940:	50000400 	.word	0x50000400
 8000944:	50000c00 	.word	0x50000c00

08000948 <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8000954:	4a07      	ldr	r2, [pc, #28]	@ (8000974 <updateAndDisplayTime+0x2c>)
 8000956:	4908      	ldr	r1, [pc, #32]	@ (8000978 <updateAndDisplayTime+0x30>)
 8000958:	4b08      	ldr	r3, [pc, #32]	@ (800097c <updateAndDisplayTime+0x34>)
 800095a:	0018      	movs	r0, r3
 800095c:	f7ff fc68 	bl	8000230 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 8000960:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <updateAndDisplayTime+0x30>)
 8000962:	0018      	movs	r0, r3
 8000964:	f000 fd0c 	bl	8001380 <sevSeg_updateDigits>

	return halRet;
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	781b      	ldrb	r3, [r3, #0]

}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b002      	add	sp, #8
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000258 	.word	0x20000258
 8000978:	20000244 	.word	0x20000244
 800097c:	20000180 	.word	0x20000180

08000980 <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 800098c:	4b04      	ldr	r3, [pc, #16]	@ (80009a0 <updateAndDisplayAlarm+0x20>)
 800098e:	0018      	movs	r0, r3
 8000990:	f000 fcf6 	bl	8001380 <sevSeg_updateDigits>

	return halRet;
 8000994:	1dfb      	adds	r3, r7, #7
 8000996:	781b      	ldrb	r3, [r3, #0]

}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	b002      	add	sp, #8
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000025c 	.word	0x2000025c

080009a4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	@ 0x30
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

	  printf("Enter current time minute increment interrupt\n\r");
 80009ac:	4b28      	ldr	r3, [pc, #160]	@ (8000a50 <HAL_RTC_AlarmAEventCallback+0xac>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f004 fdd4 	bl	800555c <iprintf>

	  RTC_AlarmTypeDef sAlarm;
	  getRTCTime(hrtc, &currTime, &currDate);
 80009b4:	4a27      	ldr	r2, [pc, #156]	@ (8000a54 <HAL_RTC_AlarmAEventCallback+0xb0>)
 80009b6:	4928      	ldr	r1, [pc, #160]	@ (8000a58 <HAL_RTC_AlarmAEventCallback+0xb4>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	0018      	movs	r0, r3
 80009bc:	f7ff fc38 	bl	8000230 <getRTCTime>

	  if(sAlarm.AlarmTime.Minutes>58) {
 80009c0:	2208      	movs	r2, #8
 80009c2:	18bb      	adds	r3, r7, r2
 80009c4:	785b      	ldrb	r3, [r3, #1]
 80009c6:	2b3a      	cmp	r3, #58	@ 0x3a
 80009c8:	d907      	bls.n	80009da <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 80009ca:	18bb      	adds	r3, r7, r2
 80009cc:	2200      	movs	r2, #0
 80009ce:	705a      	strb	r2, [r3, #1]
		printf("Reset alarm time\n\r");
 80009d0:	4b22      	ldr	r3, [pc, #136]	@ (8000a5c <HAL_RTC_AlarmAEventCallback+0xb8>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f004 fdc2 	bl	800555c <iprintf>
 80009d8:	e006      	b.n	80009e8 <HAL_RTC_AlarmAEventCallback+0x44>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 80009da:	2108      	movs	r1, #8
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	785b      	ldrb	r3, [r3, #1]
 80009e0:	3301      	adds	r3, #1
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 80009e8:	46c0      	nop			@ (mov r8, r8)
 80009ea:	2308      	movs	r3, #8
 80009ec:	18f9      	adds	r1, r7, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	0018      	movs	r0, r3
 80009f4:	f003 fa3a 	bl	8003e6c <HAL_RTC_SetAlarm_IT>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d1f6      	bne.n	80009ea <HAL_RTC_AlarmAEventCallback+0x46>

	  updateAndDisplayTime();
 80009fc:	f7ff ffa4 	bl	8000948 <updateAndDisplayTime>

	  printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000a00:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <HAL_RTC_AlarmAEventCallback+0xb4>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	0019      	movs	r1, r3
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <HAL_RTC_AlarmAEventCallback+0xb4>)
 8000a08:	785b      	ldrb	r3, [r3, #1]
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <HAL_RTC_AlarmAEventCallback+0xb4>)
 8000a0e:	789b      	ldrb	r3, [r3, #2]
 8000a10:	4813      	ldr	r0, [pc, #76]	@ (8000a60 <HAL_RTC_AlarmAEventCallback+0xbc>)
 8000a12:	f004 fda3 	bl	800555c <iprintf>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 8000a16:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <HAL_RTC_AlarmAEventCallback+0xc0>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d013      	beq.n	8000a46 <HAL_RTC_AlarmAEventCallback+0xa2>
 8000a1e:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <HAL_RTC_AlarmAEventCallback+0xc4>)
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <HAL_RTC_AlarmAEventCallback+0xb4>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d10d      	bne.n	8000a46 <HAL_RTC_AlarmAEventCallback+0xa2>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <HAL_RTC_AlarmAEventCallback+0xc4>)
 8000a2c:	785a      	ldrb	r2, [r3, #1]
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <HAL_RTC_AlarmAEventCallback+0xb4>)
 8000a30:	785b      	ldrb	r3, [r3, #1]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d107      	bne.n	8000a46 <HAL_RTC_AlarmAEventCallback+0xa2>
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <HAL_RTC_AlarmAEventCallback+0xc4>)
 8000a38:	78da      	ldrb	r2, [r3, #3]
 8000a3a:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <HAL_RTC_AlarmAEventCallback+0xb4>)
 8000a3c:	78db      	ldrb	r3, [r3, #3]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d101      	bne.n	8000a46 <HAL_RTC_AlarmAEventCallback+0xa2>
		  userAlarmBeep();
 8000a42:	f000 f813 	bl	8000a6c <userAlarmBeep>
	  }

}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b00c      	add	sp, #48	@ 0x30
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	080062f4 	.word	0x080062f4
 8000a54:	20000258 	.word	0x20000258
 8000a58:	20000244 	.word	0x20000244
 8000a5c:	08006324 	.word	0x08006324
 8000a60:	08006338 	.word	0x08006338
 8000a64:	200000c5 	.word	0x200000c5
 8000a68:	2000025c 	.word	0x2000025c

08000a6c <userAlarmBeep>:

void userAlarmBeep() {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8000a72:	4b2b      	ldr	r3, [pc, #172]	@ (8000b20 <userAlarmBeep+0xb4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	0018      	movs	r0, r3
 8000a78:	f003 fd5c 	bl	8004534 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8000a7c:	4b28      	ldr	r3, [pc, #160]	@ (8000b20 <userAlarmBeep+0xb4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	0018      	movs	r0, r3
 8000a82:	f003 fd0b 	bl	800449c <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8000a86:	4b26      	ldr	r3, [pc, #152]	@ (8000b20 <userAlarmBeep+0xb4>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a8e:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8000a90:	1cfb      	adds	r3, r7, #3
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8000a96:	1cbb      	adds	r3, r7, #2
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 8000a9c:	f7ff ff54 	bl	8000948 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b20 <userAlarmBeep+0xb4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	4a1d      	ldr	r2, [pc, #116]	@ (8000b24 <userAlarmBeep+0xb8>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d924      	bls.n	8000afc <userAlarmBeep+0x90>

			sevSeg_setIntensity(timerPWM, sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b28 <userAlarmBeep+0xbc>)
 8000ab4:	6818      	ldr	r0, [r3, #0]
 8000ab6:	1cfb      	adds	r3, r7, #3
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	4a1c      	ldr	r2, [pc, #112]	@ (8000b2c <userAlarmBeep+0xc0>)
 8000abc:	5cd3      	ldrb	r3, [r2, r3]
 8000abe:	0019      	movs	r1, r3
 8000ac0:	f000 fd10 	bl	80014e4 <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(buzzerPort, buzzerPin);					// Toggle Buzzer
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <userAlarmBeep+0xc4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2280      	movs	r2, #128	@ 0x80
 8000aca:	0052      	lsls	r2, r2, #1
 8000acc:	0011      	movs	r1, r2
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f001 ff4c 	bl	800296c <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <userAlarmBeep+0xb4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000adc:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8000ade:	1cfb      	adds	r3, r7, #3
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	1e5a      	subs	r2, r3, #1
 8000ae4:	4193      	sbcs	r3, r2
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4053      	eors	r3, r2
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	001a      	movs	r2, r3
 8000af0:	1cfb      	adds	r3, r7, #3
 8000af2:	701a      	strb	r2, [r3, #0]
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	2101      	movs	r1, #1
 8000af8:	400a      	ands	r2, r1
 8000afa:	701a      	strb	r2, [r3, #0]

			//printf("Display Blink = %u\n\r", displayBlink);

		}

		i++;		// Get rid of. This is just for testing.
 8000afc:	1cbb      	adds	r3, r7, #2
 8000afe:	781a      	ldrb	r2, [r3, #0]
 8000b00:	1cbb      	adds	r3, r7, #2
 8000b02:	3201      	adds	r2, #1
 8000b04:	701a      	strb	r2, [r3, #0]

//	} while(capTouchTrigger(snoozeButtonPin));
	} while(i < 5);
 8000b06:	1cbb      	adds	r3, r7, #2
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	d9c6      	bls.n	8000a9c <userAlarmBeep+0x30>

	HAL_TIM_Base_Stop(timerDelay);
 8000b0e:	4b04      	ldr	r3, [pc, #16]	@ (8000b20 <userAlarmBeep+0xb4>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	0018      	movs	r0, r3
 8000b14:	f003 fd0e 	bl	8004534 <HAL_TIM_Base_Stop>

}
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b002      	add	sp, #8
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000020 	.word	0x20000020
 8000b24:	00007ffe 	.word	0x00007ffe
 8000b28:	20000024 	.word	0x20000024
 8000b2c:	08006640 	.word	0x08006640
 8000b30:	20000008 	.word	0x20000008

08000b34 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000b34:	b5b0      	push	{r4, r5, r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	1dbb      	adds	r3, r7, #6
 8000b3e:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8000b40:	2208      	movs	r2, #8
 8000b42:	1dbb      	adds	r3, r7, #6
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d113      	bne.n	8000b72 <HAL_GPIO_EXTI_Falling_Callback+0x3e>
		halRet = displayButtonISR();
 8000b4a:	250f      	movs	r5, #15
 8000b4c:	197c      	adds	r4, r7, r5
 8000b4e:	f000 f88f 	bl	8000c70 <displayButtonISR>
 8000b52:	0003      	movs	r3, r0
 8000b54:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000b56:	197b      	adds	r3, r7, r5
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d004      	beq.n	8000b68 <HAL_GPIO_EXTI_Falling_Callback+0x34>
			printf("Error toggling display.\n\r");
 8000b5e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c48 <HAL_GPIO_EXTI_Falling_Callback+0x114>)
 8000b60:	0018      	movs	r0, r3
 8000b62:	f004 fcfb 	bl	800555c <iprintf>
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8000b66:	e06a      	b.n	8000c3e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Display intensity toggled.\n\r");
 8000b68:	4b38      	ldr	r3, [pc, #224]	@ (8000c4c <HAL_GPIO_EXTI_Falling_Callback+0x118>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f004 fcf6 	bl	800555c <iprintf>
}
 8000b70:	e065      	b.n	8000c3e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8000b72:	2204      	movs	r2, #4
 8000b74:	1dbb      	adds	r3, r7, #6
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d113      	bne.n	8000ba4 <HAL_GPIO_EXTI_Falling_Callback+0x70>
		halRet = alarmEnableISR();
 8000b7c:	250f      	movs	r5, #15
 8000b7e:	197c      	adds	r4, r7, r5
 8000b80:	f000 f8aa 	bl	8000cd8 <alarmEnableISR>
 8000b84:	0003      	movs	r3, r0
 8000b86:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000b88:	197b      	adds	r3, r7, r5
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d004      	beq.n	8000b9a <HAL_GPIO_EXTI_Falling_Callback+0x66>
			printf("Error toggling user alarm.\n\r");
 8000b90:	4b2f      	ldr	r3, [pc, #188]	@ (8000c50 <HAL_GPIO_EXTI_Falling_Callback+0x11c>)
 8000b92:	0018      	movs	r0, r3
 8000b94:	f004 fce2 	bl	800555c <iprintf>
}
 8000b98:	e051      	b.n	8000c3e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm toggled.\n\r");
 8000b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c54 <HAL_GPIO_EXTI_Falling_Callback+0x120>)
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f004 fcdd 	bl	800555c <iprintf>
}
 8000ba2:	e04c      	b.n	8000c3e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	1dbb      	adds	r3, r7, #6
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d113      	bne.n	8000bd6 <HAL_GPIO_EXTI_Falling_Callback+0xa2>
		halRet = alarmSetISR();
 8000bae:	250f      	movs	r5, #15
 8000bb0:	197c      	adds	r4, r7, r5
 8000bb2:	f000 f8e1 	bl	8000d78 <alarmSetISR>
 8000bb6:	0003      	movs	r3, r0
 8000bb8:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000bba:	197b      	adds	r3, r7, r5
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d004      	beq.n	8000bcc <HAL_GPIO_EXTI_Falling_Callback+0x98>
			printf("Error setting user alarm.\n\r");
 8000bc2:	4b25      	ldr	r3, [pc, #148]	@ (8000c58 <HAL_GPIO_EXTI_Falling_Callback+0x124>)
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f004 fcc9 	bl	800555c <iprintf>
}
 8000bca:	e038      	b.n	8000c3e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("User alarm set.\n\r");
 8000bcc:	4b23      	ldr	r3, [pc, #140]	@ (8000c5c <HAL_GPIO_EXTI_Falling_Callback+0x128>)
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f004 fcc4 	bl	800555c <iprintf>
}
 8000bd4:	e033      	b.n	8000c3e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == hourSetButtonPin) {
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	1dbb      	adds	r3, r7, #6
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d113      	bne.n	8000c08 <HAL_GPIO_EXTI_Falling_Callback+0xd4>
		halRet = hourSetISR();
 8000be0:	250f      	movs	r5, #15
 8000be2:	197c      	adds	r4, r7, r5
 8000be4:	f000 f952 	bl	8000e8c <hourSetISR>
 8000be8:	0003      	movs	r3, r0
 8000bea:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000bec:	197b      	adds	r3, r7, r5
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d004      	beq.n	8000bfe <HAL_GPIO_EXTI_Falling_Callback+0xca>
			printf("Error incrementing hour.\n\r");
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <HAL_GPIO_EXTI_Falling_Callback+0x12c>)
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f004 fcb0 	bl	800555c <iprintf>
}
 8000bfc:	e01f      	b.n	8000c3e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Hour increment ISR success.\n\r");
 8000bfe:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <HAL_GPIO_EXTI_Falling_Callback+0x130>)
 8000c00:	0018      	movs	r0, r3
 8000c02:	f004 fcab 	bl	800555c <iprintf>
}
 8000c06:	e01a      	b.n	8000c3e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8000c08:	2380      	movs	r3, #128	@ 0x80
 8000c0a:	021b      	lsls	r3, r3, #8
 8000c0c:	1dba      	adds	r2, r7, #6
 8000c0e:	8812      	ldrh	r2, [r2, #0]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d113      	bne.n	8000c3c <HAL_GPIO_EXTI_Falling_Callback+0x108>
		halRet = minuteSetISR();
 8000c14:	250f      	movs	r5, #15
 8000c16:	197c      	adds	r4, r7, r5
 8000c18:	f000 f9cc 	bl	8000fb4 <minuteSetISR>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000c20:	197b      	adds	r3, r7, r5
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d004      	beq.n	8000c32 <HAL_GPIO_EXTI_Falling_Callback+0xfe>
			printf("Error incrementing minute.\n\r");
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <HAL_GPIO_EXTI_Falling_Callback+0x134>)
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f004 fc96 	bl	800555c <iprintf>
}
 8000c30:	e005      	b.n	8000c3e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
			printf("Minute increment ISR success.\n\r");
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <HAL_GPIO_EXTI_Falling_Callback+0x138>)
 8000c34:	0018      	movs	r0, r3
 8000c36:	f004 fc91 	bl	800555c <iprintf>
}
 8000c3a:	e000      	b.n	8000c3e <HAL_GPIO_EXTI_Falling_Callback+0x10a>
		__NOP();
 8000c3c:	46c0      	nop			@ (mov r8, r8)
}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b004      	add	sp, #16
 8000c44:	bdb0      	pop	{r4, r5, r7, pc}
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	08006358 	.word	0x08006358
 8000c4c:	08006374 	.word	0x08006374
 8000c50:	08006394 	.word	0x08006394
 8000c54:	080063b4 	.word	0x080063b4
 8000c58:	080063cc 	.word	0x080063cc
 8000c5c:	080063e8 	.word	0x080063e8
 8000c60:	080063fc 	.word	0x080063fc
 8000c64:	08006418 	.word	0x08006418
 8000c68:	08006438 	.word	0x08006438
 8000c6c:	08006458 	.word	0x08006458

08000c70 <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0

	printf("Entered display toggle ISR\n\r");
 8000c76:	4b14      	ldr	r3, [pc, #80]	@ (8000cc8 <displayButtonISR+0x58>)
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f004 fc6f 	bl	800555c <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 8000c84:	f7ff fe60 	bl	8000948 <updateAndDisplayTime>

	sevSeg_setIntensity(timerPWM, sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8000c88:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <displayButtonISR+0x5c>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <displayButtonISR+0x60>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	0019      	movs	r1, r3
 8000c92:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <displayButtonISR+0x64>)
 8000c94:	5c5b      	ldrb	r3, [r3, r1]
 8000c96:	0019      	movs	r1, r3
 8000c98:	0010      	movs	r0, r2
 8000c9a:	f000 fc23 	bl	80014e4 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <displayButtonISR+0x60>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d903      	bls.n	8000cae <displayButtonISR+0x3e>
		displayToggle = 0;
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <displayButtonISR+0x60>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
 8000cac:	e005      	b.n	8000cba <displayButtonISR+0x4a>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 8000cae:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <displayButtonISR+0x60>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <displayButtonISR+0x60>)
 8000cb8:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]

}
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b002      	add	sp, #8
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			@ (mov r8, r8)
 8000cc8:	08006478 	.word	0x08006478
 8000ccc:	20000024 	.word	0x20000024
 8000cd0:	200000c4 	.word	0x200000c4
 8000cd4:	08006640 	.word	0x08006640

08000cd8 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0

	printf("Entered alarm toggle ISR\n\r");
 8000cde:	4b20      	ldr	r3, [pc, #128]	@ (8000d60 <alarmEnableISR+0x88>)
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f004 fc3b 	bl	800555c <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8000cec:	4b1d      	ldr	r3, [pc, #116]	@ (8000d64 <alarmEnableISR+0x8c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4053      	eors	r3, r2
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d016      	beq.n	8000d28 <alarmEnableISR+0x50>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8000d68 <alarmEnableISR+0x90>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2280      	movs	r2, #128	@ 0x80
 8000d00:	0151      	lsls	r1, r2, #5
 8000d02:	2201      	movs	r2, #1
 8000d04:	0018      	movs	r0, r3
 8000d06:	f001 fe14 	bl	8002932 <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 8000d0a:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <alarmEnableISR+0x8c>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]

		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000d10:	4b16      	ldr	r3, [pc, #88]	@ (8000d6c <alarmEnableISR+0x94>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	0019      	movs	r1, r3
								userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000d16:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <alarmEnableISR+0x94>)
 8000d18:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000d1a:	001a      	movs	r2, r3
								userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000d1c:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <alarmEnableISR+0x94>)
 8000d1e:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000d20:	4813      	ldr	r0, [pc, #76]	@ (8000d70 <alarmEnableISR+0x98>)
 8000d22:	f004 fc1b 	bl	800555c <iprintf>
 8000d26:	e014      	b.n	8000d52 <alarmEnableISR+0x7a>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8000d28:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <alarmEnableISR+0x8c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d00f      	beq.n	8000d50 <alarmEnableISR+0x78>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 8000d30:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <alarmEnableISR+0x90>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2280      	movs	r2, #128	@ 0x80
 8000d36:	0151      	lsls	r1, r2, #5
 8000d38:	2200      	movs	r2, #0
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f001 fdf9 	bl	8002932 <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 8000d40:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <alarmEnableISR+0x8c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]

		printf("User alarm disabled.\n\r");
 8000d46:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <alarmEnableISR+0x9c>)
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f004 fc07 	bl	800555c <iprintf>
 8000d4e:	e000      	b.n	8000d52 <alarmEnableISR+0x7a>
	}
	else {
		__NOP();							//Code should never reach here.
 8000d50:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]

}
 8000d56:	0018      	movs	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	08006498 	.word	0x08006498
 8000d64:	200000c5 	.word	0x200000c5
 8000d68:	20000004 	.word	0x20000004
 8000d6c:	2000025c 	.word	0x2000025c
 8000d70:	080064b4 	.word	0x080064b4
 8000d74:	080064d4 	.word	0x080064d4

08000d78 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0

	printf("Enter user alarm set ISR.\n\r");
 8000d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e68 <alarmSetISR+0xf0>)
 8000d80:	0018      	movs	r0, r3
 8000d82:	f004 fbeb 	bl	800555c <iprintf>

	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000d86:	4b39      	ldr	r3, [pc, #228]	@ (8000e6c <alarmSetISR+0xf4>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	0019      	movs	r1, r3
			userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000d8c:	4b37      	ldr	r3, [pc, #220]	@ (8000e6c <alarmSetISR+0xf4>)
 8000d8e:	785b      	ldrb	r3, [r3, #1]
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000d90:	001a      	movs	r2, r3
			userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000d92:	4b36      	ldr	r3, [pc, #216]	@ (8000e6c <alarmSetISR+0xf4>)
 8000d94:	789b      	ldrb	r3, [r3, #2]
	printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
 8000d96:	4836      	ldr	r0, [pc, #216]	@ (8000e70 <alarmSetISR+0xf8>)
 8000d98:	f004 fbe0 	bl	800555c <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 8000d9c:	1cbb      	adds	r3, r7, #2
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Stop(timerDelay);
 8000da2:	4b34      	ldr	r3, [pc, #208]	@ (8000e74 <alarmSetISR+0xfc>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	0018      	movs	r0, r3
 8000da8:	f003 fbc4 	bl	8004534 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8000dac:	4b31      	ldr	r3, [pc, #196]	@ (8000e74 <alarmSetISR+0xfc>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	0018      	movs	r0, r3
 8000db2:	f003 fb73 	bl	800449c <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8000db6:	4b2f      	ldr	r3, [pc, #188]	@ (8000e74 <alarmSetISR+0xfc>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dbe:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8000dc0:	1cfb      	adds	r3, r7, #3
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]

	do {											// while the alarm set button is not held down, blink display.

		updateAndDisplayAlarm();
 8000dc6:	f7ff fddb 	bl	8000980 <updateAndDisplayAlarm>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 8000dca:	4b2a      	ldr	r3, [pc, #168]	@ (8000e74 <alarmSetISR+0xfc>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	1ad2      	subs	r2, r2, r3
 8000dd6:	2380      	movs	r3, #128	@ 0x80
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d31c      	bcc.n	8000e18 <alarmSetISR+0xa0>

			sevSeg_setIntensity (timerPWM, sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 8000dde:	4b26      	ldr	r3, [pc, #152]	@ (8000e78 <alarmSetISR+0x100>)
 8000de0:	6818      	ldr	r0, [r3, #0]
 8000de2:	1cfb      	adds	r3, r7, #3
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	4a25      	ldr	r2, [pc, #148]	@ (8000e7c <alarmSetISR+0x104>)
 8000de8:	5cd3      	ldrb	r3, [r2, r3]
 8000dea:	0019      	movs	r1, r3
 8000dec:	f000 fb7a 	bl	80014e4 <sevSeg_setIntensity>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 8000df0:	4b20      	ldr	r3, [pc, #128]	@ (8000e74 <alarmSetISR+0xfc>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df8:	607b      	str	r3, [r7, #4]
			displayBlink = !displayBlink;
 8000dfa:	1cfb      	adds	r3, r7, #3
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	1e5a      	subs	r2, r3, #1
 8000e00:	4193      	sbcs	r3, r2
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2201      	movs	r2, #1
 8000e06:	4053      	eors	r3, r2
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	001a      	movs	r2, r3
 8000e0c:	1cfb      	adds	r3, r7, #3
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	781a      	ldrb	r2, [r3, #0]
 8000e12:	2101      	movs	r1, #1
 8000e14:	400a      	ands	r2, r1
 8000e16:	701a      	strb	r2, [r3, #0]

		}

	}while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET);
 8000e18:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <alarmSetISR+0x108>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	0011      	movs	r1, r2
 8000e20:	0018      	movs	r0, r3
 8000e22:	f001 fd69 	bl	80028f8 <HAL_GPIO_ReadPin>
 8000e26:	1e03      	subs	r3, r0, #0
 8000e28:	d0cd      	beq.n	8000dc6 <alarmSetISR+0x4e>

	sevSeg_setIntensity(timerPWM, sevSeg_intensityDuty[1]);			// Turn display back to full intensity
 8000e2a:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <alarmSetISR+0x100>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	225a      	movs	r2, #90	@ 0x5a
 8000e30:	0011      	movs	r1, r2
 8000e32:	0018      	movs	r0, r3
 8000e34:	f000 fb56 	bl	80014e4 <sevSeg_setIntensity>

	HAL_TIM_Base_Stop(timerDelay);
 8000e38:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <alarmSetISR+0xfc>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f003 fb79 	bl	8004534 <HAL_TIM_Base_Stop>

	updateAndDisplayTime();
 8000e42:	f7ff fd81 	bl	8000948 <updateAndDisplayTime>
	printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000e46:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <alarmSetISR+0x10c>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <alarmSetISR+0x10c>)
 8000e4e:	785b      	ldrb	r3, [r3, #1]
 8000e50:	001a      	movs	r2, r3
 8000e52:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <alarmSetISR+0x10c>)
 8000e54:	789b      	ldrb	r3, [r3, #2]
 8000e56:	480c      	ldr	r0, [pc, #48]	@ (8000e88 <alarmSetISR+0x110>)
 8000e58:	f004 fb80 	bl	800555c <iprintf>

	return halRet;
 8000e5c:	1cbb      	adds	r3, r7, #2
 8000e5e:	781b      	ldrb	r3, [r3, #0]

}
 8000e60:	0018      	movs	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b002      	add	sp, #8
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	080064ec 	.word	0x080064ec
 8000e6c:	2000025c 	.word	0x2000025c
 8000e70:	08006508 	.word	0x08006508
 8000e74:	20000020 	.word	0x20000020
 8000e78:	20000024 	.word	0x20000024
 8000e7c:	08006640 	.word	0x08006640
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000244 	.word	0x20000244
 8000e88:	08006530 	.word	0x08006530

08000e8c <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0

	printf("Entered hour set ISR.\n\r");
 8000e92:	4b40      	ldr	r3, [pc, #256]	@ (8000f94 <hourSetISR+0x108>)
 8000e94:	0018      	movs	r0, r3
 8000e96:	f004 fb61 	bl	800555c <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 8000ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8000f98 <hourSetISR+0x10c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f001 fd25 	bl	80028f8 <HAL_GPIO_ReadPin>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d02a      	beq.n	8000f0a <hourSetISR+0x7e>

		if(userAlarmTime.Hours >= 12) {
 8000eb4:	4b39      	ldr	r3, [pc, #228]	@ (8000f9c <hourSetISR+0x110>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b0b      	cmp	r3, #11
 8000eba:	d90e      	bls.n	8000eda <hourSetISR+0x4e>
			userAlarmTime.Hours = 1;
 8000ebc:	4b37      	ldr	r3, [pc, #220]	@ (8000f9c <hourSetISR+0x110>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8000ec2:	4b36      	ldr	r3, [pc, #216]	@ (8000f9c <hourSetISR+0x110>)
 8000ec4:	78db      	ldrb	r3, [r3, #3]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d103      	bne.n	8000ed2 <hourSetISR+0x46>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8000eca:	4b34      	ldr	r3, [pc, #208]	@ (8000f9c <hourSetISR+0x110>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	70da      	strb	r2, [r3, #3]
 8000ed0:	e00f      	b.n	8000ef2 <hourSetISR+0x66>
			} else {
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000ed2:	4b32      	ldr	r3, [pc, #200]	@ (8000f9c <hourSetISR+0x110>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	70da      	strb	r2, [r3, #3]
 8000ed8:	e00b      	b.n	8000ef2 <hourSetISR+0x66>
			}
		}
		else if(userAlarmTime.Hours < 12) {
 8000eda:	4b30      	ldr	r3, [pc, #192]	@ (8000f9c <hourSetISR+0x110>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b0b      	cmp	r3, #11
 8000ee0:	d806      	bhi.n	8000ef0 <hourSetISR+0x64>
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8000ee2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f9c <hourSetISR+0x110>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b2c      	ldr	r3, [pc, #176]	@ (8000f9c <hourSetISR+0x110>)
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	e000      	b.n	8000ef2 <hourSetISR+0x66>
		}
		else {
			__NOP();
 8000ef0:	46c0      	nop			@ (mov r8, r8)
		}

		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 8000ef2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f9c <hourSetISR+0x110>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	0019      	movs	r1, r3
				userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000ef8:	4b28      	ldr	r3, [pc, #160]	@ (8000f9c <hourSetISR+0x110>)
 8000efa:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 8000efc:	001a      	movs	r2, r3
				userAlarmTime.Minutes, userAlarmTime.Seconds);
 8000efe:	4b27      	ldr	r3, [pc, #156]	@ (8000f9c <hourSetISR+0x110>)
 8000f00:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm hour incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 8000f02:	4827      	ldr	r0, [pc, #156]	@ (8000fa0 <hourSetISR+0x114>)
 8000f04:	f004 fb2a 	bl	800555c <iprintf>
 8000f08:	e03d      	b.n	8000f86 <hourSetISR+0xfa>

	}
	else {									// Otherwise, change current time hour.

		getRTCTime(&hrtc, &currTime, &currDate);
 8000f0a:	4a26      	ldr	r2, [pc, #152]	@ (8000fa4 <hourSetISR+0x118>)
 8000f0c:	4926      	ldr	r1, [pc, #152]	@ (8000fa8 <hourSetISR+0x11c>)
 8000f0e:	4b27      	ldr	r3, [pc, #156]	@ (8000fac <hourSetISR+0x120>)
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff f98d 	bl	8000230 <getRTCTime>
		if(currTime.Hours >= 12) {
 8000f16:	4b24      	ldr	r3, [pc, #144]	@ (8000fa8 <hourSetISR+0x11c>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b0b      	cmp	r3, #11
 8000f1c:	d90e      	bls.n	8000f3c <hourSetISR+0xb0>
			currTime.Hours = 1;
 8000f1e:	4b22      	ldr	r3, [pc, #136]	@ (8000fa8 <hourSetISR+0x11c>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
			if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8000f24:	4b20      	ldr	r3, [pc, #128]	@ (8000fa8 <hourSetISR+0x11c>)
 8000f26:	78db      	ldrb	r3, [r3, #3]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d103      	bne.n	8000f34 <hourSetISR+0xa8>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <hourSetISR+0x11c>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	70da      	strb	r2, [r3, #3]
 8000f32:	e00f      	b.n	8000f54 <hourSetISR+0xc8>
			} else {
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000f34:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <hourSetISR+0x11c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	70da      	strb	r2, [r3, #3]
 8000f3a:	e00b      	b.n	8000f54 <hourSetISR+0xc8>
			}
		}
		else if(currTime.Hours < 12) {
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <hourSetISR+0x11c>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b0b      	cmp	r3, #11
 8000f42:	d806      	bhi.n	8000f52 <hourSetISR+0xc6>
			currTime.Hours = currTime.Hours + 1;
 8000f44:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <hourSetISR+0x11c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <hourSetISR+0x11c>)
 8000f4e:	701a      	strb	r2, [r3, #0]
 8000f50:	e000      	b.n	8000f54 <hourSetISR+0xc8>
		}
		else {
			__NOP();
 8000f52:	46c0      	nop			@ (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8000f54:	4914      	ldr	r1, [pc, #80]	@ (8000fa8 <hourSetISR+0x11c>)
 8000f56:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <hourSetISR+0x120>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f002 fda2 	bl	8003aa4 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8000f60:	f7ff fcf2 	bl	8000948 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8000f64:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa4 <hourSetISR+0x118>)
 8000f66:	4910      	ldr	r1, [pc, #64]	@ (8000fa8 <hourSetISR+0x11c>)
 8000f68:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <hourSetISR+0x120>)
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f7ff f960 	bl	8000230 <getRTCTime>

		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 8000f70:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa8 <hourSetISR+0x11c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 8000f76:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <hourSetISR+0x11c>)
 8000f78:	785b      	ldrb	r3, [r3, #1]
		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 8000f7a:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <hourSetISR+0x11c>)
 8000f7e:	789b      	ldrb	r3, [r3, #2]
		printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
 8000f80:	480b      	ldr	r0, [pc, #44]	@ (8000fb0 <hourSetISR+0x124>)
 8000f82:	f004 faeb 	bl	800555c <iprintf>
	}

	return halRet;
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	781b      	ldrb	r3, [r3, #0]
}
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b002      	add	sp, #8
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	08006554 	.word	0x08006554
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	2000025c 	.word	0x2000025c
 8000fa0:	0800656c 	.word	0x0800656c
 8000fa4:	20000258 	.word	0x20000258
 8000fa8:	20000244 	.word	0x20000244
 8000fac:	20000180 	.word	0x20000180
 8000fb0:	08006598 	.word	0x08006598

08000fb4 <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0

	printf("Entered minute set ISR.\n\r");
 8000fba:	4b5a      	ldr	r3, [pc, #360]	@ (8001124 <minuteSetISR+0x170>)
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f004 facd 	bl	800555c <iprintf>

	HAL_StatusTypeDef halRet = HAL_OK;
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == !GPIO_PIN_SET) {	// If the alarm set button is held down, change user alarm time hour
 8000fc8:	4b57      	ldr	r3, [pc, #348]	@ (8001128 <minuteSetISR+0x174>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2202      	movs	r2, #2
 8000fce:	0011      	movs	r1, r2
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f001 fc91 	bl	80028f8 <HAL_GPIO_ReadPin>
 8000fd6:	1e03      	subs	r3, r0, #0
 8000fd8:	d145      	bne.n	8001066 <minuteSetISR+0xb2>

		if(userAlarmTime.Minutes >= 59) {
 8000fda:	4b54      	ldr	r3, [pc, #336]	@ (800112c <minuteSetISR+0x178>)
 8000fdc:	785b      	ldrb	r3, [r3, #1]
 8000fde:	2b3a      	cmp	r3, #58	@ 0x3a
 8000fe0:	d929      	bls.n	8001036 <minuteSetISR+0x82>
			userAlarmTime.Minutes = 0;
 8000fe2:	4b52      	ldr	r3, [pc, #328]	@ (800112c <minuteSetISR+0x178>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	705a      	strb	r2, [r3, #1]
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8000fe8:	4b50      	ldr	r3, [pc, #320]	@ (800112c <minuteSetISR+0x178>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	3301      	adds	r3, #1
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b4e      	ldr	r3, [pc, #312]	@ (800112c <minuteSetISR+0x178>)
 8000ff2:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.Hours > 12) {
 8000ff4:	4b4d      	ldr	r3, [pc, #308]	@ (800112c <minuteSetISR+0x178>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b0c      	cmp	r3, #12
 8000ffa:	d902      	bls.n	8001002 <minuteSetISR+0x4e>
				userAlarmTime.Hours = 1;
 8000ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800112c <minuteSetISR+0x178>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
			}
			if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001002:	4b4a      	ldr	r3, [pc, #296]	@ (800112c <minuteSetISR+0x178>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b0c      	cmp	r3, #12
 8001008:	d107      	bne.n	800101a <minuteSetISR+0x66>
 800100a:	4b48      	ldr	r3, [pc, #288]	@ (800112c <minuteSetISR+0x178>)
 800100c:	78db      	ldrb	r3, [r3, #3]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d103      	bne.n	800101a <minuteSetISR+0x66>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001012:	4b46      	ldr	r3, [pc, #280]	@ (800112c <minuteSetISR+0x178>)
 8001014:	2201      	movs	r2, #1
 8001016:	70da      	strb	r2, [r3, #3]
 8001018:	e019      	b.n	800104e <minuteSetISR+0x9a>
			} else if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 800101a:	4b44      	ldr	r3, [pc, #272]	@ (800112c <minuteSetISR+0x178>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b0c      	cmp	r3, #12
 8001020:	d107      	bne.n	8001032 <minuteSetISR+0x7e>
 8001022:	4b42      	ldr	r3, [pc, #264]	@ (800112c <minuteSetISR+0x178>)
 8001024:	78db      	ldrb	r3, [r3, #3]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d103      	bne.n	8001032 <minuteSetISR+0x7e>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800102a:	4b40      	ldr	r3, [pc, #256]	@ (800112c <minuteSetISR+0x178>)
 800102c:	2200      	movs	r2, #0
 800102e:	70da      	strb	r2, [r3, #3]
 8001030:	e00d      	b.n	800104e <minuteSetISR+0x9a>
			}
			else {
				__NOP();
 8001032:	46c0      	nop			@ (mov r8, r8)
 8001034:	e00b      	b.n	800104e <minuteSetISR+0x9a>
			}
		}
		else if(userAlarmTime.Minutes < 59) {
 8001036:	4b3d      	ldr	r3, [pc, #244]	@ (800112c <minuteSetISR+0x178>)
 8001038:	785b      	ldrb	r3, [r3, #1]
 800103a:	2b3a      	cmp	r3, #58	@ 0x3a
 800103c:	d806      	bhi.n	800104c <minuteSetISR+0x98>
			userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 800103e:	4b3b      	ldr	r3, [pc, #236]	@ (800112c <minuteSetISR+0x178>)
 8001040:	785b      	ldrb	r3, [r3, #1]
 8001042:	3301      	adds	r3, #1
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4b39      	ldr	r3, [pc, #228]	@ (800112c <minuteSetISR+0x178>)
 8001048:	705a      	strb	r2, [r3, #1]
 800104a:	e000      	b.n	800104e <minuteSetISR+0x9a>
		}
		else {
			__NOP();
 800104c:	46c0      	nop			@ (mov r8, r8)
		}

		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 800104e:	4b37      	ldr	r3, [pc, #220]	@ (800112c <minuteSetISR+0x178>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	0019      	movs	r1, r3
				userAlarmTime.Minutes, userAlarmTime.Seconds);
 8001054:	4b35      	ldr	r3, [pc, #212]	@ (800112c <minuteSetISR+0x178>)
 8001056:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 8001058:	001a      	movs	r2, r3
				userAlarmTime.Minutes, userAlarmTime.Seconds);
 800105a:	4b34      	ldr	r3, [pc, #208]	@ (800112c <minuteSetISR+0x178>)
 800105c:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm minute incremented to %u:%u:%u\n\r", userAlarmTime.Hours,
 800105e:	4834      	ldr	r0, [pc, #208]	@ (8001130 <minuteSetISR+0x17c>)
 8001060:	f004 fa7c 	bl	800555c <iprintf>
 8001064:	e058      	b.n	8001118 <minuteSetISR+0x164>

	}
	else {									// Otherwise, change current time hour.

		getRTCTime(&hrtc, &currTime, &currDate);
 8001066:	4a33      	ldr	r2, [pc, #204]	@ (8001134 <minuteSetISR+0x180>)
 8001068:	4933      	ldr	r1, [pc, #204]	@ (8001138 <minuteSetISR+0x184>)
 800106a:	4b34      	ldr	r3, [pc, #208]	@ (800113c <minuteSetISR+0x188>)
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff f8df 	bl	8000230 <getRTCTime>

		if(currTime.Minutes >= 59) {
 8001072:	4b31      	ldr	r3, [pc, #196]	@ (8001138 <minuteSetISR+0x184>)
 8001074:	785b      	ldrb	r3, [r3, #1]
 8001076:	2b3a      	cmp	r3, #58	@ 0x3a
 8001078:	d929      	bls.n	80010ce <minuteSetISR+0x11a>
			currTime.Minutes = 0;
 800107a:	4b2f      	ldr	r3, [pc, #188]	@ (8001138 <minuteSetISR+0x184>)
 800107c:	2200      	movs	r2, #0
 800107e:	705a      	strb	r2, [r3, #1]
			currTime.Hours = currTime.Hours + 1;
 8001080:	4b2d      	ldr	r3, [pc, #180]	@ (8001138 <minuteSetISR+0x184>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b2b      	ldr	r3, [pc, #172]	@ (8001138 <minuteSetISR+0x184>)
 800108a:	701a      	strb	r2, [r3, #0]
			if(currTime.Hours > 12) {
 800108c:	4b2a      	ldr	r3, [pc, #168]	@ (8001138 <minuteSetISR+0x184>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b0c      	cmp	r3, #12
 8001092:	d902      	bls.n	800109a <minuteSetISR+0xe6>
				currTime.Hours = 1;
 8001094:	4b28      	ldr	r3, [pc, #160]	@ (8001138 <minuteSetISR+0x184>)
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
			}
			if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800109a:	4b27      	ldr	r3, [pc, #156]	@ (8001138 <minuteSetISR+0x184>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b0c      	cmp	r3, #12
 80010a0:	d107      	bne.n	80010b2 <minuteSetISR+0xfe>
 80010a2:	4b25      	ldr	r3, [pc, #148]	@ (8001138 <minuteSetISR+0x184>)
 80010a4:	78db      	ldrb	r3, [r3, #3]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d103      	bne.n	80010b2 <minuteSetISR+0xfe>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80010aa:	4b23      	ldr	r3, [pc, #140]	@ (8001138 <minuteSetISR+0x184>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	70da      	strb	r2, [r3, #3]
 80010b0:	e019      	b.n	80010e6 <minuteSetISR+0x132>
			} else if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 80010b2:	4b21      	ldr	r3, [pc, #132]	@ (8001138 <minuteSetISR+0x184>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b0c      	cmp	r3, #12
 80010b8:	d107      	bne.n	80010ca <minuteSetISR+0x116>
 80010ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001138 <minuteSetISR+0x184>)
 80010bc:	78db      	ldrb	r3, [r3, #3]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d103      	bne.n	80010ca <minuteSetISR+0x116>
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80010c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <minuteSetISR+0x184>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	70da      	strb	r2, [r3, #3]
 80010c8:	e00d      	b.n	80010e6 <minuteSetISR+0x132>
			}
			else {
				__NOP();
 80010ca:	46c0      	nop			@ (mov r8, r8)
 80010cc:	e00b      	b.n	80010e6 <minuteSetISR+0x132>
			}
		}
		else if(currTime.Minutes < 59) {
 80010ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001138 <minuteSetISR+0x184>)
 80010d0:	785b      	ldrb	r3, [r3, #1]
 80010d2:	2b3a      	cmp	r3, #58	@ 0x3a
 80010d4:	d806      	bhi.n	80010e4 <minuteSetISR+0x130>
			currTime.Minutes = currTime.Minutes + 1;
 80010d6:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <minuteSetISR+0x184>)
 80010d8:	785b      	ldrb	r3, [r3, #1]
 80010da:	3301      	adds	r3, #1
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <minuteSetISR+0x184>)
 80010e0:	705a      	strb	r2, [r3, #1]
 80010e2:	e000      	b.n	80010e6 <minuteSetISR+0x132>
		}
		else {
			__NOP();
 80010e4:	46c0      	nop			@ (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80010e6:	4914      	ldr	r1, [pc, #80]	@ (8001138 <minuteSetISR+0x184>)
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <minuteSetISR+0x188>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	0018      	movs	r0, r3
 80010ee:	f002 fcd9 	bl	8003aa4 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80010f2:	f7ff fc29 	bl	8000948 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80010f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001134 <minuteSetISR+0x180>)
 80010f8:	490f      	ldr	r1, [pc, #60]	@ (8001138 <minuteSetISR+0x184>)
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <minuteSetISR+0x188>)
 80010fc:	0018      	movs	r0, r3
 80010fe:	f7ff f897 	bl	8000230 <getRTCTime>

		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001102:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <minuteSetISR+0x184>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	0019      	movs	r1, r3
				currTime.Minutes, currTime.Seconds);
 8001108:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <minuteSetISR+0x184>)
 800110a:	785b      	ldrb	r3, [r3, #1]
		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 800110c:	001a      	movs	r2, r3
				currTime.Minutes, currTime.Seconds);
 800110e:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <minuteSetISR+0x184>)
 8001110:	789b      	ldrb	r3, [r3, #2]
		printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
 8001112:	480b      	ldr	r0, [pc, #44]	@ (8001140 <minuteSetISR+0x18c>)
 8001114:	f004 fa22 	bl	800555c <iprintf>
	}

	return halRet;
 8001118:	1dfb      	adds	r3, r7, #7
 800111a:	781b      	ldrb	r3, [r3, #0]
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}
 8001124:	080065c8 	.word	0x080065c8
 8001128:	20000000 	.word	0x20000000
 800112c:	2000025c 	.word	0x2000025c
 8001130:	080065e4 	.word	0x080065e4
 8001134:	20000258 	.word	0x20000258
 8001138:	20000244 	.word	0x20000244
 800113c:	20000180 	.word	0x20000180
 8001140:	08006610 	.word	0x08006610

08001144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
}
 800114a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800114c:	46c0      	nop			@ (mov r8, r8)
 800114e:	e7fd      	b.n	800114c <Error_Handler+0x8>

08001150 <sevSeg_Init>:
GPIO_PinState GPIOPinSet[2] = {GPIO_PIN_RESET, GPIO_PIN_SET};


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM) {
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	0005      	movs	r5, r0
 8001158:	000c      	movs	r4, r1
 800115a:	0010      	movs	r0, r2
 800115c:	0019      	movs	r1, r3
 800115e:	1dbb      	adds	r3, r7, #6
 8001160:	1c2a      	adds	r2, r5, #0
 8001162:	801a      	strh	r2, [r3, #0]
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	1c22      	adds	r2, r4, #0
 8001168:	801a      	strh	r2, [r3, #0]
 800116a:	1cbb      	adds	r3, r7, #2
 800116c:	1c02      	adds	r2, r0, #0
 800116e:	801a      	strh	r2, [r3, #0]
 8001170:	003b      	movs	r3, r7
 8001172:	1c0a      	adds	r2, r1, #0
 8001174:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001176:	4b7a      	ldr	r3, [pc, #488]	@ (8001360 <sevSeg_Init+0x210>)
 8001178:	1dba      	adds	r2, r7, #6
 800117a:	8812      	ldrh	r2, [r2, #0]
 800117c:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 800117e:	4b79      	ldr	r3, [pc, #484]	@ (8001364 <sevSeg_Init+0x214>)
 8001180:	1d3a      	adds	r2, r7, #4
 8001182:	8812      	ldrh	r2, [r2, #0]
 8001184:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001186:	4b78      	ldr	r3, [pc, #480]	@ (8001368 <sevSeg_Init+0x218>)
 8001188:	1cba      	adds	r2, r7, #2
 800118a:	8812      	ldrh	r2, [r2, #0]
 800118c:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 800118e:	4b77      	ldr	r3, [pc, #476]	@ (800136c <sevSeg_Init+0x21c>)
 8001190:	003a      	movs	r2, r7
 8001192:	8812      	ldrh	r2, [r2, #0]
 8001194:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001196:	4a76      	ldr	r2, [pc, #472]	@ (8001370 <sevSeg_Init+0x220>)
 8001198:	2330      	movs	r3, #48	@ 0x30
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	8013      	strh	r3, [r2, #0]

	for(int i = 0; i < 5; i++) {
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
 80011a4:	e00b      	b.n	80011be <sevSeg_Init+0x6e>
		portArray[i] = GPIOPortArray[i];
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011ac:	18d3      	adds	r3, r2, r3
 80011ae:	6819      	ldr	r1, [r3, #0]
 80011b0:	4b70      	ldr	r3, [pc, #448]	@ (8001374 <sevSeg_Init+0x224>)
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	0092      	lsls	r2, r2, #2
 80011b6:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	3301      	adds	r3, #1
 80011bc:	61fb      	str	r3, [r7, #28]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	ddf0      	ble.n	80011a6 <sevSeg_Init+0x56>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 80011c4:	4b6b      	ldr	r3, [pc, #428]	@ (8001374 <sevSeg_Init+0x224>)
 80011c6:	6918      	ldr	r0, [r3, #16]
 80011c8:	4b69      	ldr	r3, [pc, #420]	@ (8001370 <sevSeg_Init+0x220>)
 80011ca:	8819      	ldrh	r1, [r3, #0]
 80011cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001378 <sevSeg_Init+0x228>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	001a      	movs	r2, r3
 80011d2:	f001 fbae 	bl	8002932 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 80011d6:	4b67      	ldr	r3, [pc, #412]	@ (8001374 <sevSeg_Init+0x224>)
 80011d8:	6918      	ldr	r0, [r3, #16]
 80011da:	4b65      	ldr	r3, [pc, #404]	@ (8001370 <sevSeg_Init+0x220>)
 80011dc:	8819      	ldrh	r1, [r3, #0]
 80011de:	4b66      	ldr	r3, [pc, #408]	@ (8001378 <sevSeg_Init+0x228>)
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	001a      	movs	r2, r3
 80011e4:	f001 fba5 	bl	8002932 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80011e8:	4b62      	ldr	r3, [pc, #392]	@ (8001374 <sevSeg_Init+0x224>)
 80011ea:	6898      	ldr	r0, [r3, #8]
 80011ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001368 <sevSeg_Init+0x218>)
 80011ee:	8819      	ldrh	r1, [r3, #0]
 80011f0:	4b61      	ldr	r3, [pc, #388]	@ (8001378 <sevSeg_Init+0x228>)
 80011f2:	785b      	ldrb	r3, [r3, #1]
 80011f4:	001a      	movs	r2, r3
 80011f6:	f001 fb9c 	bl	8002932 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80011fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001374 <sevSeg_Init+0x224>)
 80011fc:	6898      	ldr	r0, [r3, #8]
 80011fe:	4b5a      	ldr	r3, [pc, #360]	@ (8001368 <sevSeg_Init+0x218>)
 8001200:	8819      	ldrh	r1, [r3, #0]
 8001202:	4b5d      	ldr	r3, [pc, #372]	@ (8001378 <sevSeg_Init+0x228>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	001a      	movs	r2, r3
 8001208:	f001 fb93 	bl	8002932 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 800120c:	4b59      	ldr	r3, [pc, #356]	@ (8001374 <sevSeg_Init+0x224>)
 800120e:	68d8      	ldr	r0, [r3, #12]
 8001210:	4b56      	ldr	r3, [pc, #344]	@ (800136c <sevSeg_Init+0x21c>)
 8001212:	8819      	ldrh	r1, [r3, #0]
 8001214:	4b58      	ldr	r3, [pc, #352]	@ (8001378 <sevSeg_Init+0x228>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	001a      	movs	r2, r3
 800121a:	f001 fb8a 	bl	8002932 <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(htim_PWM, 90);
 800121e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001220:	215a      	movs	r1, #90	@ 0x5a
 8001222:	0018      	movs	r0, r3
 8001224:	f000 f95e 	bl	80014e4 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8001228:	2308      	movs	r3, #8
 800122a:	18fb      	adds	r3, r7, r3
 800122c:	4a53      	ldr	r2, [pc, #332]	@ (800137c <sevSeg_Init+0x22c>)
 800122e:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	e038      	b.n	80012a8 <sevSeg_Init+0x158>

		sendByte = hofSymb[i];
 8001236:	231b      	movs	r3, #27
 8001238:	18fb      	adds	r3, r7, r3
 800123a:	2208      	movs	r2, #8
 800123c:	18b9      	adds	r1, r7, r2
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	188a      	adds	r2, r1, r2
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	e027      	b.n	800129c <sevSeg_Init+0x14c>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 800124c:	4b49      	ldr	r3, [pc, #292]	@ (8001374 <sevSeg_Init+0x224>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	4b43      	ldr	r3, [pc, #268]	@ (8001360 <sevSeg_Init+0x210>)
 8001252:	8819      	ldrh	r1, [r3, #0]
 8001254:	241b      	movs	r4, #27
 8001256:	193b      	adds	r3, r7, r4
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2201      	movs	r2, #1
 800125c:	4013      	ands	r3, r2
 800125e:	4a46      	ldr	r2, [pc, #280]	@ (8001378 <sevSeg_Init+0x228>)
 8001260:	5cd3      	ldrb	r3, [r2, r3]
 8001262:	001a      	movs	r2, r3
 8001264:	f001 fb65 	bl	8002932 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001268:	4b42      	ldr	r3, [pc, #264]	@ (8001374 <sevSeg_Init+0x224>)
 800126a:	6858      	ldr	r0, [r3, #4]
 800126c:	4b3d      	ldr	r3, [pc, #244]	@ (8001364 <sevSeg_Init+0x214>)
 800126e:	8819      	ldrh	r1, [r3, #0]
 8001270:	4b41      	ldr	r3, [pc, #260]	@ (8001378 <sevSeg_Init+0x228>)
 8001272:	785b      	ldrb	r3, [r3, #1]
 8001274:	001a      	movs	r2, r3
 8001276:	f001 fb5c 	bl	8002932 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 800127a:	4b3e      	ldr	r3, [pc, #248]	@ (8001374 <sevSeg_Init+0x224>)
 800127c:	6858      	ldr	r0, [r3, #4]
 800127e:	4b39      	ldr	r3, [pc, #228]	@ (8001364 <sevSeg_Init+0x214>)
 8001280:	8819      	ldrh	r1, [r3, #0]
 8001282:	4b3d      	ldr	r3, [pc, #244]	@ (8001378 <sevSeg_Init+0x228>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	001a      	movs	r2, r3
 8001288:	f001 fb53 	bl	8002932 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 800128c:	193b      	adds	r3, r7, r4
 800128e:	193a      	adds	r2, r7, r4
 8001290:	7812      	ldrb	r2, [r2, #0]
 8001292:	0852      	lsrs	r2, r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	3301      	adds	r3, #1
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	2b07      	cmp	r3, #7
 80012a0:	ddd4      	ble.n	800124c <sevSeg_Init+0xfc>
	for(int i = 0; i <= 3; i++) {
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	ddc3      	ble.n	8001236 <sevSeg_Init+0xe6>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80012ae:	4b31      	ldr	r3, [pc, #196]	@ (8001374 <sevSeg_Init+0x224>)
 80012b0:	6898      	ldr	r0, [r3, #8]
 80012b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001368 <sevSeg_Init+0x218>)
 80012b4:	8819      	ldrh	r1, [r3, #0]
 80012b6:	4b30      	ldr	r3, [pc, #192]	@ (8001378 <sevSeg_Init+0x228>)
 80012b8:	785b      	ldrb	r3, [r3, #1]
 80012ba:	001a      	movs	r2, r3
 80012bc:	f001 fb39 	bl	8002932 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80012c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001374 <sevSeg_Init+0x224>)
 80012c2:	6898      	ldr	r0, [r3, #8]
 80012c4:	4b28      	ldr	r3, [pc, #160]	@ (8001368 <sevSeg_Init+0x218>)
 80012c6:	8819      	ldrh	r1, [r3, #0]
 80012c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001378 <sevSeg_Init+0x228>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	001a      	movs	r2, r3
 80012ce:	f001 fb30 	bl	8002932 <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 80012d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012d4:	0018      	movs	r0, r3
 80012d6:	f003 f92d 	bl	8004534 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 80012da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012dc:	0018      	movs	r0, r3
 80012de:	f003 f8dd 	bl	800449c <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 80012e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e8:	60fb      	str	r3, [r7, #12]
	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 2)){ timerVal = __HAL_TIM_GET_COUNTER(htim); }
 80012ea:	e003      	b.n	80012f4 <sevSeg_Init+0x1a4>
 80012ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1ad2      	subs	r2, r2, r3
 80012fe:	2380      	movs	r3, #128	@ 0x80
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	429a      	cmp	r2, r3
 8001304:	d3f2      	bcc.n	80012ec <sevSeg_Init+0x19c>

	HAL_TIM_Base_Stop(htim);
 8001306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001308:	0018      	movs	r0, r3
 800130a:	f003 f913 	bl	8004534 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 800130e:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <sevSeg_Init+0x224>)
 8001310:	6918      	ldr	r0, [r3, #16]
 8001312:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <sevSeg_Init+0x220>)
 8001314:	8819      	ldrh	r1, [r3, #0]
 8001316:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <sevSeg_Init+0x228>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	001a      	movs	r2, r3
 800131c:	f001 fb09 	bl	8002932 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001320:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <sevSeg_Init+0x224>)
 8001322:	6918      	ldr	r0, [r3, #16]
 8001324:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <sevSeg_Init+0x220>)
 8001326:	8819      	ldrh	r1, [r3, #0]
 8001328:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <sevSeg_Init+0x228>)
 800132a:	785b      	ldrb	r3, [r3, #1]
 800132c:	001a      	movs	r2, r3
 800132e:	f001 fb00 	bl	8002932 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001332:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <sevSeg_Init+0x224>)
 8001334:	6898      	ldr	r0, [r3, #8]
 8001336:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <sevSeg_Init+0x218>)
 8001338:	8819      	ldrh	r1, [r3, #0]
 800133a:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <sevSeg_Init+0x228>)
 800133c:	785b      	ldrb	r3, [r3, #1]
 800133e:	001a      	movs	r2, r3
 8001340:	f001 faf7 	bl	8002932 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <sevSeg_Init+0x224>)
 8001346:	6898      	ldr	r0, [r3, #8]
 8001348:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <sevSeg_Init+0x218>)
 800134a:	8819      	ldrh	r1, [r3, #0]
 800134c:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <sevSeg_Init+0x228>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	001a      	movs	r2, r3
 8001352:	f001 faee 	bl	8002932 <HAL_GPIO_WritePin>

}
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	b008      	add	sp, #32
 800135c:	bdb0      	pop	{r4, r5, r7, pc}
 800135e:	46c0      	nop			@ (mov r8, r8)
 8001360:	20000270 	.word	0x20000270
 8001364:	20000272 	.word	0x20000272
 8001368:	20000274 	.word	0x20000274
 800136c:	20000276 	.word	0x20000276
 8001370:	20000278 	.word	0x20000278
 8001374:	20000028 	.word	0x20000028
 8001378:	2000003c 	.word	0x2000003c
 800137c:	471d3700 	.word	0x471d3700

08001380 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	210a      	movs	r1, #10
 800138e:	0018      	movs	r0, r3
 8001390:	f7fe fec2 	bl	8000118 <__udivsi3>
 8001394:	0003      	movs	r3, r0
 8001396:	b2da      	uxtb	r2, r3
 8001398:	2408      	movs	r4, #8
 800139a:	193b      	adds	r3, r7, r4
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	210a      	movs	r1, #10
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7fe ff3d 	bl	8000224 <__aeabi_uidivmod>
 80013aa:	000b      	movs	r3, r1
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	193b      	adds	r3, r7, r4
 80013b0:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80013b6:	210a      	movs	r1, #10
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7fe fead 	bl	8000118 <__udivsi3>
 80013be:	0003      	movs	r3, r0
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	193b      	adds	r3, r7, r4
 80013c4:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80013ca:	210a      	movs	r1, #10
 80013cc:	0018      	movs	r0, r3
 80013ce:	f7fe ff29 	bl	8000224 <__aeabi_uidivmod>
 80013d2:	000b      	movs	r3, r1
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	193b      	adds	r3, r7, r4
 80013d8:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 80013da:	2116      	movs	r1, #22
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	78db      	ldrb	r3, [r3, #3]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d102      	bne.n	80013f0 <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	2202      	movs	r2, #2
 80013ee:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	e04f      	b.n	8001496 <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 80013f6:	2308      	movs	r3, #8
 80013f8:	18fa      	adds	r2, r7, r3
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	18d3      	adds	r3, r2, r3
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	0019      	movs	r1, r3
 8001402:	2417      	movs	r4, #23
 8001404:	193b      	adds	r3, r7, r4
 8001406:	4a30      	ldr	r2, [pc, #192]	@ (80014c8 <sevSeg_updateDigits+0x148>)
 8001408:	5c52      	ldrb	r2, [r2, r1]
 800140a:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d110      	bne.n	8001434 <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	210a      	movs	r1, #10
 8001418:	0018      	movs	r0, r3
 800141a:	f7fe fe7d 	bl	8000118 <__udivsi3>
 800141e:	0003      	movs	r3, r0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	001a      	movs	r2, r3
 8001424:	2316      	movs	r3, #22
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	18d2      	adds	r2, r2, r3
 800142c:	193b      	adds	r3, r7, r4
 800142e:	4927      	ldr	r1, [pc, #156]	@ (80014cc <sevSeg_updateDigits+0x14c>)
 8001430:	5c8a      	ldrb	r2, [r1, r2]
 8001432:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	e027      	b.n	800148a <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 800143a:	4b25      	ldr	r3, [pc, #148]	@ (80014d0 <sevSeg_updateDigits+0x150>)
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	4b25      	ldr	r3, [pc, #148]	@ (80014d4 <sevSeg_updateDigits+0x154>)
 8001440:	8819      	ldrh	r1, [r3, #0]
 8001442:	2417      	movs	r4, #23
 8001444:	193b      	adds	r3, r7, r4
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2201      	movs	r2, #1
 800144a:	4013      	ands	r3, r2
 800144c:	4a22      	ldr	r2, [pc, #136]	@ (80014d8 <sevSeg_updateDigits+0x158>)
 800144e:	5cd3      	ldrb	r3, [r2, r3]
 8001450:	001a      	movs	r2, r3
 8001452:	f001 fa6e 	bl	8002932 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001456:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <sevSeg_updateDigits+0x150>)
 8001458:	6858      	ldr	r0, [r3, #4]
 800145a:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <sevSeg_updateDigits+0x15c>)
 800145c:	8819      	ldrh	r1, [r3, #0]
 800145e:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <sevSeg_updateDigits+0x158>)
 8001460:	785b      	ldrb	r3, [r3, #1]
 8001462:	001a      	movs	r2, r3
 8001464:	f001 fa65 	bl	8002932 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001468:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <sevSeg_updateDigits+0x150>)
 800146a:	6858      	ldr	r0, [r3, #4]
 800146c:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <sevSeg_updateDigits+0x15c>)
 800146e:	8819      	ldrh	r1, [r3, #0]
 8001470:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <sevSeg_updateDigits+0x158>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	001a      	movs	r2, r3
 8001476:	f001 fa5c 	bl	8002932 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 800147a:	193b      	adds	r3, r7, r4
 800147c:	193a      	adds	r2, r7, r4
 800147e:	7812      	ldrb	r2, [r2, #0]
 8001480:	0852      	lsrs	r2, r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3301      	adds	r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b07      	cmp	r3, #7
 800148e:	ddd4      	ble.n	800143a <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	3301      	adds	r3, #1
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	2b03      	cmp	r3, #3
 800149a:	ddac      	ble.n	80013f6 <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 800149c:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <sevSeg_updateDigits+0x150>)
 800149e:	6898      	ldr	r0, [r3, #8]
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <sevSeg_updateDigits+0x160>)
 80014a2:	8819      	ldrh	r1, [r3, #0]
 80014a4:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <sevSeg_updateDigits+0x158>)
 80014a6:	785b      	ldrb	r3, [r3, #1]
 80014a8:	001a      	movs	r2, r3
 80014aa:	f001 fa42 	bl	8002932 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80014ae:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <sevSeg_updateDigits+0x150>)
 80014b0:	6898      	ldr	r0, [r3, #8]
 80014b2:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <sevSeg_updateDigits+0x160>)
 80014b4:	8819      	ldrh	r1, [r3, #0]
 80014b6:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <sevSeg_updateDigits+0x158>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	001a      	movs	r2, r3
 80014bc:	f001 fa39 	bl	8002932 <HAL_GPIO_WritePin>

	return;
 80014c0:	46c0      	nop			@ (mov r8, r8)

}
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b007      	add	sp, #28
 80014c6:	bd90      	pop	{r4, r7, pc}
 80014c8:	08006644 	.word	0x08006644
 80014cc:	08006650 	.word	0x08006650
 80014d0:	20000028 	.word	0x20000028
 80014d4:	20000270 	.word	0x20000270
 80014d8:	2000003c 	.word	0x2000003c
 80014dc:	20000272 	.word	0x20000272
 80014e0:	20000274 	.word	0x20000274

080014e4 <sevSeg_setIntensity>:

void sevSeg_setIntensity(TIM_HandleTypeDef *htim_PWM, uint16_t dutyCycle) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	000a      	movs	r2, r1
 80014ee:	1cbb      	adds	r3, r7, #2
 80014f0:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(htim_PWM, TIM_CHANNEL_2, dutyCycle);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	1cba      	adds	r2, r7, #2
 80014f8:	8812      	ldrh	r2, [r2, #0]
 80014fa:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_PWM_Start(htim_PWM, TIM_CHANNEL_2);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2104      	movs	r1, #4
 8001500:	0018      	movs	r0, r3
 8001502:	f003 f895 	bl	8004630 <HAL_TIM_PWM_Start>

}
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b002      	add	sp, #8
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <HAL_MspInit+0x44>)
 8001518:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <HAL_MspInit+0x44>)
 800151c:	2101      	movs	r1, #1
 800151e:	430a      	orrs	r2, r1
 8001520:	641a      	str	r2, [r3, #64]	@ 0x40
 8001522:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <HAL_MspInit+0x44>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	2201      	movs	r2, #1
 8001528:	4013      	ands	r3, r2
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <HAL_MspInit+0x44>)
 8001530:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001532:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <HAL_MspInit+0x44>)
 8001534:	2180      	movs	r1, #128	@ 0x80
 8001536:	0549      	lsls	r1, r1, #21
 8001538:	430a      	orrs	r2, r1
 800153a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800153c:	4b05      	ldr	r3, [pc, #20]	@ (8001554 <HAL_MspInit+0x44>)
 800153e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001540:	2380      	movs	r3, #128	@ 0x80
 8001542:	055b      	lsls	r3, r3, #21
 8001544:	4013      	ands	r3, r2
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	46bd      	mov	sp, r7
 800154e:	b002      	add	sp, #8
 8001550:	bd80      	pop	{r7, pc}
 8001552:	46c0      	nop			@ (mov r8, r8)
 8001554:	40021000 	.word	0x40021000

08001558 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b08b      	sub	sp, #44	@ 0x2c
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	2414      	movs	r4, #20
 8001562:	193b      	adds	r3, r7, r4
 8001564:	0018      	movs	r0, r3
 8001566:	2314      	movs	r3, #20
 8001568:	001a      	movs	r2, r3
 800156a:	2100      	movs	r1, #0
 800156c:	f004 f852 	bl	8005614 <memset>
  if(hadc->Instance==ADC1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a18      	ldr	r2, [pc, #96]	@ (80015d8 <HAL_ADC_MspInit+0x80>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d129      	bne.n	80015ce <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800157a:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <HAL_ADC_MspInit+0x84>)
 800157c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800157e:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <HAL_ADC_MspInit+0x84>)
 8001580:	2180      	movs	r1, #128	@ 0x80
 8001582:	0349      	lsls	r1, r1, #13
 8001584:	430a      	orrs	r2, r1
 8001586:	641a      	str	r2, [r3, #64]	@ 0x40
 8001588:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <HAL_ADC_MspInit+0x84>)
 800158a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800158c:	2380      	movs	r3, #128	@ 0x80
 800158e:	035b      	lsls	r3, r3, #13
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <HAL_ADC_MspInit+0x84>)
 8001598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <HAL_ADC_MspInit+0x84>)
 800159c:	2101      	movs	r1, #1
 800159e:	430a      	orrs	r2, r1
 80015a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80015a2:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <HAL_ADC_MspInit+0x84>)
 80015a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015a6:	2201      	movs	r2, #1
 80015a8:	4013      	ands	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015ae:	193b      	adds	r3, r7, r4
 80015b0:	2204      	movs	r2, #4
 80015b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b4:	193b      	adds	r3, r7, r4
 80015b6:	2203      	movs	r2, #3
 80015b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	193b      	adds	r3, r7, r4
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	193a      	adds	r2, r7, r4
 80015c2:	23a0      	movs	r3, #160	@ 0xa0
 80015c4:	05db      	lsls	r3, r3, #23
 80015c6:	0011      	movs	r1, r2
 80015c8:	0018      	movs	r0, r3
 80015ca:	f001 f831 	bl	8002630 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015ce:	46c0      	nop			@ (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b00b      	add	sp, #44	@ 0x2c
 80015d4:	bd90      	pop	{r4, r7, pc}
 80015d6:	46c0      	nop			@ (mov r8, r8)
 80015d8:	40012400 	.word	0x40012400
 80015dc:	40021000 	.word	0x40021000

080015e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b095      	sub	sp, #84	@ 0x54
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	233c      	movs	r3, #60	@ 0x3c
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	0018      	movs	r0, r3
 80015ee:	2314      	movs	r3, #20
 80015f0:	001a      	movs	r2, r3
 80015f2:	2100      	movs	r1, #0
 80015f4:	f004 f80e 	bl	8005614 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f8:	2414      	movs	r4, #20
 80015fa:	193b      	adds	r3, r7, r4
 80015fc:	0018      	movs	r0, r3
 80015fe:	2328      	movs	r3, #40	@ 0x28
 8001600:	001a      	movs	r2, r3
 8001602:	2100      	movs	r1, #0
 8001604:	f004 f806 	bl	8005614 <memset>
  if(hi2c->Instance==I2C1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a22      	ldr	r2, [pc, #136]	@ (8001698 <HAL_I2C_MspInit+0xb8>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d13d      	bne.n	800168e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001612:	193b      	adds	r3, r7, r4
 8001614:	2220      	movs	r2, #32
 8001616:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001618:	193b      	adds	r3, r7, r4
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800161e:	193b      	adds	r3, r7, r4
 8001620:	0018      	movs	r0, r3
 8001622:	f002 f823 	bl	800366c <HAL_RCCEx_PeriphCLKConfig>
 8001626:	1e03      	subs	r3, r0, #0
 8001628:	d001      	beq.n	800162e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800162a:	f7ff fd8b 	bl	8001144 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <HAL_I2C_MspInit+0xbc>)
 8001630:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001632:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <HAL_I2C_MspInit+0xbc>)
 8001634:	2102      	movs	r1, #2
 8001636:	430a      	orrs	r2, r1
 8001638:	635a      	str	r2, [r3, #52]	@ 0x34
 800163a:	4b18      	ldr	r3, [pc, #96]	@ (800169c <HAL_I2C_MspInit+0xbc>)
 800163c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800163e:	2202      	movs	r2, #2
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001646:	213c      	movs	r1, #60	@ 0x3c
 8001648:	187b      	adds	r3, r7, r1
 800164a:	22c0      	movs	r2, #192	@ 0xc0
 800164c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164e:	187b      	adds	r3, r7, r1
 8001650:	2212      	movs	r2, #18
 8001652:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	187b      	adds	r3, r7, r1
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	187b      	adds	r3, r7, r1
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001660:	187b      	adds	r3, r7, r1
 8001662:	2206      	movs	r2, #6
 8001664:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	187b      	adds	r3, r7, r1
 8001668:	4a0d      	ldr	r2, [pc, #52]	@ (80016a0 <HAL_I2C_MspInit+0xc0>)
 800166a:	0019      	movs	r1, r3
 800166c:	0010      	movs	r0, r2
 800166e:	f000 ffdf 	bl	8002630 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001672:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <HAL_I2C_MspInit+0xbc>)
 8001674:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001676:	4b09      	ldr	r3, [pc, #36]	@ (800169c <HAL_I2C_MspInit+0xbc>)
 8001678:	2180      	movs	r1, #128	@ 0x80
 800167a:	0389      	lsls	r1, r1, #14
 800167c:	430a      	orrs	r2, r1
 800167e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_I2C_MspInit+0xbc>)
 8001682:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001684:	2380      	movs	r3, #128	@ 0x80
 8001686:	039b      	lsls	r3, r3, #14
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	46bd      	mov	sp, r7
 8001692:	b015      	add	sp, #84	@ 0x54
 8001694:	bd90      	pop	{r4, r7, pc}
 8001696:	46c0      	nop			@ (mov r8, r8)
 8001698:	40005400 	.word	0x40005400
 800169c:	40021000 	.word	0x40021000
 80016a0:	50000400 	.word	0x50000400

080016a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b08f      	sub	sp, #60	@ 0x3c
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016ac:	2410      	movs	r4, #16
 80016ae:	193b      	adds	r3, r7, r4
 80016b0:	0018      	movs	r0, r3
 80016b2:	2328      	movs	r3, #40	@ 0x28
 80016b4:	001a      	movs	r2, r3
 80016b6:	2100      	movs	r1, #0
 80016b8:	f003 ffac 	bl	8005614 <memset>
  if(hrtc->Instance==RTC)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a19      	ldr	r2, [pc, #100]	@ (8001728 <HAL_RTC_MspInit+0x84>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d12c      	bne.n	8001720 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016c6:	193b      	adds	r3, r7, r4
 80016c8:	2280      	movs	r2, #128	@ 0x80
 80016ca:	0292      	lsls	r2, r2, #10
 80016cc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016ce:	193b      	adds	r3, r7, r4
 80016d0:	2280      	movs	r2, #128	@ 0x80
 80016d2:	0052      	lsls	r2, r2, #1
 80016d4:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d6:	193b      	adds	r3, r7, r4
 80016d8:	0018      	movs	r0, r3
 80016da:	f001 ffc7 	bl	800366c <HAL_RCCEx_PeriphCLKConfig>
 80016de:	1e03      	subs	r3, r0, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80016e2:	f7ff fd2f 	bl	8001144 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016e6:	4b11      	ldr	r3, [pc, #68]	@ (800172c <HAL_RTC_MspInit+0x88>)
 80016e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <HAL_RTC_MspInit+0x88>)
 80016ec:	2180      	movs	r1, #128	@ 0x80
 80016ee:	0209      	lsls	r1, r1, #8
 80016f0:	430a      	orrs	r2, r1
 80016f2:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80016f4:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <HAL_RTC_MspInit+0x88>)
 80016f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <HAL_RTC_MspInit+0x88>)
 80016fa:	2180      	movs	r1, #128	@ 0x80
 80016fc:	00c9      	lsls	r1, r1, #3
 80016fe:	430a      	orrs	r2, r1
 8001700:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001702:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <HAL_RTC_MspInit+0x88>)
 8001704:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001706:	2380      	movs	r3, #128	@ 0x80
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4013      	ands	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	2002      	movs	r0, #2
 8001716:	f000 ff59 	bl	80025cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800171a:	2002      	movs	r0, #2
 800171c:	f000 ff6b 	bl	80025f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001720:	46c0      	nop			@ (mov r8, r8)
 8001722:	46bd      	mov	sp, r7
 8001724:	b00f      	add	sp, #60	@ 0x3c
 8001726:	bd90      	pop	{r4, r7, pc}
 8001728:	40002800 	.word	0x40002800
 800172c:	40021000 	.word	0x40021000

08001730 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	2380      	movs	r3, #128	@ 0x80
 800173e:	05db      	lsls	r3, r3, #23
 8001740:	429a      	cmp	r2, r3
 8001742:	d10b      	bne.n	800175c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001744:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <HAL_TIM_PWM_MspInit+0x34>)
 8001746:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_TIM_PWM_MspInit+0x34>)
 800174a:	2101      	movs	r1, #1
 800174c:	430a      	orrs	r2, r1
 800174e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001750:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <HAL_TIM_PWM_MspInit+0x34>)
 8001752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001754:	2201      	movs	r2, #1
 8001756:	4013      	ands	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800175c:	46c0      	nop			@ (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	b004      	add	sp, #16
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40021000 	.word	0x40021000

08001768 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0e      	ldr	r2, [pc, #56]	@ (80017b0 <HAL_TIM_Base_MspInit+0x48>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d115      	bne.n	80017a6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800177a:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <HAL_TIM_Base_MspInit+0x4c>)
 800177c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800177e:	4b0d      	ldr	r3, [pc, #52]	@ (80017b4 <HAL_TIM_Base_MspInit+0x4c>)
 8001780:	2180      	movs	r1, #128	@ 0x80
 8001782:	0209      	lsls	r1, r1, #8
 8001784:	430a      	orrs	r2, r1
 8001786:	641a      	str	r2, [r3, #64]	@ 0x40
 8001788:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <HAL_TIM_Base_MspInit+0x4c>)
 800178a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800178c:	2380      	movs	r3, #128	@ 0x80
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	4013      	ands	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	2013      	movs	r0, #19
 800179c:	f000 ff16 	bl	80025cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80017a0:	2013      	movs	r0, #19
 80017a2:	f000 ff28 	bl	80025f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80017a6:	46c0      	nop			@ (mov r8, r8)
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b004      	add	sp, #16
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			@ (mov r8, r8)
 80017b0:	40002000 	.word	0x40002000
 80017b4:	40021000 	.word	0x40021000

080017b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b089      	sub	sp, #36	@ 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	240c      	movs	r4, #12
 80017c2:	193b      	adds	r3, r7, r4
 80017c4:	0018      	movs	r0, r3
 80017c6:	2314      	movs	r3, #20
 80017c8:	001a      	movs	r2, r3
 80017ca:	2100      	movs	r1, #0
 80017cc:	f003 ff22 	bl	8005614 <memset>
  if(htim->Instance==TIM2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2380      	movs	r3, #128	@ 0x80
 80017d6:	05db      	lsls	r3, r3, #23
 80017d8:	429a      	cmp	r2, r3
 80017da:	d121      	bne.n	8001820 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <HAL_TIM_MspPostInit+0x70>)
 80017de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <HAL_TIM_MspPostInit+0x70>)
 80017e2:	2104      	movs	r1, #4
 80017e4:	430a      	orrs	r2, r1
 80017e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80017e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <HAL_TIM_MspPostInit+0x70>)
 80017ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ec:	2204      	movs	r2, #4
 80017ee:	4013      	ands	r3, r2
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 80017f4:	0021      	movs	r1, r4
 80017f6:	187b      	adds	r3, r7, r1
 80017f8:	2240      	movs	r2, #64	@ 0x40
 80017fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	187b      	adds	r3, r7, r1
 80017fe:	2202      	movs	r2, #2
 8001800:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	187b      	adds	r3, r7, r1
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	187b      	adds	r3, r7, r1
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800180e:	187b      	adds	r3, r7, r1
 8001810:	2202      	movs	r2, #2
 8001812:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 8001814:	187b      	adds	r3, r7, r1
 8001816:	4a05      	ldr	r2, [pc, #20]	@ (800182c <HAL_TIM_MspPostInit+0x74>)
 8001818:	0019      	movs	r1, r3
 800181a:	0010      	movs	r0, r2
 800181c:	f000 ff08 	bl	8002630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001820:	46c0      	nop			@ (mov r8, r8)
 8001822:	46bd      	mov	sp, r7
 8001824:	b009      	add	sp, #36	@ 0x24
 8001826:	bd90      	pop	{r4, r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	50000800 	.word	0x50000800

08001830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001834:	46c0      	nop			@ (mov r8, r8)
 8001836:	e7fd      	b.n	8001834 <NMI_Handler+0x4>

08001838 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183c:	46c0      	nop			@ (mov r8, r8)
 800183e:	e7fd      	b.n	800183c <HardFault_Handler+0x4>

08001840 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001844:	46c0      	nop			@ (mov r8, r8)
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184e:	46c0      	nop			@ (mov r8, r8)
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001858:	f000 f972 	bl	8001b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185c:	46c0      	nop			@ (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001868:	4b03      	ldr	r3, [pc, #12]	@ (8001878 <RTC_TAMP_IRQHandler+0x14>)
 800186a:	0018      	movs	r0, r3
 800186c:	f002 fc3e 	bl	80040ec <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8001870:	46c0      	nop			@ (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	46c0      	nop			@ (mov r8, r8)
 8001878:	20000180 	.word	0x20000180

0800187c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 8001880:	2001      	movs	r0, #1
 8001882:	f001 f88f 	bl	80029a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 8001886:	2002      	movs	r0, #2
 8001888:	f001 f88c 	bl	80029a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800188c:	46c0      	nop			@ (mov r8, r8)
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 8001896:	2004      	movs	r0, #4
 8001898:	f001 f884 	bl	80029a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 800189c:	2008      	movs	r0, #8
 800189e:	f001 f881 	bl	80029a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80018a2:	46c0      	nop			@ (mov r8, r8)
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 80018ac:	2380      	movs	r3, #128	@ 0x80
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	0018      	movs	r0, r3
 80018b2:	f001 f877 	bl	80029a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80018c0:	4b03      	ldr	r3, [pc, #12]	@ (80018d0 <TIM14_IRQHandler+0x14>)
 80018c2:	0018      	movs	r0, r3
 80018c4:	f002 ff92 	bl	80047ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80018c8:	46c0      	nop			@ (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	46c0      	nop			@ (mov r8, r8)
 80018d0:	200001f8 	.word	0x200001f8

080018d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	e00a      	b.n	80018fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018e6:	e000      	b.n	80018ea <_read+0x16>
 80018e8:	bf00      	nop
 80018ea:	0001      	movs	r1, r0
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	60ba      	str	r2, [r7, #8]
 80018f2:	b2ca      	uxtb	r2, r1
 80018f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	dbf0      	blt.n	80018e6 <_read+0x12>
  }

  return len;
 8001904:	687b      	ldr	r3, [r7, #4]
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b006      	add	sp, #24
 800190c:	bd80      	pop	{r7, pc}

0800190e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	e009      	b.n	8001934 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	60ba      	str	r2, [r7, #8]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	0018      	movs	r0, r3
 800192a:	e000      	b.n	800192e <_write+0x20>
 800192c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	dbf1      	blt.n	8001920 <_write+0x12>
  }
  return len;
 800193c:	687b      	ldr	r3, [r7, #4]
}
 800193e:	0018      	movs	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	b006      	add	sp, #24
 8001944:	bd80      	pop	{r7, pc}

08001946 <_close>:

int _close(int file)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800194e:	2301      	movs	r3, #1
 8001950:	425b      	negs	r3, r3
}
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	b002      	add	sp, #8
 8001958:	bd80      	pop	{r7, pc}

0800195a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2280      	movs	r2, #128	@ 0x80
 8001968:	0192      	lsls	r2, r2, #6
 800196a:	605a      	str	r2, [r3, #4]
  return 0;
 800196c:	2300      	movs	r3, #0
}
 800196e:	0018      	movs	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	b002      	add	sp, #8
 8001974:	bd80      	pop	{r7, pc}

08001976 <_isatty>:

int _isatty(int file)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800197e:	2301      	movs	r3, #1
}
 8001980:	0018      	movs	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	b002      	add	sp, #8
 8001986:	bd80      	pop	{r7, pc}

08001988 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001994:	2300      	movs	r3, #0
}
 8001996:	0018      	movs	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	b004      	add	sp, #16
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a8:	4a14      	ldr	r2, [pc, #80]	@ (80019fc <_sbrk+0x5c>)
 80019aa:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <_sbrk+0x60>)
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b4:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <_sbrk+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d102      	bne.n	80019c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019bc:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <_sbrk+0x64>)
 80019be:	4a12      	ldr	r2, [pc, #72]	@ (8001a08 <_sbrk+0x68>)
 80019c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c2:	4b10      	ldr	r3, [pc, #64]	@ (8001a04 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	18d3      	adds	r3, r2, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d207      	bcs.n	80019e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d0:	f003 fe76 	bl	80056c0 <__errno>
 80019d4:	0003      	movs	r3, r0
 80019d6:	220c      	movs	r2, #12
 80019d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019da:	2301      	movs	r3, #1
 80019dc:	425b      	negs	r3, r3
 80019de:	e009      	b.n	80019f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e6:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	18d2      	adds	r2, r2, r3
 80019ee:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <_sbrk+0x64>)
 80019f0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80019f2:	68fb      	ldr	r3, [r7, #12]
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b006      	add	sp, #24
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20002000 	.word	0x20002000
 8001a00:	00000400 	.word	0x00000400
 8001a04:	2000027c 	.word	0x2000027c
 8001a08:	200003d0 	.word	0x200003d0

08001a0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a10:	46c0      	nop			@ (mov r8, r8)
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a18:	480d      	ldr	r0, [pc, #52]	@ (8001a50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a1c:	f7ff fff6 	bl	8001a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a20:	480c      	ldr	r0, [pc, #48]	@ (8001a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a22:	490d      	ldr	r1, [pc, #52]	@ (8001a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a24:	4a0d      	ldr	r2, [pc, #52]	@ (8001a5c <LoopForever+0xe>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a28:	e002      	b.n	8001a30 <LoopCopyDataInit>

08001a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2e:	3304      	adds	r3, #4

08001a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a34:	d3f9      	bcc.n	8001a2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a36:	4a0a      	ldr	r2, [pc, #40]	@ (8001a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a38:	4c0a      	ldr	r4, [pc, #40]	@ (8001a64 <LoopForever+0x16>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a3c:	e001      	b.n	8001a42 <LoopFillZerobss>

08001a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a40:	3204      	adds	r2, #4

08001a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a44:	d3fb      	bcc.n	8001a3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a46:	f003 fe41 	bl	80056cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001a4a:	f7fe fc07 	bl	800025c <main>

08001a4e <LoopForever>:

LoopForever:
  b LoopForever
 8001a4e:	e7fe      	b.n	8001a4e <LoopForever>
  ldr   r0, =_estack
 8001a50:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a58:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001a5c:	08006724 	.word	0x08006724
  ldr r2, =_sbss
 8001a60:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001a64:	200003d0 	.word	0x200003d0

08001a68 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC1_IRQHandler>
	...

08001a6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a72:	1dfb      	adds	r3, r7, #7
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a78:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <HAL_Init+0x3c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <HAL_Init+0x3c>)
 8001a7e:	2180      	movs	r1, #128	@ 0x80
 8001a80:	0049      	lsls	r1, r1, #1
 8001a82:	430a      	orrs	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a86:	2003      	movs	r0, #3
 8001a88:	f000 f810 	bl	8001aac <HAL_InitTick>
 8001a8c:	1e03      	subs	r3, r0, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001a90:	1dfb      	adds	r3, r7, #7
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	e001      	b.n	8001a9c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001a98:	f7ff fd3a 	bl	8001510 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a9c:	1dfb      	adds	r3, r7, #7
 8001a9e:	781b      	ldrb	r3, [r3, #0]
}
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40022000 	.word	0x40022000

08001aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab4:	230f      	movs	r3, #15
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001abc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b34 <HAL_InitTick+0x88>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d02b      	beq.n	8001b1c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <HAL_InitTick+0x8c>)
 8001ac6:	681c      	ldr	r4, [r3, #0]
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b34 <HAL_InitTick+0x88>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	0019      	movs	r1, r3
 8001ace:	23fa      	movs	r3, #250	@ 0xfa
 8001ad0:	0098      	lsls	r0, r3, #2
 8001ad2:	f7fe fb21 	bl	8000118 <__udivsi3>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	0019      	movs	r1, r3
 8001ada:	0020      	movs	r0, r4
 8001adc:	f7fe fb1c 	bl	8000118 <__udivsi3>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f000 fd97 	bl	8002616 <HAL_SYSTICK_Config>
 8001ae8:	1e03      	subs	r3, r0, #0
 8001aea:	d112      	bne.n	8001b12 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d80a      	bhi.n	8001b08 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	2301      	movs	r3, #1
 8001af6:	425b      	negs	r3, r3
 8001af8:	2200      	movs	r2, #0
 8001afa:	0018      	movs	r0, r3
 8001afc:	f000 fd66 	bl	80025cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b00:	4b0e      	ldr	r3, [pc, #56]	@ (8001b3c <HAL_InitTick+0x90>)
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	e00d      	b.n	8001b24 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001b08:	230f      	movs	r3, #15
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	e008      	b.n	8001b24 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b12:	230f      	movs	r3, #15
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	2201      	movs	r2, #1
 8001b18:	701a      	strb	r2, [r3, #0]
 8001b1a:	e003      	b.n	8001b24 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b1c:	230f      	movs	r3, #15
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001b24:	230f      	movs	r3, #15
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	781b      	ldrb	r3, [r3, #0]
}
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b005      	add	sp, #20
 8001b30:	bd90      	pop	{r4, r7, pc}
 8001b32:	46c0      	nop			@ (mov r8, r8)
 8001b34:	20000048 	.word	0x20000048
 8001b38:	20000040 	.word	0x20000040
 8001b3c:	20000044 	.word	0x20000044

08001b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b44:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <HAL_IncTick+0x1c>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	001a      	movs	r2, r3
 8001b4a:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <HAL_IncTick+0x20>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	18d2      	adds	r2, r2, r3
 8001b50:	4b03      	ldr	r3, [pc, #12]	@ (8001b60 <HAL_IncTick+0x20>)
 8001b52:	601a      	str	r2, [r3, #0]
}
 8001b54:	46c0      	nop			@ (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			@ (mov r8, r8)
 8001b5c:	20000048 	.word	0x20000048
 8001b60:	20000280 	.word	0x20000280

08001b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b02      	ldr	r3, [pc, #8]	@ (8001b74 <HAL_GetTick+0x10>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	46c0      	nop			@ (mov r8, r8)
 8001b74:	20000280 	.word	0x20000280

08001b78 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a05      	ldr	r2, [pc, #20]	@ (8001b9c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001b88:	401a      	ands	r2, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	601a      	str	r2, [r3, #0]
}
 8001b92:	46c0      	nop			@ (mov r8, r8)
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b002      	add	sp, #8
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	46c0      	nop			@ (mov r8, r8)
 8001b9c:	fe3fffff 	.word	0xfe3fffff

08001ba0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	23e0      	movs	r3, #224	@ 0xe0
 8001bae:	045b      	lsls	r3, r3, #17
 8001bb0:	4013      	ands	r3, r2
}
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b002      	add	sp, #8
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b084      	sub	sp, #16
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	2104      	movs	r1, #4
 8001bce:	400a      	ands	r2, r1
 8001bd0:	2107      	movs	r1, #7
 8001bd2:	4091      	lsls	r1, r2
 8001bd4:	000a      	movs	r2, r1
 8001bd6:	43d2      	mvns	r2, r2
 8001bd8:	401a      	ands	r2, r3
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2104      	movs	r1, #4
 8001bde:	400b      	ands	r3, r1
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	4099      	lsls	r1, r3
 8001be4:	000b      	movs	r3, r1
 8001be6:	431a      	orrs	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001bec:	46c0      	nop			@ (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b004      	add	sp, #16
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	2104      	movs	r1, #4
 8001c06:	400a      	ands	r2, r1
 8001c08:	2107      	movs	r1, #7
 8001c0a:	4091      	lsls	r1, r2
 8001c0c:	000a      	movs	r2, r1
 8001c0e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	2104      	movs	r1, #4
 8001c14:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001c16:	40da      	lsrs	r2, r3
 8001c18:	0013      	movs	r3, r2
}
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b002      	add	sp, #8
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b084      	sub	sp, #16
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	211f      	movs	r1, #31
 8001c36:	400a      	ands	r2, r1
 8001c38:	210f      	movs	r1, #15
 8001c3a:	4091      	lsls	r1, r2
 8001c3c:	000a      	movs	r2, r1
 8001c3e:	43d2      	mvns	r2, r2
 8001c40:	401a      	ands	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	0e9b      	lsrs	r3, r3, #26
 8001c46:	210f      	movs	r1, #15
 8001c48:	4019      	ands	r1, r3
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	201f      	movs	r0, #31
 8001c4e:	4003      	ands	r3, r0
 8001c50:	4099      	lsls	r1, r3
 8001c52:	000b      	movs	r3, r1
 8001c54:	431a      	orrs	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b004      	add	sp, #16
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	035b      	lsls	r3, r3, #13
 8001c74:	0b5b      	lsrs	r3, r3, #13
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c7c:	46c0      	nop			@ (mov r8, r8)
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b002      	add	sp, #8
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	0352      	lsls	r2, r2, #13
 8001c96:	0b52      	lsrs	r2, r2, #13
 8001c98:	43d2      	mvns	r2, r2
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ca0:	46c0      	nop			@ (mov r8, r8)
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b002      	add	sp, #8
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	0212      	lsls	r2, r2, #8
 8001cbc:	43d2      	mvns	r2, r2
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
 8001cc8:	4904      	ldr	r1, [pc, #16]	@ (8001cdc <LL_ADC_SetChannelSamplingTime+0x34>)
 8001cca:	400b      	ands	r3, r1
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001cd2:	46c0      	nop			@ (mov r8, r8)
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b004      	add	sp, #16
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	07ffff00 	.word	0x07ffff00

08001ce0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4a05      	ldr	r2, [pc, #20]	@ (8001d04 <LL_ADC_EnableInternalRegulator+0x24>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2280      	movs	r2, #128	@ 0x80
 8001cf2:	0552      	lsls	r2, r2, #21
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cfa:	46c0      	nop			@ (mov r8, r8)
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b002      	add	sp, #8
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	46c0      	nop			@ (mov r8, r8)
 8001d04:	6fffffe8 	.word	0x6fffffe8

08001d08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	2380      	movs	r3, #128	@ 0x80
 8001d16:	055b      	lsls	r3, r3, #21
 8001d18:	401a      	ands	r2, r3
 8001d1a:	2380      	movs	r3, #128	@ 0x80
 8001d1c:	055b      	lsls	r3, r3, #21
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d101      	bne.n	8001d26 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <LL_ADC_IsEnabled+0x18>
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <LL_ADC_IsEnabled+0x1a>
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b002      	add	sp, #8
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2204      	movs	r2, #4
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d101      	bne.n	8001d6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d7c:	231f      	movs	r3, #31
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e17f      	b.n	800209a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10a      	bne.n	8001db8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	0018      	movs	r0, r3
 8001da6:	f7ff fbd7 	bl	8001558 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2254      	movs	r2, #84	@ 0x54
 8001db4:	2100      	movs	r1, #0
 8001db6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f7ff ffa3 	bl	8001d08 <LL_ADC_IsInternalRegulatorEnabled>
 8001dc2:	1e03      	subs	r3, r0, #0
 8001dc4:	d115      	bne.n	8001df2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f7ff ff88 	bl	8001ce0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dd0:	4bb4      	ldr	r3, [pc, #720]	@ (80020a4 <HAL_ADC_Init+0x330>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	49b4      	ldr	r1, [pc, #720]	@ (80020a8 <HAL_ADC_Init+0x334>)
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f7fe f99e 	bl	8000118 <__udivsi3>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	3301      	adds	r3, #1
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001de4:	e002      	b.n	8001dec <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f9      	bne.n	8001de6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	0018      	movs	r0, r3
 8001df8:	f7ff ff86 	bl	8001d08 <LL_ADC_IsInternalRegulatorEnabled>
 8001dfc:	1e03      	subs	r3, r0, #0
 8001dfe:	d10f      	bne.n	8001e20 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e04:	2210      	movs	r2, #16
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e10:	2201      	movs	r2, #1
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e18:	231f      	movs	r3, #31
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7ff ff94 	bl	8001d52 <LL_ADC_REG_IsConversionOngoing>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e32:	2210      	movs	r2, #16
 8001e34:	4013      	ands	r3, r2
 8001e36:	d000      	beq.n	8001e3a <HAL_ADC_Init+0xc6>
 8001e38:	e122      	b.n	8002080 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d000      	beq.n	8001e42 <HAL_ADC_Init+0xce>
 8001e40:	e11e      	b.n	8002080 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e46:	4a99      	ldr	r2, [pc, #612]	@ (80020ac <HAL_ADC_Init+0x338>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	0018      	movs	r0, r3
 8001e58:	f7ff ff6a 	bl	8001d30 <LL_ADC_IsEnabled>
 8001e5c:	1e03      	subs	r3, r0, #0
 8001e5e:	d000      	beq.n	8001e62 <HAL_ADC_Init+0xee>
 8001e60:	e0ad      	b.n	8001fbe <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	7e1b      	ldrb	r3, [r3, #24]
 8001e6a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001e6c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7e5b      	ldrb	r3, [r3, #25]
 8001e72:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001e74:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7e9b      	ldrb	r3, [r3, #26]
 8001e7a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001e7c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d002      	beq.n	8001e8c <HAL_ADC_Init+0x118>
 8001e86:	2380      	movs	r3, #128	@ 0x80
 8001e88:	015b      	lsls	r3, r3, #5
 8001e8a:	e000      	b.n	8001e8e <HAL_ADC_Init+0x11a>
 8001e8c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001e8e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001e94:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	da04      	bge.n	8001ea8 <HAL_ADC_Init+0x134>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	085b      	lsrs	r3, r3, #1
 8001ea6:	e001      	b.n	8001eac <HAL_ADC_Init+0x138>
 8001ea8:	2380      	movs	r3, #128	@ 0x80
 8001eaa:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001eac:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	212c      	movs	r1, #44	@ 0x2c
 8001eb2:	5c5b      	ldrb	r3, [r3, r1]
 8001eb4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001eb6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	5c9b      	ldrb	r3, [r3, r2]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d115      	bne.n	8001ef4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7e9b      	ldrb	r3, [r3, #26]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d105      	bne.n	8001edc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2280      	movs	r2, #128	@ 0x80
 8001ed4:	0252      	lsls	r2, r2, #9
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	e00b      	b.n	8001ef4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eec:	2201      	movs	r2, #1
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00a      	beq.n	8001f12 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f00:	23e0      	movs	r3, #224	@ 0xe0
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4a65      	ldr	r2, [pc, #404]	@ (80020b0 <HAL_ADC_Init+0x33c>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	0f9b      	lsrs	r3, r3, #30
 8001f2e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f34:	4313      	orrs	r3, r2
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	223c      	movs	r2, #60	@ 0x3c
 8001f40:	5c9b      	ldrb	r3, [r3, r2]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d111      	bne.n	8001f6a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	0f9b      	lsrs	r3, r3, #30
 8001f4c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f52:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001f58:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001f5e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	2201      	movs	r2, #1
 8001f66:	4313      	orrs	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	4a50      	ldr	r2, [pc, #320]	@ (80020b4 <HAL_ADC_Init+0x340>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	0019      	movs	r1, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	23c0      	movs	r3, #192	@ 0xc0
 8001f86:	061b      	lsls	r3, r3, #24
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d018      	beq.n	8001fbe <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001f90:	2380      	movs	r3, #128	@ 0x80
 8001f92:	05db      	lsls	r3, r3, #23
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d012      	beq.n	8001fbe <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001f9c:	2380      	movs	r3, #128	@ 0x80
 8001f9e:	061b      	lsls	r3, r3, #24
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d00c      	beq.n	8001fbe <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001fa4:	4b44      	ldr	r3, [pc, #272]	@ (80020b8 <HAL_ADC_Init+0x344>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a44      	ldr	r2, [pc, #272]	@ (80020bc <HAL_ADC_Init+0x348>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	0019      	movs	r1, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	23f0      	movs	r3, #240	@ 0xf0
 8001fb4:	039b      	lsls	r3, r3, #14
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	4b3f      	ldr	r3, [pc, #252]	@ (80020b8 <HAL_ADC_Init+0x344>)
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc6:	001a      	movs	r2, r3
 8001fc8:	2100      	movs	r1, #0
 8001fca:	f7ff fdf6 	bl	8001bba <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd6:	493a      	ldr	r1, [pc, #232]	@ (80020c0 <HAL_ADC_Init+0x34c>)
 8001fd8:	001a      	movs	r2, r3
 8001fda:	f7ff fdee 	bl	8001bba <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2110      	movs	r1, #16
 8001ff2:	4249      	negs	r1, r1
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ff8:	e018      	b.n	800202c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691a      	ldr	r2, [r3, #16]
 8001ffe:	2380      	movs	r3, #128	@ 0x80
 8002000:	039b      	lsls	r3, r3, #14
 8002002:	429a      	cmp	r2, r3
 8002004:	d112      	bne.n	800202c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	3b01      	subs	r3, #1
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	221c      	movs	r2, #28
 8002016:	4013      	ands	r3, r2
 8002018:	2210      	movs	r2, #16
 800201a:	4252      	negs	r2, r2
 800201c:	409a      	lsls	r2, r3
 800201e:	0011      	movs	r1, r2
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2100      	movs	r1, #0
 8002032:	0018      	movs	r0, r3
 8002034:	f7ff fdde 	bl	8001bf4 <LL_ADC_GetSamplingTimeCommonChannels>
 8002038:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800203e:	429a      	cmp	r2, r3
 8002040:	d10b      	bne.n	800205a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204c:	2203      	movs	r2, #3
 800204e:	4393      	bics	r3, r2
 8002050:	2201      	movs	r2, #1
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002058:	e01c      	b.n	8002094 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205e:	2212      	movs	r2, #18
 8002060:	4393      	bics	r3, r2
 8002062:	2210      	movs	r2, #16
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206e:	2201      	movs	r2, #1
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002076:	231f      	movs	r3, #31
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800207e:	e009      	b.n	8002094 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002084:	2210      	movs	r2, #16
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800208c:	231f      	movs	r3, #31
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	2201      	movs	r2, #1
 8002092:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002094:	231f      	movs	r3, #31
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	781b      	ldrb	r3, [r3, #0]
}
 800209a:	0018      	movs	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	b008      	add	sp, #32
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	46c0      	nop			@ (mov r8, r8)
 80020a4:	20000040 	.word	0x20000040
 80020a8:	00030d40 	.word	0x00030d40
 80020ac:	fffffefd 	.word	0xfffffefd
 80020b0:	ffde0201 	.word	0xffde0201
 80020b4:	1ffffc02 	.word	0x1ffffc02
 80020b8:	40012708 	.word	0x40012708
 80020bc:	ffc3ffff 	.word	0xffc3ffff
 80020c0:	07ffff04 	.word	0x07ffff04

080020c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ce:	2317      	movs	r3, #23
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2254      	movs	r2, #84	@ 0x54
 80020de:	5c9b      	ldrb	r3, [r3, r2]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d101      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x24>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e1c0      	b.n	800246a <HAL_ADC_ConfigChannel+0x3a6>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2254      	movs	r2, #84	@ 0x54
 80020ec:	2101      	movs	r1, #1
 80020ee:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f7ff fe2c 	bl	8001d52 <LL_ADC_REG_IsConversionOngoing>
 80020fa:	1e03      	subs	r3, r0, #0
 80020fc:	d000      	beq.n	8002100 <HAL_ADC_ConfigChannel+0x3c>
 80020fe:	e1a3      	b.n	8002448 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d100      	bne.n	800210a <HAL_ADC_ConfigChannel+0x46>
 8002108:	e143      	b.n	8002392 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691a      	ldr	r2, [r3, #16]
 800210e:	2380      	movs	r3, #128	@ 0x80
 8002110:	061b      	lsls	r3, r3, #24
 8002112:	429a      	cmp	r2, r3
 8002114:	d004      	beq.n	8002120 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800211a:	4ac1      	ldr	r2, [pc, #772]	@ (8002420 <HAL_ADC_ConfigChannel+0x35c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d108      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	0019      	movs	r1, r3
 800212a:	0010      	movs	r0, r2
 800212c:	f7ff fd99 	bl	8001c62 <LL_ADC_REG_SetSequencerChAdd>
 8002130:	e0c9      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	211f      	movs	r1, #31
 800213c:	400b      	ands	r3, r1
 800213e:	210f      	movs	r1, #15
 8002140:	4099      	lsls	r1, r3
 8002142:	000b      	movs	r3, r1
 8002144:	43db      	mvns	r3, r3
 8002146:	4013      	ands	r3, r2
 8002148:	0019      	movs	r1, r3
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	035b      	lsls	r3, r3, #13
 8002150:	0b5b      	lsrs	r3, r3, #13
 8002152:	d105      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x9c>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0e9b      	lsrs	r3, r3, #26
 800215a:	221f      	movs	r2, #31
 800215c:	4013      	ands	r3, r2
 800215e:	e098      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1ce>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2201      	movs	r2, #1
 8002166:	4013      	ands	r3, r2
 8002168:	d000      	beq.n	800216c <HAL_ADC_ConfigChannel+0xa8>
 800216a:	e091      	b.n	8002290 <HAL_ADC_ConfigChannel+0x1cc>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2202      	movs	r2, #2
 8002172:	4013      	ands	r3, r2
 8002174:	d000      	beq.n	8002178 <HAL_ADC_ConfigChannel+0xb4>
 8002176:	e089      	b.n	800228c <HAL_ADC_ConfigChannel+0x1c8>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2204      	movs	r2, #4
 800217e:	4013      	ands	r3, r2
 8002180:	d000      	beq.n	8002184 <HAL_ADC_ConfigChannel+0xc0>
 8002182:	e081      	b.n	8002288 <HAL_ADC_ConfigChannel+0x1c4>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2208      	movs	r2, #8
 800218a:	4013      	ands	r3, r2
 800218c:	d000      	beq.n	8002190 <HAL_ADC_ConfigChannel+0xcc>
 800218e:	e079      	b.n	8002284 <HAL_ADC_ConfigChannel+0x1c0>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2210      	movs	r2, #16
 8002196:	4013      	ands	r3, r2
 8002198:	d000      	beq.n	800219c <HAL_ADC_ConfigChannel+0xd8>
 800219a:	e071      	b.n	8002280 <HAL_ADC_ConfigChannel+0x1bc>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2220      	movs	r2, #32
 80021a2:	4013      	ands	r3, r2
 80021a4:	d000      	beq.n	80021a8 <HAL_ADC_ConfigChannel+0xe4>
 80021a6:	e069      	b.n	800227c <HAL_ADC_ConfigChannel+0x1b8>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2240      	movs	r2, #64	@ 0x40
 80021ae:	4013      	ands	r3, r2
 80021b0:	d000      	beq.n	80021b4 <HAL_ADC_ConfigChannel+0xf0>
 80021b2:	e061      	b.n	8002278 <HAL_ADC_ConfigChannel+0x1b4>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2280      	movs	r2, #128	@ 0x80
 80021ba:	4013      	ands	r3, r2
 80021bc:	d000      	beq.n	80021c0 <HAL_ADC_ConfigChannel+0xfc>
 80021be:	e059      	b.n	8002274 <HAL_ADC_ConfigChannel+0x1b0>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	2380      	movs	r3, #128	@ 0x80
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4013      	ands	r3, r2
 80021ca:	d151      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x1ac>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	2380      	movs	r3, #128	@ 0x80
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4013      	ands	r3, r2
 80021d6:	d149      	bne.n	800226c <HAL_ADC_ConfigChannel+0x1a8>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	2380      	movs	r3, #128	@ 0x80
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4013      	ands	r3, r2
 80021e2:	d141      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x1a4>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	2380      	movs	r3, #128	@ 0x80
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	4013      	ands	r3, r2
 80021ee:	d139      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x1a0>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2380      	movs	r3, #128	@ 0x80
 80021f6:	015b      	lsls	r3, r3, #5
 80021f8:	4013      	ands	r3, r2
 80021fa:	d131      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x19c>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	2380      	movs	r3, #128	@ 0x80
 8002202:	019b      	lsls	r3, r3, #6
 8002204:	4013      	ands	r3, r2
 8002206:	d129      	bne.n	800225c <HAL_ADC_ConfigChannel+0x198>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2380      	movs	r3, #128	@ 0x80
 800220e:	01db      	lsls	r3, r3, #7
 8002210:	4013      	ands	r3, r2
 8002212:	d121      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x194>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2380      	movs	r3, #128	@ 0x80
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	4013      	ands	r3, r2
 800221e:	d119      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x190>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	2380      	movs	r3, #128	@ 0x80
 8002226:	025b      	lsls	r3, r3, #9
 8002228:	4013      	ands	r3, r2
 800222a:	d111      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x18c>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2380      	movs	r3, #128	@ 0x80
 8002232:	029b      	lsls	r3, r3, #10
 8002234:	4013      	ands	r3, r2
 8002236:	d109      	bne.n	800224c <HAL_ADC_ConfigChannel+0x188>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2380      	movs	r3, #128	@ 0x80
 800223e:	02db      	lsls	r3, r3, #11
 8002240:	4013      	ands	r3, r2
 8002242:	d001      	beq.n	8002248 <HAL_ADC_ConfigChannel+0x184>
 8002244:	2312      	movs	r3, #18
 8002246:	e024      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1ce>
 8002248:	2300      	movs	r3, #0
 800224a:	e022      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1ce>
 800224c:	2311      	movs	r3, #17
 800224e:	e020      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1ce>
 8002250:	2310      	movs	r3, #16
 8002252:	e01e      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1ce>
 8002254:	230f      	movs	r3, #15
 8002256:	e01c      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1ce>
 8002258:	230e      	movs	r3, #14
 800225a:	e01a      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1ce>
 800225c:	230d      	movs	r3, #13
 800225e:	e018      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1ce>
 8002260:	230c      	movs	r3, #12
 8002262:	e016      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1ce>
 8002264:	230b      	movs	r3, #11
 8002266:	e014      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1ce>
 8002268:	230a      	movs	r3, #10
 800226a:	e012      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1ce>
 800226c:	2309      	movs	r3, #9
 800226e:	e010      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1ce>
 8002270:	2308      	movs	r3, #8
 8002272:	e00e      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1ce>
 8002274:	2307      	movs	r3, #7
 8002276:	e00c      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1ce>
 8002278:	2306      	movs	r3, #6
 800227a:	e00a      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1ce>
 800227c:	2305      	movs	r3, #5
 800227e:	e008      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1ce>
 8002280:	2304      	movs	r3, #4
 8002282:	e006      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1ce>
 8002284:	2303      	movs	r3, #3
 8002286:	e004      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1ce>
 8002288:	2302      	movs	r3, #2
 800228a:	e002      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1ce>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1ce>
 8002290:	2300      	movs	r3, #0
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	6852      	ldr	r2, [r2, #4]
 8002296:	201f      	movs	r0, #31
 8002298:	4002      	ands	r2, r0
 800229a:	4093      	lsls	r3, r2
 800229c:	000a      	movs	r2, r1
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	089b      	lsrs	r3, r3, #2
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d808      	bhi.n	80022c6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6859      	ldr	r1, [r3, #4]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	001a      	movs	r2, r3
 80022c2:	f7ff fcae 	bl	8001c22 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6819      	ldr	r1, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	001a      	movs	r2, r3
 80022d4:	f7ff fce8 	bl	8001ca8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	db00      	blt.n	80022e2 <HAL_ADC_ConfigChannel+0x21e>
 80022e0:	e0bc      	b.n	800245c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022e2:	4b50      	ldr	r3, [pc, #320]	@ (8002424 <HAL_ADC_ConfigChannel+0x360>)
 80022e4:	0018      	movs	r0, r3
 80022e6:	f7ff fc5b 	bl	8001ba0 <LL_ADC_GetCommonPathInternalCh>
 80022ea:	0003      	movs	r3, r0
 80022ec:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a4d      	ldr	r2, [pc, #308]	@ (8002428 <HAL_ADC_ConfigChannel+0x364>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d122      	bne.n	800233e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	2380      	movs	r3, #128	@ 0x80
 80022fc:	041b      	lsls	r3, r3, #16
 80022fe:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002300:	d11d      	bne.n	800233e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2280      	movs	r2, #128	@ 0x80
 8002306:	0412      	lsls	r2, r2, #16
 8002308:	4313      	orrs	r3, r2
 800230a:	4a46      	ldr	r2, [pc, #280]	@ (8002424 <HAL_ADC_ConfigChannel+0x360>)
 800230c:	0019      	movs	r1, r3
 800230e:	0010      	movs	r0, r2
 8002310:	f7ff fc32 	bl	8001b78 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002314:	4b45      	ldr	r3, [pc, #276]	@ (800242c <HAL_ADC_ConfigChannel+0x368>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4945      	ldr	r1, [pc, #276]	@ (8002430 <HAL_ADC_ConfigChannel+0x36c>)
 800231a:	0018      	movs	r0, r3
 800231c:	f7fd fefc 	bl	8000118 <__udivsi3>
 8002320:	0003      	movs	r3, r0
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	0013      	movs	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	189b      	adds	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800232e:	e002      	b.n	8002336 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3b01      	subs	r3, #1
 8002334:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f9      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800233c:	e08e      	b.n	800245c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a3c      	ldr	r2, [pc, #240]	@ (8002434 <HAL_ADC_ConfigChannel+0x370>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d10e      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	2380      	movs	r3, #128	@ 0x80
 800234c:	045b      	lsls	r3, r3, #17
 800234e:	4013      	ands	r3, r2
 8002350:	d109      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2280      	movs	r2, #128	@ 0x80
 8002356:	0452      	lsls	r2, r2, #17
 8002358:	4313      	orrs	r3, r2
 800235a:	4a32      	ldr	r2, [pc, #200]	@ (8002424 <HAL_ADC_ConfigChannel+0x360>)
 800235c:	0019      	movs	r1, r3
 800235e:	0010      	movs	r0, r2
 8002360:	f7ff fc0a 	bl	8001b78 <LL_ADC_SetCommonPathInternalCh>
 8002364:	e07a      	b.n	800245c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a33      	ldr	r2, [pc, #204]	@ (8002438 <HAL_ADC_ConfigChannel+0x374>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d000      	beq.n	8002372 <HAL_ADC_ConfigChannel+0x2ae>
 8002370:	e074      	b.n	800245c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	2380      	movs	r3, #128	@ 0x80
 8002376:	03db      	lsls	r3, r3, #15
 8002378:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800237a:	d000      	beq.n	800237e <HAL_ADC_ConfigChannel+0x2ba>
 800237c:	e06e      	b.n	800245c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	2280      	movs	r2, #128	@ 0x80
 8002382:	03d2      	lsls	r2, r2, #15
 8002384:	4313      	orrs	r3, r2
 8002386:	4a27      	ldr	r2, [pc, #156]	@ (8002424 <HAL_ADC_ConfigChannel+0x360>)
 8002388:	0019      	movs	r1, r3
 800238a:	0010      	movs	r0, r2
 800238c:	f7ff fbf4 	bl	8001b78 <LL_ADC_SetCommonPathInternalCh>
 8002390:	e064      	b.n	800245c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	2380      	movs	r3, #128	@ 0x80
 8002398:	061b      	lsls	r3, r3, #24
 800239a:	429a      	cmp	r2, r3
 800239c:	d004      	beq.n	80023a8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80023a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002420 <HAL_ADC_ConfigChannel+0x35c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d107      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	0019      	movs	r1, r3
 80023b2:	0010      	movs	r0, r2
 80023b4:	f7ff fc66 	bl	8001c84 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	da4d      	bge.n	800245c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023c0:	4b18      	ldr	r3, [pc, #96]	@ (8002424 <HAL_ADC_ConfigChannel+0x360>)
 80023c2:	0018      	movs	r0, r3
 80023c4:	f7ff fbec 	bl	8001ba0 <LL_ADC_GetCommonPathInternalCh>
 80023c8:	0003      	movs	r3, r0
 80023ca:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a15      	ldr	r2, [pc, #84]	@ (8002428 <HAL_ADC_ConfigChannel+0x364>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d108      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4a18      	ldr	r2, [pc, #96]	@ (800243c <HAL_ADC_ConfigChannel+0x378>)
 80023da:	4013      	ands	r3, r2
 80023dc:	4a11      	ldr	r2, [pc, #68]	@ (8002424 <HAL_ADC_ConfigChannel+0x360>)
 80023de:	0019      	movs	r1, r3
 80023e0:	0010      	movs	r0, r2
 80023e2:	f7ff fbc9 	bl	8001b78 <LL_ADC_SetCommonPathInternalCh>
 80023e6:	e039      	b.n	800245c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a11      	ldr	r2, [pc, #68]	@ (8002434 <HAL_ADC_ConfigChannel+0x370>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d108      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4a12      	ldr	r2, [pc, #72]	@ (8002440 <HAL_ADC_ConfigChannel+0x37c>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002424 <HAL_ADC_ConfigChannel+0x360>)
 80023fa:	0019      	movs	r1, r3
 80023fc:	0010      	movs	r0, r2
 80023fe:	f7ff fbbb 	bl	8001b78 <LL_ADC_SetCommonPathInternalCh>
 8002402:	e02b      	b.n	800245c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0b      	ldr	r2, [pc, #44]	@ (8002438 <HAL_ADC_ConfigChannel+0x374>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d126      	bne.n	800245c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4a0c      	ldr	r2, [pc, #48]	@ (8002444 <HAL_ADC_ConfigChannel+0x380>)
 8002412:	4013      	ands	r3, r2
 8002414:	4a03      	ldr	r2, [pc, #12]	@ (8002424 <HAL_ADC_ConfigChannel+0x360>)
 8002416:	0019      	movs	r1, r3
 8002418:	0010      	movs	r0, r2
 800241a:	f7ff fbad 	bl	8001b78 <LL_ADC_SetCommonPathInternalCh>
 800241e:	e01d      	b.n	800245c <HAL_ADC_ConfigChannel+0x398>
 8002420:	80000004 	.word	0x80000004
 8002424:	40012708 	.word	0x40012708
 8002428:	b0001000 	.word	0xb0001000
 800242c:	20000040 	.word	0x20000040
 8002430:	00030d40 	.word	0x00030d40
 8002434:	b8004000 	.word	0xb8004000
 8002438:	b4002000 	.word	0xb4002000
 800243c:	ff7fffff 	.word	0xff7fffff
 8002440:	feffffff 	.word	0xfeffffff
 8002444:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244c:	2220      	movs	r2, #32
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002454:	2317      	movs	r3, #23
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	2201      	movs	r2, #1
 800245a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2254      	movs	r2, #84	@ 0x54
 8002460:	2100      	movs	r1, #0
 8002462:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002464:	2317      	movs	r3, #23
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	781b      	ldrb	r3, [r3, #0]
}
 800246a:	0018      	movs	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	b006      	add	sp, #24
 8002470:	bd80      	pop	{r7, pc}
 8002472:	46c0      	nop			@ (mov r8, r8)

08002474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	0002      	movs	r2, r0
 800247c:	1dfb      	adds	r3, r7, #7
 800247e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002480:	1dfb      	adds	r3, r7, #7
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b7f      	cmp	r3, #127	@ 0x7f
 8002486:	d809      	bhi.n	800249c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002488:	1dfb      	adds	r3, r7, #7
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	001a      	movs	r2, r3
 800248e:	231f      	movs	r3, #31
 8002490:	401a      	ands	r2, r3
 8002492:	4b04      	ldr	r3, [pc, #16]	@ (80024a4 <__NVIC_EnableIRQ+0x30>)
 8002494:	2101      	movs	r1, #1
 8002496:	4091      	lsls	r1, r2
 8002498:	000a      	movs	r2, r1
 800249a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800249c:	46c0      	nop			@ (mov r8, r8)
 800249e:	46bd      	mov	sp, r7
 80024a0:	b002      	add	sp, #8
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	e000e100 	.word	0xe000e100

080024a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	0002      	movs	r2, r0
 80024b0:	6039      	str	r1, [r7, #0]
 80024b2:	1dfb      	adds	r3, r7, #7
 80024b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024b6:	1dfb      	adds	r3, r7, #7
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80024bc:	d828      	bhi.n	8002510 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024be:	4a2f      	ldr	r2, [pc, #188]	@ (800257c <__NVIC_SetPriority+0xd4>)
 80024c0:	1dfb      	adds	r3, r7, #7
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b25b      	sxtb	r3, r3
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	33c0      	adds	r3, #192	@ 0xc0
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	589b      	ldr	r3, [r3, r2]
 80024ce:	1dfa      	adds	r2, r7, #7
 80024d0:	7812      	ldrb	r2, [r2, #0]
 80024d2:	0011      	movs	r1, r2
 80024d4:	2203      	movs	r2, #3
 80024d6:	400a      	ands	r2, r1
 80024d8:	00d2      	lsls	r2, r2, #3
 80024da:	21ff      	movs	r1, #255	@ 0xff
 80024dc:	4091      	lsls	r1, r2
 80024de:	000a      	movs	r2, r1
 80024e0:	43d2      	mvns	r2, r2
 80024e2:	401a      	ands	r2, r3
 80024e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	019b      	lsls	r3, r3, #6
 80024ea:	22ff      	movs	r2, #255	@ 0xff
 80024ec:	401a      	ands	r2, r3
 80024ee:	1dfb      	adds	r3, r7, #7
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	0018      	movs	r0, r3
 80024f4:	2303      	movs	r3, #3
 80024f6:	4003      	ands	r3, r0
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024fc:	481f      	ldr	r0, [pc, #124]	@ (800257c <__NVIC_SetPriority+0xd4>)
 80024fe:	1dfb      	adds	r3, r7, #7
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b25b      	sxtb	r3, r3
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	430a      	orrs	r2, r1
 8002508:	33c0      	adds	r3, #192	@ 0xc0
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800250e:	e031      	b.n	8002574 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002510:	4a1b      	ldr	r2, [pc, #108]	@ (8002580 <__NVIC_SetPriority+0xd8>)
 8002512:	1dfb      	adds	r3, r7, #7
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	0019      	movs	r1, r3
 8002518:	230f      	movs	r3, #15
 800251a:	400b      	ands	r3, r1
 800251c:	3b08      	subs	r3, #8
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	3306      	adds	r3, #6
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	18d3      	adds	r3, r2, r3
 8002526:	3304      	adds	r3, #4
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	1dfa      	adds	r2, r7, #7
 800252c:	7812      	ldrb	r2, [r2, #0]
 800252e:	0011      	movs	r1, r2
 8002530:	2203      	movs	r2, #3
 8002532:	400a      	ands	r2, r1
 8002534:	00d2      	lsls	r2, r2, #3
 8002536:	21ff      	movs	r1, #255	@ 0xff
 8002538:	4091      	lsls	r1, r2
 800253a:	000a      	movs	r2, r1
 800253c:	43d2      	mvns	r2, r2
 800253e:	401a      	ands	r2, r3
 8002540:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	019b      	lsls	r3, r3, #6
 8002546:	22ff      	movs	r2, #255	@ 0xff
 8002548:	401a      	ands	r2, r3
 800254a:	1dfb      	adds	r3, r7, #7
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	0018      	movs	r0, r3
 8002550:	2303      	movs	r3, #3
 8002552:	4003      	ands	r3, r0
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002558:	4809      	ldr	r0, [pc, #36]	@ (8002580 <__NVIC_SetPriority+0xd8>)
 800255a:	1dfb      	adds	r3, r7, #7
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	001c      	movs	r4, r3
 8002560:	230f      	movs	r3, #15
 8002562:	4023      	ands	r3, r4
 8002564:	3b08      	subs	r3, #8
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	430a      	orrs	r2, r1
 800256a:	3306      	adds	r3, #6
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	18c3      	adds	r3, r0, r3
 8002570:	3304      	adds	r3, #4
 8002572:	601a      	str	r2, [r3, #0]
}
 8002574:	46c0      	nop			@ (mov r8, r8)
 8002576:	46bd      	mov	sp, r7
 8002578:	b003      	add	sp, #12
 800257a:	bd90      	pop	{r4, r7, pc}
 800257c:	e000e100 	.word	0xe000e100
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	1e5a      	subs	r2, r3, #1
 8002590:	2380      	movs	r3, #128	@ 0x80
 8002592:	045b      	lsls	r3, r3, #17
 8002594:	429a      	cmp	r2, r3
 8002596:	d301      	bcc.n	800259c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002598:	2301      	movs	r3, #1
 800259a:	e010      	b.n	80025be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259c:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <SysTick_Config+0x44>)
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	3a01      	subs	r2, #1
 80025a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a4:	2301      	movs	r3, #1
 80025a6:	425b      	negs	r3, r3
 80025a8:	2103      	movs	r1, #3
 80025aa:	0018      	movs	r0, r3
 80025ac:	f7ff ff7c 	bl	80024a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b0:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <SysTick_Config+0x44>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b6:	4b04      	ldr	r3, [pc, #16]	@ (80025c8 <SysTick_Config+0x44>)
 80025b8:	2207      	movs	r2, #7
 80025ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025bc:	2300      	movs	r3, #0
}
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b002      	add	sp, #8
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	e000e010 	.word	0xe000e010

080025cc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
 80025d6:	210f      	movs	r1, #15
 80025d8:	187b      	adds	r3, r7, r1
 80025da:	1c02      	adds	r2, r0, #0
 80025dc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	187b      	adds	r3, r7, r1
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	b25b      	sxtb	r3, r3
 80025e6:	0011      	movs	r1, r2
 80025e8:	0018      	movs	r0, r3
 80025ea:	f7ff ff5d 	bl	80024a8 <__NVIC_SetPriority>
}
 80025ee:	46c0      	nop			@ (mov r8, r8)
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b004      	add	sp, #16
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	0002      	movs	r2, r0
 80025fe:	1dfb      	adds	r3, r7, #7
 8002600:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002602:	1dfb      	adds	r3, r7, #7
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	b25b      	sxtb	r3, r3
 8002608:	0018      	movs	r0, r3
 800260a:	f7ff ff33 	bl	8002474 <__NVIC_EnableIRQ>
}
 800260e:	46c0      	nop			@ (mov r8, r8)
 8002610:	46bd      	mov	sp, r7
 8002612:	b002      	add	sp, #8
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	0018      	movs	r0, r3
 8002622:	f7ff ffaf 	bl	8002584 <SysTick_Config>
 8002626:	0003      	movs	r3, r0
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	b002      	add	sp, #8
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800263e:	e147      	b.n	80028d0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2101      	movs	r1, #1
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4091      	lsls	r1, r2
 800264a:	000a      	movs	r2, r1
 800264c:	4013      	ands	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d100      	bne.n	8002658 <HAL_GPIO_Init+0x28>
 8002656:	e138      	b.n	80028ca <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2203      	movs	r2, #3
 800265e:	4013      	ands	r3, r2
 8002660:	2b01      	cmp	r3, #1
 8002662:	d005      	beq.n	8002670 <HAL_GPIO_Init+0x40>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2203      	movs	r2, #3
 800266a:	4013      	ands	r3, r2
 800266c:	2b02      	cmp	r3, #2
 800266e:	d130      	bne.n	80026d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	2203      	movs	r2, #3
 800267c:	409a      	lsls	r2, r3
 800267e:	0013      	movs	r3, r2
 8002680:	43da      	mvns	r2, r3
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	409a      	lsls	r2, r3
 8002692:	0013      	movs	r3, r2
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026a6:	2201      	movs	r2, #1
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	409a      	lsls	r2, r3
 80026ac:	0013      	movs	r3, r2
 80026ae:	43da      	mvns	r2, r3
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	2201      	movs	r2, #1
 80026be:	401a      	ands	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	409a      	lsls	r2, r3
 80026c4:	0013      	movs	r3, r2
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2203      	movs	r2, #3
 80026d8:	4013      	ands	r3, r2
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d017      	beq.n	800270e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	2203      	movs	r2, #3
 80026ea:	409a      	lsls	r2, r3
 80026ec:	0013      	movs	r3, r2
 80026ee:	43da      	mvns	r2, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	409a      	lsls	r2, r3
 8002700:	0013      	movs	r3, r2
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2203      	movs	r2, #3
 8002714:	4013      	ands	r3, r2
 8002716:	2b02      	cmp	r3, #2
 8002718:	d123      	bne.n	8002762 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	08da      	lsrs	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3208      	adds	r2, #8
 8002722:	0092      	lsls	r2, r2, #2
 8002724:	58d3      	ldr	r3, [r2, r3]
 8002726:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2207      	movs	r2, #7
 800272c:	4013      	ands	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	220f      	movs	r2, #15
 8002732:	409a      	lsls	r2, r3
 8002734:	0013      	movs	r3, r2
 8002736:	43da      	mvns	r2, r3
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2107      	movs	r1, #7
 8002746:	400b      	ands	r3, r1
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	409a      	lsls	r2, r3
 800274c:	0013      	movs	r3, r2
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	08da      	lsrs	r2, r3, #3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3208      	adds	r2, #8
 800275c:	0092      	lsls	r2, r2, #2
 800275e:	6939      	ldr	r1, [r7, #16]
 8002760:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	2203      	movs	r2, #3
 800276e:	409a      	lsls	r2, r3
 8002770:	0013      	movs	r3, r2
 8002772:	43da      	mvns	r2, r3
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2203      	movs	r2, #3
 8002780:	401a      	ands	r2, r3
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	409a      	lsls	r2, r3
 8002788:	0013      	movs	r3, r2
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	23c0      	movs	r3, #192	@ 0xc0
 800279c:	029b      	lsls	r3, r3, #10
 800279e:	4013      	ands	r3, r2
 80027a0:	d100      	bne.n	80027a4 <HAL_GPIO_Init+0x174>
 80027a2:	e092      	b.n	80028ca <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80027a4:	4a50      	ldr	r2, [pc, #320]	@ (80028e8 <HAL_GPIO_Init+0x2b8>)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	089b      	lsrs	r3, r3, #2
 80027aa:	3318      	adds	r3, #24
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	589b      	ldr	r3, [r3, r2]
 80027b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2203      	movs	r2, #3
 80027b6:	4013      	ands	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	220f      	movs	r2, #15
 80027bc:	409a      	lsls	r2, r3
 80027be:	0013      	movs	r3, r2
 80027c0:	43da      	mvns	r2, r3
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	23a0      	movs	r3, #160	@ 0xa0
 80027cc:	05db      	lsls	r3, r3, #23
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d013      	beq.n	80027fa <HAL_GPIO_Init+0x1ca>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a45      	ldr	r2, [pc, #276]	@ (80028ec <HAL_GPIO_Init+0x2bc>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00d      	beq.n	80027f6 <HAL_GPIO_Init+0x1c6>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a44      	ldr	r2, [pc, #272]	@ (80028f0 <HAL_GPIO_Init+0x2c0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d007      	beq.n	80027f2 <HAL_GPIO_Init+0x1c2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a43      	ldr	r2, [pc, #268]	@ (80028f4 <HAL_GPIO_Init+0x2c4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d101      	bne.n	80027ee <HAL_GPIO_Init+0x1be>
 80027ea:	2303      	movs	r3, #3
 80027ec:	e006      	b.n	80027fc <HAL_GPIO_Init+0x1cc>
 80027ee:	2305      	movs	r3, #5
 80027f0:	e004      	b.n	80027fc <HAL_GPIO_Init+0x1cc>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e002      	b.n	80027fc <HAL_GPIO_Init+0x1cc>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_GPIO_Init+0x1cc>
 80027fa:	2300      	movs	r3, #0
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	2103      	movs	r1, #3
 8002800:	400a      	ands	r2, r1
 8002802:	00d2      	lsls	r2, r2, #3
 8002804:	4093      	lsls	r3, r2
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800280c:	4936      	ldr	r1, [pc, #216]	@ (80028e8 <HAL_GPIO_Init+0x2b8>)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	3318      	adds	r3, #24
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800281a:	4b33      	ldr	r3, [pc, #204]	@ (80028e8 <HAL_GPIO_Init+0x2b8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	43da      	mvns	r2, r3
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4013      	ands	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	2380      	movs	r3, #128	@ 0x80
 8002830:	035b      	lsls	r3, r3, #13
 8002832:	4013      	ands	r3, r2
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800283e:	4b2a      	ldr	r3, [pc, #168]	@ (80028e8 <HAL_GPIO_Init+0x2b8>)
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002844:	4b28      	ldr	r3, [pc, #160]	@ (80028e8 <HAL_GPIO_Init+0x2b8>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	43da      	mvns	r2, r3
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4013      	ands	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	2380      	movs	r3, #128	@ 0x80
 800285a:	039b      	lsls	r3, r3, #14
 800285c:	4013      	ands	r3, r2
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002868:	4b1f      	ldr	r3, [pc, #124]	@ (80028e8 <HAL_GPIO_Init+0x2b8>)
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800286e:	4a1e      	ldr	r2, [pc, #120]	@ (80028e8 <HAL_GPIO_Init+0x2b8>)
 8002870:	2384      	movs	r3, #132	@ 0x84
 8002872:	58d3      	ldr	r3, [r2, r3]
 8002874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	43da      	mvns	r2, r3
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	2380      	movs	r3, #128	@ 0x80
 8002886:	029b      	lsls	r3, r3, #10
 8002888:	4013      	ands	r3, r2
 800288a:	d003      	beq.n	8002894 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002894:	4914      	ldr	r1, [pc, #80]	@ (80028e8 <HAL_GPIO_Init+0x2b8>)
 8002896:	2284      	movs	r2, #132	@ 0x84
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800289c:	4a12      	ldr	r2, [pc, #72]	@ (80028e8 <HAL_GPIO_Init+0x2b8>)
 800289e:	2380      	movs	r3, #128	@ 0x80
 80028a0:	58d3      	ldr	r3, [r2, r3]
 80028a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	43da      	mvns	r2, r3
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4013      	ands	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	2380      	movs	r3, #128	@ 0x80
 80028b4:	025b      	lsls	r3, r3, #9
 80028b6:	4013      	ands	r3, r2
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028c2:	4909      	ldr	r1, [pc, #36]	@ (80028e8 <HAL_GPIO_Init+0x2b8>)
 80028c4:	2280      	movs	r2, #128	@ 0x80
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	3301      	adds	r3, #1
 80028ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	40da      	lsrs	r2, r3
 80028d8:	1e13      	subs	r3, r2, #0
 80028da:	d000      	beq.n	80028de <HAL_GPIO_Init+0x2ae>
 80028dc:	e6b0      	b.n	8002640 <HAL_GPIO_Init+0x10>
  }
}
 80028de:	46c0      	nop			@ (mov r8, r8)
 80028e0:	46c0      	nop			@ (mov r8, r8)
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b006      	add	sp, #24
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40021800 	.word	0x40021800
 80028ec:	50000400 	.word	0x50000400
 80028f0:	50000800 	.word	0x50000800
 80028f4:	50000c00 	.word	0x50000c00

080028f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	000a      	movs	r2, r1
 8002902:	1cbb      	adds	r3, r7, #2
 8002904:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	1cba      	adds	r2, r7, #2
 800290c:	8812      	ldrh	r2, [r2, #0]
 800290e:	4013      	ands	r3, r2
 8002910:	d004      	beq.n	800291c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002912:	230f      	movs	r3, #15
 8002914:	18fb      	adds	r3, r7, r3
 8002916:	2201      	movs	r2, #1
 8002918:	701a      	strb	r2, [r3, #0]
 800291a:	e003      	b.n	8002924 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800291c:	230f      	movs	r3, #15
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002924:	230f      	movs	r3, #15
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	781b      	ldrb	r3, [r3, #0]
}
 800292a:	0018      	movs	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	b004      	add	sp, #16
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	0008      	movs	r0, r1
 800293c:	0011      	movs	r1, r2
 800293e:	1cbb      	adds	r3, r7, #2
 8002940:	1c02      	adds	r2, r0, #0
 8002942:	801a      	strh	r2, [r3, #0]
 8002944:	1c7b      	adds	r3, r7, #1
 8002946:	1c0a      	adds	r2, r1, #0
 8002948:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800294a:	1c7b      	adds	r3, r7, #1
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d004      	beq.n	800295c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002952:	1cbb      	adds	r3, r7, #2
 8002954:	881a      	ldrh	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800295a:	e003      	b.n	8002964 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800295c:	1cbb      	adds	r3, r7, #2
 800295e:	881a      	ldrh	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002964:	46c0      	nop			@ (mov r8, r8)
 8002966:	46bd      	mov	sp, r7
 8002968:	b002      	add	sp, #8
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	000a      	movs	r2, r1
 8002976:	1cbb      	adds	r3, r7, #2
 8002978:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002980:	1cbb      	adds	r3, r7, #2
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4013      	ands	r3, r2
 8002988:	041a      	lsls	r2, r3, #16
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	43db      	mvns	r3, r3
 800298e:	1cb9      	adds	r1, r7, #2
 8002990:	8809      	ldrh	r1, [r1, #0]
 8002992:	400b      	ands	r3, r1
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	619a      	str	r2, [r3, #24]
}
 800299a:	46c0      	nop			@ (mov r8, r8)
 800299c:	46bd      	mov	sp, r7
 800299e:	b004      	add	sp, #16
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	0002      	movs	r2, r0
 80029ac:	1dbb      	adds	r3, r7, #6
 80029ae:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80029b0:	4b10      	ldr	r3, [pc, #64]	@ (80029f4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	1dba      	adds	r2, r7, #6
 80029b6:	8812      	ldrh	r2, [r2, #0]
 80029b8:	4013      	ands	r3, r2
 80029ba:	d008      	beq.n	80029ce <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80029bc:	4b0d      	ldr	r3, [pc, #52]	@ (80029f4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80029be:	1dba      	adds	r2, r7, #6
 80029c0:	8812      	ldrh	r2, [r2, #0]
 80029c2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80029c4:	1dbb      	adds	r3, r7, #6
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	0018      	movs	r0, r3
 80029ca:	f000 f815 	bl	80029f8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80029ce:	4b09      	ldr	r3, [pc, #36]	@ (80029f4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	1dba      	adds	r2, r7, #6
 80029d4:	8812      	ldrh	r2, [r2, #0]
 80029d6:	4013      	ands	r3, r2
 80029d8:	d008      	beq.n	80029ec <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80029da:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80029dc:	1dba      	adds	r2, r7, #6
 80029de:	8812      	ldrh	r2, [r2, #0]
 80029e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80029e2:	1dbb      	adds	r3, r7, #6
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	0018      	movs	r0, r3
 80029e8:	f7fe f8a4 	bl	8000b34 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80029ec:	46c0      	nop			@ (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b002      	add	sp, #8
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40021800 	.word	0x40021800

080029f8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	0002      	movs	r2, r0
 8002a00:	1dbb      	adds	r3, r7, #6
 8002a02:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002a04:	46c0      	nop			@ (mov r8, r8)
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b002      	add	sp, #8
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e08f      	b.n	8002b3e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2241      	movs	r2, #65	@ 0x41
 8002a22:	5c9b      	ldrb	r3, [r3, r2]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d107      	bne.n	8002a3a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2240      	movs	r2, #64	@ 0x40
 8002a2e:	2100      	movs	r1, #0
 8002a30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7fe fdd3 	bl	80015e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2241      	movs	r2, #65	@ 0x41
 8002a3e:	2124      	movs	r1, #36	@ 0x24
 8002a40:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	438a      	bics	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	493b      	ldr	r1, [pc, #236]	@ (8002b48 <HAL_I2C_Init+0x13c>)
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4938      	ldr	r1, [pc, #224]	@ (8002b4c <HAL_I2C_Init+0x140>)
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d108      	bne.n	8002a8a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2180      	movs	r1, #128	@ 0x80
 8002a82:	0209      	lsls	r1, r1, #8
 8002a84:	430a      	orrs	r2, r1
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	e007      	b.n	8002a9a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2184      	movs	r1, #132	@ 0x84
 8002a94:	0209      	lsls	r1, r1, #8
 8002a96:	430a      	orrs	r2, r1
 8002a98:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d109      	bne.n	8002ab6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2180      	movs	r1, #128	@ 0x80
 8002aae:	0109      	lsls	r1, r1, #4
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	e007      	b.n	8002ac6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4923      	ldr	r1, [pc, #140]	@ (8002b50 <HAL_I2C_Init+0x144>)
 8002ac2:	400a      	ands	r2, r1
 8002ac4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4920      	ldr	r1, [pc, #128]	@ (8002b54 <HAL_I2C_Init+0x148>)
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	491a      	ldr	r1, [pc, #104]	@ (8002b4c <HAL_I2C_Init+0x140>)
 8002ae2:	400a      	ands	r2, r1
 8002ae4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69d9      	ldr	r1, [r3, #28]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1a      	ldr	r2, [r3, #32]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2241      	movs	r2, #65	@ 0x41
 8002b2a:	2120      	movs	r1, #32
 8002b2c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2242      	movs	r2, #66	@ 0x42
 8002b38:	2100      	movs	r1, #0
 8002b3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	0018      	movs	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b002      	add	sp, #8
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			@ (mov r8, r8)
 8002b48:	f0ffffff 	.word	0xf0ffffff
 8002b4c:	ffff7fff 	.word	0xffff7fff
 8002b50:	fffff7ff 	.word	0xfffff7ff
 8002b54:	02008000 	.word	0x02008000

08002b58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2241      	movs	r2, #65	@ 0x41
 8002b66:	5c9b      	ldrb	r3, [r3, r2]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	d138      	bne.n	8002be0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2240      	movs	r2, #64	@ 0x40
 8002b72:	5c9b      	ldrb	r3, [r3, r2]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e032      	b.n	8002be2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2240      	movs	r2, #64	@ 0x40
 8002b80:	2101      	movs	r1, #1
 8002b82:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2241      	movs	r2, #65	@ 0x41
 8002b88:	2124      	movs	r1, #36	@ 0x24
 8002b8a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2101      	movs	r1, #1
 8002b98:	438a      	bics	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4911      	ldr	r1, [pc, #68]	@ (8002bec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002ba8:	400a      	ands	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6819      	ldr	r1, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2241      	movs	r2, #65	@ 0x41
 8002bd0:	2120      	movs	r1, #32
 8002bd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2240      	movs	r2, #64	@ 0x40
 8002bd8:	2100      	movs	r1, #0
 8002bda:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e000      	b.n	8002be2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002be0:	2302      	movs	r3, #2
  }
}
 8002be2:	0018      	movs	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b002      	add	sp, #8
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	46c0      	nop			@ (mov r8, r8)
 8002bec:	ffffefff 	.word	0xffffefff

08002bf0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2241      	movs	r2, #65	@ 0x41
 8002bfe:	5c9b      	ldrb	r3, [r3, r2]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	d139      	bne.n	8002c7a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2240      	movs	r2, #64	@ 0x40
 8002c0a:	5c9b      	ldrb	r3, [r3, r2]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e033      	b.n	8002c7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2240      	movs	r2, #64	@ 0x40
 8002c18:	2101      	movs	r1, #1
 8002c1a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2241      	movs	r2, #65	@ 0x41
 8002c20:	2124      	movs	r1, #36	@ 0x24
 8002c22:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2101      	movs	r1, #1
 8002c30:	438a      	bics	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4a11      	ldr	r2, [pc, #68]	@ (8002c84 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2101      	movs	r1, #1
 8002c62:	430a      	orrs	r2, r1
 8002c64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2241      	movs	r2, #65	@ 0x41
 8002c6a:	2120      	movs	r1, #32
 8002c6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2240      	movs	r2, #64	@ 0x40
 8002c72:	2100      	movs	r1, #0
 8002c74:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e000      	b.n	8002c7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c7a:	2302      	movs	r3, #2
  }
}
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b004      	add	sp, #16
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	fffff0ff 	.word	0xfffff0ff

08002c88 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ca0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	4b03      	ldr	r3, [pc, #12]	@ (8002ca0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002c92:	2180      	movs	r1, #128	@ 0x80
 8002c94:	0049      	lsls	r1, r1, #1
 8002c96:	430a      	orrs	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]
}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40007000 	.word	0x40007000

08002ca4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002cac:	4b19      	ldr	r3, [pc, #100]	@ (8002d14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a19      	ldr	r2, [pc, #100]	@ (8002d18 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	4b17      	ldr	r3, [pc, #92]	@ (8002d14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	2380      	movs	r3, #128	@ 0x80
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d11f      	bne.n	8002d08 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002cc8:	4b14      	ldr	r3, [pc, #80]	@ (8002d1c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	0013      	movs	r3, r2
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	189b      	adds	r3, r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4912      	ldr	r1, [pc, #72]	@ (8002d20 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f7fd fa1e 	bl	8000118 <__udivsi3>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	3301      	adds	r3, #1
 8002ce0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ce2:	e008      	b.n	8002cf6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	e001      	b.n	8002cf6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e009      	b.n	8002d0a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cf6:	4b07      	ldr	r3, [pc, #28]	@ (8002d14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	2380      	movs	r3, #128	@ 0x80
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	401a      	ands	r2, r3
 8002d00:	2380      	movs	r3, #128	@ 0x80
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d0ed      	beq.n	8002ce4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b004      	add	sp, #16
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	40007000 	.word	0x40007000
 8002d18:	fffff9ff 	.word	0xfffff9ff
 8002d1c:	20000040 	.word	0x20000040
 8002d20:	000f4240 	.word	0x000f4240

08002d24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e2fe      	b.n	8003334 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d100      	bne.n	8002d42 <HAL_RCC_OscConfig+0x1e>
 8002d40:	e07c      	b.n	8002e3c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d42:	4bc3      	ldr	r3, [pc, #780]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2238      	movs	r2, #56	@ 0x38
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d4c:	4bc0      	ldr	r3, [pc, #768]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2203      	movs	r2, #3
 8002d52:	4013      	ands	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d102      	bne.n	8002d62 <HAL_RCC_OscConfig+0x3e>
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d002      	beq.n	8002d68 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d10b      	bne.n	8002d80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d68:	4bb9      	ldr	r3, [pc, #740]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	2380      	movs	r3, #128	@ 0x80
 8002d6e:	029b      	lsls	r3, r3, #10
 8002d70:	4013      	ands	r3, r2
 8002d72:	d062      	beq.n	8002e3a <HAL_RCC_OscConfig+0x116>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d15e      	bne.n	8002e3a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e2d9      	b.n	8003334 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	2380      	movs	r3, #128	@ 0x80
 8002d86:	025b      	lsls	r3, r3, #9
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d107      	bne.n	8002d9c <HAL_RCC_OscConfig+0x78>
 8002d8c:	4bb0      	ldr	r3, [pc, #704]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4baf      	ldr	r3, [pc, #700]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002d92:	2180      	movs	r1, #128	@ 0x80
 8002d94:	0249      	lsls	r1, r1, #9
 8002d96:	430a      	orrs	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	e020      	b.n	8002dde <HAL_RCC_OscConfig+0xba>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	23a0      	movs	r3, #160	@ 0xa0
 8002da2:	02db      	lsls	r3, r3, #11
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d10e      	bne.n	8002dc6 <HAL_RCC_OscConfig+0xa2>
 8002da8:	4ba9      	ldr	r3, [pc, #676]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4ba8      	ldr	r3, [pc, #672]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002dae:	2180      	movs	r1, #128	@ 0x80
 8002db0:	02c9      	lsls	r1, r1, #11
 8002db2:	430a      	orrs	r2, r1
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	4ba6      	ldr	r3, [pc, #664]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4ba5      	ldr	r3, [pc, #660]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002dbc:	2180      	movs	r1, #128	@ 0x80
 8002dbe:	0249      	lsls	r1, r1, #9
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	e00b      	b.n	8002dde <HAL_RCC_OscConfig+0xba>
 8002dc6:	4ba2      	ldr	r3, [pc, #648]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	4ba1      	ldr	r3, [pc, #644]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002dcc:	49a1      	ldr	r1, [pc, #644]	@ (8003054 <HAL_RCC_OscConfig+0x330>)
 8002dce:	400a      	ands	r2, r1
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	4b9f      	ldr	r3, [pc, #636]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	4b9e      	ldr	r3, [pc, #632]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002dd8:	499f      	ldr	r1, [pc, #636]	@ (8003058 <HAL_RCC_OscConfig+0x334>)
 8002dda:	400a      	ands	r2, r1
 8002ddc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d014      	beq.n	8002e10 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de6:	f7fe febd 	bl	8001b64 <HAL_GetTick>
 8002dea:	0003      	movs	r3, r0
 8002dec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df0:	f7fe feb8 	bl	8001b64 <HAL_GetTick>
 8002df4:	0002      	movs	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	@ 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e298      	b.n	8003334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e02:	4b93      	ldr	r3, [pc, #588]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	2380      	movs	r3, #128	@ 0x80
 8002e08:	029b      	lsls	r3, r3, #10
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0xcc>
 8002e0e:	e015      	b.n	8002e3c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7fe fea8 	bl	8001b64 <HAL_GetTick>
 8002e14:	0003      	movs	r3, r0
 8002e16:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e1a:	f7fe fea3 	bl	8001b64 <HAL_GetTick>
 8002e1e:	0002      	movs	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b64      	cmp	r3, #100	@ 0x64
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e283      	b.n	8003334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e2c:	4b88      	ldr	r3, [pc, #544]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	2380      	movs	r3, #128	@ 0x80
 8002e32:	029b      	lsls	r3, r3, #10
 8002e34:	4013      	ands	r3, r2
 8002e36:	d1f0      	bne.n	8002e1a <HAL_RCC_OscConfig+0xf6>
 8002e38:	e000      	b.n	8002e3c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2202      	movs	r2, #2
 8002e42:	4013      	ands	r3, r2
 8002e44:	d100      	bne.n	8002e48 <HAL_RCC_OscConfig+0x124>
 8002e46:	e099      	b.n	8002f7c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e48:	4b81      	ldr	r3, [pc, #516]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2238      	movs	r2, #56	@ 0x38
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e52:	4b7f      	ldr	r3, [pc, #508]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2203      	movs	r2, #3
 8002e58:	4013      	ands	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	2b10      	cmp	r3, #16
 8002e60:	d102      	bne.n	8002e68 <HAL_RCC_OscConfig+0x144>
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d002      	beq.n	8002e6e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d135      	bne.n	8002eda <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e6e:	4b78      	ldr	r3, [pc, #480]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	2380      	movs	r3, #128	@ 0x80
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4013      	ands	r3, r2
 8002e78:	d005      	beq.n	8002e86 <HAL_RCC_OscConfig+0x162>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e256      	b.n	8003334 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e86:	4b72      	ldr	r3, [pc, #456]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4a74      	ldr	r2, [pc, #464]	@ (800305c <HAL_RCC_OscConfig+0x338>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	0019      	movs	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	021a      	lsls	r2, r3, #8
 8002e96:	4b6e      	ldr	r3, [pc, #440]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d112      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002ea2:	4b6b      	ldr	r3, [pc, #428]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a6e      	ldr	r2, [pc, #440]	@ (8003060 <HAL_RCC_OscConfig+0x33c>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	0019      	movs	r1, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	4b67      	ldr	r3, [pc, #412]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002eb6:	4b66      	ldr	r3, [pc, #408]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	0adb      	lsrs	r3, r3, #11
 8002ebc:	2207      	movs	r2, #7
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	4a68      	ldr	r2, [pc, #416]	@ (8003064 <HAL_RCC_OscConfig+0x340>)
 8002ec2:	40da      	lsrs	r2, r3
 8002ec4:	4b68      	ldr	r3, [pc, #416]	@ (8003068 <HAL_RCC_OscConfig+0x344>)
 8002ec6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ec8:	4b68      	ldr	r3, [pc, #416]	@ (800306c <HAL_RCC_OscConfig+0x348>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f7fe fded 	bl	8001aac <HAL_InitTick>
 8002ed2:	1e03      	subs	r3, r0, #0
 8002ed4:	d051      	beq.n	8002f7a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e22c      	b.n	8003334 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d030      	beq.n	8002f44 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002ee2:	4b5b      	ldr	r3, [pc, #364]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a5e      	ldr	r2, [pc, #376]	@ (8003060 <HAL_RCC_OscConfig+0x33c>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	0019      	movs	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	4b57      	ldr	r3, [pc, #348]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002ef6:	4b56      	ldr	r3, [pc, #344]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4b55      	ldr	r3, [pc, #340]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002efc:	2180      	movs	r1, #128	@ 0x80
 8002efe:	0049      	lsls	r1, r1, #1
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f04:	f7fe fe2e 	bl	8001b64 <HAL_GetTick>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f0e:	f7fe fe29 	bl	8001b64 <HAL_GetTick>
 8002f12:	0002      	movs	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e209      	b.n	8003334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f20:	4b4b      	ldr	r3, [pc, #300]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	2380      	movs	r3, #128	@ 0x80
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2c:	4b48      	ldr	r3, [pc, #288]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4a4a      	ldr	r2, [pc, #296]	@ (800305c <HAL_RCC_OscConfig+0x338>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	0019      	movs	r1, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	021a      	lsls	r2, r3, #8
 8002f3c:	4b44      	ldr	r3, [pc, #272]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	e01b      	b.n	8002f7c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002f44:	4b42      	ldr	r3, [pc, #264]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4b41      	ldr	r3, [pc, #260]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002f4a:	4949      	ldr	r1, [pc, #292]	@ (8003070 <HAL_RCC_OscConfig+0x34c>)
 8002f4c:	400a      	ands	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fe fe08 	bl	8001b64 <HAL_GetTick>
 8002f54:	0003      	movs	r3, r0
 8002f56:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f5a:	f7fe fe03 	bl	8001b64 <HAL_GetTick>
 8002f5e:	0002      	movs	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e1e3      	b.n	8003334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f6c:	4b38      	ldr	r3, [pc, #224]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	2380      	movs	r3, #128	@ 0x80
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4013      	ands	r3, r2
 8002f76:	d1f0      	bne.n	8002f5a <HAL_RCC_OscConfig+0x236>
 8002f78:	e000      	b.n	8002f7c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f7a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2208      	movs	r2, #8
 8002f82:	4013      	ands	r3, r2
 8002f84:	d047      	beq.n	8003016 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f86:	4b32      	ldr	r3, [pc, #200]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2238      	movs	r2, #56	@ 0x38
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b18      	cmp	r3, #24
 8002f90:	d10a      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002f92:	4b2f      	ldr	r3, [pc, #188]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f96:	2202      	movs	r2, #2
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d03c      	beq.n	8003016 <HAL_RCC_OscConfig+0x2f2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d138      	bne.n	8003016 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e1c5      	b.n	8003334 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d019      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002fb0:	4b27      	ldr	r3, [pc, #156]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002fb2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002fb4:	4b26      	ldr	r3, [pc, #152]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7fe fdd2 	bl	8001b64 <HAL_GetTick>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc6:	f7fe fdcd 	bl	8001b64 <HAL_GetTick>
 8002fca:	0002      	movs	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e1ad      	b.n	8003334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fdc:	2202      	movs	r2, #2
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d0f1      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x2a2>
 8002fe2:	e018      	b.n	8003016 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002fe6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002fe8:	4b19      	ldr	r3, [pc, #100]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8002fea:	2101      	movs	r1, #1
 8002fec:	438a      	bics	r2, r1
 8002fee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fe fdb8 	bl	8001b64 <HAL_GetTick>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ffa:	f7fe fdb3 	bl	8001b64 <HAL_GetTick>
 8002ffe:	0002      	movs	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e193      	b.n	8003334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800300c:	4b10      	ldr	r3, [pc, #64]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 800300e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003010:	2202      	movs	r2, #2
 8003012:	4013      	ands	r3, r2
 8003014:	d1f1      	bne.n	8002ffa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2204      	movs	r2, #4
 800301c:	4013      	ands	r3, r2
 800301e:	d100      	bne.n	8003022 <HAL_RCC_OscConfig+0x2fe>
 8003020:	e0c6      	b.n	80031b0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003022:	231f      	movs	r3, #31
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	2200      	movs	r2, #0
 8003028:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800302a:	4b09      	ldr	r3, [pc, #36]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2238      	movs	r2, #56	@ 0x38
 8003030:	4013      	ands	r3, r2
 8003032:	2b20      	cmp	r3, #32
 8003034:	d11e      	bne.n	8003074 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003036:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <HAL_RCC_OscConfig+0x32c>)
 8003038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303a:	2202      	movs	r2, #2
 800303c:	4013      	ands	r3, r2
 800303e:	d100      	bne.n	8003042 <HAL_RCC_OscConfig+0x31e>
 8003040:	e0b6      	b.n	80031b0 <HAL_RCC_OscConfig+0x48c>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d000      	beq.n	800304c <HAL_RCC_OscConfig+0x328>
 800304a:	e0b1      	b.n	80031b0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e171      	b.n	8003334 <HAL_RCC_OscConfig+0x610>
 8003050:	40021000 	.word	0x40021000
 8003054:	fffeffff 	.word	0xfffeffff
 8003058:	fffbffff 	.word	0xfffbffff
 800305c:	ffff80ff 	.word	0xffff80ff
 8003060:	ffffc7ff 	.word	0xffffc7ff
 8003064:	00f42400 	.word	0x00f42400
 8003068:	20000040 	.word	0x20000040
 800306c:	20000044 	.word	0x20000044
 8003070:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003074:	4bb1      	ldr	r3, [pc, #708]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 8003076:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003078:	2380      	movs	r3, #128	@ 0x80
 800307a:	055b      	lsls	r3, r3, #21
 800307c:	4013      	ands	r3, r2
 800307e:	d101      	bne.n	8003084 <HAL_RCC_OscConfig+0x360>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <HAL_RCC_OscConfig+0x362>
 8003084:	2300      	movs	r3, #0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d011      	beq.n	80030ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800308a:	4bac      	ldr	r3, [pc, #688]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 800308c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800308e:	4bab      	ldr	r3, [pc, #684]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 8003090:	2180      	movs	r1, #128	@ 0x80
 8003092:	0549      	lsls	r1, r1, #21
 8003094:	430a      	orrs	r2, r1
 8003096:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003098:	4ba8      	ldr	r3, [pc, #672]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 800309a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800309c:	2380      	movs	r3, #128	@ 0x80
 800309e:	055b      	lsls	r3, r3, #21
 80030a0:	4013      	ands	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80030a6:	231f      	movs	r3, #31
 80030a8:	18fb      	adds	r3, r7, r3
 80030aa:	2201      	movs	r2, #1
 80030ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ae:	4ba4      	ldr	r3, [pc, #656]	@ (8003340 <HAL_RCC_OscConfig+0x61c>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	2380      	movs	r3, #128	@ 0x80
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	4013      	ands	r3, r2
 80030b8:	d11a      	bne.n	80030f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030ba:	4ba1      	ldr	r3, [pc, #644]	@ (8003340 <HAL_RCC_OscConfig+0x61c>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4ba0      	ldr	r3, [pc, #640]	@ (8003340 <HAL_RCC_OscConfig+0x61c>)
 80030c0:	2180      	movs	r1, #128	@ 0x80
 80030c2:	0049      	lsls	r1, r1, #1
 80030c4:	430a      	orrs	r2, r1
 80030c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80030c8:	f7fe fd4c 	bl	8001b64 <HAL_GetTick>
 80030cc:	0003      	movs	r3, r0
 80030ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d2:	f7fe fd47 	bl	8001b64 <HAL_GetTick>
 80030d6:	0002      	movs	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e127      	b.n	8003334 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030e4:	4b96      	ldr	r3, [pc, #600]	@ (8003340 <HAL_RCC_OscConfig+0x61c>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	2380      	movs	r3, #128	@ 0x80
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4013      	ands	r3, r2
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d106      	bne.n	8003106 <HAL_RCC_OscConfig+0x3e2>
 80030f8:	4b90      	ldr	r3, [pc, #576]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 80030fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030fc:	4b8f      	ldr	r3, [pc, #572]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 80030fe:	2101      	movs	r1, #1
 8003100:	430a      	orrs	r2, r1
 8003102:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003104:	e01c      	b.n	8003140 <HAL_RCC_OscConfig+0x41c>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b05      	cmp	r3, #5
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0x404>
 800310e:	4b8b      	ldr	r3, [pc, #556]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 8003110:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003112:	4b8a      	ldr	r3, [pc, #552]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 8003114:	2104      	movs	r1, #4
 8003116:	430a      	orrs	r2, r1
 8003118:	65da      	str	r2, [r3, #92]	@ 0x5c
 800311a:	4b88      	ldr	r3, [pc, #544]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 800311c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800311e:	4b87      	ldr	r3, [pc, #540]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 8003120:	2101      	movs	r1, #1
 8003122:	430a      	orrs	r2, r1
 8003124:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003126:	e00b      	b.n	8003140 <HAL_RCC_OscConfig+0x41c>
 8003128:	4b84      	ldr	r3, [pc, #528]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 800312a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800312c:	4b83      	ldr	r3, [pc, #524]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 800312e:	2101      	movs	r1, #1
 8003130:	438a      	bics	r2, r1
 8003132:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003134:	4b81      	ldr	r3, [pc, #516]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 8003136:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003138:	4b80      	ldr	r3, [pc, #512]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 800313a:	2104      	movs	r1, #4
 800313c:	438a      	bics	r2, r1
 800313e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d014      	beq.n	8003172 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003148:	f7fe fd0c 	bl	8001b64 <HAL_GetTick>
 800314c:	0003      	movs	r3, r0
 800314e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003150:	e009      	b.n	8003166 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003152:	f7fe fd07 	bl	8001b64 <HAL_GetTick>
 8003156:	0002      	movs	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	4a79      	ldr	r2, [pc, #484]	@ (8003344 <HAL_RCC_OscConfig+0x620>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e0e6      	b.n	8003334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003166:	4b75      	ldr	r3, [pc, #468]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 8003168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316a:	2202      	movs	r2, #2
 800316c:	4013      	ands	r3, r2
 800316e:	d0f0      	beq.n	8003152 <HAL_RCC_OscConfig+0x42e>
 8003170:	e013      	b.n	800319a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003172:	f7fe fcf7 	bl	8001b64 <HAL_GetTick>
 8003176:	0003      	movs	r3, r0
 8003178:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800317a:	e009      	b.n	8003190 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317c:	f7fe fcf2 	bl	8001b64 <HAL_GetTick>
 8003180:	0002      	movs	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	4a6f      	ldr	r2, [pc, #444]	@ (8003344 <HAL_RCC_OscConfig+0x620>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e0d1      	b.n	8003334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003190:	4b6a      	ldr	r3, [pc, #424]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 8003192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003194:	2202      	movs	r2, #2
 8003196:	4013      	ands	r3, r2
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800319a:	231f      	movs	r3, #31
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d105      	bne.n	80031b0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80031a4:	4b65      	ldr	r3, [pc, #404]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 80031a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031a8:	4b64      	ldr	r3, [pc, #400]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 80031aa:	4967      	ldr	r1, [pc, #412]	@ (8003348 <HAL_RCC_OscConfig+0x624>)
 80031ac:	400a      	ands	r2, r1
 80031ae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d100      	bne.n	80031ba <HAL_RCC_OscConfig+0x496>
 80031b8:	e0bb      	b.n	8003332 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ba:	4b60      	ldr	r3, [pc, #384]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2238      	movs	r2, #56	@ 0x38
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b10      	cmp	r3, #16
 80031c4:	d100      	bne.n	80031c8 <HAL_RCC_OscConfig+0x4a4>
 80031c6:	e07b      	b.n	80032c0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d156      	bne.n	800327e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d0:	4b5a      	ldr	r3, [pc, #360]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4b59      	ldr	r3, [pc, #356]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 80031d6:	495d      	ldr	r1, [pc, #372]	@ (800334c <HAL_RCC_OscConfig+0x628>)
 80031d8:	400a      	ands	r2, r1
 80031da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fe fcc2 	bl	8001b64 <HAL_GetTick>
 80031e0:	0003      	movs	r3, r0
 80031e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e6:	f7fe fcbd 	bl	8001b64 <HAL_GetTick>
 80031ea:	0002      	movs	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e09d      	b.n	8003334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f8:	4b50      	ldr	r3, [pc, #320]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	2380      	movs	r3, #128	@ 0x80
 80031fe:	049b      	lsls	r3, r3, #18
 8003200:	4013      	ands	r3, r2
 8003202:	d1f0      	bne.n	80031e6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003204:	4b4d      	ldr	r3, [pc, #308]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4a51      	ldr	r2, [pc, #324]	@ (8003350 <HAL_RCC_OscConfig+0x62c>)
 800320a:	4013      	ands	r3, r2
 800320c:	0019      	movs	r1, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1a      	ldr	r2, [r3, #32]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321c:	021b      	lsls	r3, r3, #8
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003230:	431a      	orrs	r2, r3
 8003232:	4b42      	ldr	r3, [pc, #264]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 8003234:	430a      	orrs	r2, r1
 8003236:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003238:	4b40      	ldr	r3, [pc, #256]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4b3f      	ldr	r3, [pc, #252]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 800323e:	2180      	movs	r1, #128	@ 0x80
 8003240:	0449      	lsls	r1, r1, #17
 8003242:	430a      	orrs	r2, r1
 8003244:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003246:	4b3d      	ldr	r3, [pc, #244]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	4b3c      	ldr	r3, [pc, #240]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 800324c:	2180      	movs	r1, #128	@ 0x80
 800324e:	0549      	lsls	r1, r1, #21
 8003250:	430a      	orrs	r2, r1
 8003252:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe fc86 	bl	8001b64 <HAL_GetTick>
 8003258:	0003      	movs	r3, r0
 800325a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325e:	f7fe fc81 	bl	8001b64 <HAL_GetTick>
 8003262:	0002      	movs	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e061      	b.n	8003334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003270:	4b32      	ldr	r3, [pc, #200]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	2380      	movs	r3, #128	@ 0x80
 8003276:	049b      	lsls	r3, r3, #18
 8003278:	4013      	ands	r3, r2
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x53a>
 800327c:	e059      	b.n	8003332 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327e:	4b2f      	ldr	r3, [pc, #188]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4b2e      	ldr	r3, [pc, #184]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 8003284:	4931      	ldr	r1, [pc, #196]	@ (800334c <HAL_RCC_OscConfig+0x628>)
 8003286:	400a      	ands	r2, r1
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328a:	f7fe fc6b 	bl	8001b64 <HAL_GetTick>
 800328e:	0003      	movs	r3, r0
 8003290:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003294:	f7fe fc66 	bl	8001b64 <HAL_GetTick>
 8003298:	0002      	movs	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e046      	b.n	8003334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032a6:	4b25      	ldr	r3, [pc, #148]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	2380      	movs	r3, #128	@ 0x80
 80032ac:	049b      	lsls	r3, r3, #18
 80032ae:	4013      	ands	r3, r2
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80032b2:	4b22      	ldr	r3, [pc, #136]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	4b21      	ldr	r3, [pc, #132]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 80032b8:	4926      	ldr	r1, [pc, #152]	@ (8003354 <HAL_RCC_OscConfig+0x630>)
 80032ba:	400a      	ands	r2, r1
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	e038      	b.n	8003332 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e033      	b.n	8003334 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80032cc:	4b1b      	ldr	r3, [pc, #108]	@ (800333c <HAL_RCC_OscConfig+0x618>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2203      	movs	r2, #3
 80032d6:	401a      	ands	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d126      	bne.n	800332e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2270      	movs	r2, #112	@ 0x70
 80032e4:	401a      	ands	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d11f      	bne.n	800332e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	23fe      	movs	r3, #254	@ 0xfe
 80032f2:	01db      	lsls	r3, r3, #7
 80032f4:	401a      	ands	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d116      	bne.n	800332e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	23f8      	movs	r3, #248	@ 0xf8
 8003304:	039b      	lsls	r3, r3, #14
 8003306:	401a      	ands	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d10e      	bne.n	800332e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	23e0      	movs	r3, #224	@ 0xe0
 8003314:	051b      	lsls	r3, r3, #20
 8003316:	401a      	ands	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d106      	bne.n	800332e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	0f5b      	lsrs	r3, r3, #29
 8003324:	075a      	lsls	r2, r3, #29
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d001      	beq.n	8003332 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	0018      	movs	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	b008      	add	sp, #32
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40021000 	.word	0x40021000
 8003340:	40007000 	.word	0x40007000
 8003344:	00001388 	.word	0x00001388
 8003348:	efffffff 	.word	0xefffffff
 800334c:	feffffff 	.word	0xfeffffff
 8003350:	11c1808c 	.word	0x11c1808c
 8003354:	eefefffc 	.word	0xeefefffc

08003358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0e9      	b.n	8003540 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800336c:	4b76      	ldr	r3, [pc, #472]	@ (8003548 <HAL_RCC_ClockConfig+0x1f0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2207      	movs	r2, #7
 8003372:	4013      	ands	r3, r2
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d91e      	bls.n	80033b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b73      	ldr	r3, [pc, #460]	@ (8003548 <HAL_RCC_ClockConfig+0x1f0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2207      	movs	r2, #7
 8003380:	4393      	bics	r3, r2
 8003382:	0019      	movs	r1, r3
 8003384:	4b70      	ldr	r3, [pc, #448]	@ (8003548 <HAL_RCC_ClockConfig+0x1f0>)
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800338c:	f7fe fbea 	bl	8001b64 <HAL_GetTick>
 8003390:	0003      	movs	r3, r0
 8003392:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003394:	e009      	b.n	80033aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003396:	f7fe fbe5 	bl	8001b64 <HAL_GetTick>
 800339a:	0002      	movs	r2, r0
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	4a6a      	ldr	r2, [pc, #424]	@ (800354c <HAL_RCC_ClockConfig+0x1f4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e0ca      	b.n	8003540 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033aa:	4b67      	ldr	r3, [pc, #412]	@ (8003548 <HAL_RCC_ClockConfig+0x1f0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2207      	movs	r2, #7
 80033b0:	4013      	ands	r3, r2
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d1ee      	bne.n	8003396 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2202      	movs	r2, #2
 80033be:	4013      	ands	r3, r2
 80033c0:	d015      	beq.n	80033ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2204      	movs	r2, #4
 80033c8:	4013      	ands	r3, r2
 80033ca:	d006      	beq.n	80033da <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80033cc:	4b60      	ldr	r3, [pc, #384]	@ (8003550 <HAL_RCC_ClockConfig+0x1f8>)
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	4b5f      	ldr	r3, [pc, #380]	@ (8003550 <HAL_RCC_ClockConfig+0x1f8>)
 80033d2:	21e0      	movs	r1, #224	@ 0xe0
 80033d4:	01c9      	lsls	r1, r1, #7
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033da:	4b5d      	ldr	r3, [pc, #372]	@ (8003550 <HAL_RCC_ClockConfig+0x1f8>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	4a5d      	ldr	r2, [pc, #372]	@ (8003554 <HAL_RCC_ClockConfig+0x1fc>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	0019      	movs	r1, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	4b59      	ldr	r3, [pc, #356]	@ (8003550 <HAL_RCC_ClockConfig+0x1f8>)
 80033ea:	430a      	orrs	r2, r1
 80033ec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2201      	movs	r2, #1
 80033f4:	4013      	ands	r3, r2
 80033f6:	d057      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d107      	bne.n	8003410 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003400:	4b53      	ldr	r3, [pc, #332]	@ (8003550 <HAL_RCC_ClockConfig+0x1f8>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	2380      	movs	r3, #128	@ 0x80
 8003406:	029b      	lsls	r3, r3, #10
 8003408:	4013      	ands	r3, r2
 800340a:	d12b      	bne.n	8003464 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e097      	b.n	8003540 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d107      	bne.n	8003428 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003418:	4b4d      	ldr	r3, [pc, #308]	@ (8003550 <HAL_RCC_ClockConfig+0x1f8>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	2380      	movs	r3, #128	@ 0x80
 800341e:	049b      	lsls	r3, r3, #18
 8003420:	4013      	ands	r3, r2
 8003422:	d11f      	bne.n	8003464 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e08b      	b.n	8003540 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d107      	bne.n	8003440 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003430:	4b47      	ldr	r3, [pc, #284]	@ (8003550 <HAL_RCC_ClockConfig+0x1f8>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	2380      	movs	r3, #128	@ 0x80
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4013      	ands	r3, r2
 800343a:	d113      	bne.n	8003464 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e07f      	b.n	8003540 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b03      	cmp	r3, #3
 8003446:	d106      	bne.n	8003456 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003448:	4b41      	ldr	r3, [pc, #260]	@ (8003550 <HAL_RCC_ClockConfig+0x1f8>)
 800344a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800344c:	2202      	movs	r2, #2
 800344e:	4013      	ands	r3, r2
 8003450:	d108      	bne.n	8003464 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e074      	b.n	8003540 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003456:	4b3e      	ldr	r3, [pc, #248]	@ (8003550 <HAL_RCC_ClockConfig+0x1f8>)
 8003458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345a:	2202      	movs	r2, #2
 800345c:	4013      	ands	r3, r2
 800345e:	d101      	bne.n	8003464 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e06d      	b.n	8003540 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003464:	4b3a      	ldr	r3, [pc, #232]	@ (8003550 <HAL_RCC_ClockConfig+0x1f8>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2207      	movs	r2, #7
 800346a:	4393      	bics	r3, r2
 800346c:	0019      	movs	r1, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	4b37      	ldr	r3, [pc, #220]	@ (8003550 <HAL_RCC_ClockConfig+0x1f8>)
 8003474:	430a      	orrs	r2, r1
 8003476:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003478:	f7fe fb74 	bl	8001b64 <HAL_GetTick>
 800347c:	0003      	movs	r3, r0
 800347e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003480:	e009      	b.n	8003496 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003482:	f7fe fb6f 	bl	8001b64 <HAL_GetTick>
 8003486:	0002      	movs	r2, r0
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	4a2f      	ldr	r2, [pc, #188]	@ (800354c <HAL_RCC_ClockConfig+0x1f4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e054      	b.n	8003540 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	4b2e      	ldr	r3, [pc, #184]	@ (8003550 <HAL_RCC_ClockConfig+0x1f8>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2238      	movs	r2, #56	@ 0x38
 800349c:	401a      	ands	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d1ec      	bne.n	8003482 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034a8:	4b27      	ldr	r3, [pc, #156]	@ (8003548 <HAL_RCC_ClockConfig+0x1f0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2207      	movs	r2, #7
 80034ae:	4013      	ands	r3, r2
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d21e      	bcs.n	80034f4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b6:	4b24      	ldr	r3, [pc, #144]	@ (8003548 <HAL_RCC_ClockConfig+0x1f0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2207      	movs	r2, #7
 80034bc:	4393      	bics	r3, r2
 80034be:	0019      	movs	r1, r3
 80034c0:	4b21      	ldr	r3, [pc, #132]	@ (8003548 <HAL_RCC_ClockConfig+0x1f0>)
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034c8:	f7fe fb4c 	bl	8001b64 <HAL_GetTick>
 80034cc:	0003      	movs	r3, r0
 80034ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034d0:	e009      	b.n	80034e6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d2:	f7fe fb47 	bl	8001b64 <HAL_GetTick>
 80034d6:	0002      	movs	r2, r0
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	4a1b      	ldr	r2, [pc, #108]	@ (800354c <HAL_RCC_ClockConfig+0x1f4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e02c      	b.n	8003540 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034e6:	4b18      	ldr	r3, [pc, #96]	@ (8003548 <HAL_RCC_ClockConfig+0x1f0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2207      	movs	r2, #7
 80034ec:	4013      	ands	r3, r2
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d1ee      	bne.n	80034d2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2204      	movs	r2, #4
 80034fa:	4013      	ands	r3, r2
 80034fc:	d009      	beq.n	8003512 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80034fe:	4b14      	ldr	r3, [pc, #80]	@ (8003550 <HAL_RCC_ClockConfig+0x1f8>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	4a15      	ldr	r2, [pc, #84]	@ (8003558 <HAL_RCC_ClockConfig+0x200>)
 8003504:	4013      	ands	r3, r2
 8003506:	0019      	movs	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	4b10      	ldr	r3, [pc, #64]	@ (8003550 <HAL_RCC_ClockConfig+0x1f8>)
 800350e:	430a      	orrs	r2, r1
 8003510:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003512:	f000 f829 	bl	8003568 <HAL_RCC_GetSysClockFreq>
 8003516:	0001      	movs	r1, r0
 8003518:	4b0d      	ldr	r3, [pc, #52]	@ (8003550 <HAL_RCC_ClockConfig+0x1f8>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	0a1b      	lsrs	r3, r3, #8
 800351e:	220f      	movs	r2, #15
 8003520:	401a      	ands	r2, r3
 8003522:	4b0e      	ldr	r3, [pc, #56]	@ (800355c <HAL_RCC_ClockConfig+0x204>)
 8003524:	0092      	lsls	r2, r2, #2
 8003526:	58d3      	ldr	r3, [r2, r3]
 8003528:	221f      	movs	r2, #31
 800352a:	4013      	ands	r3, r2
 800352c:	000a      	movs	r2, r1
 800352e:	40da      	lsrs	r2, r3
 8003530:	4b0b      	ldr	r3, [pc, #44]	@ (8003560 <HAL_RCC_ClockConfig+0x208>)
 8003532:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003534:	4b0b      	ldr	r3, [pc, #44]	@ (8003564 <HAL_RCC_ClockConfig+0x20c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	0018      	movs	r0, r3
 800353a:	f7fe fab7 	bl	8001aac <HAL_InitTick>
 800353e:	0003      	movs	r3, r0
}
 8003540:	0018      	movs	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	b004      	add	sp, #16
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40022000 	.word	0x40022000
 800354c:	00001388 	.word	0x00001388
 8003550:	40021000 	.word	0x40021000
 8003554:	fffff0ff 	.word	0xfffff0ff
 8003558:	ffff8fff 	.word	0xffff8fff
 800355c:	08006654 	.word	0x08006654
 8003560:	20000040 	.word	0x20000040
 8003564:	20000044 	.word	0x20000044

08003568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800356e:	4b3c      	ldr	r3, [pc, #240]	@ (8003660 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2238      	movs	r2, #56	@ 0x38
 8003574:	4013      	ands	r3, r2
 8003576:	d10f      	bne.n	8003598 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003578:	4b39      	ldr	r3, [pc, #228]	@ (8003660 <HAL_RCC_GetSysClockFreq+0xf8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	0adb      	lsrs	r3, r3, #11
 800357e:	2207      	movs	r2, #7
 8003580:	4013      	ands	r3, r2
 8003582:	2201      	movs	r2, #1
 8003584:	409a      	lsls	r2, r3
 8003586:	0013      	movs	r3, r2
 8003588:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800358a:	6839      	ldr	r1, [r7, #0]
 800358c:	4835      	ldr	r0, [pc, #212]	@ (8003664 <HAL_RCC_GetSysClockFreq+0xfc>)
 800358e:	f7fc fdc3 	bl	8000118 <__udivsi3>
 8003592:	0003      	movs	r3, r0
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	e05d      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003598:	4b31      	ldr	r3, [pc, #196]	@ (8003660 <HAL_RCC_GetSysClockFreq+0xf8>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2238      	movs	r2, #56	@ 0x38
 800359e:	4013      	ands	r3, r2
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d102      	bne.n	80035aa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035a4:	4b30      	ldr	r3, [pc, #192]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x100>)
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	e054      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003660 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2238      	movs	r2, #56	@ 0x38
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d138      	bne.n	8003628 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80035b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003660 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	2203      	movs	r2, #3
 80035bc:	4013      	ands	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035c0:	4b27      	ldr	r3, [pc, #156]	@ (8003660 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	2207      	movs	r2, #7
 80035c8:	4013      	ands	r3, r2
 80035ca:	3301      	adds	r3, #1
 80035cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d10d      	bne.n	80035f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	4824      	ldr	r0, [pc, #144]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x100>)
 80035d8:	f7fc fd9e 	bl	8000118 <__udivsi3>
 80035dc:	0003      	movs	r3, r0
 80035de:	0019      	movs	r1, r3
 80035e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003660 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	0a1b      	lsrs	r3, r3, #8
 80035e6:	227f      	movs	r2, #127	@ 0x7f
 80035e8:	4013      	ands	r3, r2
 80035ea:	434b      	muls	r3, r1
 80035ec:	617b      	str	r3, [r7, #20]
        break;
 80035ee:	e00d      	b.n	800360c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	481c      	ldr	r0, [pc, #112]	@ (8003664 <HAL_RCC_GetSysClockFreq+0xfc>)
 80035f4:	f7fc fd90 	bl	8000118 <__udivsi3>
 80035f8:	0003      	movs	r3, r0
 80035fa:	0019      	movs	r1, r3
 80035fc:	4b18      	ldr	r3, [pc, #96]	@ (8003660 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	0a1b      	lsrs	r3, r3, #8
 8003602:	227f      	movs	r2, #127	@ 0x7f
 8003604:	4013      	ands	r3, r2
 8003606:	434b      	muls	r3, r1
 8003608:	617b      	str	r3, [r7, #20]
        break;
 800360a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800360c:	4b14      	ldr	r3, [pc, #80]	@ (8003660 <HAL_RCC_GetSysClockFreq+0xf8>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	0f5b      	lsrs	r3, r3, #29
 8003612:	2207      	movs	r2, #7
 8003614:	4013      	ands	r3, r2
 8003616:	3301      	adds	r3, #1
 8003618:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	6978      	ldr	r0, [r7, #20]
 800361e:	f7fc fd7b 	bl	8000118 <__udivsi3>
 8003622:	0003      	movs	r3, r0
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	e015      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003628:	4b0d      	ldr	r3, [pc, #52]	@ (8003660 <HAL_RCC_GetSysClockFreq+0xf8>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2238      	movs	r2, #56	@ 0x38
 800362e:	4013      	ands	r3, r2
 8003630:	2b20      	cmp	r3, #32
 8003632:	d103      	bne.n	800363c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003634:	2380      	movs	r3, #128	@ 0x80
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	e00b      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800363c:	4b08      	ldr	r3, [pc, #32]	@ (8003660 <HAL_RCC_GetSysClockFreq+0xf8>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2238      	movs	r2, #56	@ 0x38
 8003642:	4013      	ands	r3, r2
 8003644:	2b18      	cmp	r3, #24
 8003646:	d103      	bne.n	8003650 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003648:	23fa      	movs	r3, #250	@ 0xfa
 800364a:	01db      	lsls	r3, r3, #7
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	e001      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003654:	693b      	ldr	r3, [r7, #16]
}
 8003656:	0018      	movs	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	b006      	add	sp, #24
 800365c:	bd80      	pop	{r7, pc}
 800365e:	46c0      	nop			@ (mov r8, r8)
 8003660:	40021000 	.word	0x40021000
 8003664:	00f42400 	.word	0x00f42400
 8003668:	007a1200 	.word	0x007a1200

0800366c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003674:	2313      	movs	r3, #19
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800367c:	2312      	movs	r3, #18
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	2380      	movs	r3, #128	@ 0x80
 800368a:	029b      	lsls	r3, r3, #10
 800368c:	4013      	ands	r3, r2
 800368e:	d100      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003690:	e0a3      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003692:	2011      	movs	r0, #17
 8003694:	183b      	adds	r3, r7, r0
 8003696:	2200      	movs	r2, #0
 8003698:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800369a:	4ba5      	ldr	r3, [pc, #660]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800369c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800369e:	2380      	movs	r3, #128	@ 0x80
 80036a0:	055b      	lsls	r3, r3, #21
 80036a2:	4013      	ands	r3, r2
 80036a4:	d110      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a6:	4ba2      	ldr	r3, [pc, #648]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036aa:	4ba1      	ldr	r3, [pc, #644]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036ac:	2180      	movs	r1, #128	@ 0x80
 80036ae:	0549      	lsls	r1, r1, #21
 80036b0:	430a      	orrs	r2, r1
 80036b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80036b4:	4b9e      	ldr	r3, [pc, #632]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036b8:	2380      	movs	r3, #128	@ 0x80
 80036ba:	055b      	lsls	r3, r3, #21
 80036bc:	4013      	ands	r3, r2
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c2:	183b      	adds	r3, r7, r0
 80036c4:	2201      	movs	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036c8:	4b9a      	ldr	r3, [pc, #616]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b99      	ldr	r3, [pc, #612]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80036ce:	2180      	movs	r1, #128	@ 0x80
 80036d0:	0049      	lsls	r1, r1, #1
 80036d2:	430a      	orrs	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036d6:	f7fe fa45 	bl	8001b64 <HAL_GetTick>
 80036da:	0003      	movs	r3, r0
 80036dc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036de:	e00b      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e0:	f7fe fa40 	bl	8001b64 <HAL_GetTick>
 80036e4:	0002      	movs	r2, r0
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d904      	bls.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80036ee:	2313      	movs	r3, #19
 80036f0:	18fb      	adds	r3, r7, r3
 80036f2:	2203      	movs	r2, #3
 80036f4:	701a      	strb	r2, [r3, #0]
        break;
 80036f6:	e005      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036f8:	4b8e      	ldr	r3, [pc, #568]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	2380      	movs	r3, #128	@ 0x80
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	4013      	ands	r3, r2
 8003702:	d0ed      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003704:	2313      	movs	r3, #19
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d154      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800370e:	4b88      	ldr	r3, [pc, #544]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003710:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003712:	23c0      	movs	r3, #192	@ 0xc0
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4013      	ands	r3, r2
 8003718:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d019      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	429a      	cmp	r2, r3
 8003728:	d014      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800372a:	4b81      	ldr	r3, [pc, #516]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800372c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372e:	4a82      	ldr	r2, [pc, #520]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003730:	4013      	ands	r3, r2
 8003732:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003734:	4b7e      	ldr	r3, [pc, #504]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003736:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003738:	4b7d      	ldr	r3, [pc, #500]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800373a:	2180      	movs	r1, #128	@ 0x80
 800373c:	0249      	lsls	r1, r1, #9
 800373e:	430a      	orrs	r2, r1
 8003740:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003742:	4b7b      	ldr	r3, [pc, #492]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003744:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003746:	4b7a      	ldr	r3, [pc, #488]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003748:	497c      	ldr	r1, [pc, #496]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800374a:	400a      	ands	r2, r1
 800374c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800374e:	4b78      	ldr	r3, [pc, #480]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2201      	movs	r2, #1
 8003758:	4013      	ands	r3, r2
 800375a:	d016      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375c:	f7fe fa02 	bl	8001b64 <HAL_GetTick>
 8003760:	0003      	movs	r3, r0
 8003762:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003764:	e00c      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003766:	f7fe f9fd 	bl	8001b64 <HAL_GetTick>
 800376a:	0002      	movs	r2, r0
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	4a73      	ldr	r2, [pc, #460]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d904      	bls.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003776:	2313      	movs	r3, #19
 8003778:	18fb      	adds	r3, r7, r3
 800377a:	2203      	movs	r2, #3
 800377c:	701a      	strb	r2, [r3, #0]
            break;
 800377e:	e004      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003780:	4b6b      	ldr	r3, [pc, #428]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003784:	2202      	movs	r2, #2
 8003786:	4013      	ands	r3, r2
 8003788:	d0ed      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800378a:	2313      	movs	r3, #19
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10a      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003794:	4b66      	ldr	r3, [pc, #408]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003798:	4a67      	ldr	r2, [pc, #412]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800379a:	4013      	ands	r3, r2
 800379c:	0019      	movs	r1, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037a2:	4b63      	ldr	r3, [pc, #396]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037a4:	430a      	orrs	r2, r1
 80037a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037a8:	e00c      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037aa:	2312      	movs	r3, #18
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	2213      	movs	r2, #19
 80037b0:	18ba      	adds	r2, r7, r2
 80037b2:	7812      	ldrb	r2, [r2, #0]
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	e005      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b8:	2312      	movs	r3, #18
 80037ba:	18fb      	adds	r3, r7, r3
 80037bc:	2213      	movs	r2, #19
 80037be:	18ba      	adds	r2, r7, r2
 80037c0:	7812      	ldrb	r2, [r2, #0]
 80037c2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037c4:	2311      	movs	r3, #17
 80037c6:	18fb      	adds	r3, r7, r3
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d105      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ce:	4b58      	ldr	r3, [pc, #352]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037d2:	4b57      	ldr	r3, [pc, #348]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037d4:	495b      	ldr	r1, [pc, #364]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80037d6:	400a      	ands	r2, r1
 80037d8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2201      	movs	r2, #1
 80037e0:	4013      	ands	r3, r2
 80037e2:	d009      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037e4:	4b52      	ldr	r3, [pc, #328]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e8:	2203      	movs	r2, #3
 80037ea:	4393      	bics	r3, r2
 80037ec:	0019      	movs	r1, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	4b4f      	ldr	r3, [pc, #316]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037f4:	430a      	orrs	r2, r1
 80037f6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2210      	movs	r2, #16
 80037fe:	4013      	ands	r3, r2
 8003800:	d009      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003802:	4b4b      	ldr	r3, [pc, #300]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003806:	4a50      	ldr	r2, [pc, #320]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003808:	4013      	ands	r3, r2
 800380a:	0019      	movs	r1, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	4b47      	ldr	r3, [pc, #284]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003812:	430a      	orrs	r2, r1
 8003814:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	2380      	movs	r3, #128	@ 0x80
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4013      	ands	r3, r2
 8003820:	d009      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003822:	4b43      	ldr	r3, [pc, #268]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003826:	4a49      	ldr	r2, [pc, #292]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003828:	4013      	ands	r3, r2
 800382a:	0019      	movs	r1, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695a      	ldr	r2, [r3, #20]
 8003830:	4b3f      	ldr	r3, [pc, #252]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003832:	430a      	orrs	r2, r1
 8003834:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	2380      	movs	r3, #128	@ 0x80
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4013      	ands	r3, r2
 8003840:	d009      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003842:	4b3b      	ldr	r3, [pc, #236]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003846:	4a42      	ldr	r2, [pc, #264]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003848:	4013      	ands	r3, r2
 800384a:	0019      	movs	r1, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699a      	ldr	r2, [r3, #24]
 8003850:	4b37      	ldr	r3, [pc, #220]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003852:	430a      	orrs	r2, r1
 8003854:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2220      	movs	r2, #32
 800385c:	4013      	ands	r3, r2
 800385e:	d009      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003860:	4b33      	ldr	r3, [pc, #204]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003864:	4a3b      	ldr	r2, [pc, #236]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003866:	4013      	ands	r3, r2
 8003868:	0019      	movs	r1, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	4b30      	ldr	r3, [pc, #192]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003870:	430a      	orrs	r2, r1
 8003872:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	2380      	movs	r3, #128	@ 0x80
 800387a:	01db      	lsls	r3, r3, #7
 800387c:	4013      	ands	r3, r2
 800387e:	d015      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003880:	4b2b      	ldr	r3, [pc, #172]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	0899      	lsrs	r1, r3, #2
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69da      	ldr	r2, [r3, #28]
 800388c:	4b28      	ldr	r3, [pc, #160]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800388e:	430a      	orrs	r2, r1
 8003890:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69da      	ldr	r2, [r3, #28]
 8003896:	2380      	movs	r3, #128	@ 0x80
 8003898:	05db      	lsls	r3, r3, #23
 800389a:	429a      	cmp	r2, r3
 800389c:	d106      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800389e:	4b24      	ldr	r3, [pc, #144]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	4b23      	ldr	r3, [pc, #140]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038a4:	2180      	movs	r1, #128	@ 0x80
 80038a6:	0249      	lsls	r1, r1, #9
 80038a8:	430a      	orrs	r2, r1
 80038aa:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	2380      	movs	r3, #128	@ 0x80
 80038b2:	039b      	lsls	r3, r3, #14
 80038b4:	4013      	ands	r3, r2
 80038b6:	d016      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038bc:	4a26      	ldr	r2, [pc, #152]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80038be:	4013      	ands	r3, r2
 80038c0:	0019      	movs	r1, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1a      	ldr	r2, [r3, #32]
 80038c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038c8:	430a      	orrs	r2, r1
 80038ca:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1a      	ldr	r2, [r3, #32]
 80038d0:	2380      	movs	r3, #128	@ 0x80
 80038d2:	03db      	lsls	r3, r3, #15
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d106      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80038d8:	4b15      	ldr	r3, [pc, #84]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	4b14      	ldr	r3, [pc, #80]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038de:	2180      	movs	r1, #128	@ 0x80
 80038e0:	0449      	lsls	r1, r1, #17
 80038e2:	430a      	orrs	r2, r1
 80038e4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	2380      	movs	r3, #128	@ 0x80
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	4013      	ands	r3, r2
 80038f0:	d016      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80038f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f6:	4a19      	ldr	r2, [pc, #100]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	0019      	movs	r1, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	4b0b      	ldr	r3, [pc, #44]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003902:	430a      	orrs	r2, r1
 8003904:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	2380      	movs	r3, #128	@ 0x80
 800390c:	01db      	lsls	r3, r3, #7
 800390e:	429a      	cmp	r2, r3
 8003910:	d106      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003912:	4b07      	ldr	r3, [pc, #28]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003918:	2180      	movs	r1, #128	@ 0x80
 800391a:	0249      	lsls	r1, r1, #9
 800391c:	430a      	orrs	r2, r1
 800391e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003920:	2312      	movs	r3, #18
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	781b      	ldrb	r3, [r3, #0]
}
 8003926:	0018      	movs	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	b006      	add	sp, #24
 800392c:	bd80      	pop	{r7, pc}
 800392e:	46c0      	nop			@ (mov r8, r8)
 8003930:	40021000 	.word	0x40021000
 8003934:	40007000 	.word	0x40007000
 8003938:	fffffcff 	.word	0xfffffcff
 800393c:	fffeffff 	.word	0xfffeffff
 8003940:	00001388 	.word	0x00001388
 8003944:	efffffff 	.word	0xefffffff
 8003948:	fffff3ff 	.word	0xfffff3ff
 800394c:	fff3ffff 	.word	0xfff3ffff
 8003950:	ffcfffff 	.word	0xffcfffff
 8003954:	ffffcfff 	.word	0xffffcfff
 8003958:	ffbfffff 	.word	0xffbfffff
 800395c:	ffff3fff 	.word	0xffff3fff

08003960 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003960:	b5b0      	push	{r4, r5, r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003968:	230f      	movs	r3, #15
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	2201      	movs	r2, #1
 800396e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d100      	bne.n	8003978 <HAL_RTC_Init+0x18>
 8003976:	e08c      	b.n	8003a92 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2229      	movs	r2, #41	@ 0x29
 800397c:	5c9b      	ldrb	r3, [r3, r2]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10b      	bne.n	800399c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2228      	movs	r2, #40	@ 0x28
 8003988:	2100      	movs	r1, #0
 800398a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2288      	movs	r2, #136	@ 0x88
 8003990:	0212      	lsls	r2, r2, #8
 8003992:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	0018      	movs	r0, r3
 8003998:	f7fd fe84 	bl	80016a4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2229      	movs	r2, #41	@ 0x29
 80039a0:	2102      	movs	r1, #2
 80039a2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2210      	movs	r2, #16
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d062      	beq.n	8003a78 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	22ca      	movs	r2, #202	@ 0xca
 80039b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2253      	movs	r2, #83	@ 0x53
 80039c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80039c2:	250f      	movs	r5, #15
 80039c4:	197c      	adds	r4, r7, r5
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	0018      	movs	r0, r3
 80039ca:	f000 fbf3 	bl	80041b4 <RTC_EnterInitMode>
 80039ce:	0003      	movs	r3, r0
 80039d0:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80039d2:	0028      	movs	r0, r5
 80039d4:	183b      	adds	r3, r7, r0
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d12c      	bne.n	8003a36 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	492e      	ldr	r1, [pc, #184]	@ (8003aa0 <HAL_RTC_Init+0x140>)
 80039e8:	400a      	ands	r2, r1
 80039ea:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6999      	ldr	r1, [r3, #24]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6912      	ldr	r2, [r2, #16]
 8003a12:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6919      	ldr	r1, [r3, #16]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	041a      	lsls	r2, r3, #16
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003a28:	183c      	adds	r4, r7, r0
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f000 fc03 	bl	8004238 <RTC_ExitInitMode>
 8003a32:	0003      	movs	r3, r0
 8003a34:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8003a36:	230f      	movs	r3, #15
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d116      	bne.n	8003a6e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	00d2      	lsls	r2, r2, #3
 8003a4c:	08d2      	lsrs	r2, r2, #3
 8003a4e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6999      	ldr	r1, [r3, #24]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	22ff      	movs	r2, #255	@ 0xff
 8003a74:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a76:	e003      	b.n	8003a80 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003a78:	230f      	movs	r3, #15
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8003a80:	230f      	movs	r3, #15
 8003a82:	18fb      	adds	r3, r7, r3
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d103      	bne.n	8003a92 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2229      	movs	r2, #41	@ 0x29
 8003a8e:	2101      	movs	r1, #1
 8003a90:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8003a92:	230f      	movs	r3, #15
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	781b      	ldrb	r3, [r3, #0]
}
 8003a98:	0018      	movs	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b004      	add	sp, #16
 8003a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003aa0:	fb8fffbf 	.word	0xfb8fffbf

08003aa4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003aa4:	b5b0      	push	{r4, r5, r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2228      	movs	r2, #40	@ 0x28
 8003ab4:	5c9b      	ldrb	r3, [r3, r2]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_RTC_SetTime+0x1a>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e092      	b.n	8003be4 <HAL_RTC_SetTime+0x140>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2228      	movs	r2, #40	@ 0x28
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2229      	movs	r2, #41	@ 0x29
 8003aca:	2102      	movs	r1, #2
 8003acc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	22ca      	movs	r2, #202	@ 0xca
 8003ad4:	625a      	str	r2, [r3, #36]	@ 0x24
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2253      	movs	r2, #83	@ 0x53
 8003adc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003ade:	2513      	movs	r5, #19
 8003ae0:	197c      	adds	r4, r7, r5
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f000 fb65 	bl	80041b4 <RTC_EnterInitMode>
 8003aea:	0003      	movs	r3, r0
 8003aec:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003aee:	197b      	adds	r3, r7, r5
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d162      	bne.n	8003bbc <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d125      	bne.n	8003b48 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	2240      	movs	r2, #64	@ 0x40
 8003b04:	4013      	ands	r3, r2
 8003b06:	d102      	bne.n	8003b0e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	0018      	movs	r0, r3
 8003b14:	f000 fbd4 	bl	80042c0 <RTC_ByteToBcd2>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	785b      	ldrb	r3, [r3, #1]
 8003b20:	0018      	movs	r0, r3
 8003b22:	f000 fbcd 	bl	80042c0 <RTC_ByteToBcd2>
 8003b26:	0003      	movs	r3, r0
 8003b28:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003b2a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	789b      	ldrb	r3, [r3, #2]
 8003b30:	0018      	movs	r0, r3
 8003b32:	f000 fbc5 	bl	80042c0 <RTC_ByteToBcd2>
 8003b36:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003b38:	0022      	movs	r2, r4
 8003b3a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	78db      	ldrb	r3, [r3, #3]
 8003b40:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	e017      	b.n	8003b78 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	2240      	movs	r2, #64	@ 0x40
 8003b50:	4013      	ands	r3, r2
 8003b52:	d102      	bne.n	8003b5a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2200      	movs	r2, #0
 8003b58:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	785b      	ldrb	r3, [r3, #1]
 8003b64:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003b66:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003b6c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	78db      	ldrb	r3, [r3, #3]
 8003b72:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	491b      	ldr	r1, [pc, #108]	@ (8003bec <HAL_RTC_SetTime+0x148>)
 8003b80:	400a      	ands	r2, r1
 8003b82:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4918      	ldr	r1, [pc, #96]	@ (8003bf0 <HAL_RTC_SetTime+0x14c>)
 8003b90:	400a      	ands	r2, r1
 8003b92:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6999      	ldr	r1, [r3, #24]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003bac:	2313      	movs	r3, #19
 8003bae:	18fc      	adds	r4, r7, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f000 fb40 	bl	8004238 <RTC_ExitInitMode>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	22ff      	movs	r2, #255	@ 0xff
 8003bc2:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8003bc4:	2313      	movs	r3, #19
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d103      	bne.n	8003bd6 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2229      	movs	r2, #41	@ 0x29
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2228      	movs	r2, #40	@ 0x28
 8003bda:	2100      	movs	r1, #0
 8003bdc:	5499      	strb	r1, [r3, r2]

  return status;
 8003bde:	2313      	movs	r3, #19
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	781b      	ldrb	r3, [r3, #0]
}
 8003be4:	0018      	movs	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b006      	add	sp, #24
 8003bea:	bdb0      	pop	{r4, r5, r7, pc}
 8003bec:	007f7f7f 	.word	0x007f7f7f
 8003bf0:	fffbffff 	.word	0xfffbffff

08003bf4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	045b      	lsls	r3, r3, #17
 8003c12:	0c5a      	lsrs	r2, r3, #17
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a22      	ldr	r2, [pc, #136]	@ (8003ca8 <HAL_RTC_GetTime+0xb4>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	0c1b      	lsrs	r3, r3, #16
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	223f      	movs	r2, #63	@ 0x3f
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	0a1b      	lsrs	r3, r3, #8
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	227f      	movs	r2, #127	@ 0x7f
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	227f      	movs	r2, #127	@ 0x7f
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	0d9b      	lsrs	r3, r3, #22
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2201      	movs	r2, #1
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d11a      	bne.n	8003c9e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f000 fb4f 	bl	8004310 <RTC_Bcd2ToByte>
 8003c72:	0003      	movs	r3, r0
 8003c74:	001a      	movs	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	785b      	ldrb	r3, [r3, #1]
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f000 fb46 	bl	8004310 <RTC_Bcd2ToByte>
 8003c84:	0003      	movs	r3, r0
 8003c86:	001a      	movs	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	789b      	ldrb	r3, [r3, #2]
 8003c90:	0018      	movs	r0, r3
 8003c92:	f000 fb3d 	bl	8004310 <RTC_Bcd2ToByte>
 8003c96:	0003      	movs	r3, r0
 8003c98:	001a      	movs	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b006      	add	sp, #24
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	007f7f7f 	.word	0x007f7f7f

08003cac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003cac:	b5b0      	push	{r4, r5, r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2228      	movs	r2, #40	@ 0x28
 8003cbc:	5c9b      	ldrb	r3, [r3, r2]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_RTC_SetDate+0x1a>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e07e      	b.n	8003dc4 <HAL_RTC_SetDate+0x118>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2228      	movs	r2, #40	@ 0x28
 8003cca:	2101      	movs	r1, #1
 8003ccc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2229      	movs	r2, #41	@ 0x29
 8003cd2:	2102      	movs	r1, #2
 8003cd4:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10e      	bne.n	8003cfa <HAL_RTC_SetDate+0x4e>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	785b      	ldrb	r3, [r3, #1]
 8003ce0:	001a      	movs	r2, r3
 8003ce2:	2310      	movs	r3, #16
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d008      	beq.n	8003cfa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	785b      	ldrb	r3, [r3, #1]
 8003cec:	2210      	movs	r2, #16
 8003cee:	4393      	bics	r3, r2
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	330a      	adds	r3, #10
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d11c      	bne.n	8003d3a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	78db      	ldrb	r3, [r3, #3]
 8003d04:	0018      	movs	r0, r3
 8003d06:	f000 fadb 	bl	80042c0 <RTC_ByteToBcd2>
 8003d0a:	0003      	movs	r3, r0
 8003d0c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	785b      	ldrb	r3, [r3, #1]
 8003d12:	0018      	movs	r0, r3
 8003d14:	f000 fad4 	bl	80042c0 <RTC_ByteToBcd2>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003d1c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	789b      	ldrb	r3, [r3, #2]
 8003d22:	0018      	movs	r0, r3
 8003d24:	f000 facc 	bl	80042c0 <RTC_ByteToBcd2>
 8003d28:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003d2a:	0022      	movs	r2, r4
 8003d2c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003d34:	4313      	orrs	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	e00e      	b.n	8003d58 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	78db      	ldrb	r3, [r3, #3]
 8003d3e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	785b      	ldrb	r3, [r3, #1]
 8003d44:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003d46:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003d4c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	22ca      	movs	r2, #202	@ 0xca
 8003d5e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2253      	movs	r2, #83	@ 0x53
 8003d66:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003d68:	2513      	movs	r5, #19
 8003d6a:	197c      	adds	r4, r7, r5
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f000 fa20 	bl	80041b4 <RTC_EnterInitMode>
 8003d74:	0003      	movs	r3, r0
 8003d76:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003d78:	0028      	movs	r0, r5
 8003d7a:	183b      	adds	r3, r7, r0
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10c      	bne.n	8003d9c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4910      	ldr	r1, [pc, #64]	@ (8003dcc <HAL_RTC_SetDate+0x120>)
 8003d8a:	400a      	ands	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003d8e:	183c      	adds	r4, r7, r0
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	0018      	movs	r0, r3
 8003d94:	f000 fa50 	bl	8004238 <RTC_ExitInitMode>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	22ff      	movs	r2, #255	@ 0xff
 8003da2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8003da4:	2313      	movs	r3, #19
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d103      	bne.n	8003db6 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2229      	movs	r2, #41	@ 0x29
 8003db2:	2101      	movs	r1, #1
 8003db4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2228      	movs	r2, #40	@ 0x28
 8003dba:	2100      	movs	r1, #0
 8003dbc:	5499      	strb	r1, [r3, r2]

  return status;
 8003dbe:	2313      	movs	r3, #19
 8003dc0:	18fb      	adds	r3, r7, r3
 8003dc2:	781b      	ldrb	r3, [r3, #0]
}
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b006      	add	sp, #24
 8003dca:	bdb0      	pop	{r4, r5, r7, pc}
 8003dcc:	00ffff3f 	.word	0x00ffff3f

08003dd0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	4a21      	ldr	r2, [pc, #132]	@ (8003e68 <HAL_RTC_GetDate+0x98>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	0c1b      	lsrs	r3, r3, #16
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	0a1b      	lsrs	r3, r3, #8
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	221f      	movs	r2, #31
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	223f      	movs	r2, #63	@ 0x3f
 8003e08:	4013      	ands	r3, r2
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	0b5b      	lsrs	r3, r3, #13
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2207      	movs	r2, #7
 8003e18:	4013      	ands	r3, r2
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d11a      	bne.n	8003e5c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	78db      	ldrb	r3, [r3, #3]
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f000 fa70 	bl	8004310 <RTC_Bcd2ToByte>
 8003e30:	0003      	movs	r3, r0
 8003e32:	001a      	movs	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	785b      	ldrb	r3, [r3, #1]
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f000 fa67 	bl	8004310 <RTC_Bcd2ToByte>
 8003e42:	0003      	movs	r3, r0
 8003e44:	001a      	movs	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	789b      	ldrb	r3, [r3, #2]
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f000 fa5e 	bl	8004310 <RTC_Bcd2ToByte>
 8003e54:	0003      	movs	r3, r0
 8003e56:	001a      	movs	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	0018      	movs	r0, r3
 8003e60:	46bd      	mov	sp, r7
 8003e62:	b006      	add	sp, #24
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	46c0      	nop			@ (mov r8, r8)
 8003e68:	00ffff3f 	.word	0x00ffff3f

08003e6c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003e6c:	b590      	push	{r4, r7, lr}
 8003e6e:	b089      	sub	sp, #36	@ 0x24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2228      	movs	r2, #40	@ 0x28
 8003e7c:	5c9b      	ldrb	r3, [r3, r2]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_RTC_SetAlarm_IT+0x1a>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e127      	b.n	80040d6 <HAL_RTC_SetAlarm_IT+0x26a>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2228      	movs	r2, #40	@ 0x28
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2229      	movs	r2, #41	@ 0x29
 8003e92:	2102      	movs	r1, #2
 8003e94:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d136      	bne.n	8003f0a <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	2240      	movs	r2, #64	@ 0x40
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d102      	bne.n	8003eae <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f000 fa04 	bl	80042c0 <RTC_ByteToBcd2>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	785b      	ldrb	r3, [r3, #1]
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f000 f9fd 	bl	80042c0 <RTC_ByteToBcd2>
 8003ec6:	0003      	movs	r3, r0
 8003ec8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003eca:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	789b      	ldrb	r3, [r3, #2]
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f000 f9f5 	bl	80042c0 <RTC_ByteToBcd2>
 8003ed6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003ed8:	0022      	movs	r2, r4
 8003eda:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	78db      	ldrb	r3, [r3, #3]
 8003ee0:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	5c9b      	ldrb	r3, [r3, r2]
 8003eec:	0018      	movs	r0, r3
 8003eee:	f000 f9e7 	bl	80042c0 <RTC_ByteToBcd2>
 8003ef2:	0003      	movs	r3, r0
 8003ef4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003ef6:	0022      	movs	r2, r4
 8003ef8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003efe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61fb      	str	r3, [r7, #28]
 8003f08:	e022      	b.n	8003f50 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	2240      	movs	r2, #64	@ 0x40
 8003f12:	4013      	ands	r3, r2
 8003f14:	d102      	bne.n	8003f1c <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	785b      	ldrb	r3, [r3, #1]
 8003f26:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f28:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f2e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	78db      	ldrb	r3, [r3, #3]
 8003f34:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003f36:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2120      	movs	r1, #32
 8003f3c:	5c5b      	ldrb	r3, [r3, r1]
 8003f3e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003f40:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003f46:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	22ca      	movs	r2, #202	@ 0xca
 8003f62:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2253      	movs	r2, #83	@ 0x53
 8003f6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f70:	2380      	movs	r3, #128	@ 0x80
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d14c      	bne.n	8004012 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4957      	ldr	r1, [pc, #348]	@ (80040e0 <HAL_RTC_SetAlarm_IT+0x274>)
 8003f84:	400a      	ands	r2, r1
 8003f86:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2101      	movs	r1, #1
 8003f94:	430a      	orrs	r2, r1
 8003f96:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8003f98:	f7fd fde4 	bl	8001b64 <HAL_GetTick>
 8003f9c:	0003      	movs	r3, r0
 8003f9e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003fa0:	e016      	b.n	8003fd0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003fa2:	f7fd fddf 	bl	8001b64 <HAL_GetTick>
 8003fa6:	0002      	movs	r2, r0
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	1ad2      	subs	r2, r2, r3
 8003fac:	23fa      	movs	r3, #250	@ 0xfa
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d90d      	bls.n	8003fd0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	22ff      	movs	r2, #255	@ 0xff
 8003fba:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2229      	movs	r2, #41	@ 0x29
 8003fc0:	2103      	movs	r1, #3
 8003fc2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2228      	movs	r2, #40	@ 0x28
 8003fc8:	2100      	movs	r1, #0
 8003fca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e082      	b.n	80040d6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d0e2      	beq.n	8003fa2 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2180      	movs	r1, #128	@ 0x80
 8003ff8:	0049      	lsls	r1, r1, #1
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699a      	ldr	r2, [r3, #24]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2180      	movs	r1, #128	@ 0x80
 800400a:	0149      	lsls	r1, r1, #5
 800400c:	430a      	orrs	r2, r1
 800400e:	619a      	str	r2, [r3, #24]
 8004010:	e04b      	b.n	80040aa <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699a      	ldr	r2, [r3, #24]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4931      	ldr	r1, [pc, #196]	@ (80040e4 <HAL_RTC_SetAlarm_IT+0x278>)
 800401e:	400a      	ands	r2, r1
 8004020:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2102      	movs	r1, #2
 800402e:	430a      	orrs	r2, r1
 8004030:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004032:	f7fd fd97 	bl	8001b64 <HAL_GetTick>
 8004036:	0003      	movs	r3, r0
 8004038:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800403a:	e016      	b.n	800406a <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800403c:	f7fd fd92 	bl	8001b64 <HAL_GetTick>
 8004040:	0002      	movs	r2, r0
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	1ad2      	subs	r2, r2, r3
 8004046:	23fa      	movs	r3, #250	@ 0xfa
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	429a      	cmp	r2, r3
 800404c:	d90d      	bls.n	800406a <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	22ff      	movs	r2, #255	@ 0xff
 8004054:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2229      	movs	r2, #41	@ 0x29
 800405a:	2103      	movs	r1, #3
 800405c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2228      	movs	r2, #40	@ 0x28
 8004062:	2100      	movs	r1, #0
 8004064:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e035      	b.n	80040d6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2202      	movs	r2, #2
 8004072:	4013      	ands	r3, r2
 8004074:	d0e2      	beq.n	800403c <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699a      	ldr	r2, [r3, #24]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2180      	movs	r1, #128	@ 0x80
 8004092:	0089      	lsls	r1, r1, #2
 8004094:	430a      	orrs	r2, r1
 8004096:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2180      	movs	r1, #128	@ 0x80
 80040a4:	0189      	lsls	r1, r1, #6
 80040a6:	430a      	orrs	r2, r1
 80040a8:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80040aa:	4a0f      	ldr	r2, [pc, #60]	@ (80040e8 <HAL_RTC_SetAlarm_IT+0x27c>)
 80040ac:	2380      	movs	r3, #128	@ 0x80
 80040ae:	58d3      	ldr	r3, [r2, r3]
 80040b0:	490d      	ldr	r1, [pc, #52]	@ (80040e8 <HAL_RTC_SetAlarm_IT+0x27c>)
 80040b2:	2280      	movs	r2, #128	@ 0x80
 80040b4:	0312      	lsls	r2, r2, #12
 80040b6:	4313      	orrs	r3, r2
 80040b8:	2280      	movs	r2, #128	@ 0x80
 80040ba:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	22ff      	movs	r2, #255	@ 0xff
 80040c2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2229      	movs	r2, #41	@ 0x29
 80040c8:	2101      	movs	r1, #1
 80040ca:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2228      	movs	r2, #40	@ 0x28
 80040d0:	2100      	movs	r1, #0
 80040d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	0018      	movs	r0, r3
 80040d8:	46bd      	mov	sp, r7
 80040da:	b009      	add	sp, #36	@ 0x24
 80040dc:	bd90      	pop	{r4, r7, pc}
 80040de:	46c0      	nop			@ (mov r8, r8)
 80040e0:	fffffeff 	.word	0xfffffeff
 80040e4:	fffffdff 	.word	0xfffffdff
 80040e8:	40021800 	.word	0x40021800

080040ec <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	2380      	movs	r3, #128	@ 0x80
 80040fc:	015b      	lsls	r3, r3, #5
 80040fe:	4013      	ands	r3, r2
 8004100:	d011      	beq.n	8004126 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004108:	2201      	movs	r2, #1
 800410a:	4013      	ands	r3, r2
 800410c:	d00b      	beq.n	8004126 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2101      	movs	r1, #1
 800411a:	430a      	orrs	r2, r1
 800411c:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	0018      	movs	r0, r3
 8004122:	f7fc fc3f 	bl	80009a4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	699a      	ldr	r2, [r3, #24]
 800412c:	2380      	movs	r3, #128	@ 0x80
 800412e:	019b      	lsls	r3, r3, #6
 8004130:	4013      	ands	r3, r2
 8004132:	d011      	beq.n	8004158 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800413a:	2202      	movs	r2, #2
 800413c:	4013      	ands	r3, r2
 800413e:	d00b      	beq.n	8004158 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2102      	movs	r1, #2
 800414c:	430a      	orrs	r2, r1
 800414e:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	0018      	movs	r0, r3
 8004154:	f000 f942 	bl	80043dc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2229      	movs	r2, #41	@ 0x29
 800415c:	2101      	movs	r1, #1
 800415e:	5499      	strb	r1, [r3, r2]
}
 8004160:	46c0      	nop			@ (mov r8, r8)
 8004162:	46bd      	mov	sp, r7
 8004164:	b002      	add	sp, #8
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a0e      	ldr	r2, [pc, #56]	@ (80041b0 <HAL_RTC_WaitForSynchro+0x48>)
 8004176:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004178:	f7fd fcf4 	bl	8001b64 <HAL_GetTick>
 800417c:	0003      	movs	r3, r0
 800417e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004180:	e00a      	b.n	8004198 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004182:	f7fd fcef 	bl	8001b64 <HAL_GetTick>
 8004186:	0002      	movs	r2, r0
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	1ad2      	subs	r2, r2, r3
 800418c:	23fa      	movs	r3, #250	@ 0xfa
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	429a      	cmp	r2, r3
 8004192:	d901      	bls.n	8004198 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e006      	b.n	80041a6 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	4013      	ands	r3, r2
 80041a2:	d0ee      	beq.n	8004182 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	0018      	movs	r0, r3
 80041a8:	46bd      	mov	sp, r7
 80041aa:	b004      	add	sp, #16
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	46c0      	nop			@ (mov r8, r8)
 80041b0:	0001005f 	.word	0x0001005f

080041b4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80041bc:	230f      	movs	r3, #15
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	2240      	movs	r2, #64	@ 0x40
 80041cc:	4013      	ands	r3, r2
 80041ce:	d12c      	bne.n	800422a <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2180      	movs	r1, #128	@ 0x80
 80041dc:	430a      	orrs	r2, r1
 80041de:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80041e0:	f7fd fcc0 	bl	8001b64 <HAL_GetTick>
 80041e4:	0003      	movs	r3, r0
 80041e6:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80041e8:	e014      	b.n	8004214 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80041ea:	f7fd fcbb 	bl	8001b64 <HAL_GetTick>
 80041ee:	0002      	movs	r2, r0
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	1ad2      	subs	r2, r2, r3
 80041f4:	200f      	movs	r0, #15
 80041f6:	183b      	adds	r3, r7, r0
 80041f8:	1839      	adds	r1, r7, r0
 80041fa:	7809      	ldrb	r1, [r1, #0]
 80041fc:	7019      	strb	r1, [r3, #0]
 80041fe:	23fa      	movs	r3, #250	@ 0xfa
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	429a      	cmp	r2, r3
 8004204:	d906      	bls.n	8004214 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004206:	183b      	adds	r3, r7, r0
 8004208:	2203      	movs	r2, #3
 800420a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2229      	movs	r2, #41	@ 0x29
 8004210:	2103      	movs	r1, #3
 8004212:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	2240      	movs	r2, #64	@ 0x40
 800421c:	4013      	ands	r3, r2
 800421e:	d104      	bne.n	800422a <RTC_EnterInitMode+0x76>
 8004220:	230f      	movs	r3, #15
 8004222:	18fb      	adds	r3, r7, r3
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b03      	cmp	r3, #3
 8004228:	d1df      	bne.n	80041ea <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800422a:	230f      	movs	r3, #15
 800422c:	18fb      	adds	r3, r7, r3
 800422e:	781b      	ldrb	r3, [r3, #0]
}
 8004230:	0018      	movs	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	b004      	add	sp, #16
 8004236:	bd80      	pop	{r7, pc}

08004238 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004238:	b590      	push	{r4, r7, lr}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004240:	240f      	movs	r4, #15
 8004242:	193b      	adds	r3, r7, r4
 8004244:	2200      	movs	r2, #0
 8004246:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004248:	4b1c      	ldr	r3, [pc, #112]	@ (80042bc <RTC_ExitInitMode+0x84>)
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	4b1b      	ldr	r3, [pc, #108]	@ (80042bc <RTC_ExitInitMode+0x84>)
 800424e:	2180      	movs	r1, #128	@ 0x80
 8004250:	438a      	bics	r2, r1
 8004252:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004254:	4b19      	ldr	r3, [pc, #100]	@ (80042bc <RTC_ExitInitMode+0x84>)
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	2220      	movs	r2, #32
 800425a:	4013      	ands	r3, r2
 800425c:	d10d      	bne.n	800427a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	0018      	movs	r0, r3
 8004262:	f7ff ff81 	bl	8004168 <HAL_RTC_WaitForSynchro>
 8004266:	1e03      	subs	r3, r0, #0
 8004268:	d021      	beq.n	80042ae <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2229      	movs	r2, #41	@ 0x29
 800426e:	2103      	movs	r1, #3
 8004270:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004272:	193b      	adds	r3, r7, r4
 8004274:	2203      	movs	r2, #3
 8004276:	701a      	strb	r2, [r3, #0]
 8004278:	e019      	b.n	80042ae <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800427a:	4b10      	ldr	r3, [pc, #64]	@ (80042bc <RTC_ExitInitMode+0x84>)
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	4b0f      	ldr	r3, [pc, #60]	@ (80042bc <RTC_ExitInitMode+0x84>)
 8004280:	2120      	movs	r1, #32
 8004282:	438a      	bics	r2, r1
 8004284:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	0018      	movs	r0, r3
 800428a:	f7ff ff6d 	bl	8004168 <HAL_RTC_WaitForSynchro>
 800428e:	1e03      	subs	r3, r0, #0
 8004290:	d007      	beq.n	80042a2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2229      	movs	r2, #41	@ 0x29
 8004296:	2103      	movs	r1, #3
 8004298:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800429a:	230f      	movs	r3, #15
 800429c:	18fb      	adds	r3, r7, r3
 800429e:	2203      	movs	r2, #3
 80042a0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80042a2:	4b06      	ldr	r3, [pc, #24]	@ (80042bc <RTC_ExitInitMode+0x84>)
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	4b05      	ldr	r3, [pc, #20]	@ (80042bc <RTC_ExitInitMode+0x84>)
 80042a8:	2120      	movs	r1, #32
 80042aa:	430a      	orrs	r2, r1
 80042ac:	619a      	str	r2, [r3, #24]
  }

  return status;
 80042ae:	230f      	movs	r3, #15
 80042b0:	18fb      	adds	r3, r7, r3
 80042b2:	781b      	ldrb	r3, [r3, #0]
}
 80042b4:	0018      	movs	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	b005      	add	sp, #20
 80042ba:	bd90      	pop	{r4, r7, pc}
 80042bc:	40002800 	.word	0x40002800

080042c0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	0002      	movs	r2, r0
 80042c8:	1dfb      	adds	r3, r7, #7
 80042ca:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80042d0:	230b      	movs	r3, #11
 80042d2:	18fb      	adds	r3, r7, r3
 80042d4:	1dfa      	adds	r2, r7, #7
 80042d6:	7812      	ldrb	r2, [r2, #0]
 80042d8:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80042da:	e008      	b.n	80042ee <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3301      	adds	r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80042e2:	220b      	movs	r2, #11
 80042e4:	18bb      	adds	r3, r7, r2
 80042e6:	18ba      	adds	r2, r7, r2
 80042e8:	7812      	ldrb	r2, [r2, #0]
 80042ea:	3a0a      	subs	r2, #10
 80042ec:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80042ee:	210b      	movs	r1, #11
 80042f0:	187b      	adds	r3, r7, r1
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b09      	cmp	r3, #9
 80042f6:	d8f1      	bhi.n	80042dc <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	187b      	adds	r3, r7, r1
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	4313      	orrs	r3, r2
 8004306:	b2db      	uxtb	r3, r3
}
 8004308:	0018      	movs	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	b004      	add	sp, #16
 800430e:	bd80      	pop	{r7, pc}

08004310 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	0002      	movs	r2, r0
 8004318:	1dfb      	adds	r3, r7, #7
 800431a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800431c:	1dfb      	adds	r3, r7, #7
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	b2db      	uxtb	r3, r3
 8004324:	001a      	movs	r2, r3
 8004326:	0013      	movs	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	189b      	adds	r3, r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	b2da      	uxtb	r2, r3
 8004334:	1dfb      	adds	r3, r7, #7
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	210f      	movs	r1, #15
 800433a:	400b      	ands	r3, r1
 800433c:	b2db      	uxtb	r3, r3
 800433e:	18d3      	adds	r3, r2, r3
 8004340:	b2db      	uxtb	r3, r3
}
 8004342:	0018      	movs	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	b004      	add	sp, #16
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2228      	movs	r2, #40	@ 0x28
 800435a:	5c9b      	ldrb	r3, [r3, r2]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8004360:	2302      	movs	r3, #2
 8004362:	e035      	b.n	80043d0 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2228      	movs	r2, #40	@ 0x28
 8004368:	2101      	movs	r1, #1
 800436a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2229      	movs	r2, #41	@ 0x29
 8004370:	2102      	movs	r1, #2
 8004372:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	22ca      	movs	r2, #202	@ 0xca
 800437a:	625a      	str	r2, [r3, #36]	@ 0x24
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2253      	movs	r2, #83	@ 0x53
 8004382:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699a      	ldr	r2, [r3, #24]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4912      	ldr	r1, [pc, #72]	@ (80043d8 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8004390:	400a      	ands	r2, r1
 8004392:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6999      	ldr	r1, [r3, #24]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2180      	movs	r1, #128	@ 0x80
 80043b0:	0409      	lsls	r1, r1, #16
 80043b2:	430a      	orrs	r2, r1
 80043b4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	22ff      	movs	r2, #255	@ 0xff
 80043bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2229      	movs	r2, #41	@ 0x29
 80043c2:	2101      	movs	r1, #1
 80043c4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2228      	movs	r2, #40	@ 0x28
 80043ca:	2100      	movs	r1, #0
 80043cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	0018      	movs	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b002      	add	sp, #8
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	fff7ffff 	.word	0xfff7ffff

080043dc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80043e4:	46c0      	nop			@ (mov r8, r8)
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b002      	add	sp, #8
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e04a      	b.n	8004494 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	223d      	movs	r2, #61	@ 0x3d
 8004402:	5c9b      	ldrb	r3, [r3, r2]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d107      	bne.n	800441a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	223c      	movs	r2, #60	@ 0x3c
 800440e:	2100      	movs	r1, #0
 8004410:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	0018      	movs	r0, r3
 8004416:	f7fd f9a7 	bl	8001768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	223d      	movs	r2, #61	@ 0x3d
 800441e:	2102      	movs	r1, #2
 8004420:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3304      	adds	r3, #4
 800442a:	0019      	movs	r1, r3
 800442c:	0010      	movs	r0, r2
 800442e:	f000 fc0d 	bl	8004c4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2248      	movs	r2, #72	@ 0x48
 8004436:	2101      	movs	r1, #1
 8004438:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	223e      	movs	r2, #62	@ 0x3e
 800443e:	2101      	movs	r1, #1
 8004440:	5499      	strb	r1, [r3, r2]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	223f      	movs	r2, #63	@ 0x3f
 8004446:	2101      	movs	r1, #1
 8004448:	5499      	strb	r1, [r3, r2]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2240      	movs	r2, #64	@ 0x40
 800444e:	2101      	movs	r1, #1
 8004450:	5499      	strb	r1, [r3, r2]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2241      	movs	r2, #65	@ 0x41
 8004456:	2101      	movs	r1, #1
 8004458:	5499      	strb	r1, [r3, r2]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2242      	movs	r2, #66	@ 0x42
 800445e:	2101      	movs	r1, #1
 8004460:	5499      	strb	r1, [r3, r2]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2243      	movs	r2, #67	@ 0x43
 8004466:	2101      	movs	r1, #1
 8004468:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2244      	movs	r2, #68	@ 0x44
 800446e:	2101      	movs	r1, #1
 8004470:	5499      	strb	r1, [r3, r2]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2245      	movs	r2, #69	@ 0x45
 8004476:	2101      	movs	r1, #1
 8004478:	5499      	strb	r1, [r3, r2]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2246      	movs	r2, #70	@ 0x46
 800447e:	2101      	movs	r1, #1
 8004480:	5499      	strb	r1, [r3, r2]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2247      	movs	r2, #71	@ 0x47
 8004486:	2101      	movs	r1, #1
 8004488:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	223d      	movs	r2, #61	@ 0x3d
 800448e:	2101      	movs	r1, #1
 8004490:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	0018      	movs	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	b002      	add	sp, #8
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	223d      	movs	r2, #61	@ 0x3d
 80044a8:	5c9b      	ldrb	r3, [r3, r2]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d001      	beq.n	80044b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e035      	b.n	8004520 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	223d      	movs	r2, #61	@ 0x3d
 80044b8:	2102      	movs	r1, #2
 80044ba:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a19      	ldr	r2, [pc, #100]	@ (8004528 <HAL_TIM_Base_Start+0x8c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00a      	beq.n	80044dc <HAL_TIM_Base_Start+0x40>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	2380      	movs	r3, #128	@ 0x80
 80044cc:	05db      	lsls	r3, r3, #23
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d004      	beq.n	80044dc <HAL_TIM_Base_Start+0x40>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a15      	ldr	r2, [pc, #84]	@ (800452c <HAL_TIM_Base_Start+0x90>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d116      	bne.n	800450a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	4a13      	ldr	r2, [pc, #76]	@ (8004530 <HAL_TIM_Base_Start+0x94>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b06      	cmp	r3, #6
 80044ec:	d016      	beq.n	800451c <HAL_TIM_Base_Start+0x80>
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	2380      	movs	r3, #128	@ 0x80
 80044f2:	025b      	lsls	r3, r3, #9
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d011      	beq.n	800451c <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2101      	movs	r1, #1
 8004504:	430a      	orrs	r2, r1
 8004506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004508:	e008      	b.n	800451c <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2101      	movs	r1, #1
 8004516:	430a      	orrs	r2, r1
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	e000      	b.n	800451e <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	0018      	movs	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	b004      	add	sp, #16
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40012c00 	.word	0x40012c00
 800452c:	40000400 	.word	0x40000400
 8004530:	00010007 	.word	0x00010007

08004534 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	4a0d      	ldr	r2, [pc, #52]	@ (8004578 <HAL_TIM_Base_Stop+0x44>)
 8004544:	4013      	ands	r3, r2
 8004546:	d10d      	bne.n	8004564 <HAL_TIM_Base_Stop+0x30>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	4a0b      	ldr	r2, [pc, #44]	@ (800457c <HAL_TIM_Base_Stop+0x48>)
 8004550:	4013      	ands	r3, r2
 8004552:	d107      	bne.n	8004564 <HAL_TIM_Base_Stop+0x30>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2101      	movs	r1, #1
 8004560:	438a      	bics	r2, r1
 8004562:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	223d      	movs	r2, #61	@ 0x3d
 8004568:	2101      	movs	r1, #1
 800456a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	0018      	movs	r0, r3
 8004570:	46bd      	mov	sp, r7
 8004572:	b002      	add	sp, #8
 8004574:	bd80      	pop	{r7, pc}
 8004576:	46c0      	nop			@ (mov r8, r8)
 8004578:	00001111 	.word	0x00001111
 800457c:	00000444 	.word	0x00000444

08004580 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e04a      	b.n	8004628 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	223d      	movs	r2, #61	@ 0x3d
 8004596:	5c9b      	ldrb	r3, [r3, r2]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d107      	bne.n	80045ae <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	223c      	movs	r2, #60	@ 0x3c
 80045a2:	2100      	movs	r1, #0
 80045a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	0018      	movs	r0, r3
 80045aa:	f7fd f8c1 	bl	8001730 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	223d      	movs	r2, #61	@ 0x3d
 80045b2:	2102      	movs	r1, #2
 80045b4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3304      	adds	r3, #4
 80045be:	0019      	movs	r1, r3
 80045c0:	0010      	movs	r0, r2
 80045c2:	f000 fb43 	bl	8004c4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2248      	movs	r2, #72	@ 0x48
 80045ca:	2101      	movs	r1, #1
 80045cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	223e      	movs	r2, #62	@ 0x3e
 80045d2:	2101      	movs	r1, #1
 80045d4:	5499      	strb	r1, [r3, r2]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	223f      	movs	r2, #63	@ 0x3f
 80045da:	2101      	movs	r1, #1
 80045dc:	5499      	strb	r1, [r3, r2]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2240      	movs	r2, #64	@ 0x40
 80045e2:	2101      	movs	r1, #1
 80045e4:	5499      	strb	r1, [r3, r2]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2241      	movs	r2, #65	@ 0x41
 80045ea:	2101      	movs	r1, #1
 80045ec:	5499      	strb	r1, [r3, r2]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2242      	movs	r2, #66	@ 0x42
 80045f2:	2101      	movs	r1, #1
 80045f4:	5499      	strb	r1, [r3, r2]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2243      	movs	r2, #67	@ 0x43
 80045fa:	2101      	movs	r1, #1
 80045fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2244      	movs	r2, #68	@ 0x44
 8004602:	2101      	movs	r1, #1
 8004604:	5499      	strb	r1, [r3, r2]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2245      	movs	r2, #69	@ 0x45
 800460a:	2101      	movs	r1, #1
 800460c:	5499      	strb	r1, [r3, r2]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2246      	movs	r2, #70	@ 0x46
 8004612:	2101      	movs	r1, #1
 8004614:	5499      	strb	r1, [r3, r2]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2247      	movs	r2, #71	@ 0x47
 800461a:	2101      	movs	r1, #1
 800461c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	223d      	movs	r2, #61	@ 0x3d
 8004622:	2101      	movs	r1, #1
 8004624:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	0018      	movs	r0, r3
 800462a:	46bd      	mov	sp, r7
 800462c:	b002      	add	sp, #8
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d108      	bne.n	8004652 <HAL_TIM_PWM_Start+0x22>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	223e      	movs	r2, #62	@ 0x3e
 8004644:	5c9b      	ldrb	r3, [r3, r2]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	1e5a      	subs	r2, r3, #1
 800464c:	4193      	sbcs	r3, r2
 800464e:	b2db      	uxtb	r3, r3
 8004650:	e037      	b.n	80046c2 <HAL_TIM_PWM_Start+0x92>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b04      	cmp	r3, #4
 8004656:	d108      	bne.n	800466a <HAL_TIM_PWM_Start+0x3a>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	223f      	movs	r2, #63	@ 0x3f
 800465c:	5c9b      	ldrb	r3, [r3, r2]
 800465e:	b2db      	uxtb	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	1e5a      	subs	r2, r3, #1
 8004664:	4193      	sbcs	r3, r2
 8004666:	b2db      	uxtb	r3, r3
 8004668:	e02b      	b.n	80046c2 <HAL_TIM_PWM_Start+0x92>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b08      	cmp	r3, #8
 800466e:	d108      	bne.n	8004682 <HAL_TIM_PWM_Start+0x52>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2240      	movs	r2, #64	@ 0x40
 8004674:	5c9b      	ldrb	r3, [r3, r2]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	1e5a      	subs	r2, r3, #1
 800467c:	4193      	sbcs	r3, r2
 800467e:	b2db      	uxtb	r3, r3
 8004680:	e01f      	b.n	80046c2 <HAL_TIM_PWM_Start+0x92>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b0c      	cmp	r3, #12
 8004686:	d108      	bne.n	800469a <HAL_TIM_PWM_Start+0x6a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2241      	movs	r2, #65	@ 0x41
 800468c:	5c9b      	ldrb	r3, [r3, r2]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	1e5a      	subs	r2, r3, #1
 8004694:	4193      	sbcs	r3, r2
 8004696:	b2db      	uxtb	r3, r3
 8004698:	e013      	b.n	80046c2 <HAL_TIM_PWM_Start+0x92>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b10      	cmp	r3, #16
 800469e:	d108      	bne.n	80046b2 <HAL_TIM_PWM_Start+0x82>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2242      	movs	r2, #66	@ 0x42
 80046a4:	5c9b      	ldrb	r3, [r3, r2]
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	1e5a      	subs	r2, r3, #1
 80046ac:	4193      	sbcs	r3, r2
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	e007      	b.n	80046c2 <HAL_TIM_PWM_Start+0x92>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2243      	movs	r2, #67	@ 0x43
 80046b6:	5c9b      	ldrb	r3, [r3, r2]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	1e5a      	subs	r2, r3, #1
 80046be:	4193      	sbcs	r3, r2
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e081      	b.n	80047ce <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d104      	bne.n	80046da <HAL_TIM_PWM_Start+0xaa>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	223e      	movs	r2, #62	@ 0x3e
 80046d4:	2102      	movs	r1, #2
 80046d6:	5499      	strb	r1, [r3, r2]
 80046d8:	e023      	b.n	8004722 <HAL_TIM_PWM_Start+0xf2>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d104      	bne.n	80046ea <HAL_TIM_PWM_Start+0xba>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	223f      	movs	r2, #63	@ 0x3f
 80046e4:	2102      	movs	r1, #2
 80046e6:	5499      	strb	r1, [r3, r2]
 80046e8:	e01b      	b.n	8004722 <HAL_TIM_PWM_Start+0xf2>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d104      	bne.n	80046fa <HAL_TIM_PWM_Start+0xca>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2240      	movs	r2, #64	@ 0x40
 80046f4:	2102      	movs	r1, #2
 80046f6:	5499      	strb	r1, [r3, r2]
 80046f8:	e013      	b.n	8004722 <HAL_TIM_PWM_Start+0xf2>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b0c      	cmp	r3, #12
 80046fe:	d104      	bne.n	800470a <HAL_TIM_PWM_Start+0xda>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2241      	movs	r2, #65	@ 0x41
 8004704:	2102      	movs	r1, #2
 8004706:	5499      	strb	r1, [r3, r2]
 8004708:	e00b      	b.n	8004722 <HAL_TIM_PWM_Start+0xf2>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b10      	cmp	r3, #16
 800470e:	d104      	bne.n	800471a <HAL_TIM_PWM_Start+0xea>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2242      	movs	r2, #66	@ 0x42
 8004714:	2102      	movs	r1, #2
 8004716:	5499      	strb	r1, [r3, r2]
 8004718:	e003      	b.n	8004722 <HAL_TIM_PWM_Start+0xf2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2243      	movs	r2, #67	@ 0x43
 800471e:	2102      	movs	r1, #2
 8004720:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6839      	ldr	r1, [r7, #0]
 8004728:	2201      	movs	r2, #1
 800472a:	0018      	movs	r0, r3
 800472c:	f000 fdae 	bl	800528c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a28      	ldr	r2, [pc, #160]	@ (80047d8 <HAL_TIM_PWM_Start+0x1a8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d009      	beq.n	800474e <HAL_TIM_PWM_Start+0x11e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a27      	ldr	r2, [pc, #156]	@ (80047dc <HAL_TIM_PWM_Start+0x1ac>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d004      	beq.n	800474e <HAL_TIM_PWM_Start+0x11e>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a25      	ldr	r2, [pc, #148]	@ (80047e0 <HAL_TIM_PWM_Start+0x1b0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d101      	bne.n	8004752 <HAL_TIM_PWM_Start+0x122>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <HAL_TIM_PWM_Start+0x124>
 8004752:	2300      	movs	r3, #0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d008      	beq.n	800476a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2180      	movs	r1, #128	@ 0x80
 8004764:	0209      	lsls	r1, r1, #8
 8004766:	430a      	orrs	r2, r1
 8004768:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1a      	ldr	r2, [pc, #104]	@ (80047d8 <HAL_TIM_PWM_Start+0x1a8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d00a      	beq.n	800478a <HAL_TIM_PWM_Start+0x15a>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	2380      	movs	r3, #128	@ 0x80
 800477a:	05db      	lsls	r3, r3, #23
 800477c:	429a      	cmp	r2, r3
 800477e:	d004      	beq.n	800478a <HAL_TIM_PWM_Start+0x15a>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a17      	ldr	r2, [pc, #92]	@ (80047e4 <HAL_TIM_PWM_Start+0x1b4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d116      	bne.n	80047b8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4a15      	ldr	r2, [pc, #84]	@ (80047e8 <HAL_TIM_PWM_Start+0x1b8>)
 8004792:	4013      	ands	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b06      	cmp	r3, #6
 800479a:	d016      	beq.n	80047ca <HAL_TIM_PWM_Start+0x19a>
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	2380      	movs	r3, #128	@ 0x80
 80047a0:	025b      	lsls	r3, r3, #9
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d011      	beq.n	80047ca <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2101      	movs	r1, #1
 80047b2:	430a      	orrs	r2, r1
 80047b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b6:	e008      	b.n	80047ca <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2101      	movs	r1, #1
 80047c4:	430a      	orrs	r2, r1
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	e000      	b.n	80047cc <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ca:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	0018      	movs	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b004      	add	sp, #16
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	46c0      	nop			@ (mov r8, r8)
 80047d8:	40012c00 	.word	0x40012c00
 80047dc:	40014400 	.word	0x40014400
 80047e0:	40014800 	.word	0x40014800
 80047e4:	40000400 	.word	0x40000400
 80047e8:	00010007 	.word	0x00010007

080047ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2202      	movs	r2, #2
 8004808:	4013      	ands	r3, r2
 800480a:	d021      	beq.n	8004850 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2202      	movs	r2, #2
 8004810:	4013      	ands	r3, r2
 8004812:	d01d      	beq.n	8004850 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2203      	movs	r2, #3
 800481a:	4252      	negs	r2, r2
 800481c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2203      	movs	r2, #3
 800482c:	4013      	ands	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	0018      	movs	r0, r3
 8004834:	f000 f9f2 	bl	8004c1c <HAL_TIM_IC_CaptureCallback>
 8004838:	e007      	b.n	800484a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	0018      	movs	r0, r3
 800483e:	f000 f9e5 	bl	8004c0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	0018      	movs	r0, r3
 8004846:	f000 f9f1 	bl	8004c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2204      	movs	r2, #4
 8004854:	4013      	ands	r3, r2
 8004856:	d022      	beq.n	800489e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2204      	movs	r2, #4
 800485c:	4013      	ands	r3, r2
 800485e:	d01e      	beq.n	800489e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2205      	movs	r2, #5
 8004866:	4252      	negs	r2, r2
 8004868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2202      	movs	r2, #2
 800486e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	23c0      	movs	r3, #192	@ 0xc0
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4013      	ands	r3, r2
 800487c:	d004      	beq.n	8004888 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	0018      	movs	r0, r3
 8004882:	f000 f9cb 	bl	8004c1c <HAL_TIM_IC_CaptureCallback>
 8004886:	e007      	b.n	8004898 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	0018      	movs	r0, r3
 800488c:	f000 f9be 	bl	8004c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	0018      	movs	r0, r3
 8004894:	f000 f9ca 	bl	8004c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2208      	movs	r2, #8
 80048a2:	4013      	ands	r3, r2
 80048a4:	d021      	beq.n	80048ea <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2208      	movs	r2, #8
 80048aa:	4013      	ands	r3, r2
 80048ac:	d01d      	beq.n	80048ea <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2209      	movs	r2, #9
 80048b4:	4252      	negs	r2, r2
 80048b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2204      	movs	r2, #4
 80048bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	2203      	movs	r2, #3
 80048c6:	4013      	ands	r3, r2
 80048c8:	d004      	beq.n	80048d4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	0018      	movs	r0, r3
 80048ce:	f000 f9a5 	bl	8004c1c <HAL_TIM_IC_CaptureCallback>
 80048d2:	e007      	b.n	80048e4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	0018      	movs	r0, r3
 80048d8:	f000 f998 	bl	8004c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	0018      	movs	r0, r3
 80048e0:	f000 f9a4 	bl	8004c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2210      	movs	r2, #16
 80048ee:	4013      	ands	r3, r2
 80048f0:	d022      	beq.n	8004938 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2210      	movs	r2, #16
 80048f6:	4013      	ands	r3, r2
 80048f8:	d01e      	beq.n	8004938 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2211      	movs	r2, #17
 8004900:	4252      	negs	r2, r2
 8004902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2208      	movs	r2, #8
 8004908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	23c0      	movs	r3, #192	@ 0xc0
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4013      	ands	r3, r2
 8004916:	d004      	beq.n	8004922 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	0018      	movs	r0, r3
 800491c:	f000 f97e 	bl	8004c1c <HAL_TIM_IC_CaptureCallback>
 8004920:	e007      	b.n	8004932 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	0018      	movs	r0, r3
 8004926:	f000 f971 	bl	8004c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	0018      	movs	r0, r3
 800492e:	f000 f97d 	bl	8004c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2201      	movs	r2, #1
 800493c:	4013      	ands	r3, r2
 800493e:	d00c      	beq.n	800495a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2201      	movs	r2, #1
 8004944:	4013      	ands	r3, r2
 8004946:	d008      	beq.n	800495a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2202      	movs	r2, #2
 800494e:	4252      	negs	r2, r2
 8004950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	0018      	movs	r0, r3
 8004956:	f000 f951 	bl	8004bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2280      	movs	r2, #128	@ 0x80
 800495e:	4013      	ands	r3, r2
 8004960:	d104      	bne.n	800496c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	2380      	movs	r3, #128	@ 0x80
 8004966:	019b      	lsls	r3, r3, #6
 8004968:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800496a:	d00b      	beq.n	8004984 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2280      	movs	r2, #128	@ 0x80
 8004970:	4013      	ands	r3, r2
 8004972:	d007      	beq.n	8004984 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1e      	ldr	r2, [pc, #120]	@ (80049f4 <HAL_TIM_IRQHandler+0x208>)
 800497a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	0018      	movs	r0, r3
 8004980:	f000 fd18 	bl	80053b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	2380      	movs	r3, #128	@ 0x80
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	4013      	ands	r3, r2
 800498c:	d00b      	beq.n	80049a6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2280      	movs	r2, #128	@ 0x80
 8004992:	4013      	ands	r3, r2
 8004994:	d007      	beq.n	80049a6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a17      	ldr	r2, [pc, #92]	@ (80049f8 <HAL_TIM_IRQHandler+0x20c>)
 800499c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	0018      	movs	r0, r3
 80049a2:	f000 fd0f 	bl	80053c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2240      	movs	r2, #64	@ 0x40
 80049aa:	4013      	ands	r3, r2
 80049ac:	d00c      	beq.n	80049c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2240      	movs	r2, #64	@ 0x40
 80049b2:	4013      	ands	r3, r2
 80049b4:	d008      	beq.n	80049c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2241      	movs	r2, #65	@ 0x41
 80049bc:	4252      	negs	r2, r2
 80049be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	0018      	movs	r0, r3
 80049c4:	f000 f93a 	bl	8004c3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2220      	movs	r2, #32
 80049cc:	4013      	ands	r3, r2
 80049ce:	d00c      	beq.n	80049ea <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	4013      	ands	r3, r2
 80049d6:	d008      	beq.n	80049ea <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2221      	movs	r2, #33	@ 0x21
 80049de:	4252      	negs	r2, r2
 80049e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	0018      	movs	r0, r3
 80049e6:	f000 fcdd 	bl	80053a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049ea:	46c0      	nop			@ (mov r8, r8)
 80049ec:	46bd      	mov	sp, r7
 80049ee:	b004      	add	sp, #16
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	46c0      	nop			@ (mov r8, r8)
 80049f4:	ffffdf7f 	.word	0xffffdf7f
 80049f8:	fffffeff 	.word	0xfffffeff

080049fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a08:	2317      	movs	r3, #23
 8004a0a:	18fb      	adds	r3, r7, r3
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	223c      	movs	r2, #60	@ 0x3c
 8004a14:	5c9b      	ldrb	r3, [r3, r2]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_TIM_PWM_ConfigChannel+0x22>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e0e5      	b.n	8004bea <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	223c      	movs	r2, #60	@ 0x3c
 8004a22:	2101      	movs	r1, #1
 8004a24:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b14      	cmp	r3, #20
 8004a2a:	d900      	bls.n	8004a2e <HAL_TIM_PWM_ConfigChannel+0x32>
 8004a2c:	e0d1      	b.n	8004bd2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	009a      	lsls	r2, r3, #2
 8004a32:	4b70      	ldr	r3, [pc, #448]	@ (8004bf4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004a34:	18d3      	adds	r3, r2, r3
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	0011      	movs	r1, r2
 8004a42:	0018      	movs	r0, r3
 8004a44:	f000 f986 	bl	8004d54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699a      	ldr	r2, [r3, #24]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2108      	movs	r1, #8
 8004a54:	430a      	orrs	r2, r1
 8004a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2104      	movs	r1, #4
 8004a64:	438a      	bics	r2, r1
 8004a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6999      	ldr	r1, [r3, #24]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	691a      	ldr	r2, [r3, #16]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	619a      	str	r2, [r3, #24]
      break;
 8004a7a:	e0af      	b.n	8004bdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	0011      	movs	r1, r2
 8004a84:	0018      	movs	r0, r3
 8004a86:	f000 f9e5 	bl	8004e54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699a      	ldr	r2, [r3, #24]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2180      	movs	r1, #128	@ 0x80
 8004a96:	0109      	lsls	r1, r1, #4
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4954      	ldr	r1, [pc, #336]	@ (8004bf8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004aa8:	400a      	ands	r2, r1
 8004aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6999      	ldr	r1, [r3, #24]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	021a      	lsls	r2, r3, #8
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	619a      	str	r2, [r3, #24]
      break;
 8004ac0:	e08c      	b.n	8004bdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	0011      	movs	r1, r2
 8004aca:	0018      	movs	r0, r3
 8004acc:	f000 fa40 	bl	8004f50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	69da      	ldr	r2, [r3, #28]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2108      	movs	r1, #8
 8004adc:	430a      	orrs	r2, r1
 8004ade:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69da      	ldr	r2, [r3, #28]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2104      	movs	r1, #4
 8004aec:	438a      	bics	r2, r1
 8004aee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	69d9      	ldr	r1, [r3, #28]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	61da      	str	r2, [r3, #28]
      break;
 8004b02:	e06b      	b.n	8004bdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	0011      	movs	r1, r2
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f000 faa1 	bl	8005054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69da      	ldr	r2, [r3, #28]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2180      	movs	r1, #128	@ 0x80
 8004b1e:	0109      	lsls	r1, r1, #4
 8004b20:	430a      	orrs	r2, r1
 8004b22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69da      	ldr	r2, [r3, #28]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4932      	ldr	r1, [pc, #200]	@ (8004bf8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004b30:	400a      	ands	r2, r1
 8004b32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69d9      	ldr	r1, [r3, #28]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	021a      	lsls	r2, r3, #8
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	61da      	str	r2, [r3, #28]
      break;
 8004b48:	e048      	b.n	8004bdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	0011      	movs	r1, r2
 8004b52:	0018      	movs	r0, r3
 8004b54:	f000 fae2 	bl	800511c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2108      	movs	r1, #8
 8004b64:	430a      	orrs	r2, r1
 8004b66:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2104      	movs	r1, #4
 8004b74:	438a      	bics	r2, r1
 8004b76:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	691a      	ldr	r2, [r3, #16]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b8a:	e027      	b.n	8004bdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	0011      	movs	r1, r2
 8004b94:	0018      	movs	r0, r3
 8004b96:	f000 fb1b 	bl	80051d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2180      	movs	r1, #128	@ 0x80
 8004ba6:	0109      	lsls	r1, r1, #4
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4910      	ldr	r1, [pc, #64]	@ (8004bf8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004bb8:	400a      	ands	r2, r1
 8004bba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	021a      	lsls	r2, r3, #8
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004bd0:	e004      	b.n	8004bdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004bd2:	2317      	movs	r3, #23
 8004bd4:	18fb      	adds	r3, r7, r3
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	701a      	strb	r2, [r3, #0]
      break;
 8004bda:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	223c      	movs	r2, #60	@ 0x3c
 8004be0:	2100      	movs	r1, #0
 8004be2:	5499      	strb	r1, [r3, r2]

  return status;
 8004be4:	2317      	movs	r3, #23
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	781b      	ldrb	r3, [r3, #0]
}
 8004bea:	0018      	movs	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b006      	add	sp, #24
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	46c0      	nop			@ (mov r8, r8)
 8004bf4:	08006694 	.word	0x08006694
 8004bf8:	fffffbff 	.word	0xfffffbff

08004bfc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c04:	46c0      	nop			@ (mov r8, r8)
 8004c06:	46bd      	mov	sp, r7
 8004c08:	b002      	add	sp, #8
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c14:	46c0      	nop			@ (mov r8, r8)
 8004c16:	46bd      	mov	sp, r7
 8004c18:	b002      	add	sp, #8
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c24:	46c0      	nop			@ (mov r8, r8)
 8004c26:	46bd      	mov	sp, r7
 8004c28:	b002      	add	sp, #8
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c34:	46c0      	nop			@ (mov r8, r8)
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b002      	add	sp, #8
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c44:	46c0      	nop			@ (mov r8, r8)
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b002      	add	sp, #8
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a37      	ldr	r2, [pc, #220]	@ (8004d3c <TIM_Base_SetConfig+0xf0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d008      	beq.n	8004c76 <TIM_Base_SetConfig+0x2a>
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	2380      	movs	r3, #128	@ 0x80
 8004c68:	05db      	lsls	r3, r3, #23
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d003      	beq.n	8004c76 <TIM_Base_SetConfig+0x2a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a33      	ldr	r2, [pc, #204]	@ (8004d40 <TIM_Base_SetConfig+0xf4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d108      	bne.n	8004c88 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2270      	movs	r2, #112	@ 0x70
 8004c7a:	4393      	bics	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8004d3c <TIM_Base_SetConfig+0xf0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d014      	beq.n	8004cba <TIM_Base_SetConfig+0x6e>
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	2380      	movs	r3, #128	@ 0x80
 8004c94:	05db      	lsls	r3, r3, #23
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d00f      	beq.n	8004cba <TIM_Base_SetConfig+0x6e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a28      	ldr	r2, [pc, #160]	@ (8004d40 <TIM_Base_SetConfig+0xf4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00b      	beq.n	8004cba <TIM_Base_SetConfig+0x6e>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a27      	ldr	r2, [pc, #156]	@ (8004d44 <TIM_Base_SetConfig+0xf8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d007      	beq.n	8004cba <TIM_Base_SetConfig+0x6e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a26      	ldr	r2, [pc, #152]	@ (8004d48 <TIM_Base_SetConfig+0xfc>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d003      	beq.n	8004cba <TIM_Base_SetConfig+0x6e>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a25      	ldr	r2, [pc, #148]	@ (8004d4c <TIM_Base_SetConfig+0x100>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d108      	bne.n	8004ccc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4a24      	ldr	r2, [pc, #144]	@ (8004d50 <TIM_Base_SetConfig+0x104>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2280      	movs	r2, #128	@ 0x80
 8004cd0:	4393      	bics	r3, r2
 8004cd2:	001a      	movs	r2, r3
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a11      	ldr	r2, [pc, #68]	@ (8004d3c <TIM_Base_SetConfig+0xf0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d007      	beq.n	8004d0a <TIM_Base_SetConfig+0xbe>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a12      	ldr	r2, [pc, #72]	@ (8004d48 <TIM_Base_SetConfig+0xfc>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d003      	beq.n	8004d0a <TIM_Base_SetConfig+0xbe>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a11      	ldr	r2, [pc, #68]	@ (8004d4c <TIM_Base_SetConfig+0x100>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d103      	bne.n	8004d12 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	691a      	ldr	r2, [r3, #16]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d106      	bne.n	8004d32 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	4393      	bics	r3, r2
 8004d2c:	001a      	movs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	611a      	str	r2, [r3, #16]
  }
}
 8004d32:	46c0      	nop			@ (mov r8, r8)
 8004d34:	46bd      	mov	sp, r7
 8004d36:	b004      	add	sp, #16
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	46c0      	nop			@ (mov r8, r8)
 8004d3c:	40012c00 	.word	0x40012c00
 8004d40:	40000400 	.word	0x40000400
 8004d44:	40002000 	.word	0x40002000
 8004d48:	40014400 	.word	0x40014400
 8004d4c:	40014800 	.word	0x40014800
 8004d50:	fffffcff 	.word	0xfffffcff

08004d54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	4393      	bics	r3, r2
 8004d6c:	001a      	movs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4a2e      	ldr	r2, [pc, #184]	@ (8004e3c <TIM_OC1_SetConfig+0xe8>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2203      	movs	r2, #3
 8004d8a:	4393      	bics	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	4393      	bics	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a24      	ldr	r2, [pc, #144]	@ (8004e40 <TIM_OC1_SetConfig+0xec>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d007      	beq.n	8004dc2 <TIM_OC1_SetConfig+0x6e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a23      	ldr	r2, [pc, #140]	@ (8004e44 <TIM_OC1_SetConfig+0xf0>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d003      	beq.n	8004dc2 <TIM_OC1_SetConfig+0x6e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a22      	ldr	r2, [pc, #136]	@ (8004e48 <TIM_OC1_SetConfig+0xf4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d10c      	bne.n	8004ddc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2208      	movs	r2, #8
 8004dc6:	4393      	bics	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2204      	movs	r2, #4
 8004dd8:	4393      	bics	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a18      	ldr	r2, [pc, #96]	@ (8004e40 <TIM_OC1_SetConfig+0xec>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d007      	beq.n	8004df4 <TIM_OC1_SetConfig+0xa0>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a17      	ldr	r2, [pc, #92]	@ (8004e44 <TIM_OC1_SetConfig+0xf0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d003      	beq.n	8004df4 <TIM_OC1_SetConfig+0xa0>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a16      	ldr	r2, [pc, #88]	@ (8004e48 <TIM_OC1_SetConfig+0xf4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d111      	bne.n	8004e18 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	4a15      	ldr	r2, [pc, #84]	@ (8004e4c <TIM_OC1_SetConfig+0xf8>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	4a14      	ldr	r2, [pc, #80]	@ (8004e50 <TIM_OC1_SetConfig+0xfc>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	621a      	str	r2, [r3, #32]
}
 8004e32:	46c0      	nop			@ (mov r8, r8)
 8004e34:	46bd      	mov	sp, r7
 8004e36:	b006      	add	sp, #24
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	46c0      	nop			@ (mov r8, r8)
 8004e3c:	fffeff8f 	.word	0xfffeff8f
 8004e40:	40012c00 	.word	0x40012c00
 8004e44:	40014400 	.word	0x40014400
 8004e48:	40014800 	.word	0x40014800
 8004e4c:	fffffeff 	.word	0xfffffeff
 8004e50:	fffffdff 	.word	0xfffffdff

08004e54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	2210      	movs	r2, #16
 8004e6a:	4393      	bics	r3, r2
 8004e6c:	001a      	movs	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4a2c      	ldr	r2, [pc, #176]	@ (8004f34 <TIM_OC2_SetConfig+0xe0>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4a2b      	ldr	r2, [pc, #172]	@ (8004f38 <TIM_OC2_SetConfig+0xe4>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	021b      	lsls	r3, r3, #8
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	4393      	bics	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a22      	ldr	r2, [pc, #136]	@ (8004f3c <TIM_OC2_SetConfig+0xe8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d10d      	bne.n	8004ed2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2280      	movs	r2, #128	@ 0x80
 8004eba:	4393      	bics	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2240      	movs	r2, #64	@ 0x40
 8004ece:	4393      	bics	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a19      	ldr	r2, [pc, #100]	@ (8004f3c <TIM_OC2_SetConfig+0xe8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d007      	beq.n	8004eea <TIM_OC2_SetConfig+0x96>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a18      	ldr	r2, [pc, #96]	@ (8004f40 <TIM_OC2_SetConfig+0xec>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d003      	beq.n	8004eea <TIM_OC2_SetConfig+0x96>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a17      	ldr	r2, [pc, #92]	@ (8004f44 <TIM_OC2_SetConfig+0xf0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d113      	bne.n	8004f12 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	4a16      	ldr	r2, [pc, #88]	@ (8004f48 <TIM_OC2_SetConfig+0xf4>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	4a15      	ldr	r2, [pc, #84]	@ (8004f4c <TIM_OC2_SetConfig+0xf8>)
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	621a      	str	r2, [r3, #32]
}
 8004f2c:	46c0      	nop			@ (mov r8, r8)
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	b006      	add	sp, #24
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	feff8fff 	.word	0xfeff8fff
 8004f38:	fffffcff 	.word	0xfffffcff
 8004f3c:	40012c00 	.word	0x40012c00
 8004f40:	40014400 	.word	0x40014400
 8004f44:	40014800 	.word	0x40014800
 8004f48:	fffffbff 	.word	0xfffffbff
 8004f4c:	fffff7ff 	.word	0xfffff7ff

08004f50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	4a31      	ldr	r2, [pc, #196]	@ (800502c <TIM_OC3_SetConfig+0xdc>)
 8004f66:	401a      	ands	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4a2d      	ldr	r2, [pc, #180]	@ (8005030 <TIM_OC3_SetConfig+0xe0>)
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2203      	movs	r2, #3
 8004f84:	4393      	bics	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	4a27      	ldr	r2, [pc, #156]	@ (8005034 <TIM_OC3_SetConfig+0xe4>)
 8004f96:	4013      	ands	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a23      	ldr	r2, [pc, #140]	@ (8005038 <TIM_OC3_SetConfig+0xe8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d10d      	bne.n	8004fca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	4a22      	ldr	r2, [pc, #136]	@ (800503c <TIM_OC3_SetConfig+0xec>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	4a1e      	ldr	r2, [pc, #120]	@ (8005040 <TIM_OC3_SetConfig+0xf0>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a1a      	ldr	r2, [pc, #104]	@ (8005038 <TIM_OC3_SetConfig+0xe8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d007      	beq.n	8004fe2 <TIM_OC3_SetConfig+0x92>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8005044 <TIM_OC3_SetConfig+0xf4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d003      	beq.n	8004fe2 <TIM_OC3_SetConfig+0x92>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8005048 <TIM_OC3_SetConfig+0xf8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d113      	bne.n	800500a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	4a19      	ldr	r2, [pc, #100]	@ (800504c <TIM_OC3_SetConfig+0xfc>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	4a18      	ldr	r2, [pc, #96]	@ (8005050 <TIM_OC3_SetConfig+0x100>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	621a      	str	r2, [r3, #32]
}
 8005024:	46c0      	nop			@ (mov r8, r8)
 8005026:	46bd      	mov	sp, r7
 8005028:	b006      	add	sp, #24
 800502a:	bd80      	pop	{r7, pc}
 800502c:	fffffeff 	.word	0xfffffeff
 8005030:	fffeff8f 	.word	0xfffeff8f
 8005034:	fffffdff 	.word	0xfffffdff
 8005038:	40012c00 	.word	0x40012c00
 800503c:	fffff7ff 	.word	0xfffff7ff
 8005040:	fffffbff 	.word	0xfffffbff
 8005044:	40014400 	.word	0x40014400
 8005048:	40014800 	.word	0x40014800
 800504c:	ffffefff 	.word	0xffffefff
 8005050:	ffffdfff 	.word	0xffffdfff

08005054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	4a24      	ldr	r2, [pc, #144]	@ (80050fc <TIM_OC4_SetConfig+0xa8>)
 800506a:	401a      	ands	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4a20      	ldr	r2, [pc, #128]	@ (8005100 <TIM_OC4_SetConfig+0xac>)
 8005080:	4013      	ands	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4a1f      	ldr	r2, [pc, #124]	@ (8005104 <TIM_OC4_SetConfig+0xb0>)
 8005088:	4013      	ands	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	4a1b      	ldr	r2, [pc, #108]	@ (8005108 <TIM_OC4_SetConfig+0xb4>)
 800509c:	4013      	ands	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	031b      	lsls	r3, r3, #12
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a17      	ldr	r2, [pc, #92]	@ (800510c <TIM_OC4_SetConfig+0xb8>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d007      	beq.n	80050c4 <TIM_OC4_SetConfig+0x70>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a16      	ldr	r2, [pc, #88]	@ (8005110 <TIM_OC4_SetConfig+0xbc>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d003      	beq.n	80050c4 <TIM_OC4_SetConfig+0x70>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a15      	ldr	r2, [pc, #84]	@ (8005114 <TIM_OC4_SetConfig+0xc0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d109      	bne.n	80050d8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	4a14      	ldr	r2, [pc, #80]	@ (8005118 <TIM_OC4_SetConfig+0xc4>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	019b      	lsls	r3, r3, #6
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	46c0      	nop			@ (mov r8, r8)
 80050f4:	46bd      	mov	sp, r7
 80050f6:	b006      	add	sp, #24
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	46c0      	nop			@ (mov r8, r8)
 80050fc:	ffffefff 	.word	0xffffefff
 8005100:	feff8fff 	.word	0xfeff8fff
 8005104:	fffffcff 	.word	0xfffffcff
 8005108:	ffffdfff 	.word	0xffffdfff
 800510c:	40012c00 	.word	0x40012c00
 8005110:	40014400 	.word	0x40014400
 8005114:	40014800 	.word	0x40014800
 8005118:	ffffbfff 	.word	0xffffbfff

0800511c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	4a21      	ldr	r2, [pc, #132]	@ (80051b8 <TIM_OC5_SetConfig+0x9c>)
 8005132:	401a      	ands	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4a1d      	ldr	r2, [pc, #116]	@ (80051bc <TIM_OC5_SetConfig+0xa0>)
 8005148:	4013      	ands	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	4a19      	ldr	r2, [pc, #100]	@ (80051c0 <TIM_OC5_SetConfig+0xa4>)
 800515a:	4013      	ands	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	041b      	lsls	r3, r3, #16
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a15      	ldr	r2, [pc, #84]	@ (80051c4 <TIM_OC5_SetConfig+0xa8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d007      	beq.n	8005182 <TIM_OC5_SetConfig+0x66>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a14      	ldr	r2, [pc, #80]	@ (80051c8 <TIM_OC5_SetConfig+0xac>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d003      	beq.n	8005182 <TIM_OC5_SetConfig+0x66>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a13      	ldr	r2, [pc, #76]	@ (80051cc <TIM_OC5_SetConfig+0xb0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d109      	bne.n	8005196 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	4a0c      	ldr	r2, [pc, #48]	@ (80051b8 <TIM_OC5_SetConfig+0x9c>)
 8005186:	4013      	ands	r3, r2
 8005188:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	021b      	lsls	r3, r3, #8
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	621a      	str	r2, [r3, #32]
}
 80051b0:	46c0      	nop			@ (mov r8, r8)
 80051b2:	46bd      	mov	sp, r7
 80051b4:	b006      	add	sp, #24
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	fffeffff 	.word	0xfffeffff
 80051bc:	fffeff8f 	.word	0xfffeff8f
 80051c0:	fffdffff 	.word	0xfffdffff
 80051c4:	40012c00 	.word	0x40012c00
 80051c8:	40014400 	.word	0x40014400
 80051cc:	40014800 	.word	0x40014800

080051d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	4a22      	ldr	r2, [pc, #136]	@ (8005270 <TIM_OC6_SetConfig+0xa0>)
 80051e6:	401a      	ands	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005274 <TIM_OC6_SetConfig+0xa4>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	021b      	lsls	r3, r3, #8
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	4a1a      	ldr	r2, [pc, #104]	@ (8005278 <TIM_OC6_SetConfig+0xa8>)
 8005210:	4013      	ands	r3, r2
 8005212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	051b      	lsls	r3, r3, #20
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a16      	ldr	r2, [pc, #88]	@ (800527c <TIM_OC6_SetConfig+0xac>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d007      	beq.n	8005238 <TIM_OC6_SetConfig+0x68>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a15      	ldr	r2, [pc, #84]	@ (8005280 <TIM_OC6_SetConfig+0xb0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d003      	beq.n	8005238 <TIM_OC6_SetConfig+0x68>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a14      	ldr	r2, [pc, #80]	@ (8005284 <TIM_OC6_SetConfig+0xb4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d109      	bne.n	800524c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	4a13      	ldr	r2, [pc, #76]	@ (8005288 <TIM_OC6_SetConfig+0xb8>)
 800523c:	4013      	ands	r3, r2
 800523e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	029b      	lsls	r3, r3, #10
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	621a      	str	r2, [r3, #32]
}
 8005266:	46c0      	nop			@ (mov r8, r8)
 8005268:	46bd      	mov	sp, r7
 800526a:	b006      	add	sp, #24
 800526c:	bd80      	pop	{r7, pc}
 800526e:	46c0      	nop			@ (mov r8, r8)
 8005270:	ffefffff 	.word	0xffefffff
 8005274:	feff8fff 	.word	0xfeff8fff
 8005278:	ffdfffff 	.word	0xffdfffff
 800527c:	40012c00 	.word	0x40012c00
 8005280:	40014400 	.word	0x40014400
 8005284:	40014800 	.word	0x40014800
 8005288:	fffbffff 	.word	0xfffbffff

0800528c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	221f      	movs	r2, #31
 800529c:	4013      	ands	r3, r2
 800529e:	2201      	movs	r2, #1
 80052a0:	409a      	lsls	r2, r3
 80052a2:	0013      	movs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	43d2      	mvns	r2, r2
 80052ae:	401a      	ands	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a1a      	ldr	r2, [r3, #32]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	211f      	movs	r1, #31
 80052bc:	400b      	ands	r3, r1
 80052be:	6879      	ldr	r1, [r7, #4]
 80052c0:	4099      	lsls	r1, r3
 80052c2:	000b      	movs	r3, r1
 80052c4:	431a      	orrs	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	621a      	str	r2, [r3, #32]
}
 80052ca:	46c0      	nop			@ (mov r8, r8)
 80052cc:	46bd      	mov	sp, r7
 80052ce:	b006      	add	sp, #24
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	223c      	movs	r2, #60	@ 0x3c
 80052e2:	5c9b      	ldrb	r3, [r3, r2]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e050      	b.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	223c      	movs	r2, #60	@ 0x3c
 80052f0:	2101      	movs	r1, #1
 80052f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	223d      	movs	r2, #61	@ 0x3d
 80052f8:	2102      	movs	r1, #2
 80052fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a21      	ldr	r2, [pc, #132]	@ (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d108      	bne.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4a20      	ldr	r2, [pc, #128]	@ (800539c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800531a:	4013      	ands	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4313      	orrs	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2270      	movs	r2, #112	@ 0x70
 800532c:	4393      	bics	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a14      	ldr	r2, [pc, #80]	@ (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00a      	beq.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	2380      	movs	r3, #128	@ 0x80
 8005352:	05db      	lsls	r3, r3, #23
 8005354:	429a      	cmp	r2, r3
 8005356:	d004      	beq.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a10      	ldr	r2, [pc, #64]	@ (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d10c      	bne.n	800537c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2280      	movs	r2, #128	@ 0x80
 8005366:	4393      	bics	r3, r2
 8005368:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	4313      	orrs	r3, r2
 8005372:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	223d      	movs	r2, #61	@ 0x3d
 8005380:	2101      	movs	r1, #1
 8005382:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	223c      	movs	r2, #60	@ 0x3c
 8005388:	2100      	movs	r1, #0
 800538a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	0018      	movs	r0, r3
 8005390:	46bd      	mov	sp, r7
 8005392:	b004      	add	sp, #16
 8005394:	bd80      	pop	{r7, pc}
 8005396:	46c0      	nop			@ (mov r8, r8)
 8005398:	40012c00 	.word	0x40012c00
 800539c:	ff0fffff 	.word	0xff0fffff
 80053a0:	40000400 	.word	0x40000400

080053a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053ac:	46c0      	nop			@ (mov r8, r8)
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b002      	add	sp, #8
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053bc:	46c0      	nop			@ (mov r8, r8)
 80053be:	46bd      	mov	sp, r7
 80053c0:	b002      	add	sp, #8
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053cc:	46c0      	nop			@ (mov r8, r8)
 80053ce:	46bd      	mov	sp, r7
 80053d0:	b002      	add	sp, #8
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <std>:
 80053d4:	2300      	movs	r3, #0
 80053d6:	b510      	push	{r4, lr}
 80053d8:	0004      	movs	r4, r0
 80053da:	6003      	str	r3, [r0, #0]
 80053dc:	6043      	str	r3, [r0, #4]
 80053de:	6083      	str	r3, [r0, #8]
 80053e0:	8181      	strh	r1, [r0, #12]
 80053e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80053e4:	81c2      	strh	r2, [r0, #14]
 80053e6:	6103      	str	r3, [r0, #16]
 80053e8:	6143      	str	r3, [r0, #20]
 80053ea:	6183      	str	r3, [r0, #24]
 80053ec:	0019      	movs	r1, r3
 80053ee:	2208      	movs	r2, #8
 80053f0:	305c      	adds	r0, #92	@ 0x5c
 80053f2:	f000 f90f 	bl	8005614 <memset>
 80053f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005424 <std+0x50>)
 80053f8:	6224      	str	r4, [r4, #32]
 80053fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80053fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005428 <std+0x54>)
 80053fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005400:	4b0a      	ldr	r3, [pc, #40]	@ (800542c <std+0x58>)
 8005402:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005404:	4b0a      	ldr	r3, [pc, #40]	@ (8005430 <std+0x5c>)
 8005406:	6323      	str	r3, [r4, #48]	@ 0x30
 8005408:	4b0a      	ldr	r3, [pc, #40]	@ (8005434 <std+0x60>)
 800540a:	429c      	cmp	r4, r3
 800540c:	d005      	beq.n	800541a <std+0x46>
 800540e:	4b0a      	ldr	r3, [pc, #40]	@ (8005438 <std+0x64>)
 8005410:	429c      	cmp	r4, r3
 8005412:	d002      	beq.n	800541a <std+0x46>
 8005414:	4b09      	ldr	r3, [pc, #36]	@ (800543c <std+0x68>)
 8005416:	429c      	cmp	r4, r3
 8005418:	d103      	bne.n	8005422 <std+0x4e>
 800541a:	0020      	movs	r0, r4
 800541c:	3058      	adds	r0, #88	@ 0x58
 800541e:	f000 f979 	bl	8005714 <__retarget_lock_init_recursive>
 8005422:	bd10      	pop	{r4, pc}
 8005424:	0800557d 	.word	0x0800557d
 8005428:	080055a5 	.word	0x080055a5
 800542c:	080055dd 	.word	0x080055dd
 8005430:	08005609 	.word	0x08005609
 8005434:	20000284 	.word	0x20000284
 8005438:	200002ec 	.word	0x200002ec
 800543c:	20000354 	.word	0x20000354

08005440 <stdio_exit_handler>:
 8005440:	b510      	push	{r4, lr}
 8005442:	4a03      	ldr	r2, [pc, #12]	@ (8005450 <stdio_exit_handler+0x10>)
 8005444:	4903      	ldr	r1, [pc, #12]	@ (8005454 <stdio_exit_handler+0x14>)
 8005446:	4804      	ldr	r0, [pc, #16]	@ (8005458 <stdio_exit_handler+0x18>)
 8005448:	f000 f86c 	bl	8005524 <_fwalk_sglue>
 800544c:	bd10      	pop	{r4, pc}
 800544e:	46c0      	nop			@ (mov r8, r8)
 8005450:	2000004c 	.word	0x2000004c
 8005454:	08005fa5 	.word	0x08005fa5
 8005458:	2000005c 	.word	0x2000005c

0800545c <cleanup_stdio>:
 800545c:	6841      	ldr	r1, [r0, #4]
 800545e:	4b0b      	ldr	r3, [pc, #44]	@ (800548c <cleanup_stdio+0x30>)
 8005460:	b510      	push	{r4, lr}
 8005462:	0004      	movs	r4, r0
 8005464:	4299      	cmp	r1, r3
 8005466:	d001      	beq.n	800546c <cleanup_stdio+0x10>
 8005468:	f000 fd9c 	bl	8005fa4 <_fflush_r>
 800546c:	68a1      	ldr	r1, [r4, #8]
 800546e:	4b08      	ldr	r3, [pc, #32]	@ (8005490 <cleanup_stdio+0x34>)
 8005470:	4299      	cmp	r1, r3
 8005472:	d002      	beq.n	800547a <cleanup_stdio+0x1e>
 8005474:	0020      	movs	r0, r4
 8005476:	f000 fd95 	bl	8005fa4 <_fflush_r>
 800547a:	68e1      	ldr	r1, [r4, #12]
 800547c:	4b05      	ldr	r3, [pc, #20]	@ (8005494 <cleanup_stdio+0x38>)
 800547e:	4299      	cmp	r1, r3
 8005480:	d002      	beq.n	8005488 <cleanup_stdio+0x2c>
 8005482:	0020      	movs	r0, r4
 8005484:	f000 fd8e 	bl	8005fa4 <_fflush_r>
 8005488:	bd10      	pop	{r4, pc}
 800548a:	46c0      	nop			@ (mov r8, r8)
 800548c:	20000284 	.word	0x20000284
 8005490:	200002ec 	.word	0x200002ec
 8005494:	20000354 	.word	0x20000354

08005498 <global_stdio_init.part.0>:
 8005498:	b510      	push	{r4, lr}
 800549a:	4b09      	ldr	r3, [pc, #36]	@ (80054c0 <global_stdio_init.part.0+0x28>)
 800549c:	4a09      	ldr	r2, [pc, #36]	@ (80054c4 <global_stdio_init.part.0+0x2c>)
 800549e:	2104      	movs	r1, #4
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	4809      	ldr	r0, [pc, #36]	@ (80054c8 <global_stdio_init.part.0+0x30>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	f7ff ff95 	bl	80053d4 <std>
 80054aa:	2201      	movs	r2, #1
 80054ac:	2109      	movs	r1, #9
 80054ae:	4807      	ldr	r0, [pc, #28]	@ (80054cc <global_stdio_init.part.0+0x34>)
 80054b0:	f7ff ff90 	bl	80053d4 <std>
 80054b4:	2202      	movs	r2, #2
 80054b6:	2112      	movs	r1, #18
 80054b8:	4805      	ldr	r0, [pc, #20]	@ (80054d0 <global_stdio_init.part.0+0x38>)
 80054ba:	f7ff ff8b 	bl	80053d4 <std>
 80054be:	bd10      	pop	{r4, pc}
 80054c0:	200003bc 	.word	0x200003bc
 80054c4:	08005441 	.word	0x08005441
 80054c8:	20000284 	.word	0x20000284
 80054cc:	200002ec 	.word	0x200002ec
 80054d0:	20000354 	.word	0x20000354

080054d4 <__sfp_lock_acquire>:
 80054d4:	b510      	push	{r4, lr}
 80054d6:	4802      	ldr	r0, [pc, #8]	@ (80054e0 <__sfp_lock_acquire+0xc>)
 80054d8:	f000 f91d 	bl	8005716 <__retarget_lock_acquire_recursive>
 80054dc:	bd10      	pop	{r4, pc}
 80054de:	46c0      	nop			@ (mov r8, r8)
 80054e0:	200003c5 	.word	0x200003c5

080054e4 <__sfp_lock_release>:
 80054e4:	b510      	push	{r4, lr}
 80054e6:	4802      	ldr	r0, [pc, #8]	@ (80054f0 <__sfp_lock_release+0xc>)
 80054e8:	f000 f916 	bl	8005718 <__retarget_lock_release_recursive>
 80054ec:	bd10      	pop	{r4, pc}
 80054ee:	46c0      	nop			@ (mov r8, r8)
 80054f0:	200003c5 	.word	0x200003c5

080054f4 <__sinit>:
 80054f4:	b510      	push	{r4, lr}
 80054f6:	0004      	movs	r4, r0
 80054f8:	f7ff ffec 	bl	80054d4 <__sfp_lock_acquire>
 80054fc:	6a23      	ldr	r3, [r4, #32]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <__sinit+0x14>
 8005502:	f7ff ffef 	bl	80054e4 <__sfp_lock_release>
 8005506:	bd10      	pop	{r4, pc}
 8005508:	4b04      	ldr	r3, [pc, #16]	@ (800551c <__sinit+0x28>)
 800550a:	6223      	str	r3, [r4, #32]
 800550c:	4b04      	ldr	r3, [pc, #16]	@ (8005520 <__sinit+0x2c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1f6      	bne.n	8005502 <__sinit+0xe>
 8005514:	f7ff ffc0 	bl	8005498 <global_stdio_init.part.0>
 8005518:	e7f3      	b.n	8005502 <__sinit+0xe>
 800551a:	46c0      	nop			@ (mov r8, r8)
 800551c:	0800545d 	.word	0x0800545d
 8005520:	200003bc 	.word	0x200003bc

08005524 <_fwalk_sglue>:
 8005524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005526:	0014      	movs	r4, r2
 8005528:	2600      	movs	r6, #0
 800552a:	9000      	str	r0, [sp, #0]
 800552c:	9101      	str	r1, [sp, #4]
 800552e:	68a5      	ldr	r5, [r4, #8]
 8005530:	6867      	ldr	r7, [r4, #4]
 8005532:	3f01      	subs	r7, #1
 8005534:	d504      	bpl.n	8005540 <_fwalk_sglue+0x1c>
 8005536:	6824      	ldr	r4, [r4, #0]
 8005538:	2c00      	cmp	r4, #0
 800553a:	d1f8      	bne.n	800552e <_fwalk_sglue+0xa>
 800553c:	0030      	movs	r0, r6
 800553e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005540:	89ab      	ldrh	r3, [r5, #12]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d908      	bls.n	8005558 <_fwalk_sglue+0x34>
 8005546:	220e      	movs	r2, #14
 8005548:	5eab      	ldrsh	r3, [r5, r2]
 800554a:	3301      	adds	r3, #1
 800554c:	d004      	beq.n	8005558 <_fwalk_sglue+0x34>
 800554e:	0029      	movs	r1, r5
 8005550:	9800      	ldr	r0, [sp, #0]
 8005552:	9b01      	ldr	r3, [sp, #4]
 8005554:	4798      	blx	r3
 8005556:	4306      	orrs	r6, r0
 8005558:	3568      	adds	r5, #104	@ 0x68
 800555a:	e7ea      	b.n	8005532 <_fwalk_sglue+0xe>

0800555c <iprintf>:
 800555c:	b40f      	push	{r0, r1, r2, r3}
 800555e:	b507      	push	{r0, r1, r2, lr}
 8005560:	4905      	ldr	r1, [pc, #20]	@ (8005578 <iprintf+0x1c>)
 8005562:	ab04      	add	r3, sp, #16
 8005564:	6808      	ldr	r0, [r1, #0]
 8005566:	cb04      	ldmia	r3!, {r2}
 8005568:	6881      	ldr	r1, [r0, #8]
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	f000 f9fa 	bl	8005964 <_vfiprintf_r>
 8005570:	b003      	add	sp, #12
 8005572:	bc08      	pop	{r3}
 8005574:	b004      	add	sp, #16
 8005576:	4718      	bx	r3
 8005578:	20000058 	.word	0x20000058

0800557c <__sread>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	000c      	movs	r4, r1
 8005580:	250e      	movs	r5, #14
 8005582:	5f49      	ldrsh	r1, [r1, r5]
 8005584:	f000 f874 	bl	8005670 <_read_r>
 8005588:	2800      	cmp	r0, #0
 800558a:	db03      	blt.n	8005594 <__sread+0x18>
 800558c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800558e:	181b      	adds	r3, r3, r0
 8005590:	6563      	str	r3, [r4, #84]	@ 0x54
 8005592:	bd70      	pop	{r4, r5, r6, pc}
 8005594:	89a3      	ldrh	r3, [r4, #12]
 8005596:	4a02      	ldr	r2, [pc, #8]	@ (80055a0 <__sread+0x24>)
 8005598:	4013      	ands	r3, r2
 800559a:	81a3      	strh	r3, [r4, #12]
 800559c:	e7f9      	b.n	8005592 <__sread+0x16>
 800559e:	46c0      	nop			@ (mov r8, r8)
 80055a0:	ffffefff 	.word	0xffffefff

080055a4 <__swrite>:
 80055a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a6:	001f      	movs	r7, r3
 80055a8:	898b      	ldrh	r3, [r1, #12]
 80055aa:	0005      	movs	r5, r0
 80055ac:	000c      	movs	r4, r1
 80055ae:	0016      	movs	r6, r2
 80055b0:	05db      	lsls	r3, r3, #23
 80055b2:	d505      	bpl.n	80055c0 <__swrite+0x1c>
 80055b4:	230e      	movs	r3, #14
 80055b6:	5ec9      	ldrsh	r1, [r1, r3]
 80055b8:	2200      	movs	r2, #0
 80055ba:	2302      	movs	r3, #2
 80055bc:	f000 f844 	bl	8005648 <_lseek_r>
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	4a05      	ldr	r2, [pc, #20]	@ (80055d8 <__swrite+0x34>)
 80055c4:	0028      	movs	r0, r5
 80055c6:	4013      	ands	r3, r2
 80055c8:	81a3      	strh	r3, [r4, #12]
 80055ca:	0032      	movs	r2, r6
 80055cc:	230e      	movs	r3, #14
 80055ce:	5ee1      	ldrsh	r1, [r4, r3]
 80055d0:	003b      	movs	r3, r7
 80055d2:	f000 f861 	bl	8005698 <_write_r>
 80055d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055d8:	ffffefff 	.word	0xffffefff

080055dc <__sseek>:
 80055dc:	b570      	push	{r4, r5, r6, lr}
 80055de:	000c      	movs	r4, r1
 80055e0:	250e      	movs	r5, #14
 80055e2:	5f49      	ldrsh	r1, [r1, r5]
 80055e4:	f000 f830 	bl	8005648 <_lseek_r>
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	1c42      	adds	r2, r0, #1
 80055ec:	d103      	bne.n	80055f6 <__sseek+0x1a>
 80055ee:	4a05      	ldr	r2, [pc, #20]	@ (8005604 <__sseek+0x28>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	81a3      	strh	r3, [r4, #12]
 80055f4:	bd70      	pop	{r4, r5, r6, pc}
 80055f6:	2280      	movs	r2, #128	@ 0x80
 80055f8:	0152      	lsls	r2, r2, #5
 80055fa:	4313      	orrs	r3, r2
 80055fc:	81a3      	strh	r3, [r4, #12]
 80055fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8005600:	e7f8      	b.n	80055f4 <__sseek+0x18>
 8005602:	46c0      	nop			@ (mov r8, r8)
 8005604:	ffffefff 	.word	0xffffefff

08005608 <__sclose>:
 8005608:	b510      	push	{r4, lr}
 800560a:	230e      	movs	r3, #14
 800560c:	5ec9      	ldrsh	r1, [r1, r3]
 800560e:	f000 f809 	bl	8005624 <_close_r>
 8005612:	bd10      	pop	{r4, pc}

08005614 <memset>:
 8005614:	0003      	movs	r3, r0
 8005616:	1882      	adds	r2, r0, r2
 8005618:	4293      	cmp	r3, r2
 800561a:	d100      	bne.n	800561e <memset+0xa>
 800561c:	4770      	bx	lr
 800561e:	7019      	strb	r1, [r3, #0]
 8005620:	3301      	adds	r3, #1
 8005622:	e7f9      	b.n	8005618 <memset+0x4>

08005624 <_close_r>:
 8005624:	2300      	movs	r3, #0
 8005626:	b570      	push	{r4, r5, r6, lr}
 8005628:	4d06      	ldr	r5, [pc, #24]	@ (8005644 <_close_r+0x20>)
 800562a:	0004      	movs	r4, r0
 800562c:	0008      	movs	r0, r1
 800562e:	602b      	str	r3, [r5, #0]
 8005630:	f7fc f989 	bl	8001946 <_close>
 8005634:	1c43      	adds	r3, r0, #1
 8005636:	d103      	bne.n	8005640 <_close_r+0x1c>
 8005638:	682b      	ldr	r3, [r5, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d000      	beq.n	8005640 <_close_r+0x1c>
 800563e:	6023      	str	r3, [r4, #0]
 8005640:	bd70      	pop	{r4, r5, r6, pc}
 8005642:	46c0      	nop			@ (mov r8, r8)
 8005644:	200003c0 	.word	0x200003c0

08005648 <_lseek_r>:
 8005648:	b570      	push	{r4, r5, r6, lr}
 800564a:	0004      	movs	r4, r0
 800564c:	0008      	movs	r0, r1
 800564e:	0011      	movs	r1, r2
 8005650:	001a      	movs	r2, r3
 8005652:	2300      	movs	r3, #0
 8005654:	4d05      	ldr	r5, [pc, #20]	@ (800566c <_lseek_r+0x24>)
 8005656:	602b      	str	r3, [r5, #0]
 8005658:	f7fc f996 	bl	8001988 <_lseek>
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	d103      	bne.n	8005668 <_lseek_r+0x20>
 8005660:	682b      	ldr	r3, [r5, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d000      	beq.n	8005668 <_lseek_r+0x20>
 8005666:	6023      	str	r3, [r4, #0]
 8005668:	bd70      	pop	{r4, r5, r6, pc}
 800566a:	46c0      	nop			@ (mov r8, r8)
 800566c:	200003c0 	.word	0x200003c0

08005670 <_read_r>:
 8005670:	b570      	push	{r4, r5, r6, lr}
 8005672:	0004      	movs	r4, r0
 8005674:	0008      	movs	r0, r1
 8005676:	0011      	movs	r1, r2
 8005678:	001a      	movs	r2, r3
 800567a:	2300      	movs	r3, #0
 800567c:	4d05      	ldr	r5, [pc, #20]	@ (8005694 <_read_r+0x24>)
 800567e:	602b      	str	r3, [r5, #0]
 8005680:	f7fc f928 	bl	80018d4 <_read>
 8005684:	1c43      	adds	r3, r0, #1
 8005686:	d103      	bne.n	8005690 <_read_r+0x20>
 8005688:	682b      	ldr	r3, [r5, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d000      	beq.n	8005690 <_read_r+0x20>
 800568e:	6023      	str	r3, [r4, #0]
 8005690:	bd70      	pop	{r4, r5, r6, pc}
 8005692:	46c0      	nop			@ (mov r8, r8)
 8005694:	200003c0 	.word	0x200003c0

08005698 <_write_r>:
 8005698:	b570      	push	{r4, r5, r6, lr}
 800569a:	0004      	movs	r4, r0
 800569c:	0008      	movs	r0, r1
 800569e:	0011      	movs	r1, r2
 80056a0:	001a      	movs	r2, r3
 80056a2:	2300      	movs	r3, #0
 80056a4:	4d05      	ldr	r5, [pc, #20]	@ (80056bc <_write_r+0x24>)
 80056a6:	602b      	str	r3, [r5, #0]
 80056a8:	f7fc f931 	bl	800190e <_write>
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	d103      	bne.n	80056b8 <_write_r+0x20>
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d000      	beq.n	80056b8 <_write_r+0x20>
 80056b6:	6023      	str	r3, [r4, #0]
 80056b8:	bd70      	pop	{r4, r5, r6, pc}
 80056ba:	46c0      	nop			@ (mov r8, r8)
 80056bc:	200003c0 	.word	0x200003c0

080056c0 <__errno>:
 80056c0:	4b01      	ldr	r3, [pc, #4]	@ (80056c8 <__errno+0x8>)
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	4770      	bx	lr
 80056c6:	46c0      	nop			@ (mov r8, r8)
 80056c8:	20000058 	.word	0x20000058

080056cc <__libc_init_array>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	2600      	movs	r6, #0
 80056d0:	4c0c      	ldr	r4, [pc, #48]	@ (8005704 <__libc_init_array+0x38>)
 80056d2:	4d0d      	ldr	r5, [pc, #52]	@ (8005708 <__libc_init_array+0x3c>)
 80056d4:	1b64      	subs	r4, r4, r5
 80056d6:	10a4      	asrs	r4, r4, #2
 80056d8:	42a6      	cmp	r6, r4
 80056da:	d109      	bne.n	80056f0 <__libc_init_array+0x24>
 80056dc:	2600      	movs	r6, #0
 80056de:	f000 fddb 	bl	8006298 <_init>
 80056e2:	4c0a      	ldr	r4, [pc, #40]	@ (800570c <__libc_init_array+0x40>)
 80056e4:	4d0a      	ldr	r5, [pc, #40]	@ (8005710 <__libc_init_array+0x44>)
 80056e6:	1b64      	subs	r4, r4, r5
 80056e8:	10a4      	asrs	r4, r4, #2
 80056ea:	42a6      	cmp	r6, r4
 80056ec:	d105      	bne.n	80056fa <__libc_init_array+0x2e>
 80056ee:	bd70      	pop	{r4, r5, r6, pc}
 80056f0:	00b3      	lsls	r3, r6, #2
 80056f2:	58eb      	ldr	r3, [r5, r3]
 80056f4:	4798      	blx	r3
 80056f6:	3601      	adds	r6, #1
 80056f8:	e7ee      	b.n	80056d8 <__libc_init_array+0xc>
 80056fa:	00b3      	lsls	r3, r6, #2
 80056fc:	58eb      	ldr	r3, [r5, r3]
 80056fe:	4798      	blx	r3
 8005700:	3601      	adds	r6, #1
 8005702:	e7f2      	b.n	80056ea <__libc_init_array+0x1e>
 8005704:	0800671c 	.word	0x0800671c
 8005708:	0800671c 	.word	0x0800671c
 800570c:	08006720 	.word	0x08006720
 8005710:	0800671c 	.word	0x0800671c

08005714 <__retarget_lock_init_recursive>:
 8005714:	4770      	bx	lr

08005716 <__retarget_lock_acquire_recursive>:
 8005716:	4770      	bx	lr

08005718 <__retarget_lock_release_recursive>:
 8005718:	4770      	bx	lr
	...

0800571c <_free_r>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	0005      	movs	r5, r0
 8005720:	1e0c      	subs	r4, r1, #0
 8005722:	d010      	beq.n	8005746 <_free_r+0x2a>
 8005724:	3c04      	subs	r4, #4
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	da00      	bge.n	800572e <_free_r+0x12>
 800572c:	18e4      	adds	r4, r4, r3
 800572e:	0028      	movs	r0, r5
 8005730:	f000 f8e0 	bl	80058f4 <__malloc_lock>
 8005734:	4a1d      	ldr	r2, [pc, #116]	@ (80057ac <_free_r+0x90>)
 8005736:	6813      	ldr	r3, [r2, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d105      	bne.n	8005748 <_free_r+0x2c>
 800573c:	6063      	str	r3, [r4, #4]
 800573e:	6014      	str	r4, [r2, #0]
 8005740:	0028      	movs	r0, r5
 8005742:	f000 f8df 	bl	8005904 <__malloc_unlock>
 8005746:	bd70      	pop	{r4, r5, r6, pc}
 8005748:	42a3      	cmp	r3, r4
 800574a:	d908      	bls.n	800575e <_free_r+0x42>
 800574c:	6820      	ldr	r0, [r4, #0]
 800574e:	1821      	adds	r1, r4, r0
 8005750:	428b      	cmp	r3, r1
 8005752:	d1f3      	bne.n	800573c <_free_r+0x20>
 8005754:	6819      	ldr	r1, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	1809      	adds	r1, r1, r0
 800575a:	6021      	str	r1, [r4, #0]
 800575c:	e7ee      	b.n	800573c <_free_r+0x20>
 800575e:	001a      	movs	r2, r3
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <_free_r+0x4e>
 8005766:	42a3      	cmp	r3, r4
 8005768:	d9f9      	bls.n	800575e <_free_r+0x42>
 800576a:	6811      	ldr	r1, [r2, #0]
 800576c:	1850      	adds	r0, r2, r1
 800576e:	42a0      	cmp	r0, r4
 8005770:	d10b      	bne.n	800578a <_free_r+0x6e>
 8005772:	6820      	ldr	r0, [r4, #0]
 8005774:	1809      	adds	r1, r1, r0
 8005776:	1850      	adds	r0, r2, r1
 8005778:	6011      	str	r1, [r2, #0]
 800577a:	4283      	cmp	r3, r0
 800577c:	d1e0      	bne.n	8005740 <_free_r+0x24>
 800577e:	6818      	ldr	r0, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	1841      	adds	r1, r0, r1
 8005784:	6011      	str	r1, [r2, #0]
 8005786:	6053      	str	r3, [r2, #4]
 8005788:	e7da      	b.n	8005740 <_free_r+0x24>
 800578a:	42a0      	cmp	r0, r4
 800578c:	d902      	bls.n	8005794 <_free_r+0x78>
 800578e:	230c      	movs	r3, #12
 8005790:	602b      	str	r3, [r5, #0]
 8005792:	e7d5      	b.n	8005740 <_free_r+0x24>
 8005794:	6820      	ldr	r0, [r4, #0]
 8005796:	1821      	adds	r1, r4, r0
 8005798:	428b      	cmp	r3, r1
 800579a:	d103      	bne.n	80057a4 <_free_r+0x88>
 800579c:	6819      	ldr	r1, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	1809      	adds	r1, r1, r0
 80057a2:	6021      	str	r1, [r4, #0]
 80057a4:	6063      	str	r3, [r4, #4]
 80057a6:	6054      	str	r4, [r2, #4]
 80057a8:	e7ca      	b.n	8005740 <_free_r+0x24>
 80057aa:	46c0      	nop			@ (mov r8, r8)
 80057ac:	200003cc 	.word	0x200003cc

080057b0 <sbrk_aligned>:
 80057b0:	b570      	push	{r4, r5, r6, lr}
 80057b2:	4e0f      	ldr	r6, [pc, #60]	@ (80057f0 <sbrk_aligned+0x40>)
 80057b4:	000d      	movs	r5, r1
 80057b6:	6831      	ldr	r1, [r6, #0]
 80057b8:	0004      	movs	r4, r0
 80057ba:	2900      	cmp	r1, #0
 80057bc:	d102      	bne.n	80057c4 <sbrk_aligned+0x14>
 80057be:	f000 fcbd 	bl	800613c <_sbrk_r>
 80057c2:	6030      	str	r0, [r6, #0]
 80057c4:	0029      	movs	r1, r5
 80057c6:	0020      	movs	r0, r4
 80057c8:	f000 fcb8 	bl	800613c <_sbrk_r>
 80057cc:	1c43      	adds	r3, r0, #1
 80057ce:	d103      	bne.n	80057d8 <sbrk_aligned+0x28>
 80057d0:	2501      	movs	r5, #1
 80057d2:	426d      	negs	r5, r5
 80057d4:	0028      	movs	r0, r5
 80057d6:	bd70      	pop	{r4, r5, r6, pc}
 80057d8:	2303      	movs	r3, #3
 80057da:	1cc5      	adds	r5, r0, #3
 80057dc:	439d      	bics	r5, r3
 80057de:	42a8      	cmp	r0, r5
 80057e0:	d0f8      	beq.n	80057d4 <sbrk_aligned+0x24>
 80057e2:	1a29      	subs	r1, r5, r0
 80057e4:	0020      	movs	r0, r4
 80057e6:	f000 fca9 	bl	800613c <_sbrk_r>
 80057ea:	3001      	adds	r0, #1
 80057ec:	d1f2      	bne.n	80057d4 <sbrk_aligned+0x24>
 80057ee:	e7ef      	b.n	80057d0 <sbrk_aligned+0x20>
 80057f0:	200003c8 	.word	0x200003c8

080057f4 <_malloc_r>:
 80057f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057f6:	2203      	movs	r2, #3
 80057f8:	1ccb      	adds	r3, r1, #3
 80057fa:	4393      	bics	r3, r2
 80057fc:	3308      	adds	r3, #8
 80057fe:	0005      	movs	r5, r0
 8005800:	001f      	movs	r7, r3
 8005802:	2b0c      	cmp	r3, #12
 8005804:	d234      	bcs.n	8005870 <_malloc_r+0x7c>
 8005806:	270c      	movs	r7, #12
 8005808:	42b9      	cmp	r1, r7
 800580a:	d833      	bhi.n	8005874 <_malloc_r+0x80>
 800580c:	0028      	movs	r0, r5
 800580e:	f000 f871 	bl	80058f4 <__malloc_lock>
 8005812:	4e37      	ldr	r6, [pc, #220]	@ (80058f0 <_malloc_r+0xfc>)
 8005814:	6833      	ldr	r3, [r6, #0]
 8005816:	001c      	movs	r4, r3
 8005818:	2c00      	cmp	r4, #0
 800581a:	d12f      	bne.n	800587c <_malloc_r+0x88>
 800581c:	0039      	movs	r1, r7
 800581e:	0028      	movs	r0, r5
 8005820:	f7ff ffc6 	bl	80057b0 <sbrk_aligned>
 8005824:	0004      	movs	r4, r0
 8005826:	1c43      	adds	r3, r0, #1
 8005828:	d15f      	bne.n	80058ea <_malloc_r+0xf6>
 800582a:	6834      	ldr	r4, [r6, #0]
 800582c:	9400      	str	r4, [sp, #0]
 800582e:	9b00      	ldr	r3, [sp, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d14a      	bne.n	80058ca <_malloc_r+0xd6>
 8005834:	2c00      	cmp	r4, #0
 8005836:	d052      	beq.n	80058de <_malloc_r+0xea>
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	0028      	movs	r0, r5
 800583c:	18e3      	adds	r3, r4, r3
 800583e:	9900      	ldr	r1, [sp, #0]
 8005840:	9301      	str	r3, [sp, #4]
 8005842:	f000 fc7b 	bl	800613c <_sbrk_r>
 8005846:	9b01      	ldr	r3, [sp, #4]
 8005848:	4283      	cmp	r3, r0
 800584a:	d148      	bne.n	80058de <_malloc_r+0xea>
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	0028      	movs	r0, r5
 8005850:	1aff      	subs	r7, r7, r3
 8005852:	0039      	movs	r1, r7
 8005854:	f7ff ffac 	bl	80057b0 <sbrk_aligned>
 8005858:	3001      	adds	r0, #1
 800585a:	d040      	beq.n	80058de <_malloc_r+0xea>
 800585c:	6823      	ldr	r3, [r4, #0]
 800585e:	19db      	adds	r3, r3, r7
 8005860:	6023      	str	r3, [r4, #0]
 8005862:	6833      	ldr	r3, [r6, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	2a00      	cmp	r2, #0
 8005868:	d133      	bne.n	80058d2 <_malloc_r+0xde>
 800586a:	9b00      	ldr	r3, [sp, #0]
 800586c:	6033      	str	r3, [r6, #0]
 800586e:	e019      	b.n	80058a4 <_malloc_r+0xb0>
 8005870:	2b00      	cmp	r3, #0
 8005872:	dac9      	bge.n	8005808 <_malloc_r+0x14>
 8005874:	230c      	movs	r3, #12
 8005876:	602b      	str	r3, [r5, #0]
 8005878:	2000      	movs	r0, #0
 800587a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800587c:	6821      	ldr	r1, [r4, #0]
 800587e:	1bc9      	subs	r1, r1, r7
 8005880:	d420      	bmi.n	80058c4 <_malloc_r+0xd0>
 8005882:	290b      	cmp	r1, #11
 8005884:	d90a      	bls.n	800589c <_malloc_r+0xa8>
 8005886:	19e2      	adds	r2, r4, r7
 8005888:	6027      	str	r7, [r4, #0]
 800588a:	42a3      	cmp	r3, r4
 800588c:	d104      	bne.n	8005898 <_malloc_r+0xa4>
 800588e:	6032      	str	r2, [r6, #0]
 8005890:	6863      	ldr	r3, [r4, #4]
 8005892:	6011      	str	r1, [r2, #0]
 8005894:	6053      	str	r3, [r2, #4]
 8005896:	e005      	b.n	80058a4 <_malloc_r+0xb0>
 8005898:	605a      	str	r2, [r3, #4]
 800589a:	e7f9      	b.n	8005890 <_malloc_r+0x9c>
 800589c:	6862      	ldr	r2, [r4, #4]
 800589e:	42a3      	cmp	r3, r4
 80058a0:	d10e      	bne.n	80058c0 <_malloc_r+0xcc>
 80058a2:	6032      	str	r2, [r6, #0]
 80058a4:	0028      	movs	r0, r5
 80058a6:	f000 f82d 	bl	8005904 <__malloc_unlock>
 80058aa:	0020      	movs	r0, r4
 80058ac:	2207      	movs	r2, #7
 80058ae:	300b      	adds	r0, #11
 80058b0:	1d23      	adds	r3, r4, #4
 80058b2:	4390      	bics	r0, r2
 80058b4:	1ac2      	subs	r2, r0, r3
 80058b6:	4298      	cmp	r0, r3
 80058b8:	d0df      	beq.n	800587a <_malloc_r+0x86>
 80058ba:	1a1b      	subs	r3, r3, r0
 80058bc:	50a3      	str	r3, [r4, r2]
 80058be:	e7dc      	b.n	800587a <_malloc_r+0x86>
 80058c0:	605a      	str	r2, [r3, #4]
 80058c2:	e7ef      	b.n	80058a4 <_malloc_r+0xb0>
 80058c4:	0023      	movs	r3, r4
 80058c6:	6864      	ldr	r4, [r4, #4]
 80058c8:	e7a6      	b.n	8005818 <_malloc_r+0x24>
 80058ca:	9c00      	ldr	r4, [sp, #0]
 80058cc:	6863      	ldr	r3, [r4, #4]
 80058ce:	9300      	str	r3, [sp, #0]
 80058d0:	e7ad      	b.n	800582e <_malloc_r+0x3a>
 80058d2:	001a      	movs	r2, r3
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	42a3      	cmp	r3, r4
 80058d8:	d1fb      	bne.n	80058d2 <_malloc_r+0xde>
 80058da:	2300      	movs	r3, #0
 80058dc:	e7da      	b.n	8005894 <_malloc_r+0xa0>
 80058de:	230c      	movs	r3, #12
 80058e0:	0028      	movs	r0, r5
 80058e2:	602b      	str	r3, [r5, #0]
 80058e4:	f000 f80e 	bl	8005904 <__malloc_unlock>
 80058e8:	e7c6      	b.n	8005878 <_malloc_r+0x84>
 80058ea:	6007      	str	r7, [r0, #0]
 80058ec:	e7da      	b.n	80058a4 <_malloc_r+0xb0>
 80058ee:	46c0      	nop			@ (mov r8, r8)
 80058f0:	200003cc 	.word	0x200003cc

080058f4 <__malloc_lock>:
 80058f4:	b510      	push	{r4, lr}
 80058f6:	4802      	ldr	r0, [pc, #8]	@ (8005900 <__malloc_lock+0xc>)
 80058f8:	f7ff ff0d 	bl	8005716 <__retarget_lock_acquire_recursive>
 80058fc:	bd10      	pop	{r4, pc}
 80058fe:	46c0      	nop			@ (mov r8, r8)
 8005900:	200003c4 	.word	0x200003c4

08005904 <__malloc_unlock>:
 8005904:	b510      	push	{r4, lr}
 8005906:	4802      	ldr	r0, [pc, #8]	@ (8005910 <__malloc_unlock+0xc>)
 8005908:	f7ff ff06 	bl	8005718 <__retarget_lock_release_recursive>
 800590c:	bd10      	pop	{r4, pc}
 800590e:	46c0      	nop			@ (mov r8, r8)
 8005910:	200003c4 	.word	0x200003c4

08005914 <__sfputc_r>:
 8005914:	6893      	ldr	r3, [r2, #8]
 8005916:	b510      	push	{r4, lr}
 8005918:	3b01      	subs	r3, #1
 800591a:	6093      	str	r3, [r2, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	da04      	bge.n	800592a <__sfputc_r+0x16>
 8005920:	6994      	ldr	r4, [r2, #24]
 8005922:	42a3      	cmp	r3, r4
 8005924:	db07      	blt.n	8005936 <__sfputc_r+0x22>
 8005926:	290a      	cmp	r1, #10
 8005928:	d005      	beq.n	8005936 <__sfputc_r+0x22>
 800592a:	6813      	ldr	r3, [r2, #0]
 800592c:	1c58      	adds	r0, r3, #1
 800592e:	6010      	str	r0, [r2, #0]
 8005930:	7019      	strb	r1, [r3, #0]
 8005932:	0008      	movs	r0, r1
 8005934:	bd10      	pop	{r4, pc}
 8005936:	f000 fb60 	bl	8005ffa <__swbuf_r>
 800593a:	0001      	movs	r1, r0
 800593c:	e7f9      	b.n	8005932 <__sfputc_r+0x1e>

0800593e <__sfputs_r>:
 800593e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005940:	0006      	movs	r6, r0
 8005942:	000f      	movs	r7, r1
 8005944:	0014      	movs	r4, r2
 8005946:	18d5      	adds	r5, r2, r3
 8005948:	42ac      	cmp	r4, r5
 800594a:	d101      	bne.n	8005950 <__sfputs_r+0x12>
 800594c:	2000      	movs	r0, #0
 800594e:	e007      	b.n	8005960 <__sfputs_r+0x22>
 8005950:	7821      	ldrb	r1, [r4, #0]
 8005952:	003a      	movs	r2, r7
 8005954:	0030      	movs	r0, r6
 8005956:	f7ff ffdd 	bl	8005914 <__sfputc_r>
 800595a:	3401      	adds	r4, #1
 800595c:	1c43      	adds	r3, r0, #1
 800595e:	d1f3      	bne.n	8005948 <__sfputs_r+0xa>
 8005960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005964 <_vfiprintf_r>:
 8005964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005966:	b0a1      	sub	sp, #132	@ 0x84
 8005968:	000f      	movs	r7, r1
 800596a:	0015      	movs	r5, r2
 800596c:	001e      	movs	r6, r3
 800596e:	9003      	str	r0, [sp, #12]
 8005970:	2800      	cmp	r0, #0
 8005972:	d004      	beq.n	800597e <_vfiprintf_r+0x1a>
 8005974:	6a03      	ldr	r3, [r0, #32]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <_vfiprintf_r+0x1a>
 800597a:	f7ff fdbb 	bl	80054f4 <__sinit>
 800597e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005980:	07db      	lsls	r3, r3, #31
 8005982:	d405      	bmi.n	8005990 <_vfiprintf_r+0x2c>
 8005984:	89bb      	ldrh	r3, [r7, #12]
 8005986:	059b      	lsls	r3, r3, #22
 8005988:	d402      	bmi.n	8005990 <_vfiprintf_r+0x2c>
 800598a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800598c:	f7ff fec3 	bl	8005716 <__retarget_lock_acquire_recursive>
 8005990:	89bb      	ldrh	r3, [r7, #12]
 8005992:	071b      	lsls	r3, r3, #28
 8005994:	d502      	bpl.n	800599c <_vfiprintf_r+0x38>
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d113      	bne.n	80059c4 <_vfiprintf_r+0x60>
 800599c:	0039      	movs	r1, r7
 800599e:	9803      	ldr	r0, [sp, #12]
 80059a0:	f000 fb6e 	bl	8006080 <__swsetup_r>
 80059a4:	2800      	cmp	r0, #0
 80059a6:	d00d      	beq.n	80059c4 <_vfiprintf_r+0x60>
 80059a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059aa:	07db      	lsls	r3, r3, #31
 80059ac:	d503      	bpl.n	80059b6 <_vfiprintf_r+0x52>
 80059ae:	2001      	movs	r0, #1
 80059b0:	4240      	negs	r0, r0
 80059b2:	b021      	add	sp, #132	@ 0x84
 80059b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b6:	89bb      	ldrh	r3, [r7, #12]
 80059b8:	059b      	lsls	r3, r3, #22
 80059ba:	d4f8      	bmi.n	80059ae <_vfiprintf_r+0x4a>
 80059bc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80059be:	f7ff feab 	bl	8005718 <__retarget_lock_release_recursive>
 80059c2:	e7f4      	b.n	80059ae <_vfiprintf_r+0x4a>
 80059c4:	2300      	movs	r3, #0
 80059c6:	ac08      	add	r4, sp, #32
 80059c8:	6163      	str	r3, [r4, #20]
 80059ca:	3320      	adds	r3, #32
 80059cc:	7663      	strb	r3, [r4, #25]
 80059ce:	3310      	adds	r3, #16
 80059d0:	76a3      	strb	r3, [r4, #26]
 80059d2:	9607      	str	r6, [sp, #28]
 80059d4:	002e      	movs	r6, r5
 80059d6:	7833      	ldrb	r3, [r6, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <_vfiprintf_r+0x7c>
 80059dc:	2b25      	cmp	r3, #37	@ 0x25
 80059de:	d148      	bne.n	8005a72 <_vfiprintf_r+0x10e>
 80059e0:	1b73      	subs	r3, r6, r5
 80059e2:	9305      	str	r3, [sp, #20]
 80059e4:	42ae      	cmp	r6, r5
 80059e6:	d00b      	beq.n	8005a00 <_vfiprintf_r+0x9c>
 80059e8:	002a      	movs	r2, r5
 80059ea:	0039      	movs	r1, r7
 80059ec:	9803      	ldr	r0, [sp, #12]
 80059ee:	f7ff ffa6 	bl	800593e <__sfputs_r>
 80059f2:	3001      	adds	r0, #1
 80059f4:	d100      	bne.n	80059f8 <_vfiprintf_r+0x94>
 80059f6:	e0ae      	b.n	8005b56 <_vfiprintf_r+0x1f2>
 80059f8:	6963      	ldr	r3, [r4, #20]
 80059fa:	9a05      	ldr	r2, [sp, #20]
 80059fc:	189b      	adds	r3, r3, r2
 80059fe:	6163      	str	r3, [r4, #20]
 8005a00:	7833      	ldrb	r3, [r6, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d100      	bne.n	8005a08 <_vfiprintf_r+0xa4>
 8005a06:	e0a6      	b.n	8005b56 <_vfiprintf_r+0x1f2>
 8005a08:	2201      	movs	r2, #1
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	4252      	negs	r2, r2
 8005a0e:	6062      	str	r2, [r4, #4]
 8005a10:	a904      	add	r1, sp, #16
 8005a12:	3254      	adds	r2, #84	@ 0x54
 8005a14:	1852      	adds	r2, r2, r1
 8005a16:	1c75      	adds	r5, r6, #1
 8005a18:	6023      	str	r3, [r4, #0]
 8005a1a:	60e3      	str	r3, [r4, #12]
 8005a1c:	60a3      	str	r3, [r4, #8]
 8005a1e:	7013      	strb	r3, [r2, #0]
 8005a20:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005a22:	4b59      	ldr	r3, [pc, #356]	@ (8005b88 <_vfiprintf_r+0x224>)
 8005a24:	2205      	movs	r2, #5
 8005a26:	0018      	movs	r0, r3
 8005a28:	7829      	ldrb	r1, [r5, #0]
 8005a2a:	9305      	str	r3, [sp, #20]
 8005a2c:	f000 fb98 	bl	8006160 <memchr>
 8005a30:	1c6e      	adds	r6, r5, #1
 8005a32:	2800      	cmp	r0, #0
 8005a34:	d11f      	bne.n	8005a76 <_vfiprintf_r+0x112>
 8005a36:	6822      	ldr	r2, [r4, #0]
 8005a38:	06d3      	lsls	r3, r2, #27
 8005a3a:	d504      	bpl.n	8005a46 <_vfiprintf_r+0xe2>
 8005a3c:	2353      	movs	r3, #83	@ 0x53
 8005a3e:	a904      	add	r1, sp, #16
 8005a40:	185b      	adds	r3, r3, r1
 8005a42:	2120      	movs	r1, #32
 8005a44:	7019      	strb	r1, [r3, #0]
 8005a46:	0713      	lsls	r3, r2, #28
 8005a48:	d504      	bpl.n	8005a54 <_vfiprintf_r+0xf0>
 8005a4a:	2353      	movs	r3, #83	@ 0x53
 8005a4c:	a904      	add	r1, sp, #16
 8005a4e:	185b      	adds	r3, r3, r1
 8005a50:	212b      	movs	r1, #43	@ 0x2b
 8005a52:	7019      	strb	r1, [r3, #0]
 8005a54:	782b      	ldrb	r3, [r5, #0]
 8005a56:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a58:	d016      	beq.n	8005a88 <_vfiprintf_r+0x124>
 8005a5a:	002e      	movs	r6, r5
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	200a      	movs	r0, #10
 8005a60:	68e3      	ldr	r3, [r4, #12]
 8005a62:	7832      	ldrb	r2, [r6, #0]
 8005a64:	1c75      	adds	r5, r6, #1
 8005a66:	3a30      	subs	r2, #48	@ 0x30
 8005a68:	2a09      	cmp	r2, #9
 8005a6a:	d950      	bls.n	8005b0e <_vfiprintf_r+0x1aa>
 8005a6c:	2900      	cmp	r1, #0
 8005a6e:	d111      	bne.n	8005a94 <_vfiprintf_r+0x130>
 8005a70:	e017      	b.n	8005aa2 <_vfiprintf_r+0x13e>
 8005a72:	3601      	adds	r6, #1
 8005a74:	e7af      	b.n	80059d6 <_vfiprintf_r+0x72>
 8005a76:	9b05      	ldr	r3, [sp, #20]
 8005a78:	6822      	ldr	r2, [r4, #0]
 8005a7a:	1ac0      	subs	r0, r0, r3
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	4083      	lsls	r3, r0
 8005a80:	4313      	orrs	r3, r2
 8005a82:	0035      	movs	r5, r6
 8005a84:	6023      	str	r3, [r4, #0]
 8005a86:	e7cc      	b.n	8005a22 <_vfiprintf_r+0xbe>
 8005a88:	9b07      	ldr	r3, [sp, #28]
 8005a8a:	1d19      	adds	r1, r3, #4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	9107      	str	r1, [sp, #28]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	db01      	blt.n	8005a98 <_vfiprintf_r+0x134>
 8005a94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a96:	e004      	b.n	8005aa2 <_vfiprintf_r+0x13e>
 8005a98:	425b      	negs	r3, r3
 8005a9a:	60e3      	str	r3, [r4, #12]
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	7833      	ldrb	r3, [r6, #0]
 8005aa4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005aa6:	d10c      	bne.n	8005ac2 <_vfiprintf_r+0x15e>
 8005aa8:	7873      	ldrb	r3, [r6, #1]
 8005aaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aac:	d134      	bne.n	8005b18 <_vfiprintf_r+0x1b4>
 8005aae:	9b07      	ldr	r3, [sp, #28]
 8005ab0:	3602      	adds	r6, #2
 8005ab2:	1d1a      	adds	r2, r3, #4
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	9207      	str	r2, [sp, #28]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	da01      	bge.n	8005ac0 <_vfiprintf_r+0x15c>
 8005abc:	2301      	movs	r3, #1
 8005abe:	425b      	negs	r3, r3
 8005ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ac2:	4d32      	ldr	r5, [pc, #200]	@ (8005b8c <_vfiprintf_r+0x228>)
 8005ac4:	2203      	movs	r2, #3
 8005ac6:	0028      	movs	r0, r5
 8005ac8:	7831      	ldrb	r1, [r6, #0]
 8005aca:	f000 fb49 	bl	8006160 <memchr>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d006      	beq.n	8005ae0 <_vfiprintf_r+0x17c>
 8005ad2:	2340      	movs	r3, #64	@ 0x40
 8005ad4:	1b40      	subs	r0, r0, r5
 8005ad6:	4083      	lsls	r3, r0
 8005ad8:	6822      	ldr	r2, [r4, #0]
 8005ada:	3601      	adds	r6, #1
 8005adc:	4313      	orrs	r3, r2
 8005ade:	6023      	str	r3, [r4, #0]
 8005ae0:	7831      	ldrb	r1, [r6, #0]
 8005ae2:	2206      	movs	r2, #6
 8005ae4:	482a      	ldr	r0, [pc, #168]	@ (8005b90 <_vfiprintf_r+0x22c>)
 8005ae6:	1c75      	adds	r5, r6, #1
 8005ae8:	7621      	strb	r1, [r4, #24]
 8005aea:	f000 fb39 	bl	8006160 <memchr>
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d040      	beq.n	8005b74 <_vfiprintf_r+0x210>
 8005af2:	4b28      	ldr	r3, [pc, #160]	@ (8005b94 <_vfiprintf_r+0x230>)
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d122      	bne.n	8005b3e <_vfiprintf_r+0x1da>
 8005af8:	2207      	movs	r2, #7
 8005afa:	9b07      	ldr	r3, [sp, #28]
 8005afc:	3307      	adds	r3, #7
 8005afe:	4393      	bics	r3, r2
 8005b00:	3308      	adds	r3, #8
 8005b02:	9307      	str	r3, [sp, #28]
 8005b04:	6963      	ldr	r3, [r4, #20]
 8005b06:	9a04      	ldr	r2, [sp, #16]
 8005b08:	189b      	adds	r3, r3, r2
 8005b0a:	6163      	str	r3, [r4, #20]
 8005b0c:	e762      	b.n	80059d4 <_vfiprintf_r+0x70>
 8005b0e:	4343      	muls	r3, r0
 8005b10:	002e      	movs	r6, r5
 8005b12:	2101      	movs	r1, #1
 8005b14:	189b      	adds	r3, r3, r2
 8005b16:	e7a4      	b.n	8005a62 <_vfiprintf_r+0xfe>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	200a      	movs	r0, #10
 8005b1c:	0019      	movs	r1, r3
 8005b1e:	3601      	adds	r6, #1
 8005b20:	6063      	str	r3, [r4, #4]
 8005b22:	7832      	ldrb	r2, [r6, #0]
 8005b24:	1c75      	adds	r5, r6, #1
 8005b26:	3a30      	subs	r2, #48	@ 0x30
 8005b28:	2a09      	cmp	r2, #9
 8005b2a:	d903      	bls.n	8005b34 <_vfiprintf_r+0x1d0>
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0c8      	beq.n	8005ac2 <_vfiprintf_r+0x15e>
 8005b30:	9109      	str	r1, [sp, #36]	@ 0x24
 8005b32:	e7c6      	b.n	8005ac2 <_vfiprintf_r+0x15e>
 8005b34:	4341      	muls	r1, r0
 8005b36:	002e      	movs	r6, r5
 8005b38:	2301      	movs	r3, #1
 8005b3a:	1889      	adds	r1, r1, r2
 8005b3c:	e7f1      	b.n	8005b22 <_vfiprintf_r+0x1be>
 8005b3e:	aa07      	add	r2, sp, #28
 8005b40:	9200      	str	r2, [sp, #0]
 8005b42:	0021      	movs	r1, r4
 8005b44:	003a      	movs	r2, r7
 8005b46:	4b14      	ldr	r3, [pc, #80]	@ (8005b98 <_vfiprintf_r+0x234>)
 8005b48:	9803      	ldr	r0, [sp, #12]
 8005b4a:	e000      	b.n	8005b4e <_vfiprintf_r+0x1ea>
 8005b4c:	bf00      	nop
 8005b4e:	9004      	str	r0, [sp, #16]
 8005b50:	9b04      	ldr	r3, [sp, #16]
 8005b52:	3301      	adds	r3, #1
 8005b54:	d1d6      	bne.n	8005b04 <_vfiprintf_r+0x1a0>
 8005b56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b58:	07db      	lsls	r3, r3, #31
 8005b5a:	d405      	bmi.n	8005b68 <_vfiprintf_r+0x204>
 8005b5c:	89bb      	ldrh	r3, [r7, #12]
 8005b5e:	059b      	lsls	r3, r3, #22
 8005b60:	d402      	bmi.n	8005b68 <_vfiprintf_r+0x204>
 8005b62:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005b64:	f7ff fdd8 	bl	8005718 <__retarget_lock_release_recursive>
 8005b68:	89bb      	ldrh	r3, [r7, #12]
 8005b6a:	065b      	lsls	r3, r3, #25
 8005b6c:	d500      	bpl.n	8005b70 <_vfiprintf_r+0x20c>
 8005b6e:	e71e      	b.n	80059ae <_vfiprintf_r+0x4a>
 8005b70:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005b72:	e71e      	b.n	80059b2 <_vfiprintf_r+0x4e>
 8005b74:	aa07      	add	r2, sp, #28
 8005b76:	9200      	str	r2, [sp, #0]
 8005b78:	0021      	movs	r1, r4
 8005b7a:	003a      	movs	r2, r7
 8005b7c:	4b06      	ldr	r3, [pc, #24]	@ (8005b98 <_vfiprintf_r+0x234>)
 8005b7e:	9803      	ldr	r0, [sp, #12]
 8005b80:	f000 f87c 	bl	8005c7c <_printf_i>
 8005b84:	e7e3      	b.n	8005b4e <_vfiprintf_r+0x1ea>
 8005b86:	46c0      	nop			@ (mov r8, r8)
 8005b88:	080066e8 	.word	0x080066e8
 8005b8c:	080066ee 	.word	0x080066ee
 8005b90:	080066f2 	.word	0x080066f2
 8005b94:	00000000 	.word	0x00000000
 8005b98:	0800593f 	.word	0x0800593f

08005b9c <_printf_common>:
 8005b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b9e:	0016      	movs	r6, r2
 8005ba0:	9301      	str	r3, [sp, #4]
 8005ba2:	688a      	ldr	r2, [r1, #8]
 8005ba4:	690b      	ldr	r3, [r1, #16]
 8005ba6:	000c      	movs	r4, r1
 8005ba8:	9000      	str	r0, [sp, #0]
 8005baa:	4293      	cmp	r3, r2
 8005bac:	da00      	bge.n	8005bb0 <_printf_common+0x14>
 8005bae:	0013      	movs	r3, r2
 8005bb0:	0022      	movs	r2, r4
 8005bb2:	6033      	str	r3, [r6, #0]
 8005bb4:	3243      	adds	r2, #67	@ 0x43
 8005bb6:	7812      	ldrb	r2, [r2, #0]
 8005bb8:	2a00      	cmp	r2, #0
 8005bba:	d001      	beq.n	8005bc0 <_printf_common+0x24>
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	6033      	str	r3, [r6, #0]
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	069b      	lsls	r3, r3, #26
 8005bc4:	d502      	bpl.n	8005bcc <_printf_common+0x30>
 8005bc6:	6833      	ldr	r3, [r6, #0]
 8005bc8:	3302      	adds	r3, #2
 8005bca:	6033      	str	r3, [r6, #0]
 8005bcc:	6822      	ldr	r2, [r4, #0]
 8005bce:	2306      	movs	r3, #6
 8005bd0:	0015      	movs	r5, r2
 8005bd2:	401d      	ands	r5, r3
 8005bd4:	421a      	tst	r2, r3
 8005bd6:	d027      	beq.n	8005c28 <_printf_common+0x8c>
 8005bd8:	0023      	movs	r3, r4
 8005bda:	3343      	adds	r3, #67	@ 0x43
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	1e5a      	subs	r2, r3, #1
 8005be0:	4193      	sbcs	r3, r2
 8005be2:	6822      	ldr	r2, [r4, #0]
 8005be4:	0692      	lsls	r2, r2, #26
 8005be6:	d430      	bmi.n	8005c4a <_printf_common+0xae>
 8005be8:	0022      	movs	r2, r4
 8005bea:	9901      	ldr	r1, [sp, #4]
 8005bec:	9800      	ldr	r0, [sp, #0]
 8005bee:	9d08      	ldr	r5, [sp, #32]
 8005bf0:	3243      	adds	r2, #67	@ 0x43
 8005bf2:	47a8      	blx	r5
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d025      	beq.n	8005c44 <_printf_common+0xa8>
 8005bf8:	2206      	movs	r2, #6
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	2500      	movs	r5, #0
 8005bfe:	4013      	ands	r3, r2
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d105      	bne.n	8005c10 <_printf_common+0x74>
 8005c04:	6833      	ldr	r3, [r6, #0]
 8005c06:	68e5      	ldr	r5, [r4, #12]
 8005c08:	1aed      	subs	r5, r5, r3
 8005c0a:	43eb      	mvns	r3, r5
 8005c0c:	17db      	asrs	r3, r3, #31
 8005c0e:	401d      	ands	r5, r3
 8005c10:	68a3      	ldr	r3, [r4, #8]
 8005c12:	6922      	ldr	r2, [r4, #16]
 8005c14:	4293      	cmp	r3, r2
 8005c16:	dd01      	ble.n	8005c1c <_printf_common+0x80>
 8005c18:	1a9b      	subs	r3, r3, r2
 8005c1a:	18ed      	adds	r5, r5, r3
 8005c1c:	2600      	movs	r6, #0
 8005c1e:	42b5      	cmp	r5, r6
 8005c20:	d120      	bne.n	8005c64 <_printf_common+0xc8>
 8005c22:	2000      	movs	r0, #0
 8005c24:	e010      	b.n	8005c48 <_printf_common+0xac>
 8005c26:	3501      	adds	r5, #1
 8005c28:	68e3      	ldr	r3, [r4, #12]
 8005c2a:	6832      	ldr	r2, [r6, #0]
 8005c2c:	1a9b      	subs	r3, r3, r2
 8005c2e:	42ab      	cmp	r3, r5
 8005c30:	ddd2      	ble.n	8005bd8 <_printf_common+0x3c>
 8005c32:	0022      	movs	r2, r4
 8005c34:	2301      	movs	r3, #1
 8005c36:	9901      	ldr	r1, [sp, #4]
 8005c38:	9800      	ldr	r0, [sp, #0]
 8005c3a:	9f08      	ldr	r7, [sp, #32]
 8005c3c:	3219      	adds	r2, #25
 8005c3e:	47b8      	blx	r7
 8005c40:	3001      	adds	r0, #1
 8005c42:	d1f0      	bne.n	8005c26 <_printf_common+0x8a>
 8005c44:	2001      	movs	r0, #1
 8005c46:	4240      	negs	r0, r0
 8005c48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c4a:	2030      	movs	r0, #48	@ 0x30
 8005c4c:	18e1      	adds	r1, r4, r3
 8005c4e:	3143      	adds	r1, #67	@ 0x43
 8005c50:	7008      	strb	r0, [r1, #0]
 8005c52:	0021      	movs	r1, r4
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	3145      	adds	r1, #69	@ 0x45
 8005c58:	7809      	ldrb	r1, [r1, #0]
 8005c5a:	18a2      	adds	r2, r4, r2
 8005c5c:	3243      	adds	r2, #67	@ 0x43
 8005c5e:	3302      	adds	r3, #2
 8005c60:	7011      	strb	r1, [r2, #0]
 8005c62:	e7c1      	b.n	8005be8 <_printf_common+0x4c>
 8005c64:	0022      	movs	r2, r4
 8005c66:	2301      	movs	r3, #1
 8005c68:	9901      	ldr	r1, [sp, #4]
 8005c6a:	9800      	ldr	r0, [sp, #0]
 8005c6c:	9f08      	ldr	r7, [sp, #32]
 8005c6e:	321a      	adds	r2, #26
 8005c70:	47b8      	blx	r7
 8005c72:	3001      	adds	r0, #1
 8005c74:	d0e6      	beq.n	8005c44 <_printf_common+0xa8>
 8005c76:	3601      	adds	r6, #1
 8005c78:	e7d1      	b.n	8005c1e <_printf_common+0x82>
	...

08005c7c <_printf_i>:
 8005c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c7e:	b08b      	sub	sp, #44	@ 0x2c
 8005c80:	9206      	str	r2, [sp, #24]
 8005c82:	000a      	movs	r2, r1
 8005c84:	3243      	adds	r2, #67	@ 0x43
 8005c86:	9307      	str	r3, [sp, #28]
 8005c88:	9005      	str	r0, [sp, #20]
 8005c8a:	9203      	str	r2, [sp, #12]
 8005c8c:	7e0a      	ldrb	r2, [r1, #24]
 8005c8e:	000c      	movs	r4, r1
 8005c90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c92:	2a78      	cmp	r2, #120	@ 0x78
 8005c94:	d809      	bhi.n	8005caa <_printf_i+0x2e>
 8005c96:	2a62      	cmp	r2, #98	@ 0x62
 8005c98:	d80b      	bhi.n	8005cb2 <_printf_i+0x36>
 8005c9a:	2a00      	cmp	r2, #0
 8005c9c:	d100      	bne.n	8005ca0 <_printf_i+0x24>
 8005c9e:	e0bc      	b.n	8005e1a <_printf_i+0x19e>
 8005ca0:	497b      	ldr	r1, [pc, #492]	@ (8005e90 <_printf_i+0x214>)
 8005ca2:	9104      	str	r1, [sp, #16]
 8005ca4:	2a58      	cmp	r2, #88	@ 0x58
 8005ca6:	d100      	bne.n	8005caa <_printf_i+0x2e>
 8005ca8:	e090      	b.n	8005dcc <_printf_i+0x150>
 8005caa:	0025      	movs	r5, r4
 8005cac:	3542      	adds	r5, #66	@ 0x42
 8005cae:	702a      	strb	r2, [r5, #0]
 8005cb0:	e022      	b.n	8005cf8 <_printf_i+0x7c>
 8005cb2:	0010      	movs	r0, r2
 8005cb4:	3863      	subs	r0, #99	@ 0x63
 8005cb6:	2815      	cmp	r0, #21
 8005cb8:	d8f7      	bhi.n	8005caa <_printf_i+0x2e>
 8005cba:	f7fa fa23 	bl	8000104 <__gnu_thumb1_case_shi>
 8005cbe:	0016      	.short	0x0016
 8005cc0:	fff6001f 	.word	0xfff6001f
 8005cc4:	fff6fff6 	.word	0xfff6fff6
 8005cc8:	001ffff6 	.word	0x001ffff6
 8005ccc:	fff6fff6 	.word	0xfff6fff6
 8005cd0:	fff6fff6 	.word	0xfff6fff6
 8005cd4:	003600a1 	.word	0x003600a1
 8005cd8:	fff60080 	.word	0xfff60080
 8005cdc:	00b2fff6 	.word	0x00b2fff6
 8005ce0:	0036fff6 	.word	0x0036fff6
 8005ce4:	fff6fff6 	.word	0xfff6fff6
 8005ce8:	0084      	.short	0x0084
 8005cea:	0025      	movs	r5, r4
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	3542      	adds	r5, #66	@ 0x42
 8005cf0:	1d11      	adds	r1, r2, #4
 8005cf2:	6019      	str	r1, [r3, #0]
 8005cf4:	6813      	ldr	r3, [r2, #0]
 8005cf6:	702b      	strb	r3, [r5, #0]
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e0a0      	b.n	8005e3e <_printf_i+0x1c2>
 8005cfc:	6818      	ldr	r0, [r3, #0]
 8005cfe:	6809      	ldr	r1, [r1, #0]
 8005d00:	1d02      	adds	r2, r0, #4
 8005d02:	060d      	lsls	r5, r1, #24
 8005d04:	d50b      	bpl.n	8005d1e <_printf_i+0xa2>
 8005d06:	6806      	ldr	r6, [r0, #0]
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	2e00      	cmp	r6, #0
 8005d0c:	da03      	bge.n	8005d16 <_printf_i+0x9a>
 8005d0e:	232d      	movs	r3, #45	@ 0x2d
 8005d10:	9a03      	ldr	r2, [sp, #12]
 8005d12:	4276      	negs	r6, r6
 8005d14:	7013      	strb	r3, [r2, #0]
 8005d16:	4b5e      	ldr	r3, [pc, #376]	@ (8005e90 <_printf_i+0x214>)
 8005d18:	270a      	movs	r7, #10
 8005d1a:	9304      	str	r3, [sp, #16]
 8005d1c:	e018      	b.n	8005d50 <_printf_i+0xd4>
 8005d1e:	6806      	ldr	r6, [r0, #0]
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	0649      	lsls	r1, r1, #25
 8005d24:	d5f1      	bpl.n	8005d0a <_printf_i+0x8e>
 8005d26:	b236      	sxth	r6, r6
 8005d28:	e7ef      	b.n	8005d0a <_printf_i+0x8e>
 8005d2a:	6808      	ldr	r0, [r1, #0]
 8005d2c:	6819      	ldr	r1, [r3, #0]
 8005d2e:	c940      	ldmia	r1!, {r6}
 8005d30:	0605      	lsls	r5, r0, #24
 8005d32:	d402      	bmi.n	8005d3a <_printf_i+0xbe>
 8005d34:	0640      	lsls	r0, r0, #25
 8005d36:	d500      	bpl.n	8005d3a <_printf_i+0xbe>
 8005d38:	b2b6      	uxth	r6, r6
 8005d3a:	6019      	str	r1, [r3, #0]
 8005d3c:	4b54      	ldr	r3, [pc, #336]	@ (8005e90 <_printf_i+0x214>)
 8005d3e:	270a      	movs	r7, #10
 8005d40:	9304      	str	r3, [sp, #16]
 8005d42:	2a6f      	cmp	r2, #111	@ 0x6f
 8005d44:	d100      	bne.n	8005d48 <_printf_i+0xcc>
 8005d46:	3f02      	subs	r7, #2
 8005d48:	0023      	movs	r3, r4
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	3343      	adds	r3, #67	@ 0x43
 8005d4e:	701a      	strb	r2, [r3, #0]
 8005d50:	6863      	ldr	r3, [r4, #4]
 8005d52:	60a3      	str	r3, [r4, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	db03      	blt.n	8005d60 <_printf_i+0xe4>
 8005d58:	2104      	movs	r1, #4
 8005d5a:	6822      	ldr	r2, [r4, #0]
 8005d5c:	438a      	bics	r2, r1
 8005d5e:	6022      	str	r2, [r4, #0]
 8005d60:	2e00      	cmp	r6, #0
 8005d62:	d102      	bne.n	8005d6a <_printf_i+0xee>
 8005d64:	9d03      	ldr	r5, [sp, #12]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00c      	beq.n	8005d84 <_printf_i+0x108>
 8005d6a:	9d03      	ldr	r5, [sp, #12]
 8005d6c:	0030      	movs	r0, r6
 8005d6e:	0039      	movs	r1, r7
 8005d70:	f7fa fa58 	bl	8000224 <__aeabi_uidivmod>
 8005d74:	9b04      	ldr	r3, [sp, #16]
 8005d76:	3d01      	subs	r5, #1
 8005d78:	5c5b      	ldrb	r3, [r3, r1]
 8005d7a:	702b      	strb	r3, [r5, #0]
 8005d7c:	0033      	movs	r3, r6
 8005d7e:	0006      	movs	r6, r0
 8005d80:	429f      	cmp	r7, r3
 8005d82:	d9f3      	bls.n	8005d6c <_printf_i+0xf0>
 8005d84:	2f08      	cmp	r7, #8
 8005d86:	d109      	bne.n	8005d9c <_printf_i+0x120>
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	07db      	lsls	r3, r3, #31
 8005d8c:	d506      	bpl.n	8005d9c <_printf_i+0x120>
 8005d8e:	6862      	ldr	r2, [r4, #4]
 8005d90:	6923      	ldr	r3, [r4, #16]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	dc02      	bgt.n	8005d9c <_printf_i+0x120>
 8005d96:	2330      	movs	r3, #48	@ 0x30
 8005d98:	3d01      	subs	r5, #1
 8005d9a:	702b      	strb	r3, [r5, #0]
 8005d9c:	9b03      	ldr	r3, [sp, #12]
 8005d9e:	1b5b      	subs	r3, r3, r5
 8005da0:	6123      	str	r3, [r4, #16]
 8005da2:	9b07      	ldr	r3, [sp, #28]
 8005da4:	0021      	movs	r1, r4
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	9805      	ldr	r0, [sp, #20]
 8005daa:	9b06      	ldr	r3, [sp, #24]
 8005dac:	aa09      	add	r2, sp, #36	@ 0x24
 8005dae:	f7ff fef5 	bl	8005b9c <_printf_common>
 8005db2:	3001      	adds	r0, #1
 8005db4:	d148      	bne.n	8005e48 <_printf_i+0x1cc>
 8005db6:	2001      	movs	r0, #1
 8005db8:	4240      	negs	r0, r0
 8005dba:	b00b      	add	sp, #44	@ 0x2c
 8005dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	6809      	ldr	r1, [r1, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	6022      	str	r2, [r4, #0]
 8005dc6:	2278      	movs	r2, #120	@ 0x78
 8005dc8:	4932      	ldr	r1, [pc, #200]	@ (8005e94 <_printf_i+0x218>)
 8005dca:	9104      	str	r1, [sp, #16]
 8005dcc:	0021      	movs	r1, r4
 8005dce:	3145      	adds	r1, #69	@ 0x45
 8005dd0:	700a      	strb	r2, [r1, #0]
 8005dd2:	6819      	ldr	r1, [r3, #0]
 8005dd4:	6822      	ldr	r2, [r4, #0]
 8005dd6:	c940      	ldmia	r1!, {r6}
 8005dd8:	0610      	lsls	r0, r2, #24
 8005dda:	d402      	bmi.n	8005de2 <_printf_i+0x166>
 8005ddc:	0650      	lsls	r0, r2, #25
 8005dde:	d500      	bpl.n	8005de2 <_printf_i+0x166>
 8005de0:	b2b6      	uxth	r6, r6
 8005de2:	6019      	str	r1, [r3, #0]
 8005de4:	07d3      	lsls	r3, r2, #31
 8005de6:	d502      	bpl.n	8005dee <_printf_i+0x172>
 8005de8:	2320      	movs	r3, #32
 8005dea:	4313      	orrs	r3, r2
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	2e00      	cmp	r6, #0
 8005df0:	d001      	beq.n	8005df6 <_printf_i+0x17a>
 8005df2:	2710      	movs	r7, #16
 8005df4:	e7a8      	b.n	8005d48 <_printf_i+0xcc>
 8005df6:	2220      	movs	r2, #32
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	4393      	bics	r3, r2
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	e7f8      	b.n	8005df2 <_printf_i+0x176>
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	680d      	ldr	r5, [r1, #0]
 8005e04:	1d10      	adds	r0, r2, #4
 8005e06:	6949      	ldr	r1, [r1, #20]
 8005e08:	6018      	str	r0, [r3, #0]
 8005e0a:	6813      	ldr	r3, [r2, #0]
 8005e0c:	062e      	lsls	r6, r5, #24
 8005e0e:	d501      	bpl.n	8005e14 <_printf_i+0x198>
 8005e10:	6019      	str	r1, [r3, #0]
 8005e12:	e002      	b.n	8005e1a <_printf_i+0x19e>
 8005e14:	066d      	lsls	r5, r5, #25
 8005e16:	d5fb      	bpl.n	8005e10 <_printf_i+0x194>
 8005e18:	8019      	strh	r1, [r3, #0]
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	9d03      	ldr	r5, [sp, #12]
 8005e1e:	6123      	str	r3, [r4, #16]
 8005e20:	e7bf      	b.n	8005da2 <_printf_i+0x126>
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	1d11      	adds	r1, r2, #4
 8005e26:	6019      	str	r1, [r3, #0]
 8005e28:	6815      	ldr	r5, [r2, #0]
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	0028      	movs	r0, r5
 8005e2e:	6862      	ldr	r2, [r4, #4]
 8005e30:	f000 f996 	bl	8006160 <memchr>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	d001      	beq.n	8005e3c <_printf_i+0x1c0>
 8005e38:	1b40      	subs	r0, r0, r5
 8005e3a:	6060      	str	r0, [r4, #4]
 8005e3c:	6863      	ldr	r3, [r4, #4]
 8005e3e:	6123      	str	r3, [r4, #16]
 8005e40:	2300      	movs	r3, #0
 8005e42:	9a03      	ldr	r2, [sp, #12]
 8005e44:	7013      	strb	r3, [r2, #0]
 8005e46:	e7ac      	b.n	8005da2 <_printf_i+0x126>
 8005e48:	002a      	movs	r2, r5
 8005e4a:	6923      	ldr	r3, [r4, #16]
 8005e4c:	9906      	ldr	r1, [sp, #24]
 8005e4e:	9805      	ldr	r0, [sp, #20]
 8005e50:	9d07      	ldr	r5, [sp, #28]
 8005e52:	47a8      	blx	r5
 8005e54:	3001      	adds	r0, #1
 8005e56:	d0ae      	beq.n	8005db6 <_printf_i+0x13a>
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	079b      	lsls	r3, r3, #30
 8005e5c:	d415      	bmi.n	8005e8a <_printf_i+0x20e>
 8005e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e60:	68e0      	ldr	r0, [r4, #12]
 8005e62:	4298      	cmp	r0, r3
 8005e64:	daa9      	bge.n	8005dba <_printf_i+0x13e>
 8005e66:	0018      	movs	r0, r3
 8005e68:	e7a7      	b.n	8005dba <_printf_i+0x13e>
 8005e6a:	0022      	movs	r2, r4
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	9906      	ldr	r1, [sp, #24]
 8005e70:	9805      	ldr	r0, [sp, #20]
 8005e72:	9e07      	ldr	r6, [sp, #28]
 8005e74:	3219      	adds	r2, #25
 8005e76:	47b0      	blx	r6
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d09c      	beq.n	8005db6 <_printf_i+0x13a>
 8005e7c:	3501      	adds	r5, #1
 8005e7e:	68e3      	ldr	r3, [r4, #12]
 8005e80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e82:	1a9b      	subs	r3, r3, r2
 8005e84:	42ab      	cmp	r3, r5
 8005e86:	dcf0      	bgt.n	8005e6a <_printf_i+0x1ee>
 8005e88:	e7e9      	b.n	8005e5e <_printf_i+0x1e2>
 8005e8a:	2500      	movs	r5, #0
 8005e8c:	e7f7      	b.n	8005e7e <_printf_i+0x202>
 8005e8e:	46c0      	nop			@ (mov r8, r8)
 8005e90:	080066f9 	.word	0x080066f9
 8005e94:	0800670a 	.word	0x0800670a

08005e98 <__sflush_r>:
 8005e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e9a:	220c      	movs	r2, #12
 8005e9c:	5e8b      	ldrsh	r3, [r1, r2]
 8005e9e:	0005      	movs	r5, r0
 8005ea0:	000c      	movs	r4, r1
 8005ea2:	071a      	lsls	r2, r3, #28
 8005ea4:	d456      	bmi.n	8005f54 <__sflush_r+0xbc>
 8005ea6:	684a      	ldr	r2, [r1, #4]
 8005ea8:	2a00      	cmp	r2, #0
 8005eaa:	dc02      	bgt.n	8005eb2 <__sflush_r+0x1a>
 8005eac:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005eae:	2a00      	cmp	r2, #0
 8005eb0:	dd4e      	ble.n	8005f50 <__sflush_r+0xb8>
 8005eb2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005eb4:	2f00      	cmp	r7, #0
 8005eb6:	d04b      	beq.n	8005f50 <__sflush_r+0xb8>
 8005eb8:	2200      	movs	r2, #0
 8005eba:	2080      	movs	r0, #128	@ 0x80
 8005ebc:	682e      	ldr	r6, [r5, #0]
 8005ebe:	602a      	str	r2, [r5, #0]
 8005ec0:	001a      	movs	r2, r3
 8005ec2:	0140      	lsls	r0, r0, #5
 8005ec4:	6a21      	ldr	r1, [r4, #32]
 8005ec6:	4002      	ands	r2, r0
 8005ec8:	4203      	tst	r3, r0
 8005eca:	d033      	beq.n	8005f34 <__sflush_r+0x9c>
 8005ecc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ece:	89a3      	ldrh	r3, [r4, #12]
 8005ed0:	075b      	lsls	r3, r3, #29
 8005ed2:	d506      	bpl.n	8005ee2 <__sflush_r+0x4a>
 8005ed4:	6863      	ldr	r3, [r4, #4]
 8005ed6:	1ad2      	subs	r2, r2, r3
 8005ed8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <__sflush_r+0x4a>
 8005ede:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ee0:	1ad2      	subs	r2, r2, r3
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	0028      	movs	r0, r5
 8005ee6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005ee8:	6a21      	ldr	r1, [r4, #32]
 8005eea:	47b8      	blx	r7
 8005eec:	89a2      	ldrh	r2, [r4, #12]
 8005eee:	1c43      	adds	r3, r0, #1
 8005ef0:	d106      	bne.n	8005f00 <__sflush_r+0x68>
 8005ef2:	6829      	ldr	r1, [r5, #0]
 8005ef4:	291d      	cmp	r1, #29
 8005ef6:	d846      	bhi.n	8005f86 <__sflush_r+0xee>
 8005ef8:	4b29      	ldr	r3, [pc, #164]	@ (8005fa0 <__sflush_r+0x108>)
 8005efa:	410b      	asrs	r3, r1
 8005efc:	07db      	lsls	r3, r3, #31
 8005efe:	d442      	bmi.n	8005f86 <__sflush_r+0xee>
 8005f00:	2300      	movs	r3, #0
 8005f02:	6063      	str	r3, [r4, #4]
 8005f04:	6923      	ldr	r3, [r4, #16]
 8005f06:	6023      	str	r3, [r4, #0]
 8005f08:	04d2      	lsls	r2, r2, #19
 8005f0a:	d505      	bpl.n	8005f18 <__sflush_r+0x80>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	d102      	bne.n	8005f16 <__sflush_r+0x7e>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d100      	bne.n	8005f18 <__sflush_r+0x80>
 8005f16:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f1a:	602e      	str	r6, [r5, #0]
 8005f1c:	2900      	cmp	r1, #0
 8005f1e:	d017      	beq.n	8005f50 <__sflush_r+0xb8>
 8005f20:	0023      	movs	r3, r4
 8005f22:	3344      	adds	r3, #68	@ 0x44
 8005f24:	4299      	cmp	r1, r3
 8005f26:	d002      	beq.n	8005f2e <__sflush_r+0x96>
 8005f28:	0028      	movs	r0, r5
 8005f2a:	f7ff fbf7 	bl	800571c <_free_r>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f32:	e00d      	b.n	8005f50 <__sflush_r+0xb8>
 8005f34:	2301      	movs	r3, #1
 8005f36:	0028      	movs	r0, r5
 8005f38:	47b8      	blx	r7
 8005f3a:	0002      	movs	r2, r0
 8005f3c:	1c43      	adds	r3, r0, #1
 8005f3e:	d1c6      	bne.n	8005ece <__sflush_r+0x36>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d0c3      	beq.n	8005ece <__sflush_r+0x36>
 8005f46:	2b1d      	cmp	r3, #29
 8005f48:	d001      	beq.n	8005f4e <__sflush_r+0xb6>
 8005f4a:	2b16      	cmp	r3, #22
 8005f4c:	d11a      	bne.n	8005f84 <__sflush_r+0xec>
 8005f4e:	602e      	str	r6, [r5, #0]
 8005f50:	2000      	movs	r0, #0
 8005f52:	e01e      	b.n	8005f92 <__sflush_r+0xfa>
 8005f54:	690e      	ldr	r6, [r1, #16]
 8005f56:	2e00      	cmp	r6, #0
 8005f58:	d0fa      	beq.n	8005f50 <__sflush_r+0xb8>
 8005f5a:	680f      	ldr	r7, [r1, #0]
 8005f5c:	600e      	str	r6, [r1, #0]
 8005f5e:	1bba      	subs	r2, r7, r6
 8005f60:	9201      	str	r2, [sp, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	079b      	lsls	r3, r3, #30
 8005f66:	d100      	bne.n	8005f6a <__sflush_r+0xd2>
 8005f68:	694a      	ldr	r2, [r1, #20]
 8005f6a:	60a2      	str	r2, [r4, #8]
 8005f6c:	9b01      	ldr	r3, [sp, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	ddee      	ble.n	8005f50 <__sflush_r+0xb8>
 8005f72:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005f74:	0032      	movs	r2, r6
 8005f76:	001f      	movs	r7, r3
 8005f78:	0028      	movs	r0, r5
 8005f7a:	9b01      	ldr	r3, [sp, #4]
 8005f7c:	6a21      	ldr	r1, [r4, #32]
 8005f7e:	47b8      	blx	r7
 8005f80:	2800      	cmp	r0, #0
 8005f82:	dc07      	bgt.n	8005f94 <__sflush_r+0xfc>
 8005f84:	89a2      	ldrh	r2, [r4, #12]
 8005f86:	2340      	movs	r3, #64	@ 0x40
 8005f88:	2001      	movs	r0, #1
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	b21b      	sxth	r3, r3
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	4240      	negs	r0, r0
 8005f92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f94:	9b01      	ldr	r3, [sp, #4]
 8005f96:	1836      	adds	r6, r6, r0
 8005f98:	1a1b      	subs	r3, r3, r0
 8005f9a:	9301      	str	r3, [sp, #4]
 8005f9c:	e7e6      	b.n	8005f6c <__sflush_r+0xd4>
 8005f9e:	46c0      	nop			@ (mov r8, r8)
 8005fa0:	dfbffffe 	.word	0xdfbffffe

08005fa4 <_fflush_r>:
 8005fa4:	690b      	ldr	r3, [r1, #16]
 8005fa6:	b570      	push	{r4, r5, r6, lr}
 8005fa8:	0005      	movs	r5, r0
 8005faa:	000c      	movs	r4, r1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d102      	bne.n	8005fb6 <_fflush_r+0x12>
 8005fb0:	2500      	movs	r5, #0
 8005fb2:	0028      	movs	r0, r5
 8005fb4:	bd70      	pop	{r4, r5, r6, pc}
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d004      	beq.n	8005fc4 <_fflush_r+0x20>
 8005fba:	6a03      	ldr	r3, [r0, #32]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <_fflush_r+0x20>
 8005fc0:	f7ff fa98 	bl	80054f4 <__sinit>
 8005fc4:	220c      	movs	r2, #12
 8005fc6:	5ea3      	ldrsh	r3, [r4, r2]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0f1      	beq.n	8005fb0 <_fflush_r+0xc>
 8005fcc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005fce:	07d2      	lsls	r2, r2, #31
 8005fd0:	d404      	bmi.n	8005fdc <_fflush_r+0x38>
 8005fd2:	059b      	lsls	r3, r3, #22
 8005fd4:	d402      	bmi.n	8005fdc <_fflush_r+0x38>
 8005fd6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fd8:	f7ff fb9d 	bl	8005716 <__retarget_lock_acquire_recursive>
 8005fdc:	0028      	movs	r0, r5
 8005fde:	0021      	movs	r1, r4
 8005fe0:	f7ff ff5a 	bl	8005e98 <__sflush_r>
 8005fe4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fe6:	0005      	movs	r5, r0
 8005fe8:	07db      	lsls	r3, r3, #31
 8005fea:	d4e2      	bmi.n	8005fb2 <_fflush_r+0xe>
 8005fec:	89a3      	ldrh	r3, [r4, #12]
 8005fee:	059b      	lsls	r3, r3, #22
 8005ff0:	d4df      	bmi.n	8005fb2 <_fflush_r+0xe>
 8005ff2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ff4:	f7ff fb90 	bl	8005718 <__retarget_lock_release_recursive>
 8005ff8:	e7db      	b.n	8005fb2 <_fflush_r+0xe>

08005ffa <__swbuf_r>:
 8005ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffc:	0006      	movs	r6, r0
 8005ffe:	000d      	movs	r5, r1
 8006000:	0014      	movs	r4, r2
 8006002:	2800      	cmp	r0, #0
 8006004:	d004      	beq.n	8006010 <__swbuf_r+0x16>
 8006006:	6a03      	ldr	r3, [r0, #32]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <__swbuf_r+0x16>
 800600c:	f7ff fa72 	bl	80054f4 <__sinit>
 8006010:	69a3      	ldr	r3, [r4, #24]
 8006012:	60a3      	str	r3, [r4, #8]
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	071b      	lsls	r3, r3, #28
 8006018:	d502      	bpl.n	8006020 <__swbuf_r+0x26>
 800601a:	6923      	ldr	r3, [r4, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d109      	bne.n	8006034 <__swbuf_r+0x3a>
 8006020:	0021      	movs	r1, r4
 8006022:	0030      	movs	r0, r6
 8006024:	f000 f82c 	bl	8006080 <__swsetup_r>
 8006028:	2800      	cmp	r0, #0
 800602a:	d003      	beq.n	8006034 <__swbuf_r+0x3a>
 800602c:	2501      	movs	r5, #1
 800602e:	426d      	negs	r5, r5
 8006030:	0028      	movs	r0, r5
 8006032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006034:	6923      	ldr	r3, [r4, #16]
 8006036:	6820      	ldr	r0, [r4, #0]
 8006038:	b2ef      	uxtb	r7, r5
 800603a:	1ac0      	subs	r0, r0, r3
 800603c:	6963      	ldr	r3, [r4, #20]
 800603e:	b2ed      	uxtb	r5, r5
 8006040:	4283      	cmp	r3, r0
 8006042:	dc05      	bgt.n	8006050 <__swbuf_r+0x56>
 8006044:	0021      	movs	r1, r4
 8006046:	0030      	movs	r0, r6
 8006048:	f7ff ffac 	bl	8005fa4 <_fflush_r>
 800604c:	2800      	cmp	r0, #0
 800604e:	d1ed      	bne.n	800602c <__swbuf_r+0x32>
 8006050:	68a3      	ldr	r3, [r4, #8]
 8006052:	3001      	adds	r0, #1
 8006054:	3b01      	subs	r3, #1
 8006056:	60a3      	str	r3, [r4, #8]
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	6022      	str	r2, [r4, #0]
 800605e:	701f      	strb	r7, [r3, #0]
 8006060:	6963      	ldr	r3, [r4, #20]
 8006062:	4283      	cmp	r3, r0
 8006064:	d004      	beq.n	8006070 <__swbuf_r+0x76>
 8006066:	89a3      	ldrh	r3, [r4, #12]
 8006068:	07db      	lsls	r3, r3, #31
 800606a:	d5e1      	bpl.n	8006030 <__swbuf_r+0x36>
 800606c:	2d0a      	cmp	r5, #10
 800606e:	d1df      	bne.n	8006030 <__swbuf_r+0x36>
 8006070:	0021      	movs	r1, r4
 8006072:	0030      	movs	r0, r6
 8006074:	f7ff ff96 	bl	8005fa4 <_fflush_r>
 8006078:	2800      	cmp	r0, #0
 800607a:	d0d9      	beq.n	8006030 <__swbuf_r+0x36>
 800607c:	e7d6      	b.n	800602c <__swbuf_r+0x32>
	...

08006080 <__swsetup_r>:
 8006080:	4b2d      	ldr	r3, [pc, #180]	@ (8006138 <__swsetup_r+0xb8>)
 8006082:	b570      	push	{r4, r5, r6, lr}
 8006084:	0005      	movs	r5, r0
 8006086:	6818      	ldr	r0, [r3, #0]
 8006088:	000c      	movs	r4, r1
 800608a:	2800      	cmp	r0, #0
 800608c:	d004      	beq.n	8006098 <__swsetup_r+0x18>
 800608e:	6a03      	ldr	r3, [r0, #32]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <__swsetup_r+0x18>
 8006094:	f7ff fa2e 	bl	80054f4 <__sinit>
 8006098:	230c      	movs	r3, #12
 800609a:	5ee2      	ldrsh	r2, [r4, r3]
 800609c:	0713      	lsls	r3, r2, #28
 800609e:	d423      	bmi.n	80060e8 <__swsetup_r+0x68>
 80060a0:	06d3      	lsls	r3, r2, #27
 80060a2:	d407      	bmi.n	80060b4 <__swsetup_r+0x34>
 80060a4:	2309      	movs	r3, #9
 80060a6:	602b      	str	r3, [r5, #0]
 80060a8:	2340      	movs	r3, #64	@ 0x40
 80060aa:	2001      	movs	r0, #1
 80060ac:	4313      	orrs	r3, r2
 80060ae:	81a3      	strh	r3, [r4, #12]
 80060b0:	4240      	negs	r0, r0
 80060b2:	e03a      	b.n	800612a <__swsetup_r+0xaa>
 80060b4:	0752      	lsls	r2, r2, #29
 80060b6:	d513      	bpl.n	80060e0 <__swsetup_r+0x60>
 80060b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060ba:	2900      	cmp	r1, #0
 80060bc:	d008      	beq.n	80060d0 <__swsetup_r+0x50>
 80060be:	0023      	movs	r3, r4
 80060c0:	3344      	adds	r3, #68	@ 0x44
 80060c2:	4299      	cmp	r1, r3
 80060c4:	d002      	beq.n	80060cc <__swsetup_r+0x4c>
 80060c6:	0028      	movs	r0, r5
 80060c8:	f7ff fb28 	bl	800571c <_free_r>
 80060cc:	2300      	movs	r3, #0
 80060ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80060d0:	2224      	movs	r2, #36	@ 0x24
 80060d2:	89a3      	ldrh	r3, [r4, #12]
 80060d4:	4393      	bics	r3, r2
 80060d6:	81a3      	strh	r3, [r4, #12]
 80060d8:	2300      	movs	r3, #0
 80060da:	6063      	str	r3, [r4, #4]
 80060dc:	6923      	ldr	r3, [r4, #16]
 80060de:	6023      	str	r3, [r4, #0]
 80060e0:	2308      	movs	r3, #8
 80060e2:	89a2      	ldrh	r2, [r4, #12]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	81a3      	strh	r3, [r4, #12]
 80060e8:	6923      	ldr	r3, [r4, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10b      	bne.n	8006106 <__swsetup_r+0x86>
 80060ee:	21a0      	movs	r1, #160	@ 0xa0
 80060f0:	2280      	movs	r2, #128	@ 0x80
 80060f2:	89a3      	ldrh	r3, [r4, #12]
 80060f4:	0089      	lsls	r1, r1, #2
 80060f6:	0092      	lsls	r2, r2, #2
 80060f8:	400b      	ands	r3, r1
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d003      	beq.n	8006106 <__swsetup_r+0x86>
 80060fe:	0021      	movs	r1, r4
 8006100:	0028      	movs	r0, r5
 8006102:	f000 f863 	bl	80061cc <__smakebuf_r>
 8006106:	230c      	movs	r3, #12
 8006108:	5ee2      	ldrsh	r2, [r4, r3]
 800610a:	2101      	movs	r1, #1
 800610c:	0013      	movs	r3, r2
 800610e:	400b      	ands	r3, r1
 8006110:	420a      	tst	r2, r1
 8006112:	d00b      	beq.n	800612c <__swsetup_r+0xac>
 8006114:	2300      	movs	r3, #0
 8006116:	60a3      	str	r3, [r4, #8]
 8006118:	6963      	ldr	r3, [r4, #20]
 800611a:	425b      	negs	r3, r3
 800611c:	61a3      	str	r3, [r4, #24]
 800611e:	2000      	movs	r0, #0
 8006120:	6923      	ldr	r3, [r4, #16]
 8006122:	4283      	cmp	r3, r0
 8006124:	d101      	bne.n	800612a <__swsetup_r+0xaa>
 8006126:	0613      	lsls	r3, r2, #24
 8006128:	d4be      	bmi.n	80060a8 <__swsetup_r+0x28>
 800612a:	bd70      	pop	{r4, r5, r6, pc}
 800612c:	0791      	lsls	r1, r2, #30
 800612e:	d400      	bmi.n	8006132 <__swsetup_r+0xb2>
 8006130:	6963      	ldr	r3, [r4, #20]
 8006132:	60a3      	str	r3, [r4, #8]
 8006134:	e7f3      	b.n	800611e <__swsetup_r+0x9e>
 8006136:	46c0      	nop			@ (mov r8, r8)
 8006138:	20000058 	.word	0x20000058

0800613c <_sbrk_r>:
 800613c:	2300      	movs	r3, #0
 800613e:	b570      	push	{r4, r5, r6, lr}
 8006140:	4d06      	ldr	r5, [pc, #24]	@ (800615c <_sbrk_r+0x20>)
 8006142:	0004      	movs	r4, r0
 8006144:	0008      	movs	r0, r1
 8006146:	602b      	str	r3, [r5, #0]
 8006148:	f7fb fc2a 	bl	80019a0 <_sbrk>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	d103      	bne.n	8006158 <_sbrk_r+0x1c>
 8006150:	682b      	ldr	r3, [r5, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d000      	beq.n	8006158 <_sbrk_r+0x1c>
 8006156:	6023      	str	r3, [r4, #0]
 8006158:	bd70      	pop	{r4, r5, r6, pc}
 800615a:	46c0      	nop			@ (mov r8, r8)
 800615c:	200003c0 	.word	0x200003c0

08006160 <memchr>:
 8006160:	b2c9      	uxtb	r1, r1
 8006162:	1882      	adds	r2, r0, r2
 8006164:	4290      	cmp	r0, r2
 8006166:	d101      	bne.n	800616c <memchr+0xc>
 8006168:	2000      	movs	r0, #0
 800616a:	4770      	bx	lr
 800616c:	7803      	ldrb	r3, [r0, #0]
 800616e:	428b      	cmp	r3, r1
 8006170:	d0fb      	beq.n	800616a <memchr+0xa>
 8006172:	3001      	adds	r0, #1
 8006174:	e7f6      	b.n	8006164 <memchr+0x4>
	...

08006178 <__swhatbuf_r>:
 8006178:	b570      	push	{r4, r5, r6, lr}
 800617a:	000e      	movs	r6, r1
 800617c:	001d      	movs	r5, r3
 800617e:	230e      	movs	r3, #14
 8006180:	5ec9      	ldrsh	r1, [r1, r3]
 8006182:	0014      	movs	r4, r2
 8006184:	b096      	sub	sp, #88	@ 0x58
 8006186:	2900      	cmp	r1, #0
 8006188:	da0c      	bge.n	80061a4 <__swhatbuf_r+0x2c>
 800618a:	89b2      	ldrh	r2, [r6, #12]
 800618c:	2380      	movs	r3, #128	@ 0x80
 800618e:	0011      	movs	r1, r2
 8006190:	4019      	ands	r1, r3
 8006192:	421a      	tst	r2, r3
 8006194:	d114      	bne.n	80061c0 <__swhatbuf_r+0x48>
 8006196:	2380      	movs	r3, #128	@ 0x80
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	2000      	movs	r0, #0
 800619c:	6029      	str	r1, [r5, #0]
 800619e:	6023      	str	r3, [r4, #0]
 80061a0:	b016      	add	sp, #88	@ 0x58
 80061a2:	bd70      	pop	{r4, r5, r6, pc}
 80061a4:	466a      	mov	r2, sp
 80061a6:	f000 f853 	bl	8006250 <_fstat_r>
 80061aa:	2800      	cmp	r0, #0
 80061ac:	dbed      	blt.n	800618a <__swhatbuf_r+0x12>
 80061ae:	23f0      	movs	r3, #240	@ 0xf0
 80061b0:	9901      	ldr	r1, [sp, #4]
 80061b2:	021b      	lsls	r3, r3, #8
 80061b4:	4019      	ands	r1, r3
 80061b6:	4b04      	ldr	r3, [pc, #16]	@ (80061c8 <__swhatbuf_r+0x50>)
 80061b8:	18c9      	adds	r1, r1, r3
 80061ba:	424b      	negs	r3, r1
 80061bc:	4159      	adcs	r1, r3
 80061be:	e7ea      	b.n	8006196 <__swhatbuf_r+0x1e>
 80061c0:	2100      	movs	r1, #0
 80061c2:	2340      	movs	r3, #64	@ 0x40
 80061c4:	e7e9      	b.n	800619a <__swhatbuf_r+0x22>
 80061c6:	46c0      	nop			@ (mov r8, r8)
 80061c8:	ffffe000 	.word	0xffffe000

080061cc <__smakebuf_r>:
 80061cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ce:	2602      	movs	r6, #2
 80061d0:	898b      	ldrh	r3, [r1, #12]
 80061d2:	0005      	movs	r5, r0
 80061d4:	000c      	movs	r4, r1
 80061d6:	b085      	sub	sp, #20
 80061d8:	4233      	tst	r3, r6
 80061da:	d007      	beq.n	80061ec <__smakebuf_r+0x20>
 80061dc:	0023      	movs	r3, r4
 80061de:	3347      	adds	r3, #71	@ 0x47
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	6123      	str	r3, [r4, #16]
 80061e4:	2301      	movs	r3, #1
 80061e6:	6163      	str	r3, [r4, #20]
 80061e8:	b005      	add	sp, #20
 80061ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061ec:	ab03      	add	r3, sp, #12
 80061ee:	aa02      	add	r2, sp, #8
 80061f0:	f7ff ffc2 	bl	8006178 <__swhatbuf_r>
 80061f4:	9f02      	ldr	r7, [sp, #8]
 80061f6:	9001      	str	r0, [sp, #4]
 80061f8:	0039      	movs	r1, r7
 80061fa:	0028      	movs	r0, r5
 80061fc:	f7ff fafa 	bl	80057f4 <_malloc_r>
 8006200:	2800      	cmp	r0, #0
 8006202:	d108      	bne.n	8006216 <__smakebuf_r+0x4a>
 8006204:	220c      	movs	r2, #12
 8006206:	5ea3      	ldrsh	r3, [r4, r2]
 8006208:	059a      	lsls	r2, r3, #22
 800620a:	d4ed      	bmi.n	80061e8 <__smakebuf_r+0x1c>
 800620c:	2203      	movs	r2, #3
 800620e:	4393      	bics	r3, r2
 8006210:	431e      	orrs	r6, r3
 8006212:	81a6      	strh	r6, [r4, #12]
 8006214:	e7e2      	b.n	80061dc <__smakebuf_r+0x10>
 8006216:	2380      	movs	r3, #128	@ 0x80
 8006218:	89a2      	ldrh	r2, [r4, #12]
 800621a:	6020      	str	r0, [r4, #0]
 800621c:	4313      	orrs	r3, r2
 800621e:	81a3      	strh	r3, [r4, #12]
 8006220:	9b03      	ldr	r3, [sp, #12]
 8006222:	6120      	str	r0, [r4, #16]
 8006224:	6167      	str	r7, [r4, #20]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00c      	beq.n	8006244 <__smakebuf_r+0x78>
 800622a:	0028      	movs	r0, r5
 800622c:	230e      	movs	r3, #14
 800622e:	5ee1      	ldrsh	r1, [r4, r3]
 8006230:	f000 f820 	bl	8006274 <_isatty_r>
 8006234:	2800      	cmp	r0, #0
 8006236:	d005      	beq.n	8006244 <__smakebuf_r+0x78>
 8006238:	2303      	movs	r3, #3
 800623a:	89a2      	ldrh	r2, [r4, #12]
 800623c:	439a      	bics	r2, r3
 800623e:	3b02      	subs	r3, #2
 8006240:	4313      	orrs	r3, r2
 8006242:	81a3      	strh	r3, [r4, #12]
 8006244:	89a3      	ldrh	r3, [r4, #12]
 8006246:	9a01      	ldr	r2, [sp, #4]
 8006248:	4313      	orrs	r3, r2
 800624a:	81a3      	strh	r3, [r4, #12]
 800624c:	e7cc      	b.n	80061e8 <__smakebuf_r+0x1c>
	...

08006250 <_fstat_r>:
 8006250:	2300      	movs	r3, #0
 8006252:	b570      	push	{r4, r5, r6, lr}
 8006254:	4d06      	ldr	r5, [pc, #24]	@ (8006270 <_fstat_r+0x20>)
 8006256:	0004      	movs	r4, r0
 8006258:	0008      	movs	r0, r1
 800625a:	0011      	movs	r1, r2
 800625c:	602b      	str	r3, [r5, #0]
 800625e:	f7fb fb7c 	bl	800195a <_fstat>
 8006262:	1c43      	adds	r3, r0, #1
 8006264:	d103      	bne.n	800626e <_fstat_r+0x1e>
 8006266:	682b      	ldr	r3, [r5, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d000      	beq.n	800626e <_fstat_r+0x1e>
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	bd70      	pop	{r4, r5, r6, pc}
 8006270:	200003c0 	.word	0x200003c0

08006274 <_isatty_r>:
 8006274:	2300      	movs	r3, #0
 8006276:	b570      	push	{r4, r5, r6, lr}
 8006278:	4d06      	ldr	r5, [pc, #24]	@ (8006294 <_isatty_r+0x20>)
 800627a:	0004      	movs	r4, r0
 800627c:	0008      	movs	r0, r1
 800627e:	602b      	str	r3, [r5, #0]
 8006280:	f7fb fb79 	bl	8001976 <_isatty>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	d103      	bne.n	8006290 <_isatty_r+0x1c>
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d000      	beq.n	8006290 <_isatty_r+0x1c>
 800628e:	6023      	str	r3, [r4, #0]
 8006290:	bd70      	pop	{r4, r5, r6, pc}
 8006292:	46c0      	nop			@ (mov r8, r8)
 8006294:	200003c0 	.word	0x200003c0

08006298 <_init>:
 8006298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629a:	46c0      	nop			@ (mov r8, r8)
 800629c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629e:	bc08      	pop	{r3}
 80062a0:	469e      	mov	lr, r3
 80062a2:	4770      	bx	lr

080062a4 <_fini>:
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	46c0      	nop			@ (mov r8, r8)
 80062a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062aa:	bc08      	pop	{r3}
 80062ac:	469e      	mov	lr, r3
 80062ae:	4770      	bx	lr
