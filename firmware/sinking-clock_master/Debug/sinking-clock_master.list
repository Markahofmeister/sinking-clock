
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c2c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005ce8  08005ce8  00006ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005db4  08005db4  00007060  2**0
                  CONTENTS
  4 .ARM          00000000  08005db4  08005db4  00007060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005db4  08005db4  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005db4  08005db4  00006db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005db8  08005db8  00006db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005dbc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000060  08005e1c  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08005e1c  0000723c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012502  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b91  00000000  00000000  0001958a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0001c120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e11  00000000  00000000  0001d330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018116  00000000  00000000  0001e141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164c6  00000000  00000000  00036257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009837e  00000000  00000000  0004c71d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4a9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004160  00000000  00000000  000e4ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e8c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000060 	.word	0x20000060
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005cd0 	.word	0x08005cd0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000064 	.word	0x20000064
 8000100:	08005cd0 	.word	0x08005cd0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	b089      	sub	sp, #36	@ 0x24
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231f      	movs	r3, #31
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	2108      	movs	r1, #8
 800024a:	185b      	adds	r3, r3, r1
 800024c:	19db      	adds	r3, r3, r7
 800024e:	881b      	ldrh	r3, [r3, #0]
 8000250:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-high hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	6818      	ldr	r0, [r3, #0]
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	899b      	ldrh	r3, [r3, #12]
 800025c:	2201      	movs	r2, #1
 800025e:	0019      	movs	r1, r3
 8000260:	f002 fa41 	bl	80026e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	689b      	ldr	r3, [r3, #8]
 8000268:	6818      	ldr	r0, [r3, #0]
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	899b      	ldrh	r3, [r3, #12]
 800026e:	2200      	movs	r2, #0
 8000270:	0019      	movs	r1, r3
 8000272:	f002 fa38 	bl	80026e6 <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	0018      	movs	r0, r3
 800027c:	f004 feea 	bl	8005054 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	0018      	movs	r0, r3
 8000286:	f004 fe99 	bl	8004fbc <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000292:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000294:	46c0      	nop			@ (mov r8, r8)
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029e:	69bb      	ldr	r3, [r7, #24]
 80002a0:	1ad2      	subs	r2, r2, r3
 80002a2:	2380      	movs	r3, #128	@ 0x80
 80002a4:	021b      	lsls	r3, r3, #8
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d3f5      	bcc.n	8000296 <capTouch_Init+0x7a>

	// Verify device ID
	uint8_t deviceIDRet = 0x00;
 80002aa:	2517      	movs	r5, #23
 80002ac:	197b      	adds	r3, r7, r5
 80002ae:	2200      	movs	r2, #0
 80002b0:	701a      	strb	r2, [r3, #0]
	halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b2:	261f      	movs	r6, #31
 80002b4:	19bc      	adds	r4, r7, r6
 80002b6:	197a      	adds	r2, r7, r5
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	0011      	movs	r1, r2
 80002bc:	0018      	movs	r0, r3
 80002be:	f000 f855 	bl	800036c <capTouch_ReadDeviceID>
 80002c2:	0003      	movs	r3, r0
 80002c4:	7023      	strb	r3, [r4, #0]

	if(deviceIDRet != DEVICE_ID || halRet != HAL_OK) {
 80002c6:	197b      	adds	r3, r7, r5
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80002cc:	d103      	bne.n	80002d6 <capTouch_Init+0xba>
 80002ce:	19bb      	adds	r3, r7, r6
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <capTouch_Init+0xbe>
		return 1;
 80002d6:	2301      	movs	r3, #1
 80002d8:	e043      	b.n	8000362 <capTouch_Init+0x146>
	}

	capTouch->deviceID = deviceIDRet;
 80002da:	2317      	movs	r3, #23
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	781a      	ldrb	r2, [r3, #0]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	739a      	strb	r2, [r3, #14]

	// Force Device Recalibration
	halRet = capTouch_Recalibrate(capTouch);
 80002e4:	251f      	movs	r5, #31
 80002e6:	197c      	adds	r4, r7, r5
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 f880 	bl	80003f0 <capTouch_Recalibrate>
 80002f0:	0003      	movs	r3, r0
 80002f2:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 80002f4:	197b      	adds	r3, r7, r5
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <capTouch_Init+0xe4>
		return 2;
 80002fc:	2302      	movs	r3, #2
 80002fe:	e030      	b.n	8000362 <capTouch_Init+0x146>
	}

	// Wait until calibration sequence completes
	while(capTouch_checkCal(capTouch)) {}
 8000300:	46c0      	nop			@ (mov r8, r8)
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	0018      	movs	r0, r3
 8000306:	f000 f895 	bl	8000434 <capTouch_checkCal>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d1f9      	bne.n	8000302 <capTouch_Init+0xe6>

	// Get initial reading of channels
	halRet = capTouch_readChannels(capTouch);
 800030e:	251f      	movs	r5, #31
 8000310:	197c      	adds	r4, r7, r5
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	0018      	movs	r0, r3
 8000316:	f000 f8d1 	bl	80004bc <capTouch_readChannels>
 800031a:	0003      	movs	r3, r0
 800031c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 800031e:	197b      	adds	r3, r7, r5
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <capTouch_Init+0x10e>
		return 3;
 8000326:	2303      	movs	r3, #3
 8000328:	e01b      	b.n	8000362 <capTouch_Init+0x146>
	}

	halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 800032a:	251f      	movs	r5, #31
 800032c:	197c      	adds	r4, r7, r5
 800032e:	2334      	movs	r3, #52	@ 0x34
 8000330:	2208      	movs	r2, #8
 8000332:	189b      	adds	r3, r3, r2
 8000334:	19db      	adds	r3, r3, r7
 8000336:	781a      	ldrb	r2, [r3, #0]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	0011      	movs	r1, r2
 800033c:	0018      	movs	r0, r3
 800033e:	f000 f901 	bl	8000544 <capTouch_enableKeys>
 8000342:	0003      	movs	r3, r0
 8000344:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000346:	197b      	adds	r3, r7, r5
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <capTouch_Init+0x136>
		return 4;
 800034e:	2304      	movs	r3, #4
 8000350:	e007      	b.n	8000362 <capTouch_Init+0x146>
	}
	capTouch->keys = keyEnFlags;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	2234      	movs	r2, #52	@ 0x34
 8000356:	2108      	movs	r1, #8
 8000358:	1852      	adds	r2, r2, r1
 800035a:	19d2      	adds	r2, r2, r7
 800035c:	7812      	ldrb	r2, [r2, #0]
 800035e:	73da      	strb	r2, [r3, #15]

	return 0;
 8000360:	2300      	movs	r3, #0

}
 8000362:	0018      	movs	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	b009      	add	sp, #36	@ 0x24
 8000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800036c <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 800036c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036e:	b087      	sub	sp, #28
 8000370:	af02      	add	r7, sp, #8
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 8000376:	230e      	movs	r3, #14
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800037e:	250f      	movs	r5, #15
 8000380:	197b      	adds	r3, r7, r5
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 8000386:	210c      	movs	r1, #12
 8000388:	187b      	adds	r3, r7, r1
 800038a:	4a18      	ldr	r2, [pc, #96]	@ (80003ec <capTouch_ReadDeviceID+0x80>)
 800038c:	7812      	ldrb	r2, [r2, #0]
 800038e:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	6818      	ldr	r0, [r3, #0]
 8000394:	197c      	adds	r4, r7, r5
 8000396:	187a      	adds	r2, r7, r1
 8000398:	2301      	movs	r3, #1
 800039a:	425b      	negs	r3, r3
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	2301      	movs	r3, #1
 80003a0:	2136      	movs	r1, #54	@ 0x36
 80003a2:	f002 fab3 	bl	800290c <HAL_I2C_Master_Transmit>
 80003a6:	0003      	movs	r3, r0
 80003a8:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80003aa:	197b      	adds	r3, r7, r5
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d002      	beq.n	80003b8 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 80003b2:	197b      	adds	r3, r7, r5
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	e014      	b.n	80003e2 <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6818      	ldr	r0, [r3, #0]
 80003bc:	250f      	movs	r5, #15
 80003be:	197c      	adds	r4, r7, r5
 80003c0:	260e      	movs	r6, #14
 80003c2:	19ba      	adds	r2, r7, r6
 80003c4:	2301      	movs	r3, #1
 80003c6:	425b      	negs	r3, r3
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	2301      	movs	r3, #1
 80003cc:	2136      	movs	r1, #54	@ 0x36
 80003ce:	f002 fbc7 	bl	8002b60 <HAL_I2C_Master_Receive>
 80003d2:	0003      	movs	r3, r0
 80003d4:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 80003d6:	19bb      	adds	r3, r7, r6
 80003d8:	781a      	ldrb	r2, [r3, #0]
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	701a      	strb	r2, [r3, #0]

	return halRet;
 80003de:	197b      	adds	r3, r7, r5
 80003e0:	781b      	ldrb	r3, [r3, #0]

}
 80003e2:	0018      	movs	r0, r3
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b005      	add	sp, #20
 80003e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ea:	46c0      	nop			@ (mov r8, r8)
 80003ec:	08005ce8 	.word	0x08005ce8

080003f0 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80003f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f2:	b087      	sub	sp, #28
 80003f4:	af02      	add	r7, sp, #8
 80003f6:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80003f8:	210f      	movs	r1, #15
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2200      	movs	r2, #0
 80003fe:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 8000400:	260c      	movs	r6, #12
 8000402:	19bb      	adds	r3, r7, r6
 8000404:	22c8      	movs	r2, #200	@ 0xc8
 8000406:	4252      	negs	r2, r2
 8000408:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	6818      	ldr	r0, [r3, #0]
 800040e:	000d      	movs	r5, r1
 8000410:	187c      	adds	r4, r7, r1
 8000412:	19ba      	adds	r2, r7, r6
 8000414:	2301      	movs	r3, #1
 8000416:	425b      	negs	r3, r3
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2302      	movs	r3, #2
 800041c:	2136      	movs	r1, #54	@ 0x36
 800041e:	f002 fa75 	bl	800290c <HAL_I2C_Master_Transmit>
 8000422:	0003      	movs	r3, r0
 8000424:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 8000426:	197b      	adds	r3, r7, r5
 8000428:	781b      	ldrb	r3, [r3, #0]

}
 800042a:	0018      	movs	r0, r3
 800042c:	46bd      	mov	sp, r7
 800042e:	b005      	add	sp, #20
 8000430:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000434 <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	b087      	sub	sp, #28
 8000438:	af02      	add	r7, sp, #8
 800043a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800043c:	210f      	movs	r1, #15
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 8000444:	230d      	movs	r3, #13
 8000446:	18fb      	adds	r3, r7, r3
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 800044c:	260c      	movs	r6, #12
 800044e:	19bb      	adds	r3, r7, r6
 8000450:	4a19      	ldr	r2, [pc, #100]	@ (80004b8 <capTouch_checkCal+0x84>)
 8000452:	7812      	ldrb	r2, [r2, #0]
 8000454:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	000d      	movs	r5, r1
 800045c:	187c      	adds	r4, r7, r1
 800045e:	19ba      	adds	r2, r7, r6
 8000460:	2301      	movs	r3, #1
 8000462:	425b      	negs	r3, r3
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	2301      	movs	r3, #1
 8000468:	2136      	movs	r1, #54	@ 0x36
 800046a:	f002 fa4f 	bl	800290c <HAL_I2C_Master_Transmit>
 800046e:	0003      	movs	r3, r0
 8000470:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000472:	197b      	adds	r3, r7, r5
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d002      	beq.n	8000480 <capTouch_checkCal+0x4c>
		return halRet;
 800047a:	197b      	adds	r3, r7, r5
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	e016      	b.n	80004ae <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6818      	ldr	r0, [r3, #0]
 8000484:	230f      	movs	r3, #15
 8000486:	18fc      	adds	r4, r7, r3
 8000488:	250d      	movs	r5, #13
 800048a:	197a      	adds	r2, r7, r5
 800048c:	2301      	movs	r3, #1
 800048e:	425b      	negs	r3, r3
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	2301      	movs	r3, #1
 8000494:	2136      	movs	r1, #54	@ 0x36
 8000496:	f002 fb63 	bl	8002b60 <HAL_I2C_Master_Receive>
 800049a:	0003      	movs	r3, r0
 800049c:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 800049e:	197b      	adds	r3, r7, r5
 80004a0:	781a      	ldrb	r2, [r3, #0]
 80004a2:	210e      	movs	r1, #14
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	09d2      	lsrs	r2, r2, #7
 80004a8:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	781b      	ldrb	r3, [r3, #0]

}
 80004ae:	0018      	movs	r0, r3
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b005      	add	sp, #20
 80004b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	08005cec 	.word	0x08005cec

080004bc <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	b087      	sub	sp, #28
 80004c0:	af02      	add	r7, sp, #8
 80004c2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004c4:	210f      	movs	r1, #15
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 80004cc:	230e      	movs	r3, #14
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	2200      	movs	r2, #0
 80004d2:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 80004d4:	260c      	movs	r6, #12
 80004d6:	19bb      	adds	r3, r7, r6
 80004d8:	4a19      	ldr	r2, [pc, #100]	@ (8000540 <capTouch_readChannels+0x84>)
 80004da:	7812      	ldrb	r2, [r2, #0]
 80004dc:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6818      	ldr	r0, [r3, #0]
 80004e2:	000d      	movs	r5, r1
 80004e4:	187c      	adds	r4, r7, r1
 80004e6:	19ba      	adds	r2, r7, r6
 80004e8:	2301      	movs	r3, #1
 80004ea:	425b      	negs	r3, r3
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	2136      	movs	r1, #54	@ 0x36
 80004f2:	f002 fa0b 	bl	800290c <HAL_I2C_Master_Transmit>
 80004f6:	0003      	movs	r3, r0
 80004f8:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80004fa:	197b      	adds	r3, r7, r5
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d002      	beq.n	8000508 <capTouch_readChannels+0x4c>
		return halRet;
 8000502:	197b      	adds	r3, r7, r5
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	e017      	b.n	8000538 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6818      	ldr	r0, [r3, #0]
 800050c:	250f      	movs	r5, #15
 800050e:	197c      	adds	r4, r7, r5
 8000510:	260e      	movs	r6, #14
 8000512:	19ba      	adds	r2, r7, r6
 8000514:	2301      	movs	r3, #1
 8000516:	425b      	negs	r3, r3
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	2136      	movs	r1, #54	@ 0x36
 800051e:	f002 fb1f 	bl	8002b60 <HAL_I2C_Master_Receive>
 8000522:	0003      	movs	r3, r0
 8000524:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 8000526:	19bb      	adds	r3, r7, r6
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	227f      	movs	r2, #127	@ 0x7f
 800052c:	4013      	ands	r3, r2
 800052e:	b2da      	uxtb	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	741a      	strb	r2, [r3, #16]

	return halRet;
 8000534:	197b      	adds	r3, r7, r5
 8000536:	781b      	ldrb	r3, [r3, #0]

}
 8000538:	0018      	movs	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	b005      	add	sp, #20
 800053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000540:	08005cf0 	.word	0x08005cf0

08000544 <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	b08b      	sub	sp, #44	@ 0x2c
 8000548:	af02      	add	r7, sp, #8
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	000a      	movs	r2, r1
 800054e:	1cfb      	adds	r3, r7, #3
 8000550:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000552:	241e      	movs	r4, #30
 8000554:	193b      	adds	r3, r7, r4
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800055a:	2314      	movs	r3, #20
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	4a39      	ldr	r2, [pc, #228]	@ (8000644 <capTouch_enableKeys+0x100>)
 8000560:	6811      	ldr	r1, [r2, #0]
 8000562:	6019      	str	r1, [r3, #0]
 8000564:	8891      	ldrh	r1, [r2, #4]
 8000566:	8099      	strh	r1, [r3, #4]
 8000568:	7992      	ldrb	r2, [r2, #6]
 800056a:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 800056c:	260c      	movs	r6, #12
 800056e:	19bb      	adds	r3, r7, r6
 8000570:	4a35      	ldr	r2, [pc, #212]	@ (8000648 <capTouch_enableKeys+0x104>)
 8000572:	6811      	ldr	r1, [r2, #0]
 8000574:	6019      	str	r1, [r3, #0]
 8000576:	8891      	ldrh	r1, [r2, #4]
 8000578:	8099      	strh	r1, [r3, #4]
 800057a:	7992      	ldrb	r2, [r2, #6]
 800057c:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6818      	ldr	r0, [r3, #0]
 8000582:	0025      	movs	r5, r4
 8000584:	193c      	adds	r4, r7, r4
 8000586:	19ba      	adds	r2, r7, r6
 8000588:	2301      	movs	r3, #1
 800058a:	425b      	negs	r3, r3
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	2136      	movs	r1, #54	@ 0x36
 8000592:	f002 f9bb 	bl	800290c <HAL_I2C_Master_Transmit>
 8000596:	0003      	movs	r3, r0
 8000598:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800059a:	197b      	adds	r3, r7, r5
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d002      	beq.n	80005a8 <capTouch_enableKeys+0x64>
		return halRet;
 80005a2:	197b      	adds	r3, r7, r5
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	e049      	b.n	800063c <capTouch_enableKeys+0xf8>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6818      	ldr	r0, [r3, #0]
 80005ac:	251e      	movs	r5, #30
 80005ae:	197c      	adds	r4, r7, r5
 80005b0:	2314      	movs	r3, #20
 80005b2:	18fa      	adds	r2, r7, r3
 80005b4:	2301      	movs	r3, #1
 80005b6:	425b      	negs	r3, r3
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2307      	movs	r3, #7
 80005bc:	2136      	movs	r1, #54	@ 0x36
 80005be:	f002 facf 	bl	8002b60 <HAL_I2C_Master_Receive>
 80005c2:	0003      	movs	r3, r0
 80005c4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80005c6:	197b      	adds	r3, r7, r5
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <capTouch_enableKeys+0x90>
		return halRet;
 80005ce:	197b      	adds	r3, r7, r5
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	e033      	b.n	800063c <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80005d4:	231f      	movs	r3, #31
 80005d6:	18fb      	adds	r3, r7, r3
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e01c      	b.n	8000618 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 80005de:	201f      	movs	r0, #31
 80005e0:	183b      	adds	r3, r7, r0
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2414      	movs	r4, #20
 80005e6:	193a      	adds	r2, r7, r4
 80005e8:	5cd3      	ldrb	r3, [r2, r3]
 80005ea:	089b      	lsrs	r3, r3, #2
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	1cfb      	adds	r3, r7, #3
 80005f0:	7819      	ldrb	r1, [r3, #0]
 80005f2:	183b      	adds	r3, r7, r0
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	4119      	asrs	r1, r3
 80005f8:	000b      	movs	r3, r1
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2101      	movs	r1, #1
 80005fe:	400b      	ands	r3, r1
 8000600:	b2d9      	uxtb	r1, r3
 8000602:	183b      	adds	r3, r7, r0
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	434a      	muls	r2, r1
 8000608:	b2d1      	uxtb	r1, r2
 800060a:	193a      	adds	r2, r7, r4
 800060c:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 800060e:	183b      	adds	r3, r7, r0
 8000610:	781a      	ldrb	r2, [r3, #0]
 8000612:	183b      	adds	r3, r7, r0
 8000614:	3201      	adds	r2, #1
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	231f      	movs	r3, #31
 800061a:	18fb      	adds	r3, r7, r3
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b06      	cmp	r3, #6
 8000620:	d9dd      	bls.n	80005de <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 8000622:	251e      	movs	r5, #30
 8000624:	197c      	adds	r4, r7, r5
 8000626:	2314      	movs	r3, #20
 8000628:	18fa      	adds	r2, r7, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f000 f80c 	bl	800064c <capTouch_SetAveragingFactor>
 8000634:	0003      	movs	r3, r0
 8000636:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000638:	197b      	adds	r3, r7, r5
 800063a:	781b      	ldrb	r3, [r3, #0]

}
 800063c:	0018      	movs	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	b009      	add	sp, #36	@ 0x24
 8000642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000644:	08005cf4 	.word	0x08005cf4
 8000648:	08005cfc 	.word	0x08005cfc

0800064c <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 800064c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064e:	b08b      	sub	sp, #44	@ 0x2c
 8000650:	af02      	add	r7, sp, #8
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000656:	241e      	movs	r4, #30
 8000658:	193b      	adds	r3, r7, r4
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800065e:	2314      	movs	r3, #20
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	4a5d      	ldr	r2, [pc, #372]	@ (80007d8 <capTouch_SetAveragingFactor+0x18c>)
 8000664:	6811      	ldr	r1, [r2, #0]
 8000666:	6019      	str	r1, [r3, #0]
 8000668:	8891      	ldrh	r1, [r2, #4]
 800066a:	8099      	strh	r1, [r3, #4]
 800066c:	7992      	ldrb	r2, [r2, #6]
 800066e:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000670:	260c      	movs	r6, #12
 8000672:	19bb      	adds	r3, r7, r6
 8000674:	4a59      	ldr	r2, [pc, #356]	@ (80007dc <capTouch_SetAveragingFactor+0x190>)
 8000676:	6811      	ldr	r1, [r2, #0]
 8000678:	6019      	str	r1, [r3, #0]
 800067a:	8891      	ldrh	r1, [r2, #4]
 800067c:	8099      	strh	r1, [r3, #4]
 800067e:	7992      	ldrb	r2, [r2, #6]
 8000680:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6818      	ldr	r0, [r3, #0]
 8000686:	0025      	movs	r5, r4
 8000688:	193c      	adds	r4, r7, r4
 800068a:	19ba      	adds	r2, r7, r6
 800068c:	2301      	movs	r3, #1
 800068e:	425b      	negs	r3, r3
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	2136      	movs	r1, #54	@ 0x36
 8000696:	f002 f939 	bl	800290c <HAL_I2C_Master_Transmit>
 800069a:	0003      	movs	r3, r0
 800069c:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800069e:	197b      	adds	r3, r7, r5
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d002      	beq.n	80006ac <capTouch_SetAveragingFactor+0x60>
		return halRet;
 80006a6:	197b      	adds	r3, r7, r5
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	e090      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6818      	ldr	r0, [r3, #0]
 80006b0:	251e      	movs	r5, #30
 80006b2:	197c      	adds	r4, r7, r5
 80006b4:	2314      	movs	r3, #20
 80006b6:	18fa      	adds	r2, r7, r3
 80006b8:	2301      	movs	r3, #1
 80006ba:	425b      	negs	r3, r3
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2307      	movs	r3, #7
 80006c0:	2136      	movs	r1, #54	@ 0x36
 80006c2:	f002 fa4d 	bl	8002b60 <HAL_I2C_Master_Receive>
 80006c6:	0003      	movs	r3, r0
 80006c8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80006ca:	197b      	adds	r3, r7, r5
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d002      	beq.n	80006d8 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 80006d2:	197b      	adds	r3, r7, r5
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	e07a      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 80006d8:	2308      	movs	r3, #8
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	2200      	movs	r2, #0
 80006de:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 80006e0:	231d      	movs	r3, #29
 80006e2:	18fb      	adds	r3, r7, r3
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80006e8:	231f      	movs	r3, #31
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
 80006f0:	e041      	b.n	8000776 <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80006f2:	241f      	movs	r4, #31
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2214      	movs	r2, #20
 80006fa:	18ba      	adds	r2, r7, r2
 80006fc:	5cd2      	ldrb	r2, [r2, r3]
 80006fe:	201d      	movs	r0, #29
 8000700:	183b      	adds	r3, r7, r0
 8000702:	2103      	movs	r1, #3
 8000704:	400a      	ands	r2, r1
 8000706:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 8000708:	193b      	adds	r3, r7, r4
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	18d3      	adds	r3, r2, r3
 8000710:	781a      	ldrb	r2, [r3, #0]
 8000712:	251c      	movs	r5, #28
 8000714:	197b      	adds	r3, r7, r5
 8000716:	0092      	lsls	r2, r2, #2
 8000718:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 800071a:	183b      	adds	r3, r7, r0
 800071c:	1839      	adds	r1, r7, r0
 800071e:	197a      	adds	r2, r7, r5
 8000720:	7809      	ldrb	r1, [r1, #0]
 8000722:	7812      	ldrb	r2, [r2, #0]
 8000724:	430a      	orrs	r2, r1
 8000726:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 8000728:	193b      	adds	r3, r7, r4
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	220c      	movs	r2, #12
 800072e:	18ba      	adds	r2, r7, r2
 8000730:	5cd2      	ldrb	r2, [r2, r3]
 8000732:	2108      	movs	r1, #8
 8000734:	187b      	adds	r3, r7, r1
 8000736:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	183a      	adds	r2, r7, r0
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6818      	ldr	r0, [r3, #0]
 8000744:	251e      	movs	r5, #30
 8000746:	197c      	adds	r4, r7, r5
 8000748:	187a      	adds	r2, r7, r1
 800074a:	2301      	movs	r3, #1
 800074c:	425b      	negs	r3, r3
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2302      	movs	r3, #2
 8000752:	2136      	movs	r1, #54	@ 0x36
 8000754:	f002 f8da 	bl	800290c <HAL_I2C_Master_Transmit>
 8000758:	0003      	movs	r3, r0
 800075a:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 800075c:	197b      	adds	r3, r7, r5
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 8000764:	197b      	adds	r3, r7, r5
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	e031      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 800076a:	211f      	movs	r1, #31
 800076c:	187b      	adds	r3, r7, r1
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	187b      	adds	r3, r7, r1
 8000772:	3201      	adds	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	231f      	movs	r3, #31
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b06      	cmp	r3, #6
 800077e:	d9b8      	bls.n	80006f2 <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	251e      	movs	r5, #30
 8000786:	197c      	adds	r4, r7, r5
 8000788:	230c      	movs	r3, #12
 800078a:	18fa      	adds	r2, r7, r3
 800078c:	2301      	movs	r3, #1
 800078e:	425b      	negs	r3, r3
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	2136      	movs	r1, #54	@ 0x36
 8000796:	f002 f8b9 	bl	800290c <HAL_I2C_Master_Transmit>
 800079a:	0003      	movs	r3, r0
 800079c:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800079e:	197b      	adds	r3, r7, r5
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <capTouch_SetAveragingFactor+0x160>
		return halRet;
 80007a6:	197b      	adds	r3, r7, r5
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	e010      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	251e      	movs	r5, #30
 80007b2:	197c      	adds	r4, r7, r5
 80007b4:	2314      	movs	r3, #20
 80007b6:	18fa      	adds	r2, r7, r3
 80007b8:	2301      	movs	r3, #1
 80007ba:	425b      	negs	r3, r3
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2307      	movs	r3, #7
 80007c0:	2136      	movs	r1, #54	@ 0x36
 80007c2:	f002 f9cd 	bl	8002b60 <HAL_I2C_Master_Receive>
 80007c6:	0003      	movs	r3, r0
 80007c8:	7023      	strb	r3, [r4, #0]

	return halRet;
 80007ca:	197b      	adds	r3, r7, r5
 80007cc:	781b      	ldrb	r3, [r3, #0]

}
 80007ce:	0018      	movs	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b009      	add	sp, #36	@ 0x24
 80007d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	08005cf4 	.word	0x08005cf4
 80007dc:	08005cfc 	.word	0x08005cfc

080007e0 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 80007e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e2:	b08b      	sub	sp, #44	@ 0x2c
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80007ea:	231e      	movs	r3, #30
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80007f2:	2314      	movs	r3, #20
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	4a31      	ldr	r2, [pc, #196]	@ (80008bc <capTouch_SetDetectionIntegrator+0xdc>)
 80007f8:	6811      	ldr	r1, [r2, #0]
 80007fa:	6019      	str	r1, [r3, #0]
 80007fc:	8891      	ldrh	r1, [r2, #4]
 80007fe:	8099      	strh	r1, [r3, #4]
 8000800:	7992      	ldrb	r2, [r2, #6]
 8000802:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 8000804:	2310      	movs	r3, #16
 8000806:	18fb      	adds	r3, r7, r3
 8000808:	2200      	movs	r2, #0
 800080a:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800080c:	231f      	movs	r3, #31
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
 8000814:	e022      	b.n	800085c <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 8000816:	251f      	movs	r5, #31
 8000818:	197b      	adds	r3, r7, r5
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2214      	movs	r2, #20
 800081e:	18ba      	adds	r2, r7, r2
 8000820:	5cd2      	ldrb	r2, [r2, r3]
 8000822:	2110      	movs	r1, #16
 8000824:	187b      	adds	r3, r7, r1
 8000826:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 8000828:	197b      	adds	r3, r7, r5
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	18d3      	adds	r3, r2, r3
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	187b      	adds	r3, r7, r1
 8000834:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6818      	ldr	r0, [r3, #0]
 800083a:	231e      	movs	r3, #30
 800083c:	18fc      	adds	r4, r7, r3
 800083e:	187a      	adds	r2, r7, r1
 8000840:	2301      	movs	r3, #1
 8000842:	425b      	negs	r3, r3
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2302      	movs	r3, #2
 8000848:	2136      	movs	r1, #54	@ 0x36
 800084a:	f002 f85f 	bl	800290c <HAL_I2C_Master_Transmit>
 800084e:	0003      	movs	r3, r0
 8000850:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 8000852:	197b      	adds	r3, r7, r5
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	197b      	adds	r3, r7, r5
 8000858:	3201      	adds	r2, #1
 800085a:	701a      	strb	r2, [r3, #0]
 800085c:	231f      	movs	r3, #31
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b06      	cmp	r3, #6
 8000864:	d9d7      	bls.n	8000816 <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000866:	2608      	movs	r6, #8
 8000868:	19bb      	adds	r3, r7, r6
 800086a:	4a15      	ldr	r2, [pc, #84]	@ (80008c0 <capTouch_SetDetectionIntegrator+0xe0>)
 800086c:	6811      	ldr	r1, [r2, #0]
 800086e:	6019      	str	r1, [r3, #0]
 8000870:	8891      	ldrh	r1, [r2, #4]
 8000872:	8099      	strh	r1, [r3, #4]
 8000874:	7992      	ldrb	r2, [r2, #6]
 8000876:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	251e      	movs	r5, #30
 800087e:	197c      	adds	r4, r7, r5
 8000880:	2314      	movs	r3, #20
 8000882:	18fa      	adds	r2, r7, r3
 8000884:	2301      	movs	r3, #1
 8000886:	425b      	negs	r3, r3
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2301      	movs	r3, #1
 800088c:	2136      	movs	r1, #54	@ 0x36
 800088e:	f002 f83d 	bl	800290c <HAL_I2C_Master_Transmit>
 8000892:	0003      	movs	r3, r0
 8000894:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6818      	ldr	r0, [r3, #0]
 800089a:	197c      	adds	r4, r7, r5
 800089c:	19ba      	adds	r2, r7, r6
 800089e:	2301      	movs	r3, #1
 80008a0:	425b      	negs	r3, r3
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2307      	movs	r3, #7
 80008a6:	2136      	movs	r1, #54	@ 0x36
 80008a8:	f002 f95a 	bl	8002b60 <HAL_I2C_Master_Receive>
 80008ac:	0003      	movs	r3, r0
 80008ae:	7023      	strb	r3, [r4, #0]

	return halRet;
 80008b0:	197b      	adds	r3, r7, r5
 80008b2:	781b      	ldrb	r3, [r3, #0]

}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b009      	add	sp, #36	@ 0x24
 80008ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008bc:	08005d04 	.word	0x08005d04
 80008c0:	08005cf4 	.word	0x08005cf4

080008c4 <initRTCTime>:
 */

#include "../Inc/alarm.h"


void initRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80008c4:	b5b0      	push	{r4, r5, r7, lr}
 80008c6:	b09a      	sub	sp, #104	@ 0x68
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]

	currTime->Hours = 1;				// Initialize current RTC time to default values
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
	currTime->Minutes = 00;
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	2200      	movs	r2, #0
 80008da:	705a      	strb	r2, [r3, #1]
	currTime->Seconds = 00;
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	2200      	movs	r2, #0
 80008e0:	709a      	strb	r2, [r3, #2]
	currTime->TimeFormat = RTC_HOURFORMAT12_AM;			//This is initially in the A.M., so P.M. LED is off.
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	2200      	movs	r2, #0
 80008e6:	70da      	strb	r2, [r3, #3]

	currDate->Year = 0;					// Initialize current RTC date to default values
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2200      	movs	r2, #0
 80008ec:	70da      	strb	r2, [r3, #3]
	currDate->Month = RTC_MONTH_JANUARY;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2201      	movs	r2, #1
 80008f2:	705a      	strb	r2, [r3, #1]
	currDate->Date = 0;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	709a      	strb	r2, [r3, #2]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008fa:	2567      	movs	r5, #103	@ 0x67
 80008fc:	197b      	adds	r3, r7, r5
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
	halRet = HAL_RTC_SetTime(hrtc, currTime, RTCTimeFormat);
 8000902:	197c      	adds	r4, r7, r5
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2200      	movs	r2, #0
 800090a:	0018      	movs	r0, r3
 800090c:	f003 fd32 	bl	8004374 <HAL_RTC_SetTime>
 8000910:	0003      	movs	r3, r0
 8000912:	7023      	strb	r3, [r4, #0]
	halRet = HAL_RTC_SetDate(hrtc, currDate, RTCTimeFormat);
 8000914:	197c      	adds	r4, r7, r5
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2200      	movs	r2, #0
 800091c:	0018      	movs	r0, r3
 800091e:	f003 fe2d 	bl	800457c <HAL_RTC_SetDate>
 8000922:	0003      	movs	r3, r0
 8000924:	7023      	strb	r3, [r4, #0]
//	}
//	else {
//		printf("Error defaulting RTC time.\n\r");
//	}

	RTC_AlarmTypeDef internalAlarm_init = {0};
 8000926:	243c      	movs	r4, #60	@ 0x3c
 8000928:	193b      	adds	r3, r7, r4
 800092a:	0018      	movs	r0, r3
 800092c:	2328      	movs	r3, #40	@ 0x28
 800092e:	001a      	movs	r2, r3
 8000930:	2100      	movs	r1, #0
 8000932:	f005 f997 	bl	8005c64 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	781a      	ldrb	r2, [r3, #0]
 800093a:	0021      	movs	r1, r4
 800093c:	187b      	adds	r3, r7, r1
 800093e:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	785b      	ldrb	r3, [r3, #1]
 8000944:	3301      	adds	r3, #1
 8000946:	b2da      	uxtb	r2, r3
 8000948:	187b      	adds	r3, r7, r1
 800094a:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	789a      	ldrb	r2, [r3, #2]
 8000950:	187b      	adds	r3, r7, r1
 8000952:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	685a      	ldr	r2, [r3, #4]
 8000958:	187b      	adds	r3, r7, r1
 800095a:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	78da      	ldrb	r2, [r3, #3]
 8000960:	187b      	adds	r3, r7, r1
 8000962:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	78da      	ldrb	r2, [r3, #3]
 8000968:	187b      	adds	r3, r7, r1
 800096a:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800096c:	0008      	movs	r0, r1
 800096e:	183b      	adds	r3, r7, r0
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000974:	183b      	adds	r3, r7, r0
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 800097a:	183b      	adds	r3, r7, r0
 800097c:	4a14      	ldr	r2, [pc, #80]	@ (80009d0 <initRTCTime+0x10c>)
 800097e:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000980:	183b      	adds	r3, r7, r0
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000986:	183b      	adds	r3, r7, r0
 8000988:	2200      	movs	r2, #0
 800098a:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 800098c:	183b      	adds	r3, r7, r0
 800098e:	2220      	movs	r2, #32
 8000990:	2101      	movs	r1, #1
 8000992:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 8000994:	0001      	movs	r1, r0
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2280      	movs	r2, #128	@ 0x80
 800099a:	0052      	lsls	r2, r2, #1
 800099c:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 800099e:	197c      	adds	r4, r7, r5
 80009a0:	1879      	adds	r1, r7, r1
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2200      	movs	r2, #0
 80009a6:	0018      	movs	r0, r3
 80009a8:	f003 fec8 	bl	800473c <HAL_RTC_SetAlarm_IT>
 80009ac:	0003      	movs	r3, r0
 80009ae:	7023      	strb	r3, [r4, #0]

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 80009b0:	197c      	adds	r4, r7, r5
 80009b2:	2380      	movs	r3, #128	@ 0x80
 80009b4:	005a      	lsls	r2, r3, #1
 80009b6:	2314      	movs	r3, #20
 80009b8:	18f9      	adds	r1, r7, r3
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	2300      	movs	r3, #0
 80009be:	f003 fffd 	bl	80049bc <HAL_RTC_GetAlarm>
 80009c2:	0003      	movs	r3, r0
 80009c4:	7023      	strb	r3, [r4, #0]
//	if(halRet == HAL_OK) {
//		printf("Internal alarm A defaulted to %u:%u:%u.\n\r", internalAlarm_initTest.AlarmTime.Hours,
//				internalAlarm_initTest.AlarmTime.Minutes, internalAlarm_initTest.AlarmTime.Seconds);
//	}

}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b01a      	add	sp, #104	@ 0x68
 80009cc:	bdb0      	pop	{r4, r5, r7, pc}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	80800080 	.word	0x80800080

080009d4 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2200      	movs	r2, #0
 80009e6:	0018      	movs	r0, r3
 80009e8:	f003 fd6c 	bl	80044c4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2200      	movs	r2, #0
 80009f2:	0018      	movs	r0, r3
 80009f4:	f003 fe54 	bl	80046a0 <HAL_RTC_GetDate>

}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b004      	add	sp, #16
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a02:	b08d      	sub	sp, #52	@ 0x34
 8000a04:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f001 fb89 	bl	800211c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 f8db 	bl	8000bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f000 fac7 	bl	8000fa0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000a12:	f000 f98b 	bl	8000d2c <MX_RTC_Init>
  MX_I2C1_Init();
 8000a16:	f000 f949 	bl	8000cac <MX_I2C1_Init>
  MX_TIM14_Init();
 8000a1a:	f000 fa9b 	bl	8000f54 <MX_TIM14_Init>
  MX_TIM2_Init();
 8000a1e:	f000 fa39 	bl	8000e94 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Set Smooth Calibration Value
  HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 8000a22:	4b58      	ldr	r3, [pc, #352]	@ (8000b84 <main+0x184>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2280      	movs	r2, #128	@ 0x80
 8000a28:	01d1      	lsls	r1, r2, #7
 8000a2a:	4857      	ldr	r0, [pc, #348]	@ (8000b88 <main+0x188>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f004 f9ba 	bl	8004da6 <HAL_RTCEx_SetSmoothCalib>
    							RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);

  uint8_t initRet = 0;
 8000a32:	2317      	movs	r3, #23
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]

  initRTCTime(&hrtc, &currTime, &currDate);
 8000a3a:	4a54      	ldr	r2, [pc, #336]	@ (8000b8c <main+0x18c>)
 8000a3c:	4954      	ldr	r1, [pc, #336]	@ (8000b90 <main+0x190>)
 8000a3e:	4b52      	ldr	r3, [pc, #328]	@ (8000b88 <main+0x188>)
 8000a40:	0018      	movs	r0, r3
 8000a42:	f7ff ff3f 	bl	80008c4 <initRTCTime>

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000a46:	2380      	movs	r3, #128	@ 0x80
 8000a48:	009c      	lsls	r4, r3, #2
 8000a4a:	2380      	movs	r3, #128	@ 0x80
 8000a4c:	00dd      	lsls	r5, r3, #3
 8000a4e:	2680      	movs	r6, #128	@ 0x80
 8000a50:	2240      	movs	r2, #64	@ 0x40
 8000a52:	4694      	mov	ip, r2
 8000a54:	2380      	movs	r3, #128	@ 0x80
 8000a56:	011a      	lsls	r2, r3, #4
 8000a58:	4b4e      	ldr	r3, [pc, #312]	@ (8000b94 <main+0x194>)
 8000a5a:	6819      	ldr	r1, [r3, #0]
 8000a5c:	4b4e      	ldr	r3, [pc, #312]	@ (8000b98 <main+0x198>)
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	4b4e      	ldr	r3, [pc, #312]	@ (8000b9c <main+0x19c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	9304      	str	r3, [sp, #16]
 8000a66:	9003      	str	r0, [sp, #12]
 8000a68:	9102      	str	r1, [sp, #8]
 8000a6a:	4b4d      	ldr	r3, [pc, #308]	@ (8000ba0 <main+0x1a0>)
 8000a6c:	9301      	str	r3, [sp, #4]
 8000a6e:	9200      	str	r2, [sp, #0]
 8000a70:	4663      	mov	r3, ip
 8000a72:	0032      	movs	r2, r6
 8000a74:	0029      	movs	r1, r5
 8000a76:	0020      	movs	r0, r4
 8000a78:	f000 ff6c 	bl	8001954 <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);


	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 8000a7c:	2216      	movs	r2, #22
 8000a7e:	18bc      	adds	r4, r7, r2
 8000a80:	f000 fb70 	bl	8001164 <updateAndDisplayTime>
 8000a84:	0003      	movs	r3, r0
 8000a86:	7023      	strb	r3, [r4, #0]

    /*
     * Initialize capacitive touch sensor
     */

    initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 8000a88:	4b42      	ldr	r3, [pc, #264]	@ (8000b94 <main+0x194>)
 8000a8a:	681d      	ldr	r5, [r3, #0]
 8000a8c:	2380      	movs	r3, #128	@ 0x80
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4a44      	ldr	r2, [pc, #272]	@ (8000ba4 <main+0x1a4>)
 8000a92:	7812      	ldrb	r2, [r2, #0]
 8000a94:	2117      	movs	r1, #23
 8000a96:	187c      	adds	r4, r7, r1
 8000a98:	4e43      	ldr	r6, [pc, #268]	@ (8000ba8 <main+0x1a8>)
 8000a9a:	4944      	ldr	r1, [pc, #272]	@ (8000bac <main+0x1ac>)
 8000a9c:	4844      	ldr	r0, [pc, #272]	@ (8000bb0 <main+0x1b0>)
 8000a9e:	9201      	str	r2, [sp, #4]
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	0033      	movs	r3, r6
 8000aa4:	002a      	movs	r2, r5
 8000aa6:	f7ff fbb9 	bl	800021c <capTouch_Init>
 8000aaa:	0003      	movs	r3, r0
 8000aac:	7023      	strb	r3, [r4, #0]
    						&capTouchResetPort, capTouchResetPin, capTouchChannels);

    if(initRet != 0) {
 8000aae:	2117      	movs	r1, #23
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <main+0xbc>
    	dispError();
 8000ab8:	f000 ff04 	bl	80018c4 <dispError>
    }

    // Max. out averaging factor
    uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 8000abc:	4b3d      	ldr	r3, [pc, #244]	@ (8000bb4 <main+0x1b4>)
 8000abe:	781a      	ldrb	r2, [r3, #0]
 8000ac0:	210c      	movs	r1, #12
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8000bb4 <main+0x1b4>)
 8000ac8:	781a      	ldrb	r2, [r3, #0]
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	705a      	strb	r2, [r3, #1]
 8000ace:	4b39      	ldr	r3, [pc, #228]	@ (8000bb4 <main+0x1b4>)
 8000ad0:	781a      	ldrb	r2, [r3, #0]
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	709a      	strb	r2, [r3, #2]
 8000ad6:	4b37      	ldr	r3, [pc, #220]	@ (8000bb4 <main+0x1b4>)
 8000ad8:	781a      	ldrb	r2, [r3, #0]
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	70da      	strb	r2, [r3, #3]
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	711a      	strb	r2, [r3, #4]
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	715a      	strb	r2, [r3, #5]
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2200      	movs	r2, #0
 8000aee:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000af0:	2516      	movs	r5, #22
 8000af2:	197c      	adds	r4, r7, r5
 8000af4:	187a      	adds	r2, r7, r1
 8000af6:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb0 <main+0x1b0>)
 8000af8:	0011      	movs	r1, r2
 8000afa:	0018      	movs	r0, r3
 8000afc:	f7ff fda6 	bl	800064c <capTouch_SetAveragingFactor>
 8000b00:	0003      	movs	r3, r0
 8000b02:	7023      	strb	r3, [r4, #0]

    if(halRet != HAL_OK) {
 8000b04:	197b      	adds	r3, r7, r5
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <main+0x110>
    	dispError();
 8000b0c:	f000 feda 	bl	80018c4 <dispError>
    }

    // Set detection integration factors
    uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 8000b10:	4b29      	ldr	r3, [pc, #164]	@ (8000bb8 <main+0x1b8>)
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	701a      	strb	r2, [r3, #0]
 8000b18:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <main+0x1b8>)
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	705a      	strb	r2, [r3, #1]
 8000b20:	4b25      	ldr	r3, [pc, #148]	@ (8000bb8 <main+0x1b8>)
 8000b22:	781a      	ldrb	r2, [r3, #0]
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	709a      	strb	r2, [r3, #2]
 8000b28:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <main+0x1b8>)
 8000b2a:	781a      	ldrb	r2, [r3, #0]
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	70da      	strb	r2, [r3, #3]
 8000b30:	4b21      	ldr	r3, [pc, #132]	@ (8000bb8 <main+0x1b8>)
 8000b32:	781a      	ldrb	r2, [r3, #0]
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	711a      	strb	r2, [r3, #4]
 8000b38:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <main+0x1b8>)
 8000b3a:	781a      	ldrb	r2, [r3, #0]
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	715a      	strb	r2, [r3, #5]
 8000b40:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <main+0x1b8>)
 8000b42:	781a      	ldrb	r2, [r3, #0]
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 8000b48:	2516      	movs	r5, #22
 8000b4a:	197c      	adds	r4, r7, r5
 8000b4c:	1d3a      	adds	r2, r7, #4
 8000b4e:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <main+0x1b0>)
 8000b50:	0011      	movs	r1, r2
 8000b52:	0018      	movs	r0, r3
 8000b54:	f7ff fe44 	bl	80007e0 <capTouch_SetDetectionIntegrator>
 8000b58:	0003      	movs	r3, r0
 8000b5a:	7023      	strb	r3, [r4, #0]
    if(halRet != HAL_OK) {
 8000b5c:	197b      	adds	r3, r7, r5
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <main+0x168>
    	dispError();
 8000b64:	f000 feae 	bl	80018c4 <dispError>
    }

    userAlarmToggle = false;			//Default to off
 8000b68:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <main+0x1bc>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]

    // User alarm default value
    userAlarmTime.Hours = 1;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <main+0x1c0>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
    userAlarmTime.Minutes = 1;
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <main+0x1c0>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	705a      	strb	r2, [r3, #1]
    userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <main+0x1c0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	70da      	strb	r2, [r3, #3]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b80:	46c0      	nop			@ (mov r8, r8)
 8000b82:	e7fd      	b.n	8000b80 <main+0x180>
 8000b84:	2000002c 	.word	0x2000002c
 8000b88:	20000100 	.word	0x20000100
 8000b8c:	20000094 	.word	0x20000094
 8000b90:	20000080 	.word	0x20000080
 8000b94:	20000034 	.word	0x20000034
 8000b98:	20000038 	.word	0x20000038
 8000b9c:	20000030 	.word	0x20000030
 8000ba0:	20000014 	.word	0x20000014
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000004 	.word	0x20000004
 8000bac:	200000ac 	.word	0x200000ac
 8000bb0:	200001c8 	.word	0x200001c8
 8000bb4:	20000009 	.word	0x20000009
 8000bb8:	2000000a 	.word	0x2000000a
 8000bbc:	2000007d 	.word	0x2000007d
 8000bc0:	20000098 	.word	0x20000098

08000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b093      	sub	sp, #76	@ 0x4c
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	2410      	movs	r4, #16
 8000bcc:	193b      	adds	r3, r7, r4
 8000bce:	0018      	movs	r0, r3
 8000bd0:	2338      	movs	r3, #56	@ 0x38
 8000bd2:	001a      	movs	r2, r3
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	f005 f845 	bl	8005c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bda:	003b      	movs	r3, r7
 8000bdc:	0018      	movs	r0, r3
 8000bde:	2310      	movs	r3, #16
 8000be0:	001a      	movs	r2, r3
 8000be2:	2100      	movs	r1, #0
 8000be4:	f005 f83e 	bl	8005c64 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be8:	2380      	movs	r3, #128	@ 0x80
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	0018      	movs	r0, r3
 8000bee:	f002 fc49 	bl	8003484 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bf2:	f002 fc29 	bl	8003448 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 8000bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca8 <SystemClock_Config+0xe4>)
 8000bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bfa:	2218      	movs	r2, #24
 8000bfc:	4393      	bics	r3, r2
 8000bfe:	001a      	movs	r2, r3
 8000c00:	4b29      	ldr	r3, [pc, #164]	@ (8000ca8 <SystemClock_Config+0xe4>)
 8000c02:	2108      	movs	r1, #8
 8000c04:	430a      	orrs	r2, r1
 8000c06:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000c08:	193b      	adds	r3, r7, r4
 8000c0a:	220e      	movs	r2, #14
 8000c0c:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c0e:	193b      	adds	r3, r7, r4
 8000c10:	2201      	movs	r2, #1
 8000c12:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	2280      	movs	r2, #128	@ 0x80
 8000c18:	0052      	lsls	r2, r2, #1
 8000c1a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000c1c:	0021      	movs	r1, r4
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2240      	movs	r2, #64	@ 0x40
 8000c28:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2202      	movs	r2, #2
 8000c34:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2202      	movs	r2, #2
 8000c3a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2200      	movs	r2, #0
 8000c40:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2208      	movs	r2, #8
 8000c46:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2280      	movs	r2, #128	@ 0x80
 8000c4c:	0292      	lsls	r2, r2, #10
 8000c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	0492      	lsls	r2, r2, #18
 8000c56:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2280      	movs	r2, #128	@ 0x80
 8000c5c:	0592      	lsls	r2, r2, #22
 8000c5e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	0018      	movs	r0, r3
 8000c64:	f002 fc4e 	bl	8003504 <HAL_RCC_OscConfig>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d001      	beq.n	8000c70 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c6c:	f000 fe6c 	bl	8001948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c70:	003b      	movs	r3, r7
 8000c72:	2207      	movs	r2, #7
 8000c74:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c76:	003b      	movs	r3, r7
 8000c78:	2202      	movs	r2, #2
 8000c7a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7c:	003b      	movs	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c82:	003b      	movs	r3, r7
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c88:	003b      	movs	r3, r7
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f002 ff53 	bl	8003b38 <HAL_RCC_ClockConfig>
 8000c92:	1e03      	subs	r3, r0, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000c96:	f000 fe57 	bl	8001948 <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f003 fa50 	bl	8004140 <HAL_RCCEx_EnableLSCO>
}
 8000ca0:	46c0      	nop			@ (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b013      	add	sp, #76	@ 0x4c
 8000ca6:	bd90      	pop	{r4, r7, pc}
 8000ca8:	40021000 	.word	0x40021000

08000cac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d24 <MX_I2C1_Init+0x78>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d28 <MX_I2C1_Init+0x7c>)
 8000cba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cbc:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc2:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cce:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f001 fd69 	bl	80027c0 <HAL_I2C_Init>
 8000cee:	1e03      	subs	r3, r0, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cf2:	f000 fe29 	bl	8001948 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f002 fb0c 	bl	8003318 <HAL_I2CEx_ConfigAnalogFilter>
 8000d00:	1e03      	subs	r3, r0, #0
 8000d02:	d001      	beq.n	8000d08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d04:	f000 fe20 	bl	8001948 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d08:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <MX_I2C1_Init+0x74>)
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f002 fb4f 	bl	80033b0 <HAL_I2CEx_ConfigDigitalFilter>
 8000d12:	1e03      	subs	r3, r0, #0
 8000d14:	d001      	beq.n	8000d1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d16:	f000 fe17 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200000ac 	.word	0x200000ac
 8000d24:	40005400 	.word	0x40005400
 8000d28:	00602173 	.word	0x00602173

08000d2c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b090      	sub	sp, #64	@ 0x40
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d32:	232c      	movs	r3, #44	@ 0x2c
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	0018      	movs	r0, r3
 8000d38:	2314      	movs	r3, #20
 8000d3a:	001a      	movs	r2, r3
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	f004 ff91 	bl	8005c64 <memset>
  RTC_DateTypeDef sDate = {0};
 8000d42:	2328      	movs	r3, #40	@ 0x28
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000d4a:	003b      	movs	r3, r7
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	2328      	movs	r3, #40	@ 0x28
 8000d50:	001a      	movs	r2, r3
 8000d52:	2100      	movs	r1, #0
 8000d54:	f004 ff86 	bl	8005c64 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d58:	4b4b      	ldr	r3, [pc, #300]	@ (8000e88 <MX_RTC_Init+0x15c>)
 8000d5a:	4a4c      	ldr	r2, [pc, #304]	@ (8000e8c <MX_RTC_Init+0x160>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8000e88 <MX_RTC_Init+0x15c>)
 8000d60:	2240      	movs	r2, #64	@ 0x40
 8000d62:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000d64:	4b48      	ldr	r3, [pc, #288]	@ (8000e88 <MX_RTC_Init+0x15c>)
 8000d66:	227f      	movs	r2, #127	@ 0x7f
 8000d68:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000d6a:	4b47      	ldr	r3, [pc, #284]	@ (8000e88 <MX_RTC_Init+0x15c>)
 8000d6c:	22ff      	movs	r2, #255	@ 0xff
 8000d6e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d70:	4b45      	ldr	r3, [pc, #276]	@ (8000e88 <MX_RTC_Init+0x15c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d76:	4b44      	ldr	r3, [pc, #272]	@ (8000e88 <MX_RTC_Init+0x15c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d7c:	4b42      	ldr	r3, [pc, #264]	@ (8000e88 <MX_RTC_Init+0x15c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d82:	4b41      	ldr	r3, [pc, #260]	@ (8000e88 <MX_RTC_Init+0x15c>)
 8000d84:	2280      	movs	r2, #128	@ 0x80
 8000d86:	05d2      	lsls	r2, r2, #23
 8000d88:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e88 <MX_RTC_Init+0x15c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d90:	4b3d      	ldr	r3, [pc, #244]	@ (8000e88 <MX_RTC_Init+0x15c>)
 8000d92:	0018      	movs	r0, r3
 8000d94:	f003 fa4c 	bl	8004230 <HAL_RTC_Init>
 8000d98:	1e03      	subs	r3, r0, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000d9c:	f000 fdd4 	bl	8001948 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000da0:	212c      	movs	r1, #44	@ 0x2c
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2201      	movs	r2, #1
 8000da6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2200      	movs	r2, #0
 8000db2:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2200      	movs	r2, #0
 8000db8:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	4b2e      	ldr	r3, [pc, #184]	@ (8000e88 <MX_RTC_Init+0x15c>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f003 face 	bl	8004374 <HAL_RTC_SetTime>
 8000dd8:	1e03      	subs	r3, r0, #0
 8000dda:	d001      	beq.n	8000de0 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000ddc:	f000 fdb4 	bl	8001948 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000de0:	2128      	movs	r1, #40	@ 0x28
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2201      	movs	r2, #1
 8000de6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2201      	movs	r2, #1
 8000dec:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2201      	movs	r2, #1
 8000df2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2200      	movs	r2, #0
 8000df8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000dfa:	1879      	adds	r1, r7, r1
 8000dfc:	4b22      	ldr	r3, [pc, #136]	@ (8000e88 <MX_RTC_Init+0x15c>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	0018      	movs	r0, r3
 8000e02:	f003 fbbb 	bl	800457c <HAL_RTC_SetDate>
 8000e06:	1e03      	subs	r3, r0, #0
 8000e08:	d001      	beq.n	8000e0e <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 8000e0a:	f000 fd9d 	bl	8001948 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000e0e:	003b      	movs	r3, r7
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000e14:	003b      	movs	r3, r7
 8000e16:	2201      	movs	r2, #1
 8000e18:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000e1a:	003b      	movs	r3, r7
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000e20:	003b      	movs	r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000e26:	003b      	movs	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e2c:	003b      	movs	r3, r7
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e32:	003b      	movs	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000e38:	003b      	movs	r3, r7
 8000e3a:	4a15      	ldr	r2, [pc, #84]	@ (8000e90 <MX_RTC_Init+0x164>)
 8000e3c:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000e3e:	003b      	movs	r3, r7
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000e44:	003b      	movs	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000e4a:	003b      	movs	r3, r7
 8000e4c:	2220      	movs	r2, #32
 8000e4e:	2101      	movs	r1, #1
 8000e50:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000e52:	003b      	movs	r3, r7
 8000e54:	2280      	movs	r2, #128	@ 0x80
 8000e56:	0052      	lsls	r2, r2, #1
 8000e58:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e5a:	0039      	movs	r1, r7
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <MX_RTC_Init+0x15c>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	0018      	movs	r0, r3
 8000e62:	f003 fc6b 	bl	800473c <HAL_RTC_SetAlarm_IT>
 8000e66:	1e03      	subs	r3, r0, #0
 8000e68:	d001      	beq.n	8000e6e <MX_RTC_Init+0x142>
  {
    Error_Handler();
 8000e6a:	f000 fd6d 	bl	8001948 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000e6e:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <MX_RTC_Init+0x15c>)
 8000e70:	2100      	movs	r1, #0
 8000e72:	0018      	movs	r0, r3
 8000e74:	f003 fffa 	bl	8004e6c <HAL_RTCEx_SetCalibrationOutPut>
 8000e78:	1e03      	subs	r3, r0, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_RTC_Init+0x154>
  {
    Error_Handler();
 8000e7c:	f000 fd64 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e80:	46c0      	nop			@ (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b010      	add	sp, #64	@ 0x40
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000100 	.word	0x20000100
 8000e8c:	40002800 	.word	0x40002800
 8000e90:	80800080 	.word	0x80800080

08000e94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	@ 0x28
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9a:	231c      	movs	r3, #28
 8000e9c:	18fb      	adds	r3, r7, r3
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	230c      	movs	r3, #12
 8000ea2:	001a      	movs	r2, r3
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	f004 fedd 	bl	8005c64 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eaa:	003b      	movs	r3, r7
 8000eac:	0018      	movs	r0, r3
 8000eae:	231c      	movs	r3, #28
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	f004 fed6 	bl	8005c64 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb8:	4b24      	ldr	r3, [pc, #144]	@ (8000f4c <MX_TIM2_Init+0xb8>)
 8000eba:	2280      	movs	r2, #128	@ 0x80
 8000ebc:	05d2      	lsls	r2, r2, #23
 8000ebe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8000ec0:	4b22      	ldr	r3, [pc, #136]	@ (8000f4c <MX_TIM2_Init+0xb8>)
 8000ec2:	4a23      	ldr	r2, [pc, #140]	@ (8000f50 <MX_TIM2_Init+0xbc>)
 8000ec4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec6:	4b21      	ldr	r3, [pc, #132]	@ (8000f4c <MX_TIM2_Init+0xb8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f4c <MX_TIM2_Init+0xb8>)
 8000ece:	2263      	movs	r2, #99	@ 0x63
 8000ed0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f4c <MX_TIM2_Init+0xb8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <MX_TIM2_Init+0xb8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ede:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <MX_TIM2_Init+0xb8>)
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f004 f8dd 	bl	80050a0 <HAL_TIM_PWM_Init>
 8000ee6:	1e03      	subs	r3, r0, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000eea:	f000 fd2d 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eee:	211c      	movs	r1, #28
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000efc:	187a      	adds	r2, r7, r1
 8000efe:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <MX_TIM2_Init+0xb8>)
 8000f00:	0011      	movs	r1, r2
 8000f02:	0018      	movs	r0, r3
 8000f04:	f004 fe46 	bl	8005b94 <HAL_TIMEx_MasterConfigSynchronization>
 8000f08:	1e03      	subs	r3, r0, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000f0c:	f000 fd1c 	bl	8001948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f10:	003b      	movs	r3, r7
 8000f12:	2260      	movs	r2, #96	@ 0x60
 8000f14:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f16:	003b      	movs	r3, r7
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f1c:	003b      	movs	r3, r7
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f22:	003b      	movs	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f28:	0039      	movs	r1, r7
 8000f2a:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <MX_TIM2_Init+0xb8>)
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f004 f9ec 	bl	800530c <HAL_TIM_PWM_ConfigChannel>
 8000f34:	1e03      	subs	r3, r0, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000f38:	f000 fd06 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f3c:	4b03      	ldr	r3, [pc, #12]	@ (8000f4c <MX_TIM2_Init+0xb8>)
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f001 f836 	bl	8001fb0 <HAL_TIM_MspPostInit>

}
 8000f44:	46c0      	nop			@ (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b00a      	add	sp, #40	@ 0x28
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000012c 	.word	0x2000012c
 8000f50:	0000031f 	.word	0x0000031f

08000f54 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f58:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <MX_TIM14_Init+0x40>)
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f98 <MX_TIM14_Init+0x44>)
 8000f5c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <MX_TIM14_Init+0x40>)
 8000f60:	22f4      	movs	r2, #244	@ 0xf4
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <MX_TIM14_Init+0x40>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <MX_TIM14_Init+0x40>)
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f9c <MX_TIM14_Init+0x48>)
 8000f70:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <MX_TIM14_Init+0x40>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <MX_TIM14_Init+0x40>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f7e:	4b05      	ldr	r3, [pc, #20]	@ (8000f94 <MX_TIM14_Init+0x40>)
 8000f80:	0018      	movs	r0, r3
 8000f82:	f003 ffc3 	bl	8004f0c <HAL_TIM_Base_Init>
 8000f86:	1e03      	subs	r3, r0, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000f8a:	f000 fcdd 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000178 	.word	0x20000178
 8000f98:	40002000 	.word	0x40002000
 8000f9c:	0000ffff 	.word	0x0000ffff

08000fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b08b      	sub	sp, #44	@ 0x2c
 8000fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	2414      	movs	r4, #20
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	0018      	movs	r0, r3
 8000fac:	2314      	movs	r3, #20
 8000fae:	001a      	movs	r2, r3
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	f004 fe57 	bl	8005c64 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b66      	ldr	r3, [pc, #408]	@ (8001150 <MX_GPIO_Init+0x1b0>)
 8000fb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fba:	4b65      	ldr	r3, [pc, #404]	@ (8001150 <MX_GPIO_Init+0x1b0>)
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fc2:	4b63      	ldr	r3, [pc, #396]	@ (8001150 <MX_GPIO_Init+0x1b0>)
 8000fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b60      	ldr	r3, [pc, #384]	@ (8001150 <MX_GPIO_Init+0x1b0>)
 8000fd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fd2:	4b5f      	ldr	r3, [pc, #380]	@ (8001150 <MX_GPIO_Init+0x1b0>)
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fda:	4b5d      	ldr	r3, [pc, #372]	@ (8001150 <MX_GPIO_Init+0x1b0>)
 8000fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe6:	4b5a      	ldr	r3, [pc, #360]	@ (8001150 <MX_GPIO_Init+0x1b0>)
 8000fe8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fea:	4b59      	ldr	r3, [pc, #356]	@ (8001150 <MX_GPIO_Init+0x1b0>)
 8000fec:	2108      	movs	r1, #8
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ff2:	4b57      	ldr	r3, [pc, #348]	@ (8001150 <MX_GPIO_Init+0x1b0>)
 8000ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ff6:	2208      	movs	r2, #8
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	4b54      	ldr	r3, [pc, #336]	@ (8001150 <MX_GPIO_Init+0x1b0>)
 8001000:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001002:	4b53      	ldr	r3, [pc, #332]	@ (8001150 <MX_GPIO_Init+0x1b0>)
 8001004:	2102      	movs	r1, #2
 8001006:	430a      	orrs	r2, r1
 8001008:	635a      	str	r2, [r3, #52]	@ 0x34
 800100a:	4b51      	ldr	r3, [pc, #324]	@ (8001150 <MX_GPIO_Init+0x1b0>)
 800100c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800100e:	2202      	movs	r2, #2
 8001010:	4013      	ands	r3, r2
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8001016:	494f      	ldr	r1, [pc, #316]	@ (8001154 <MX_GPIO_Init+0x1b4>)
 8001018:	23a0      	movs	r3, #160	@ 0xa0
 800101a:	05db      	lsls	r3, r3, #23
 800101c:	2200      	movs	r2, #0
 800101e:	0018      	movs	r0, r3
 8001020:	f001 fb61 	bl	80026e6 <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8001024:	4b4c      	ldr	r3, [pc, #304]	@ (8001158 <MX_GPIO_Init+0x1b8>)
 8001026:	2200      	movs	r2, #0
 8001028:	2180      	movs	r1, #128	@ 0x80
 800102a:	0018      	movs	r0, r3
 800102c:	f001 fb5b 	bl	80026e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_RST_GPIO_Port, CTOUCH_RST_Pin, GPIO_PIN_RESET);
 8001030:	2380      	movs	r3, #128	@ 0x80
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4849      	ldr	r0, [pc, #292]	@ (800115c <MX_GPIO_Init+0x1bc>)
 8001036:	2200      	movs	r2, #0
 8001038:	0019      	movs	r1, r3
 800103a:	f001 fb54 	bl	80026e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin BUZZER_OUT_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin
                           SHIFT_MCLR_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 800103e:	193b      	adds	r3, r7, r4
 8001040:	4a44      	ldr	r2, [pc, #272]	@ (8001154 <MX_GPIO_Init+0x1b4>)
 8001042:	601a      	str	r2, [r3, #0]
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	193b      	adds	r3, r7, r4
 8001046:	2201      	movs	r2, #1
 8001048:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	193b      	adds	r3, r7, r4
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	193b      	adds	r3, r7, r4
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	193a      	adds	r2, r7, r4
 8001058:	23a0      	movs	r3, #160	@ 0xa0
 800105a:	05db      	lsls	r3, r3, #23
 800105c:	0011      	movs	r1, r2
 800105e:	0018      	movs	r0, r3
 8001060:	f001 f9c0 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001064:	193b      	adds	r3, r7, r4
 8001066:	2204      	movs	r2, #4
 8001068:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106a:	193b      	adds	r3, r7, r4
 800106c:	2203      	movs	r2, #3
 800106e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	193b      	adds	r3, r7, r4
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	193a      	adds	r2, r7, r4
 8001078:	23a0      	movs	r3, #160	@ 0xa0
 800107a:	05db      	lsls	r3, r3, #23
 800107c:	0011      	movs	r1, r2
 800107e:	0018      	movs	r0, r3
 8001080:	f001 f9b0 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8001084:	193b      	adds	r3, r7, r4
 8001086:	2280      	movs	r2, #128	@ 0x80
 8001088:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	193b      	adds	r3, r7, r4
 800108c:	2201      	movs	r2, #1
 800108e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	193b      	adds	r3, r7, r4
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	193b      	adds	r3, r7, r4
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 800109c:	193b      	adds	r3, r7, r4
 800109e:	4a2e      	ldr	r2, [pc, #184]	@ (8001158 <MX_GPIO_Init+0x1b8>)
 80010a0:	0019      	movs	r1, r3
 80010a2:	0010      	movs	r0, r2
 80010a4:	f001 f99e 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 80010a8:	193b      	adds	r3, r7, r4
 80010aa:	2280      	movs	r2, #128	@ 0x80
 80010ac:	0212      	lsls	r2, r2, #8
 80010ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	2284      	movs	r2, #132	@ 0x84
 80010b4:	0392      	lsls	r2, r2, #14
 80010b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b8:	193b      	adds	r3, r7, r4
 80010ba:	2201      	movs	r2, #1
 80010bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80010be:	193a      	adds	r2, r7, r4
 80010c0:	23a0      	movs	r3, #160	@ 0xa0
 80010c2:	05db      	lsls	r3, r3, #23
 80010c4:	0011      	movs	r1, r2
 80010c6:	0018      	movs	r0, r3
 80010c8:	f001 f98c 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 80010cc:	0021      	movs	r1, r4
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	220f      	movs	r2, #15
 80010d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	2284      	movs	r2, #132	@ 0x84
 80010d8:	0392      	lsls	r2, r2, #14
 80010da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	2201      	movs	r2, #1
 80010e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e2:	000c      	movs	r4, r1
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001160 <MX_GPIO_Init+0x1c0>)
 80010e8:	0019      	movs	r1, r3
 80010ea:	0010      	movs	r0, r2
 80010ec:	f001 f97a 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_RST_Pin */
  GPIO_InitStruct.Pin = CTOUCH_RST_Pin;
 80010f0:	0021      	movs	r1, r4
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	2280      	movs	r2, #128	@ 0x80
 80010f6:	0052      	lsls	r2, r2, #1
 80010f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2201      	movs	r2, #1
 80010fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	187b      	adds	r3, r7, r1
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	187b      	adds	r3, r7, r1
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 800110c:	187b      	adds	r3, r7, r1
 800110e:	4a13      	ldr	r2, [pc, #76]	@ (800115c <MX_GPIO_Init+0x1bc>)
 8001110:	0019      	movs	r1, r3
 8001112:	0010      	movs	r0, r2
 8001114:	f001 f966 	bl	80023e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	2100      	movs	r1, #0
 800111c:	2005      	movs	r0, #5
 800111e:	f001 f92f 	bl	8002380 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001122:	2005      	movs	r0, #5
 8001124:	f001 f941 	bl	80023aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	2100      	movs	r1, #0
 800112c:	2006      	movs	r0, #6
 800112e:	f001 f927 	bl	8002380 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001132:	2006      	movs	r0, #6
 8001134:	f001 f939 	bl	80023aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2101      	movs	r1, #1
 800113c:	2007      	movs	r0, #7
 800113e:	f001 f91f 	bl	8002380 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001142:	2007      	movs	r0, #7
 8001144:	f001 f931 	bl	80023aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001148:	46c0      	nop			@ (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b00b      	add	sp, #44	@ 0x2c
 800114e:	bd90      	pop	{r4, r7, pc}
 8001150:	40021000 	.word	0x40021000
 8001154:	00001f01 	.word	0x00001f01
 8001158:	50000800 	.word	0x50000800
 800115c:	50000400 	.word	0x50000400
 8001160:	50000c00 	.word	0x50000c00

08001164 <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8001170:	4a07      	ldr	r2, [pc, #28]	@ (8001190 <updateAndDisplayTime+0x2c>)
 8001172:	4908      	ldr	r1, [pc, #32]	@ (8001194 <updateAndDisplayTime+0x30>)
 8001174:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <updateAndDisplayTime+0x34>)
 8001176:	0018      	movs	r0, r3
 8001178:	f7ff fc2c 	bl	80009d4 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <updateAndDisplayTime+0x30>)
 800117e:	0018      	movs	r0, r3
 8001180:	f000 fd08 	bl	8001b94 <sevSeg_updateDigits>

	return halRet;
 8001184:	1dfb      	adds	r3, r7, #7
 8001186:	781b      	ldrb	r3, [r3, #0]

}
 8001188:	0018      	movs	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	b002      	add	sp, #8
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000094 	.word	0x20000094
 8001194:	20000080 	.word	0x20000080
 8001198:	20000100 	.word	0x20000100

0800119c <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80011a2:	1dfb      	adds	r3, r7, #7
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 80011a8:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <updateAndDisplayAlarm+0x20>)
 80011aa:	0018      	movs	r0, r3
 80011ac:	f000 fcf2 	bl	8001b94 <sevSeg_updateDigits>

	return halRet;
 80011b0:	1dfb      	adds	r3, r7, #7
 80011b2:	781b      	ldrb	r3, [r3, #0]

}
 80011b4:	0018      	movs	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b002      	add	sp, #8
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000098 	.word	0x20000098

080011c0 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b08d      	sub	sp, #52	@ 0x34
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

	  //printf("Enter current time minute increment interrupt\n\r");

	  RTC_AlarmTypeDef sAlarm = {0};
 80011c8:	2408      	movs	r4, #8
 80011ca:	193b      	adds	r3, r7, r4
 80011cc:	0018      	movs	r0, r3
 80011ce:	2328      	movs	r3, #40	@ 0x28
 80011d0:	001a      	movs	r2, r3
 80011d2:	2100      	movs	r1, #0
 80011d4:	f004 fd46 	bl	8005c64 <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 80011d8:	2380      	movs	r3, #128	@ 0x80
 80011da:	005a      	lsls	r2, r3, #1
 80011dc:	1939      	adds	r1, r7, r4
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	2300      	movs	r3, #0
 80011e2:	f003 fbeb 	bl	80049bc <HAL_RTC_GetAlarm>


	  if(sAlarm.AlarmTime.Minutes>58) {
 80011e6:	193b      	adds	r3, r7, r4
 80011e8:	785b      	ldrb	r3, [r3, #1]
 80011ea:	2b3a      	cmp	r3, #58	@ 0x3a
 80011ec:	d903      	bls.n	80011f6 <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 80011ee:	193b      	adds	r3, r7, r4
 80011f0:	2200      	movs	r2, #0
 80011f2:	705a      	strb	r2, [r3, #1]
 80011f4:	e00e      	b.n	8001214 <HAL_RTC_AlarmAEventCallback+0x54>
		//printf("Reset alarm time\n\r");
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 80011f6:	2108      	movs	r1, #8
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	785b      	ldrb	r3, [r3, #1]
 80011fc:	3301      	adds	r3, #1
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	187b      	adds	r3, r7, r1
 8001202:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001204:	e006      	b.n	8001214 <HAL_RTC_AlarmAEventCallback+0x54>
			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 8001206:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <HAL_RTC_AlarmAEventCallback+0xa4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2201      	movs	r2, #1
 800120c:	0011      	movs	r1, r2
 800120e:	0018      	movs	r0, r3
 8001210:	f001 fa86 	bl	8002720 <HAL_GPIO_TogglePin>
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001214:	2308      	movs	r3, #8
 8001216:	18f9      	adds	r1, r7, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	0018      	movs	r0, r3
 800121e:	f003 fa8d 	bl	800473c <HAL_RTC_SetAlarm_IT>
 8001222:	1e03      	subs	r3, r0, #0
 8001224:	d1ef      	bne.n	8001206 <HAL_RTC_AlarmAEventCallback+0x46>
		}

	  updateAndDisplayTime();
 8001226:	f7ff ff9d 	bl	8001164 <updateAndDisplayTime>

	  //printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 800122a:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <HAL_RTC_AlarmAEventCallback+0xa8>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d013      	beq.n	800125a <HAL_RTC_AlarmAEventCallback+0x9a>
 8001232:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <HAL_RTC_AlarmAEventCallback+0xac>)
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	d10d      	bne.n	800125a <HAL_RTC_AlarmAEventCallback+0x9a>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 800123e:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <HAL_RTC_AlarmAEventCallback+0xac>)
 8001240:	785a      	ldrb	r2, [r3, #1]
 8001242:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8001244:	785b      	ldrb	r3, [r3, #1]
 8001246:	429a      	cmp	r2, r3
 8001248:	d107      	bne.n	800125a <HAL_RTC_AlarmAEventCallback+0x9a>
 800124a:	4b08      	ldr	r3, [pc, #32]	@ (800126c <HAL_RTC_AlarmAEventCallback+0xac>)
 800124c:	78da      	ldrb	r2, [r3, #3]
 800124e:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8001250:	78db      	ldrb	r3, [r3, #3]
 8001252:	429a      	cmp	r2, r3
 8001254:	d101      	bne.n	800125a <HAL_RTC_AlarmAEventCallback+0x9a>
		  userAlarmBeep();
 8001256:	f000 f80d 	bl	8001274 <userAlarmBeep>
	  }

}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b00d      	add	sp, #52	@ 0x34
 8001260:	bd90      	pop	{r4, r7, pc}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	20000028 	.word	0x20000028
 8001268:	2000007d 	.word	0x2000007d
 800126c:	20000098 	.word	0x20000098
 8001270:	20000080 	.word	0x20000080

08001274 <userAlarmBeep>:

void userAlarmBeep() {
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 800127a:	4b37      	ldr	r3, [pc, #220]	@ (8001358 <userAlarmBeep+0xe4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	0018      	movs	r0, r3
 8001280:	f003 fee8 	bl	8005054 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001284:	4b34      	ldr	r3, [pc, #208]	@ (8001358 <userAlarmBeep+0xe4>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	0018      	movs	r0, r3
 800128a:	f003 fe97 	bl	8004fbc <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 800128e:	4b32      	ldr	r3, [pc, #200]	@ (8001358 <userAlarmBeep+0xe4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001296:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001298:	1cfb      	adds	r3, r7, #3
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 800129e:	f7ff ff61 	bl	8001164 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 80012a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001358 <userAlarmBeep+0xe4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	4a2b      	ldr	r2, [pc, #172]	@ (800135c <userAlarmBeep+0xe8>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d922      	bls.n	80012fa <userAlarmBeep+0x86>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 80012b4:	1cfb      	adds	r3, r7, #3
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4a29      	ldr	r2, [pc, #164]	@ (8001360 <userAlarmBeep+0xec>)
 80012ba:	5cd3      	ldrb	r3, [r2, r3]
 80012bc:	0018      	movs	r0, r3
 80012be:	f000 fd1b 	bl	8001cf8 <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(buzzerPort, buzzerPin);					// Toggle Buzzer
 80012c2:	4b28      	ldr	r3, [pc, #160]	@ (8001364 <userAlarmBeep+0xf0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2280      	movs	r2, #128	@ 0x80
 80012c8:	0052      	lsls	r2, r2, #1
 80012ca:	0011      	movs	r1, r2
 80012cc:	0018      	movs	r0, r3
 80012ce:	f001 fa27 	bl	8002720 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80012d2:	4b21      	ldr	r3, [pc, #132]	@ (8001358 <userAlarmBeep+0xe4>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012da:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80012dc:	1cfb      	adds	r3, r7, #3
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	1e5a      	subs	r2, r3, #1
 80012e2:	4193      	sbcs	r3, r2
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2201      	movs	r2, #1
 80012e8:	4053      	eors	r3, r2
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	001a      	movs	r2, r3
 80012ee:	1cfb      	adds	r3, r7, #3
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	2101      	movs	r1, #1
 80012f6:	400a      	ands	r2, r1
 80012f8:	701a      	strb	r2, [r3, #0]

		}


		HAL_StatusTypeDef halRet = capTouch_readChannels(&capTouch);
 80012fa:	1cbc      	adds	r4, r7, #2
 80012fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001368 <userAlarmBeep+0xf4>)
 80012fe:	0018      	movs	r0, r3
 8001300:	f7ff f8dc 	bl	80004bc <capTouch_readChannels>
 8001304:	0003      	movs	r3, r0
 8001306:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK)
 8001308:	1cbb      	adds	r3, r7, #2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <userAlarmBeep+0xa0>
			dispError();
 8001310:	f000 fad8 	bl	80018c4 <dispError>

	} while(capTouch.keyStat == 0x00);
 8001314:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <userAlarmBeep+0xf4>)
 8001316:	7c1b      	ldrb	r3, [r3, #16]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0c0      	beq.n	800129e <userAlarmBeep+0x2a>

	HAL_TIM_Base_Stop(timerDelay);
 800131c:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <userAlarmBeep+0xe4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	0018      	movs	r0, r3
 8001322:	f003 fe97 	bl	8005054 <HAL_TIM_Base_Stop>
	HAL_GPIO_WritePin(buzzerPort, buzzerPin, GPIO_PIN_RESET);
 8001326:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <userAlarmBeep+0xf0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2280      	movs	r2, #128	@ 0x80
 800132c:	0051      	lsls	r1, r2, #1
 800132e:	2200      	movs	r2, #0
 8001330:	0018      	movs	r0, r3
 8001332:	f001 f9d8 	bl	80026e6 <HAL_GPIO_WritePin>
	updateAndDisplayTime();				// Update to current time and display
 8001336:	f7ff ff15 	bl	8001164 <updateAndDisplayTime>
	sevSeg_setIntensity(sevSeg_intensityDuty[1]);	// Toggle 0% to 50% duty cycle
 800133a:	235a      	movs	r3, #90	@ 0x5a
 800133c:	0018      	movs	r0, r3
 800133e:	f000 fcdb 	bl	8001cf8 <sevSeg_setIntensity>


	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <userAlarmBeep+0xf8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2201      	movs	r2, #1
 8001348:	0011      	movs	r1, r2
 800134a:	0018      	movs	r0, r3
 800134c:	f001 f9e8 	bl	8002720 <HAL_GPIO_TogglePin>

}
 8001350:	46c0      	nop			@ (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	b003      	add	sp, #12
 8001356:	bd90      	pop	{r4, r7, pc}
 8001358:	20000034 	.word	0x20000034
 800135c:	00007ffe 	.word	0x00007ffe
 8001360:	08005d0c 	.word	0x08005d0c
 8001364:	20000010 	.word	0x20000010
 8001368:	200001c8 	.word	0x200001c8
 800136c:	20000028 	.word	0x20000028

08001370 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	0002      	movs	r2, r0
 8001378:	1dbb      	adds	r3, r7, #6
 800137a:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 800137c:	2208      	movs	r2, #8
 800137e:	1dbb      	adds	r3, r7, #6
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	4293      	cmp	r3, r2
 8001384:	d106      	bne.n	8001394 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 8001386:	230f      	movs	r3, #15
 8001388:	18fc      	adds	r4, r7, r3
 800138a:	f000 f839 	bl	8001400 <displayButtonISR>
 800138e:	0003      	movs	r3, r0
 8001390:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8001392:	e031      	b.n	80013f8 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8001394:	2204      	movs	r2, #4
 8001396:	1dbb      	adds	r3, r7, #6
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	4293      	cmp	r3, r2
 800139c:	d106      	bne.n	80013ac <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 800139e:	230f      	movs	r3, #15
 80013a0:	18fc      	adds	r4, r7, r3
 80013a2:	f000 f855 	bl	8001450 <alarmEnableISR>
 80013a6:	0003      	movs	r3, r0
 80013a8:	7023      	strb	r3, [r4, #0]
}
 80013aa:	e025      	b.n	80013f8 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 80013ac:	2380      	movs	r3, #128	@ 0x80
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	1dba      	adds	r2, r7, #6
 80013b2:	8812      	ldrh	r2, [r2, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d106      	bne.n	80013c6 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 80013b8:	230f      	movs	r3, #15
 80013ba:	18fc      	adds	r4, r7, r3
 80013bc:	f000 f87c 	bl	80014b8 <alarmSetISR>
 80013c0:	0003      	movs	r3, r0
 80013c2:	7023      	strb	r3, [r4, #0]
}
 80013c4:	e018      	b.n	80013f8 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 80013c6:	2201      	movs	r2, #1
 80013c8:	1dbb      	adds	r3, r7, #6
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d106      	bne.n	80013de <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 80013d0:	230f      	movs	r3, #15
 80013d2:	18fc      	adds	r4, r7, r3
 80013d4:	f000 f940 	bl	8001658 <hourSetISR>
 80013d8:	0003      	movs	r3, r0
 80013da:	7023      	strb	r3, [r4, #0]
}
 80013dc:	e00c      	b.n	80013f8 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 80013de:	2202      	movs	r2, #2
 80013e0:	1dbb      	adds	r3, r7, #6
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d106      	bne.n	80013f6 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 80013e8:	230f      	movs	r3, #15
 80013ea:	18fc      	adds	r4, r7, r3
 80013ec:	f000 f960 	bl	80016b0 <minuteSetISR>
 80013f0:	0003      	movs	r3, r0
 80013f2:	7023      	strb	r3, [r4, #0]
}
 80013f4:	e000      	b.n	80013f8 <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 80013f6:	46c0      	nop			@ (mov r8, r8)
}
 80013f8:	46c0      	nop			@ (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b005      	add	sp, #20
 80013fe:	bd90      	pop	{r4, r7, pc}

08001400 <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001406:	1dfb      	adds	r3, r7, #7
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 800140c:	f7ff feaa 	bl	8001164 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8001410:	4b0d      	ldr	r3, [pc, #52]	@ (8001448 <displayButtonISR+0x48>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	001a      	movs	r2, r3
 8001416:	4b0d      	ldr	r3, [pc, #52]	@ (800144c <displayButtonISR+0x4c>)
 8001418:	5c9b      	ldrb	r3, [r3, r2]
 800141a:	0018      	movs	r0, r3
 800141c:	f000 fc6c 	bl	8001cf8 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8001420:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <displayButtonISR+0x48>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d903      	bls.n	8001430 <displayButtonISR+0x30>
		displayToggle = 0;
 8001428:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <displayButtonISR+0x48>)
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
 800142e:	e005      	b.n	800143c <displayButtonISR+0x3c>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <displayButtonISR+0x48>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	3301      	adds	r3, #1
 8001436:	b2da      	uxtb	r2, r3
 8001438:	4b03      	ldr	r3, [pc, #12]	@ (8001448 <displayButtonISR+0x48>)
 800143a:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	781b      	ldrb	r3, [r3, #0]

}
 8001440:	0018      	movs	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	b002      	add	sp, #8
 8001446:	bd80      	pop	{r7, pc}
 8001448:	2000007c 	.word	0x2000007c
 800144c:	08005d0c 	.word	0x08005d0c

08001450 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 800145c:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <alarmEnableISR+0x60>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2201      	movs	r2, #1
 8001462:	4053      	eors	r3, r2
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00b      	beq.n	8001482 <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 800146a:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <alarmEnableISR+0x64>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2280      	movs	r2, #128	@ 0x80
 8001470:	0151      	lsls	r1, r2, #5
 8001472:	2201      	movs	r2, #1
 8001474:	0018      	movs	r0, r3
 8001476:	f001 f936 	bl	80026e6 <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 800147a:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <alarmEnableISR+0x60>)
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
 8001480:	e010      	b.n	80014a4 <alarmEnableISR+0x54>

		//printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
								//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8001482:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <alarmEnableISR+0x60>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00b      	beq.n	80014a2 <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 800148a:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <alarmEnableISR+0x64>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2280      	movs	r2, #128	@ 0x80
 8001490:	0151      	lsls	r1, r2, #5
 8001492:	2200      	movs	r2, #0
 8001494:	0018      	movs	r0, r3
 8001496:	f001 f926 	bl	80026e6 <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 800149a:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <alarmEnableISR+0x60>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
 80014a0:	e000      	b.n	80014a4 <alarmEnableISR+0x54>

		//printf("User alarm disabled.\n\r");
	}
	else {
		__NOP();							//Code should never reach here.
 80014a2:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 80014a4:	1dfb      	adds	r3, r7, #7
 80014a6:	781b      	ldrb	r3, [r3, #0]

}
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2000007d 	.word	0x2000007d
 80014b4:	2000000c 	.word	0x2000000c

080014b8 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
	//printf("Enter user alarm set ISR.\n\r");

	//printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
			//userAlarmTime.Minutes, userAlarmTime.Seconds);

	HAL_StatusTypeDef halRet = HAL_OK;
 80014be:	1cbb      	adds	r3, r7, #2
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for switch debounce
	 */

	// First wait for button to deactivate again
	while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_SET);
 80014c4:	46c0      	nop			@ (mov r8, r8)
 80014c6:	4b60      	ldr	r3, [pc, #384]	@ (8001648 <alarmSetISR+0x190>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2280      	movs	r2, #128	@ 0x80
 80014cc:	0212      	lsls	r2, r2, #8
 80014ce:	0011      	movs	r1, r2
 80014d0:	0018      	movs	r0, r3
 80014d2:	f001 f8eb 	bl	80026ac <HAL_GPIO_ReadPin>
 80014d6:	0003      	movs	r3, r0
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d1f4      	bne.n	80014c6 <alarmSetISR+0xe>

	// Go through debounce
	HAL_TIM_Base_Stop(timerDelay);
 80014dc:	4b5b      	ldr	r3, [pc, #364]	@ (800164c <alarmSetISR+0x194>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	0018      	movs	r0, r3
 80014e2:	f003 fdb7 	bl	8005054 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80014e6:	4b59      	ldr	r3, [pc, #356]	@ (800164c <alarmSetISR+0x194>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	0018      	movs	r0, r3
 80014ec:	f003 fd66 	bl	8004fbc <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80014f0:	4b56      	ldr	r3, [pc, #344]	@ (800164c <alarmSetISR+0x194>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f8:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 8));
 80014fa:	4b54      	ldr	r3, [pc, #336]	@ (800164c <alarmSetISR+0x194>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	1ad2      	subs	r2, r2, r3
 8001506:	2380      	movs	r3, #128	@ 0x80
 8001508:	019b      	lsls	r3, r3, #6
 800150a:	429a      	cmp	r2, r3
 800150c:	d9f5      	bls.n	80014fa <alarmSetISR+0x42>


	/*
	 *  Poll for 1 second to see if the alarm set button is pressed again
	 */
	HAL_TIM_Base_Stop(timerDelay);
 800150e:	4b4f      	ldr	r3, [pc, #316]	@ (800164c <alarmSetISR+0x194>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	0018      	movs	r0, r3
 8001514:	f003 fd9e 	bl	8005054 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001518:	4b4c      	ldr	r3, [pc, #304]	@ (800164c <alarmSetISR+0x194>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	0018      	movs	r0, r3
 800151e:	f003 fd4d 	bl	8004fbc <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001522:	4b4a      	ldr	r3, [pc, #296]	@ (800164c <alarmSetISR+0x194>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152a:	607b      	str	r3, [r7, #4]

	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 800152c:	e00d      	b.n	800154a <alarmSetISR+0x92>

		if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 800152e:	4b46      	ldr	r3, [pc, #280]	@ (8001648 <alarmSetISR+0x190>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2280      	movs	r2, #128	@ 0x80
 8001534:	0212      	lsls	r2, r2, #8
 8001536:	0011      	movs	r1, r2
 8001538:	0018      	movs	r0, r3
 800153a:	f001 f8b7 	bl	80026ac <HAL_GPIO_ReadPin>
 800153e:	1e03      	subs	r3, r0, #0
 8001540:	d103      	bne.n	800154a <alarmSetISR+0x92>
			alarmSetMode = true;
 8001542:	4b43      	ldr	r3, [pc, #268]	@ (8001650 <alarmSetISR+0x198>)
 8001544:	2201      	movs	r2, #1
 8001546:	701a      	strb	r2, [r3, #0]
//			HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
			break;
 8001548:	e009      	b.n	800155e <alarmSetISR+0xa6>
	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 800154a:	4b40      	ldr	r3, [pc, #256]	@ (800164c <alarmSetISR+0x194>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	1ad2      	subs	r2, r2, r3
 8001556:	2380      	movs	r3, #128	@ 0x80
 8001558:	025b      	lsls	r3, r3, #9
 800155a:	429a      	cmp	r2, r3
 800155c:	d9e7      	bls.n	800152e <alarmSetISR+0x76>
		}

	}

	// Go through debounce once again
	HAL_TIM_Base_Stop(timerDelay);
 800155e:	4b3b      	ldr	r3, [pc, #236]	@ (800164c <alarmSetISR+0x194>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	0018      	movs	r0, r3
 8001564:	f003 fd76 	bl	8005054 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001568:	4b38      	ldr	r3, [pc, #224]	@ (800164c <alarmSetISR+0x194>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	0018      	movs	r0, r3
 800156e:	f003 fd25 	bl	8004fbc <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001572:	4b36      	ldr	r3, [pc, #216]	@ (800164c <alarmSetISR+0x194>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157a:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 4));
 800157c:	4b33      	ldr	r3, [pc, #204]	@ (800164c <alarmSetISR+0x194>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	1ad2      	subs	r2, r2, r3
 8001588:	2380      	movs	r3, #128	@ 0x80
 800158a:	01db      	lsls	r3, r3, #7
 800158c:	429a      	cmp	r2, r3
 800158e:	d9f5      	bls.n	800157c <alarmSetISR+0xc4>
	/*
	 * Then, if we are in alarm set mode, go through the
	 * alarm set process until the button is pressed again
	 */

	HAL_TIM_Base_Stop(timerDelay);
 8001590:	4b2e      	ldr	r3, [pc, #184]	@ (800164c <alarmSetISR+0x194>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	0018      	movs	r0, r3
 8001596:	f003 fd5d 	bl	8005054 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 800159a:	4b2c      	ldr	r3, [pc, #176]	@ (800164c <alarmSetISR+0x194>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	0018      	movs	r0, r3
 80015a0:	f003 fd0c 	bl	8004fbc <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80015a4:	4b29      	ldr	r3, [pc, #164]	@ (800164c <alarmSetISR+0x194>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ac:	607b      	str	r3, [r7, #4]

	if(alarmSetMode) {
 80015ae:	4b28      	ldr	r3, [pc, #160]	@ (8001650 <alarmSetISR+0x198>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d03e      	beq.n	8001634 <alarmSetISR+0x17c>

		bool displayBlink = false;
 80015b6:	1cfb      	adds	r3, r7, #3
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			updateAndDisplayAlarm();
 80015bc:	f7ff fdee 	bl	800119c <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 80015c0:	4b22      	ldr	r3, [pc, #136]	@ (800164c <alarmSetISR+0x194>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	1ad2      	subs	r2, r2, r3
 80015cc:	2380      	movs	r3, #128	@ 0x80
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d31a      	bcc.n	800160a <alarmSetISR+0x152>

//				HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 80015d4:	1cfb      	adds	r3, r7, #3
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001654 <alarmSetISR+0x19c>)
 80015da:	5cd3      	ldrb	r3, [r2, r3]
 80015dc:	0018      	movs	r0, r3
 80015de:	f000 fb8b 	bl	8001cf8 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 80015e2:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <alarmSetISR+0x194>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ea:	607b      	str	r3, [r7, #4]
				displayBlink = !displayBlink;
 80015ec:	1cfb      	adds	r3, r7, #3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	1e5a      	subs	r2, r3, #1
 80015f2:	4193      	sbcs	r3, r2
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2201      	movs	r2, #1
 80015f8:	4053      	eors	r3, r2
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	001a      	movs	r2, r3
 80015fe:	1cfb      	adds	r3, r7, #3
 8001600:	701a      	strb	r2, [r3, #0]
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	2101      	movs	r1, #1
 8001606:	400a      	ands	r2, r1
 8001608:	701a      	strb	r2, [r3, #0]

			}

		}while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET);
 800160a:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <alarmSetISR+0x190>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2280      	movs	r2, #128	@ 0x80
 8001610:	0212      	lsls	r2, r2, #8
 8001612:	0011      	movs	r1, r2
 8001614:	0018      	movs	r0, r3
 8001616:	f001 f849 	bl	80026ac <HAL_GPIO_ReadPin>
 800161a:	1e03      	subs	r3, r0, #0
 800161c:	d1ce      	bne.n	80015bc <alarmSetISR+0x104>

//		HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_RESET);

		sevSeg_setIntensity(sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 800161e:	235a      	movs	r3, #90	@ 0x5a
 8001620:	0018      	movs	r0, r3
 8001622:	f000 fb69 	bl	8001cf8 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 8001626:	4b09      	ldr	r3, [pc, #36]	@ (800164c <alarmSetISR+0x194>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	0018      	movs	r0, r3
 800162c:	f003 fd12 	bl	8005054 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8001630:	f7ff fd98 	bl	8001164 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <alarmSetISR+0x198>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 800163a:	1cbb      	adds	r3, r7, #2
 800163c:	781b      	ldrb	r3, [r3, #0]

}
 800163e:	0018      	movs	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	b002      	add	sp, #8
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			@ (mov r8, r8)
 8001648:	20000000 	.word	0x20000000
 800164c:	20000034 	.word	0x20000034
 8001650:	200001c4 	.word	0x200001c4
 8001654:	08005d0c 	.word	0x08005d0c

08001658 <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0

//	printf("Entered hour set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);


	HAL_StatusTypeDef halRet = HAL_OK;
 800165e:	1dfb      	adds	r3, r7, #7
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001664:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <hourSetISR+0x48>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <hourSetISR+0x1a>

		alarmHourInc();
 800166c:	f000 f87c 	bl	8001768 <alarmHourInc>
 8001670:	e00f      	b.n	8001692 <hourSetISR+0x3a>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 8001672:	f000 f8a7 	bl	80017c4 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001676:	490b      	ldr	r1, [pc, #44]	@ (80016a4 <hourSetISR+0x4c>)
 8001678:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <hourSetISR+0x50>)
 800167a:	2200      	movs	r2, #0
 800167c:	0018      	movs	r0, r3
 800167e:	f002 fe79 	bl	8004374 <HAL_RTC_SetTime>


		updateAndDisplayTime();
 8001682:	f7ff fd6f 	bl	8001164 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001686:	4a09      	ldr	r2, [pc, #36]	@ (80016ac <hourSetISR+0x54>)
 8001688:	4906      	ldr	r1, [pc, #24]	@ (80016a4 <hourSetISR+0x4c>)
 800168a:	4b07      	ldr	r3, [pc, #28]	@ (80016a8 <hourSetISR+0x50>)
 800168c:	0018      	movs	r0, r3
 800168e:	f7ff f9a1 	bl	80009d4 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 8001692:	1dfb      	adds	r3, r7, #7
 8001694:	781b      	ldrb	r3, [r3, #0]

}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	b002      	add	sp, #8
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			@ (mov r8, r8)
 80016a0:	200001c4 	.word	0x200001c4
 80016a4:	20000080 	.word	0x20000080
 80016a8:	20000100 	.word	0x20000100
 80016ac:	20000094 	.word	0x20000094

080016b0 <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08c      	sub	sp, #48	@ 0x30
 80016b4:	af00      	add	r7, sp, #0

//	printf("Entered minute set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

	HAL_StatusTypeDef halRet = HAL_OK;
 80016b6:	232f      	movs	r3, #47	@ 0x2f
 80016b8:	18fb      	adds	r3, r7, r3
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80016be:	4b25      	ldr	r3, [pc, #148]	@ (8001754 <minuteSetISR+0xa4>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <minuteSetISR+0x1c>

		alarmMinuteInc();
 80016c6:	f000 f8b7 	bl	8001838 <alarmMinuteInc>
 80016ca:	e03b      	b.n	8001744 <minuteSetISR+0x94>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 80016cc:	f000 f8d2 	bl	8001874 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80016d0:	4921      	ldr	r1, [pc, #132]	@ (8001758 <minuteSetISR+0xa8>)
 80016d2:	4b22      	ldr	r3, [pc, #136]	@ (800175c <minuteSetISR+0xac>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	0018      	movs	r0, r3
 80016d8:	f002 fe4c 	bl	8004374 <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	0018      	movs	r0, r3
 80016e0:	2328      	movs	r3, #40	@ 0x28
 80016e2:	001a      	movs	r2, r3
 80016e4:	2100      	movs	r1, #0
 80016e6:	f004 fabd 	bl	8005c64 <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 80016ea:	2380      	movs	r3, #128	@ 0x80
 80016ec:	005a      	lsls	r2, r3, #1
 80016ee:	1d39      	adds	r1, r7, #4
 80016f0:	481a      	ldr	r0, [pc, #104]	@ (800175c <minuteSetISR+0xac>)
 80016f2:	2300      	movs	r3, #0
 80016f4:	f003 f962 	bl	80049bc <HAL_RTC_GetAlarm>

		if(sAlarm.AlarmTime.Minutes>58) {
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	785b      	ldrb	r3, [r3, #1]
 80016fc:	2b3a      	cmp	r3, #58	@ 0x3a
 80016fe:	d903      	bls.n	8001708 <minuteSetISR+0x58>
			sAlarm.AlarmTime.Minutes=0;
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2200      	movs	r2, #0
 8001704:	705a      	strb	r2, [r3, #1]
 8001706:	e00d      	b.n	8001724 <minuteSetISR+0x74>
			//printf("Reset alarm time\n\r");
		} else {
			sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	785b      	ldrb	r3, [r3, #1]
 800170c:	3301      	adds	r3, #1
 800170e:	b2da      	uxtb	r2, r3
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001714:	e006      	b.n	8001724 <minuteSetISR+0x74>
			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 8001716:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <minuteSetISR+0xb0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2201      	movs	r2, #1
 800171c:	0011      	movs	r1, r2
 800171e:	0018      	movs	r0, r3
 8001720:	f000 fffe 	bl	8002720 <HAL_GPIO_TogglePin>
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001724:	1d39      	adds	r1, r7, #4
 8001726:	4b0d      	ldr	r3, [pc, #52]	@ (800175c <minuteSetISR+0xac>)
 8001728:	2200      	movs	r2, #0
 800172a:	0018      	movs	r0, r3
 800172c:	f003 f806 	bl	800473c <HAL_RTC_SetAlarm_IT>
 8001730:	1e03      	subs	r3, r0, #0
 8001732:	d1f0      	bne.n	8001716 <minuteSetISR+0x66>
		}


		updateAndDisplayTime();
 8001734:	f7ff fd16 	bl	8001164 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001738:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <minuteSetISR+0xb4>)
 800173a:	4907      	ldr	r1, [pc, #28]	@ (8001758 <minuteSetISR+0xa8>)
 800173c:	4b07      	ldr	r3, [pc, #28]	@ (800175c <minuteSetISR+0xac>)
 800173e:	0018      	movs	r0, r3
 8001740:	f7ff f948 	bl	80009d4 <getRTCTime>

		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 8001744:	232f      	movs	r3, #47	@ 0x2f
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	781b      	ldrb	r3, [r3, #0]
}
 800174a:	0018      	movs	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	b00c      	add	sp, #48	@ 0x30
 8001750:	bd80      	pop	{r7, pc}
 8001752:	46c0      	nop			@ (mov r8, r8)
 8001754:	200001c4 	.word	0x200001c4
 8001758:	20000080 	.word	0x20000080
 800175c:	20000100 	.word	0x20000100
 8001760:	20000028 	.word	0x20000028
 8001764:	20000094 	.word	0x20000094

08001768 <alarmHourInc>:

void alarmHourInc(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 800176c:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <alarmHourInc+0x58>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b0b      	cmp	r3, #11
 8001772:	d903      	bls.n	800177c <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8001774:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <alarmHourInc+0x58>)
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 800177a:	e01e      	b.n	80017ba <alarmHourInc+0x52>
	else if(userAlarmTime.Hours == 11) {
 800177c:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <alarmHourInc+0x58>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b0b      	cmp	r3, #11
 8001782:	d10e      	bne.n	80017a2 <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001784:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <alarmHourInc+0x58>)
 8001786:	78db      	ldrb	r3, [r3, #3]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d103      	bne.n	8001794 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800178c:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <alarmHourInc+0x58>)
 800178e:	2201      	movs	r2, #1
 8001790:	70da      	strb	r2, [r3, #3]
 8001792:	e002      	b.n	800179a <alarmHourInc+0x32>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001794:	4b0a      	ldr	r3, [pc, #40]	@ (80017c0 <alarmHourInc+0x58>)
 8001796:	2200      	movs	r2, #0
 8001798:	70da      	strb	r2, [r3, #3]
		userAlarmTime.Hours = 12;
 800179a:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <alarmHourInc+0x58>)
 800179c:	220c      	movs	r2, #12
 800179e:	701a      	strb	r2, [r3, #0]
}
 80017a0:	e00b      	b.n	80017ba <alarmHourInc+0x52>
	else if(userAlarmTime.Hours < 11) {
 80017a2:	4b07      	ldr	r3, [pc, #28]	@ (80017c0 <alarmHourInc+0x58>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b0a      	cmp	r3, #10
 80017a8:	d806      	bhi.n	80017b8 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 80017aa:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <alarmHourInc+0x58>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4b03      	ldr	r3, [pc, #12]	@ (80017c0 <alarmHourInc+0x58>)
 80017b4:	701a      	strb	r2, [r3, #0]
}
 80017b6:	e000      	b.n	80017ba <alarmHourInc+0x52>
		__NOP();
 80017b8:	46c0      	nop			@ (mov r8, r8)
}
 80017ba:	46c0      	nop			@ (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000098 	.word	0x20000098

080017c4 <currHourInc>:

void currHourInc(void) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 80017c8:	4a17      	ldr	r2, [pc, #92]	@ (8001828 <currHourInc+0x64>)
 80017ca:	4918      	ldr	r1, [pc, #96]	@ (800182c <currHourInc+0x68>)
 80017cc:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <currHourInc+0x6c>)
 80017ce:	0018      	movs	r0, r3
 80017d0:	f7ff f900 	bl	80009d4 <getRTCTime>

	if(currTime.Hours >= 12) {
 80017d4:	4b15      	ldr	r3, [pc, #84]	@ (800182c <currHourInc+0x68>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b0b      	cmp	r3, #11
 80017da:	d903      	bls.n	80017e4 <currHourInc+0x20>
		currTime.Hours = 1;
 80017dc:	4b13      	ldr	r3, [pc, #76]	@ (800182c <currHourInc+0x68>)
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 80017e2:	e01e      	b.n	8001822 <currHourInc+0x5e>
	else if(currTime.Hours == 11) {
 80017e4:	4b11      	ldr	r3, [pc, #68]	@ (800182c <currHourInc+0x68>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b0b      	cmp	r3, #11
 80017ea:	d10e      	bne.n	800180a <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <currHourInc+0x68>)
 80017ee:	78db      	ldrb	r3, [r3, #3]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d103      	bne.n	80017fc <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80017f4:	4b0d      	ldr	r3, [pc, #52]	@ (800182c <currHourInc+0x68>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	70da      	strb	r2, [r3, #3]
 80017fa:	e002      	b.n	8001802 <currHourInc+0x3e>
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80017fc:	4b0b      	ldr	r3, [pc, #44]	@ (800182c <currHourInc+0x68>)
 80017fe:	2200      	movs	r2, #0
 8001800:	70da      	strb	r2, [r3, #3]
		currTime.Hours = 12;
 8001802:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <currHourInc+0x68>)
 8001804:	220c      	movs	r2, #12
 8001806:	701a      	strb	r2, [r3, #0]
}
 8001808:	e00b      	b.n	8001822 <currHourInc+0x5e>
	else if(userAlarmTime.Hours < 11) {
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <currHourInc+0x70>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b0a      	cmp	r3, #10
 8001810:	d806      	bhi.n	8001820 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 8001812:	4b06      	ldr	r3, [pc, #24]	@ (800182c <currHourInc+0x68>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	3301      	adds	r3, #1
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4b04      	ldr	r3, [pc, #16]	@ (800182c <currHourInc+0x68>)
 800181c:	701a      	strb	r2, [r3, #0]
}
 800181e:	e000      	b.n	8001822 <currHourInc+0x5e>
		__NOP();
 8001820:	46c0      	nop			@ (mov r8, r8)
}
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000094 	.word	0x20000094
 800182c:	20000080 	.word	0x20000080
 8001830:	20000100 	.word	0x20000100
 8001834:	20000098 	.word	0x20000098

08001838 <alarmMinuteInc>:

void alarmMinuteInc(void) {
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 800183c:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <alarmMinuteInc+0x38>)
 800183e:	785b      	ldrb	r3, [r3, #1]
 8001840:	2b3a      	cmp	r3, #58	@ 0x3a
 8001842:	d905      	bls.n	8001850 <alarmMinuteInc+0x18>
		alarmHourInc();
 8001844:	f7ff ff90 	bl	8001768 <alarmHourInc>
		userAlarmTime.Minutes = 0;
 8001848:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <alarmMinuteInc+0x38>)
 800184a:	2200      	movs	r2, #0
 800184c:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 800184e:	e00b      	b.n	8001868 <alarmMinuteInc+0x30>
	else if(userAlarmTime.Minutes < 59) {
 8001850:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <alarmMinuteInc+0x38>)
 8001852:	785b      	ldrb	r3, [r3, #1]
 8001854:	2b3a      	cmp	r3, #58	@ 0x3a
 8001856:	d806      	bhi.n	8001866 <alarmMinuteInc+0x2e>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8001858:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <alarmMinuteInc+0x38>)
 800185a:	785b      	ldrb	r3, [r3, #1]
 800185c:	3301      	adds	r3, #1
 800185e:	b2da      	uxtb	r2, r3
 8001860:	4b03      	ldr	r3, [pc, #12]	@ (8001870 <alarmMinuteInc+0x38>)
 8001862:	705a      	strb	r2, [r3, #1]
}
 8001864:	e000      	b.n	8001868 <alarmMinuteInc+0x30>
		__NOP();
 8001866:	46c0      	nop			@ (mov r8, r8)
}
 8001868:	46c0      	nop			@ (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	46c0      	nop			@ (mov r8, r8)
 8001870:	20000098 	.word	0x20000098

08001874 <currMinuteInc>:

void currMinuteInc(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001878:	4a0f      	ldr	r2, [pc, #60]	@ (80018b8 <currMinuteInc+0x44>)
 800187a:	4910      	ldr	r1, [pc, #64]	@ (80018bc <currMinuteInc+0x48>)
 800187c:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <currMinuteInc+0x4c>)
 800187e:	0018      	movs	r0, r3
 8001880:	f7ff f8a8 	bl	80009d4 <getRTCTime>

	// If current time is going to rollover,
	// increment the hour and reset the minute.
	if(currTime.Minutes >= 59) {
 8001884:	4b0d      	ldr	r3, [pc, #52]	@ (80018bc <currMinuteInc+0x48>)
 8001886:	785b      	ldrb	r3, [r3, #1]
 8001888:	2b3a      	cmp	r3, #58	@ 0x3a
 800188a:	d905      	bls.n	8001898 <currMinuteInc+0x24>
		currHourInc();
 800188c:	f7ff ff9a 	bl	80017c4 <currHourInc>
		currTime.Minutes = 0;
 8001890:	4b0a      	ldr	r3, [pc, #40]	@ (80018bc <currMinuteInc+0x48>)
 8001892:	2200      	movs	r2, #0
 8001894:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 8001896:	e00b      	b.n	80018b0 <currMinuteInc+0x3c>
	else if(currTime.Minutes < 59) {
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <currMinuteInc+0x48>)
 800189a:	785b      	ldrb	r3, [r3, #1]
 800189c:	2b3a      	cmp	r3, #58	@ 0x3a
 800189e:	d806      	bhi.n	80018ae <currMinuteInc+0x3a>
		currTime.Minutes = currTime.Minutes + 1;
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <currMinuteInc+0x48>)
 80018a2:	785b      	ldrb	r3, [r3, #1]
 80018a4:	3301      	adds	r3, #1
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <currMinuteInc+0x48>)
 80018aa:	705a      	strb	r2, [r3, #1]
}
 80018ac:	e000      	b.n	80018b0 <currMinuteInc+0x3c>
		__NOP();
 80018ae:	46c0      	nop			@ (mov r8, r8)
}
 80018b0:	46c0      	nop			@ (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	20000094 	.word	0x20000094
 80018bc:	20000080 	.word	0x20000080
 80018c0:	20000100 	.word	0x20000100

080018c4 <dispError>:

void dispError(void) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 80018ca:	4b1c      	ldr	r3, [pc, #112]	@ (800193c <dispError+0x78>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	0018      	movs	r0, r3
 80018d0:	f003 fbc0 	bl	8005054 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 80018d4:	4b19      	ldr	r3, [pc, #100]	@ (800193c <dispError+0x78>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	0018      	movs	r0, r3
 80018da:	f003 fb6f 	bl	8004fbc <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80018de:	4b17      	ldr	r3, [pc, #92]	@ (800193c <dispError+0x78>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e6:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 80018e8:	1cfb      	adds	r3, r7, #3
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 80018ee:	4b13      	ldr	r3, [pc, #76]	@ (800193c <dispError+0x78>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	4a11      	ldr	r2, [pc, #68]	@ (8001940 <dispError+0x7c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d9f6      	bls.n	80018ee <dispError+0x2a>

			HAL_GPIO_TogglePin(alarmLEDPort, alarmLEDPin);
 8001900:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <dispError+0x80>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2280      	movs	r2, #128	@ 0x80
 8001906:	0152      	lsls	r2, r2, #5
 8001908:	0011      	movs	r1, r2
 800190a:	0018      	movs	r0, r3
 800190c:	f000 ff08 	bl	8002720 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001910:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <dispError+0x78>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001918:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 800191a:	1cfb      	adds	r3, r7, #3
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	1e5a      	subs	r2, r3, #1
 8001920:	4193      	sbcs	r3, r2
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2201      	movs	r2, #1
 8001926:	4053      	eors	r3, r2
 8001928:	b2db      	uxtb	r3, r3
 800192a:	001a      	movs	r2, r3
 800192c:	1cfb      	adds	r3, r7, #3
 800192e:	701a      	strb	r2, [r3, #0]
 8001930:	781a      	ldrb	r2, [r3, #0]
 8001932:	2101      	movs	r1, #1
 8001934:	400a      	ands	r2, r1
 8001936:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001938:	e7d9      	b.n	80018ee <dispError+0x2a>
 800193a:	46c0      	nop			@ (mov r8, r8)
 800193c:	20000034 	.word	0x20000034
 8001940:	00003ffe 	.word	0x00003ffe
 8001944:	2000000c 	.word	0x2000000c

08001948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800194c:	b672      	cpsid	i
}
 800194e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001950:	46c0      	nop			@ (mov r8, r8)
 8001952:	e7fd      	b.n	8001950 <Error_Handler+0x8>

08001954 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8001954:	b5b0      	push	{r4, r5, r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	0005      	movs	r5, r0
 800195c:	000c      	movs	r4, r1
 800195e:	0010      	movs	r0, r2
 8001960:	0019      	movs	r1, r3
 8001962:	1dbb      	adds	r3, r7, #6
 8001964:	1c2a      	adds	r2, r5, #0
 8001966:	801a      	strh	r2, [r3, #0]
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	1c22      	adds	r2, r4, #0
 800196c:	801a      	strh	r2, [r3, #0]
 800196e:	1cbb      	adds	r3, r7, #2
 8001970:	1c02      	adds	r2, r0, #0
 8001972:	801a      	strh	r2, [r3, #0]
 8001974:	003b      	movs	r3, r7
 8001976:	1c0a      	adds	r2, r1, #0
 8001978:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 800197a:	4b7c      	ldr	r3, [pc, #496]	@ (8001b6c <sevSeg_Init+0x218>)
 800197c:	1dba      	adds	r2, r7, #6
 800197e:	8812      	ldrh	r2, [r2, #0]
 8001980:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8001982:	4b7b      	ldr	r3, [pc, #492]	@ (8001b70 <sevSeg_Init+0x21c>)
 8001984:	1d3a      	adds	r2, r7, #4
 8001986:	8812      	ldrh	r2, [r2, #0]
 8001988:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 800198a:	4b7a      	ldr	r3, [pc, #488]	@ (8001b74 <sevSeg_Init+0x220>)
 800198c:	1cba      	adds	r2, r7, #2
 800198e:	8812      	ldrh	r2, [r2, #0]
 8001990:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8001992:	4b79      	ldr	r3, [pc, #484]	@ (8001b78 <sevSeg_Init+0x224>)
 8001994:	003a      	movs	r2, r7
 8001996:	8812      	ldrh	r2, [r2, #0]
 8001998:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 800199a:	4a78      	ldr	r2, [pc, #480]	@ (8001b7c <sevSeg_Init+0x228>)
 800199c:	2330      	movs	r3, #48	@ 0x30
 800199e:	18fb      	adds	r3, r7, r3
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 80019a4:	4a76      	ldr	r2, [pc, #472]	@ (8001b80 <sevSeg_Init+0x22c>)
 80019a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019a8:	0010      	movs	r0, r2
 80019aa:	0019      	movs	r1, r3
 80019ac:	234c      	movs	r3, #76	@ 0x4c
 80019ae:	001a      	movs	r2, r3
 80019b0:	f004 f984 	bl	8005cbc <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 80019b4:	4b73      	ldr	r3, [pc, #460]	@ (8001b84 <sevSeg_Init+0x230>)
 80019b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80019b8:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	e00b      	b.n	80019d8 <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019c6:	18d3      	adds	r3, r2, r3
 80019c8:	6819      	ldr	r1, [r3, #0]
 80019ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001b88 <sevSeg_Init+0x234>)
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	0092      	lsls	r2, r2, #2
 80019d0:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3301      	adds	r3, #1
 80019d6:	61fb      	str	r3, [r7, #28]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	2b04      	cmp	r3, #4
 80019dc:	ddf0      	ble.n	80019c0 <sevSeg_Init+0x6c>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 80019de:	4b6a      	ldr	r3, [pc, #424]	@ (8001b88 <sevSeg_Init+0x234>)
 80019e0:	6918      	ldr	r0, [r3, #16]
 80019e2:	4b66      	ldr	r3, [pc, #408]	@ (8001b7c <sevSeg_Init+0x228>)
 80019e4:	8819      	ldrh	r1, [r3, #0]
 80019e6:	4b69      	ldr	r3, [pc, #420]	@ (8001b8c <sevSeg_Init+0x238>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	001a      	movs	r2, r3
 80019ec:	f000 fe7b 	bl	80026e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 80019f0:	4b65      	ldr	r3, [pc, #404]	@ (8001b88 <sevSeg_Init+0x234>)
 80019f2:	6918      	ldr	r0, [r3, #16]
 80019f4:	4b61      	ldr	r3, [pc, #388]	@ (8001b7c <sevSeg_Init+0x228>)
 80019f6:	8819      	ldrh	r1, [r3, #0]
 80019f8:	4b64      	ldr	r3, [pc, #400]	@ (8001b8c <sevSeg_Init+0x238>)
 80019fa:	785b      	ldrb	r3, [r3, #1]
 80019fc:	001a      	movs	r2, r3
 80019fe:	f000 fe72 	bl	80026e6 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001a02:	4b61      	ldr	r3, [pc, #388]	@ (8001b88 <sevSeg_Init+0x234>)
 8001a04:	6898      	ldr	r0, [r3, #8]
 8001a06:	4b5b      	ldr	r3, [pc, #364]	@ (8001b74 <sevSeg_Init+0x220>)
 8001a08:	8819      	ldrh	r1, [r3, #0]
 8001a0a:	4b60      	ldr	r3, [pc, #384]	@ (8001b8c <sevSeg_Init+0x238>)
 8001a0c:	785b      	ldrb	r3, [r3, #1]
 8001a0e:	001a      	movs	r2, r3
 8001a10:	f000 fe69 	bl	80026e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001a14:	4b5c      	ldr	r3, [pc, #368]	@ (8001b88 <sevSeg_Init+0x234>)
 8001a16:	6898      	ldr	r0, [r3, #8]
 8001a18:	4b56      	ldr	r3, [pc, #344]	@ (8001b74 <sevSeg_Init+0x220>)
 8001a1a:	8819      	ldrh	r1, [r3, #0]
 8001a1c:	4b5b      	ldr	r3, [pc, #364]	@ (8001b8c <sevSeg_Init+0x238>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	001a      	movs	r2, r3
 8001a22:	f000 fe60 	bl	80026e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8001a26:	4b58      	ldr	r3, [pc, #352]	@ (8001b88 <sevSeg_Init+0x234>)
 8001a28:	68d8      	ldr	r0, [r3, #12]
 8001a2a:	4b53      	ldr	r3, [pc, #332]	@ (8001b78 <sevSeg_Init+0x224>)
 8001a2c:	8819      	ldrh	r1, [r3, #0]
 8001a2e:	4b57      	ldr	r3, [pc, #348]	@ (8001b8c <sevSeg_Init+0x238>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	001a      	movs	r2, r3
 8001a34:	f000 fe57 	bl	80026e6 <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(50);
 8001a38:	2032      	movs	r0, #50	@ 0x32
 8001a3a:	f000 f95d 	bl	8001cf8 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8001a3e:	2308      	movs	r3, #8
 8001a40:	18fb      	adds	r3, r7, r3
 8001a42:	4a53      	ldr	r2, [pc, #332]	@ (8001b90 <sevSeg_Init+0x23c>)
 8001a44:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	e038      	b.n	8001abe <sevSeg_Init+0x16a>

		sendByte = hofSymb[i];
 8001a4c:	231b      	movs	r3, #27
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	2208      	movs	r2, #8
 8001a52:	18b9      	adds	r1, r7, r2
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	188a      	adds	r2, r1, r2
 8001a58:	7812      	ldrb	r2, [r2, #0]
 8001a5a:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	e027      	b.n	8001ab2 <sevSeg_Init+0x15e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001a62:	4b49      	ldr	r3, [pc, #292]	@ (8001b88 <sevSeg_Init+0x234>)
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	4b41      	ldr	r3, [pc, #260]	@ (8001b6c <sevSeg_Init+0x218>)
 8001a68:	8819      	ldrh	r1, [r3, #0]
 8001a6a:	241b      	movs	r4, #27
 8001a6c:	193b      	adds	r3, r7, r4
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2201      	movs	r2, #1
 8001a72:	4013      	ands	r3, r2
 8001a74:	4a45      	ldr	r2, [pc, #276]	@ (8001b8c <sevSeg_Init+0x238>)
 8001a76:	5cd3      	ldrb	r3, [r2, r3]
 8001a78:	001a      	movs	r2, r3
 8001a7a:	f000 fe34 	bl	80026e6 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001a7e:	4b42      	ldr	r3, [pc, #264]	@ (8001b88 <sevSeg_Init+0x234>)
 8001a80:	6858      	ldr	r0, [r3, #4]
 8001a82:	4b3b      	ldr	r3, [pc, #236]	@ (8001b70 <sevSeg_Init+0x21c>)
 8001a84:	8819      	ldrh	r1, [r3, #0]
 8001a86:	4b41      	ldr	r3, [pc, #260]	@ (8001b8c <sevSeg_Init+0x238>)
 8001a88:	785b      	ldrb	r3, [r3, #1]
 8001a8a:	001a      	movs	r2, r3
 8001a8c:	f000 fe2b 	bl	80026e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001a90:	4b3d      	ldr	r3, [pc, #244]	@ (8001b88 <sevSeg_Init+0x234>)
 8001a92:	6858      	ldr	r0, [r3, #4]
 8001a94:	4b36      	ldr	r3, [pc, #216]	@ (8001b70 <sevSeg_Init+0x21c>)
 8001a96:	8819      	ldrh	r1, [r3, #0]
 8001a98:	4b3c      	ldr	r3, [pc, #240]	@ (8001b8c <sevSeg_Init+0x238>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	001a      	movs	r2, r3
 8001a9e:	f000 fe22 	bl	80026e6 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001aa2:	193b      	adds	r3, r7, r4
 8001aa4:	193a      	adds	r2, r7, r4
 8001aa6:	7812      	ldrb	r2, [r2, #0]
 8001aa8:	0852      	lsrs	r2, r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	2b07      	cmp	r3, #7
 8001ab6:	ddd4      	ble.n	8001a62 <sevSeg_Init+0x10e>
	for(int i = 0; i <= 3; i++) {
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	3301      	adds	r3, #1
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	ddc3      	ble.n	8001a4c <sevSeg_Init+0xf8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001ac4:	4b30      	ldr	r3, [pc, #192]	@ (8001b88 <sevSeg_Init+0x234>)
 8001ac6:	6898      	ldr	r0, [r3, #8]
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b74 <sevSeg_Init+0x220>)
 8001aca:	8819      	ldrh	r1, [r3, #0]
 8001acc:	4b2f      	ldr	r3, [pc, #188]	@ (8001b8c <sevSeg_Init+0x238>)
 8001ace:	785b      	ldrb	r3, [r3, #1]
 8001ad0:	001a      	movs	r2, r3
 8001ad2:	f000 fe08 	bl	80026e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001ad6:	4b2c      	ldr	r3, [pc, #176]	@ (8001b88 <sevSeg_Init+0x234>)
 8001ad8:	6898      	ldr	r0, [r3, #8]
 8001ada:	4b26      	ldr	r3, [pc, #152]	@ (8001b74 <sevSeg_Init+0x220>)
 8001adc:	8819      	ldrh	r1, [r3, #0]
 8001ade:	4b2b      	ldr	r3, [pc, #172]	@ (8001b8c <sevSeg_Init+0x238>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	001a      	movs	r2, r3
 8001ae4:	f000 fdff 	bl	80026e6 <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8001ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001aea:	0018      	movs	r0, r3
 8001aec:	f003 fab2 	bl	8005054 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8001af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001af2:	0018      	movs	r0, r3
 8001af4:	f003 fa62 	bl	8004fbc <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8001af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afe:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8001b00:	46c0      	nop			@ (mov r8, r8)
 8001b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1ad2      	subs	r2, r2, r3
 8001b0c:	2380      	movs	r3, #128	@ 0x80
 8001b0e:	01db      	lsls	r3, r3, #7
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d3f6      	bcc.n	8001b02 <sevSeg_Init+0x1ae>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8001b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b16:	0018      	movs	r0, r3
 8001b18:	f003 fa9c 	bl	8005054 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b88 <sevSeg_Init+0x234>)
 8001b1e:	6918      	ldr	r0, [r3, #16]
 8001b20:	4b16      	ldr	r3, [pc, #88]	@ (8001b7c <sevSeg_Init+0x228>)
 8001b22:	8819      	ldrh	r1, [r3, #0]
 8001b24:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <sevSeg_Init+0x238>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	001a      	movs	r2, r3
 8001b2a:	f000 fddc 	bl	80026e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001b2e:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <sevSeg_Init+0x234>)
 8001b30:	6918      	ldr	r0, [r3, #16]
 8001b32:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <sevSeg_Init+0x228>)
 8001b34:	8819      	ldrh	r1, [r3, #0]
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <sevSeg_Init+0x238>)
 8001b38:	785b      	ldrb	r3, [r3, #1]
 8001b3a:	001a      	movs	r2, r3
 8001b3c:	f000 fdd3 	bl	80026e6 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001b40:	4b11      	ldr	r3, [pc, #68]	@ (8001b88 <sevSeg_Init+0x234>)
 8001b42:	6898      	ldr	r0, [r3, #8]
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <sevSeg_Init+0x220>)
 8001b46:	8819      	ldrh	r1, [r3, #0]
 8001b48:	4b10      	ldr	r3, [pc, #64]	@ (8001b8c <sevSeg_Init+0x238>)
 8001b4a:	785b      	ldrb	r3, [r3, #1]
 8001b4c:	001a      	movs	r2, r3
 8001b4e:	f000 fdca 	bl	80026e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001b52:	4b0d      	ldr	r3, [pc, #52]	@ (8001b88 <sevSeg_Init+0x234>)
 8001b54:	6898      	ldr	r0, [r3, #8]
 8001b56:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <sevSeg_Init+0x220>)
 8001b58:	8819      	ldrh	r1, [r3, #0]
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <sevSeg_Init+0x238>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	001a      	movs	r2, r3
 8001b60:	f000 fdc1 	bl	80026e6 <HAL_GPIO_WritePin>

}
 8001b64:	46c0      	nop			@ (mov r8, r8)
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b008      	add	sp, #32
 8001b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6c:	200001dc 	.word	0x200001dc
 8001b70:	200001de 	.word	0x200001de
 8001b74:	200001e0 	.word	0x200001e0
 8001b78:	200001e2 	.word	0x200001e2
 8001b7c:	200001e4 	.word	0x200001e4
 8001b80:	200001e8 	.word	0x200001e8
 8001b84:	20000234 	.word	0x20000234
 8001b88:	2000003c 	.word	0x2000003c
 8001b8c:	20000050 	.word	0x20000050
 8001b90:	471d3700 	.word	0x471d3700

08001b94 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 8001b94:	b590      	push	{r4, r7, lr}
 8001b96:	b087      	sub	sp, #28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	210a      	movs	r1, #10
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f7fe faae 	bl	8000104 <__udivsi3>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	2408      	movs	r4, #8
 8001bae:	193b      	adds	r3, r7, r4
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	210a      	movs	r1, #10
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7fe fb29 	bl	8000210 <__aeabi_uidivmod>
 8001bbe:	000b      	movs	r3, r1
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	193b      	adds	r3, r7, r4
 8001bc4:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001bca:	210a      	movs	r1, #10
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7fe fa99 	bl	8000104 <__udivsi3>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	193b      	adds	r3, r7, r4
 8001bd8:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001bde:	210a      	movs	r1, #10
 8001be0:	0018      	movs	r0, r3
 8001be2:	f7fe fb15 	bl	8000210 <__aeabi_uidivmod>
 8001be6:	000b      	movs	r3, r1
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	193b      	adds	r3, r7, r4
 8001bec:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 8001bee:	2116      	movs	r1, #22
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	78db      	ldrb	r3, [r3, #3]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d102      	bne.n	8001c04 <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 8001bfe:	187b      	adds	r3, r7, r1
 8001c00:	2202      	movs	r2, #2
 8001c02:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	e04f      	b.n	8001caa <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 8001c0a:	2308      	movs	r3, #8
 8001c0c:	18fa      	adds	r2, r7, r3
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	18d3      	adds	r3, r2, r3
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	0019      	movs	r1, r3
 8001c16:	2417      	movs	r4, #23
 8001c18:	193b      	adds	r3, r7, r4
 8001c1a:	4a30      	ldr	r2, [pc, #192]	@ (8001cdc <sevSeg_updateDigits+0x148>)
 8001c1c:	5c52      	ldrb	r2, [r2, r1]
 8001c1e:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d110      	bne.n	8001c48 <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	210a      	movs	r1, #10
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f7fe fa69 	bl	8000104 <__udivsi3>
 8001c32:	0003      	movs	r3, r0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	001a      	movs	r2, r3
 8001c38:	2316      	movs	r3, #22
 8001c3a:	18fb      	adds	r3, r7, r3
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	18d2      	adds	r2, r2, r3
 8001c40:	193b      	adds	r3, r7, r4
 8001c42:	4927      	ldr	r1, [pc, #156]	@ (8001ce0 <sevSeg_updateDigits+0x14c>)
 8001c44:	5c8a      	ldrb	r2, [r1, r2]
 8001c46:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	e027      	b.n	8001c9e <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001c4e:	4b25      	ldr	r3, [pc, #148]	@ (8001ce4 <sevSeg_updateDigits+0x150>)
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	4b25      	ldr	r3, [pc, #148]	@ (8001ce8 <sevSeg_updateDigits+0x154>)
 8001c54:	8819      	ldrh	r1, [r3, #0]
 8001c56:	2417      	movs	r4, #23
 8001c58:	193b      	adds	r3, r7, r4
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4013      	ands	r3, r2
 8001c60:	4a22      	ldr	r2, [pc, #136]	@ (8001cec <sevSeg_updateDigits+0x158>)
 8001c62:	5cd3      	ldrb	r3, [r2, r3]
 8001c64:	001a      	movs	r2, r3
 8001c66:	f000 fd3e 	bl	80026e6 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce4 <sevSeg_updateDigits+0x150>)
 8001c6c:	6858      	ldr	r0, [r3, #4]
 8001c6e:	4b20      	ldr	r3, [pc, #128]	@ (8001cf0 <sevSeg_updateDigits+0x15c>)
 8001c70:	8819      	ldrh	r1, [r3, #0]
 8001c72:	4b1e      	ldr	r3, [pc, #120]	@ (8001cec <sevSeg_updateDigits+0x158>)
 8001c74:	785b      	ldrb	r3, [r3, #1]
 8001c76:	001a      	movs	r2, r3
 8001c78:	f000 fd35 	bl	80026e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001c7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ce4 <sevSeg_updateDigits+0x150>)
 8001c7e:	6858      	ldr	r0, [r3, #4]
 8001c80:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf0 <sevSeg_updateDigits+0x15c>)
 8001c82:	8819      	ldrh	r1, [r3, #0]
 8001c84:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <sevSeg_updateDigits+0x158>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	001a      	movs	r2, r3
 8001c8a:	f000 fd2c 	bl	80026e6 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001c8e:	193b      	adds	r3, r7, r4
 8001c90:	193a      	adds	r2, r7, r4
 8001c92:	7812      	ldrb	r2, [r2, #0]
 8001c94:	0852      	lsrs	r2, r2, #1
 8001c96:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b07      	cmp	r3, #7
 8001ca2:	ddd4      	ble.n	8001c4e <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	ddac      	ble.n	8001c0a <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <sevSeg_updateDigits+0x150>)
 8001cb2:	6898      	ldr	r0, [r3, #8]
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf4 <sevSeg_updateDigits+0x160>)
 8001cb6:	8819      	ldrh	r1, [r3, #0]
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <sevSeg_updateDigits+0x158>)
 8001cba:	785b      	ldrb	r3, [r3, #1]
 8001cbc:	001a      	movs	r2, r3
 8001cbe:	f000 fd12 	bl	80026e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001cc2:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <sevSeg_updateDigits+0x150>)
 8001cc4:	6898      	ldr	r0, [r3, #8]
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <sevSeg_updateDigits+0x160>)
 8001cc8:	8819      	ldrh	r1, [r3, #0]
 8001cca:	4b08      	ldr	r3, [pc, #32]	@ (8001cec <sevSeg_updateDigits+0x158>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	001a      	movs	r2, r3
 8001cd0:	f000 fd09 	bl	80026e6 <HAL_GPIO_WritePin>

	return;
 8001cd4:	46c0      	nop			@ (mov r8, r8)

}
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b007      	add	sp, #28
 8001cda:	bd90      	pop	{r4, r7, pc}
 8001cdc:	08005d10 	.word	0x08005d10
 8001ce0:	08005d1c 	.word	0x08005d1c
 8001ce4:	2000003c 	.word	0x2000003c
 8001ce8:	200001dc 	.word	0x200001dc
 8001cec:	20000050 	.word	0x20000050
 8001cf0:	200001de 	.word	0x200001de
 8001cf4:	200001e0 	.word	0x200001e0

08001cf8 <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	0002      	movs	r2, r0
 8001d00:	1dbb      	adds	r3, r7, #6
 8001d02:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 8001d04:	4b20      	ldr	r3, [pc, #128]	@ (8001d88 <sevSeg_setIntensity+0x90>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d105      	bne.n	8001d18 <sevSeg_setIntensity+0x20>
 8001d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d8c <sevSeg_setIntensity+0x94>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	1dba      	adds	r2, r7, #6
 8001d12:	8812      	ldrh	r2, [r2, #0]
 8001d14:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d16:	e02c      	b.n	8001d72 <sevSeg_setIntensity+0x7a>
 8001d18:	4b1b      	ldr	r3, [pc, #108]	@ (8001d88 <sevSeg_setIntensity+0x90>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d105      	bne.n	8001d2c <sevSeg_setIntensity+0x34>
 8001d20:	4b1a      	ldr	r3, [pc, #104]	@ (8001d8c <sevSeg_setIntensity+0x94>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	1dbb      	adds	r3, r7, #6
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d2a:	e022      	b.n	8001d72 <sevSeg_setIntensity+0x7a>
 8001d2c:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <sevSeg_setIntensity+0x90>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d105      	bne.n	8001d40 <sevSeg_setIntensity+0x48>
 8001d34:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <sevSeg_setIntensity+0x94>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	1dbb      	adds	r3, r7, #6
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001d3e:	e018      	b.n	8001d72 <sevSeg_setIntensity+0x7a>
 8001d40:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <sevSeg_setIntensity+0x90>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b0c      	cmp	r3, #12
 8001d46:	d105      	bne.n	8001d54 <sevSeg_setIntensity+0x5c>
 8001d48:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <sevSeg_setIntensity+0x94>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	1dbb      	adds	r3, r7, #6
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d52:	e00e      	b.n	8001d72 <sevSeg_setIntensity+0x7a>
 8001d54:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <sevSeg_setIntensity+0x90>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b10      	cmp	r3, #16
 8001d5a:	d105      	bne.n	8001d68 <sevSeg_setIntensity+0x70>
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <sevSeg_setIntensity+0x94>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	1dbb      	adds	r3, r7, #6
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d66:	e004      	b.n	8001d72 <sevSeg_setIntensity+0x7a>
 8001d68:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <sevSeg_setIntensity+0x94>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	1dbb      	adds	r3, r7, #6
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 8001d72:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <sevSeg_setIntensity+0x90>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <sevSeg_setIntensity+0x94>)
 8001d78:	0011      	movs	r1, r2
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f003 f9e8 	bl	8005150 <HAL_TIM_PWM_Start>

}
 8001d80:	46c0      	nop			@ (mov r8, r8)
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b002      	add	sp, #8
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000234 	.word	0x20000234
 8001d8c:	200001e8 	.word	0x200001e8

08001d90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d96:	4b13      	ldr	r3, [pc, #76]	@ (8001de4 <HAL_MspInit+0x54>)
 8001d98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d9a:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <HAL_MspInit+0x54>)
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001da2:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <HAL_MspInit+0x54>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	2201      	movs	r2, #1
 8001da8:	4013      	ands	r3, r2
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	4b0d      	ldr	r3, [pc, #52]	@ (8001de4 <HAL_MspInit+0x54>)
 8001db0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001db2:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <HAL_MspInit+0x54>)
 8001db4:	2180      	movs	r1, #128	@ 0x80
 8001db6:	0549      	lsls	r1, r1, #21
 8001db8:	430a      	orrs	r2, r1
 8001dba:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001dbc:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <HAL_MspInit+0x54>)
 8001dbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dc0:	2380      	movs	r3, #128	@ 0x80
 8001dc2:	055b      	lsls	r3, r3, #21
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2004      	movs	r0, #4
 8001dd0:	f000 fad6 	bl	8002380 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001dd4:	2004      	movs	r0, #4
 8001dd6:	f000 fae8 	bl	80023aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dda:	46c0      	nop			@ (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b002      	add	sp, #8
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			@ (mov r8, r8)
 8001de4:	40021000 	.word	0x40021000

08001de8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b095      	sub	sp, #84	@ 0x54
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	233c      	movs	r3, #60	@ 0x3c
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	0018      	movs	r0, r3
 8001df6:	2314      	movs	r3, #20
 8001df8:	001a      	movs	r2, r3
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	f003 ff32 	bl	8005c64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e00:	2414      	movs	r4, #20
 8001e02:	193b      	adds	r3, r7, r4
 8001e04:	0018      	movs	r0, r3
 8001e06:	2328      	movs	r3, #40	@ 0x28
 8001e08:	001a      	movs	r2, r3
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	f003 ff2a 	bl	8005c64 <memset>
  if(hi2c->Instance==I2C1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a22      	ldr	r2, [pc, #136]	@ (8001ea0 <HAL_I2C_MspInit+0xb8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d13d      	bne.n	8001e96 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e1a:	193b      	adds	r3, r7, r4
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e20:	193b      	adds	r3, r7, r4
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e26:	193b      	adds	r3, r7, r4
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f002 f80f 	bl	8003e4c <HAL_RCCEx_PeriphCLKConfig>
 8001e2e:	1e03      	subs	r3, r0, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e32:	f7ff fd89 	bl	8001948 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea4 <HAL_I2C_MspInit+0xbc>)
 8001e38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea4 <HAL_I2C_MspInit+0xbc>)
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e42:	4b18      	ldr	r3, [pc, #96]	@ (8001ea4 <HAL_I2C_MspInit+0xbc>)
 8001e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e46:	2202      	movs	r2, #2
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e4e:	213c      	movs	r1, #60	@ 0x3c
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	22c0      	movs	r2, #192	@ 0xc0
 8001e54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e56:	187b      	adds	r3, r7, r1
 8001e58:	2212      	movs	r2, #18
 8001e5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	187b      	adds	r3, r7, r1
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	187b      	adds	r3, r7, r1
 8001e64:	2200      	movs	r2, #0
 8001e66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001e68:	187b      	adds	r3, r7, r1
 8001e6a:	2206      	movs	r2, #6
 8001e6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6e:	187b      	adds	r3, r7, r1
 8001e70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea8 <HAL_I2C_MspInit+0xc0>)
 8001e72:	0019      	movs	r1, r3
 8001e74:	0010      	movs	r0, r2
 8001e76:	f000 fab5 	bl	80023e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <HAL_I2C_MspInit+0xbc>)
 8001e7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <HAL_I2C_MspInit+0xbc>)
 8001e80:	2180      	movs	r1, #128	@ 0x80
 8001e82:	0389      	lsls	r1, r1, #14
 8001e84:	430a      	orrs	r2, r1
 8001e86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_I2C_MspInit+0xbc>)
 8001e8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e8c:	2380      	movs	r3, #128	@ 0x80
 8001e8e:	039b      	lsls	r3, r3, #14
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e96:	46c0      	nop			@ (mov r8, r8)
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b015      	add	sp, #84	@ 0x54
 8001e9c:	bd90      	pop	{r4, r7, pc}
 8001e9e:	46c0      	nop			@ (mov r8, r8)
 8001ea0:	40005400 	.word	0x40005400
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	50000400 	.word	0x50000400

08001eac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b08f      	sub	sp, #60	@ 0x3c
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eb4:	2410      	movs	r4, #16
 8001eb6:	193b      	adds	r3, r7, r4
 8001eb8:	0018      	movs	r0, r3
 8001eba:	2328      	movs	r3, #40	@ 0x28
 8001ebc:	001a      	movs	r2, r3
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	f003 fed0 	bl	8005c64 <memset>
  if(hrtc->Instance==RTC)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a19      	ldr	r2, [pc, #100]	@ (8001f30 <HAL_RTC_MspInit+0x84>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d12c      	bne.n	8001f28 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ece:	193b      	adds	r3, r7, r4
 8001ed0:	2280      	movs	r2, #128	@ 0x80
 8001ed2:	0292      	lsls	r2, r2, #10
 8001ed4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ed6:	193b      	adds	r3, r7, r4
 8001ed8:	2280      	movs	r2, #128	@ 0x80
 8001eda:	0052      	lsls	r2, r2, #1
 8001edc:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ede:	193b      	adds	r3, r7, r4
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f001 ffb3 	bl	8003e4c <HAL_RCCEx_PeriphCLKConfig>
 8001ee6:	1e03      	subs	r3, r0, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001eea:	f7ff fd2d 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001eee:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <HAL_RTC_MspInit+0x88>)
 8001ef0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ef2:	4b10      	ldr	r3, [pc, #64]	@ (8001f34 <HAL_RTC_MspInit+0x88>)
 8001ef4:	2180      	movs	r1, #128	@ 0x80
 8001ef6:	0209      	lsls	r1, r1, #8
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001efc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f34 <HAL_RTC_MspInit+0x88>)
 8001efe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <HAL_RTC_MspInit+0x88>)
 8001f02:	2180      	movs	r1, #128	@ 0x80
 8001f04:	00c9      	lsls	r1, r1, #3
 8001f06:	430a      	orrs	r2, r1
 8001f08:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <HAL_RTC_MspInit+0x88>)
 8001f0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f0e:	2380      	movs	r3, #128	@ 0x80
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4013      	ands	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	f000 fa2f 	bl	8002380 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001f22:	2002      	movs	r0, #2
 8001f24:	f000 fa41 	bl	80023aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f28:	46c0      	nop			@ (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b00f      	add	sp, #60	@ 0x3c
 8001f2e:	bd90      	pop	{r4, r7, pc}
 8001f30:	40002800 	.word	0x40002800
 8001f34:	40021000 	.word	0x40021000

08001f38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	05db      	lsls	r3, r3, #23
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d10b      	bne.n	8001f64 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f4c:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <HAL_TIM_PWM_MspInit+0x34>)
 8001f4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <HAL_TIM_PWM_MspInit+0x34>)
 8001f52:	2101      	movs	r1, #1
 8001f54:	430a      	orrs	r2, r1
 8001f56:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f58:	4b04      	ldr	r3, [pc, #16]	@ (8001f6c <HAL_TIM_PWM_MspInit+0x34>)
 8001f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	4013      	ands	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f64:	46c0      	nop			@ (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b004      	add	sp, #16
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000

08001f70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x38>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d10d      	bne.n	8001f9e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001f82:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <HAL_TIM_Base_MspInit+0x3c>)
 8001f84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f86:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <HAL_TIM_Base_MspInit+0x3c>)
 8001f88:	2180      	movs	r1, #128	@ 0x80
 8001f8a:	0209      	lsls	r1, r1, #8
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_TIM_Base_MspInit+0x3c>)
 8001f92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f94:	2380      	movs	r3, #128	@ 0x80
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001f9e:	46c0      	nop			@ (mov r8, r8)
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b004      	add	sp, #16
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	46c0      	nop			@ (mov r8, r8)
 8001fa8:	40002000 	.word	0x40002000
 8001fac:	40021000 	.word	0x40021000

08001fb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b089      	sub	sp, #36	@ 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	240c      	movs	r4, #12
 8001fba:	193b      	adds	r3, r7, r4
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	2314      	movs	r3, #20
 8001fc0:	001a      	movs	r2, r3
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	f003 fe4e 	bl	8005c64 <memset>
  if(htim->Instance==TIM2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	@ 0x80
 8001fce:	05db      	lsls	r3, r3, #23
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d121      	bne.n	8002018 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd4:	4b12      	ldr	r3, [pc, #72]	@ (8002020 <HAL_TIM_MspPostInit+0x70>)
 8001fd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fd8:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <HAL_TIM_MspPostInit+0x70>)
 8001fda:	2104      	movs	r1, #4
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <HAL_TIM_MspPostInit+0x70>)
 8001fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 8001fec:	0021      	movs	r1, r4
 8001fee:	187b      	adds	r3, r7, r1
 8001ff0:	2240      	movs	r2, #64	@ 0x40
 8001ff2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	187b      	adds	r3, r7, r1
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	187b      	adds	r3, r7, r1
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	187b      	adds	r3, r7, r1
 8002002:	2200      	movs	r2, #0
 8002004:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002006:	187b      	adds	r3, r7, r1
 8002008:	2202      	movs	r2, #2
 800200a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 800200c:	187b      	adds	r3, r7, r1
 800200e:	4a05      	ldr	r2, [pc, #20]	@ (8002024 <HAL_TIM_MspPostInit+0x74>)
 8002010:	0019      	movs	r1, r3
 8002012:	0010      	movs	r0, r2
 8002014:	f000 f9e6 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002018:	46c0      	nop			@ (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	b009      	add	sp, #36	@ 0x24
 800201e:	bd90      	pop	{r4, r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	50000800 	.word	0x50000800

08002028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800202c:	46c0      	nop			@ (mov r8, r8)
 800202e:	e7fd      	b.n	800202c <NMI_Handler+0x4>

08002030 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002034:	46c0      	nop			@ (mov r8, r8)
 8002036:	e7fd      	b.n	8002034 <HardFault_Handler+0x4>

08002038 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800203c:	46c0      	nop			@ (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002050:	f000 f8ce 	bl	80021f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002054:	46c0      	nop			@ (mov r8, r8)
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002060:	4b03      	ldr	r3, [pc, #12]	@ (8002070 <RTC_TAMP_IRQHandler+0x14>)
 8002062:	0018      	movs	r0, r3
 8002064:	f002 fd70 	bl	8004b48 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8002068:	46c0      	nop			@ (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	46c0      	nop			@ (mov r8, r8)
 8002070:	20000100 	.word	0x20000100

08002074 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002078:	46c0      	nop			@ (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 8002082:	2001      	movs	r0, #1
 8002084:	f000 fb68 	bl	8002758 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 8002088:	2002      	movs	r0, #2
 800208a:	f000 fb65 	bl	8002758 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 8002098:	2004      	movs	r0, #4
 800209a:	f000 fb5d 	bl	8002758 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 800209e:	2008      	movs	r0, #8
 80020a0:	f000 fb5a 	bl	8002758 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80020a4:	46c0      	nop			@ (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 80020ae:	2380      	movs	r3, #128	@ 0x80
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	0018      	movs	r0, r3
 80020b4:	f000 fb50 	bl	8002758 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80020b8:	46c0      	nop			@ (mov r8, r8)
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c2:	46c0      	nop			@ (mov r8, r8)
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020c8:	480d      	ldr	r0, [pc, #52]	@ (8002100 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020cc:	f7ff fff7 	bl	80020be <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d0:	480c      	ldr	r0, [pc, #48]	@ (8002104 <LoopForever+0x6>)
  ldr r1, =_edata
 80020d2:	490d      	ldr	r1, [pc, #52]	@ (8002108 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020d4:	4a0d      	ldr	r2, [pc, #52]	@ (800210c <LoopForever+0xe>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d8:	e002      	b.n	80020e0 <LoopCopyDataInit>

080020da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020de:	3304      	adds	r3, #4

080020e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e4:	d3f9      	bcc.n	80020da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002114 <LoopForever+0x16>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ec:	e001      	b.n	80020f2 <LoopFillZerobss>

080020ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f0:	3204      	adds	r2, #4

080020f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f4:	d3fb      	bcc.n	80020ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020f6:	f003 fdbd 	bl	8005c74 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80020fa:	f7fe fc81 	bl	8000a00 <main>

080020fe <LoopForever>:

LoopForever:
  b LoopForever
 80020fe:	e7fe      	b.n	80020fe <LoopForever>
  ldr   r0, =_estack
 8002100:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002108:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800210c:	08005dbc 	.word	0x08005dbc
  ldr r2, =_sbss
 8002110:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002114:	2000023c 	.word	0x2000023c

08002118 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002118:	e7fe      	b.n	8002118 <ADC1_IRQHandler>
	...

0800211c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002122:	1dfb      	adds	r3, r7, #7
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <HAL_Init+0x3c>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b0a      	ldr	r3, [pc, #40]	@ (8002158 <HAL_Init+0x3c>)
 800212e:	2180      	movs	r1, #128	@ 0x80
 8002130:	0049      	lsls	r1, r1, #1
 8002132:	430a      	orrs	r2, r1
 8002134:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002136:	2003      	movs	r0, #3
 8002138:	f000 f810 	bl	800215c <HAL_InitTick>
 800213c:	1e03      	subs	r3, r0, #0
 800213e:	d003      	beq.n	8002148 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002140:	1dfb      	adds	r3, r7, #7
 8002142:	2201      	movs	r2, #1
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	e001      	b.n	800214c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002148:	f7ff fe22 	bl	8001d90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800214c:	1dfb      	adds	r3, r7, #7
 800214e:	781b      	ldrb	r3, [r3, #0]
}
 8002150:	0018      	movs	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	b002      	add	sp, #8
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40022000 	.word	0x40022000

0800215c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002164:	230f      	movs	r3, #15
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800216c:	4b1d      	ldr	r3, [pc, #116]	@ (80021e4 <HAL_InitTick+0x88>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d02b      	beq.n	80021cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002174:	4b1c      	ldr	r3, [pc, #112]	@ (80021e8 <HAL_InitTick+0x8c>)
 8002176:	681c      	ldr	r4, [r3, #0]
 8002178:	4b1a      	ldr	r3, [pc, #104]	@ (80021e4 <HAL_InitTick+0x88>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	0019      	movs	r1, r3
 800217e:	23fa      	movs	r3, #250	@ 0xfa
 8002180:	0098      	lsls	r0, r3, #2
 8002182:	f7fd ffbf 	bl	8000104 <__udivsi3>
 8002186:	0003      	movs	r3, r0
 8002188:	0019      	movs	r1, r3
 800218a:	0020      	movs	r0, r4
 800218c:	f7fd ffba 	bl	8000104 <__udivsi3>
 8002190:	0003      	movs	r3, r0
 8002192:	0018      	movs	r0, r3
 8002194:	f000 f919 	bl	80023ca <HAL_SYSTICK_Config>
 8002198:	1e03      	subs	r3, r0, #0
 800219a:	d112      	bne.n	80021c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d80a      	bhi.n	80021b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	2301      	movs	r3, #1
 80021a6:	425b      	negs	r3, r3
 80021a8:	2200      	movs	r2, #0
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 f8e8 	bl	8002380 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021b0:	4b0e      	ldr	r3, [pc, #56]	@ (80021ec <HAL_InitTick+0x90>)
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e00d      	b.n	80021d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80021b8:	230f      	movs	r3, #15
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]
 80021c0:	e008      	b.n	80021d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021c2:	230f      	movs	r3, #15
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	2201      	movs	r2, #1
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	e003      	b.n	80021d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021cc:	230f      	movs	r3, #15
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	2201      	movs	r2, #1
 80021d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80021d4:	230f      	movs	r3, #15
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	781b      	ldrb	r3, [r3, #0]
}
 80021da:	0018      	movs	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	b005      	add	sp, #20
 80021e0:	bd90      	pop	{r4, r7, pc}
 80021e2:	46c0      	nop			@ (mov r8, r8)
 80021e4:	2000005c 	.word	0x2000005c
 80021e8:	20000054 	.word	0x20000054
 80021ec:	20000058 	.word	0x20000058

080021f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021f4:	4b05      	ldr	r3, [pc, #20]	@ (800220c <HAL_IncTick+0x1c>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	001a      	movs	r2, r3
 80021fa:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <HAL_IncTick+0x20>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	18d2      	adds	r2, r2, r3
 8002200:	4b03      	ldr	r3, [pc, #12]	@ (8002210 <HAL_IncTick+0x20>)
 8002202:	601a      	str	r2, [r3, #0]
}
 8002204:	46c0      	nop			@ (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	2000005c 	.word	0x2000005c
 8002210:	20000238 	.word	0x20000238

08002214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  return uwTick;
 8002218:	4b02      	ldr	r3, [pc, #8]	@ (8002224 <HAL_GetTick+0x10>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	0018      	movs	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	20000238 	.word	0x20000238

08002228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	0002      	movs	r2, r0
 8002230:	1dfb      	adds	r3, r7, #7
 8002232:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002234:	1dfb      	adds	r3, r7, #7
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b7f      	cmp	r3, #127	@ 0x7f
 800223a:	d809      	bhi.n	8002250 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223c:	1dfb      	adds	r3, r7, #7
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	001a      	movs	r2, r3
 8002242:	231f      	movs	r3, #31
 8002244:	401a      	ands	r2, r3
 8002246:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <__NVIC_EnableIRQ+0x30>)
 8002248:	2101      	movs	r1, #1
 800224a:	4091      	lsls	r1, r2
 800224c:	000a      	movs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002250:	46c0      	nop			@ (mov r8, r8)
 8002252:	46bd      	mov	sp, r7
 8002254:	b002      	add	sp, #8
 8002256:	bd80      	pop	{r7, pc}
 8002258:	e000e100 	.word	0xe000e100

0800225c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800225c:	b590      	push	{r4, r7, lr}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	0002      	movs	r2, r0
 8002264:	6039      	str	r1, [r7, #0]
 8002266:	1dfb      	adds	r3, r7, #7
 8002268:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800226a:	1dfb      	adds	r3, r7, #7
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002270:	d828      	bhi.n	80022c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002272:	4a2f      	ldr	r2, [pc, #188]	@ (8002330 <__NVIC_SetPriority+0xd4>)
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b25b      	sxtb	r3, r3
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	33c0      	adds	r3, #192	@ 0xc0
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	589b      	ldr	r3, [r3, r2]
 8002282:	1dfa      	adds	r2, r7, #7
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	0011      	movs	r1, r2
 8002288:	2203      	movs	r2, #3
 800228a:	400a      	ands	r2, r1
 800228c:	00d2      	lsls	r2, r2, #3
 800228e:	21ff      	movs	r1, #255	@ 0xff
 8002290:	4091      	lsls	r1, r2
 8002292:	000a      	movs	r2, r1
 8002294:	43d2      	mvns	r2, r2
 8002296:	401a      	ands	r2, r3
 8002298:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	019b      	lsls	r3, r3, #6
 800229e:	22ff      	movs	r2, #255	@ 0xff
 80022a0:	401a      	ands	r2, r3
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	0018      	movs	r0, r3
 80022a8:	2303      	movs	r3, #3
 80022aa:	4003      	ands	r3, r0
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022b0:	481f      	ldr	r0, [pc, #124]	@ (8002330 <__NVIC_SetPriority+0xd4>)
 80022b2:	1dfb      	adds	r3, r7, #7
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	b25b      	sxtb	r3, r3
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	430a      	orrs	r2, r1
 80022bc:	33c0      	adds	r3, #192	@ 0xc0
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80022c2:	e031      	b.n	8002328 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002334 <__NVIC_SetPriority+0xd8>)
 80022c6:	1dfb      	adds	r3, r7, #7
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	0019      	movs	r1, r3
 80022cc:	230f      	movs	r3, #15
 80022ce:	400b      	ands	r3, r1
 80022d0:	3b08      	subs	r3, #8
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	3306      	adds	r3, #6
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	18d3      	adds	r3, r2, r3
 80022da:	3304      	adds	r3, #4
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	1dfa      	adds	r2, r7, #7
 80022e0:	7812      	ldrb	r2, [r2, #0]
 80022e2:	0011      	movs	r1, r2
 80022e4:	2203      	movs	r2, #3
 80022e6:	400a      	ands	r2, r1
 80022e8:	00d2      	lsls	r2, r2, #3
 80022ea:	21ff      	movs	r1, #255	@ 0xff
 80022ec:	4091      	lsls	r1, r2
 80022ee:	000a      	movs	r2, r1
 80022f0:	43d2      	mvns	r2, r2
 80022f2:	401a      	ands	r2, r3
 80022f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	019b      	lsls	r3, r3, #6
 80022fa:	22ff      	movs	r2, #255	@ 0xff
 80022fc:	401a      	ands	r2, r3
 80022fe:	1dfb      	adds	r3, r7, #7
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	0018      	movs	r0, r3
 8002304:	2303      	movs	r3, #3
 8002306:	4003      	ands	r3, r0
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800230c:	4809      	ldr	r0, [pc, #36]	@ (8002334 <__NVIC_SetPriority+0xd8>)
 800230e:	1dfb      	adds	r3, r7, #7
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	001c      	movs	r4, r3
 8002314:	230f      	movs	r3, #15
 8002316:	4023      	ands	r3, r4
 8002318:	3b08      	subs	r3, #8
 800231a:	089b      	lsrs	r3, r3, #2
 800231c:	430a      	orrs	r2, r1
 800231e:	3306      	adds	r3, #6
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	18c3      	adds	r3, r0, r3
 8002324:	3304      	adds	r3, #4
 8002326:	601a      	str	r2, [r3, #0]
}
 8002328:	46c0      	nop			@ (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b003      	add	sp, #12
 800232e:	bd90      	pop	{r4, r7, pc}
 8002330:	e000e100 	.word	0xe000e100
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	1e5a      	subs	r2, r3, #1
 8002344:	2380      	movs	r3, #128	@ 0x80
 8002346:	045b      	lsls	r3, r3, #17
 8002348:	429a      	cmp	r2, r3
 800234a:	d301      	bcc.n	8002350 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234c:	2301      	movs	r3, #1
 800234e:	e010      	b.n	8002372 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002350:	4b0a      	ldr	r3, [pc, #40]	@ (800237c <SysTick_Config+0x44>)
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	3a01      	subs	r2, #1
 8002356:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002358:	2301      	movs	r3, #1
 800235a:	425b      	negs	r3, r3
 800235c:	2103      	movs	r1, #3
 800235e:	0018      	movs	r0, r3
 8002360:	f7ff ff7c 	bl	800225c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002364:	4b05      	ldr	r3, [pc, #20]	@ (800237c <SysTick_Config+0x44>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236a:	4b04      	ldr	r3, [pc, #16]	@ (800237c <SysTick_Config+0x44>)
 800236c:	2207      	movs	r2, #7
 800236e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002370:	2300      	movs	r3, #0
}
 8002372:	0018      	movs	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	b002      	add	sp, #8
 8002378:	bd80      	pop	{r7, pc}
 800237a:	46c0      	nop			@ (mov r8, r8)
 800237c:	e000e010 	.word	0xe000e010

08002380 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	210f      	movs	r1, #15
 800238c:	187b      	adds	r3, r7, r1
 800238e:	1c02      	adds	r2, r0, #0
 8002390:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	187b      	adds	r3, r7, r1
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	b25b      	sxtb	r3, r3
 800239a:	0011      	movs	r1, r2
 800239c:	0018      	movs	r0, r3
 800239e:	f7ff ff5d 	bl	800225c <__NVIC_SetPriority>
}
 80023a2:	46c0      	nop			@ (mov r8, r8)
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b004      	add	sp, #16
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	0002      	movs	r2, r0
 80023b2:	1dfb      	adds	r3, r7, #7
 80023b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b6:	1dfb      	adds	r3, r7, #7
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	b25b      	sxtb	r3, r3
 80023bc:	0018      	movs	r0, r3
 80023be:	f7ff ff33 	bl	8002228 <__NVIC_EnableIRQ>
}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b002      	add	sp, #8
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	0018      	movs	r0, r3
 80023d6:	f7ff ffaf 	bl	8002338 <SysTick_Config>
 80023da:	0003      	movs	r3, r0
}
 80023dc:	0018      	movs	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	b002      	add	sp, #8
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f2:	e147      	b.n	8002684 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2101      	movs	r1, #1
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4091      	lsls	r1, r2
 80023fe:	000a      	movs	r2, r1
 8002400:	4013      	ands	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d100      	bne.n	800240c <HAL_GPIO_Init+0x28>
 800240a:	e138      	b.n	800267e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2203      	movs	r2, #3
 8002412:	4013      	ands	r3, r2
 8002414:	2b01      	cmp	r3, #1
 8002416:	d005      	beq.n	8002424 <HAL_GPIO_Init+0x40>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2203      	movs	r2, #3
 800241e:	4013      	ands	r3, r2
 8002420:	2b02      	cmp	r3, #2
 8002422:	d130      	bne.n	8002486 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	409a      	lsls	r2, r3
 8002432:	0013      	movs	r3, r2
 8002434:	43da      	mvns	r2, r3
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	409a      	lsls	r2, r3
 8002446:	0013      	movs	r3, r2
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800245a:	2201      	movs	r2, #1
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	409a      	lsls	r2, r3
 8002460:	0013      	movs	r3, r2
 8002462:	43da      	mvns	r2, r3
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	2201      	movs	r2, #1
 8002472:	401a      	ands	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	409a      	lsls	r2, r3
 8002478:	0013      	movs	r3, r2
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2203      	movs	r2, #3
 800248c:	4013      	ands	r3, r2
 800248e:	2b03      	cmp	r3, #3
 8002490:	d017      	beq.n	80024c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	2203      	movs	r2, #3
 800249e:	409a      	lsls	r2, r3
 80024a0:	0013      	movs	r3, r2
 80024a2:	43da      	mvns	r2, r3
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	409a      	lsls	r2, r3
 80024b4:	0013      	movs	r3, r2
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2203      	movs	r2, #3
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d123      	bne.n	8002516 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	08da      	lsrs	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3208      	adds	r2, #8
 80024d6:	0092      	lsls	r2, r2, #2
 80024d8:	58d3      	ldr	r3, [r2, r3]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2207      	movs	r2, #7
 80024e0:	4013      	ands	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	220f      	movs	r2, #15
 80024e6:	409a      	lsls	r2, r3
 80024e8:	0013      	movs	r3, r2
 80024ea:	43da      	mvns	r2, r3
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2107      	movs	r1, #7
 80024fa:	400b      	ands	r3, r1
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	409a      	lsls	r2, r3
 8002500:	0013      	movs	r3, r2
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	08da      	lsrs	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3208      	adds	r2, #8
 8002510:	0092      	lsls	r2, r2, #2
 8002512:	6939      	ldr	r1, [r7, #16]
 8002514:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	409a      	lsls	r2, r3
 8002524:	0013      	movs	r3, r2
 8002526:	43da      	mvns	r2, r3
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2203      	movs	r2, #3
 8002534:	401a      	ands	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	409a      	lsls	r2, r3
 800253c:	0013      	movs	r3, r2
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	23c0      	movs	r3, #192	@ 0xc0
 8002550:	029b      	lsls	r3, r3, #10
 8002552:	4013      	ands	r3, r2
 8002554:	d100      	bne.n	8002558 <HAL_GPIO_Init+0x174>
 8002556:	e092      	b.n	800267e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002558:	4a50      	ldr	r2, [pc, #320]	@ (800269c <HAL_GPIO_Init+0x2b8>)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	089b      	lsrs	r3, r3, #2
 800255e:	3318      	adds	r3, #24
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	589b      	ldr	r3, [r3, r2]
 8002564:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2203      	movs	r2, #3
 800256a:	4013      	ands	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	220f      	movs	r2, #15
 8002570:	409a      	lsls	r2, r3
 8002572:	0013      	movs	r3, r2
 8002574:	43da      	mvns	r2, r3
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	23a0      	movs	r3, #160	@ 0xa0
 8002580:	05db      	lsls	r3, r3, #23
 8002582:	429a      	cmp	r2, r3
 8002584:	d013      	beq.n	80025ae <HAL_GPIO_Init+0x1ca>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a45      	ldr	r2, [pc, #276]	@ (80026a0 <HAL_GPIO_Init+0x2bc>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00d      	beq.n	80025aa <HAL_GPIO_Init+0x1c6>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a44      	ldr	r2, [pc, #272]	@ (80026a4 <HAL_GPIO_Init+0x2c0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d007      	beq.n	80025a6 <HAL_GPIO_Init+0x1c2>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a43      	ldr	r2, [pc, #268]	@ (80026a8 <HAL_GPIO_Init+0x2c4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d101      	bne.n	80025a2 <HAL_GPIO_Init+0x1be>
 800259e:	2303      	movs	r3, #3
 80025a0:	e006      	b.n	80025b0 <HAL_GPIO_Init+0x1cc>
 80025a2:	2305      	movs	r3, #5
 80025a4:	e004      	b.n	80025b0 <HAL_GPIO_Init+0x1cc>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e002      	b.n	80025b0 <HAL_GPIO_Init+0x1cc>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_GPIO_Init+0x1cc>
 80025ae:	2300      	movs	r3, #0
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	2103      	movs	r1, #3
 80025b4:	400a      	ands	r2, r1
 80025b6:	00d2      	lsls	r2, r2, #3
 80025b8:	4093      	lsls	r3, r2
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80025c0:	4936      	ldr	r1, [pc, #216]	@ (800269c <HAL_GPIO_Init+0x2b8>)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	089b      	lsrs	r3, r3, #2
 80025c6:	3318      	adds	r3, #24
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025ce:	4b33      	ldr	r3, [pc, #204]	@ (800269c <HAL_GPIO_Init+0x2b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	43da      	mvns	r2, r3
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	2380      	movs	r3, #128	@ 0x80
 80025e4:	035b      	lsls	r3, r3, #13
 80025e6:	4013      	ands	r3, r2
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025f2:	4b2a      	ldr	r3, [pc, #168]	@ (800269c <HAL_GPIO_Init+0x2b8>)
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80025f8:	4b28      	ldr	r3, [pc, #160]	@ (800269c <HAL_GPIO_Init+0x2b8>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	43da      	mvns	r2, r3
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	2380      	movs	r3, #128	@ 0x80
 800260e:	039b      	lsls	r3, r3, #14
 8002610:	4013      	ands	r3, r2
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800261c:	4b1f      	ldr	r3, [pc, #124]	@ (800269c <HAL_GPIO_Init+0x2b8>)
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002622:	4a1e      	ldr	r2, [pc, #120]	@ (800269c <HAL_GPIO_Init+0x2b8>)
 8002624:	2384      	movs	r3, #132	@ 0x84
 8002626:	58d3      	ldr	r3, [r2, r3]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43da      	mvns	r2, r3
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	2380      	movs	r3, #128	@ 0x80
 800263a:	029b      	lsls	r3, r3, #10
 800263c:	4013      	ands	r3, r2
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002648:	4914      	ldr	r1, [pc, #80]	@ (800269c <HAL_GPIO_Init+0x2b8>)
 800264a:	2284      	movs	r2, #132	@ 0x84
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002650:	4a12      	ldr	r2, [pc, #72]	@ (800269c <HAL_GPIO_Init+0x2b8>)
 8002652:	2380      	movs	r3, #128	@ 0x80
 8002654:	58d3      	ldr	r3, [r2, r3]
 8002656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	43da      	mvns	r2, r3
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	2380      	movs	r3, #128	@ 0x80
 8002668:	025b      	lsls	r3, r3, #9
 800266a:	4013      	ands	r3, r2
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002676:	4909      	ldr	r1, [pc, #36]	@ (800269c <HAL_GPIO_Init+0x2b8>)
 8002678:	2280      	movs	r2, #128	@ 0x80
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	3301      	adds	r3, #1
 8002682:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	40da      	lsrs	r2, r3
 800268c:	1e13      	subs	r3, r2, #0
 800268e:	d000      	beq.n	8002692 <HAL_GPIO_Init+0x2ae>
 8002690:	e6b0      	b.n	80023f4 <HAL_GPIO_Init+0x10>
  }
}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	46c0      	nop			@ (mov r8, r8)
 8002696:	46bd      	mov	sp, r7
 8002698:	b006      	add	sp, #24
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021800 	.word	0x40021800
 80026a0:	50000400 	.word	0x50000400
 80026a4:	50000800 	.word	0x50000800
 80026a8:	50000c00 	.word	0x50000c00

080026ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	000a      	movs	r2, r1
 80026b6:	1cbb      	adds	r3, r7, #2
 80026b8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	1cba      	adds	r2, r7, #2
 80026c0:	8812      	ldrh	r2, [r2, #0]
 80026c2:	4013      	ands	r3, r2
 80026c4:	d004      	beq.n	80026d0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80026c6:	230f      	movs	r3, #15
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
 80026ce:	e003      	b.n	80026d8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026d0:	230f      	movs	r3, #15
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80026d8:	230f      	movs	r3, #15
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	781b      	ldrb	r3, [r3, #0]
}
 80026de:	0018      	movs	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b004      	add	sp, #16
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	0008      	movs	r0, r1
 80026f0:	0011      	movs	r1, r2
 80026f2:	1cbb      	adds	r3, r7, #2
 80026f4:	1c02      	adds	r2, r0, #0
 80026f6:	801a      	strh	r2, [r3, #0]
 80026f8:	1c7b      	adds	r3, r7, #1
 80026fa:	1c0a      	adds	r2, r1, #0
 80026fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026fe:	1c7b      	adds	r3, r7, #1
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d004      	beq.n	8002710 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002706:	1cbb      	adds	r3, r7, #2
 8002708:	881a      	ldrh	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800270e:	e003      	b.n	8002718 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002710:	1cbb      	adds	r3, r7, #2
 8002712:	881a      	ldrh	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002718:	46c0      	nop			@ (mov r8, r8)
 800271a:	46bd      	mov	sp, r7
 800271c:	b002      	add	sp, #8
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	000a      	movs	r2, r1
 800272a:	1cbb      	adds	r3, r7, #2
 800272c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002734:	1cbb      	adds	r3, r7, #2
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4013      	ands	r3, r2
 800273c:	041a      	lsls	r2, r3, #16
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	43db      	mvns	r3, r3
 8002742:	1cb9      	adds	r1, r7, #2
 8002744:	8809      	ldrh	r1, [r1, #0]
 8002746:	400b      	ands	r3, r1
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	619a      	str	r2, [r3, #24]
}
 800274e:	46c0      	nop			@ (mov r8, r8)
 8002750:	46bd      	mov	sp, r7
 8002752:	b004      	add	sp, #16
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	0002      	movs	r2, r0
 8002760:	1dbb      	adds	r3, r7, #6
 8002762:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002764:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	1dba      	adds	r2, r7, #6
 800276a:	8812      	ldrh	r2, [r2, #0]
 800276c:	4013      	ands	r3, r2
 800276e:	d008      	beq.n	8002782 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002770:	4b0d      	ldr	r3, [pc, #52]	@ (80027a8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002772:	1dba      	adds	r2, r7, #6
 8002774:	8812      	ldrh	r2, [r2, #0]
 8002776:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002778:	1dbb      	adds	r3, r7, #6
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	0018      	movs	r0, r3
 800277e:	f000 f815 	bl	80027ac <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002782:	4b09      	ldr	r3, [pc, #36]	@ (80027a8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	1dba      	adds	r2, r7, #6
 8002788:	8812      	ldrh	r2, [r2, #0]
 800278a:	4013      	ands	r3, r2
 800278c:	d008      	beq.n	80027a0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800278e:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002790:	1dba      	adds	r2, r7, #6
 8002792:	8812      	ldrh	r2, [r2, #0]
 8002794:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002796:	1dbb      	adds	r3, r7, #6
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	0018      	movs	r0, r3
 800279c:	f7fe fde8 	bl	8001370 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80027a0:	46c0      	nop			@ (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b002      	add	sp, #8
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40021800 	.word	0x40021800

080027ac <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	0002      	movs	r2, r0
 80027b4:	1dbb      	adds	r3, r7, #6
 80027b6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80027b8:	46c0      	nop			@ (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b002      	add	sp, #8
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e08f      	b.n	80028f2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2241      	movs	r2, #65	@ 0x41
 80027d6:	5c9b      	ldrb	r3, [r3, r2]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d107      	bne.n	80027ee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2240      	movs	r2, #64	@ 0x40
 80027e2:	2100      	movs	r1, #0
 80027e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	0018      	movs	r0, r3
 80027ea:	f7ff fafd 	bl	8001de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2241      	movs	r2, #65	@ 0x41
 80027f2:	2124      	movs	r1, #36	@ 0x24
 80027f4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2101      	movs	r1, #1
 8002802:	438a      	bics	r2, r1
 8002804:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	493b      	ldr	r1, [pc, #236]	@ (80028fc <HAL_I2C_Init+0x13c>)
 8002810:	400a      	ands	r2, r1
 8002812:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4938      	ldr	r1, [pc, #224]	@ (8002900 <HAL_I2C_Init+0x140>)
 8002820:	400a      	ands	r2, r1
 8002822:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d108      	bne.n	800283e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2180      	movs	r1, #128	@ 0x80
 8002836:	0209      	lsls	r1, r1, #8
 8002838:	430a      	orrs	r2, r1
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	e007      	b.n	800284e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2184      	movs	r1, #132	@ 0x84
 8002848:	0209      	lsls	r1, r1, #8
 800284a:	430a      	orrs	r2, r1
 800284c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d109      	bne.n	800286a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2180      	movs	r1, #128	@ 0x80
 8002862:	0109      	lsls	r1, r1, #4
 8002864:	430a      	orrs	r2, r1
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	e007      	b.n	800287a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4923      	ldr	r1, [pc, #140]	@ (8002904 <HAL_I2C_Init+0x144>)
 8002876:	400a      	ands	r2, r1
 8002878:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4920      	ldr	r1, [pc, #128]	@ (8002908 <HAL_I2C_Init+0x148>)
 8002886:	430a      	orrs	r2, r1
 8002888:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	491a      	ldr	r1, [pc, #104]	@ (8002900 <HAL_I2C_Init+0x140>)
 8002896:	400a      	ands	r2, r1
 8002898:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69d9      	ldr	r1, [r3, #28]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1a      	ldr	r2, [r3, #32]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2101      	movs	r1, #1
 80028d0:	430a      	orrs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2241      	movs	r2, #65	@ 0x41
 80028de:	2120      	movs	r1, #32
 80028e0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2242      	movs	r2, #66	@ 0x42
 80028ec:	2100      	movs	r1, #0
 80028ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	0018      	movs	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	b002      	add	sp, #8
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	46c0      	nop			@ (mov r8, r8)
 80028fc:	f0ffffff 	.word	0xf0ffffff
 8002900:	ffff7fff 	.word	0xffff7fff
 8002904:	fffff7ff 	.word	0xfffff7ff
 8002908:	02008000 	.word	0x02008000

0800290c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b089      	sub	sp, #36	@ 0x24
 8002910:	af02      	add	r7, sp, #8
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	0008      	movs	r0, r1
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	0019      	movs	r1, r3
 800291a:	230a      	movs	r3, #10
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	1c02      	adds	r2, r0, #0
 8002920:	801a      	strh	r2, [r3, #0]
 8002922:	2308      	movs	r3, #8
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	1c0a      	adds	r2, r1, #0
 8002928:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2241      	movs	r2, #65	@ 0x41
 800292e:	5c9b      	ldrb	r3, [r3, r2]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b20      	cmp	r3, #32
 8002934:	d000      	beq.n	8002938 <HAL_I2C_Master_Transmit+0x2c>
 8002936:	e10a      	b.n	8002b4e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2240      	movs	r2, #64	@ 0x40
 800293c:	5c9b      	ldrb	r3, [r3, r2]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_I2C_Master_Transmit+0x3a>
 8002942:	2302      	movs	r3, #2
 8002944:	e104      	b.n	8002b50 <HAL_I2C_Master_Transmit+0x244>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2240      	movs	r2, #64	@ 0x40
 800294a:	2101      	movs	r1, #1
 800294c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800294e:	f7ff fc61 	bl	8002214 <HAL_GetTick>
 8002952:	0003      	movs	r3, r0
 8002954:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002956:	2380      	movs	r3, #128	@ 0x80
 8002958:	0219      	lsls	r1, r3, #8
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	2319      	movs	r3, #25
 8002962:	2201      	movs	r2, #1
 8002964:	f000 fa26 	bl	8002db4 <I2C_WaitOnFlagUntilTimeout>
 8002968:	1e03      	subs	r3, r0, #0
 800296a:	d001      	beq.n	8002970 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0ef      	b.n	8002b50 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2241      	movs	r2, #65	@ 0x41
 8002974:	2121      	movs	r1, #33	@ 0x21
 8002976:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2242      	movs	r2, #66	@ 0x42
 800297c:	2110      	movs	r1, #16
 800297e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2208      	movs	r2, #8
 8002990:	18ba      	adds	r2, r7, r2
 8002992:	8812      	ldrh	r2, [r2, #0]
 8002994:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2bff      	cmp	r3, #255	@ 0xff
 80029a4:	d906      	bls.n	80029b4 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	22ff      	movs	r2, #255	@ 0xff
 80029aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80029ac:	2380      	movs	r3, #128	@ 0x80
 80029ae:	045b      	lsls	r3, r3, #17
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	e007      	b.n	80029c4 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80029be:	2380      	movs	r3, #128	@ 0x80
 80029c0:	049b      	lsls	r3, r3, #18
 80029c2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d027      	beq.n	8002a1c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	781a      	ldrb	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	697c      	ldr	r4, [r7, #20]
 8002a08:	230a      	movs	r3, #10
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	8819      	ldrh	r1, [r3, #0]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	4b51      	ldr	r3, [pc, #324]	@ (8002b58 <HAL_I2C_Master_Transmit+0x24c>)
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	0023      	movs	r3, r4
 8002a16:	f000 fc45 	bl	80032a4 <I2C_TransferConfig>
 8002a1a:	e06f      	b.n	8002afc <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	697c      	ldr	r4, [r7, #20]
 8002a24:	230a      	movs	r3, #10
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	8819      	ldrh	r1, [r3, #0]
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	4b4a      	ldr	r3, [pc, #296]	@ (8002b58 <HAL_I2C_Master_Transmit+0x24c>)
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	0023      	movs	r3, r4
 8002a32:	f000 fc37 	bl	80032a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a36:	e061      	b.n	8002afc <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 fa10 	bl	8002e64 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a44:	1e03      	subs	r3, r0, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e081      	b.n	8002b50 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d03a      	beq.n	8002afc <HAL_I2C_Master_Transmit+0x1f0>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d136      	bne.n	8002afc <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	0013      	movs	r3, r2
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2180      	movs	r1, #128	@ 0x80
 8002a9c:	f000 f98a 	bl	8002db4 <I2C_WaitOnFlagUntilTimeout>
 8002aa0:	1e03      	subs	r3, r0, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e053      	b.n	8002b50 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2bff      	cmp	r3, #255	@ 0xff
 8002ab0:	d911      	bls.n	8002ad6 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	22ff      	movs	r2, #255	@ 0xff
 8002ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	2380      	movs	r3, #128	@ 0x80
 8002ac0:	045c      	lsls	r4, r3, #17
 8002ac2:	230a      	movs	r3, #10
 8002ac4:	18fb      	adds	r3, r7, r3
 8002ac6:	8819      	ldrh	r1, [r3, #0]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	2300      	movs	r3, #0
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	0023      	movs	r3, r4
 8002ad0:	f000 fbe8 	bl	80032a4 <I2C_TransferConfig>
 8002ad4:	e012      	b.n	8002afc <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	2380      	movs	r3, #128	@ 0x80
 8002ae8:	049c      	lsls	r4, r3, #18
 8002aea:	230a      	movs	r3, #10
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	8819      	ldrh	r1, [r3, #0]
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	2300      	movs	r3, #0
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	0023      	movs	r3, r4
 8002af8:	f000 fbd4 	bl	80032a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d198      	bne.n	8002a38 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f000 f9ef 	bl	8002ef0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b12:	1e03      	subs	r3, r0, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e01a      	b.n	8002b50 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	490b      	ldr	r1, [pc, #44]	@ (8002b5c <HAL_I2C_Master_Transmit+0x250>)
 8002b2e:	400a      	ands	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2241      	movs	r2, #65	@ 0x41
 8002b36:	2120      	movs	r1, #32
 8002b38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2242      	movs	r2, #66	@ 0x42
 8002b3e:	2100      	movs	r1, #0
 8002b40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2240      	movs	r2, #64	@ 0x40
 8002b46:	2100      	movs	r1, #0
 8002b48:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e000      	b.n	8002b50 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
  }
}
 8002b50:	0018      	movs	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b007      	add	sp, #28
 8002b56:	bd90      	pop	{r4, r7, pc}
 8002b58:	80002000 	.word	0x80002000
 8002b5c:	fe00e800 	.word	0xfe00e800

08002b60 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002b60:	b590      	push	{r4, r7, lr}
 8002b62:	b089      	sub	sp, #36	@ 0x24
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	0008      	movs	r0, r1
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	230a      	movs	r3, #10
 8002b70:	18fb      	adds	r3, r7, r3
 8002b72:	1c02      	adds	r2, r0, #0
 8002b74:	801a      	strh	r2, [r3, #0]
 8002b76:	2308      	movs	r3, #8
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	1c0a      	adds	r2, r1, #0
 8002b7c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2241      	movs	r2, #65	@ 0x41
 8002b82:	5c9b      	ldrb	r3, [r3, r2]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d000      	beq.n	8002b8c <HAL_I2C_Master_Receive+0x2c>
 8002b8a:	e0e8      	b.n	8002d5e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2240      	movs	r2, #64	@ 0x40
 8002b90:	5c9b      	ldrb	r3, [r3, r2]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_I2C_Master_Receive+0x3a>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e0e2      	b.n	8002d60 <HAL_I2C_Master_Receive+0x200>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2240      	movs	r2, #64	@ 0x40
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ba2:	f7ff fb37 	bl	8002214 <HAL_GetTick>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002baa:	2380      	movs	r3, #128	@ 0x80
 8002bac:	0219      	lsls	r1, r3, #8
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	2319      	movs	r3, #25
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f000 f8fc 	bl	8002db4 <I2C_WaitOnFlagUntilTimeout>
 8002bbc:	1e03      	subs	r3, r0, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0cd      	b.n	8002d60 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2241      	movs	r2, #65	@ 0x41
 8002bc8:	2122      	movs	r1, #34	@ 0x22
 8002bca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2242      	movs	r2, #66	@ 0x42
 8002bd0:	2110      	movs	r1, #16
 8002bd2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2208      	movs	r2, #8
 8002be4:	18ba      	adds	r2, r7, r2
 8002be6:	8812      	ldrh	r2, [r2, #0]
 8002be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2bff      	cmp	r3, #255	@ 0xff
 8002bf8:	d911      	bls.n	8002c1e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	22ff      	movs	r2, #255	@ 0xff
 8002bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	2380      	movs	r3, #128	@ 0x80
 8002c08:	045c      	lsls	r4, r3, #17
 8002c0a:	230a      	movs	r3, #10
 8002c0c:	18fb      	adds	r3, r7, r3
 8002c0e:	8819      	ldrh	r1, [r3, #0]
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	4b55      	ldr	r3, [pc, #340]	@ (8002d68 <HAL_I2C_Master_Receive+0x208>)
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	0023      	movs	r3, r4
 8002c18:	f000 fb44 	bl	80032a4 <I2C_TransferConfig>
 8002c1c:	e076      	b.n	8002d0c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	2380      	movs	r3, #128	@ 0x80
 8002c30:	049c      	lsls	r4, r3, #18
 8002c32:	230a      	movs	r3, #10
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	8819      	ldrh	r1, [r3, #0]
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	4b4b      	ldr	r3, [pc, #300]	@ (8002d68 <HAL_I2C_Master_Receive+0x208>)
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	0023      	movs	r3, r4
 8002c40:	f000 fb30 	bl	80032a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002c44:	e062      	b.n	8002d0c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f000 f993 	bl	8002f78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c52:	1e03      	subs	r3, r0, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e082      	b.n	8002d60 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d03a      	beq.n	8002d0c <HAL_I2C_Master_Receive+0x1ac>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d136      	bne.n	8002d0c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	0013      	movs	r3, r2
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2180      	movs	r1, #128	@ 0x80
 8002cac:	f000 f882 	bl	8002db4 <I2C_WaitOnFlagUntilTimeout>
 8002cb0:	1e03      	subs	r3, r0, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e053      	b.n	8002d60 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	2bff      	cmp	r3, #255	@ 0xff
 8002cc0:	d911      	bls.n	8002ce6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	22ff      	movs	r2, #255	@ 0xff
 8002cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	2380      	movs	r3, #128	@ 0x80
 8002cd0:	045c      	lsls	r4, r3, #17
 8002cd2:	230a      	movs	r3, #10
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	8819      	ldrh	r1, [r3, #0]
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	0023      	movs	r3, r4
 8002ce0:	f000 fae0 	bl	80032a4 <I2C_TransferConfig>
 8002ce4:	e012      	b.n	8002d0c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	2380      	movs	r3, #128	@ 0x80
 8002cf8:	049c      	lsls	r4, r3, #18
 8002cfa:	230a      	movs	r3, #10
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	8819      	ldrh	r1, [r3, #0]
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	2300      	movs	r3, #0
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	0023      	movs	r3, r4
 8002d08:	f000 facc 	bl	80032a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d197      	bne.n	8002c46 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f000 f8e7 	bl	8002ef0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d22:	1e03      	subs	r3, r0, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e01a      	b.n	8002d60 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	490b      	ldr	r1, [pc, #44]	@ (8002d6c <HAL_I2C_Master_Receive+0x20c>)
 8002d3e:	400a      	ands	r2, r1
 8002d40:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2241      	movs	r2, #65	@ 0x41
 8002d46:	2120      	movs	r1, #32
 8002d48:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2242      	movs	r2, #66	@ 0x42
 8002d4e:	2100      	movs	r1, #0
 8002d50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2240      	movs	r2, #64	@ 0x40
 8002d56:	2100      	movs	r1, #0
 8002d58:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e000      	b.n	8002d60 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002d5e:	2302      	movs	r3, #2
  }
}
 8002d60:	0018      	movs	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b007      	add	sp, #28
 8002d66:	bd90      	pop	{r4, r7, pc}
 8002d68:	80002400 	.word	0x80002400
 8002d6c:	fe00e800 	.word	0xfe00e800

08002d70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d103      	bne.n	8002d8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	2201      	movs	r2, #1
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d007      	beq.n	8002dac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2101      	movs	r1, #1
 8002da8:	430a      	orrs	r2, r1
 8002daa:	619a      	str	r2, [r3, #24]
  }
}
 8002dac:	46c0      	nop			@ (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b002      	add	sp, #8
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	1dfb      	adds	r3, r7, #7
 8002dc2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dc4:	e03a      	b.n	8002e3c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	6839      	ldr	r1, [r7, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f000 f971 	bl	80030b4 <I2C_IsErrorOccurred>
 8002dd2:	1e03      	subs	r3, r0, #0
 8002dd4:	d001      	beq.n	8002dda <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e040      	b.n	8002e5c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	d02d      	beq.n	8002e3c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de0:	f7ff fa18 	bl	8002214 <HAL_GetTick>
 8002de4:	0002      	movs	r2, r0
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d302      	bcc.n	8002df6 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d122      	bne.n	8002e3c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	425a      	negs	r2, r3
 8002e06:	4153      	adcs	r3, r2
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	001a      	movs	r2, r3
 8002e0c:	1dfb      	adds	r3, r7, #7
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d113      	bne.n	8002e3c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e18:	2220      	movs	r2, #32
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2241      	movs	r2, #65	@ 0x41
 8002e24:	2120      	movs	r1, #32
 8002e26:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2242      	movs	r2, #66	@ 0x42
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2240      	movs	r2, #64	@ 0x40
 8002e34:	2100      	movs	r1, #0
 8002e36:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e00f      	b.n	8002e5c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	4013      	ands	r3, r2
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	425a      	negs	r2, r3
 8002e4c:	4153      	adcs	r3, r2
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	001a      	movs	r2, r3
 8002e52:	1dfb      	adds	r3, r7, #7
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d0b5      	beq.n	8002dc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b004      	add	sp, #16
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e70:	e032      	b.n	8002ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f000 f91b 	bl	80030b4 <I2C_IsErrorOccurred>
 8002e7e:	1e03      	subs	r3, r0, #0
 8002e80:	d001      	beq.n	8002e86 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e030      	b.n	8002ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	d025      	beq.n	8002ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8c:	f7ff f9c2 	bl	8002214 <HAL_GetTick>
 8002e90:	0002      	movs	r2, r0
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d302      	bcc.n	8002ea2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d11a      	bne.n	8002ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d013      	beq.n	8002ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2241      	movs	r2, #65	@ 0x41
 8002ec0:	2120      	movs	r1, #32
 8002ec2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2242      	movs	r2, #66	@ 0x42
 8002ec8:	2100      	movs	r1, #0
 8002eca:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2240      	movs	r2, #64	@ 0x40
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e007      	b.n	8002ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d1c5      	bne.n	8002e72 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b004      	add	sp, #16
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002efc:	e02f      	b.n	8002f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	68b9      	ldr	r1, [r7, #8]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	0018      	movs	r0, r3
 8002f06:	f000 f8d5 	bl	80030b4 <I2C_IsErrorOccurred>
 8002f0a:	1e03      	subs	r3, r0, #0
 8002f0c:	d001      	beq.n	8002f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e02d      	b.n	8002f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f12:	f7ff f97f 	bl	8002214 <HAL_GetTick>
 8002f16:	0002      	movs	r2, r0
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d302      	bcc.n	8002f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d11a      	bne.n	8002f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d013      	beq.n	8002f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2241      	movs	r2, #65	@ 0x41
 8002f46:	2120      	movs	r1, #32
 8002f48:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2242      	movs	r2, #66	@ 0x42
 8002f4e:	2100      	movs	r1, #0
 8002f50:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2240      	movs	r2, #64	@ 0x40
 8002f56:	2100      	movs	r1, #0
 8002f58:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e007      	b.n	8002f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	2220      	movs	r2, #32
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d1c8      	bne.n	8002efe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	0018      	movs	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b004      	add	sp, #16
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f84:	2317      	movs	r3, #23
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002f8c:	e07b      	b.n	8003086 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	0018      	movs	r0, r3
 8002f96:	f000 f88d 	bl	80030b4 <I2C_IsErrorOccurred>
 8002f9a:	1e03      	subs	r3, r0, #0
 8002f9c:	d003      	beq.n	8002fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8002f9e:	2317      	movs	r3, #23
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	2220      	movs	r2, #32
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d140      	bne.n	8003036 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8002fb4:	2117      	movs	r1, #23
 8002fb6:	187b      	adds	r3, r7, r1
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d13b      	bne.n	8003036 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d106      	bne.n	8002fda <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002fd4:	187b      	adds	r3, r7, r1
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	2210      	movs	r2, #16
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d123      	bne.n	8003030 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2210      	movs	r2, #16
 8002fee:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4929      	ldr	r1, [pc, #164]	@ (80030b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800300a:	400a      	ands	r2, r1
 800300c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2241      	movs	r2, #65	@ 0x41
 8003012:	2120      	movs	r1, #32
 8003014:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2242      	movs	r2, #66	@ 0x42
 800301a:	2100      	movs	r1, #0
 800301c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2240      	movs	r2, #64	@ 0x40
 8003022:	2100      	movs	r1, #0
 8003024:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003026:	2317      	movs	r3, #23
 8003028:	18fb      	adds	r3, r7, r3
 800302a:	2201      	movs	r2, #1
 800302c:	701a      	strb	r2, [r3, #0]
 800302e:	e002      	b.n	8003036 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003036:	f7ff f8ed 	bl	8002214 <HAL_GetTick>
 800303a:	0002      	movs	r2, r0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	429a      	cmp	r2, r3
 8003044:	d302      	bcc.n	800304c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d11c      	bne.n	8003086 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 800304c:	2017      	movs	r0, #23
 800304e:	183b      	adds	r3, r7, r0
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d117      	bne.n	8003086 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	2204      	movs	r2, #4
 800305e:	4013      	ands	r3, r2
 8003060:	2b04      	cmp	r3, #4
 8003062:	d010      	beq.n	8003086 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003068:	2220      	movs	r2, #32
 800306a:	431a      	orrs	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2241      	movs	r2, #65	@ 0x41
 8003074:	2120      	movs	r1, #32
 8003076:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2240      	movs	r2, #64	@ 0x40
 800307c:	2100      	movs	r1, #0
 800307e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003080:	183b      	adds	r3, r7, r0
 8003082:	2201      	movs	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	2204      	movs	r2, #4
 800308e:	4013      	ands	r3, r2
 8003090:	2b04      	cmp	r3, #4
 8003092:	d005      	beq.n	80030a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003094:	2317      	movs	r3, #23
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d100      	bne.n	80030a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800309e:	e776      	b.n	8002f8e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80030a0:	2317      	movs	r3, #23
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	781b      	ldrb	r3, [r3, #0]
}
 80030a6:	0018      	movs	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b006      	add	sp, #24
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	46c0      	nop			@ (mov r8, r8)
 80030b0:	fe00e800 	.word	0xfe00e800

080030b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	@ 0x28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c0:	2327      	movs	r3, #39	@ 0x27
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	2210      	movs	r2, #16
 80030dc:	4013      	ands	r3, r2
 80030de:	d100      	bne.n	80030e2 <I2C_IsErrorOccurred+0x2e>
 80030e0:	e079      	b.n	80031d6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2210      	movs	r2, #16
 80030e8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030ea:	e057      	b.n	800319c <I2C_IsErrorOccurred+0xe8>
 80030ec:	2227      	movs	r2, #39	@ 0x27
 80030ee:	18bb      	adds	r3, r7, r2
 80030f0:	18ba      	adds	r2, r7, r2
 80030f2:	7812      	ldrb	r2, [r2, #0]
 80030f4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	3301      	adds	r3, #1
 80030fa:	d04f      	beq.n	800319c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030fc:	f7ff f88a 	bl	8002214 <HAL_GetTick>
 8003100:	0002      	movs	r2, r0
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	429a      	cmp	r2, r3
 800310a:	d302      	bcc.n	8003112 <I2C_IsErrorOccurred+0x5e>
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d144      	bne.n	800319c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	2380      	movs	r3, #128	@ 0x80
 800311a:	01db      	lsls	r3, r3, #7
 800311c:	4013      	ands	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003120:	2013      	movs	r0, #19
 8003122:	183b      	adds	r3, r7, r0
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	2142      	movs	r1, #66	@ 0x42
 8003128:	5c52      	ldrb	r2, [r2, r1]
 800312a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	2380      	movs	r3, #128	@ 0x80
 8003134:	021b      	lsls	r3, r3, #8
 8003136:	401a      	ands	r2, r3
 8003138:	2380      	movs	r3, #128	@ 0x80
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	429a      	cmp	r2, r3
 800313e:	d126      	bne.n	800318e <I2C_IsErrorOccurred+0xda>
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	2380      	movs	r3, #128	@ 0x80
 8003144:	01db      	lsls	r3, r3, #7
 8003146:	429a      	cmp	r2, r3
 8003148:	d021      	beq.n	800318e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800314a:	183b      	adds	r3, r7, r0
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b20      	cmp	r3, #32
 8003150:	d01d      	beq.n	800318e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2180      	movs	r1, #128	@ 0x80
 800315e:	01c9      	lsls	r1, r1, #7
 8003160:	430a      	orrs	r2, r1
 8003162:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003164:	f7ff f856 	bl	8002214 <HAL_GetTick>
 8003168:	0003      	movs	r3, r0
 800316a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800316c:	e00f      	b.n	800318e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800316e:	f7ff f851 	bl	8002214 <HAL_GetTick>
 8003172:	0002      	movs	r2, r0
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b19      	cmp	r3, #25
 800317a:	d908      	bls.n	800318e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	2220      	movs	r2, #32
 8003180:	4313      	orrs	r3, r2
 8003182:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003184:	2327      	movs	r3, #39	@ 0x27
 8003186:	18fb      	adds	r3, r7, r3
 8003188:	2201      	movs	r2, #1
 800318a:	701a      	strb	r2, [r3, #0]

              break;
 800318c:	e006      	b.n	800319c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	2220      	movs	r2, #32
 8003196:	4013      	ands	r3, r2
 8003198:	2b20      	cmp	r3, #32
 800319a:	d1e8      	bne.n	800316e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2220      	movs	r2, #32
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	d004      	beq.n	80031b4 <I2C_IsErrorOccurred+0x100>
 80031aa:	2327      	movs	r3, #39	@ 0x27
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d09b      	beq.n	80030ec <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031b4:	2327      	movs	r3, #39	@ 0x27
 80031b6:	18fb      	adds	r3, r7, r3
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d103      	bne.n	80031c6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2220      	movs	r2, #32
 80031c4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	2204      	movs	r2, #4
 80031ca:	4313      	orrs	r3, r2
 80031cc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031ce:	2327      	movs	r3, #39	@ 0x27
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	2201      	movs	r2, #1
 80031d4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	2380      	movs	r3, #128	@ 0x80
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4013      	ands	r3, r2
 80031e6:	d00c      	beq.n	8003202 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	2201      	movs	r2, #1
 80031ec:	4313      	orrs	r3, r2
 80031ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2280      	movs	r2, #128	@ 0x80
 80031f6:	0052      	lsls	r2, r2, #1
 80031f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031fa:	2327      	movs	r3, #39	@ 0x27
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	2201      	movs	r2, #1
 8003200:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	2380      	movs	r3, #128	@ 0x80
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4013      	ands	r3, r2
 800320a:	d00c      	beq.n	8003226 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	2208      	movs	r2, #8
 8003210:	4313      	orrs	r3, r2
 8003212:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2280      	movs	r2, #128	@ 0x80
 800321a:	00d2      	lsls	r2, r2, #3
 800321c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800321e:	2327      	movs	r3, #39	@ 0x27
 8003220:	18fb      	adds	r3, r7, r3
 8003222:	2201      	movs	r2, #1
 8003224:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	2380      	movs	r3, #128	@ 0x80
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4013      	ands	r3, r2
 800322e:	d00c      	beq.n	800324a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	2202      	movs	r2, #2
 8003234:	4313      	orrs	r3, r2
 8003236:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2280      	movs	r2, #128	@ 0x80
 800323e:	0092      	lsls	r2, r2, #2
 8003240:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003242:	2327      	movs	r3, #39	@ 0x27
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800324a:	2327      	movs	r3, #39	@ 0x27
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01d      	beq.n	8003290 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	0018      	movs	r0, r3
 8003258:	f7ff fd8a 	bl	8002d70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	490e      	ldr	r1, [pc, #56]	@ (80032a0 <I2C_IsErrorOccurred+0x1ec>)
 8003268:	400a      	ands	r2, r1
 800326a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	431a      	orrs	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2241      	movs	r2, #65	@ 0x41
 800327c:	2120      	movs	r1, #32
 800327e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2242      	movs	r2, #66	@ 0x42
 8003284:	2100      	movs	r1, #0
 8003286:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2240      	movs	r2, #64	@ 0x40
 800328c:	2100      	movs	r1, #0
 800328e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003290:	2327      	movs	r3, #39	@ 0x27
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	781b      	ldrb	r3, [r3, #0]
}
 8003296:	0018      	movs	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	b00a      	add	sp, #40	@ 0x28
 800329c:	bd80      	pop	{r7, pc}
 800329e:	46c0      	nop			@ (mov r8, r8)
 80032a0:	fe00e800 	.word	0xfe00e800

080032a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032a4:	b590      	push	{r4, r7, lr}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	0008      	movs	r0, r1
 80032ae:	0011      	movs	r1, r2
 80032b0:	607b      	str	r3, [r7, #4]
 80032b2:	240a      	movs	r4, #10
 80032b4:	193b      	adds	r3, r7, r4
 80032b6:	1c02      	adds	r2, r0, #0
 80032b8:	801a      	strh	r2, [r3, #0]
 80032ba:	2009      	movs	r0, #9
 80032bc:	183b      	adds	r3, r7, r0
 80032be:	1c0a      	adds	r2, r1, #0
 80032c0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032c2:	193b      	adds	r3, r7, r4
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	059b      	lsls	r3, r3, #22
 80032c8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032ca:	183b      	adds	r3, r7, r0
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	0419      	lsls	r1, r3, #16
 80032d0:	23ff      	movs	r3, #255	@ 0xff
 80032d2:	041b      	lsls	r3, r3, #16
 80032d4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032d6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032de:	4313      	orrs	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	085b      	lsrs	r3, r3, #1
 80032e4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032ee:	0d51      	lsrs	r1, r2, #21
 80032f0:	2280      	movs	r2, #128	@ 0x80
 80032f2:	00d2      	lsls	r2, r2, #3
 80032f4:	400a      	ands	r2, r1
 80032f6:	4907      	ldr	r1, [pc, #28]	@ (8003314 <I2C_TransferConfig+0x70>)
 80032f8:	430a      	orrs	r2, r1
 80032fa:	43d2      	mvns	r2, r2
 80032fc:	401a      	ands	r2, r3
 80032fe:	0011      	movs	r1, r2
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800330a:	46c0      	nop			@ (mov r8, r8)
 800330c:	46bd      	mov	sp, r7
 800330e:	b007      	add	sp, #28
 8003310:	bd90      	pop	{r4, r7, pc}
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	03ff63ff 	.word	0x03ff63ff

08003318 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2241      	movs	r2, #65	@ 0x41
 8003326:	5c9b      	ldrb	r3, [r3, r2]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b20      	cmp	r3, #32
 800332c:	d138      	bne.n	80033a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2240      	movs	r2, #64	@ 0x40
 8003332:	5c9b      	ldrb	r3, [r3, r2]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003338:	2302      	movs	r3, #2
 800333a:	e032      	b.n	80033a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2240      	movs	r2, #64	@ 0x40
 8003340:	2101      	movs	r1, #1
 8003342:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2241      	movs	r2, #65	@ 0x41
 8003348:	2124      	movs	r1, #36	@ 0x24
 800334a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2101      	movs	r1, #1
 8003358:	438a      	bics	r2, r1
 800335a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4911      	ldr	r1, [pc, #68]	@ (80033ac <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003368:	400a      	ands	r2, r1
 800336a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6819      	ldr	r1, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2101      	movs	r1, #1
 8003388:	430a      	orrs	r2, r1
 800338a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2241      	movs	r2, #65	@ 0x41
 8003390:	2120      	movs	r1, #32
 8003392:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2240      	movs	r2, #64	@ 0x40
 8003398:	2100      	movs	r1, #0
 800339a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	e000      	b.n	80033a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033a0:	2302      	movs	r3, #2
  }
}
 80033a2:	0018      	movs	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b002      	add	sp, #8
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	46c0      	nop			@ (mov r8, r8)
 80033ac:	ffffefff 	.word	0xffffefff

080033b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2241      	movs	r2, #65	@ 0x41
 80033be:	5c9b      	ldrb	r3, [r3, r2]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d139      	bne.n	800343a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2240      	movs	r2, #64	@ 0x40
 80033ca:	5c9b      	ldrb	r3, [r3, r2]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e033      	b.n	800343c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2240      	movs	r2, #64	@ 0x40
 80033d8:	2101      	movs	r1, #1
 80033da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2241      	movs	r2, #65	@ 0x41
 80033e0:	2124      	movs	r1, #36	@ 0x24
 80033e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2101      	movs	r1, #1
 80033f0:	438a      	bics	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4a11      	ldr	r2, [pc, #68]	@ (8003444 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003400:	4013      	ands	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2101      	movs	r1, #1
 8003422:	430a      	orrs	r2, r1
 8003424:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2241      	movs	r2, #65	@ 0x41
 800342a:	2120      	movs	r1, #32
 800342c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2240      	movs	r2, #64	@ 0x40
 8003432:	2100      	movs	r1, #0
 8003434:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	e000      	b.n	800343c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800343a:	2302      	movs	r3, #2
  }
}
 800343c:	0018      	movs	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	b004      	add	sp, #16
 8003442:	bd80      	pop	{r7, pc}
 8003444:	fffff0ff 	.word	0xfffff0ff

08003448 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800344c:	4b04      	ldr	r3, [pc, #16]	@ (8003460 <HAL_PWR_EnableBkUpAccess+0x18>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4b03      	ldr	r3, [pc, #12]	@ (8003460 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003452:	2180      	movs	r1, #128	@ 0x80
 8003454:	0049      	lsls	r1, r1, #1
 8003456:	430a      	orrs	r2, r1
 8003458:	601a      	str	r2, [r3, #0]
}
 800345a:	46c0      	nop			@ (mov r8, r8)
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40007000 	.word	0x40007000

08003464 <HAL_PWR_DisableBkUpAccess>:
/**
  * @brief  Disable access to the backup domain
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8003468:	4b04      	ldr	r3, [pc, #16]	@ (800347c <HAL_PWR_DisableBkUpAccess+0x18>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4b03      	ldr	r3, [pc, #12]	@ (800347c <HAL_PWR_DisableBkUpAccess+0x18>)
 800346e:	4904      	ldr	r1, [pc, #16]	@ (8003480 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8003470:	400a      	ands	r2, r1
 8003472:	601a      	str	r2, [r3, #0]
}
 8003474:	46c0      	nop			@ (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	40007000 	.word	0x40007000
 8003480:	fffffeff 	.word	0xfffffeff

08003484 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800348c:	4b19      	ldr	r3, [pc, #100]	@ (80034f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a19      	ldr	r2, [pc, #100]	@ (80034f8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003492:	4013      	ands	r3, r2
 8003494:	0019      	movs	r1, r3
 8003496:	4b17      	ldr	r3, [pc, #92]	@ (80034f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	430a      	orrs	r2, r1
 800349c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	2380      	movs	r3, #128	@ 0x80
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d11f      	bne.n	80034e8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80034a8:	4b14      	ldr	r3, [pc, #80]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x78>)
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	0013      	movs	r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	189b      	adds	r3, r3, r2
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	4912      	ldr	r1, [pc, #72]	@ (8003500 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80034b6:	0018      	movs	r0, r3
 80034b8:	f7fc fe24 	bl	8000104 <__udivsi3>
 80034bc:	0003      	movs	r3, r0
 80034be:	3301      	adds	r3, #1
 80034c0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034c2:	e008      	b.n	80034d6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	e001      	b.n	80034d6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e009      	b.n	80034ea <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034d6:	4b07      	ldr	r3, [pc, #28]	@ (80034f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	2380      	movs	r3, #128	@ 0x80
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	401a      	ands	r2, r3
 80034e0:	2380      	movs	r3, #128	@ 0x80
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d0ed      	beq.n	80034c4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	0018      	movs	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b004      	add	sp, #16
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			@ (mov r8, r8)
 80034f4:	40007000 	.word	0x40007000
 80034f8:	fffff9ff 	.word	0xfffff9ff
 80034fc:	20000054 	.word	0x20000054
 8003500:	000f4240 	.word	0x000f4240

08003504 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e2fe      	b.n	8003b14 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2201      	movs	r2, #1
 800351c:	4013      	ands	r3, r2
 800351e:	d100      	bne.n	8003522 <HAL_RCC_OscConfig+0x1e>
 8003520:	e07c      	b.n	800361c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003522:	4bc3      	ldr	r3, [pc, #780]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2238      	movs	r2, #56	@ 0x38
 8003528:	4013      	ands	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800352c:	4bc0      	ldr	r3, [pc, #768]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	2203      	movs	r2, #3
 8003532:	4013      	ands	r3, r2
 8003534:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2b10      	cmp	r3, #16
 800353a:	d102      	bne.n	8003542 <HAL_RCC_OscConfig+0x3e>
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2b03      	cmp	r3, #3
 8003540:	d002      	beq.n	8003548 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b08      	cmp	r3, #8
 8003546:	d10b      	bne.n	8003560 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	4bb9      	ldr	r3, [pc, #740]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	2380      	movs	r3, #128	@ 0x80
 800354e:	029b      	lsls	r3, r3, #10
 8003550:	4013      	ands	r3, r2
 8003552:	d062      	beq.n	800361a <HAL_RCC_OscConfig+0x116>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d15e      	bne.n	800361a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e2d9      	b.n	8003b14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	2380      	movs	r3, #128	@ 0x80
 8003566:	025b      	lsls	r3, r3, #9
 8003568:	429a      	cmp	r2, r3
 800356a:	d107      	bne.n	800357c <HAL_RCC_OscConfig+0x78>
 800356c:	4bb0      	ldr	r3, [pc, #704]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	4baf      	ldr	r3, [pc, #700]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 8003572:	2180      	movs	r1, #128	@ 0x80
 8003574:	0249      	lsls	r1, r1, #9
 8003576:	430a      	orrs	r2, r1
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	e020      	b.n	80035be <HAL_RCC_OscConfig+0xba>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	23a0      	movs	r3, #160	@ 0xa0
 8003582:	02db      	lsls	r3, r3, #11
 8003584:	429a      	cmp	r2, r3
 8003586:	d10e      	bne.n	80035a6 <HAL_RCC_OscConfig+0xa2>
 8003588:	4ba9      	ldr	r3, [pc, #676]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4ba8      	ldr	r3, [pc, #672]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 800358e:	2180      	movs	r1, #128	@ 0x80
 8003590:	02c9      	lsls	r1, r1, #11
 8003592:	430a      	orrs	r2, r1
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	4ba6      	ldr	r3, [pc, #664]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4ba5      	ldr	r3, [pc, #660]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 800359c:	2180      	movs	r1, #128	@ 0x80
 800359e:	0249      	lsls	r1, r1, #9
 80035a0:	430a      	orrs	r2, r1
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	e00b      	b.n	80035be <HAL_RCC_OscConfig+0xba>
 80035a6:	4ba2      	ldr	r3, [pc, #648]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	4ba1      	ldr	r3, [pc, #644]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 80035ac:	49a1      	ldr	r1, [pc, #644]	@ (8003834 <HAL_RCC_OscConfig+0x330>)
 80035ae:	400a      	ands	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	4b9f      	ldr	r3, [pc, #636]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	4b9e      	ldr	r3, [pc, #632]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 80035b8:	499f      	ldr	r1, [pc, #636]	@ (8003838 <HAL_RCC_OscConfig+0x334>)
 80035ba:	400a      	ands	r2, r1
 80035bc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d014      	beq.n	80035f0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c6:	f7fe fe25 	bl	8002214 <HAL_GetTick>
 80035ca:	0003      	movs	r3, r0
 80035cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fe fe20 	bl	8002214 <HAL_GetTick>
 80035d4:	0002      	movs	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	@ 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e298      	b.n	8003b14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035e2:	4b93      	ldr	r3, [pc, #588]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	029b      	lsls	r3, r3, #10
 80035ea:	4013      	ands	r3, r2
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0xcc>
 80035ee:	e015      	b.n	800361c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fe fe10 	bl	8002214 <HAL_GetTick>
 80035f4:	0003      	movs	r3, r0
 80035f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035fa:	f7fe fe0b 	bl	8002214 <HAL_GetTick>
 80035fe:	0002      	movs	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b64      	cmp	r3, #100	@ 0x64
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e283      	b.n	8003b14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800360c:	4b88      	ldr	r3, [pc, #544]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	2380      	movs	r3, #128	@ 0x80
 8003612:	029b      	lsls	r3, r3, #10
 8003614:	4013      	ands	r3, r2
 8003616:	d1f0      	bne.n	80035fa <HAL_RCC_OscConfig+0xf6>
 8003618:	e000      	b.n	800361c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2202      	movs	r2, #2
 8003622:	4013      	ands	r3, r2
 8003624:	d100      	bne.n	8003628 <HAL_RCC_OscConfig+0x124>
 8003626:	e099      	b.n	800375c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003628:	4b81      	ldr	r3, [pc, #516]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2238      	movs	r2, #56	@ 0x38
 800362e:	4013      	ands	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003632:	4b7f      	ldr	r3, [pc, #508]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2203      	movs	r2, #3
 8003638:	4013      	ands	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b10      	cmp	r3, #16
 8003640:	d102      	bne.n	8003648 <HAL_RCC_OscConfig+0x144>
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d002      	beq.n	800364e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d135      	bne.n	80036ba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800364e:	4b78      	ldr	r3, [pc, #480]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	2380      	movs	r3, #128	@ 0x80
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	4013      	ands	r3, r2
 8003658:	d005      	beq.n	8003666 <HAL_RCC_OscConfig+0x162>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e256      	b.n	8003b14 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003666:	4b72      	ldr	r3, [pc, #456]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	4a74      	ldr	r2, [pc, #464]	@ (800383c <HAL_RCC_OscConfig+0x338>)
 800366c:	4013      	ands	r3, r2
 800366e:	0019      	movs	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	021a      	lsls	r2, r3, #8
 8003676:	4b6e      	ldr	r3, [pc, #440]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 8003678:	430a      	orrs	r2, r1
 800367a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d112      	bne.n	80036a8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003682:	4b6b      	ldr	r3, [pc, #428]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a6e      	ldr	r2, [pc, #440]	@ (8003840 <HAL_RCC_OscConfig+0x33c>)
 8003688:	4013      	ands	r3, r2
 800368a:	0019      	movs	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	4b67      	ldr	r3, [pc, #412]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 8003692:	430a      	orrs	r2, r1
 8003694:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003696:	4b66      	ldr	r3, [pc, #408]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	0adb      	lsrs	r3, r3, #11
 800369c:	2207      	movs	r2, #7
 800369e:	4013      	ands	r3, r2
 80036a0:	4a68      	ldr	r2, [pc, #416]	@ (8003844 <HAL_RCC_OscConfig+0x340>)
 80036a2:	40da      	lsrs	r2, r3
 80036a4:	4b68      	ldr	r3, [pc, #416]	@ (8003848 <HAL_RCC_OscConfig+0x344>)
 80036a6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036a8:	4b68      	ldr	r3, [pc, #416]	@ (800384c <HAL_RCC_OscConfig+0x348>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	0018      	movs	r0, r3
 80036ae:	f7fe fd55 	bl	800215c <HAL_InitTick>
 80036b2:	1e03      	subs	r3, r0, #0
 80036b4:	d051      	beq.n	800375a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e22c      	b.n	8003b14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d030      	beq.n	8003724 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80036c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003840 <HAL_RCC_OscConfig+0x33c>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	0019      	movs	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	4b57      	ldr	r3, [pc, #348]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 80036d2:	430a      	orrs	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80036d6:	4b56      	ldr	r3, [pc, #344]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	4b55      	ldr	r3, [pc, #340]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 80036dc:	2180      	movs	r1, #128	@ 0x80
 80036de:	0049      	lsls	r1, r1, #1
 80036e0:	430a      	orrs	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe fd96 	bl	8002214 <HAL_GetTick>
 80036e8:	0003      	movs	r3, r0
 80036ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ee:	f7fe fd91 	bl	8002214 <HAL_GetTick>
 80036f2:	0002      	movs	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e209      	b.n	8003b14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003700:	4b4b      	ldr	r3, [pc, #300]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	2380      	movs	r3, #128	@ 0x80
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4013      	ands	r3, r2
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370c:	4b48      	ldr	r3, [pc, #288]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4a4a      	ldr	r2, [pc, #296]	@ (800383c <HAL_RCC_OscConfig+0x338>)
 8003712:	4013      	ands	r3, r2
 8003714:	0019      	movs	r1, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	021a      	lsls	r2, r3, #8
 800371c:	4b44      	ldr	r3, [pc, #272]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	e01b      	b.n	800375c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003724:	4b42      	ldr	r3, [pc, #264]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	4b41      	ldr	r3, [pc, #260]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 800372a:	4949      	ldr	r1, [pc, #292]	@ (8003850 <HAL_RCC_OscConfig+0x34c>)
 800372c:	400a      	ands	r2, r1
 800372e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7fe fd70 	bl	8002214 <HAL_GetTick>
 8003734:	0003      	movs	r3, r0
 8003736:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800373a:	f7fe fd6b 	bl	8002214 <HAL_GetTick>
 800373e:	0002      	movs	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e1e3      	b.n	8003b14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800374c:	4b38      	ldr	r3, [pc, #224]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	2380      	movs	r3, #128	@ 0x80
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4013      	ands	r3, r2
 8003756:	d1f0      	bne.n	800373a <HAL_RCC_OscConfig+0x236>
 8003758:	e000      	b.n	800375c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800375a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2208      	movs	r2, #8
 8003762:	4013      	ands	r3, r2
 8003764:	d047      	beq.n	80037f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003766:	4b32      	ldr	r3, [pc, #200]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2238      	movs	r2, #56	@ 0x38
 800376c:	4013      	ands	r3, r2
 800376e:	2b18      	cmp	r3, #24
 8003770:	d10a      	bne.n	8003788 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003772:	4b2f      	ldr	r3, [pc, #188]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 8003774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003776:	2202      	movs	r2, #2
 8003778:	4013      	ands	r3, r2
 800377a:	d03c      	beq.n	80037f6 <HAL_RCC_OscConfig+0x2f2>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d138      	bne.n	80037f6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e1c5      	b.n	8003b14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d019      	beq.n	80037c4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003790:	4b27      	ldr	r3, [pc, #156]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 8003792:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003794:	4b26      	ldr	r3, [pc, #152]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 8003796:	2101      	movs	r1, #1
 8003798:	430a      	orrs	r2, r1
 800379a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7fe fd3a 	bl	8002214 <HAL_GetTick>
 80037a0:	0003      	movs	r3, r0
 80037a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a6:	f7fe fd35 	bl	8002214 <HAL_GetTick>
 80037aa:	0002      	movs	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e1ad      	b.n	8003b14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 80037ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037bc:	2202      	movs	r2, #2
 80037be:	4013      	ands	r3, r2
 80037c0:	d0f1      	beq.n	80037a6 <HAL_RCC_OscConfig+0x2a2>
 80037c2:	e018      	b.n	80037f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80037c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 80037c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80037c8:	4b19      	ldr	r3, [pc, #100]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 80037ca:	2101      	movs	r1, #1
 80037cc:	438a      	bics	r2, r1
 80037ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d0:	f7fe fd20 	bl	8002214 <HAL_GetTick>
 80037d4:	0003      	movs	r3, r0
 80037d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037da:	f7fe fd1b 	bl	8002214 <HAL_GetTick>
 80037de:	0002      	movs	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e193      	b.n	8003b14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037ec:	4b10      	ldr	r3, [pc, #64]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 80037ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f0:	2202      	movs	r2, #2
 80037f2:	4013      	ands	r3, r2
 80037f4:	d1f1      	bne.n	80037da <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2204      	movs	r2, #4
 80037fc:	4013      	ands	r3, r2
 80037fe:	d100      	bne.n	8003802 <HAL_RCC_OscConfig+0x2fe>
 8003800:	e0c6      	b.n	8003990 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003802:	231f      	movs	r3, #31
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	2200      	movs	r2, #0
 8003808:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800380a:	4b09      	ldr	r3, [pc, #36]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2238      	movs	r2, #56	@ 0x38
 8003810:	4013      	ands	r3, r2
 8003812:	2b20      	cmp	r3, #32
 8003814:	d11e      	bne.n	8003854 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003816:	4b06      	ldr	r3, [pc, #24]	@ (8003830 <HAL_RCC_OscConfig+0x32c>)
 8003818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381a:	2202      	movs	r2, #2
 800381c:	4013      	ands	r3, r2
 800381e:	d100      	bne.n	8003822 <HAL_RCC_OscConfig+0x31e>
 8003820:	e0b6      	b.n	8003990 <HAL_RCC_OscConfig+0x48c>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d000      	beq.n	800382c <HAL_RCC_OscConfig+0x328>
 800382a:	e0b1      	b.n	8003990 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e171      	b.n	8003b14 <HAL_RCC_OscConfig+0x610>
 8003830:	40021000 	.word	0x40021000
 8003834:	fffeffff 	.word	0xfffeffff
 8003838:	fffbffff 	.word	0xfffbffff
 800383c:	ffff80ff 	.word	0xffff80ff
 8003840:	ffffc7ff 	.word	0xffffc7ff
 8003844:	00f42400 	.word	0x00f42400
 8003848:	20000054 	.word	0x20000054
 800384c:	20000058 	.word	0x20000058
 8003850:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003854:	4bb1      	ldr	r3, [pc, #708]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 8003856:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003858:	2380      	movs	r3, #128	@ 0x80
 800385a:	055b      	lsls	r3, r3, #21
 800385c:	4013      	ands	r3, r2
 800385e:	d101      	bne.n	8003864 <HAL_RCC_OscConfig+0x360>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <HAL_RCC_OscConfig+0x362>
 8003864:	2300      	movs	r3, #0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d011      	beq.n	800388e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800386a:	4bac      	ldr	r3, [pc, #688]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 800386c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800386e:	4bab      	ldr	r3, [pc, #684]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 8003870:	2180      	movs	r1, #128	@ 0x80
 8003872:	0549      	lsls	r1, r1, #21
 8003874:	430a      	orrs	r2, r1
 8003876:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003878:	4ba8      	ldr	r3, [pc, #672]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 800387a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800387c:	2380      	movs	r3, #128	@ 0x80
 800387e:	055b      	lsls	r3, r3, #21
 8003880:	4013      	ands	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003886:	231f      	movs	r3, #31
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	2201      	movs	r2, #1
 800388c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800388e:	4ba4      	ldr	r3, [pc, #656]	@ (8003b20 <HAL_RCC_OscConfig+0x61c>)
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	2380      	movs	r3, #128	@ 0x80
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	4013      	ands	r3, r2
 8003898:	d11a      	bne.n	80038d0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800389a:	4ba1      	ldr	r3, [pc, #644]	@ (8003b20 <HAL_RCC_OscConfig+0x61c>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	4ba0      	ldr	r3, [pc, #640]	@ (8003b20 <HAL_RCC_OscConfig+0x61c>)
 80038a0:	2180      	movs	r1, #128	@ 0x80
 80038a2:	0049      	lsls	r1, r1, #1
 80038a4:	430a      	orrs	r2, r1
 80038a6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80038a8:	f7fe fcb4 	bl	8002214 <HAL_GetTick>
 80038ac:	0003      	movs	r3, r0
 80038ae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b2:	f7fe fcaf 	bl	8002214 <HAL_GetTick>
 80038b6:	0002      	movs	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e127      	b.n	8003b14 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038c4:	4b96      	ldr	r3, [pc, #600]	@ (8003b20 <HAL_RCC_OscConfig+0x61c>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	2380      	movs	r3, #128	@ 0x80
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4013      	ands	r3, r2
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d106      	bne.n	80038e6 <HAL_RCC_OscConfig+0x3e2>
 80038d8:	4b90      	ldr	r3, [pc, #576]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 80038da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038dc:	4b8f      	ldr	r3, [pc, #572]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 80038de:	2101      	movs	r1, #1
 80038e0:	430a      	orrs	r2, r1
 80038e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038e4:	e01c      	b.n	8003920 <HAL_RCC_OscConfig+0x41c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b05      	cmp	r3, #5
 80038ec:	d10c      	bne.n	8003908 <HAL_RCC_OscConfig+0x404>
 80038ee:	4b8b      	ldr	r3, [pc, #556]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 80038f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038f2:	4b8a      	ldr	r3, [pc, #552]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 80038f4:	2104      	movs	r1, #4
 80038f6:	430a      	orrs	r2, r1
 80038f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038fa:	4b88      	ldr	r3, [pc, #544]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 80038fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038fe:	4b87      	ldr	r3, [pc, #540]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 8003900:	2101      	movs	r1, #1
 8003902:	430a      	orrs	r2, r1
 8003904:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003906:	e00b      	b.n	8003920 <HAL_RCC_OscConfig+0x41c>
 8003908:	4b84      	ldr	r3, [pc, #528]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 800390a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800390c:	4b83      	ldr	r3, [pc, #524]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 800390e:	2101      	movs	r1, #1
 8003910:	438a      	bics	r2, r1
 8003912:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003914:	4b81      	ldr	r3, [pc, #516]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 8003916:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003918:	4b80      	ldr	r3, [pc, #512]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 800391a:	2104      	movs	r1, #4
 800391c:	438a      	bics	r2, r1
 800391e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d014      	beq.n	8003952 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fe fc74 	bl	8002214 <HAL_GetTick>
 800392c:	0003      	movs	r3, r0
 800392e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003930:	e009      	b.n	8003946 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003932:	f7fe fc6f 	bl	8002214 <HAL_GetTick>
 8003936:	0002      	movs	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	4a79      	ldr	r2, [pc, #484]	@ (8003b24 <HAL_RCC_OscConfig+0x620>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e0e6      	b.n	8003b14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003946:	4b75      	ldr	r3, [pc, #468]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 8003948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394a:	2202      	movs	r2, #2
 800394c:	4013      	ands	r3, r2
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x42e>
 8003950:	e013      	b.n	800397a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003952:	f7fe fc5f 	bl	8002214 <HAL_GetTick>
 8003956:	0003      	movs	r3, r0
 8003958:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800395a:	e009      	b.n	8003970 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395c:	f7fe fc5a 	bl	8002214 <HAL_GetTick>
 8003960:	0002      	movs	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	4a6f      	ldr	r2, [pc, #444]	@ (8003b24 <HAL_RCC_OscConfig+0x620>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e0d1      	b.n	8003b14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003970:	4b6a      	ldr	r3, [pc, #424]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 8003972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003974:	2202      	movs	r2, #2
 8003976:	4013      	ands	r3, r2
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800397a:	231f      	movs	r3, #31
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d105      	bne.n	8003990 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003984:	4b65      	ldr	r3, [pc, #404]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 8003986:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003988:	4b64      	ldr	r3, [pc, #400]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 800398a:	4967      	ldr	r1, [pc, #412]	@ (8003b28 <HAL_RCC_OscConfig+0x624>)
 800398c:	400a      	ands	r2, r1
 800398e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d100      	bne.n	800399a <HAL_RCC_OscConfig+0x496>
 8003998:	e0bb      	b.n	8003b12 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800399a:	4b60      	ldr	r3, [pc, #384]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2238      	movs	r2, #56	@ 0x38
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b10      	cmp	r3, #16
 80039a4:	d100      	bne.n	80039a8 <HAL_RCC_OscConfig+0x4a4>
 80039a6:	e07b      	b.n	8003aa0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d156      	bne.n	8003a5e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b0:	4b5a      	ldr	r3, [pc, #360]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	4b59      	ldr	r3, [pc, #356]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 80039b6:	495d      	ldr	r1, [pc, #372]	@ (8003b2c <HAL_RCC_OscConfig+0x628>)
 80039b8:	400a      	ands	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7fe fc2a 	bl	8002214 <HAL_GetTick>
 80039c0:	0003      	movs	r3, r0
 80039c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c6:	f7fe fc25 	bl	8002214 <HAL_GetTick>
 80039ca:	0002      	movs	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e09d      	b.n	8003b14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039d8:	4b50      	ldr	r3, [pc, #320]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	2380      	movs	r3, #128	@ 0x80
 80039de:	049b      	lsls	r3, r3, #18
 80039e0:	4013      	ands	r3, r2
 80039e2:	d1f0      	bne.n	80039c6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039e4:	4b4d      	ldr	r3, [pc, #308]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4a51      	ldr	r2, [pc, #324]	@ (8003b30 <HAL_RCC_OscConfig+0x62c>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	0019      	movs	r1, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1a      	ldr	r2, [r3, #32]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a10:	431a      	orrs	r2, r3
 8003a12:	4b42      	ldr	r3, [pc, #264]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 8003a14:	430a      	orrs	r2, r1
 8003a16:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a18:	4b40      	ldr	r3, [pc, #256]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 8003a1e:	2180      	movs	r1, #128	@ 0x80
 8003a20:	0449      	lsls	r1, r1, #17
 8003a22:	430a      	orrs	r2, r1
 8003a24:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003a26:	4b3d      	ldr	r3, [pc, #244]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	4b3c      	ldr	r3, [pc, #240]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 8003a2c:	2180      	movs	r1, #128	@ 0x80
 8003a2e:	0549      	lsls	r1, r1, #21
 8003a30:	430a      	orrs	r2, r1
 8003a32:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fe fbee 	bl	8002214 <HAL_GetTick>
 8003a38:	0003      	movs	r3, r0
 8003a3a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3e:	f7fe fbe9 	bl	8002214 <HAL_GetTick>
 8003a42:	0002      	movs	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e061      	b.n	8003b14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a50:	4b32      	ldr	r3, [pc, #200]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	2380      	movs	r3, #128	@ 0x80
 8003a56:	049b      	lsls	r3, r3, #18
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x53a>
 8003a5c:	e059      	b.n	8003b12 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	4b2e      	ldr	r3, [pc, #184]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 8003a64:	4931      	ldr	r1, [pc, #196]	@ (8003b2c <HAL_RCC_OscConfig+0x628>)
 8003a66:	400a      	ands	r2, r1
 8003a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fe fbd3 	bl	8002214 <HAL_GetTick>
 8003a6e:	0003      	movs	r3, r0
 8003a70:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fe fbce 	bl	8002214 <HAL_GetTick>
 8003a78:	0002      	movs	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e046      	b.n	8003b14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a86:	4b25      	ldr	r3, [pc, #148]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	2380      	movs	r3, #128	@ 0x80
 8003a8c:	049b      	lsls	r3, r3, #18
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003a92:	4b22      	ldr	r3, [pc, #136]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	4b21      	ldr	r3, [pc, #132]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 8003a98:	4926      	ldr	r1, [pc, #152]	@ (8003b34 <HAL_RCC_OscConfig+0x630>)
 8003a9a:	400a      	ands	r2, r1
 8003a9c:	60da      	str	r2, [r3, #12]
 8003a9e:	e038      	b.n	8003b12 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e033      	b.n	8003b14 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003aac:	4b1b      	ldr	r3, [pc, #108]	@ (8003b1c <HAL_RCC_OscConfig+0x618>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	401a      	ands	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d126      	bne.n	8003b0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2270      	movs	r2, #112	@ 0x70
 8003ac4:	401a      	ands	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d11f      	bne.n	8003b0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	23fe      	movs	r3, #254	@ 0xfe
 8003ad2:	01db      	lsls	r3, r3, #7
 8003ad4:	401a      	ands	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ada:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d116      	bne.n	8003b0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	23f8      	movs	r3, #248	@ 0xf8
 8003ae4:	039b      	lsls	r3, r3, #14
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d10e      	bne.n	8003b0e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	23e0      	movs	r3, #224	@ 0xe0
 8003af4:	051b      	lsls	r3, r3, #20
 8003af6:	401a      	ands	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d106      	bne.n	8003b0e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	0f5b      	lsrs	r3, r3, #29
 8003b04:	075a      	lsls	r2, r3, #29
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d001      	beq.n	8003b12 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	0018      	movs	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	b008      	add	sp, #32
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40007000 	.word	0x40007000
 8003b24:	00001388 	.word	0x00001388
 8003b28:	efffffff 	.word	0xefffffff
 8003b2c:	feffffff 	.word	0xfeffffff
 8003b30:	11c1808c 	.word	0x11c1808c
 8003b34:	eefefffc 	.word	0xeefefffc

08003b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0e9      	b.n	8003d20 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b4c:	4b76      	ldr	r3, [pc, #472]	@ (8003d28 <HAL_RCC_ClockConfig+0x1f0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2207      	movs	r2, #7
 8003b52:	4013      	ands	r3, r2
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d91e      	bls.n	8003b98 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5a:	4b73      	ldr	r3, [pc, #460]	@ (8003d28 <HAL_RCC_ClockConfig+0x1f0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2207      	movs	r2, #7
 8003b60:	4393      	bics	r3, r2
 8003b62:	0019      	movs	r1, r3
 8003b64:	4b70      	ldr	r3, [pc, #448]	@ (8003d28 <HAL_RCC_ClockConfig+0x1f0>)
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b6c:	f7fe fb52 	bl	8002214 <HAL_GetTick>
 8003b70:	0003      	movs	r3, r0
 8003b72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b74:	e009      	b.n	8003b8a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b76:	f7fe fb4d 	bl	8002214 <HAL_GetTick>
 8003b7a:	0002      	movs	r2, r0
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	4a6a      	ldr	r2, [pc, #424]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e0ca      	b.n	8003d20 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b8a:	4b67      	ldr	r3, [pc, #412]	@ (8003d28 <HAL_RCC_ClockConfig+0x1f0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2207      	movs	r2, #7
 8003b90:	4013      	ands	r3, r2
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d1ee      	bne.n	8003b76 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d015      	beq.n	8003bce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2204      	movs	r2, #4
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d006      	beq.n	8003bba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003bac:	4b60      	ldr	r3, [pc, #384]	@ (8003d30 <HAL_RCC_ClockConfig+0x1f8>)
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	4b5f      	ldr	r3, [pc, #380]	@ (8003d30 <HAL_RCC_ClockConfig+0x1f8>)
 8003bb2:	21e0      	movs	r1, #224	@ 0xe0
 8003bb4:	01c9      	lsls	r1, r1, #7
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bba:	4b5d      	ldr	r3, [pc, #372]	@ (8003d30 <HAL_RCC_ClockConfig+0x1f8>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	4a5d      	ldr	r2, [pc, #372]	@ (8003d34 <HAL_RCC_ClockConfig+0x1fc>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	0019      	movs	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	4b59      	ldr	r3, [pc, #356]	@ (8003d30 <HAL_RCC_ClockConfig+0x1f8>)
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d057      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d107      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003be0:	4b53      	ldr	r3, [pc, #332]	@ (8003d30 <HAL_RCC_ClockConfig+0x1f8>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	2380      	movs	r3, #128	@ 0x80
 8003be6:	029b      	lsls	r3, r3, #10
 8003be8:	4013      	ands	r3, r2
 8003bea:	d12b      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e097      	b.n	8003d20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d107      	bne.n	8003c08 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf8:	4b4d      	ldr	r3, [pc, #308]	@ (8003d30 <HAL_RCC_ClockConfig+0x1f8>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	2380      	movs	r3, #128	@ 0x80
 8003bfe:	049b      	lsls	r3, r3, #18
 8003c00:	4013      	ands	r3, r2
 8003c02:	d11f      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e08b      	b.n	8003d20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d107      	bne.n	8003c20 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c10:	4b47      	ldr	r3, [pc, #284]	@ (8003d30 <HAL_RCC_ClockConfig+0x1f8>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	2380      	movs	r3, #128	@ 0x80
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d113      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e07f      	b.n	8003d20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d106      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c28:	4b41      	ldr	r3, [pc, #260]	@ (8003d30 <HAL_RCC_ClockConfig+0x1f8>)
 8003c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d108      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e074      	b.n	8003d20 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c36:	4b3e      	ldr	r3, [pc, #248]	@ (8003d30 <HAL_RCC_ClockConfig+0x1f8>)
 8003c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d101      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e06d      	b.n	8003d20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c44:	4b3a      	ldr	r3, [pc, #232]	@ (8003d30 <HAL_RCC_ClockConfig+0x1f8>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2207      	movs	r2, #7
 8003c4a:	4393      	bics	r3, r2
 8003c4c:	0019      	movs	r1, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	4b37      	ldr	r3, [pc, #220]	@ (8003d30 <HAL_RCC_ClockConfig+0x1f8>)
 8003c54:	430a      	orrs	r2, r1
 8003c56:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c58:	f7fe fadc 	bl	8002214 <HAL_GetTick>
 8003c5c:	0003      	movs	r3, r0
 8003c5e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c60:	e009      	b.n	8003c76 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c62:	f7fe fad7 	bl	8002214 <HAL_GetTick>
 8003c66:	0002      	movs	r2, r0
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	4a2f      	ldr	r2, [pc, #188]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e054      	b.n	8003d20 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c76:	4b2e      	ldr	r3, [pc, #184]	@ (8003d30 <HAL_RCC_ClockConfig+0x1f8>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2238      	movs	r2, #56	@ 0x38
 8003c7c:	401a      	ands	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d1ec      	bne.n	8003c62 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c88:	4b27      	ldr	r3, [pc, #156]	@ (8003d28 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2207      	movs	r2, #7
 8003c8e:	4013      	ands	r3, r2
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d21e      	bcs.n	8003cd4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c96:	4b24      	ldr	r3, [pc, #144]	@ (8003d28 <HAL_RCC_ClockConfig+0x1f0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2207      	movs	r2, #7
 8003c9c:	4393      	bics	r3, r2
 8003c9e:	0019      	movs	r1, r3
 8003ca0:	4b21      	ldr	r3, [pc, #132]	@ (8003d28 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ca8:	f7fe fab4 	bl	8002214 <HAL_GetTick>
 8003cac:	0003      	movs	r3, r0
 8003cae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003cb0:	e009      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb2:	f7fe faaf 	bl	8002214 <HAL_GetTick>
 8003cb6:	0002      	movs	r2, r0
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8003d2c <HAL_RCC_ClockConfig+0x1f4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e02c      	b.n	8003d20 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003cc6:	4b18      	ldr	r3, [pc, #96]	@ (8003d28 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2207      	movs	r2, #7
 8003ccc:	4013      	ands	r3, r2
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d1ee      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2204      	movs	r2, #4
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d009      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003cde:	4b14      	ldr	r3, [pc, #80]	@ (8003d30 <HAL_RCC_ClockConfig+0x1f8>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	4a15      	ldr	r2, [pc, #84]	@ (8003d38 <HAL_RCC_ClockConfig+0x200>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	0019      	movs	r1, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	4b10      	ldr	r3, [pc, #64]	@ (8003d30 <HAL_RCC_ClockConfig+0x1f8>)
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003cf2:	f000 f829 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8003cf6:	0001      	movs	r1, r0
 8003cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8003d30 <HAL_RCC_ClockConfig+0x1f8>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	0a1b      	lsrs	r3, r3, #8
 8003cfe:	220f      	movs	r2, #15
 8003d00:	401a      	ands	r2, r3
 8003d02:	4b0e      	ldr	r3, [pc, #56]	@ (8003d3c <HAL_RCC_ClockConfig+0x204>)
 8003d04:	0092      	lsls	r2, r2, #2
 8003d06:	58d3      	ldr	r3, [r2, r3]
 8003d08:	221f      	movs	r2, #31
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	000a      	movs	r2, r1
 8003d0e:	40da      	lsrs	r2, r3
 8003d10:	4b0b      	ldr	r3, [pc, #44]	@ (8003d40 <HAL_RCC_ClockConfig+0x208>)
 8003d12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d14:	4b0b      	ldr	r3, [pc, #44]	@ (8003d44 <HAL_RCC_ClockConfig+0x20c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f7fe fa1f 	bl	800215c <HAL_InitTick>
 8003d1e:	0003      	movs	r3, r0
}
 8003d20:	0018      	movs	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b004      	add	sp, #16
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40022000 	.word	0x40022000
 8003d2c:	00001388 	.word	0x00001388
 8003d30:	40021000 	.word	0x40021000
 8003d34:	fffff0ff 	.word	0xfffff0ff
 8003d38:	ffff8fff 	.word	0xffff8fff
 8003d3c:	08005d20 	.word	0x08005d20
 8003d40:	20000054 	.word	0x20000054
 8003d44:	20000058 	.word	0x20000058

08003d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d4e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2238      	movs	r2, #56	@ 0x38
 8003d54:	4013      	ands	r3, r2
 8003d56:	d10f      	bne.n	8003d78 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003d58:	4b39      	ldr	r3, [pc, #228]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	0adb      	lsrs	r3, r3, #11
 8003d5e:	2207      	movs	r2, #7
 8003d60:	4013      	ands	r3, r2
 8003d62:	2201      	movs	r2, #1
 8003d64:	409a      	lsls	r2, r3
 8003d66:	0013      	movs	r3, r2
 8003d68:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003d6a:	6839      	ldr	r1, [r7, #0]
 8003d6c:	4835      	ldr	r0, [pc, #212]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d6e:	f7fc f9c9 	bl	8000104 <__udivsi3>
 8003d72:	0003      	movs	r3, r0
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	e05d      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d78:	4b31      	ldr	r3, [pc, #196]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2238      	movs	r2, #56	@ 0x38
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d102      	bne.n	8003d8a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d84:	4b30      	ldr	r3, [pc, #192]	@ (8003e48 <HAL_RCC_GetSysClockFreq+0x100>)
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	e054      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2238      	movs	r2, #56	@ 0x38
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b10      	cmp	r3, #16
 8003d94:	d138      	bne.n	8003e08 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003d96:	4b2a      	ldr	r3, [pc, #168]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	2203      	movs	r2, #3
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003da0:	4b27      	ldr	r3, [pc, #156]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	2207      	movs	r2, #7
 8003da8:	4013      	ands	r3, r2
 8003daa:	3301      	adds	r3, #1
 8003dac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b03      	cmp	r3, #3
 8003db2:	d10d      	bne.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	4824      	ldr	r0, [pc, #144]	@ (8003e48 <HAL_RCC_GetSysClockFreq+0x100>)
 8003db8:	f7fc f9a4 	bl	8000104 <__udivsi3>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	0019      	movs	r1, r3
 8003dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	0a1b      	lsrs	r3, r3, #8
 8003dc6:	227f      	movs	r2, #127	@ 0x7f
 8003dc8:	4013      	ands	r3, r2
 8003dca:	434b      	muls	r3, r1
 8003dcc:	617b      	str	r3, [r7, #20]
        break;
 8003dce:	e00d      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	481c      	ldr	r0, [pc, #112]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003dd4:	f7fc f996 	bl	8000104 <__udivsi3>
 8003dd8:	0003      	movs	r3, r0
 8003dda:	0019      	movs	r1, r3
 8003ddc:	4b18      	ldr	r3, [pc, #96]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	0a1b      	lsrs	r3, r3, #8
 8003de2:	227f      	movs	r2, #127	@ 0x7f
 8003de4:	4013      	ands	r3, r2
 8003de6:	434b      	muls	r3, r1
 8003de8:	617b      	str	r3, [r7, #20]
        break;
 8003dea:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003dec:	4b14      	ldr	r3, [pc, #80]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	0f5b      	lsrs	r3, r3, #29
 8003df2:	2207      	movs	r2, #7
 8003df4:	4013      	ands	r3, r2
 8003df6:	3301      	adds	r3, #1
 8003df8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	6978      	ldr	r0, [r7, #20]
 8003dfe:	f7fc f981 	bl	8000104 <__udivsi3>
 8003e02:	0003      	movs	r3, r0
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	e015      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003e08:	4b0d      	ldr	r3, [pc, #52]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2238      	movs	r2, #56	@ 0x38
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d103      	bne.n	8003e1c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003e14:	2380      	movs	r3, #128	@ 0x80
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	e00b      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003e1c:	4b08      	ldr	r3, [pc, #32]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2238      	movs	r2, #56	@ 0x38
 8003e22:	4013      	ands	r3, r2
 8003e24:	2b18      	cmp	r3, #24
 8003e26:	d103      	bne.n	8003e30 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003e28:	23fa      	movs	r3, #250	@ 0xfa
 8003e2a:	01db      	lsls	r3, r3, #7
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	e001      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e34:	693b      	ldr	r3, [r7, #16]
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b006      	add	sp, #24
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	46c0      	nop			@ (mov r8, r8)
 8003e40:	40021000 	.word	0x40021000
 8003e44:	00f42400 	.word	0x00f42400
 8003e48:	007a1200 	.word	0x007a1200

08003e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003e54:	2313      	movs	r3, #19
 8003e56:	18fb      	adds	r3, r7, r3
 8003e58:	2200      	movs	r2, #0
 8003e5a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e5c:	2312      	movs	r3, #18
 8003e5e:	18fb      	adds	r3, r7, r3
 8003e60:	2200      	movs	r2, #0
 8003e62:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	2380      	movs	r3, #128	@ 0x80
 8003e6a:	029b      	lsls	r3, r3, #10
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d100      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003e70:	e0a3      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e72:	2011      	movs	r0, #17
 8003e74:	183b      	adds	r3, r7, r0
 8003e76:	2200      	movs	r2, #0
 8003e78:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e7a:	4ba5      	ldr	r3, [pc, #660]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e7e:	2380      	movs	r3, #128	@ 0x80
 8003e80:	055b      	lsls	r3, r3, #21
 8003e82:	4013      	ands	r3, r2
 8003e84:	d110      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e86:	4ba2      	ldr	r3, [pc, #648]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e8a:	4ba1      	ldr	r3, [pc, #644]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e8c:	2180      	movs	r1, #128	@ 0x80
 8003e8e:	0549      	lsls	r1, r1, #21
 8003e90:	430a      	orrs	r2, r1
 8003e92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e94:	4b9e      	ldr	r3, [pc, #632]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e98:	2380      	movs	r3, #128	@ 0x80
 8003e9a:	055b      	lsls	r3, r3, #21
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ea2:	183b      	adds	r3, r7, r0
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ea8:	4b9a      	ldr	r3, [pc, #616]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b99      	ldr	r3, [pc, #612]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003eae:	2180      	movs	r1, #128	@ 0x80
 8003eb0:	0049      	lsls	r1, r1, #1
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eb6:	f7fe f9ad 	bl	8002214 <HAL_GetTick>
 8003eba:	0003      	movs	r3, r0
 8003ebc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ebe:	e00b      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec0:	f7fe f9a8 	bl	8002214 <HAL_GetTick>
 8003ec4:	0002      	movs	r2, r0
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d904      	bls.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003ece:	2313      	movs	r3, #19
 8003ed0:	18fb      	adds	r3, r7, r3
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	701a      	strb	r2, [r3, #0]
        break;
 8003ed6:	e005      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ed8:	4b8e      	ldr	r3, [pc, #568]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	2380      	movs	r3, #128	@ 0x80
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	d0ed      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003ee4:	2313      	movs	r3, #19
 8003ee6:	18fb      	adds	r3, r7, r3
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d154      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003eee:	4b88      	ldr	r3, [pc, #544]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ef0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ef2:	23c0      	movs	r3, #192	@ 0xc0
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d019      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d014      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f0a:	4b81      	ldr	r3, [pc, #516]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0e:	4a82      	ldr	r2, [pc, #520]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f14:	4b7e      	ldr	r3, [pc, #504]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f18:	4b7d      	ldr	r3, [pc, #500]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f1a:	2180      	movs	r1, #128	@ 0x80
 8003f1c:	0249      	lsls	r1, r1, #9
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f22:	4b7b      	ldr	r3, [pc, #492]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f26:	4b7a      	ldr	r3, [pc, #488]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f28:	497c      	ldr	r1, [pc, #496]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003f2a:	400a      	ands	r2, r1
 8003f2c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f2e:	4b78      	ldr	r3, [pc, #480]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2201      	movs	r2, #1
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d016      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3c:	f7fe f96a 	bl	8002214 <HAL_GetTick>
 8003f40:	0003      	movs	r3, r0
 8003f42:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f44:	e00c      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f46:	f7fe f965 	bl	8002214 <HAL_GetTick>
 8003f4a:	0002      	movs	r2, r0
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	4a73      	ldr	r2, [pc, #460]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d904      	bls.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003f56:	2313      	movs	r3, #19
 8003f58:	18fb      	adds	r3, r7, r3
 8003f5a:	2203      	movs	r2, #3
 8003f5c:	701a      	strb	r2, [r3, #0]
            break;
 8003f5e:	e004      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f60:	4b6b      	ldr	r3, [pc, #428]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f64:	2202      	movs	r2, #2
 8003f66:	4013      	ands	r3, r2
 8003f68:	d0ed      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003f6a:	2313      	movs	r3, #19
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10a      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f74:	4b66      	ldr	r3, [pc, #408]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f78:	4a67      	ldr	r2, [pc, #412]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f82:	4b63      	ldr	r3, [pc, #396]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f84:	430a      	orrs	r2, r1
 8003f86:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f88:	e00c      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f8a:	2312      	movs	r3, #18
 8003f8c:	18fb      	adds	r3, r7, r3
 8003f8e:	2213      	movs	r2, #19
 8003f90:	18ba      	adds	r2, r7, r2
 8003f92:	7812      	ldrb	r2, [r2, #0]
 8003f94:	701a      	strb	r2, [r3, #0]
 8003f96:	e005      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f98:	2312      	movs	r3, #18
 8003f9a:	18fb      	adds	r3, r7, r3
 8003f9c:	2213      	movs	r2, #19
 8003f9e:	18ba      	adds	r2, r7, r2
 8003fa0:	7812      	ldrb	r2, [r2, #0]
 8003fa2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fa4:	2311      	movs	r3, #17
 8003fa6:	18fb      	adds	r3, r7, r3
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d105      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fae:	4b58      	ldr	r3, [pc, #352]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fb2:	4b57      	ldr	r3, [pc, #348]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fb4:	495b      	ldr	r1, [pc, #364]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003fb6:	400a      	ands	r2, r1
 8003fb8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d009      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fc4:	4b52      	ldr	r3, [pc, #328]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc8:	2203      	movs	r2, #3
 8003fca:	4393      	bics	r3, r2
 8003fcc:	0019      	movs	r1, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	4b4f      	ldr	r3, [pc, #316]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2210      	movs	r2, #16
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d009      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fe2:	4b4b      	ldr	r3, [pc, #300]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe6:	4a50      	ldr	r2, [pc, #320]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	0019      	movs	r1, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	4b47      	ldr	r3, [pc, #284]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	2380      	movs	r3, #128	@ 0x80
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4013      	ands	r3, r2
 8004000:	d009      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004002:	4b43      	ldr	r3, [pc, #268]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004006:	4a49      	ldr	r2, [pc, #292]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004008:	4013      	ands	r3, r2
 800400a:	0019      	movs	r1, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	695a      	ldr	r2, [r3, #20]
 8004010:	4b3f      	ldr	r3, [pc, #252]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004012:	430a      	orrs	r2, r1
 8004014:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	2380      	movs	r3, #128	@ 0x80
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	4013      	ands	r3, r2
 8004020:	d009      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004022:	4b3b      	ldr	r3, [pc, #236]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004026:	4a42      	ldr	r2, [pc, #264]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004028:	4013      	ands	r3, r2
 800402a:	0019      	movs	r1, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699a      	ldr	r2, [r3, #24]
 8004030:	4b37      	ldr	r3, [pc, #220]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004032:	430a      	orrs	r2, r1
 8004034:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2220      	movs	r2, #32
 800403c:	4013      	ands	r3, r2
 800403e:	d009      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004040:	4b33      	ldr	r3, [pc, #204]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004044:	4a3b      	ldr	r2, [pc, #236]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004046:	4013      	ands	r3, r2
 8004048:	0019      	movs	r1, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	4b30      	ldr	r3, [pc, #192]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004050:	430a      	orrs	r2, r1
 8004052:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	2380      	movs	r3, #128	@ 0x80
 800405a:	01db      	lsls	r3, r3, #7
 800405c:	4013      	ands	r3, r2
 800405e:	d015      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004060:	4b2b      	ldr	r3, [pc, #172]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	0899      	lsrs	r1, r3, #2
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	4b28      	ldr	r3, [pc, #160]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800406e:	430a      	orrs	r2, r1
 8004070:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69da      	ldr	r2, [r3, #28]
 8004076:	2380      	movs	r3, #128	@ 0x80
 8004078:	05db      	lsls	r3, r3, #23
 800407a:	429a      	cmp	r2, r3
 800407c:	d106      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800407e:	4b24      	ldr	r3, [pc, #144]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	4b23      	ldr	r3, [pc, #140]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004084:	2180      	movs	r1, #128	@ 0x80
 8004086:	0249      	lsls	r1, r1, #9
 8004088:	430a      	orrs	r2, r1
 800408a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	2380      	movs	r3, #128	@ 0x80
 8004092:	039b      	lsls	r3, r3, #14
 8004094:	4013      	ands	r3, r2
 8004096:	d016      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004098:	4b1d      	ldr	r3, [pc, #116]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800409a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800409c:	4a26      	ldr	r2, [pc, #152]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800409e:	4013      	ands	r3, r2
 80040a0:	0019      	movs	r1, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1a      	ldr	r2, [r3, #32]
 80040a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040a8:	430a      	orrs	r2, r1
 80040aa:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a1a      	ldr	r2, [r3, #32]
 80040b0:	2380      	movs	r3, #128	@ 0x80
 80040b2:	03db      	lsls	r3, r3, #15
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d106      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80040b8:	4b15      	ldr	r3, [pc, #84]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	4b14      	ldr	r3, [pc, #80]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040be:	2180      	movs	r1, #128	@ 0x80
 80040c0:	0449      	lsls	r1, r1, #17
 80040c2:	430a      	orrs	r2, r1
 80040c4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	2380      	movs	r3, #128	@ 0x80
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	4013      	ands	r3, r2
 80040d0:	d016      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80040d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d6:	4a19      	ldr	r2, [pc, #100]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040d8:	4013      	ands	r3, r2
 80040da:	0019      	movs	r1, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040e2:	430a      	orrs	r2, r1
 80040e4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	2380      	movs	r3, #128	@ 0x80
 80040ec:	01db      	lsls	r3, r3, #7
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d106      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80040f2:	4b07      	ldr	r3, [pc, #28]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	4b06      	ldr	r3, [pc, #24]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040f8:	2180      	movs	r1, #128	@ 0x80
 80040fa:	0249      	lsls	r1, r1, #9
 80040fc:	430a      	orrs	r2, r1
 80040fe:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004100:	2312      	movs	r3, #18
 8004102:	18fb      	adds	r3, r7, r3
 8004104:	781b      	ldrb	r3, [r3, #0]
}
 8004106:	0018      	movs	r0, r3
 8004108:	46bd      	mov	sp, r7
 800410a:	b006      	add	sp, #24
 800410c:	bd80      	pop	{r7, pc}
 800410e:	46c0      	nop			@ (mov r8, r8)
 8004110:	40021000 	.word	0x40021000
 8004114:	40007000 	.word	0x40007000
 8004118:	fffffcff 	.word	0xfffffcff
 800411c:	fffeffff 	.word	0xfffeffff
 8004120:	00001388 	.word	0x00001388
 8004124:	efffffff 	.word	0xefffffff
 8004128:	fffff3ff 	.word	0xfffff3ff
 800412c:	fff3ffff 	.word	0xfff3ffff
 8004130:	ffcfffff 	.word	0xffcfffff
 8004134:	ffffcfff 	.word	0xffffcfff
 8004138:	ffbfffff 	.word	0xffbfffff
 800413c:	ffff3fff 	.word	0xffff3fff

08004140 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8004140:	b590      	push	{r4, r7, lr}
 8004142:	b08b      	sub	sp, #44	@ 0x2c
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8004148:	2427      	movs	r4, #39	@ 0x27
 800414a:	193b      	adds	r3, r7, r4
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]
  FlagStatus       backupchanged = RESET;
 8004150:	2326      	movs	r3, #38	@ 0x26
 8004152:	18fb      	adds	r3, r7, r3
 8004154:	2200      	movs	r2, #0
 8004156:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 8004158:	4b31      	ldr	r3, [pc, #196]	@ (8004220 <HAL_RCCEx_EnableLSCO+0xe0>)
 800415a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800415c:	4b30      	ldr	r3, [pc, #192]	@ (8004220 <HAL_RCCEx_EnableLSCO+0xe0>)
 800415e:	2101      	movs	r1, #1
 8004160:	430a      	orrs	r2, r1
 8004162:	635a      	str	r2, [r3, #52]	@ 0x34
 8004164:	4b2e      	ldr	r3, [pc, #184]	@ (8004220 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004168:	2201      	movs	r2, #1
 800416a:	4013      	ands	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 8004170:	2110      	movs	r1, #16
 8004172:	187b      	adds	r3, r7, r1
 8004174:	2204      	movs	r2, #4
 8004176:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004178:	187b      	adds	r3, r7, r1
 800417a:	2203      	movs	r2, #3
 800417c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800417e:	187b      	adds	r3, r7, r1
 8004180:	2203      	movs	r2, #3
 8004182:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004184:	187b      	adds	r3, r7, r1
 8004186:	2200      	movs	r2, #0
 8004188:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 800418a:	187a      	adds	r2, r7, r1
 800418c:	23a0      	movs	r3, #160	@ 0xa0
 800418e:	05db      	lsls	r3, r3, #23
 8004190:	0011      	movs	r1, r2
 8004192:	0018      	movs	r0, r3
 8004194:	f7fe f926 	bl	80023e4 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004198:	4b21      	ldr	r3, [pc, #132]	@ (8004220 <HAL_RCCEx_EnableLSCO+0xe0>)
 800419a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800419c:	2380      	movs	r3, #128	@ 0x80
 800419e:	055b      	lsls	r3, r3, #21
 80041a0:	4013      	ands	r3, r2
 80041a2:	d110      	bne.n	80041c6 <HAL_RCCEx_EnableLSCO+0x86>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004220 <HAL_RCCEx_EnableLSCO+0xe0>)
 80041a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004220 <HAL_RCCEx_EnableLSCO+0xe0>)
 80041aa:	2180      	movs	r1, #128	@ 0x80
 80041ac:	0549      	lsls	r1, r1, #21
 80041ae:	430a      	orrs	r2, r1
 80041b0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80041b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004220 <HAL_RCCEx_EnableLSCO+0xe0>)
 80041b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041b6:	2380      	movs	r3, #128	@ 0x80
 80041b8:	055b      	lsls	r3, r3, #21
 80041ba:	4013      	ands	r3, r2
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 80041c0:	193b      	adds	r3, r7, r4
 80041c2:	2201      	movs	r2, #1
 80041c4:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041c6:	4b17      	ldr	r3, [pc, #92]	@ (8004224 <HAL_RCCEx_EnableLSCO+0xe4>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	2380      	movs	r3, #128	@ 0x80
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	4013      	ands	r3, r2
 80041d0:	d105      	bne.n	80041de <HAL_RCCEx_EnableLSCO+0x9e>
  {
    HAL_PWR_EnableBkUpAccess();
 80041d2:	f7ff f939 	bl	8003448 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 80041d6:	2326      	movs	r3, #38	@ 0x26
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	2201      	movs	r2, #1
 80041dc:	701a      	strb	r2, [r3, #0]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 80041de:	4b10      	ldr	r3, [pc, #64]	@ (8004220 <HAL_RCCEx_EnableLSCO+0xe0>)
 80041e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e2:	4a11      	ldr	r2, [pc, #68]	@ (8004228 <HAL_RCCEx_EnableLSCO+0xe8>)
 80041e4:	401a      	ands	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004220 <HAL_RCCEx_EnableLSCO+0xe0>)
 80041ec:	2180      	movs	r1, #128	@ 0x80
 80041ee:	0449      	lsls	r1, r1, #17
 80041f0:	430a      	orrs	r2, r1
 80041f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (backupchanged == SET)
 80041f4:	2326      	movs	r3, #38	@ 0x26
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_RCCEx_EnableLSCO+0xc2>
  {
    HAL_PWR_DisableBkUpAccess();
 80041fe:	f7ff f931 	bl	8003464 <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 8004202:	2327      	movs	r3, #39	@ 0x27
 8004204:	18fb      	adds	r3, r7, r3
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d105      	bne.n	8004218 <HAL_RCCEx_EnableLSCO+0xd8>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 800420c:	4b04      	ldr	r3, [pc, #16]	@ (8004220 <HAL_RCCEx_EnableLSCO+0xe0>)
 800420e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004210:	4b03      	ldr	r3, [pc, #12]	@ (8004220 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004212:	4906      	ldr	r1, [pc, #24]	@ (800422c <HAL_RCCEx_EnableLSCO+0xec>)
 8004214:	400a      	ands	r2, r1
 8004216:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8004218:	46c0      	nop			@ (mov r8, r8)
 800421a:	46bd      	mov	sp, r7
 800421c:	b00b      	add	sp, #44	@ 0x2c
 800421e:	bd90      	pop	{r4, r7, pc}
 8004220:	40021000 	.word	0x40021000
 8004224:	40007000 	.word	0x40007000
 8004228:	fcffffff 	.word	0xfcffffff
 800422c:	efffffff 	.word	0xefffffff

08004230 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004230:	b5b0      	push	{r4, r5, r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004238:	230f      	movs	r3, #15
 800423a:	18fb      	adds	r3, r7, r3
 800423c:	2201      	movs	r2, #1
 800423e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d100      	bne.n	8004248 <HAL_RTC_Init+0x18>
 8004246:	e08c      	b.n	8004362 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2229      	movs	r2, #41	@ 0x29
 800424c:	5c9b      	ldrb	r3, [r3, r2]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10b      	bne.n	800426c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2228      	movs	r2, #40	@ 0x28
 8004258:	2100      	movs	r1, #0
 800425a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2288      	movs	r2, #136	@ 0x88
 8004260:	0212      	lsls	r2, r2, #8
 8004262:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	0018      	movs	r0, r3
 8004268:	f7fd fe20 	bl	8001eac <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2229      	movs	r2, #41	@ 0x29
 8004270:	2102      	movs	r1, #2
 8004272:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	2210      	movs	r2, #16
 800427c:	4013      	ands	r3, r2
 800427e:	2b10      	cmp	r3, #16
 8004280:	d062      	beq.n	8004348 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	22ca      	movs	r2, #202	@ 0xca
 8004288:	625a      	str	r2, [r3, #36]	@ 0x24
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2253      	movs	r2, #83	@ 0x53
 8004290:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004292:	250f      	movs	r5, #15
 8004294:	197c      	adds	r4, r7, r5
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	0018      	movs	r0, r3
 800429a:	f000 fcb9 	bl	8004c10 <RTC_EnterInitMode>
 800429e:	0003      	movs	r3, r0
 80042a0:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80042a2:	0028      	movs	r0, r5
 80042a4:	183b      	adds	r3, r7, r0
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d12c      	bne.n	8004306 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699a      	ldr	r2, [r3, #24]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	492e      	ldr	r1, [pc, #184]	@ (8004370 <HAL_RTC_Init+0x140>)
 80042b8:	400a      	ands	r2, r1
 80042ba:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6999      	ldr	r1, [r3, #24]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6912      	ldr	r2, [r2, #16]
 80042e2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6919      	ldr	r1, [r3, #16]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	041a      	lsls	r2, r3, #16
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80042f8:	183c      	adds	r4, r7, r0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	0018      	movs	r0, r3
 80042fe:	f000 fcc9 	bl	8004c94 <RTC_ExitInitMode>
 8004302:	0003      	movs	r3, r0
 8004304:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004306:	230f      	movs	r3, #15
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d116      	bne.n	800433e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	00d2      	lsls	r2, r2, #3
 800431c:	08d2      	lsrs	r2, r2, #3
 800431e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6999      	ldr	r1, [r3, #24]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	22ff      	movs	r2, #255	@ 0xff
 8004344:	625a      	str	r2, [r3, #36]	@ 0x24
 8004346:	e003      	b.n	8004350 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004348:	230f      	movs	r3, #15
 800434a:	18fb      	adds	r3, r7, r3
 800434c:	2200      	movs	r2, #0
 800434e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004350:	230f      	movs	r3, #15
 8004352:	18fb      	adds	r3, r7, r3
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d103      	bne.n	8004362 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2229      	movs	r2, #41	@ 0x29
 800435e:	2101      	movs	r1, #1
 8004360:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004362:	230f      	movs	r3, #15
 8004364:	18fb      	adds	r3, r7, r3
 8004366:	781b      	ldrb	r3, [r3, #0]
}
 8004368:	0018      	movs	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	b004      	add	sp, #16
 800436e:	bdb0      	pop	{r4, r5, r7, pc}
 8004370:	fb8fffbf 	.word	0xfb8fffbf

08004374 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004374:	b5b0      	push	{r4, r5, r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2228      	movs	r2, #40	@ 0x28
 8004384:	5c9b      	ldrb	r3, [r3, r2]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_RTC_SetTime+0x1a>
 800438a:	2302      	movs	r3, #2
 800438c:	e092      	b.n	80044b4 <HAL_RTC_SetTime+0x140>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2228      	movs	r2, #40	@ 0x28
 8004392:	2101      	movs	r1, #1
 8004394:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2229      	movs	r2, #41	@ 0x29
 800439a:	2102      	movs	r1, #2
 800439c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	22ca      	movs	r2, #202	@ 0xca
 80043a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2253      	movs	r2, #83	@ 0x53
 80043ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80043ae:	2513      	movs	r5, #19
 80043b0:	197c      	adds	r4, r7, r5
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	0018      	movs	r0, r3
 80043b6:	f000 fc2b 	bl	8004c10 <RTC_EnterInitMode>
 80043ba:	0003      	movs	r3, r0
 80043bc:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80043be:	197b      	adds	r3, r7, r5
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d162      	bne.n	800448c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d125      	bne.n	8004418 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	2240      	movs	r2, #64	@ 0x40
 80043d4:	4013      	ands	r3, r2
 80043d6:	d102      	bne.n	80043de <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2200      	movs	r2, #0
 80043dc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	0018      	movs	r0, r3
 80043e4:	f000 fc9a 	bl	8004d1c <RTC_ByteToBcd2>
 80043e8:	0003      	movs	r3, r0
 80043ea:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	785b      	ldrb	r3, [r3, #1]
 80043f0:	0018      	movs	r0, r3
 80043f2:	f000 fc93 	bl	8004d1c <RTC_ByteToBcd2>
 80043f6:	0003      	movs	r3, r0
 80043f8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80043fa:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	789b      	ldrb	r3, [r3, #2]
 8004400:	0018      	movs	r0, r3
 8004402:	f000 fc8b 	bl	8004d1c <RTC_ByteToBcd2>
 8004406:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004408:	0022      	movs	r2, r4
 800440a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	78db      	ldrb	r3, [r3, #3]
 8004410:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	e017      	b.n	8004448 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	2240      	movs	r2, #64	@ 0x40
 8004420:	4013      	ands	r3, r2
 8004422:	d102      	bne.n	800442a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2200      	movs	r2, #0
 8004428:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	785b      	ldrb	r3, [r3, #1]
 8004434:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004436:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800443c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	78db      	ldrb	r3, [r3, #3]
 8004442:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	491b      	ldr	r1, [pc, #108]	@ (80044bc <HAL_RTC_SetTime+0x148>)
 8004450:	400a      	ands	r2, r1
 8004452:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699a      	ldr	r2, [r3, #24]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4918      	ldr	r1, [pc, #96]	@ (80044c0 <HAL_RTC_SetTime+0x14c>)
 8004460:	400a      	ands	r2, r1
 8004462:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6999      	ldr	r1, [r3, #24]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	431a      	orrs	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800447c:	2313      	movs	r3, #19
 800447e:	18fc      	adds	r4, r7, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	0018      	movs	r0, r3
 8004484:	f000 fc06 	bl	8004c94 <RTC_ExitInitMode>
 8004488:	0003      	movs	r3, r0
 800448a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	22ff      	movs	r2, #255	@ 0xff
 8004492:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8004494:	2313      	movs	r3, #19
 8004496:	18fb      	adds	r3, r7, r3
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d103      	bne.n	80044a6 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2229      	movs	r2, #41	@ 0x29
 80044a2:	2101      	movs	r1, #1
 80044a4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2228      	movs	r2, #40	@ 0x28
 80044aa:	2100      	movs	r1, #0
 80044ac:	5499      	strb	r1, [r3, r2]

  return status;
 80044ae:	2313      	movs	r3, #19
 80044b0:	18fb      	adds	r3, r7, r3
 80044b2:	781b      	ldrb	r3, [r3, #0]
}
 80044b4:	0018      	movs	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b006      	add	sp, #24
 80044ba:	bdb0      	pop	{r4, r5, r7, pc}
 80044bc:	007f7f7f 	.word	0x007f7f7f
 80044c0:	fffbffff 	.word	0xfffbffff

080044c4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	045b      	lsls	r3, r3, #17
 80044e2:	0c5a      	lsrs	r2, r3, #17
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a22      	ldr	r2, [pc, #136]	@ (8004578 <HAL_RTC_GetTime+0xb4>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	0c1b      	lsrs	r3, r3, #16
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	223f      	movs	r2, #63	@ 0x3f
 80044fc:	4013      	ands	r3, r2
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	0a1b      	lsrs	r3, r3, #8
 8004508:	b2db      	uxtb	r3, r3
 800450a:	227f      	movs	r2, #127	@ 0x7f
 800450c:	4013      	ands	r3, r2
 800450e:	b2da      	uxtb	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	227f      	movs	r2, #127	@ 0x7f
 800451a:	4013      	ands	r3, r2
 800451c:	b2da      	uxtb	r2, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	0d9b      	lsrs	r3, r3, #22
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2201      	movs	r2, #1
 800452a:	4013      	ands	r3, r2
 800452c:	b2da      	uxtb	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d11a      	bne.n	800456e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	0018      	movs	r0, r3
 800453e:	f000 fc15 	bl	8004d6c <RTC_Bcd2ToByte>
 8004542:	0003      	movs	r3, r0
 8004544:	001a      	movs	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	785b      	ldrb	r3, [r3, #1]
 800454e:	0018      	movs	r0, r3
 8004550:	f000 fc0c 	bl	8004d6c <RTC_Bcd2ToByte>
 8004554:	0003      	movs	r3, r0
 8004556:	001a      	movs	r2, r3
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	789b      	ldrb	r3, [r3, #2]
 8004560:	0018      	movs	r0, r3
 8004562:	f000 fc03 	bl	8004d6c <RTC_Bcd2ToByte>
 8004566:	0003      	movs	r3, r0
 8004568:	001a      	movs	r2, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	0018      	movs	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	b006      	add	sp, #24
 8004576:	bd80      	pop	{r7, pc}
 8004578:	007f7f7f 	.word	0x007f7f7f

0800457c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800457c:	b5b0      	push	{r4, r5, r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2228      	movs	r2, #40	@ 0x28
 800458c:	5c9b      	ldrb	r3, [r3, r2]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_RTC_SetDate+0x1a>
 8004592:	2302      	movs	r3, #2
 8004594:	e07e      	b.n	8004694 <HAL_RTC_SetDate+0x118>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2228      	movs	r2, #40	@ 0x28
 800459a:	2101      	movs	r1, #1
 800459c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2229      	movs	r2, #41	@ 0x29
 80045a2:	2102      	movs	r1, #2
 80045a4:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10e      	bne.n	80045ca <HAL_RTC_SetDate+0x4e>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	785b      	ldrb	r3, [r3, #1]
 80045b0:	001a      	movs	r2, r3
 80045b2:	2310      	movs	r3, #16
 80045b4:	4013      	ands	r3, r2
 80045b6:	d008      	beq.n	80045ca <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	785b      	ldrb	r3, [r3, #1]
 80045bc:	2210      	movs	r2, #16
 80045be:	4393      	bics	r3, r2
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	330a      	adds	r3, #10
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d11c      	bne.n	800460a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	78db      	ldrb	r3, [r3, #3]
 80045d4:	0018      	movs	r0, r3
 80045d6:	f000 fba1 	bl	8004d1c <RTC_ByteToBcd2>
 80045da:	0003      	movs	r3, r0
 80045dc:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	785b      	ldrb	r3, [r3, #1]
 80045e2:	0018      	movs	r0, r3
 80045e4:	f000 fb9a 	bl	8004d1c <RTC_ByteToBcd2>
 80045e8:	0003      	movs	r3, r0
 80045ea:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80045ec:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	789b      	ldrb	r3, [r3, #2]
 80045f2:	0018      	movs	r0, r3
 80045f4:	f000 fb92 	bl	8004d1c <RTC_ByteToBcd2>
 80045f8:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80045fa:	0022      	movs	r2, r4
 80045fc:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004604:	4313      	orrs	r3, r2
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	e00e      	b.n	8004628 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	78db      	ldrb	r3, [r3, #3]
 800460e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	785b      	ldrb	r3, [r3, #1]
 8004614:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004616:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800461c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	22ca      	movs	r2, #202	@ 0xca
 800462e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2253      	movs	r2, #83	@ 0x53
 8004636:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004638:	2513      	movs	r5, #19
 800463a:	197c      	adds	r4, r7, r5
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	0018      	movs	r0, r3
 8004640:	f000 fae6 	bl	8004c10 <RTC_EnterInitMode>
 8004644:	0003      	movs	r3, r0
 8004646:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004648:	0028      	movs	r0, r5
 800464a:	183b      	adds	r3, r7, r0
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10c      	bne.n	800466c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4910      	ldr	r1, [pc, #64]	@ (800469c <HAL_RTC_SetDate+0x120>)
 800465a:	400a      	ands	r2, r1
 800465c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800465e:	183c      	adds	r4, r7, r0
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	0018      	movs	r0, r3
 8004664:	f000 fb16 	bl	8004c94 <RTC_ExitInitMode>
 8004668:	0003      	movs	r3, r0
 800466a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	22ff      	movs	r2, #255	@ 0xff
 8004672:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004674:	2313      	movs	r3, #19
 8004676:	18fb      	adds	r3, r7, r3
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d103      	bne.n	8004686 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2229      	movs	r2, #41	@ 0x29
 8004682:	2101      	movs	r1, #1
 8004684:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2228      	movs	r2, #40	@ 0x28
 800468a:	2100      	movs	r1, #0
 800468c:	5499      	strb	r1, [r3, r2]

  return status;
 800468e:	2313      	movs	r3, #19
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	781b      	ldrb	r3, [r3, #0]
}
 8004694:	0018      	movs	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	b006      	add	sp, #24
 800469a:	bdb0      	pop	{r4, r5, r7, pc}
 800469c:	00ffff3f 	.word	0x00ffff3f

080046a0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	4a21      	ldr	r2, [pc, #132]	@ (8004738 <HAL_RTC_GetDate+0x98>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	0c1b      	lsrs	r3, r3, #16
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	0a1b      	lsrs	r3, r3, #8
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	221f      	movs	r2, #31
 80046ca:	4013      	ands	r3, r2
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	223f      	movs	r2, #63	@ 0x3f
 80046d8:	4013      	ands	r3, r2
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	0b5b      	lsrs	r3, r3, #13
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2207      	movs	r2, #7
 80046e8:	4013      	ands	r3, r2
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d11a      	bne.n	800472c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	78db      	ldrb	r3, [r3, #3]
 80046fa:	0018      	movs	r0, r3
 80046fc:	f000 fb36 	bl	8004d6c <RTC_Bcd2ToByte>
 8004700:	0003      	movs	r3, r0
 8004702:	001a      	movs	r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	785b      	ldrb	r3, [r3, #1]
 800470c:	0018      	movs	r0, r3
 800470e:	f000 fb2d 	bl	8004d6c <RTC_Bcd2ToByte>
 8004712:	0003      	movs	r3, r0
 8004714:	001a      	movs	r2, r3
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	789b      	ldrb	r3, [r3, #2]
 800471e:	0018      	movs	r0, r3
 8004720:	f000 fb24 	bl	8004d6c <RTC_Bcd2ToByte>
 8004724:	0003      	movs	r3, r0
 8004726:	001a      	movs	r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	0018      	movs	r0, r3
 8004730:	46bd      	mov	sp, r7
 8004732:	b006      	add	sp, #24
 8004734:	bd80      	pop	{r7, pc}
 8004736:	46c0      	nop			@ (mov r8, r8)
 8004738:	00ffff3f 	.word	0x00ffff3f

0800473c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800473c:	b590      	push	{r4, r7, lr}
 800473e:	b089      	sub	sp, #36	@ 0x24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2228      	movs	r2, #40	@ 0x28
 800474c:	5c9b      	ldrb	r3, [r3, r2]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_RTC_SetAlarm_IT+0x1a>
 8004752:	2302      	movs	r3, #2
 8004754:	e127      	b.n	80049a6 <HAL_RTC_SetAlarm_IT+0x26a>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2228      	movs	r2, #40	@ 0x28
 800475a:	2101      	movs	r1, #1
 800475c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2229      	movs	r2, #41	@ 0x29
 8004762:	2102      	movs	r1, #2
 8004764:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d136      	bne.n	80047da <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	2240      	movs	r2, #64	@ 0x40
 8004774:	4013      	ands	r3, r2
 8004776:	d102      	bne.n	800477e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2200      	movs	r2, #0
 800477c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	0018      	movs	r0, r3
 8004784:	f000 faca 	bl	8004d1c <RTC_ByteToBcd2>
 8004788:	0003      	movs	r3, r0
 800478a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	785b      	ldrb	r3, [r3, #1]
 8004790:	0018      	movs	r0, r3
 8004792:	f000 fac3 	bl	8004d1c <RTC_ByteToBcd2>
 8004796:	0003      	movs	r3, r0
 8004798:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800479a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	789b      	ldrb	r3, [r3, #2]
 80047a0:	0018      	movs	r0, r3
 80047a2:	f000 fabb 	bl	8004d1c <RTC_ByteToBcd2>
 80047a6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80047a8:	0022      	movs	r2, r4
 80047aa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	78db      	ldrb	r3, [r3, #3]
 80047b0:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80047b2:	431a      	orrs	r2, r3
 80047b4:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2220      	movs	r2, #32
 80047ba:	5c9b      	ldrb	r3, [r3, r2]
 80047bc:	0018      	movs	r0, r3
 80047be:	f000 faad 	bl	8004d1c <RTC_ByteToBcd2>
 80047c2:	0003      	movs	r3, r0
 80047c4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80047c6:	0022      	movs	r2, r4
 80047c8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80047ce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047d4:	4313      	orrs	r3, r2
 80047d6:	61fb      	str	r3, [r7, #28]
 80047d8:	e022      	b.n	8004820 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	2240      	movs	r2, #64	@ 0x40
 80047e2:	4013      	ands	r3, r2
 80047e4:	d102      	bne.n	80047ec <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2200      	movs	r2, #0
 80047ea:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	785b      	ldrb	r3, [r3, #1]
 80047f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047f8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80047fe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	78db      	ldrb	r3, [r3, #3]
 8004804:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004806:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2120      	movs	r1, #32
 800480c:	5c5b      	ldrb	r3, [r3, r1]
 800480e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004810:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004816:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800481c:	4313      	orrs	r3, r2
 800481e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	4313      	orrs	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	22ca      	movs	r2, #202	@ 0xca
 8004832:	625a      	str	r2, [r3, #36]	@ 0x24
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2253      	movs	r2, #83	@ 0x53
 800483a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004840:	2380      	movs	r3, #128	@ 0x80
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	429a      	cmp	r2, r3
 8004846:	d14c      	bne.n	80048e2 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4957      	ldr	r1, [pc, #348]	@ (80049b0 <HAL_RTC_SetAlarm_IT+0x274>)
 8004854:	400a      	ands	r2, r1
 8004856:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2101      	movs	r1, #1
 8004864:	430a      	orrs	r2, r1
 8004866:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004868:	f7fd fcd4 	bl	8002214 <HAL_GetTick>
 800486c:	0003      	movs	r3, r0
 800486e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004870:	e016      	b.n	80048a0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004872:	f7fd fccf 	bl	8002214 <HAL_GetTick>
 8004876:	0002      	movs	r2, r0
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	1ad2      	subs	r2, r2, r3
 800487c:	23fa      	movs	r3, #250	@ 0xfa
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	429a      	cmp	r2, r3
 8004882:	d90d      	bls.n	80048a0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	22ff      	movs	r2, #255	@ 0xff
 800488a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2229      	movs	r2, #41	@ 0x29
 8004890:	2103      	movs	r1, #3
 8004892:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2228      	movs	r2, #40	@ 0x28
 8004898:	2100      	movs	r1, #0
 800489a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e082      	b.n	80049a6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	4013      	ands	r3, r2
 80048aa:	d0e2      	beq.n	8004872 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2180      	movs	r1, #128	@ 0x80
 80048c8:	0049      	lsls	r1, r1, #1
 80048ca:	430a      	orrs	r2, r1
 80048cc:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699a      	ldr	r2, [r3, #24]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2180      	movs	r1, #128	@ 0x80
 80048da:	0149      	lsls	r1, r1, #5
 80048dc:	430a      	orrs	r2, r1
 80048de:	619a      	str	r2, [r3, #24]
 80048e0:	e04b      	b.n	800497a <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	699a      	ldr	r2, [r3, #24]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4931      	ldr	r1, [pc, #196]	@ (80049b4 <HAL_RTC_SetAlarm_IT+0x278>)
 80048ee:	400a      	ands	r2, r1
 80048f0:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2102      	movs	r1, #2
 80048fe:	430a      	orrs	r2, r1
 8004900:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004902:	f7fd fc87 	bl	8002214 <HAL_GetTick>
 8004906:	0003      	movs	r3, r0
 8004908:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800490a:	e016      	b.n	800493a <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800490c:	f7fd fc82 	bl	8002214 <HAL_GetTick>
 8004910:	0002      	movs	r2, r0
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	1ad2      	subs	r2, r2, r3
 8004916:	23fa      	movs	r3, #250	@ 0xfa
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	429a      	cmp	r2, r3
 800491c:	d90d      	bls.n	800493a <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	22ff      	movs	r2, #255	@ 0xff
 8004924:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2229      	movs	r2, #41	@ 0x29
 800492a:	2103      	movs	r1, #3
 800492c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2228      	movs	r2, #40	@ 0x28
 8004932:	2100      	movs	r1, #0
 8004934:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e035      	b.n	80049a6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	2202      	movs	r2, #2
 8004942:	4013      	ands	r3, r2
 8004944:	d0e2      	beq.n	800490c <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	699a      	ldr	r2, [r3, #24]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2180      	movs	r1, #128	@ 0x80
 8004962:	0089      	lsls	r1, r1, #2
 8004964:	430a      	orrs	r2, r1
 8004966:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699a      	ldr	r2, [r3, #24]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2180      	movs	r1, #128	@ 0x80
 8004974:	0189      	lsls	r1, r1, #6
 8004976:	430a      	orrs	r2, r1
 8004978:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800497a:	4a0f      	ldr	r2, [pc, #60]	@ (80049b8 <HAL_RTC_SetAlarm_IT+0x27c>)
 800497c:	2380      	movs	r3, #128	@ 0x80
 800497e:	58d3      	ldr	r3, [r2, r3]
 8004980:	490d      	ldr	r1, [pc, #52]	@ (80049b8 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004982:	2280      	movs	r2, #128	@ 0x80
 8004984:	0312      	lsls	r2, r2, #12
 8004986:	4313      	orrs	r3, r2
 8004988:	2280      	movs	r2, #128	@ 0x80
 800498a:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	22ff      	movs	r2, #255	@ 0xff
 8004992:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2229      	movs	r2, #41	@ 0x29
 8004998:	2101      	movs	r1, #1
 800499a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2228      	movs	r2, #40	@ 0x28
 80049a0:	2100      	movs	r1, #0
 80049a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	0018      	movs	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	b009      	add	sp, #36	@ 0x24
 80049ac:	bd90      	pop	{r4, r7, pc}
 80049ae:	46c0      	nop			@ (mov r8, r8)
 80049b0:	fffffeff 	.word	0xfffffeff
 80049b4:	fffffdff 	.word	0xfffffdff
 80049b8:	40021800 	.word	0x40021800

080049bc <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	2380      	movs	r3, #128	@ 0x80
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d144      	bne.n	8004a5e <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2280      	movs	r2, #128	@ 0x80
 80049d8:	0052      	lsls	r2, r2, #1
 80049da:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e2:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ea:	045b      	lsls	r3, r3, #17
 80049ec:	0c5b      	lsrs	r3, r3, #17
 80049ee:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	0c1b      	lsrs	r3, r3, #16
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	223f      	movs	r2, #63	@ 0x3f
 80049f8:	4013      	ands	r3, r2
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	0a1b      	lsrs	r3, r3, #8
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	227f      	movs	r2, #127	@ 0x7f
 8004a08:	4013      	ands	r3, r2
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	227f      	movs	r2, #127	@ 0x7f
 8004a16:	4013      	ands	r3, r2
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	0d9b      	lsrs	r3, r3, #22
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2201      	movs	r2, #1
 8004a26:	4013      	ands	r3, r2
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	0e1b      	lsrs	r3, r3, #24
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	223f      	movs	r2, #63	@ 0x3f
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	b2d9      	uxtb	r1, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2220      	movs	r2, #32
 8004a44:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	2380      	movs	r3, #128	@ 0x80
 8004a4a:	05db      	lsls	r3, r3, #23
 8004a4c:	401a      	ands	r2, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	4a3b      	ldr	r2, [pc, #236]	@ (8004b44 <HAL_RTC_GetAlarm+0x188>)
 8004a56:	401a      	ands	r2, r3
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	615a      	str	r2, [r3, #20]
 8004a5c:	e043      	b.n	8004ae6 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2280      	movs	r2, #128	@ 0x80
 8004a62:	0092      	lsls	r2, r2, #2
 8004a64:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a6c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a74:	045b      	lsls	r3, r3, #17
 8004a76:	0c5b      	lsrs	r3, r3, #17
 8004a78:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	223f      	movs	r2, #63	@ 0x3f
 8004a82:	4013      	ands	r3, r2
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	0a1b      	lsrs	r3, r3, #8
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	227f      	movs	r2, #127	@ 0x7f
 8004a92:	4013      	ands	r3, r2
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	227f      	movs	r2, #127	@ 0x7f
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	0d9b      	lsrs	r3, r3, #22
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2201      	movs	r2, #1
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	0e1b      	lsrs	r3, r3, #24
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	223f      	movs	r2, #63	@ 0x3f
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	b2d9      	uxtb	r1, r3
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2220      	movs	r2, #32
 8004ace:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	2380      	movs	r3, #128	@ 0x80
 8004ad4:	05db      	lsls	r3, r3, #23
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	4a19      	ldr	r2, [pc, #100]	@ (8004b44 <HAL_RTC_GetAlarm+0x188>)
 8004ae0:	401a      	ands	r2, r3
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d125      	bne.n	8004b38 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	0018      	movs	r0, r3
 8004af2:	f000 f93b 	bl	8004d6c <RTC_Bcd2ToByte>
 8004af6:	0003      	movs	r3, r0
 8004af8:	001a      	movs	r2, r3
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	785b      	ldrb	r3, [r3, #1]
 8004b02:	0018      	movs	r0, r3
 8004b04:	f000 f932 	bl	8004d6c <RTC_Bcd2ToByte>
 8004b08:	0003      	movs	r3, r0
 8004b0a:	001a      	movs	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	789b      	ldrb	r3, [r3, #2]
 8004b14:	0018      	movs	r0, r3
 8004b16:	f000 f929 	bl	8004d6c <RTC_Bcd2ToByte>
 8004b1a:	0003      	movs	r3, r0
 8004b1c:	001a      	movs	r2, r3
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2220      	movs	r2, #32
 8004b26:	5c9b      	ldrb	r3, [r3, r2]
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f000 f91f 	bl	8004d6c <RTC_Bcd2ToByte>
 8004b2e:	0003      	movs	r3, r0
 8004b30:	0019      	movs	r1, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2220      	movs	r2, #32
 8004b36:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b006      	add	sp, #24
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	46c0      	nop			@ (mov r8, r8)
 8004b44:	80808080 	.word	0x80808080

08004b48 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	2380      	movs	r3, #128	@ 0x80
 8004b58:	015b      	lsls	r3, r3, #5
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d011      	beq.n	8004b82 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b64:	2201      	movs	r2, #1
 8004b66:	4013      	ands	r3, r2
 8004b68:	d00b      	beq.n	8004b82 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2101      	movs	r1, #1
 8004b76:	430a      	orrs	r2, r1
 8004b78:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f7fc fb1f 	bl	80011c0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	699a      	ldr	r2, [r3, #24]
 8004b88:	2380      	movs	r3, #128	@ 0x80
 8004b8a:	019b      	lsls	r3, r3, #6
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d011      	beq.n	8004bb4 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b96:	2202      	movs	r2, #2
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d00b      	beq.n	8004bb4 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2102      	movs	r1, #2
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f000 f9a4 	bl	8004efc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2229      	movs	r2, #41	@ 0x29
 8004bb8:	2101      	movs	r1, #1
 8004bba:	5499      	strb	r1, [r3, r2]
}
 8004bbc:	46c0      	nop			@ (mov r8, r8)
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	b002      	add	sp, #8
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a0e      	ldr	r2, [pc, #56]	@ (8004c0c <HAL_RTC_WaitForSynchro+0x48>)
 8004bd2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004bd4:	f7fd fb1e 	bl	8002214 <HAL_GetTick>
 8004bd8:	0003      	movs	r3, r0
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004bdc:	e00a      	b.n	8004bf4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004bde:	f7fd fb19 	bl	8002214 <HAL_GetTick>
 8004be2:	0002      	movs	r2, r0
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	1ad2      	subs	r2, r2, r3
 8004be8:	23fa      	movs	r3, #250	@ 0xfa
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d901      	bls.n	8004bf4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e006      	b.n	8004c02 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d0ee      	beq.n	8004bde <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	0018      	movs	r0, r3
 8004c04:	46bd      	mov	sp, r7
 8004c06:	b004      	add	sp, #16
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	46c0      	nop			@ (mov r8, r8)
 8004c0c:	0001005f 	.word	0x0001005f

08004c10 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004c18:	230f      	movs	r3, #15
 8004c1a:	18fb      	adds	r3, r7, r3
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	2240      	movs	r2, #64	@ 0x40
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d12c      	bne.n	8004c86 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2180      	movs	r1, #128	@ 0x80
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004c3c:	f7fd faea 	bl	8002214 <HAL_GetTick>
 8004c40:	0003      	movs	r3, r0
 8004c42:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004c44:	e014      	b.n	8004c70 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c46:	f7fd fae5 	bl	8002214 <HAL_GetTick>
 8004c4a:	0002      	movs	r2, r0
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	1ad2      	subs	r2, r2, r3
 8004c50:	200f      	movs	r0, #15
 8004c52:	183b      	adds	r3, r7, r0
 8004c54:	1839      	adds	r1, r7, r0
 8004c56:	7809      	ldrb	r1, [r1, #0]
 8004c58:	7019      	strb	r1, [r3, #0]
 8004c5a:	23fa      	movs	r3, #250	@ 0xfa
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d906      	bls.n	8004c70 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004c62:	183b      	adds	r3, r7, r0
 8004c64:	2203      	movs	r2, #3
 8004c66:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2229      	movs	r2, #41	@ 0x29
 8004c6c:	2103      	movs	r1, #3
 8004c6e:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	2240      	movs	r2, #64	@ 0x40
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d104      	bne.n	8004c86 <RTC_EnterInitMode+0x76>
 8004c7c:	230f      	movs	r3, #15
 8004c7e:	18fb      	adds	r3, r7, r3
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d1df      	bne.n	8004c46 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004c86:	230f      	movs	r3, #15
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	781b      	ldrb	r3, [r3, #0]
}
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b004      	add	sp, #16
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c94:	b590      	push	{r4, r7, lr}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c9c:	240f      	movs	r4, #15
 8004c9e:	193b      	adds	r3, r7, r4
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d18 <RTC_ExitInitMode+0x84>)
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d18 <RTC_ExitInitMode+0x84>)
 8004caa:	2180      	movs	r1, #128	@ 0x80
 8004cac:	438a      	bics	r2, r1
 8004cae:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004cb0:	4b19      	ldr	r3, [pc, #100]	@ (8004d18 <RTC_ExitInitMode+0x84>)
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d10d      	bne.n	8004cd6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f7ff ff81 	bl	8004bc4 <HAL_RTC_WaitForSynchro>
 8004cc2:	1e03      	subs	r3, r0, #0
 8004cc4:	d021      	beq.n	8004d0a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2229      	movs	r2, #41	@ 0x29
 8004cca:	2103      	movs	r1, #3
 8004ccc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004cce:	193b      	adds	r3, r7, r4
 8004cd0:	2203      	movs	r2, #3
 8004cd2:	701a      	strb	r2, [r3, #0]
 8004cd4:	e019      	b.n	8004d0a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004cd6:	4b10      	ldr	r3, [pc, #64]	@ (8004d18 <RTC_ExitInitMode+0x84>)
 8004cd8:	699a      	ldr	r2, [r3, #24]
 8004cda:	4b0f      	ldr	r3, [pc, #60]	@ (8004d18 <RTC_ExitInitMode+0x84>)
 8004cdc:	2120      	movs	r1, #32
 8004cde:	438a      	bics	r2, r1
 8004ce0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f7ff ff6d 	bl	8004bc4 <HAL_RTC_WaitForSynchro>
 8004cea:	1e03      	subs	r3, r0, #0
 8004cec:	d007      	beq.n	8004cfe <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2229      	movs	r2, #41	@ 0x29
 8004cf2:	2103      	movs	r1, #3
 8004cf4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004cf6:	230f      	movs	r3, #15
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	2203      	movs	r2, #3
 8004cfc:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004cfe:	4b06      	ldr	r3, [pc, #24]	@ (8004d18 <RTC_ExitInitMode+0x84>)
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	4b05      	ldr	r3, [pc, #20]	@ (8004d18 <RTC_ExitInitMode+0x84>)
 8004d04:	2120      	movs	r1, #32
 8004d06:	430a      	orrs	r2, r1
 8004d08:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004d0a:	230f      	movs	r3, #15
 8004d0c:	18fb      	adds	r3, r7, r3
 8004d0e:	781b      	ldrb	r3, [r3, #0]
}
 8004d10:	0018      	movs	r0, r3
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b005      	add	sp, #20
 8004d16:	bd90      	pop	{r4, r7, pc}
 8004d18:	40002800 	.word	0x40002800

08004d1c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	0002      	movs	r2, r0
 8004d24:	1dfb      	adds	r3, r7, #7
 8004d26:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004d2c:	230b      	movs	r3, #11
 8004d2e:	18fb      	adds	r3, r7, r3
 8004d30:	1dfa      	adds	r2, r7, #7
 8004d32:	7812      	ldrb	r2, [r2, #0]
 8004d34:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004d36:	e008      	b.n	8004d4a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004d3e:	220b      	movs	r2, #11
 8004d40:	18bb      	adds	r3, r7, r2
 8004d42:	18ba      	adds	r2, r7, r2
 8004d44:	7812      	ldrb	r2, [r2, #0]
 8004d46:	3a0a      	subs	r2, #10
 8004d48:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004d4a:	210b      	movs	r1, #11
 8004d4c:	187b      	adds	r3, r7, r1
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b09      	cmp	r3, #9
 8004d52:	d8f1      	bhi.n	8004d38 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	187b      	adds	r3, r7, r1
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	b2db      	uxtb	r3, r3
}
 8004d64:	0018      	movs	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	b004      	add	sp, #16
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	0002      	movs	r2, r0
 8004d74:	1dfb      	adds	r3, r7, #7
 8004d76:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004d78:	1dfb      	adds	r3, r7, #7
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	091b      	lsrs	r3, r3, #4
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	001a      	movs	r2, r3
 8004d82:	0013      	movs	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	189b      	adds	r3, r3, r2
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	1dfb      	adds	r3, r7, #7
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	210f      	movs	r1, #15
 8004d96:	400b      	ands	r3, r1
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	18d3      	adds	r3, r2, r3
 8004d9c:	b2db      	uxtb	r3, r3
}
 8004d9e:	0018      	movs	r0, r3
 8004da0:	46bd      	mov	sp, r7
 8004da2:	b004      	add	sp, #16
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b086      	sub	sp, #24
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	607a      	str	r2, [r7, #4]
 8004db2:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2228      	movs	r2, #40	@ 0x28
 8004db8:	5c9b      	ldrb	r3, [r3, r2]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_RTCEx_SetSmoothCalib+0x1c>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e04f      	b.n	8004e62 <HAL_RTCEx_SetSmoothCalib+0xbc>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2228      	movs	r2, #40	@ 0x28
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2229      	movs	r2, #41	@ 0x29
 8004dce:	2102      	movs	r1, #2
 8004dd0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	22ca      	movs	r2, #202	@ 0xca
 8004dd8:	625a      	str	r2, [r3, #36]	@ 0x24
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2253      	movs	r2, #83	@ 0x53
 8004de0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	2380      	movs	r3, #128	@ 0x80
 8004dea:	025b      	lsls	r3, r3, #9
 8004dec:	4013      	ands	r3, r2
 8004dee:	d022      	beq.n	8004e36 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8004df0:	f7fd fa10 	bl	8002214 <HAL_GetTick>
 8004df4:	0003      	movs	r3, r0
 8004df6:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8004df8:	e016      	b.n	8004e28 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004dfa:	f7fd fa0b 	bl	8002214 <HAL_GetTick>
 8004dfe:	0002      	movs	r2, r0
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	1ad2      	subs	r2, r2, r3
 8004e04:	23fa      	movs	r3, #250	@ 0xfa
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d90d      	bls.n	8004e28 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	22ff      	movs	r2, #255	@ 0xff
 8004e12:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2229      	movs	r2, #41	@ 0x29
 8004e18:	2103      	movs	r1, #3
 8004e1a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2228      	movs	r2, #40	@ 0x28
 8004e20:	2100      	movs	r1, #0
 8004e22:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e01c      	b.n	8004e62 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	2380      	movs	r3, #128	@ 0x80
 8004e30:	025b      	lsls	r3, r3, #9
 8004e32:	4013      	ands	r3, r2
 8004e34:	d1e1      	bne.n	8004dfa <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	0011      	movs	r1, r2
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	22ff      	movs	r2, #255	@ 0xff
 8004e4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2229      	movs	r2, #41	@ 0x29
 8004e54:	2101      	movs	r1, #1
 8004e56:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2228      	movs	r2, #40	@ 0x28
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	0018      	movs	r0, r3
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b006      	add	sp, #24
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2228      	movs	r2, #40	@ 0x28
 8004e7a:	5c9b      	ldrb	r3, [r3, r2]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e035      	b.n	8004ef0 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2228      	movs	r2, #40	@ 0x28
 8004e88:	2101      	movs	r1, #1
 8004e8a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2229      	movs	r2, #41	@ 0x29
 8004e90:	2102      	movs	r1, #2
 8004e92:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	22ca      	movs	r2, #202	@ 0xca
 8004e9a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2253      	movs	r2, #83	@ 0x53
 8004ea2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699a      	ldr	r2, [r3, #24]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4912      	ldr	r1, [pc, #72]	@ (8004ef8 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8004eb0:	400a      	ands	r2, r1
 8004eb2:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6999      	ldr	r1, [r3, #24]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699a      	ldr	r2, [r3, #24]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2180      	movs	r1, #128	@ 0x80
 8004ed0:	0409      	lsls	r1, r1, #16
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	22ff      	movs	r2, #255	@ 0xff
 8004edc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2229      	movs	r2, #41	@ 0x29
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2228      	movs	r2, #40	@ 0x28
 8004eea:	2100      	movs	r1, #0
 8004eec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b002      	add	sp, #8
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	fff7ffff 	.word	0xfff7ffff

08004efc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004f04:	46c0      	nop			@ (mov r8, r8)
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b002      	add	sp, #8
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e04a      	b.n	8004fb4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	223d      	movs	r2, #61	@ 0x3d
 8004f22:	5c9b      	ldrb	r3, [r3, r2]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d107      	bne.n	8004f3a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	223c      	movs	r2, #60	@ 0x3c
 8004f2e:	2100      	movs	r1, #0
 8004f30:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	0018      	movs	r0, r3
 8004f36:	f7fd f81b 	bl	8001f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	223d      	movs	r2, #61	@ 0x3d
 8004f3e:	2102      	movs	r1, #2
 8004f40:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3304      	adds	r3, #4
 8004f4a:	0019      	movs	r1, r3
 8004f4c:	0010      	movs	r0, r2
 8004f4e:	f000 fadd 	bl	800550c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2248      	movs	r2, #72	@ 0x48
 8004f56:	2101      	movs	r1, #1
 8004f58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	223e      	movs	r2, #62	@ 0x3e
 8004f5e:	2101      	movs	r1, #1
 8004f60:	5499      	strb	r1, [r3, r2]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	223f      	movs	r2, #63	@ 0x3f
 8004f66:	2101      	movs	r1, #1
 8004f68:	5499      	strb	r1, [r3, r2]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2240      	movs	r2, #64	@ 0x40
 8004f6e:	2101      	movs	r1, #1
 8004f70:	5499      	strb	r1, [r3, r2]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2241      	movs	r2, #65	@ 0x41
 8004f76:	2101      	movs	r1, #1
 8004f78:	5499      	strb	r1, [r3, r2]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2242      	movs	r2, #66	@ 0x42
 8004f7e:	2101      	movs	r1, #1
 8004f80:	5499      	strb	r1, [r3, r2]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2243      	movs	r2, #67	@ 0x43
 8004f86:	2101      	movs	r1, #1
 8004f88:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2244      	movs	r2, #68	@ 0x44
 8004f8e:	2101      	movs	r1, #1
 8004f90:	5499      	strb	r1, [r3, r2]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2245      	movs	r2, #69	@ 0x45
 8004f96:	2101      	movs	r1, #1
 8004f98:	5499      	strb	r1, [r3, r2]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2246      	movs	r2, #70	@ 0x46
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	5499      	strb	r1, [r3, r2]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2247      	movs	r2, #71	@ 0x47
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	223d      	movs	r2, #61	@ 0x3d
 8004fae:	2101      	movs	r1, #1
 8004fb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	b002      	add	sp, #8
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	223d      	movs	r2, #61	@ 0x3d
 8004fc8:	5c9b      	ldrb	r3, [r3, r2]
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d001      	beq.n	8004fd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e035      	b.n	8005040 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	223d      	movs	r2, #61	@ 0x3d
 8004fd8:	2102      	movs	r1, #2
 8004fda:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a19      	ldr	r2, [pc, #100]	@ (8005048 <HAL_TIM_Base_Start+0x8c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00a      	beq.n	8004ffc <HAL_TIM_Base_Start+0x40>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	2380      	movs	r3, #128	@ 0x80
 8004fec:	05db      	lsls	r3, r3, #23
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d004      	beq.n	8004ffc <HAL_TIM_Base_Start+0x40>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a15      	ldr	r2, [pc, #84]	@ (800504c <HAL_TIM_Base_Start+0x90>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d116      	bne.n	800502a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	4a13      	ldr	r2, [pc, #76]	@ (8005050 <HAL_TIM_Base_Start+0x94>)
 8005004:	4013      	ands	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b06      	cmp	r3, #6
 800500c:	d016      	beq.n	800503c <HAL_TIM_Base_Start+0x80>
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	2380      	movs	r3, #128	@ 0x80
 8005012:	025b      	lsls	r3, r3, #9
 8005014:	429a      	cmp	r2, r3
 8005016:	d011      	beq.n	800503c <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2101      	movs	r1, #1
 8005024:	430a      	orrs	r2, r1
 8005026:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005028:	e008      	b.n	800503c <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2101      	movs	r1, #1
 8005036:	430a      	orrs	r2, r1
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	e000      	b.n	800503e <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800503c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	0018      	movs	r0, r3
 8005042:	46bd      	mov	sp, r7
 8005044:	b004      	add	sp, #16
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40012c00 	.word	0x40012c00
 800504c:	40000400 	.word	0x40000400
 8005050:	00010007 	.word	0x00010007

08005054 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	4a0d      	ldr	r2, [pc, #52]	@ (8005098 <HAL_TIM_Base_Stop+0x44>)
 8005064:	4013      	ands	r3, r2
 8005066:	d10d      	bne.n	8005084 <HAL_TIM_Base_Stop+0x30>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	4a0b      	ldr	r2, [pc, #44]	@ (800509c <HAL_TIM_Base_Stop+0x48>)
 8005070:	4013      	ands	r3, r2
 8005072:	d107      	bne.n	8005084 <HAL_TIM_Base_Stop+0x30>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2101      	movs	r1, #1
 8005080:	438a      	bics	r2, r1
 8005082:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	223d      	movs	r2, #61	@ 0x3d
 8005088:	2101      	movs	r1, #1
 800508a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	0018      	movs	r0, r3
 8005090:	46bd      	mov	sp, r7
 8005092:	b002      	add	sp, #8
 8005094:	bd80      	pop	{r7, pc}
 8005096:	46c0      	nop			@ (mov r8, r8)
 8005098:	00001111 	.word	0x00001111
 800509c:	00000444 	.word	0x00000444

080050a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e04a      	b.n	8005148 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	223d      	movs	r2, #61	@ 0x3d
 80050b6:	5c9b      	ldrb	r3, [r3, r2]
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d107      	bne.n	80050ce <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	223c      	movs	r2, #60	@ 0x3c
 80050c2:	2100      	movs	r1, #0
 80050c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	0018      	movs	r0, r3
 80050ca:	f7fc ff35 	bl	8001f38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	223d      	movs	r2, #61	@ 0x3d
 80050d2:	2102      	movs	r1, #2
 80050d4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3304      	adds	r3, #4
 80050de:	0019      	movs	r1, r3
 80050e0:	0010      	movs	r0, r2
 80050e2:	f000 fa13 	bl	800550c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2248      	movs	r2, #72	@ 0x48
 80050ea:	2101      	movs	r1, #1
 80050ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	223e      	movs	r2, #62	@ 0x3e
 80050f2:	2101      	movs	r1, #1
 80050f4:	5499      	strb	r1, [r3, r2]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	223f      	movs	r2, #63	@ 0x3f
 80050fa:	2101      	movs	r1, #1
 80050fc:	5499      	strb	r1, [r3, r2]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2240      	movs	r2, #64	@ 0x40
 8005102:	2101      	movs	r1, #1
 8005104:	5499      	strb	r1, [r3, r2]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2241      	movs	r2, #65	@ 0x41
 800510a:	2101      	movs	r1, #1
 800510c:	5499      	strb	r1, [r3, r2]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2242      	movs	r2, #66	@ 0x42
 8005112:	2101      	movs	r1, #1
 8005114:	5499      	strb	r1, [r3, r2]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2243      	movs	r2, #67	@ 0x43
 800511a:	2101      	movs	r1, #1
 800511c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2244      	movs	r2, #68	@ 0x44
 8005122:	2101      	movs	r1, #1
 8005124:	5499      	strb	r1, [r3, r2]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2245      	movs	r2, #69	@ 0x45
 800512a:	2101      	movs	r1, #1
 800512c:	5499      	strb	r1, [r3, r2]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2246      	movs	r2, #70	@ 0x46
 8005132:	2101      	movs	r1, #1
 8005134:	5499      	strb	r1, [r3, r2]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2247      	movs	r2, #71	@ 0x47
 800513a:	2101      	movs	r1, #1
 800513c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	223d      	movs	r2, #61	@ 0x3d
 8005142:	2101      	movs	r1, #1
 8005144:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	0018      	movs	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	b002      	add	sp, #8
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d108      	bne.n	8005172 <HAL_TIM_PWM_Start+0x22>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	223e      	movs	r2, #62	@ 0x3e
 8005164:	5c9b      	ldrb	r3, [r3, r2]
 8005166:	b2db      	uxtb	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	1e5a      	subs	r2, r3, #1
 800516c:	4193      	sbcs	r3, r2
 800516e:	b2db      	uxtb	r3, r3
 8005170:	e037      	b.n	80051e2 <HAL_TIM_PWM_Start+0x92>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b04      	cmp	r3, #4
 8005176:	d108      	bne.n	800518a <HAL_TIM_PWM_Start+0x3a>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	223f      	movs	r2, #63	@ 0x3f
 800517c:	5c9b      	ldrb	r3, [r3, r2]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	3b01      	subs	r3, #1
 8005182:	1e5a      	subs	r2, r3, #1
 8005184:	4193      	sbcs	r3, r2
 8005186:	b2db      	uxtb	r3, r3
 8005188:	e02b      	b.n	80051e2 <HAL_TIM_PWM_Start+0x92>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b08      	cmp	r3, #8
 800518e:	d108      	bne.n	80051a2 <HAL_TIM_PWM_Start+0x52>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2240      	movs	r2, #64	@ 0x40
 8005194:	5c9b      	ldrb	r3, [r3, r2]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	1e5a      	subs	r2, r3, #1
 800519c:	4193      	sbcs	r3, r2
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	e01f      	b.n	80051e2 <HAL_TIM_PWM_Start+0x92>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b0c      	cmp	r3, #12
 80051a6:	d108      	bne.n	80051ba <HAL_TIM_PWM_Start+0x6a>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2241      	movs	r2, #65	@ 0x41
 80051ac:	5c9b      	ldrb	r3, [r3, r2]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	1e5a      	subs	r2, r3, #1
 80051b4:	4193      	sbcs	r3, r2
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	e013      	b.n	80051e2 <HAL_TIM_PWM_Start+0x92>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b10      	cmp	r3, #16
 80051be:	d108      	bne.n	80051d2 <HAL_TIM_PWM_Start+0x82>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2242      	movs	r2, #66	@ 0x42
 80051c4:	5c9b      	ldrb	r3, [r3, r2]
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	1e5a      	subs	r2, r3, #1
 80051cc:	4193      	sbcs	r3, r2
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	e007      	b.n	80051e2 <HAL_TIM_PWM_Start+0x92>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2243      	movs	r2, #67	@ 0x43
 80051d6:	5c9b      	ldrb	r3, [r3, r2]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	1e5a      	subs	r2, r3, #1
 80051de:	4193      	sbcs	r3, r2
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e081      	b.n	80052ee <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d104      	bne.n	80051fa <HAL_TIM_PWM_Start+0xaa>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	223e      	movs	r2, #62	@ 0x3e
 80051f4:	2102      	movs	r1, #2
 80051f6:	5499      	strb	r1, [r3, r2]
 80051f8:	e023      	b.n	8005242 <HAL_TIM_PWM_Start+0xf2>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d104      	bne.n	800520a <HAL_TIM_PWM_Start+0xba>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	223f      	movs	r2, #63	@ 0x3f
 8005204:	2102      	movs	r1, #2
 8005206:	5499      	strb	r1, [r3, r2]
 8005208:	e01b      	b.n	8005242 <HAL_TIM_PWM_Start+0xf2>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b08      	cmp	r3, #8
 800520e:	d104      	bne.n	800521a <HAL_TIM_PWM_Start+0xca>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2240      	movs	r2, #64	@ 0x40
 8005214:	2102      	movs	r1, #2
 8005216:	5499      	strb	r1, [r3, r2]
 8005218:	e013      	b.n	8005242 <HAL_TIM_PWM_Start+0xf2>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b0c      	cmp	r3, #12
 800521e:	d104      	bne.n	800522a <HAL_TIM_PWM_Start+0xda>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2241      	movs	r2, #65	@ 0x41
 8005224:	2102      	movs	r1, #2
 8005226:	5499      	strb	r1, [r3, r2]
 8005228:	e00b      	b.n	8005242 <HAL_TIM_PWM_Start+0xf2>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b10      	cmp	r3, #16
 800522e:	d104      	bne.n	800523a <HAL_TIM_PWM_Start+0xea>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2242      	movs	r2, #66	@ 0x42
 8005234:	2102      	movs	r1, #2
 8005236:	5499      	strb	r1, [r3, r2]
 8005238:	e003      	b.n	8005242 <HAL_TIM_PWM_Start+0xf2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2243      	movs	r2, #67	@ 0x43
 800523e:	2102      	movs	r1, #2
 8005240:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6839      	ldr	r1, [r7, #0]
 8005248:	2201      	movs	r2, #1
 800524a:	0018      	movs	r0, r3
 800524c:	f000 fc7e 	bl	8005b4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a28      	ldr	r2, [pc, #160]	@ (80052f8 <HAL_TIM_PWM_Start+0x1a8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d009      	beq.n	800526e <HAL_TIM_PWM_Start+0x11e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a27      	ldr	r2, [pc, #156]	@ (80052fc <HAL_TIM_PWM_Start+0x1ac>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d004      	beq.n	800526e <HAL_TIM_PWM_Start+0x11e>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a25      	ldr	r2, [pc, #148]	@ (8005300 <HAL_TIM_PWM_Start+0x1b0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d101      	bne.n	8005272 <HAL_TIM_PWM_Start+0x122>
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <HAL_TIM_PWM_Start+0x124>
 8005272:	2300      	movs	r3, #0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d008      	beq.n	800528a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2180      	movs	r1, #128	@ 0x80
 8005284:	0209      	lsls	r1, r1, #8
 8005286:	430a      	orrs	r2, r1
 8005288:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1a      	ldr	r2, [pc, #104]	@ (80052f8 <HAL_TIM_PWM_Start+0x1a8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00a      	beq.n	80052aa <HAL_TIM_PWM_Start+0x15a>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	2380      	movs	r3, #128	@ 0x80
 800529a:	05db      	lsls	r3, r3, #23
 800529c:	429a      	cmp	r2, r3
 800529e:	d004      	beq.n	80052aa <HAL_TIM_PWM_Start+0x15a>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a17      	ldr	r2, [pc, #92]	@ (8005304 <HAL_TIM_PWM_Start+0x1b4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d116      	bne.n	80052d8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	4a15      	ldr	r2, [pc, #84]	@ (8005308 <HAL_TIM_PWM_Start+0x1b8>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b06      	cmp	r3, #6
 80052ba:	d016      	beq.n	80052ea <HAL_TIM_PWM_Start+0x19a>
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	2380      	movs	r3, #128	@ 0x80
 80052c0:	025b      	lsls	r3, r3, #9
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d011      	beq.n	80052ea <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2101      	movs	r1, #1
 80052d2:	430a      	orrs	r2, r1
 80052d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d6:	e008      	b.n	80052ea <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2101      	movs	r1, #1
 80052e4:	430a      	orrs	r2, r1
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	e000      	b.n	80052ec <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ea:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	0018      	movs	r0, r3
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b004      	add	sp, #16
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	46c0      	nop			@ (mov r8, r8)
 80052f8:	40012c00 	.word	0x40012c00
 80052fc:	40014400 	.word	0x40014400
 8005300:	40014800 	.word	0x40014800
 8005304:	40000400 	.word	0x40000400
 8005308:	00010007 	.word	0x00010007

0800530c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005318:	2317      	movs	r3, #23
 800531a:	18fb      	adds	r3, r7, r3
 800531c:	2200      	movs	r2, #0
 800531e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	223c      	movs	r2, #60	@ 0x3c
 8005324:	5c9b      	ldrb	r3, [r3, r2]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d101      	bne.n	800532e <HAL_TIM_PWM_ConfigChannel+0x22>
 800532a:	2302      	movs	r3, #2
 800532c:	e0e5      	b.n	80054fa <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	223c      	movs	r2, #60	@ 0x3c
 8005332:	2101      	movs	r1, #1
 8005334:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b14      	cmp	r3, #20
 800533a:	d900      	bls.n	800533e <HAL_TIM_PWM_ConfigChannel+0x32>
 800533c:	e0d1      	b.n	80054e2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	009a      	lsls	r2, r3, #2
 8005342:	4b70      	ldr	r3, [pc, #448]	@ (8005504 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005344:	18d3      	adds	r3, r2, r3
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	0011      	movs	r1, r2
 8005352:	0018      	movs	r0, r3
 8005354:	f000 f95e 	bl	8005614 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699a      	ldr	r2, [r3, #24]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2108      	movs	r1, #8
 8005364:	430a      	orrs	r2, r1
 8005366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699a      	ldr	r2, [r3, #24]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2104      	movs	r1, #4
 8005374:	438a      	bics	r2, r1
 8005376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6999      	ldr	r1, [r3, #24]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	691a      	ldr	r2, [r3, #16]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	619a      	str	r2, [r3, #24]
      break;
 800538a:	e0af      	b.n	80054ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	0011      	movs	r1, r2
 8005394:	0018      	movs	r0, r3
 8005396:	f000 f9bd 	bl	8005714 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699a      	ldr	r2, [r3, #24]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2180      	movs	r1, #128	@ 0x80
 80053a6:	0109      	lsls	r1, r1, #4
 80053a8:	430a      	orrs	r2, r1
 80053aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699a      	ldr	r2, [r3, #24]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4954      	ldr	r1, [pc, #336]	@ (8005508 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80053b8:	400a      	ands	r2, r1
 80053ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6999      	ldr	r1, [r3, #24]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	021a      	lsls	r2, r3, #8
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	619a      	str	r2, [r3, #24]
      break;
 80053d0:	e08c      	b.n	80054ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	0011      	movs	r1, r2
 80053da:	0018      	movs	r0, r3
 80053dc:	f000 fa18 	bl	8005810 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	69da      	ldr	r2, [r3, #28]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2108      	movs	r1, #8
 80053ec:	430a      	orrs	r2, r1
 80053ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	69da      	ldr	r2, [r3, #28]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2104      	movs	r1, #4
 80053fc:	438a      	bics	r2, r1
 80053fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	69d9      	ldr	r1, [r3, #28]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	61da      	str	r2, [r3, #28]
      break;
 8005412:	e06b      	b.n	80054ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	0011      	movs	r1, r2
 800541c:	0018      	movs	r0, r3
 800541e:	f000 fa79 	bl	8005914 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69da      	ldr	r2, [r3, #28]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2180      	movs	r1, #128	@ 0x80
 800542e:	0109      	lsls	r1, r1, #4
 8005430:	430a      	orrs	r2, r1
 8005432:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69da      	ldr	r2, [r3, #28]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4932      	ldr	r1, [pc, #200]	@ (8005508 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005440:	400a      	ands	r2, r1
 8005442:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	69d9      	ldr	r1, [r3, #28]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	021a      	lsls	r2, r3, #8
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	61da      	str	r2, [r3, #28]
      break;
 8005458:	e048      	b.n	80054ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	0011      	movs	r1, r2
 8005462:	0018      	movs	r0, r3
 8005464:	f000 faba 	bl	80059dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2108      	movs	r1, #8
 8005474:	430a      	orrs	r2, r1
 8005476:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2104      	movs	r1, #4
 8005484:	438a      	bics	r2, r1
 8005486:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800549a:	e027      	b.n	80054ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	0011      	movs	r1, r2
 80054a4:	0018      	movs	r0, r3
 80054a6:	f000 faf3 	bl	8005a90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2180      	movs	r1, #128	@ 0x80
 80054b6:	0109      	lsls	r1, r1, #4
 80054b8:	430a      	orrs	r2, r1
 80054ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4910      	ldr	r1, [pc, #64]	@ (8005508 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80054c8:	400a      	ands	r2, r1
 80054ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	021a      	lsls	r2, r3, #8
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80054e0:	e004      	b.n	80054ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80054e2:	2317      	movs	r3, #23
 80054e4:	18fb      	adds	r3, r7, r3
 80054e6:	2201      	movs	r2, #1
 80054e8:	701a      	strb	r2, [r3, #0]
      break;
 80054ea:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	223c      	movs	r2, #60	@ 0x3c
 80054f0:	2100      	movs	r1, #0
 80054f2:	5499      	strb	r1, [r3, r2]

  return status;
 80054f4:	2317      	movs	r3, #23
 80054f6:	18fb      	adds	r3, r7, r3
 80054f8:	781b      	ldrb	r3, [r3, #0]
}
 80054fa:	0018      	movs	r0, r3
 80054fc:	46bd      	mov	sp, r7
 80054fe:	b006      	add	sp, #24
 8005500:	bd80      	pop	{r7, pc}
 8005502:	46c0      	nop			@ (mov r8, r8)
 8005504:	08005d60 	.word	0x08005d60
 8005508:	fffffbff 	.word	0xfffffbff

0800550c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a37      	ldr	r2, [pc, #220]	@ (80055fc <TIM_Base_SetConfig+0xf0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d008      	beq.n	8005536 <TIM_Base_SetConfig+0x2a>
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	2380      	movs	r3, #128	@ 0x80
 8005528:	05db      	lsls	r3, r3, #23
 800552a:	429a      	cmp	r2, r3
 800552c:	d003      	beq.n	8005536 <TIM_Base_SetConfig+0x2a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a33      	ldr	r2, [pc, #204]	@ (8005600 <TIM_Base_SetConfig+0xf4>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d108      	bne.n	8005548 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2270      	movs	r2, #112	@ 0x70
 800553a:	4393      	bics	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a2c      	ldr	r2, [pc, #176]	@ (80055fc <TIM_Base_SetConfig+0xf0>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d014      	beq.n	800557a <TIM_Base_SetConfig+0x6e>
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	2380      	movs	r3, #128	@ 0x80
 8005554:	05db      	lsls	r3, r3, #23
 8005556:	429a      	cmp	r2, r3
 8005558:	d00f      	beq.n	800557a <TIM_Base_SetConfig+0x6e>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a28      	ldr	r2, [pc, #160]	@ (8005600 <TIM_Base_SetConfig+0xf4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00b      	beq.n	800557a <TIM_Base_SetConfig+0x6e>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a27      	ldr	r2, [pc, #156]	@ (8005604 <TIM_Base_SetConfig+0xf8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d007      	beq.n	800557a <TIM_Base_SetConfig+0x6e>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a26      	ldr	r2, [pc, #152]	@ (8005608 <TIM_Base_SetConfig+0xfc>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d003      	beq.n	800557a <TIM_Base_SetConfig+0x6e>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a25      	ldr	r2, [pc, #148]	@ (800560c <TIM_Base_SetConfig+0x100>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d108      	bne.n	800558c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4a24      	ldr	r2, [pc, #144]	@ (8005610 <TIM_Base_SetConfig+0x104>)
 800557e:	4013      	ands	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2280      	movs	r2, #128	@ 0x80
 8005590:	4393      	bics	r3, r2
 8005592:	001a      	movs	r2, r3
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a11      	ldr	r2, [pc, #68]	@ (80055fc <TIM_Base_SetConfig+0xf0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d007      	beq.n	80055ca <TIM_Base_SetConfig+0xbe>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a12      	ldr	r2, [pc, #72]	@ (8005608 <TIM_Base_SetConfig+0xfc>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d003      	beq.n	80055ca <TIM_Base_SetConfig+0xbe>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a11      	ldr	r2, [pc, #68]	@ (800560c <TIM_Base_SetConfig+0x100>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d103      	bne.n	80055d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	2201      	movs	r2, #1
 80055de:	4013      	ands	r3, r2
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d106      	bne.n	80055f2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	2201      	movs	r2, #1
 80055ea:	4393      	bics	r3, r2
 80055ec:	001a      	movs	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	611a      	str	r2, [r3, #16]
  }
}
 80055f2:	46c0      	nop			@ (mov r8, r8)
 80055f4:	46bd      	mov	sp, r7
 80055f6:	b004      	add	sp, #16
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	46c0      	nop			@ (mov r8, r8)
 80055fc:	40012c00 	.word	0x40012c00
 8005600:	40000400 	.word	0x40000400
 8005604:	40002000 	.word	0x40002000
 8005608:	40014400 	.word	0x40014400
 800560c:	40014800 	.word	0x40014800
 8005610:	fffffcff 	.word	0xfffffcff

08005614 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	2201      	movs	r2, #1
 800562a:	4393      	bics	r3, r2
 800562c:	001a      	movs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4a2e      	ldr	r2, [pc, #184]	@ (80056fc <TIM_OC1_SetConfig+0xe8>)
 8005642:	4013      	ands	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2203      	movs	r2, #3
 800564a:	4393      	bics	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2202      	movs	r2, #2
 800565c:	4393      	bics	r3, r2
 800565e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a24      	ldr	r2, [pc, #144]	@ (8005700 <TIM_OC1_SetConfig+0xec>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d007      	beq.n	8005682 <TIM_OC1_SetConfig+0x6e>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a23      	ldr	r2, [pc, #140]	@ (8005704 <TIM_OC1_SetConfig+0xf0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d003      	beq.n	8005682 <TIM_OC1_SetConfig+0x6e>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a22      	ldr	r2, [pc, #136]	@ (8005708 <TIM_OC1_SetConfig+0xf4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d10c      	bne.n	800569c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2208      	movs	r2, #8
 8005686:	4393      	bics	r3, r2
 8005688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	2204      	movs	r2, #4
 8005698:	4393      	bics	r3, r2
 800569a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a18      	ldr	r2, [pc, #96]	@ (8005700 <TIM_OC1_SetConfig+0xec>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d007      	beq.n	80056b4 <TIM_OC1_SetConfig+0xa0>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a17      	ldr	r2, [pc, #92]	@ (8005704 <TIM_OC1_SetConfig+0xf0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d003      	beq.n	80056b4 <TIM_OC1_SetConfig+0xa0>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a16      	ldr	r2, [pc, #88]	@ (8005708 <TIM_OC1_SetConfig+0xf4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d111      	bne.n	80056d8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	4a15      	ldr	r2, [pc, #84]	@ (800570c <TIM_OC1_SetConfig+0xf8>)
 80056b8:	4013      	ands	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	4a14      	ldr	r2, [pc, #80]	@ (8005710 <TIM_OC1_SetConfig+0xfc>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	621a      	str	r2, [r3, #32]
}
 80056f2:	46c0      	nop			@ (mov r8, r8)
 80056f4:	46bd      	mov	sp, r7
 80056f6:	b006      	add	sp, #24
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	46c0      	nop			@ (mov r8, r8)
 80056fc:	fffeff8f 	.word	0xfffeff8f
 8005700:	40012c00 	.word	0x40012c00
 8005704:	40014400 	.word	0x40014400
 8005708:	40014800 	.word	0x40014800
 800570c:	fffffeff 	.word	0xfffffeff
 8005710:	fffffdff 	.word	0xfffffdff

08005714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	2210      	movs	r2, #16
 800572a:	4393      	bics	r3, r2
 800572c:	001a      	movs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4a2c      	ldr	r2, [pc, #176]	@ (80057f4 <TIM_OC2_SetConfig+0xe0>)
 8005742:	4013      	ands	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4a2b      	ldr	r2, [pc, #172]	@ (80057f8 <TIM_OC2_SetConfig+0xe4>)
 800574a:	4013      	ands	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2220      	movs	r2, #32
 800575e:	4393      	bics	r3, r2
 8005760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a22      	ldr	r2, [pc, #136]	@ (80057fc <TIM_OC2_SetConfig+0xe8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d10d      	bne.n	8005792 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2280      	movs	r2, #128	@ 0x80
 800577a:	4393      	bics	r3, r2
 800577c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2240      	movs	r2, #64	@ 0x40
 800578e:	4393      	bics	r3, r2
 8005790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a19      	ldr	r2, [pc, #100]	@ (80057fc <TIM_OC2_SetConfig+0xe8>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d007      	beq.n	80057aa <TIM_OC2_SetConfig+0x96>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a18      	ldr	r2, [pc, #96]	@ (8005800 <TIM_OC2_SetConfig+0xec>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d003      	beq.n	80057aa <TIM_OC2_SetConfig+0x96>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a17      	ldr	r2, [pc, #92]	@ (8005804 <TIM_OC2_SetConfig+0xf0>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d113      	bne.n	80057d2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	4a16      	ldr	r2, [pc, #88]	@ (8005808 <TIM_OC2_SetConfig+0xf4>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	4a15      	ldr	r2, [pc, #84]	@ (800580c <TIM_OC2_SetConfig+0xf8>)
 80057b6:	4013      	ands	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	621a      	str	r2, [r3, #32]
}
 80057ec:	46c0      	nop			@ (mov r8, r8)
 80057ee:	46bd      	mov	sp, r7
 80057f0:	b006      	add	sp, #24
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	feff8fff 	.word	0xfeff8fff
 80057f8:	fffffcff 	.word	0xfffffcff
 80057fc:	40012c00 	.word	0x40012c00
 8005800:	40014400 	.word	0x40014400
 8005804:	40014800 	.word	0x40014800
 8005808:	fffffbff 	.word	0xfffffbff
 800580c:	fffff7ff 	.word	0xfffff7ff

08005810 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	4a31      	ldr	r2, [pc, #196]	@ (80058ec <TIM_OC3_SetConfig+0xdc>)
 8005826:	401a      	ands	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4a2d      	ldr	r2, [pc, #180]	@ (80058f0 <TIM_OC3_SetConfig+0xe0>)
 800583c:	4013      	ands	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2203      	movs	r2, #3
 8005844:	4393      	bics	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	4a27      	ldr	r2, [pc, #156]	@ (80058f4 <TIM_OC3_SetConfig+0xe4>)
 8005856:	4013      	ands	r3, r2
 8005858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	021b      	lsls	r3, r3, #8
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a23      	ldr	r2, [pc, #140]	@ (80058f8 <TIM_OC3_SetConfig+0xe8>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d10d      	bne.n	800588a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	4a22      	ldr	r2, [pc, #136]	@ (80058fc <TIM_OC3_SetConfig+0xec>)
 8005872:	4013      	ands	r3, r2
 8005874:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	021b      	lsls	r3, r3, #8
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	4a1e      	ldr	r2, [pc, #120]	@ (8005900 <TIM_OC3_SetConfig+0xf0>)
 8005886:	4013      	ands	r3, r2
 8005888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a1a      	ldr	r2, [pc, #104]	@ (80058f8 <TIM_OC3_SetConfig+0xe8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d007      	beq.n	80058a2 <TIM_OC3_SetConfig+0x92>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a1b      	ldr	r2, [pc, #108]	@ (8005904 <TIM_OC3_SetConfig+0xf4>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d003      	beq.n	80058a2 <TIM_OC3_SetConfig+0x92>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a1a      	ldr	r2, [pc, #104]	@ (8005908 <TIM_OC3_SetConfig+0xf8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d113      	bne.n	80058ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	4a19      	ldr	r2, [pc, #100]	@ (800590c <TIM_OC3_SetConfig+0xfc>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	4a18      	ldr	r2, [pc, #96]	@ (8005910 <TIM_OC3_SetConfig+0x100>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	621a      	str	r2, [r3, #32]
}
 80058e4:	46c0      	nop			@ (mov r8, r8)
 80058e6:	46bd      	mov	sp, r7
 80058e8:	b006      	add	sp, #24
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	fffffeff 	.word	0xfffffeff
 80058f0:	fffeff8f 	.word	0xfffeff8f
 80058f4:	fffffdff 	.word	0xfffffdff
 80058f8:	40012c00 	.word	0x40012c00
 80058fc:	fffff7ff 	.word	0xfffff7ff
 8005900:	fffffbff 	.word	0xfffffbff
 8005904:	40014400 	.word	0x40014400
 8005908:	40014800 	.word	0x40014800
 800590c:	ffffefff 	.word	0xffffefff
 8005910:	ffffdfff 	.word	0xffffdfff

08005914 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	4a24      	ldr	r2, [pc, #144]	@ (80059bc <TIM_OC4_SetConfig+0xa8>)
 800592a:	401a      	ands	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4a20      	ldr	r2, [pc, #128]	@ (80059c0 <TIM_OC4_SetConfig+0xac>)
 8005940:	4013      	ands	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4a1f      	ldr	r2, [pc, #124]	@ (80059c4 <TIM_OC4_SetConfig+0xb0>)
 8005948:	4013      	ands	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	021b      	lsls	r3, r3, #8
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	4a1b      	ldr	r2, [pc, #108]	@ (80059c8 <TIM_OC4_SetConfig+0xb4>)
 800595c:	4013      	ands	r3, r2
 800595e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	031b      	lsls	r3, r3, #12
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a17      	ldr	r2, [pc, #92]	@ (80059cc <TIM_OC4_SetConfig+0xb8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d007      	beq.n	8005984 <TIM_OC4_SetConfig+0x70>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a16      	ldr	r2, [pc, #88]	@ (80059d0 <TIM_OC4_SetConfig+0xbc>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_OC4_SetConfig+0x70>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a15      	ldr	r2, [pc, #84]	@ (80059d4 <TIM_OC4_SetConfig+0xc0>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d109      	bne.n	8005998 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	4a14      	ldr	r2, [pc, #80]	@ (80059d8 <TIM_OC4_SetConfig+0xc4>)
 8005988:	4013      	ands	r3, r2
 800598a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	019b      	lsls	r3, r3, #6
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	621a      	str	r2, [r3, #32]
}
 80059b2:	46c0      	nop			@ (mov r8, r8)
 80059b4:	46bd      	mov	sp, r7
 80059b6:	b006      	add	sp, #24
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	46c0      	nop			@ (mov r8, r8)
 80059bc:	ffffefff 	.word	0xffffefff
 80059c0:	feff8fff 	.word	0xfeff8fff
 80059c4:	fffffcff 	.word	0xfffffcff
 80059c8:	ffffdfff 	.word	0xffffdfff
 80059cc:	40012c00 	.word	0x40012c00
 80059d0:	40014400 	.word	0x40014400
 80059d4:	40014800 	.word	0x40014800
 80059d8:	ffffbfff 	.word	0xffffbfff

080059dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	4a21      	ldr	r2, [pc, #132]	@ (8005a78 <TIM_OC5_SetConfig+0x9c>)
 80059f2:	401a      	ands	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4a1d      	ldr	r2, [pc, #116]	@ (8005a7c <TIM_OC5_SetConfig+0xa0>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	4a19      	ldr	r2, [pc, #100]	@ (8005a80 <TIM_OC5_SetConfig+0xa4>)
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	041b      	lsls	r3, r3, #16
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a15      	ldr	r2, [pc, #84]	@ (8005a84 <TIM_OC5_SetConfig+0xa8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d007      	beq.n	8005a42 <TIM_OC5_SetConfig+0x66>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a14      	ldr	r2, [pc, #80]	@ (8005a88 <TIM_OC5_SetConfig+0xac>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d003      	beq.n	8005a42 <TIM_OC5_SetConfig+0x66>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a13      	ldr	r2, [pc, #76]	@ (8005a8c <TIM_OC5_SetConfig+0xb0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d109      	bne.n	8005a56 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	4a0c      	ldr	r2, [pc, #48]	@ (8005a78 <TIM_OC5_SetConfig+0x9c>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	021b      	lsls	r3, r3, #8
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	621a      	str	r2, [r3, #32]
}
 8005a70:	46c0      	nop			@ (mov r8, r8)
 8005a72:	46bd      	mov	sp, r7
 8005a74:	b006      	add	sp, #24
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	fffeffff 	.word	0xfffeffff
 8005a7c:	fffeff8f 	.word	0xfffeff8f
 8005a80:	fffdffff 	.word	0xfffdffff
 8005a84:	40012c00 	.word	0x40012c00
 8005a88:	40014400 	.word	0x40014400
 8005a8c:	40014800 	.word	0x40014800

08005a90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	4a22      	ldr	r2, [pc, #136]	@ (8005b30 <TIM_OC6_SetConfig+0xa0>)
 8005aa6:	401a      	ands	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4a1e      	ldr	r2, [pc, #120]	@ (8005b34 <TIM_OC6_SetConfig+0xa4>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	4a1a      	ldr	r2, [pc, #104]	@ (8005b38 <TIM_OC6_SetConfig+0xa8>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	051b      	lsls	r3, r3, #20
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a16      	ldr	r2, [pc, #88]	@ (8005b3c <TIM_OC6_SetConfig+0xac>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d007      	beq.n	8005af8 <TIM_OC6_SetConfig+0x68>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a15      	ldr	r2, [pc, #84]	@ (8005b40 <TIM_OC6_SetConfig+0xb0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d003      	beq.n	8005af8 <TIM_OC6_SetConfig+0x68>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a14      	ldr	r2, [pc, #80]	@ (8005b44 <TIM_OC6_SetConfig+0xb4>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d109      	bne.n	8005b0c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	4a13      	ldr	r2, [pc, #76]	@ (8005b48 <TIM_OC6_SetConfig+0xb8>)
 8005afc:	4013      	ands	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	029b      	lsls	r3, r3, #10
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	621a      	str	r2, [r3, #32]
}
 8005b26:	46c0      	nop			@ (mov r8, r8)
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	b006      	add	sp, #24
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	46c0      	nop			@ (mov r8, r8)
 8005b30:	ffefffff 	.word	0xffefffff
 8005b34:	feff8fff 	.word	0xfeff8fff
 8005b38:	ffdfffff 	.word	0xffdfffff
 8005b3c:	40012c00 	.word	0x40012c00
 8005b40:	40014400 	.word	0x40014400
 8005b44:	40014800 	.word	0x40014800
 8005b48:	fffbffff 	.word	0xfffbffff

08005b4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	221f      	movs	r2, #31
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	2201      	movs	r2, #1
 8005b60:	409a      	lsls	r2, r3
 8005b62:	0013      	movs	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	43d2      	mvns	r2, r2
 8005b6e:	401a      	ands	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a1a      	ldr	r2, [r3, #32]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	211f      	movs	r1, #31
 8005b7c:	400b      	ands	r3, r1
 8005b7e:	6879      	ldr	r1, [r7, #4]
 8005b80:	4099      	lsls	r1, r3
 8005b82:	000b      	movs	r3, r1
 8005b84:	431a      	orrs	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	621a      	str	r2, [r3, #32]
}
 8005b8a:	46c0      	nop			@ (mov r8, r8)
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	b006      	add	sp, #24
 8005b90:	bd80      	pop	{r7, pc}
	...

08005b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	223c      	movs	r2, #60	@ 0x3c
 8005ba2:	5c9b      	ldrb	r3, [r3, r2]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e050      	b.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	223c      	movs	r2, #60	@ 0x3c
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	223d      	movs	r2, #61	@ 0x3d
 8005bb8:	2102      	movs	r1, #2
 8005bba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a21      	ldr	r2, [pc, #132]	@ (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d108      	bne.n	8005be8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4a20      	ldr	r2, [pc, #128]	@ (8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2270      	movs	r2, #112	@ 0x70
 8005bec:	4393      	bics	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a14      	ldr	r2, [pc, #80]	@ (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00a      	beq.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	2380      	movs	r3, #128	@ 0x80
 8005c12:	05db      	lsls	r3, r3, #23
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d004      	beq.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a10      	ldr	r2, [pc, #64]	@ (8005c60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d10c      	bne.n	8005c3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2280      	movs	r2, #128	@ 0x80
 8005c26:	4393      	bics	r3, r2
 8005c28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	223d      	movs	r2, #61	@ 0x3d
 8005c40:	2101      	movs	r1, #1
 8005c42:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	223c      	movs	r2, #60	@ 0x3c
 8005c48:	2100      	movs	r1, #0
 8005c4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	0018      	movs	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	b004      	add	sp, #16
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	46c0      	nop			@ (mov r8, r8)
 8005c58:	40012c00 	.word	0x40012c00
 8005c5c:	ff0fffff 	.word	0xff0fffff
 8005c60:	40000400 	.word	0x40000400

08005c64 <memset>:
 8005c64:	0003      	movs	r3, r0
 8005c66:	1882      	adds	r2, r0, r2
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d100      	bne.n	8005c6e <memset+0xa>
 8005c6c:	4770      	bx	lr
 8005c6e:	7019      	strb	r1, [r3, #0]
 8005c70:	3301      	adds	r3, #1
 8005c72:	e7f9      	b.n	8005c68 <memset+0x4>

08005c74 <__libc_init_array>:
 8005c74:	b570      	push	{r4, r5, r6, lr}
 8005c76:	2600      	movs	r6, #0
 8005c78:	4c0c      	ldr	r4, [pc, #48]	@ (8005cac <__libc_init_array+0x38>)
 8005c7a:	4d0d      	ldr	r5, [pc, #52]	@ (8005cb0 <__libc_init_array+0x3c>)
 8005c7c:	1b64      	subs	r4, r4, r5
 8005c7e:	10a4      	asrs	r4, r4, #2
 8005c80:	42a6      	cmp	r6, r4
 8005c82:	d109      	bne.n	8005c98 <__libc_init_array+0x24>
 8005c84:	2600      	movs	r6, #0
 8005c86:	f000 f823 	bl	8005cd0 <_init>
 8005c8a:	4c0a      	ldr	r4, [pc, #40]	@ (8005cb4 <__libc_init_array+0x40>)
 8005c8c:	4d0a      	ldr	r5, [pc, #40]	@ (8005cb8 <__libc_init_array+0x44>)
 8005c8e:	1b64      	subs	r4, r4, r5
 8005c90:	10a4      	asrs	r4, r4, #2
 8005c92:	42a6      	cmp	r6, r4
 8005c94:	d105      	bne.n	8005ca2 <__libc_init_array+0x2e>
 8005c96:	bd70      	pop	{r4, r5, r6, pc}
 8005c98:	00b3      	lsls	r3, r6, #2
 8005c9a:	58eb      	ldr	r3, [r5, r3]
 8005c9c:	4798      	blx	r3
 8005c9e:	3601      	adds	r6, #1
 8005ca0:	e7ee      	b.n	8005c80 <__libc_init_array+0xc>
 8005ca2:	00b3      	lsls	r3, r6, #2
 8005ca4:	58eb      	ldr	r3, [r5, r3]
 8005ca6:	4798      	blx	r3
 8005ca8:	3601      	adds	r6, #1
 8005caa:	e7f2      	b.n	8005c92 <__libc_init_array+0x1e>
 8005cac:	08005db4 	.word	0x08005db4
 8005cb0:	08005db4 	.word	0x08005db4
 8005cb4:	08005db8 	.word	0x08005db8
 8005cb8:	08005db4 	.word	0x08005db4

08005cbc <memcpy>:
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	b510      	push	{r4, lr}
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d100      	bne.n	8005cc6 <memcpy+0xa>
 8005cc4:	bd10      	pop	{r4, pc}
 8005cc6:	5ccc      	ldrb	r4, [r1, r3]
 8005cc8:	54c4      	strb	r4, [r0, r3]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	e7f8      	b.n	8005cc0 <memcpy+0x4>
	...

08005cd0 <_init>:
 8005cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd2:	46c0      	nop			@ (mov r8, r8)
 8005cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd6:	bc08      	pop	{r3}
 8005cd8:	469e      	mov	lr, r3
 8005cda:	4770      	bx	lr

08005cdc <_fini>:
 8005cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cde:	46c0      	nop			@ (mov r8, r8)
 8005ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce2:	bc08      	pop	{r3}
 8005ce4:	469e      	mov	lr, r3
 8005ce6:	4770      	bx	lr
